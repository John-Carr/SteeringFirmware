
SteeringFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d26c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  0800d32c  0800d32c  0001d32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddc8  0800ddc8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800ddc8  0800ddc8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ddc8  0800ddc8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ddc8  0800ddc8  0001ddc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ddd0  0800ddd0  0001ddd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ddd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e68  20000084  0800de5c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002eec  0800de5c  00022eec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047481  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086b9  00000000  00000000  0006752d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002270  00000000  00000000  0006fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002008  00000000  00000000  00071e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000afa7  00000000  00000000  00073e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026edc  00000000  00000000  0007ee07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0848  00000000  00000000  000a5ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016652b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a90  00000000  00000000  00166580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d314 	.word	0x0800d314

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	0800d314 	.word	0x0800d314

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_f2uiz>:
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	b510      	push	{r4, lr}
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	1c04      	adds	r4, r0, #0
 800023c:	f000 fc8c 	bl	8000b58 <__aeabi_fcmpge>
 8000240:	2800      	cmp	r0, #0
 8000242:	d103      	bne.n	800024c <__aeabi_f2uiz+0x18>
 8000244:	1c20      	adds	r0, r4, #0
 8000246:	f000 fbfb 	bl	8000a40 <__aeabi_f2iz>
 800024a:	bd10      	pop	{r4, pc}
 800024c:	219e      	movs	r1, #158	; 0x9e
 800024e:	1c20      	adds	r0, r4, #0
 8000250:	05c9      	lsls	r1, r1, #23
 8000252:	f000 fa2d 	bl	80006b0 <__aeabi_fsub>
 8000256:	f000 fbf3 	bl	8000a40 <__aeabi_f2iz>
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	061b      	lsls	r3, r3, #24
 800025e:	469c      	mov	ip, r3
 8000260:	4460      	add	r0, ip
 8000262:	e7f2      	b.n	800024a <__aeabi_f2uiz+0x16>

08000264 <__aeabi_fdiv>:
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000266:	464f      	mov	r7, r9
 8000268:	4646      	mov	r6, r8
 800026a:	46d6      	mov	lr, sl
 800026c:	0245      	lsls	r5, r0, #9
 800026e:	b5c0      	push	{r6, r7, lr}
 8000270:	0047      	lsls	r7, r0, #1
 8000272:	1c0c      	adds	r4, r1, #0
 8000274:	0a6d      	lsrs	r5, r5, #9
 8000276:	0e3f      	lsrs	r7, r7, #24
 8000278:	0fc6      	lsrs	r6, r0, #31
 800027a:	2f00      	cmp	r7, #0
 800027c:	d066      	beq.n	800034c <__aeabi_fdiv+0xe8>
 800027e:	2fff      	cmp	r7, #255	; 0xff
 8000280:	d06c      	beq.n	800035c <__aeabi_fdiv+0xf8>
 8000282:	2300      	movs	r3, #0
 8000284:	00ea      	lsls	r2, r5, #3
 8000286:	2580      	movs	r5, #128	; 0x80
 8000288:	4699      	mov	r9, r3
 800028a:	469a      	mov	sl, r3
 800028c:	04ed      	lsls	r5, r5, #19
 800028e:	4315      	orrs	r5, r2
 8000290:	3f7f      	subs	r7, #127	; 0x7f
 8000292:	0260      	lsls	r0, r4, #9
 8000294:	0061      	lsls	r1, r4, #1
 8000296:	0a43      	lsrs	r3, r0, #9
 8000298:	4698      	mov	r8, r3
 800029a:	0e09      	lsrs	r1, r1, #24
 800029c:	0fe4      	lsrs	r4, r4, #31
 800029e:	2900      	cmp	r1, #0
 80002a0:	d048      	beq.n	8000334 <__aeabi_fdiv+0xd0>
 80002a2:	29ff      	cmp	r1, #255	; 0xff
 80002a4:	d010      	beq.n	80002c8 <__aeabi_fdiv+0x64>
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	00d8      	lsls	r0, r3, #3
 80002aa:	04d2      	lsls	r2, r2, #19
 80002ac:	4302      	orrs	r2, r0
 80002ae:	4690      	mov	r8, r2
 80002b0:	2000      	movs	r0, #0
 80002b2:	397f      	subs	r1, #127	; 0x7f
 80002b4:	464a      	mov	r2, r9
 80002b6:	0033      	movs	r3, r6
 80002b8:	1a7f      	subs	r7, r7, r1
 80002ba:	4302      	orrs	r2, r0
 80002bc:	496c      	ldr	r1, [pc, #432]	; (8000470 <__aeabi_fdiv+0x20c>)
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	588a      	ldr	r2, [r1, r2]
 80002c2:	4063      	eors	r3, r4
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4697      	mov	pc, r2
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d16d      	bne.n	80003a8 <__aeabi_fdiv+0x144>
 80002cc:	2002      	movs	r0, #2
 80002ce:	3fff      	subs	r7, #255	; 0xff
 80002d0:	e033      	b.n	800033a <__aeabi_fdiv+0xd6>
 80002d2:	2300      	movs	r3, #0
 80002d4:	4698      	mov	r8, r3
 80002d6:	0026      	movs	r6, r4
 80002d8:	4645      	mov	r5, r8
 80002da:	4682      	mov	sl, r0
 80002dc:	4653      	mov	r3, sl
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fdiv+0x80>
 80002e2:	e07f      	b.n	80003e4 <__aeabi_fdiv+0x180>
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	d100      	bne.n	80002ea <__aeabi_fdiv+0x86>
 80002e8:	e094      	b.n	8000414 <__aeabi_fdiv+0x1b0>
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d017      	beq.n	800031e <__aeabi_fdiv+0xba>
 80002ee:	0038      	movs	r0, r7
 80002f0:	307f      	adds	r0, #127	; 0x7f
 80002f2:	2800      	cmp	r0, #0
 80002f4:	dd5f      	ble.n	80003b6 <__aeabi_fdiv+0x152>
 80002f6:	076b      	lsls	r3, r5, #29
 80002f8:	d004      	beq.n	8000304 <__aeabi_fdiv+0xa0>
 80002fa:	230f      	movs	r3, #15
 80002fc:	402b      	ands	r3, r5
 80002fe:	2b04      	cmp	r3, #4
 8000300:	d000      	beq.n	8000304 <__aeabi_fdiv+0xa0>
 8000302:	3504      	adds	r5, #4
 8000304:	012b      	lsls	r3, r5, #4
 8000306:	d503      	bpl.n	8000310 <__aeabi_fdiv+0xac>
 8000308:	0038      	movs	r0, r7
 800030a:	4b5a      	ldr	r3, [pc, #360]	; (8000474 <__aeabi_fdiv+0x210>)
 800030c:	3080      	adds	r0, #128	; 0x80
 800030e:	401d      	ands	r5, r3
 8000310:	28fe      	cmp	r0, #254	; 0xfe
 8000312:	dc67      	bgt.n	80003e4 <__aeabi_fdiv+0x180>
 8000314:	01ad      	lsls	r5, r5, #6
 8000316:	0a6d      	lsrs	r5, r5, #9
 8000318:	b2c0      	uxtb	r0, r0
 800031a:	e002      	b.n	8000322 <__aeabi_fdiv+0xbe>
 800031c:	001e      	movs	r6, r3
 800031e:	2000      	movs	r0, #0
 8000320:	2500      	movs	r5, #0
 8000322:	05c0      	lsls	r0, r0, #23
 8000324:	4328      	orrs	r0, r5
 8000326:	07f6      	lsls	r6, r6, #31
 8000328:	4330      	orrs	r0, r6
 800032a:	bce0      	pop	{r5, r6, r7}
 800032c:	46ba      	mov	sl, r7
 800032e:	46b1      	mov	r9, r6
 8000330:	46a8      	mov	r8, r5
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	2b00      	cmp	r3, #0
 8000336:	d12b      	bne.n	8000390 <__aeabi_fdiv+0x12c>
 8000338:	2001      	movs	r0, #1
 800033a:	464a      	mov	r2, r9
 800033c:	0033      	movs	r3, r6
 800033e:	494e      	ldr	r1, [pc, #312]	; (8000478 <__aeabi_fdiv+0x214>)
 8000340:	4302      	orrs	r2, r0
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	588a      	ldr	r2, [r1, r2]
 8000346:	4063      	eors	r3, r4
 8000348:	b2db      	uxtb	r3, r3
 800034a:	4697      	mov	pc, r2
 800034c:	2d00      	cmp	r5, #0
 800034e:	d113      	bne.n	8000378 <__aeabi_fdiv+0x114>
 8000350:	2304      	movs	r3, #4
 8000352:	4699      	mov	r9, r3
 8000354:	3b03      	subs	r3, #3
 8000356:	2700      	movs	r7, #0
 8000358:	469a      	mov	sl, r3
 800035a:	e79a      	b.n	8000292 <__aeabi_fdiv+0x2e>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d105      	bne.n	800036c <__aeabi_fdiv+0x108>
 8000360:	2308      	movs	r3, #8
 8000362:	4699      	mov	r9, r3
 8000364:	3b06      	subs	r3, #6
 8000366:	27ff      	movs	r7, #255	; 0xff
 8000368:	469a      	mov	sl, r3
 800036a:	e792      	b.n	8000292 <__aeabi_fdiv+0x2e>
 800036c:	230c      	movs	r3, #12
 800036e:	4699      	mov	r9, r3
 8000370:	3b09      	subs	r3, #9
 8000372:	27ff      	movs	r7, #255	; 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e78c      	b.n	8000292 <__aeabi_fdiv+0x2e>
 8000378:	0028      	movs	r0, r5
 800037a:	f000 fbf7 	bl	8000b6c <__clzsi2>
 800037e:	2776      	movs	r7, #118	; 0x76
 8000380:	1f43      	subs	r3, r0, #5
 8000382:	409d      	lsls	r5, r3
 8000384:	2300      	movs	r3, #0
 8000386:	427f      	negs	r7, r7
 8000388:	4699      	mov	r9, r3
 800038a:	469a      	mov	sl, r3
 800038c:	1a3f      	subs	r7, r7, r0
 800038e:	e780      	b.n	8000292 <__aeabi_fdiv+0x2e>
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fbeb 	bl	8000b6c <__clzsi2>
 8000396:	4642      	mov	r2, r8
 8000398:	1f43      	subs	r3, r0, #5
 800039a:	2176      	movs	r1, #118	; 0x76
 800039c:	409a      	lsls	r2, r3
 800039e:	4249      	negs	r1, r1
 80003a0:	1a09      	subs	r1, r1, r0
 80003a2:	4690      	mov	r8, r2
 80003a4:	2000      	movs	r0, #0
 80003a6:	e785      	b.n	80002b4 <__aeabi_fdiv+0x50>
 80003a8:	21ff      	movs	r1, #255	; 0xff
 80003aa:	2003      	movs	r0, #3
 80003ac:	e782      	b.n	80002b4 <__aeabi_fdiv+0x50>
 80003ae:	001e      	movs	r6, r3
 80003b0:	20ff      	movs	r0, #255	; 0xff
 80003b2:	2500      	movs	r5, #0
 80003b4:	e7b5      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003b6:	2301      	movs	r3, #1
 80003b8:	1a1b      	subs	r3, r3, r0
 80003ba:	2b1b      	cmp	r3, #27
 80003bc:	dcaf      	bgt.n	800031e <__aeabi_fdiv+0xba>
 80003be:	379e      	adds	r7, #158	; 0x9e
 80003c0:	0029      	movs	r1, r5
 80003c2:	40bd      	lsls	r5, r7
 80003c4:	40d9      	lsrs	r1, r3
 80003c6:	1e6a      	subs	r2, r5, #1
 80003c8:	4195      	sbcs	r5, r2
 80003ca:	430d      	orrs	r5, r1
 80003cc:	076b      	lsls	r3, r5, #29
 80003ce:	d004      	beq.n	80003da <__aeabi_fdiv+0x176>
 80003d0:	230f      	movs	r3, #15
 80003d2:	402b      	ands	r3, r5
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	d000      	beq.n	80003da <__aeabi_fdiv+0x176>
 80003d8:	3504      	adds	r5, #4
 80003da:	016b      	lsls	r3, r5, #5
 80003dc:	d544      	bpl.n	8000468 <__aeabi_fdiv+0x204>
 80003de:	2001      	movs	r0, #1
 80003e0:	2500      	movs	r5, #0
 80003e2:	e79e      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	2500      	movs	r5, #0
 80003e8:	e79b      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003ea:	2580      	movs	r5, #128	; 0x80
 80003ec:	2600      	movs	r6, #0
 80003ee:	20ff      	movs	r0, #255	; 0xff
 80003f0:	03ed      	lsls	r5, r5, #15
 80003f2:	e796      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003f4:	2300      	movs	r3, #0
 80003f6:	4698      	mov	r8, r3
 80003f8:	2080      	movs	r0, #128	; 0x80
 80003fa:	03c0      	lsls	r0, r0, #15
 80003fc:	4205      	tst	r5, r0
 80003fe:	d009      	beq.n	8000414 <__aeabi_fdiv+0x1b0>
 8000400:	4643      	mov	r3, r8
 8000402:	4203      	tst	r3, r0
 8000404:	d106      	bne.n	8000414 <__aeabi_fdiv+0x1b0>
 8000406:	4645      	mov	r5, r8
 8000408:	4305      	orrs	r5, r0
 800040a:	026d      	lsls	r5, r5, #9
 800040c:	0026      	movs	r6, r4
 800040e:	20ff      	movs	r0, #255	; 0xff
 8000410:	0a6d      	lsrs	r5, r5, #9
 8000412:	e786      	b.n	8000322 <__aeabi_fdiv+0xbe>
 8000414:	2080      	movs	r0, #128	; 0x80
 8000416:	03c0      	lsls	r0, r0, #15
 8000418:	4305      	orrs	r5, r0
 800041a:	026d      	lsls	r5, r5, #9
 800041c:	20ff      	movs	r0, #255	; 0xff
 800041e:	0a6d      	lsrs	r5, r5, #9
 8000420:	e77f      	b.n	8000322 <__aeabi_fdiv+0xbe>
 8000422:	4641      	mov	r1, r8
 8000424:	016a      	lsls	r2, r5, #5
 8000426:	0148      	lsls	r0, r1, #5
 8000428:	4282      	cmp	r2, r0
 800042a:	d219      	bcs.n	8000460 <__aeabi_fdiv+0x1fc>
 800042c:	211b      	movs	r1, #27
 800042e:	2500      	movs	r5, #0
 8000430:	3f01      	subs	r7, #1
 8000432:	2601      	movs	r6, #1
 8000434:	0014      	movs	r4, r2
 8000436:	006d      	lsls	r5, r5, #1
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	2c00      	cmp	r4, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_fdiv+0x1de>
 800043e:	4290      	cmp	r0, r2
 8000440:	d801      	bhi.n	8000446 <__aeabi_fdiv+0x1e2>
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	4335      	orrs	r5, r6
 8000446:	3901      	subs	r1, #1
 8000448:	2900      	cmp	r1, #0
 800044a:	d1f3      	bne.n	8000434 <__aeabi_fdiv+0x1d0>
 800044c:	1e50      	subs	r0, r2, #1
 800044e:	4182      	sbcs	r2, r0
 8000450:	0038      	movs	r0, r7
 8000452:	307f      	adds	r0, #127	; 0x7f
 8000454:	001e      	movs	r6, r3
 8000456:	4315      	orrs	r5, r2
 8000458:	2800      	cmp	r0, #0
 800045a:	dd00      	ble.n	800045e <__aeabi_fdiv+0x1fa>
 800045c:	e74b      	b.n	80002f6 <__aeabi_fdiv+0x92>
 800045e:	e7aa      	b.n	80003b6 <__aeabi_fdiv+0x152>
 8000460:	211a      	movs	r1, #26
 8000462:	2501      	movs	r5, #1
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	e7e4      	b.n	8000432 <__aeabi_fdiv+0x1ce>
 8000468:	01ad      	lsls	r5, r5, #6
 800046a:	2000      	movs	r0, #0
 800046c:	0a6d      	lsrs	r5, r5, #9
 800046e:	e758      	b.n	8000322 <__aeabi_fdiv+0xbe>
 8000470:	0800d4cc 	.word	0x0800d4cc
 8000474:	f7ffffff 	.word	0xf7ffffff
 8000478:	0800d50c 	.word	0x0800d50c

0800047c <__aeabi_fmul>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	4657      	mov	r7, sl
 8000480:	464e      	mov	r6, r9
 8000482:	4645      	mov	r5, r8
 8000484:	46de      	mov	lr, fp
 8000486:	0244      	lsls	r4, r0, #9
 8000488:	b5e0      	push	{r5, r6, r7, lr}
 800048a:	0045      	lsls	r5, r0, #1
 800048c:	1c0f      	adds	r7, r1, #0
 800048e:	0a64      	lsrs	r4, r4, #9
 8000490:	0e2d      	lsrs	r5, r5, #24
 8000492:	0fc6      	lsrs	r6, r0, #31
 8000494:	2d00      	cmp	r5, #0
 8000496:	d047      	beq.n	8000528 <__aeabi_fmul+0xac>
 8000498:	2dff      	cmp	r5, #255	; 0xff
 800049a:	d04d      	beq.n	8000538 <__aeabi_fmul+0xbc>
 800049c:	2300      	movs	r3, #0
 800049e:	2080      	movs	r0, #128	; 0x80
 80004a0:	469a      	mov	sl, r3
 80004a2:	469b      	mov	fp, r3
 80004a4:	00e4      	lsls	r4, r4, #3
 80004a6:	04c0      	lsls	r0, r0, #19
 80004a8:	4304      	orrs	r4, r0
 80004aa:	3d7f      	subs	r5, #127	; 0x7f
 80004ac:	0278      	lsls	r0, r7, #9
 80004ae:	0a43      	lsrs	r3, r0, #9
 80004b0:	4699      	mov	r9, r3
 80004b2:	007a      	lsls	r2, r7, #1
 80004b4:	0ffb      	lsrs	r3, r7, #31
 80004b6:	4698      	mov	r8, r3
 80004b8:	0e12      	lsrs	r2, r2, #24
 80004ba:	464b      	mov	r3, r9
 80004bc:	d044      	beq.n	8000548 <__aeabi_fmul+0xcc>
 80004be:	2aff      	cmp	r2, #255	; 0xff
 80004c0:	d011      	beq.n	80004e6 <__aeabi_fmul+0x6a>
 80004c2:	00d8      	lsls	r0, r3, #3
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	04db      	lsls	r3, r3, #19
 80004c8:	4303      	orrs	r3, r0
 80004ca:	4699      	mov	r9, r3
 80004cc:	2000      	movs	r0, #0
 80004ce:	3a7f      	subs	r2, #127	; 0x7f
 80004d0:	18ad      	adds	r5, r5, r2
 80004d2:	4647      	mov	r7, r8
 80004d4:	4653      	mov	r3, sl
 80004d6:	4077      	eors	r7, r6
 80004d8:	1c69      	adds	r1, r5, #1
 80004da:	2b0f      	cmp	r3, #15
 80004dc:	d83f      	bhi.n	800055e <__aeabi_fmul+0xe2>
 80004de:	4a72      	ldr	r2, [pc, #456]	; (80006a8 <__aeabi_fmul+0x22c>)
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	58d3      	ldr	r3, [r2, r3]
 80004e4:	469f      	mov	pc, r3
 80004e6:	35ff      	adds	r5, #255	; 0xff
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_fmul+0x72>
 80004ec:	e079      	b.n	80005e2 <__aeabi_fmul+0x166>
 80004ee:	4652      	mov	r2, sl
 80004f0:	2302      	movs	r3, #2
 80004f2:	431a      	orrs	r2, r3
 80004f4:	4692      	mov	sl, r2
 80004f6:	2002      	movs	r0, #2
 80004f8:	e7eb      	b.n	80004d2 <__aeabi_fmul+0x56>
 80004fa:	4647      	mov	r7, r8
 80004fc:	464c      	mov	r4, r9
 80004fe:	4683      	mov	fp, r0
 8000500:	465b      	mov	r3, fp
 8000502:	2b02      	cmp	r3, #2
 8000504:	d028      	beq.n	8000558 <__aeabi_fmul+0xdc>
 8000506:	2b03      	cmp	r3, #3
 8000508:	d100      	bne.n	800050c <__aeabi_fmul+0x90>
 800050a:	e0c6      	b.n	800069a <__aeabi_fmul+0x21e>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d14f      	bne.n	80005b0 <__aeabi_fmul+0x134>
 8000510:	2000      	movs	r0, #0
 8000512:	2400      	movs	r4, #0
 8000514:	05c0      	lsls	r0, r0, #23
 8000516:	07ff      	lsls	r7, r7, #31
 8000518:	4320      	orrs	r0, r4
 800051a:	4338      	orrs	r0, r7
 800051c:	bcf0      	pop	{r4, r5, r6, r7}
 800051e:	46bb      	mov	fp, r7
 8000520:	46b2      	mov	sl, r6
 8000522:	46a9      	mov	r9, r5
 8000524:	46a0      	mov	r8, r4
 8000526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000528:	2c00      	cmp	r4, #0
 800052a:	d171      	bne.n	8000610 <__aeabi_fmul+0x194>
 800052c:	2304      	movs	r3, #4
 800052e:	469a      	mov	sl, r3
 8000530:	3b03      	subs	r3, #3
 8000532:	2500      	movs	r5, #0
 8000534:	469b      	mov	fp, r3
 8000536:	e7b9      	b.n	80004ac <__aeabi_fmul+0x30>
 8000538:	2c00      	cmp	r4, #0
 800053a:	d163      	bne.n	8000604 <__aeabi_fmul+0x188>
 800053c:	2308      	movs	r3, #8
 800053e:	469a      	mov	sl, r3
 8000540:	3b06      	subs	r3, #6
 8000542:	25ff      	movs	r5, #255	; 0xff
 8000544:	469b      	mov	fp, r3
 8000546:	e7b1      	b.n	80004ac <__aeabi_fmul+0x30>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d150      	bne.n	80005ee <__aeabi_fmul+0x172>
 800054c:	4652      	mov	r2, sl
 800054e:	3301      	adds	r3, #1
 8000550:	431a      	orrs	r2, r3
 8000552:	4692      	mov	sl, r2
 8000554:	2001      	movs	r0, #1
 8000556:	e7bc      	b.n	80004d2 <__aeabi_fmul+0x56>
 8000558:	20ff      	movs	r0, #255	; 0xff
 800055a:	2400      	movs	r4, #0
 800055c:	e7da      	b.n	8000514 <__aeabi_fmul+0x98>
 800055e:	4648      	mov	r0, r9
 8000560:	0c26      	lsrs	r6, r4, #16
 8000562:	0424      	lsls	r4, r4, #16
 8000564:	0c22      	lsrs	r2, r4, #16
 8000566:	0404      	lsls	r4, r0, #16
 8000568:	0c24      	lsrs	r4, r4, #16
 800056a:	464b      	mov	r3, r9
 800056c:	0020      	movs	r0, r4
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	4350      	muls	r0, r2
 8000572:	4374      	muls	r4, r6
 8000574:	435a      	muls	r2, r3
 8000576:	435e      	muls	r6, r3
 8000578:	1912      	adds	r2, r2, r4
 800057a:	0c03      	lsrs	r3, r0, #16
 800057c:	189b      	adds	r3, r3, r2
 800057e:	429c      	cmp	r4, r3
 8000580:	d903      	bls.n	800058a <__aeabi_fmul+0x10e>
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0252      	lsls	r2, r2, #9
 8000586:	4694      	mov	ip, r2
 8000588:	4466      	add	r6, ip
 800058a:	0400      	lsls	r0, r0, #16
 800058c:	041a      	lsls	r2, r3, #16
 800058e:	0c00      	lsrs	r0, r0, #16
 8000590:	1812      	adds	r2, r2, r0
 8000592:	0194      	lsls	r4, r2, #6
 8000594:	1e60      	subs	r0, r4, #1
 8000596:	4184      	sbcs	r4, r0
 8000598:	0c1b      	lsrs	r3, r3, #16
 800059a:	0e92      	lsrs	r2, r2, #26
 800059c:	199b      	adds	r3, r3, r6
 800059e:	4314      	orrs	r4, r2
 80005a0:	019b      	lsls	r3, r3, #6
 80005a2:	431c      	orrs	r4, r3
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	d572      	bpl.n	800068e <__aeabi_fmul+0x212>
 80005a8:	2001      	movs	r0, #1
 80005aa:	0863      	lsrs	r3, r4, #1
 80005ac:	4004      	ands	r4, r0
 80005ae:	431c      	orrs	r4, r3
 80005b0:	0008      	movs	r0, r1
 80005b2:	307f      	adds	r0, #127	; 0x7f
 80005b4:	2800      	cmp	r0, #0
 80005b6:	dd3c      	ble.n	8000632 <__aeabi_fmul+0x1b6>
 80005b8:	0763      	lsls	r3, r4, #29
 80005ba:	d004      	beq.n	80005c6 <__aeabi_fmul+0x14a>
 80005bc:	230f      	movs	r3, #15
 80005be:	4023      	ands	r3, r4
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fmul+0x14a>
 80005c4:	3404      	adds	r4, #4
 80005c6:	0123      	lsls	r3, r4, #4
 80005c8:	d503      	bpl.n	80005d2 <__aeabi_fmul+0x156>
 80005ca:	3180      	adds	r1, #128	; 0x80
 80005cc:	0008      	movs	r0, r1
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <__aeabi_fmul+0x230>)
 80005d0:	401c      	ands	r4, r3
 80005d2:	28fe      	cmp	r0, #254	; 0xfe
 80005d4:	dcc0      	bgt.n	8000558 <__aeabi_fmul+0xdc>
 80005d6:	01a4      	lsls	r4, r4, #6
 80005d8:	0a64      	lsrs	r4, r4, #9
 80005da:	b2c0      	uxtb	r0, r0
 80005dc:	e79a      	b.n	8000514 <__aeabi_fmul+0x98>
 80005de:	0037      	movs	r7, r6
 80005e0:	e78e      	b.n	8000500 <__aeabi_fmul+0x84>
 80005e2:	4652      	mov	r2, sl
 80005e4:	2303      	movs	r3, #3
 80005e6:	431a      	orrs	r2, r3
 80005e8:	4692      	mov	sl, r2
 80005ea:	2003      	movs	r0, #3
 80005ec:	e771      	b.n	80004d2 <__aeabi_fmul+0x56>
 80005ee:	4648      	mov	r0, r9
 80005f0:	f000 fabc 	bl	8000b6c <__clzsi2>
 80005f4:	464a      	mov	r2, r9
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	409a      	lsls	r2, r3
 80005fa:	1a2d      	subs	r5, r5, r0
 80005fc:	4691      	mov	r9, r2
 80005fe:	2000      	movs	r0, #0
 8000600:	3d76      	subs	r5, #118	; 0x76
 8000602:	e766      	b.n	80004d2 <__aeabi_fmul+0x56>
 8000604:	230c      	movs	r3, #12
 8000606:	469a      	mov	sl, r3
 8000608:	3b09      	subs	r3, #9
 800060a:	25ff      	movs	r5, #255	; 0xff
 800060c:	469b      	mov	fp, r3
 800060e:	e74d      	b.n	80004ac <__aeabi_fmul+0x30>
 8000610:	0020      	movs	r0, r4
 8000612:	f000 faab 	bl	8000b6c <__clzsi2>
 8000616:	2576      	movs	r5, #118	; 0x76
 8000618:	1f43      	subs	r3, r0, #5
 800061a:	409c      	lsls	r4, r3
 800061c:	2300      	movs	r3, #0
 800061e:	426d      	negs	r5, r5
 8000620:	469a      	mov	sl, r3
 8000622:	469b      	mov	fp, r3
 8000624:	1a2d      	subs	r5, r5, r0
 8000626:	e741      	b.n	80004ac <__aeabi_fmul+0x30>
 8000628:	2480      	movs	r4, #128	; 0x80
 800062a:	2700      	movs	r7, #0
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	03e4      	lsls	r4, r4, #15
 8000630:	e770      	b.n	8000514 <__aeabi_fmul+0x98>
 8000632:	2301      	movs	r3, #1
 8000634:	1a1b      	subs	r3, r3, r0
 8000636:	2b1b      	cmp	r3, #27
 8000638:	dd00      	ble.n	800063c <__aeabi_fmul+0x1c0>
 800063a:	e769      	b.n	8000510 <__aeabi_fmul+0x94>
 800063c:	319e      	adds	r1, #158	; 0x9e
 800063e:	0020      	movs	r0, r4
 8000640:	408c      	lsls	r4, r1
 8000642:	40d8      	lsrs	r0, r3
 8000644:	1e63      	subs	r3, r4, #1
 8000646:	419c      	sbcs	r4, r3
 8000648:	4304      	orrs	r4, r0
 800064a:	0763      	lsls	r3, r4, #29
 800064c:	d004      	beq.n	8000658 <__aeabi_fmul+0x1dc>
 800064e:	230f      	movs	r3, #15
 8000650:	4023      	ands	r3, r4
 8000652:	2b04      	cmp	r3, #4
 8000654:	d000      	beq.n	8000658 <__aeabi_fmul+0x1dc>
 8000656:	3404      	adds	r4, #4
 8000658:	0163      	lsls	r3, r4, #5
 800065a:	d51a      	bpl.n	8000692 <__aeabi_fmul+0x216>
 800065c:	2001      	movs	r0, #1
 800065e:	2400      	movs	r4, #0
 8000660:	e758      	b.n	8000514 <__aeabi_fmul+0x98>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	03c0      	lsls	r0, r0, #15
 8000666:	4204      	tst	r4, r0
 8000668:	d009      	beq.n	800067e <__aeabi_fmul+0x202>
 800066a:	464b      	mov	r3, r9
 800066c:	4203      	tst	r3, r0
 800066e:	d106      	bne.n	800067e <__aeabi_fmul+0x202>
 8000670:	464c      	mov	r4, r9
 8000672:	4304      	orrs	r4, r0
 8000674:	0264      	lsls	r4, r4, #9
 8000676:	4647      	mov	r7, r8
 8000678:	20ff      	movs	r0, #255	; 0xff
 800067a:	0a64      	lsrs	r4, r4, #9
 800067c:	e74a      	b.n	8000514 <__aeabi_fmul+0x98>
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	03c0      	lsls	r0, r0, #15
 8000682:	4304      	orrs	r4, r0
 8000684:	0264      	lsls	r4, r4, #9
 8000686:	0037      	movs	r7, r6
 8000688:	20ff      	movs	r0, #255	; 0xff
 800068a:	0a64      	lsrs	r4, r4, #9
 800068c:	e742      	b.n	8000514 <__aeabi_fmul+0x98>
 800068e:	0029      	movs	r1, r5
 8000690:	e78e      	b.n	80005b0 <__aeabi_fmul+0x134>
 8000692:	01a4      	lsls	r4, r4, #6
 8000694:	2000      	movs	r0, #0
 8000696:	0a64      	lsrs	r4, r4, #9
 8000698:	e73c      	b.n	8000514 <__aeabi_fmul+0x98>
 800069a:	2080      	movs	r0, #128	; 0x80
 800069c:	03c0      	lsls	r0, r0, #15
 800069e:	4304      	orrs	r4, r0
 80006a0:	0264      	lsls	r4, r4, #9
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	e735      	b.n	8000514 <__aeabi_fmul+0x98>
 80006a8:	0800d54c 	.word	0x0800d54c
 80006ac:	f7ffffff 	.word	0xf7ffffff

080006b0 <__aeabi_fsub>:
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	4646      	mov	r6, r8
 80006b4:	46d6      	mov	lr, sl
 80006b6:	464f      	mov	r7, r9
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	00da      	lsls	r2, r3, #3
 80006be:	4694      	mov	ip, r2
 80006c0:	024a      	lsls	r2, r1, #9
 80006c2:	b5c0      	push	{r6, r7, lr}
 80006c4:	0044      	lsls	r4, r0, #1
 80006c6:	0a56      	lsrs	r6, r2, #9
 80006c8:	1c05      	adds	r5, r0, #0
 80006ca:	46b0      	mov	r8, r6
 80006cc:	0e24      	lsrs	r4, r4, #24
 80006ce:	004e      	lsls	r6, r1, #1
 80006d0:	0992      	lsrs	r2, r2, #6
 80006d2:	001f      	movs	r7, r3
 80006d4:	0020      	movs	r0, r4
 80006d6:	4692      	mov	sl, r2
 80006d8:	0fed      	lsrs	r5, r5, #31
 80006da:	0e36      	lsrs	r6, r6, #24
 80006dc:	0fc9      	lsrs	r1, r1, #31
 80006de:	2eff      	cmp	r6, #255	; 0xff
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fsub+0x34>
 80006e2:	e07f      	b.n	80007e4 <__aeabi_fsub+0x134>
 80006e4:	2201      	movs	r2, #1
 80006e6:	4051      	eors	r1, r2
 80006e8:	428d      	cmp	r5, r1
 80006ea:	d051      	beq.n	8000790 <__aeabi_fsub+0xe0>
 80006ec:	1ba2      	subs	r2, r4, r6
 80006ee:	4691      	mov	r9, r2
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_fsub+0x46>
 80006f4:	e07e      	b.n	80007f4 <__aeabi_fsub+0x144>
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_fsub+0x4c>
 80006fa:	e099      	b.n	8000830 <__aeabi_fsub+0x180>
 80006fc:	2cff      	cmp	r4, #255	; 0xff
 80006fe:	d100      	bne.n	8000702 <__aeabi_fsub+0x52>
 8000700:	e08c      	b.n	800081c <__aeabi_fsub+0x16c>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	4652      	mov	r2, sl
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	431a      	orrs	r2, r3
 800070a:	4692      	mov	sl, r2
 800070c:	464a      	mov	r2, r9
 800070e:	2301      	movs	r3, #1
 8000710:	2a1b      	cmp	r2, #27
 8000712:	dc08      	bgt.n	8000726 <__aeabi_fsub+0x76>
 8000714:	4653      	mov	r3, sl
 8000716:	2120      	movs	r1, #32
 8000718:	40d3      	lsrs	r3, r2
 800071a:	1a89      	subs	r1, r1, r2
 800071c:	4652      	mov	r2, sl
 800071e:	408a      	lsls	r2, r1
 8000720:	1e51      	subs	r1, r2, #1
 8000722:	418a      	sbcs	r2, r1
 8000724:	4313      	orrs	r3, r2
 8000726:	4662      	mov	r2, ip
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	015a      	lsls	r2, r3, #5
 800072c:	d400      	bmi.n	8000730 <__aeabi_fsub+0x80>
 800072e:	e0f3      	b.n	8000918 <__aeabi_fsub+0x268>
 8000730:	019b      	lsls	r3, r3, #6
 8000732:	099e      	lsrs	r6, r3, #6
 8000734:	0030      	movs	r0, r6
 8000736:	f000 fa19 	bl	8000b6c <__clzsi2>
 800073a:	3805      	subs	r0, #5
 800073c:	4086      	lsls	r6, r0
 800073e:	4284      	cmp	r4, r0
 8000740:	dd00      	ble.n	8000744 <__aeabi_fsub+0x94>
 8000742:	e0f7      	b.n	8000934 <__aeabi_fsub+0x284>
 8000744:	0032      	movs	r2, r6
 8000746:	1b04      	subs	r4, r0, r4
 8000748:	2020      	movs	r0, #32
 800074a:	3401      	adds	r4, #1
 800074c:	40e2      	lsrs	r2, r4
 800074e:	1b04      	subs	r4, r0, r4
 8000750:	40a6      	lsls	r6, r4
 8000752:	0033      	movs	r3, r6
 8000754:	1e5e      	subs	r6, r3, #1
 8000756:	41b3      	sbcs	r3, r6
 8000758:	2400      	movs	r4, #0
 800075a:	4313      	orrs	r3, r2
 800075c:	075a      	lsls	r2, r3, #29
 800075e:	d004      	beq.n	800076a <__aeabi_fsub+0xba>
 8000760:	220f      	movs	r2, #15
 8000762:	401a      	ands	r2, r3
 8000764:	2a04      	cmp	r2, #4
 8000766:	d000      	beq.n	800076a <__aeabi_fsub+0xba>
 8000768:	3304      	adds	r3, #4
 800076a:	015a      	lsls	r2, r3, #5
 800076c:	d400      	bmi.n	8000770 <__aeabi_fsub+0xc0>
 800076e:	e0d6      	b.n	800091e <__aeabi_fsub+0x26e>
 8000770:	1c62      	adds	r2, r4, #1
 8000772:	2cfe      	cmp	r4, #254	; 0xfe
 8000774:	d100      	bne.n	8000778 <__aeabi_fsub+0xc8>
 8000776:	e0da      	b.n	800092e <__aeabi_fsub+0x27e>
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	0a5f      	lsrs	r7, r3, #9
 800077c:	b2d0      	uxtb	r0, r2
 800077e:	05c0      	lsls	r0, r0, #23
 8000780:	4338      	orrs	r0, r7
 8000782:	07ed      	lsls	r5, r5, #31
 8000784:	4328      	orrs	r0, r5
 8000786:	bce0      	pop	{r5, r6, r7}
 8000788:	46ba      	mov	sl, r7
 800078a:	46b1      	mov	r9, r6
 800078c:	46a8      	mov	r8, r5
 800078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000790:	1ba2      	subs	r2, r4, r6
 8000792:	4691      	mov	r9, r2
 8000794:	2a00      	cmp	r2, #0
 8000796:	dd63      	ble.n	8000860 <__aeabi_fsub+0x1b0>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fsub+0xee>
 800079c:	e099      	b.n	80008d2 <__aeabi_fsub+0x222>
 800079e:	2cff      	cmp	r4, #255	; 0xff
 80007a0:	d03c      	beq.n	800081c <__aeabi_fsub+0x16c>
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	4652      	mov	r2, sl
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	431a      	orrs	r2, r3
 80007aa:	4692      	mov	sl, r2
 80007ac:	464a      	mov	r2, r9
 80007ae:	2301      	movs	r3, #1
 80007b0:	2a1b      	cmp	r2, #27
 80007b2:	dc08      	bgt.n	80007c6 <__aeabi_fsub+0x116>
 80007b4:	4653      	mov	r3, sl
 80007b6:	2120      	movs	r1, #32
 80007b8:	40d3      	lsrs	r3, r2
 80007ba:	1a89      	subs	r1, r1, r2
 80007bc:	4652      	mov	r2, sl
 80007be:	408a      	lsls	r2, r1
 80007c0:	1e51      	subs	r1, r2, #1
 80007c2:	418a      	sbcs	r2, r1
 80007c4:	4313      	orrs	r3, r2
 80007c6:	4463      	add	r3, ip
 80007c8:	015a      	lsls	r2, r3, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fsub+0x11e>
 80007cc:	e0a4      	b.n	8000918 <__aeabi_fsub+0x268>
 80007ce:	3401      	adds	r4, #1
 80007d0:	2cff      	cmp	r4, #255	; 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fsub+0x126>
 80007d4:	e0ab      	b.n	800092e <__aeabi_fsub+0x27e>
 80007d6:	2201      	movs	r2, #1
 80007d8:	4997      	ldr	r1, [pc, #604]	; (8000a38 <__aeabi_fsub+0x388>)
 80007da:	401a      	ands	r2, r3
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	400b      	ands	r3, r1
 80007e0:	4313      	orrs	r3, r2
 80007e2:	e7bb      	b.n	800075c <__aeabi_fsub+0xac>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d032      	beq.n	800084e <__aeabi_fsub+0x19e>
 80007e8:	428d      	cmp	r5, r1
 80007ea:	d035      	beq.n	8000858 <__aeabi_fsub+0x1a8>
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	4252      	negs	r2, r2
 80007f0:	4691      	mov	r9, r2
 80007f2:	44a1      	add	r9, r4
 80007f4:	464a      	mov	r2, r9
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d051      	beq.n	800089e <__aeabi_fsub+0x1ee>
 80007fa:	1b30      	subs	r0, r6, r4
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0x152>
 8000800:	e09c      	b.n	800093c <__aeabi_fsub+0x28c>
 8000802:	4663      	mov	r3, ip
 8000804:	2b00      	cmp	r3, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fsub+0x15a>
 8000808:	e0df      	b.n	80009ca <__aeabi_fsub+0x31a>
 800080a:	3801      	subs	r0, #1
 800080c:	2800      	cmp	r0, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0x162>
 8000810:	e0f7      	b.n	8000a02 <__aeabi_fsub+0x352>
 8000812:	2eff      	cmp	r6, #255	; 0xff
 8000814:	d000      	beq.n	8000818 <__aeabi_fsub+0x168>
 8000816:	e099      	b.n	800094c <__aeabi_fsub+0x29c>
 8000818:	000d      	movs	r5, r1
 800081a:	4643      	mov	r3, r8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fsub+0x172>
 8000820:	e085      	b.n	800092e <__aeabi_fsub+0x27e>
 8000822:	2780      	movs	r7, #128	; 0x80
 8000824:	03ff      	lsls	r7, r7, #15
 8000826:	431f      	orrs	r7, r3
 8000828:	027f      	lsls	r7, r7, #9
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	0a7f      	lsrs	r7, r7, #9
 800082e:	e7a6      	b.n	800077e <__aeabi_fsub+0xce>
 8000830:	4652      	mov	r2, sl
 8000832:	2a00      	cmp	r2, #0
 8000834:	d074      	beq.n	8000920 <__aeabi_fsub+0x270>
 8000836:	2201      	movs	r2, #1
 8000838:	4252      	negs	r2, r2
 800083a:	4690      	mov	r8, r2
 800083c:	44c1      	add	r9, r8
 800083e:	464a      	mov	r2, r9
 8000840:	2a00      	cmp	r2, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fsub+0x196>
 8000844:	e0c8      	b.n	80009d8 <__aeabi_fsub+0x328>
 8000846:	2cff      	cmp	r4, #255	; 0xff
 8000848:	d000      	beq.n	800084c <__aeabi_fsub+0x19c>
 800084a:	e75f      	b.n	800070c <__aeabi_fsub+0x5c>
 800084c:	e7e6      	b.n	800081c <__aeabi_fsub+0x16c>
 800084e:	2201      	movs	r2, #1
 8000850:	4051      	eors	r1, r2
 8000852:	42a9      	cmp	r1, r5
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x1a8>
 8000856:	e749      	b.n	80006ec <__aeabi_fsub+0x3c>
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	4252      	negs	r2, r2
 800085c:	4691      	mov	r9, r2
 800085e:	44a1      	add	r9, r4
 8000860:	464a      	mov	r2, r9
 8000862:	2a00      	cmp	r2, #0
 8000864:	d043      	beq.n	80008ee <__aeabi_fsub+0x23e>
 8000866:	1b31      	subs	r1, r6, r4
 8000868:	2c00      	cmp	r4, #0
 800086a:	d100      	bne.n	800086e <__aeabi_fsub+0x1be>
 800086c:	e08c      	b.n	8000988 <__aeabi_fsub+0x2d8>
 800086e:	2eff      	cmp	r6, #255	; 0xff
 8000870:	d100      	bne.n	8000874 <__aeabi_fsub+0x1c4>
 8000872:	e092      	b.n	800099a <__aeabi_fsub+0x2ea>
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	4662      	mov	r2, ip
 8000878:	04db      	lsls	r3, r3, #19
 800087a:	431a      	orrs	r2, r3
 800087c:	4694      	mov	ip, r2
 800087e:	2301      	movs	r3, #1
 8000880:	291b      	cmp	r1, #27
 8000882:	dc09      	bgt.n	8000898 <__aeabi_fsub+0x1e8>
 8000884:	2020      	movs	r0, #32
 8000886:	4663      	mov	r3, ip
 8000888:	4662      	mov	r2, ip
 800088a:	40cb      	lsrs	r3, r1
 800088c:	1a41      	subs	r1, r0, r1
 800088e:	408a      	lsls	r2, r1
 8000890:	0011      	movs	r1, r2
 8000892:	1e48      	subs	r0, r1, #1
 8000894:	4181      	sbcs	r1, r0
 8000896:	430b      	orrs	r3, r1
 8000898:	0034      	movs	r4, r6
 800089a:	4453      	add	r3, sl
 800089c:	e794      	b.n	80007c8 <__aeabi_fsub+0x118>
 800089e:	22fe      	movs	r2, #254	; 0xfe
 80008a0:	1c66      	adds	r6, r4, #1
 80008a2:	4232      	tst	r2, r6
 80008a4:	d164      	bne.n	8000970 <__aeabi_fsub+0x2c0>
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_fsub+0x1fc>
 80008aa:	e082      	b.n	80009b2 <__aeabi_fsub+0x302>
 80008ac:	4663      	mov	r3, ip
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fsub+0x204>
 80008b2:	e0ab      	b.n	8000a0c <__aeabi_fsub+0x35c>
 80008b4:	4653      	mov	r3, sl
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x20c>
 80008ba:	e760      	b.n	800077e <__aeabi_fsub+0xce>
 80008bc:	4663      	mov	r3, ip
 80008be:	4652      	mov	r2, sl
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d400      	bmi.n	80008c8 <__aeabi_fsub+0x218>
 80008c6:	e0aa      	b.n	8000a1e <__aeabi_fsub+0x36e>
 80008c8:	4663      	mov	r3, ip
 80008ca:	4652      	mov	r2, sl
 80008cc:	000d      	movs	r5, r1
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	e744      	b.n	800075c <__aeabi_fsub+0xac>
 80008d2:	4652      	mov	r2, sl
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d023      	beq.n	8000920 <__aeabi_fsub+0x270>
 80008d8:	2201      	movs	r2, #1
 80008da:	4252      	negs	r2, r2
 80008dc:	4690      	mov	r8, r2
 80008de:	44c1      	add	r9, r8
 80008e0:	464a      	mov	r2, r9
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	d075      	beq.n	80009d2 <__aeabi_fsub+0x322>
 80008e6:	2cff      	cmp	r4, #255	; 0xff
 80008e8:	d000      	beq.n	80008ec <__aeabi_fsub+0x23c>
 80008ea:	e75f      	b.n	80007ac <__aeabi_fsub+0xfc>
 80008ec:	e796      	b.n	800081c <__aeabi_fsub+0x16c>
 80008ee:	26fe      	movs	r6, #254	; 0xfe
 80008f0:	3401      	adds	r4, #1
 80008f2:	4226      	tst	r6, r4
 80008f4:	d153      	bne.n	800099e <__aeabi_fsub+0x2ee>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d172      	bne.n	80009e0 <__aeabi_fsub+0x330>
 80008fa:	4663      	mov	r3, ip
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_fsub+0x252>
 8000900:	e093      	b.n	8000a2a <__aeabi_fsub+0x37a>
 8000902:	4653      	mov	r3, sl
 8000904:	2b00      	cmp	r3, #0
 8000906:	d100      	bne.n	800090a <__aeabi_fsub+0x25a>
 8000908:	e739      	b.n	800077e <__aeabi_fsub+0xce>
 800090a:	4463      	add	r3, ip
 800090c:	2400      	movs	r4, #0
 800090e:	015a      	lsls	r2, r3, #5
 8000910:	d502      	bpl.n	8000918 <__aeabi_fsub+0x268>
 8000912:	4a4a      	ldr	r2, [pc, #296]	; (8000a3c <__aeabi_fsub+0x38c>)
 8000914:	3401      	adds	r4, #1
 8000916:	4013      	ands	r3, r2
 8000918:	075a      	lsls	r2, r3, #29
 800091a:	d000      	beq.n	800091e <__aeabi_fsub+0x26e>
 800091c:	e720      	b.n	8000760 <__aeabi_fsub+0xb0>
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	2cff      	cmp	r4, #255	; 0xff
 8000922:	d100      	bne.n	8000926 <__aeabi_fsub+0x276>
 8000924:	e77a      	b.n	800081c <__aeabi_fsub+0x16c>
 8000926:	025b      	lsls	r3, r3, #9
 8000928:	0a5f      	lsrs	r7, r3, #9
 800092a:	b2e0      	uxtb	r0, r4
 800092c:	e727      	b.n	800077e <__aeabi_fsub+0xce>
 800092e:	20ff      	movs	r0, #255	; 0xff
 8000930:	2700      	movs	r7, #0
 8000932:	e724      	b.n	800077e <__aeabi_fsub+0xce>
 8000934:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <__aeabi_fsub+0x38c>)
 8000936:	1a24      	subs	r4, r4, r0
 8000938:	4033      	ands	r3, r6
 800093a:	e70f      	b.n	800075c <__aeabi_fsub+0xac>
 800093c:	2eff      	cmp	r6, #255	; 0xff
 800093e:	d100      	bne.n	8000942 <__aeabi_fsub+0x292>
 8000940:	e76a      	b.n	8000818 <__aeabi_fsub+0x168>
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	4662      	mov	r2, ip
 8000946:	04db      	lsls	r3, r3, #19
 8000948:	431a      	orrs	r2, r3
 800094a:	4694      	mov	ip, r2
 800094c:	2301      	movs	r3, #1
 800094e:	281b      	cmp	r0, #27
 8000950:	dc09      	bgt.n	8000966 <__aeabi_fsub+0x2b6>
 8000952:	2420      	movs	r4, #32
 8000954:	4663      	mov	r3, ip
 8000956:	4662      	mov	r2, ip
 8000958:	40c3      	lsrs	r3, r0
 800095a:	1a20      	subs	r0, r4, r0
 800095c:	4082      	lsls	r2, r0
 800095e:	0010      	movs	r0, r2
 8000960:	1e44      	subs	r4, r0, #1
 8000962:	41a0      	sbcs	r0, r4
 8000964:	4303      	orrs	r3, r0
 8000966:	4652      	mov	r2, sl
 8000968:	000d      	movs	r5, r1
 800096a:	0034      	movs	r4, r6
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	e6dc      	b.n	800072a <__aeabi_fsub+0x7a>
 8000970:	4663      	mov	r3, ip
 8000972:	4652      	mov	r2, sl
 8000974:	1a9e      	subs	r6, r3, r2
 8000976:	0173      	lsls	r3, r6, #5
 8000978:	d417      	bmi.n	80009aa <__aeabi_fsub+0x2fa>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fsub+0x2d0>
 800097e:	e6d9      	b.n	8000734 <__aeabi_fsub+0x84>
 8000980:	2500      	movs	r5, #0
 8000982:	2000      	movs	r0, #0
 8000984:	2700      	movs	r7, #0
 8000986:	e6fa      	b.n	800077e <__aeabi_fsub+0xce>
 8000988:	4663      	mov	r3, ip
 800098a:	2b00      	cmp	r3, #0
 800098c:	d044      	beq.n	8000a18 <__aeabi_fsub+0x368>
 800098e:	3901      	subs	r1, #1
 8000990:	2900      	cmp	r1, #0
 8000992:	d04c      	beq.n	8000a2e <__aeabi_fsub+0x37e>
 8000994:	2eff      	cmp	r6, #255	; 0xff
 8000996:	d000      	beq.n	800099a <__aeabi_fsub+0x2ea>
 8000998:	e771      	b.n	800087e <__aeabi_fsub+0x1ce>
 800099a:	4643      	mov	r3, r8
 800099c:	e73e      	b.n	800081c <__aeabi_fsub+0x16c>
 800099e:	2cff      	cmp	r4, #255	; 0xff
 80009a0:	d0c5      	beq.n	800092e <__aeabi_fsub+0x27e>
 80009a2:	4652      	mov	r2, sl
 80009a4:	4462      	add	r2, ip
 80009a6:	0853      	lsrs	r3, r2, #1
 80009a8:	e7b6      	b.n	8000918 <__aeabi_fsub+0x268>
 80009aa:	4663      	mov	r3, ip
 80009ac:	000d      	movs	r5, r1
 80009ae:	1ad6      	subs	r6, r2, r3
 80009b0:	e6c0      	b.n	8000734 <__aeabi_fsub+0x84>
 80009b2:	4662      	mov	r2, ip
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d116      	bne.n	80009e6 <__aeabi_fsub+0x336>
 80009b8:	4653      	mov	r3, sl
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fsub+0x310>
 80009be:	e72b      	b.n	8000818 <__aeabi_fsub+0x168>
 80009c0:	2780      	movs	r7, #128	; 0x80
 80009c2:	2500      	movs	r5, #0
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	03ff      	lsls	r7, r7, #15
 80009c8:	e6d9      	b.n	800077e <__aeabi_fsub+0xce>
 80009ca:	000d      	movs	r5, r1
 80009cc:	4643      	mov	r3, r8
 80009ce:	0034      	movs	r4, r6
 80009d0:	e7a6      	b.n	8000920 <__aeabi_fsub+0x270>
 80009d2:	4653      	mov	r3, sl
 80009d4:	4463      	add	r3, ip
 80009d6:	e6f7      	b.n	80007c8 <__aeabi_fsub+0x118>
 80009d8:	4663      	mov	r3, ip
 80009da:	4652      	mov	r2, sl
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	e6a4      	b.n	800072a <__aeabi_fsub+0x7a>
 80009e0:	4662      	mov	r2, ip
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d0d9      	beq.n	800099a <__aeabi_fsub+0x2ea>
 80009e6:	4652      	mov	r2, sl
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_fsub+0x33e>
 80009ec:	e716      	b.n	800081c <__aeabi_fsub+0x16c>
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	03d2      	lsls	r2, r2, #15
 80009f2:	4213      	tst	r3, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fsub+0x348>
 80009f6:	e711      	b.n	800081c <__aeabi_fsub+0x16c>
 80009f8:	4640      	mov	r0, r8
 80009fa:	4210      	tst	r0, r2
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fsub+0x350>
 80009fe:	e70d      	b.n	800081c <__aeabi_fsub+0x16c>
 8000a00:	e70a      	b.n	8000818 <__aeabi_fsub+0x168>
 8000a02:	4652      	mov	r2, sl
 8000a04:	000d      	movs	r5, r1
 8000a06:	0034      	movs	r4, r6
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	e68e      	b.n	800072a <__aeabi_fsub+0x7a>
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d008      	beq.n	8000a24 <__aeabi_fsub+0x374>
 8000a12:	000d      	movs	r5, r1
 8000a14:	4647      	mov	r7, r8
 8000a16:	e6b2      	b.n	800077e <__aeabi_fsub+0xce>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	0034      	movs	r4, r6
 8000a1c:	e780      	b.n	8000920 <__aeabi_fsub+0x270>
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x374>
 8000a22:	e779      	b.n	8000918 <__aeabi_fsub+0x268>
 8000a24:	2500      	movs	r5, #0
 8000a26:	2700      	movs	r7, #0
 8000a28:	e6a9      	b.n	800077e <__aeabi_fsub+0xce>
 8000a2a:	4647      	mov	r7, r8
 8000a2c:	e6a7      	b.n	800077e <__aeabi_fsub+0xce>
 8000a2e:	4653      	mov	r3, sl
 8000a30:	0034      	movs	r4, r6
 8000a32:	4463      	add	r3, ip
 8000a34:	e6c8      	b.n	80007c8 <__aeabi_fsub+0x118>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	7dffffff 	.word	0x7dffffff
 8000a3c:	fbffffff 	.word	0xfbffffff

08000a40 <__aeabi_f2iz>:
 8000a40:	0241      	lsls	r1, r0, #9
 8000a42:	0042      	lsls	r2, r0, #1
 8000a44:	0fc3      	lsrs	r3, r0, #31
 8000a46:	0a49      	lsrs	r1, r1, #9
 8000a48:	2000      	movs	r0, #0
 8000a4a:	0e12      	lsrs	r2, r2, #24
 8000a4c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a4e:	d903      	bls.n	8000a58 <__aeabi_f2iz+0x18>
 8000a50:	2a9d      	cmp	r2, #157	; 0x9d
 8000a52:	d902      	bls.n	8000a5a <__aeabi_f2iz+0x1a>
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <__aeabi_f2iz+0x3c>)
 8000a56:	1898      	adds	r0, r3, r2
 8000a58:	4770      	bx	lr
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	0400      	lsls	r0, r0, #16
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	2a95      	cmp	r2, #149	; 0x95
 8000a62:	dc07      	bgt.n	8000a74 <__aeabi_f2iz+0x34>
 8000a64:	2096      	movs	r0, #150	; 0x96
 8000a66:	1a82      	subs	r2, r0, r2
 8000a68:	40d1      	lsrs	r1, r2
 8000a6a:	4248      	negs	r0, r1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f3      	bne.n	8000a58 <__aeabi_f2iz+0x18>
 8000a70:	0008      	movs	r0, r1
 8000a72:	e7f1      	b.n	8000a58 <__aeabi_f2iz+0x18>
 8000a74:	3a96      	subs	r2, #150	; 0x96
 8000a76:	4091      	lsls	r1, r2
 8000a78:	e7f7      	b.n	8000a6a <__aeabi_f2iz+0x2a>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	7fffffff 	.word	0x7fffffff

08000a80 <__aeabi_ui2f>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	1e05      	subs	r5, r0, #0
 8000a84:	d00e      	beq.n	8000aa4 <__aeabi_ui2f+0x24>
 8000a86:	f000 f871 	bl	8000b6c <__clzsi2>
 8000a8a:	239e      	movs	r3, #158	; 0x9e
 8000a8c:	0004      	movs	r4, r0
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2b96      	cmp	r3, #150	; 0x96
 8000a92:	dc0c      	bgt.n	8000aae <__aeabi_ui2f+0x2e>
 8000a94:	2808      	cmp	r0, #8
 8000a96:	dd01      	ble.n	8000a9c <__aeabi_ui2f+0x1c>
 8000a98:	3c08      	subs	r4, #8
 8000a9a:	40a5      	lsls	r5, r4
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	b2d8      	uxtb	r0, r3
 8000aa2:	e001      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	05c0      	lsls	r0, r0, #23
 8000aaa:	4328      	orrs	r0, r5
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	2b99      	cmp	r3, #153	; 0x99
 8000ab0:	dd09      	ble.n	8000ac6 <__aeabi_ui2f+0x46>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	0029      	movs	r1, r5
 8000ab6:	321b      	adds	r2, #27
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	1e4a      	subs	r2, r1, #1
 8000abc:	4191      	sbcs	r1, r2
 8000abe:	2205      	movs	r2, #5
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	40d5      	lsrs	r5, r2
 8000ac4:	430d      	orrs	r5, r1
 8000ac6:	2c05      	cmp	r4, #5
 8000ac8:	dd01      	ble.n	8000ace <__aeabi_ui2f+0x4e>
 8000aca:	1f62      	subs	r2, r4, #5
 8000acc:	4095      	lsls	r5, r2
 8000ace:	0029      	movs	r1, r5
 8000ad0:	4e08      	ldr	r6, [pc, #32]	; (8000af4 <__aeabi_ui2f+0x74>)
 8000ad2:	4031      	ands	r1, r6
 8000ad4:	076a      	lsls	r2, r5, #29
 8000ad6:	d009      	beq.n	8000aec <__aeabi_ui2f+0x6c>
 8000ad8:	200f      	movs	r0, #15
 8000ada:	4028      	ands	r0, r5
 8000adc:	2804      	cmp	r0, #4
 8000ade:	d005      	beq.n	8000aec <__aeabi_ui2f+0x6c>
 8000ae0:	3104      	adds	r1, #4
 8000ae2:	014a      	lsls	r2, r1, #5
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_ui2f+0x6c>
 8000ae6:	239f      	movs	r3, #159	; 0x9f
 8000ae8:	4031      	ands	r1, r6
 8000aea:	1b1b      	subs	r3, r3, r4
 8000aec:	0189      	lsls	r1, r1, #6
 8000aee:	0a4d      	lsrs	r5, r1, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e7d9      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_cfrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	1c08      	adds	r0, r1, #0
 8000afc:	4661      	mov	r1, ip
 8000afe:	e7ff      	b.n	8000b00 <__aeabi_cfcmpeq>

08000b00 <__aeabi_cfcmpeq>:
 8000b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b02:	f000 f8c5 	bl	8000c90 <__lesf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d401      	bmi.n	8000b0e <__aeabi_cfcmpeq+0xe>
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	42c8      	cmn	r0, r1
 8000b0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b10 <__aeabi_fcmpeq>:
 8000b10:	b510      	push	{r4, lr}
 8000b12:	f000 f849 	bl	8000ba8 <__eqsf2>
 8000b16:	4240      	negs	r0, r0
 8000b18:	3001      	adds	r0, #1
 8000b1a:	bd10      	pop	{r4, pc}

08000b1c <__aeabi_fcmplt>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	f000 f8b7 	bl	8000c90 <__lesf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	db01      	blt.n	8000b2a <__aeabi_fcmplt+0xe>
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)

08000b30 <__aeabi_fcmple>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	f000 f8ad 	bl	8000c90 <__lesf2>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	dd01      	ble.n	8000b3e <__aeabi_fcmple+0xe>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	bd10      	pop	{r4, pc}
 8000b3e:	2001      	movs	r0, #1
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)

08000b44 <__aeabi_fcmpgt>:
 8000b44:	b510      	push	{r4, lr}
 8000b46:	f000 f857 	bl	8000bf8 <__gesf2>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	dc01      	bgt.n	8000b52 <__aeabi_fcmpgt+0xe>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	2001      	movs	r0, #1
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)

08000b58 <__aeabi_fcmpge>:
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	f000 f84d 	bl	8000bf8 <__gesf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	da01      	bge.n	8000b66 <__aeabi_fcmpge+0xe>
 8000b62:	2000      	movs	r0, #0
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	2001      	movs	r0, #1
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)

08000b6c <__clzsi2>:
 8000b6c:	211c      	movs	r1, #28
 8000b6e:	2301      	movs	r3, #1
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	4298      	cmp	r0, r3
 8000b74:	d301      	bcc.n	8000b7a <__clzsi2+0xe>
 8000b76:	0c00      	lsrs	r0, r0, #16
 8000b78:	3910      	subs	r1, #16
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	d301      	bcc.n	8000b84 <__clzsi2+0x18>
 8000b80:	0a00      	lsrs	r0, r0, #8
 8000b82:	3908      	subs	r1, #8
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	4298      	cmp	r0, r3
 8000b88:	d301      	bcc.n	8000b8e <__clzsi2+0x22>
 8000b8a:	0900      	lsrs	r0, r0, #4
 8000b8c:	3904      	subs	r1, #4
 8000b8e:	a202      	add	r2, pc, #8	; (adr r2, 8000b98 <__clzsi2+0x2c>)
 8000b90:	5c10      	ldrb	r0, [r2, r0]
 8000b92:	1840      	adds	r0, r0, r1
 8000b94:	4770      	bx	lr
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	02020304 	.word	0x02020304
 8000b9c:	01010101 	.word	0x01010101
	...

08000ba8 <__eqsf2>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	0042      	lsls	r2, r0, #1
 8000bac:	024e      	lsls	r6, r1, #9
 8000bae:	004c      	lsls	r4, r1, #1
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	0a6d      	lsrs	r5, r5, #9
 8000bb4:	0e12      	lsrs	r2, r2, #24
 8000bb6:	0fc3      	lsrs	r3, r0, #31
 8000bb8:	0a76      	lsrs	r6, r6, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	0fc9      	lsrs	r1, r1, #31
 8000bbe:	2aff      	cmp	r2, #255	; 0xff
 8000bc0:	d00f      	beq.n	8000be2 <__eqsf2+0x3a>
 8000bc2:	2cff      	cmp	r4, #255	; 0xff
 8000bc4:	d011      	beq.n	8000bea <__eqsf2+0x42>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	42a2      	cmp	r2, r4
 8000bca:	d000      	beq.n	8000bce <__eqsf2+0x26>
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	42b5      	cmp	r5, r6
 8000bd0:	d1fc      	bne.n	8000bcc <__eqsf2+0x24>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d00d      	beq.n	8000bf2 <__eqsf2+0x4a>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d1f8      	bne.n	8000bcc <__eqsf2+0x24>
 8000bda:	0028      	movs	r0, r5
 8000bdc:	1e45      	subs	r5, r0, #1
 8000bde:	41a8      	sbcs	r0, r5
 8000be0:	e7f4      	b.n	8000bcc <__eqsf2+0x24>
 8000be2:	2001      	movs	r0, #1
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d1f1      	bne.n	8000bcc <__eqsf2+0x24>
 8000be8:	e7eb      	b.n	8000bc2 <__eqsf2+0x1a>
 8000bea:	2001      	movs	r0, #1
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d1ed      	bne.n	8000bcc <__eqsf2+0x24>
 8000bf0:	e7e9      	b.n	8000bc6 <__eqsf2+0x1e>
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	e7ea      	b.n	8000bcc <__eqsf2+0x24>
 8000bf6:	46c0      	nop			; (mov r8, r8)

08000bf8 <__gesf2>:
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	0042      	lsls	r2, r0, #1
 8000bfc:	0246      	lsls	r6, r0, #9
 8000bfe:	024d      	lsls	r5, r1, #9
 8000c00:	004c      	lsls	r4, r1, #1
 8000c02:	0fc3      	lsrs	r3, r0, #31
 8000c04:	0a76      	lsrs	r6, r6, #9
 8000c06:	0e12      	lsrs	r2, r2, #24
 8000c08:	0a6d      	lsrs	r5, r5, #9
 8000c0a:	0e24      	lsrs	r4, r4, #24
 8000c0c:	0fc8      	lsrs	r0, r1, #31
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d01f      	beq.n	8000c52 <__gesf2+0x5a>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d010      	beq.n	8000c38 <__gesf2+0x40>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d11f      	bne.n	8000c5a <__gesf2+0x62>
 8000c1a:	4271      	negs	r1, r6
 8000c1c:	4171      	adcs	r1, r6
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d101      	bne.n	8000c26 <__gesf2+0x2e>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d01e      	beq.n	8000c64 <__gesf2+0x6c>
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d10e      	bne.n	8000c48 <__gesf2+0x50>
 8000c2a:	4283      	cmp	r3, r0
 8000c2c:	d01e      	beq.n	8000c6c <__gesf2+0x74>
 8000c2e:	2102      	movs	r1, #2
 8000c30:	1e58      	subs	r0, r3, #1
 8000c32:	4008      	ands	r0, r1
 8000c34:	3801      	subs	r0, #1
 8000c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d126      	bne.n	8000c8a <__gesf2+0x92>
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d1f4      	bne.n	8000c2a <__gesf2+0x32>
 8000c40:	4271      	negs	r1, r6
 8000c42:	4171      	adcs	r1, r6
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d0f0      	beq.n	8000c2a <__gesf2+0x32>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d1f4      	bne.n	8000c36 <__gesf2+0x3e>
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4240      	negs	r0, r0
 8000c50:	e7f1      	b.n	8000c36 <__gesf2+0x3e>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d119      	bne.n	8000c8a <__gesf2+0x92>
 8000c56:	2cff      	cmp	r4, #255	; 0xff
 8000c58:	d0ee      	beq.n	8000c38 <__gesf2+0x40>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d1e5      	bne.n	8000c2a <__gesf2+0x32>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d1e3      	bne.n	8000c2a <__gesf2+0x32>
 8000c62:	e7e4      	b.n	8000c2e <__gesf2+0x36>
 8000c64:	2000      	movs	r0, #0
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0e5      	beq.n	8000c36 <__gesf2+0x3e>
 8000c6a:	e7e0      	b.n	8000c2e <__gesf2+0x36>
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	dc05      	bgt.n	8000c7c <__gesf2+0x84>
 8000c70:	dbea      	blt.n	8000c48 <__gesf2+0x50>
 8000c72:	42ae      	cmp	r6, r5
 8000c74:	d802      	bhi.n	8000c7c <__gesf2+0x84>
 8000c76:	d3e7      	bcc.n	8000c48 <__gesf2+0x50>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	e7dc      	b.n	8000c36 <__gesf2+0x3e>
 8000c7c:	4241      	negs	r1, r0
 8000c7e:	4141      	adcs	r1, r0
 8000c80:	4248      	negs	r0, r1
 8000c82:	2102      	movs	r1, #2
 8000c84:	4008      	ands	r0, r1
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7d5      	b.n	8000c36 <__gesf2+0x3e>
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	4240      	negs	r0, r0
 8000c8e:	e7d2      	b.n	8000c36 <__gesf2+0x3e>

08000c90 <__lesf2>:
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	0042      	lsls	r2, r0, #1
 8000c94:	0246      	lsls	r6, r0, #9
 8000c96:	024d      	lsls	r5, r1, #9
 8000c98:	004c      	lsls	r4, r1, #1
 8000c9a:	0fc3      	lsrs	r3, r0, #31
 8000c9c:	0a76      	lsrs	r6, r6, #9
 8000c9e:	0e12      	lsrs	r2, r2, #24
 8000ca0:	0a6d      	lsrs	r5, r5, #9
 8000ca2:	0e24      	lsrs	r4, r4, #24
 8000ca4:	0fc8      	lsrs	r0, r1, #31
 8000ca6:	2aff      	cmp	r2, #255	; 0xff
 8000ca8:	d00d      	beq.n	8000cc6 <__lesf2+0x36>
 8000caa:	2cff      	cmp	r4, #255	; 0xff
 8000cac:	d00f      	beq.n	8000cce <__lesf2+0x3e>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d123      	bne.n	8000cfa <__lesf2+0x6a>
 8000cb2:	4271      	negs	r1, r6
 8000cb4:	4171      	adcs	r1, r6
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d10f      	bne.n	8000cda <__lesf2+0x4a>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d10d      	bne.n	8000cda <__lesf2+0x4a>
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d014      	beq.n	8000cee <__lesf2+0x5e>
 8000cc4:	e00d      	b.n	8000ce2 <__lesf2+0x52>
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d110      	bne.n	8000cec <__lesf2+0x5c>
 8000cca:	2cff      	cmp	r4, #255	; 0xff
 8000ccc:	d115      	bne.n	8000cfa <__lesf2+0x6a>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d10c      	bne.n	8000cec <__lesf2+0x5c>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d103      	bne.n	8000cde <__lesf2+0x4e>
 8000cd6:	4271      	negs	r1, r6
 8000cd8:	4171      	adcs	r1, r6
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d108      	bne.n	8000cf0 <__lesf2+0x60>
 8000cde:	4283      	cmp	r3, r0
 8000ce0:	d010      	beq.n	8000d04 <__lesf2+0x74>
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	1e58      	subs	r0, r3, #1
 8000ce6:	4008      	ands	r0, r1
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e000      	b.n	8000cee <__lesf2+0x5e>
 8000cec:	2002      	movs	r0, #2
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d1fc      	bne.n	8000cee <__lesf2+0x5e>
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	e7f9      	b.n	8000cee <__lesf2+0x5e>
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	d1ef      	bne.n	8000cde <__lesf2+0x4e>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d1ed      	bne.n	8000cde <__lesf2+0x4e>
 8000d02:	e7ee      	b.n	8000ce2 <__lesf2+0x52>
 8000d04:	42a2      	cmp	r2, r4
 8000d06:	dc05      	bgt.n	8000d14 <__lesf2+0x84>
 8000d08:	dbf2      	blt.n	8000cf0 <__lesf2+0x60>
 8000d0a:	42ae      	cmp	r6, r5
 8000d0c:	d802      	bhi.n	8000d14 <__lesf2+0x84>
 8000d0e:	d3ef      	bcc.n	8000cf0 <__lesf2+0x60>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e7ec      	b.n	8000cee <__lesf2+0x5e>
 8000d14:	4241      	negs	r1, r0
 8000d16:	4141      	adcs	r1, r0
 8000d18:	4248      	negs	r0, r1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4008      	ands	r0, r1
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7e5      	b.n	8000cee <__lesf2+0x5e>
 8000d22:	46c0      	nop			; (mov r8, r8)

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d28:	f001 ff0a 	bl	8002b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f830 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f000 f990 	bl	8001054 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d34:	f000 f892 	bl	8000e5c <MX_CAN_Init>
  MX_SPI1_Init();
 8000d38:	f000 f8c8 	bl	8000ecc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d3c:	f000 f964 	bl	8001008 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8000d40:	f000 f902 	bl	8000f48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d44:	f007 feba 	bl	8008abc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d48:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <main+0x54>)
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <main+0x58>)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f007 ff32 	bl	8008bb8 <osThreadNew>
 8000d54:	0002      	movs	r2, r0
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <main+0x5c>)
 8000d58:	601a      	str	r2, [r3, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(StartBlink, NULL, &Blink_attributes);
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <main+0x60>)
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <main+0x64>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f007 ff29 	bl	8008bb8 <osThreadNew>
 8000d66:	0002      	movs	r2, r0
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <main+0x68>)
 8000d6a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  CPP_UserSetup();
 8000d6c:	f000 fd7c 	bl	8001868 <CPP_UserSetup>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d70:	f007 fed0 	bl	8008b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <main+0x50>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	0800d58c 	.word	0x0800d58c
 8000d7c:	0800129f 	.word	0x0800129f
 8000d80:	20002708 	.word	0x20002708
 8000d84:	0800d5b0 	.word	0x0800d5b0
 8000d88:	080012b1 	.word	0x080012b1
 8000d8c:	2000270c 	.word	0x2000270c

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b099      	sub	sp, #100	; 0x64
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	242c      	movs	r4, #44	; 0x2c
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2334      	movs	r3, #52	; 0x34
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f00b fddc 	bl	800c95e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da6:	231c      	movs	r3, #28
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	0018      	movs	r0, r3
 8000dac:	2310      	movs	r3, #16
 8000dae:	001a      	movs	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f00b fdd4 	bl	800c95e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db6:	003b      	movs	r3, r7
 8000db8:	0018      	movs	r0, r3
 8000dba:	231c      	movs	r3, #28
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f00b fdcd 	bl	800c95e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2222      	movs	r2, #34	; 0x22
 8000dca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2201      	movs	r2, #1
 8000dd0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2210      	movs	r2, #16
 8000ddc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2202      	movs	r2, #2
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	0212      	lsls	r2, r2, #8
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	22e0      	movs	r2, #224	; 0xe0
 8000df0:	0352      	lsls	r2, r2, #13
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2201      	movs	r2, #1
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 ff03 	bl	8003c08 <HAL_RCC_OscConfig>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e06:	f000 fa77 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	211c      	movs	r1, #28
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2207      	movs	r2, #7
 8000e10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2202      	movs	r2, #2
 8000e16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2101      	movs	r1, #1
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f003 fa73 	bl	8004314 <HAL_RCC_ClockConfig>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e32:	f000 fa61 	bl	80012f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0292      	lsls	r2, r2, #10
 8000e3c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	003b      	movs	r3, r7
 8000e46:	0018      	movs	r0, r3
 8000e48:	f003 fc08 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e50:	f000 fa52 	bl	80012f8 <Error_Handler>
  }
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b019      	add	sp, #100	; 0x64
 8000e5a:	bd90      	pop	{r4, r7, pc}

08000e5c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e62:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <MX_CAN_Init+0x6c>)
 8000e64:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e68:	2206      	movs	r2, #6
 8000e6a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e7a:	22c0      	movs	r2, #192	; 0xc0
 8000e7c:	0312      	lsls	r2, r2, #12
 8000e7e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	0352      	lsls	r2, r2, #13
 8000e86:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <MX_CAN_Init+0x68>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f001 fe76 	bl	8002ba0 <HAL_CAN_Init>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f000 fa1e 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20002710 	.word	0x20002710
 8000ec8:	40006400 	.word	0x40006400

08000ecc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <MX_SPI1_Init+0x78>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ed8:	2282      	movs	r2, #130	; 0x82
 8000eda:	0052      	lsls	r2, r2, #1
 8000edc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ee6:	22e0      	movs	r2, #224	; 0xe0
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <MX_SPI1_Init+0x74>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f003 fc93 	bl	8004858 <HAL_SPI_Init>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f000 f9df 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20002a3c 	.word	0x20002a3c
 8000f44:	40013000 	.word	0x40013000

08000f48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4e:	2320      	movs	r3, #32
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	0018      	movs	r0, r3
 8000f54:	2308      	movs	r3, #8
 8000f56:	001a      	movs	r2, r3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f00b fd00 	bl	800c95e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	0018      	movs	r0, r3
 8000f62:	231c      	movs	r3, #28
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f00b fcf9 	bl	800c95e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000f6e:	4a25      	ldr	r2, [pc, #148]	; (8001004 <MX_TIM3_Init+0xbc>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000f80:	22fa      	movs	r2, #250	; 0xfa
 8000f82:	00d2      	lsls	r2, r2, #3
 8000f84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000f94:	0018      	movs	r0, r3
 8000f96:	f004 f909 	bl	80051ac <HAL_TIM_PWM_Init>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f9e:	f000 f9ab 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb0:	187a      	adds	r2, r7, r1
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f004 fdc0 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fc0:	f000 f99a 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2260      	movs	r2, #96	; 0x60
 8000fc8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fdc:	1d39      	adds	r1, r7, #4
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f004 fa48 	bl	8005478 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	1e03      	subs	r3, r0, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000fec:	f000 f984 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <MX_TIM3_Init+0xb8>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 fa7c 	bl	80014f0 <HAL_TIM_MspPostInit>

}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00a      	add	sp, #40	; 0x28
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20002738 	.word	0x20002738
 8001004:	40000400 	.word	0x40000400

08001008 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_USB_PCD_Init+0x44>)
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <MX_USB_PCD_Init+0x48>)
 8001010:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USB_PCD_Init+0x44>)
 8001014:	2208      	movs	r2, #8
 8001016:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USB_PCD_Init+0x44>)
 800101a:	2202      	movs	r2, #2
 800101c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USB_PCD_Init+0x44>)
 8001020:	2202      	movs	r2, #2
 8001022:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USB_PCD_Init+0x44>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USB_PCD_Init+0x44>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USB_PCD_Init+0x44>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <MX_USB_PCD_Init+0x44>)
 8001038:	0018      	movs	r0, r3
 800103a:	f002 fcab 	bl	8003994 <HAL_PCD_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001042:	f000 f959 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20002b5c 	.word	0x20002b5c
 8001050:	40005c00 	.word	0x40005c00

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b08b      	sub	sp, #44	; 0x2c
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	2414      	movs	r4, #20
 800105c:	193b      	adds	r3, r7, r4
 800105e:	0018      	movs	r0, r3
 8001060:	2314      	movs	r3, #20
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f00b fc7a 	bl	800c95e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <MX_GPIO_Init+0x20c>)
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	4b7c      	ldr	r3, [pc, #496]	; (8001260 <MX_GPIO_Init+0x20c>)
 8001070:	2180      	movs	r1, #128	; 0x80
 8001072:	0309      	lsls	r1, r1, #12
 8001074:	430a      	orrs	r2, r1
 8001076:	615a      	str	r2, [r3, #20]
 8001078:	4b79      	ldr	r3, [pc, #484]	; (8001260 <MX_GPIO_Init+0x20c>)
 800107a:	695a      	ldr	r2, [r3, #20]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	031b      	lsls	r3, r3, #12
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b76      	ldr	r3, [pc, #472]	; (8001260 <MX_GPIO_Init+0x20c>)
 8001088:	695a      	ldr	r2, [r3, #20]
 800108a:	4b75      	ldr	r3, [pc, #468]	; (8001260 <MX_GPIO_Init+0x20c>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0289      	lsls	r1, r1, #10
 8001090:	430a      	orrs	r2, r1
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b72      	ldr	r3, [pc, #456]	; (8001260 <MX_GPIO_Init+0x20c>)
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b6f      	ldr	r3, [pc, #444]	; (8001260 <MX_GPIO_Init+0x20c>)
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	4b6e      	ldr	r3, [pc, #440]	; (8001260 <MX_GPIO_Init+0x20c>)
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	02c9      	lsls	r1, r1, #11
 80010ac:	430a      	orrs	r2, r1
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <MX_GPIO_Init+0x20c>)
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	02db      	lsls	r3, r3, #11
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	4b68      	ldr	r3, [pc, #416]	; (8001260 <MX_GPIO_Init+0x20c>)
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <MX_GPIO_Init+0x20c>)
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	0349      	lsls	r1, r1, #13
 80010c8:	430a      	orrs	r2, r1
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	4b64      	ldr	r3, [pc, #400]	; (8001260 <MX_GPIO_Init+0x20c>)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	035b      	lsls	r3, r3, #13
 80010d4:	4013      	ands	r3, r2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RT_Led_Pin|Cruise_Led_Pin|User_LED_Pin|HL_Led_Pin
 80010da:	4962      	ldr	r1, [pc, #392]	; (8001264 <MX_GPIO_Init+0x210>)
 80010dc:	4b62      	ldr	r3, [pc, #392]	; (8001268 <MX_GPIO_Init+0x214>)
 80010de:	2200      	movs	r2, #0
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 fc02 	bl	80038ea <HAL_GPIO_WritePin>
                          |Eco_Led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reverse_Led_Pin|LT_Led_Pin, GPIO_PIN_RESET);
 80010e6:	4961      	ldr	r1, [pc, #388]	; (800126c <MX_GPIO_Init+0x218>)
 80010e8:	2390      	movs	r3, #144	; 0x90
 80010ea:	05db      	lsls	r3, r3, #23
 80010ec:	2200      	movs	r2, #0
 80010ee:	0018      	movs	r0, r3
 80010f0:	f002 fbfb 	bl	80038ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERROR_LED_Pin|LCD_RST_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 80010f4:	495e      	ldr	r1, [pc, #376]	; (8001270 <MX_GPIO_Init+0x21c>)
 80010f6:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <MX_GPIO_Init+0x220>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f002 fbf5 	bl	80038ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001100:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <MX_GPIO_Init+0x224>)
 8001102:	2200      	movs	r2, #0
 8001104:	2104      	movs	r1, #4
 8001106:	0018      	movs	r0, r3
 8001108:	f002 fbef 	bl	80038ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RT_Button_Pin Cruise_P_Pin Horn_Button_Pin Cruise_Button_Pin
                           Reverse_Button_Pin HL_Button_Pin Eco_Button_Pin LT_Button_Pin */
  GPIO_InitStruct.Pin = RT_Button_Pin|Cruise_P_Pin|Horn_Button_Pin|Cruise_Button_Pin
 800110c:	193b      	adds	r3, r7, r4
 800110e:	4a5b      	ldr	r2, [pc, #364]	; (800127c <MX_GPIO_Init+0x228>)
 8001110:	601a      	str	r2, [r3, #0]
                          |Reverse_Button_Pin|HL_Button_Pin|Eco_Button_Pin|LT_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001112:	193b      	adds	r3, r7, r4
 8001114:	2288      	movs	r2, #136	; 0x88
 8001116:	0352      	lsls	r2, r2, #13
 8001118:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	2202      	movs	r2, #2
 800111e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	193b      	adds	r3, r7, r4
 8001122:	4a51      	ldr	r2, [pc, #324]	; (8001268 <MX_GPIO_Init+0x214>)
 8001124:	0019      	movs	r1, r3
 8001126:	0010      	movs	r0, r2
 8001128:	f002 fa4a 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RT_Led_Pin Cruise_Led_Pin User_LED_Pin HL_Led_Pin
                           Eco_Led_Pin */
  GPIO_InitStruct.Pin = RT_Led_Pin|Cruise_Led_Pin|User_LED_Pin|HL_Led_Pin
 800112c:	193b      	adds	r3, r7, r4
 800112e:	4a4d      	ldr	r2, [pc, #308]	; (8001264 <MX_GPIO_Init+0x210>)
 8001130:	601a      	str	r2, [r3, #0]
                          |Eco_Led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	193b      	adds	r3, r7, r4
 8001134:	2201      	movs	r2, #1
 8001136:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	193b      	adds	r3, r7, r4
 8001146:	4a48      	ldr	r2, [pc, #288]	; (8001268 <MX_GPIO_Init+0x214>)
 8001148:	0019      	movs	r1, r3
 800114a:	0010      	movs	r0, r2
 800114c:	f002 fa38 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reverse_Led_Pin LT_Led_Pin */
  GPIO_InitStruct.Pin = Reverse_Led_Pin|LT_Led_Pin;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	4a46      	ldr	r2, [pc, #280]	; (800126c <MX_GPIO_Init+0x218>)
 8001154:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	193b      	adds	r3, r7, r4
 8001158:	2201      	movs	r2, #1
 800115a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	193b      	adds	r3, r7, r4
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	193b      	adds	r3, r7, r4
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	193a      	adds	r2, r7, r4
 800116a:	2390      	movs	r3, #144	; 0x90
 800116c:	05db      	lsls	r3, r3, #23
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f002 fa25 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERROR_LED_Pin LCD_RST_Pin TP_CS_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|LCD_RST_Pin|TP_CS_Pin;
 8001176:	193b      	adds	r3, r7, r4
 8001178:	4a3d      	ldr	r2, [pc, #244]	; (8001270 <MX_GPIO_Init+0x21c>)
 800117a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	193b      	adds	r3, r7, r4
 800117e:	2201      	movs	r2, #1
 8001180:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	193b      	adds	r3, r7, r4
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	193b      	adds	r3, r7, r4
 8001190:	4a38      	ldr	r2, [pc, #224]	; (8001274 <MX_GPIO_Init+0x220>)
 8001192:	0019      	movs	r1, r3
 8001194:	0010      	movs	r0, r2
 8001196:	f002 fa13 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Haz_Button_Pin */
  GPIO_InitStruct.Pin = Haz_Button_Pin;
 800119a:	193b      	adds	r3, r7, r4
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	0152      	lsls	r2, r2, #5
 80011a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	2288      	movs	r2, #136	; 0x88
 80011a6:	0352      	lsls	r2, r2, #13
 80011a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	2202      	movs	r2, #2
 80011ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Haz_Button_GPIO_Port, &GPIO_InitStruct);
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	4a30      	ldr	r2, [pc, #192]	; (8001274 <MX_GPIO_Init+0x220>)
 80011b4:	0019      	movs	r1, r3
 80011b6:	0010      	movs	r0, r2
 80011b8:	f002 fa02 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Cruise_M_Pin */
  GPIO_InitStruct.Pin = Cruise_M_Pin;
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2288      	movs	r2, #136	; 0x88
 80011c8:	0352      	lsls	r2, r2, #13
 80011ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	2202      	movs	r2, #2
 80011d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Cruise_M_GPIO_Port, &GPIO_InitStruct);
 80011d2:	193a      	adds	r2, r7, r4
 80011d4:	2390      	movs	r3, #144	; 0x90
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	0011      	movs	r1, r2
 80011da:	0018      	movs	r0, r3
 80011dc:	f002 f9f0 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2204      	movs	r2, #4
 80011e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2201      	movs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <MX_GPIO_Init+0x224>)
 80011fc:	0019      	movs	r1, r3
 80011fe:	0010      	movs	r0, r2
 8001200:	f002 f9de 	bl	80035c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001204:	0021      	movs	r1, r4
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2210      	movs	r2, #16
 800120a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2288      	movs	r2, #136	; 0x88
 8001210:	0352      	lsls	r2, r2, #13
 8001212:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800121a:	187b      	adds	r3, r7, r1
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <MX_GPIO_Init+0x220>)
 800121e:	0019      	movs	r1, r3
 8001220:	0010      	movs	r0, r2
 8001222:	f002 f9cd 	bl	80035c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2103      	movs	r1, #3
 800122a:	2005      	movs	r0, #5
 800122c:	f002 f9a2 	bl	8003574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001230:	2005      	movs	r0, #5
 8001232:	f002 f9b4 	bl	800359e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2103      	movs	r1, #3
 800123a:	2006      	movs	r0, #6
 800123c:	f002 f99a 	bl	8003574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001240:	2006      	movs	r0, #6
 8001242:	f002 f9ac 	bl	800359e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2103      	movs	r1, #3
 800124a:	2007      	movs	r0, #7
 800124c:	f002 f992 	bl	8003574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001250:	2007      	movs	r0, #7
 8001252:	f002 f9a4 	bl	800359e <HAL_NVIC_EnableIRQ>

}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b00b      	add	sp, #44	; 0x2c
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40021000 	.word	0x40021000
 8001264:	00004164 	.word	0x00004164
 8001268:	48000800 	.word	0x48000800
 800126c:	00000201 	.word	0x00000201
 8001270:	00004041 	.word	0x00004041
 8001274:	48000400 	.word	0x48000400
 8001278:	48000c00 	.word	0x48000c00
 800127c:	0000a68b 	.word	0x0000a68b

08001280 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	0002      	movs	r2, r0
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	801a      	strh	r2, [r3, #0]
  // Call into C++ Domain
  CPP_HandleGPIOInterrupt(GPIO_Pin);
 800128c:	1dbb      	adds	r3, r7, #6
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	0018      	movs	r0, r3
 8001292:	f000 fd5d 	bl	8001d50 <CPP_HandleGPIOInterrupt>
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}

0800129e <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f007 fd2e 	bl	8008d08 <osDelay>
 80012ac:	e7fb      	b.n	80012a6 <StartDefaultTask+0x8>
	...

080012b0 <StartBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <StartBlink+0x20>)
 80012ba:	2120      	movs	r1, #32
 80012bc:	0018      	movs	r0, r3
 80012be:	f002 fb31 	bl	8003924 <HAL_GPIO_TogglePin>
    osDelay(500);
 80012c2:	23fa      	movs	r3, #250	; 0xfa
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	0018      	movs	r0, r3
 80012c8:	f007 fd1e 	bl	8008d08 <osDelay>
    HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 80012cc:	e7f4      	b.n	80012b8 <StartBlink+0x8>
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	48000800 	.word	0x48000800

080012d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e6:	f001 fc3f 	bl	8002b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	40012c00 	.word	0x40012c00

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
  {
    HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <Error_Handler+0x20>)
 8001302:	2101      	movs	r1, #1
 8001304:	0018      	movs	r0, r3
 8001306:	f002 fb0d 	bl	8003924 <HAL_GPIO_TogglePin>
    osDelay(500);
 800130a:	23fa      	movs	r3, #250	; 0xfa
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	0018      	movs	r0, r3
 8001310:	f007 fcfa 	bl	8008d08 <osDelay>
    HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001314:	e7f4      	b.n	8001300 <Error_Handler+0x8>
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	48000400 	.word	0x48000400

0800131c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_MspInit+0x50>)
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_MspInit+0x50>)
 8001328:	2101      	movs	r1, #1
 800132a:	430a      	orrs	r2, r1
 800132c:	619a      	str	r2, [r3, #24]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x50>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2201      	movs	r2, #1
 8001334:	4013      	ands	r3, r2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x50>)
 800133c:	69da      	ldr	r2, [r3, #28]
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_MspInit+0x50>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0549      	lsls	r1, r1, #21
 8001344:	430a      	orrs	r2, r1
 8001346:	61da      	str	r2, [r3, #28]
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_MspInit+0x50>)
 800134a:	69da      	ldr	r2, [r3, #28]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	055b      	lsls	r3, r3, #21
 8001350:	4013      	ands	r3, r2
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001356:	2302      	movs	r3, #2
 8001358:	425b      	negs	r3, r3
 800135a:	2200      	movs	r2, #0
 800135c:	2103      	movs	r1, #3
 800135e:	0018      	movs	r0, r3
 8001360:	f002 f908 	bl	8003574 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	2414      	movs	r4, #20
 800137a:	193b      	adds	r3, r7, r4
 800137c:	0018      	movs	r0, r3
 800137e:	2314      	movs	r3, #20
 8001380:	001a      	movs	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	f00b faeb 	bl	800c95e <memset>
  if(hcan->Instance==CAN)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_CAN_MspInit+0xa0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d13a      	bne.n	8001408 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_CAN_MspInit+0xa4>)
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_CAN_MspInit+0xa4>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	0489      	lsls	r1, r1, #18
 800139c:	430a      	orrs	r2, r1
 800139e:	61da      	str	r2, [r3, #28]
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_CAN_MspInit+0xa4>)
 80013a2:	69da      	ldr	r2, [r3, #28]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	049b      	lsls	r3, r3, #18
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_CAN_MspInit+0xa4>)
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_CAN_MspInit+0xa4>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	02c9      	lsls	r1, r1, #11
 80013b8:	430a      	orrs	r2, r1
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_CAN_MspInit+0xa4>)
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	02db      	lsls	r3, r3, #11
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	22c0      	movs	r2, #192	; 0xc0
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	0021      	movs	r1, r4
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2202      	movs	r2, #2
 80013d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2203      	movs	r2, #3
 80013e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2204      	movs	r2, #4
 80013ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_CAN_MspInit+0xa8>)
 80013f0:	0019      	movs	r1, r3
 80013f2:	0010      	movs	r0, r2
 80013f4:	f002 f8e4 	bl	80035c0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 3, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2103      	movs	r1, #3
 80013fc:	201e      	movs	r0, #30
 80013fe:	f002 f8b9 	bl	8003574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001402:	201e      	movs	r0, #30
 8001404:	f002 f8cb 	bl	800359e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001408:	46c0      	nop			; (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	b00b      	add	sp, #44	; 0x2c
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	40006400 	.word	0x40006400
 8001414:	40021000 	.word	0x40021000
 8001418:	48000400 	.word	0x48000400

0800141c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08b      	sub	sp, #44	; 0x2c
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	2414      	movs	r4, #20
 8001426:	193b      	adds	r3, r7, r4
 8001428:	0018      	movs	r0, r3
 800142a:	2314      	movs	r3, #20
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f00b fa95 	bl	800c95e <memset>
  if(hspi->Instance==SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <HAL_SPI_MspInit+0x90>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d132      	bne.n	80014a4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0149      	lsls	r1, r1, #5
 8001448:	430a      	orrs	r2, r1
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0289      	lsls	r1, r1, #10
 8001464:	430a      	orrs	r2, r1
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_SPI_MspInit+0x94>)
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	029b      	lsls	r3, r3, #10
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001476:	0021      	movs	r1, r4
 8001478:	187b      	adds	r3, r7, r1
 800147a:	22e0      	movs	r2, #224	; 0xe0
 800147c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2202      	movs	r2, #2
 8001482:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2203      	movs	r2, #3
 800148e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	187a      	adds	r2, r7, r1
 8001498:	2390      	movs	r3, #144	; 0x90
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	0011      	movs	r1, r2
 800149e:	0018      	movs	r0, r3
 80014a0:	f002 f88e 	bl	80035c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b00b      	add	sp, #44	; 0x2c
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_TIM_PWM_MspInit+0x34>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10b      	bne.n	80014de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_TIM_PWM_MspInit+0x38>)
 80014c8:	69da      	ldr	r2, [r3, #28]
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_TIM_PWM_MspInit+0x38>)
 80014cc:	2102      	movs	r1, #2
 80014ce:	430a      	orrs	r2, r1
 80014d0:	61da      	str	r2, [r3, #28]
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_TIM_PWM_MspInit+0x38>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	240c      	movs	r4, #12
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	0018      	movs	r0, r3
 80014fe:	2314      	movs	r3, #20
 8001500:	001a      	movs	r2, r3
 8001502:	2100      	movs	r1, #0
 8001504:	f00b fa2b 	bl	800c95e <memset>
  if(htim->Instance==TIM3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a15      	ldr	r2, [pc, #84]	; (8001564 <HAL_TIM_MspPostInit+0x74>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d123      	bne.n	800155a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_TIM_MspPostInit+0x78>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_TIM_MspPostInit+0x78>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	02c9      	lsls	r1, r1, #11
 800151c:	430a      	orrs	r2, r1
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_TIM_MspPostInit+0x78>)
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	02db      	lsls	r3, r3, #11
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800152e:	0021      	movs	r1, r4
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2220      	movs	r2, #32
 8001534:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2202      	movs	r2, #2
 800153a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	187b      	adds	r3, r7, r1
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	187b      	adds	r3, r7, r1
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001548:	187b      	adds	r3, r7, r1
 800154a:	2201      	movs	r2, #1
 800154c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	187b      	adds	r3, r7, r1
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_TIM_MspPostInit+0x7c>)
 8001552:	0019      	movs	r1, r3
 8001554:	0010      	movs	r0, r2
 8001556:	f002 f833 	bl	80035c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b009      	add	sp, #36	; 0x24
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	40000400 	.word	0x40000400
 8001568:	40021000 	.word	0x40021000
 800156c:	48000400 	.word	0x48000400

08001570 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_PCD_MspInit+0x38>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10d      	bne.n	800159e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_PCD_MspInit+0x3c>)
 8001584:	69da      	ldr	r2, [r3, #28]
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_PCD_MspInit+0x3c>)
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0409      	lsls	r1, r1, #16
 800158c:	430a      	orrs	r2, r1
 800158e:	61da      	str	r2, [r3, #28]
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_PCD_MspInit+0x3c>)
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	40005c00 	.word	0x40005c00
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	0019      	movs	r1, r3
 80015c6:	200d      	movs	r0, #13
 80015c8:	f001 ffd4 	bl	8003574 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80015cc:	200d      	movs	r0, #13
 80015ce:	f001 ffe6 	bl	800359e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <HAL_InitTick+0xa8>)
 80015d4:	699a      	ldr	r2, [r3, #24]
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_InitTick+0xa8>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	0109      	lsls	r1, r1, #4
 80015dc:	430a      	orrs	r2, r1
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_InitTick+0xa8>)
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ee:	230c      	movs	r3, #12
 80015f0:	18fa      	adds	r2, r7, r3
 80015f2:	2310      	movs	r3, #16
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f003 f805 	bl	8004608 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015fe:	f002 ffed 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8001602:	0003      	movs	r3, r0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	4914      	ldr	r1, [pc, #80]	; (800165c <HAL_InitTick+0xac>)
 800160a:	0018      	movs	r0, r3
 800160c:	f7fe fd86 	bl	800011c <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	3b01      	subs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0xb0>)
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_InitTick+0xb4>)
 800161a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_InitTick+0xb0>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <HAL_InitTick+0xb8>)
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_InitTick+0xb0>)
 8001624:	6a3a      	ldr	r2, [r7, #32]
 8001626:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_InitTick+0xb0>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_InitTick+0xb0>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_InitTick+0xb0>)
 8001636:	0018      	movs	r0, r3
 8001638:	f003 fd0e 	bl	8005058 <HAL_TIM_Base_Init>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d105      	bne.n	800164c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_InitTick+0xb0>)
 8001642:	0018      	movs	r0, r3
 8001644:	f003 fd60 	bl	8005108 <HAL_TIM_Base_Start_IT>
 8001648:	0003      	movs	r3, r0
 800164a:	e000      	b.n	800164e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b00a      	add	sp, #40	; 0x28
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	40021000 	.word	0x40021000
 800165c:	000f4240 	.word	0x000f4240
 8001660:	20002e50 	.word	0x20002e50
 8001664:	40012c00 	.word	0x40012c00
 8001668:	000003e7 	.word	0x000003e7

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x4>
	...

08001674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HardFault_Handler+0x14>)
 800167a:	2201      	movs	r2, #1
 800167c:	2101      	movs	r1, #1
 800167e:	0018      	movs	r0, r3
 8001680:	f002 f933 	bl	80038ea <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <HardFault_Handler+0x10>
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	48000400 	.word	0x48000400

0800168c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Horn_Button_Pin);
 8001690:	2001      	movs	r0, #1
 8001692:	f002 f963 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Cruise_Button_Pin);
 8001696:	2002      	movs	r0, #2
 8001698:	f002 f960 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reverse_Button_Pin);
 80016a6:	2008      	movs	r0, #8
 80016a8:	f002 f958 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80016b6:	2010      	movs	r0, #16
 80016b8:	f002 f950 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HL_Button_Pin);
 80016bc:	2080      	movs	r0, #128	; 0x80
 80016be:	f002 f94d 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Eco_Led_Pin);
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	0018      	movs	r0, r3
 80016c8:	f002 f948 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Eco_Button_Pin);
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f002 f943 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LT_Button_Pin);
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	0018      	movs	r0, r3
 80016dc:	f002 f93e 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Haz_Button_Pin);
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	015b      	lsls	r3, r3, #5
 80016e4:	0018      	movs	r0, r3
 80016e6:	f002 f939 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RT_Button_Pin);
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	019b      	lsls	r3, r3, #6
 80016ee:	0018      	movs	r0, r3
 80016f0:	f002 f934 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Cruise_P_Pin);
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	0018      	movs	r0, r3
 80016fa:	f002 f92f 	bl	800395c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800170a:	0018      	movs	r0, r3
 800170c:	f003 fd9e 	bl	800524c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	20002e50 	.word	0x20002e50

0800171c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <CEC_CAN_IRQHandler+0x18>)
 8001722:	0018      	movs	r0, r3
 8001724:	f001 fc81 	bl	800302a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */
  CPP_HandleCANRxInterrupt();
 8001728:	f000 fb26 	bl	8001d78 <CPP_HandleCANRxInterrupt>
  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	20002710 	.word	0x20002710

08001738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	return 1;
 800173c:	2301      	movs	r3, #1
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_kill>:

int _kill(int pid, int sig)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800174e:	f00b f89f 	bl	800c890 <__errno>
 8001752:	0003      	movs	r3, r0
 8001754:	2216      	movs	r2, #22
 8001756:	601a      	str	r2, [r3, #0]
	return -1;
 8001758:	2301      	movs	r3, #1
 800175a:	425b      	negs	r3, r3
}
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <_exit>:

void _exit (int status)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800176c:	2301      	movs	r3, #1
 800176e:	425a      	negs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	0011      	movs	r1, r2
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff ffe5 	bl	8001744 <_kill>
	while (1) {}		/* Make sure we hang here */
 800177a:	e7fe      	b.n	800177a <_exit+0x16>

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	18d3      	adds	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f00b f870 	bl	800c890 <__errno>
 80017b0:	0003      	movs	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	425b      	negs	r3, r3
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	18d2      	adds	r2, r2, r3
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b006      	add	sp, #24
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20004000 	.word	0x20004000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	200000a0 	.word	0x200000a0
 80017e4:	20002ef0 	.word	0x20002ef0

080017e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}

08001806 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b002      	add	sp, #8
 8001828:	bd80      	pop	{r7, pc}

0800182a <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	4798      	blx	r3
    }
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	b002      	add	sp, #8
 8001866:	bd80      	pop	{r7, pc}

08001868 <CPP_UserSetup>:
{
    .name = "CAN Tx"
};

void CPP_UserSetup(void)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b0b1      	sub	sp, #196	; 0xc4
 800186c:	af00      	add	r7, sp, #0
  // Note: These binds really abuse the stack and we should figure out a way to avoid them
  //       since we are heavily constrained.
  {
    using namespace SolarGators::DataModules;
    // Left Side
    left_turn.action_ = std::bind(&SteeringController::ToggleLeftTurnSignal, &Controller);
 800186e:	2114      	movs	r1, #20
 8001870:	187b      	adds	r3, r7, r1
 8001872:	4aa3      	ldr	r2, [pc, #652]	; (8001b00 <CPP_UserSetup+0x298>)
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	200c      	movs	r0, #12
 800187e:	183b      	adds	r3, r7, r0
 8001880:	187a      	adds	r2, r7, r1
 8001882:	ca12      	ldmia	r2!, {r1, r4}
 8001884:	c312      	stmia	r3!, {r1, r4}
 8001886:	4b9f      	ldr	r3, [pc, #636]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	003b      	movs	r3, r7
 800188c:	221c      	movs	r2, #28
 800188e:	18ba      	adds	r2, r7, r2
 8001890:	1839      	adds	r1, r7, r0
 8001892:	0018      	movs	r0, r3
 8001894:	f000 fac4 	bl	8001e20 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001898:	003a      	movs	r2, r7
 800189a:	4b9b      	ldr	r3, [pc, #620]	; (8001b08 <CPP_UserSetup+0x2a0>)
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fae4 	bl	8001e6c <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise_minus.action_ = std::bind(&SteeringController::DecreaseCruiseSpeed, &Controller);
 80018a4:	2134      	movs	r1, #52	; 0x34
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	4a98      	ldr	r2, [pc, #608]	; (8001b0c <CPP_UserSetup+0x2a4>)
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	202c      	movs	r0, #44	; 0x2c
 80018b4:	183b      	adds	r3, r7, r0
 80018b6:	187a      	adds	r2, r7, r1
 80018b8:	ca12      	ldmia	r2!, {r1, r4}
 80018ba:	c312      	stmia	r3!, {r1, r4}
 80018bc:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <CPP_UserSetup+0x29c>)
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c0:	2420      	movs	r4, #32
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	223c      	movs	r2, #60	; 0x3c
 80018c6:	18ba      	adds	r2, r7, r2
 80018c8:	1839      	adds	r1, r7, r0
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 faa8 	bl	8001e20 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80018d0:	193a      	adds	r2, r7, r4
 80018d2:	4b8f      	ldr	r3, [pc, #572]	; (8001b10 <CPP_UserSetup+0x2a8>)
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fac8 	bl	8001e6c <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    eco.action_ = HandleEco;
 80018dc:	4a8d      	ldr	r2, [pc, #564]	; (8001b14 <CPP_UserSetup+0x2ac>)
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <CPP_UserSetup+0x2b0>)
 80018e0:	0011      	movs	r1, r2
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fae8 	bl	8001eb8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    headlights.action_ = HandleHeadLights;
 80018e8:	4a8c      	ldr	r2, [pc, #560]	; (8001b1c <CPP_UserSetup+0x2b4>)
 80018ea:	4b8d      	ldr	r3, [pc, #564]	; (8001b20 <CPP_UserSetup+0x2b8>)
 80018ec:	0011      	movs	r1, r2
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 fae2 	bl	8001eb8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    hazards.action_ = std::bind(&SteeringController::ToggleHazards, &Controller);
 80018f4:	2154      	movs	r1, #84	; 0x54
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	4a8a      	ldr	r2, [pc, #552]	; (8001b24 <CPP_UserSetup+0x2bc>)
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	204c      	movs	r0, #76	; 0x4c
 8001904:	183b      	adds	r3, r7, r0
 8001906:	187a      	adds	r2, r7, r1
 8001908:	ca12      	ldmia	r2!, {r1, r4}
 800190a:	c312      	stmia	r3!, {r1, r4}
 800190c:	4b7d      	ldr	r3, [pc, #500]	; (8001b04 <CPP_UserSetup+0x29c>)
 800190e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001910:	2440      	movs	r4, #64	; 0x40
 8001912:	193b      	adds	r3, r7, r4
 8001914:	225c      	movs	r2, #92	; 0x5c
 8001916:	18ba      	adds	r2, r7, r2
 8001918:	1839      	adds	r1, r7, r0
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fa80 	bl	8001e20 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001920:	193a      	adds	r2, r7, r4
 8001922:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <CPP_UserSetup+0x2c0>)
 8001924:	0011      	movs	r1, r2
 8001926:	0018      	movs	r0, r3
 8001928:	f000 faa0 	bl	8001e6c <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    // Right Side
    right_turn.action_ = std::bind(&SteeringController::ToggleRightTurnSignal, &Controller);
 800192c:	2174      	movs	r1, #116	; 0x74
 800192e:	187b      	adds	r3, r7, r1
 8001930:	4a7e      	ldr	r2, [pc, #504]	; (8001b2c <CPP_UserSetup+0x2c4>)
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	187b      	adds	r3, r7, r1
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	206c      	movs	r0, #108	; 0x6c
 800193c:	183b      	adds	r3, r7, r0
 800193e:	187a      	adds	r2, r7, r1
 8001940:	ca12      	ldmia	r2!, {r1, r4}
 8001942:	c312      	stmia	r3!, {r1, r4}
 8001944:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001948:	2460      	movs	r4, #96	; 0x60
 800194a:	193b      	adds	r3, r7, r4
 800194c:	227c      	movs	r2, #124	; 0x7c
 800194e:	18ba      	adds	r2, r7, r2
 8001950:	1839      	adds	r1, r7, r0
 8001952:	0018      	movs	r0, r3
 8001954:	f000 fa64 	bl	8001e20 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001958:	193a      	adds	r2, r7, r4
 800195a:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <CPP_UserSetup+0x2c8>)
 800195c:	0011      	movs	r1, r2
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fa84 	bl	8001e6c <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise_plus.action_ = std::bind(&SteeringController::IncreaseCruiseSpeed, &Controller);
 8001964:	2194      	movs	r1, #148	; 0x94
 8001966:	187b      	adds	r3, r7, r1
 8001968:	4a72      	ldr	r2, [pc, #456]	; (8001b34 <CPP_UserSetup+0x2cc>)
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	208c      	movs	r0, #140	; 0x8c
 8001974:	183b      	adds	r3, r7, r0
 8001976:	187a      	adds	r2, r7, r1
 8001978:	ca12      	ldmia	r2!, {r1, r4}
 800197a:	c312      	stmia	r3!, {r1, r4}
 800197c:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <CPP_UserSetup+0x29c>)
 800197e:	229c      	movs	r2, #156	; 0x9c
 8001980:	18b9      	adds	r1, r7, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	2480      	movs	r4, #128	; 0x80
 8001986:	193b      	adds	r3, r7, r4
 8001988:	18ba      	adds	r2, r7, r2
 800198a:	1839      	adds	r1, r7, r0
 800198c:	0018      	movs	r0, r3
 800198e:	f000 fa47 	bl	8001e20 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001992:	193a      	adds	r2, r7, r4
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <CPP_UserSetup+0x2d0>)
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f000 fa67 	bl	8001e6c <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    horn.action_ = std::bind(&SteeringController::ToggleHorn, &Controller);
 800199e:	21b4      	movs	r1, #180	; 0xb4
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	4a66      	ldr	r2, [pc, #408]	; (8001b3c <CPP_UserSetup+0x2d4>)
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	20ac      	movs	r0, #172	; 0xac
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	187a      	adds	r2, r7, r1
 80019b2:	ca12      	ldmia	r2!, {r1, r4}
 80019b4:	c312      	stmia	r3!, {r1, r4}
 80019b6:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <CPP_UserSetup+0x29c>)
 80019b8:	22bc      	movs	r2, #188	; 0xbc
 80019ba:	18b9      	adds	r1, r7, r2
 80019bc:	600b      	str	r3, [r1, #0]
 80019be:	24a0      	movs	r4, #160	; 0xa0
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	18ba      	adds	r2, r7, r2
 80019c4:	1839      	adds	r1, r7, r0
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 fa2a 	bl	8001e20 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80019cc:	193a      	adds	r2, r7, r4
 80019ce:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <CPP_UserSetup+0x2d8>)
 80019d0:	0011      	movs	r1, r2
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 fa4a 	bl	8001e6c <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise.action_ = HandleCruise;
 80019d8:	4a5a      	ldr	r2, [pc, #360]	; (8001b44 <CPP_UserSetup+0x2dc>)
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <CPP_UserSetup+0x2e0>)
 80019dc:	0011      	movs	r1, r2
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 fa6a 	bl	8001eb8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    reverse.action_ = HandleReverse;
 80019e4:	4a59      	ldr	r2, [pc, #356]	; (8001b4c <CPP_UserSetup+0x2e4>)
 80019e6:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <CPP_UserSetup+0x2e8>)
 80019e8:	0011      	movs	r1, r2
 80019ea:	0018      	movs	r0, r3
 80019ec:	f000 fa64 	bl	8001eb8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
  }
  // Add to Button Group
  // Left side
  Controller.AddButton(&left_turn);
 80019f0:	4a45      	ldr	r2, [pc, #276]	; (8001b08 <CPP_UserSetup+0x2a0>)
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <CPP_UserSetup+0x29c>)
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f005 f949 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&cruise_minus);
 80019fc:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <CPP_UserSetup+0x2a8>)
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a00:	0011      	movs	r1, r2
 8001a02:	0018      	movs	r0, r3
 8001a04:	f005 f943 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&eco);
 8001a08:	4a43      	ldr	r2, [pc, #268]	; (8001b18 <CPP_UserSetup+0x2b0>)
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f005 f93d 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&headlights);
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <CPP_UserSetup+0x2b8>)
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a18:	0011      	movs	r1, r2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f005 f937 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&hazards);
 8001a20:	4a41      	ldr	r2, [pc, #260]	; (8001b28 <CPP_UserSetup+0x2c0>)
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a24:	0011      	movs	r1, r2
 8001a26:	0018      	movs	r0, r3
 8001a28:	f005 f931 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  // Right side
  Controller.AddButton(&right_turn);
 8001a2c:	4a40      	ldr	r2, [pc, #256]	; (8001b30 <CPP_UserSetup+0x2c8>)
 8001a2e:	4b35      	ldr	r3, [pc, #212]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a30:	0011      	movs	r1, r2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f005 f92b 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&cruise_plus);
 8001a38:	4a3f      	ldr	r2, [pc, #252]	; (8001b38 <CPP_UserSetup+0x2d0>)
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f005 f925 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&horn);
 8001a44:	4a3e      	ldr	r2, [pc, #248]	; (8001b40 <CPP_UserSetup+0x2d8>)
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a48:	0011      	movs	r1, r2
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f005 f91f 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&cruise);
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <CPP_UserSetup+0x2e0>)
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a54:	0011      	movs	r1, r2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f005 f919 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  Controller.AddButton(&reverse);
 8001a5c:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <CPP_UserSetup+0x2e8>)
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <CPP_UserSetup+0x29c>)
 8001a60:	0011      	movs	r1, r2
 8001a62:	0018      	movs	r0, r3
 8001a64:	f005 f913 	bl	8006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  // Load the CAN Controller
  CANController.AddRxModule(&Bms);
 8001a68:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <CPP_UserSetup+0x2ec>)
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <CPP_UserSetup+0x2f0>)
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f005 fdbb 	bl	80075ea <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  CANController.AddRxModule(&McRx0);
 8001a74:	4a39      	ldr	r2, [pc, #228]	; (8001b5c <CPP_UserSetup+0x2f4>)
 8001a76:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <CPP_UserSetup+0x2f0>)
 8001a78:	0011      	movs	r1, r2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f005 fdb5 	bl	80075ea <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  // Start Thread that Handles Turn Signal LEDs
  signal_timer_id = osTimerNew((osThreadFunc_t)UpdateTurnSignals, osTimerPeriodic, NULL, &signal_timer_attr);
 8001a80:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <CPP_UserSetup+0x2f8>)
 8001a82:	4838      	ldr	r0, [pc, #224]	; (8001b64 <CPP_UserSetup+0x2fc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	2101      	movs	r1, #1
 8001a88:	f007 f97e 	bl	8008d88 <osTimerNew>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <CPP_UserSetup+0x300>)
 8001a90:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 8001a92:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <CPP_UserSetup+0x300>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <CPP_UserSetup+0x236>
  {
      Error_Handler();
 8001a9a:	f7ff fc2d 	bl	80012f8 <Error_Handler>
  }
  osTimerStart(signal_timer_id, 500);
 8001a9e:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <CPP_UserSetup+0x300>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	22fa      	movs	r2, #250	; 0xfa
 8001aa4:	0052      	lsls	r2, r2, #1
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f007 f9f5 	bl	8008e98 <osTimerStart>
  // Start Thread that updates screen
  ui_thread_id = osThreadNew((osThreadFunc_t)UpdateUI, NULL, &ui_thread_attributes);
 8001aae:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <CPP_UserSetup+0x304>)
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <CPP_UserSetup+0x308>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f007 f87f 	bl	8008bb8 <osThreadNew>
 8001aba:	0002      	movs	r2, r0
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <CPP_UserSetup+0x30c>)
 8001abe:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <CPP_UserSetup+0x300>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <CPP_UserSetup+0x264>
  {
      Error_Handler();
 8001ac8:	f7ff fc16 	bl	80012f8 <Error_Handler>
  }
  // Start Thread that sends CAN Data
  signal_timer_id = osTimerNew((osThreadFunc_t)UpdateTurnSignals, osTimerPeriodic, NULL, &signal_timer_attr);
 8001acc:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <CPP_UserSetup+0x2f8>)
 8001ace:	4825      	ldr	r0, [pc, #148]	; (8001b64 <CPP_UserSetup+0x2fc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	f007 f958 	bl	8008d88 <osTimerNew>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <CPP_UserSetup+0x300>)
 8001adc:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <CPP_UserSetup+0x300>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <CPP_UserSetup+0x282>
  {
      Error_Handler();
 8001ae6:	f7ff fc07 	bl	80012f8 <Error_Handler>
  }
  osTimerStart(signal_timer_id, 50);
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <CPP_UserSetup+0x300>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2132      	movs	r1, #50	; 0x32
 8001af0:	0018      	movs	r0, r3
 8001af2:	f007 f9d1 	bl	8008e98 <osTimerStart>
}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b031      	add	sp, #196	; 0xc4
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	080068e9 	.word	0x080068e9
 8001b04:	200000a4 	.word	0x200000a4
 8001b08:	20000948 	.word	0x20000948
 8001b0c:	08006b3d 	.word	0x08006b3d
 8001b10:	20000974 	.word	0x20000974
 8001b14:	08001d91 	.word	0x08001d91
 8001b18:	200009a0 	.word	0x200009a0
 8001b1c:	08001db5 	.word	0x08001db5
 8001b20:	200009cc 	.word	0x200009cc
 8001b24:	080069c1 	.word	0x080069c1
 8001b28:	200009f8 	.word	0x200009f8
 8001b2c:	08006955 	.word	0x08006955
 8001b30:	20000a24 	.word	0x20000a24
 8001b34:	08006b11 	.word	0x08006b11
 8001b38:	20000a50 	.word	0x20000a50
 8001b3c:	08006ae5 	.word	0x08006ae5
 8001b40:	20000a7c 	.word	0x20000a7c
 8001b44:	08001dd9 	.word	0x08001dd9
 8001b48:	20000aa8 	.word	0x20000aa8
 8001b4c:	08001dfd 	.word	0x08001dfd
 8001b50:	20000ad4 	.word	0x20000ad4
 8001b54:	200005e0 	.word	0x200005e0
 8001b58:	200006e8 	.word	0x200006e8
 8001b5c:	20000664 	.word	0x20000664
 8001b60:	20000004 	.word	0x20000004
 8001b64:	08001b79 	.word	0x08001b79
 8001b68:	20000b78 	.word	0x20000b78
 8001b6c:	0800d5ec 	.word	0x0800d5ec
 8001b70:	08001c79 	.word	0x08001c79
 8001b74:	20000b7c 	.word	0x20000b7c

08001b78 <_Z17UpdateTurnSignalsv>:

void UpdateTurnSignals()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  osMutexAcquire(Controller.mutex_id_, osWaitForever);
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4252      	negs	r2, r2
 8001b84:	0011      	movs	r1, r2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f007 fb92 	bl	80092b0 <osMutexAcquire>
  if(Controller.GetHazardsStatus())
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f004 fcee 	bl	8006570 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d004      	beq.n	8001ba2 <_Z17UpdateTurnSignalsv+0x2a>
    lt_indicator.Toggle();
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <_Z17UpdateTurnSignalsv+0xf4>)
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f006 fc6d 	bl	800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>
 8001ba0:	e014      	b.n	8001bcc <_Z17UpdateTurnSignalsv+0x54>
  else if(Controller.GetRightTurnStatus())
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f004 fcd8 	bl	800655a <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d004      	beq.n	8001bb8 <_Z17UpdateTurnSignalsv+0x40>
    rt_indicator.Toggle();
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <_Z17UpdateTurnSignalsv+0xf8>)
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f006 fc62 	bl	800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>
 8001bb6:	e009      	b.n	8001bcc <_Z17UpdateTurnSignalsv+0x54>
  else if(Controller.GetLeftTurnStatus())
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f004 fcc2 	bl	8006544 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d003      	beq.n	8001bcc <_Z17UpdateTurnSignalsv+0x54>
    lt_indicator.Toggle();
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <_Z17UpdateTurnSignalsv+0xf4>)
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f006 fc57 	bl	800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>
  if(!Controller.GetHazardsStatus() && !Controller.GetRightTurnStatus())
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f004 fcce 	bl	8006570 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4053      	eors	r3, r2
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <_Z17UpdateTurnSignalsv+0x84>
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001be4:	0018      	movs	r0, r3
 8001be6:	f004 fcb8 	bl	800655a <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 8001bea:	0003      	movs	r3, r0
 8001bec:	001a      	movs	r2, r3
 8001bee:	2301      	movs	r3, #1
 8001bf0:	4053      	eors	r3, r2
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <_Z17UpdateTurnSignalsv+0x84>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <_Z17UpdateTurnSignalsv+0x86>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <_Z17UpdateTurnSignalsv+0x98>
    HAL_GPIO_WritePin(RT_Led_GPIO_Port, RT_Led_Pin, GPIO_PIN_RESET);
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	01db      	lsls	r3, r3, #7
 8001c06:	481b      	ldr	r0, [pc, #108]	; (8001c74 <_Z17UpdateTurnSignalsv+0xfc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	f001 fe6d 	bl	80038ea <HAL_GPIO_WritePin>
  if(!Controller.GetHazardsStatus() && !Controller.GetLeftTurnStatus())
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f004 fcac 	bl	8006570 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4053      	eors	r3, r2
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00c      	beq.n	8001c40 <_Z17UpdateTurnSignalsv+0xc8>
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f004 fc8b 	bl	8006544 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	001a      	movs	r2, r3
 8001c32:	2301      	movs	r3, #1
 8001c34:	4053      	eors	r3, r2
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <_Z17UpdateTurnSignalsv+0xc8>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <_Z17UpdateTurnSignalsv+0xca>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <_Z17UpdateTurnSignalsv+0xde>
      HAL_GPIO_WritePin(LT_Led_GPIO_Port, LT_Led_Pin, GPIO_PIN_RESET);
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	0099      	lsls	r1, r3, #2
 8001c4a:	2390      	movs	r3, #144	; 0x90
 8001c4c:	05db      	lsls	r3, r3, #23
 8001c4e:	2200      	movs	r2, #0
 8001c50:	0018      	movs	r0, r3
 8001c52:	f001 fe4a 	bl	80038ea <HAL_GPIO_WritePin>
  osMutexRelease(Controller.mutex_id_);
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <_Z17UpdateTurnSignalsv+0xf0>)
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f007 fb84 	bl	8009368 <osMutexRelease>
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	200000a4 	.word	0x200000a4
 8001c6c:	20000b00 	.word	0x20000b00
 8001c70:	20000b3c 	.word	0x20000b3c
 8001c74:	48000800 	.word	0x48000800

08001c78 <_Z8UpdateUIv>:

void UpdateUI()
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
  HY28b lcd(&hspi1, false);
 8001c7e:	4931      	ldr	r1, [pc, #196]	; (8001d44 <_Z8UpdateUIv+0xcc>)
 8001c80:	2410      	movs	r4, #16
 8001c82:	193b      	adds	r3, r7, r4
 8001c84:	2200      	movs	r2, #0
 8001c86:	0018      	movs	r0, r3
 8001c88:	f006 fa0c 	bl	80080a4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb>
  Drivers::UI gui(HY28b::BLACK, lcd);
 8001c8c:	193a      	adds	r2, r7, r4
 8001c8e:	003b      	movs	r3, r7
 8001c90:	2100      	movs	r1, #0
 8001c92:	0018      	movs	r0, r3
 8001c94:	f006 fc1e 	bl	80084d4 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b>
  uint8_t i = 0;
 8001c98:	231f      	movs	r3, #31
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
  while(1)
  {
    // TODO: Remove this was for testing
    gui.UpdateSpeed(i++);
 8001ca0:	241f      	movs	r4, #31
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	193a      	adds	r2, r7, r4
 8001ca8:	1c59      	adds	r1, r3, #1
 8001caa:	7011      	strb	r1, [r2, #0]
 8001cac:	003a      	movs	r2, r7
 8001cae:	0019      	movs	r1, r3
 8001cb0:	0010      	movs	r0, r2
 8001cb2:	f006 fc89 	bl	80085c8 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh>
    if(i > 99)
 8001cb6:	193b      	adds	r3, r7, r4
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b63      	cmp	r3, #99	; 0x63
 8001cbc:	d902      	bls.n	8001cc4 <_Z8UpdateUIv+0x4c>
      i = 0;
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
    osMutexAcquire(McRx0.mutex_id_, osWaitForever);
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <_Z8UpdateUIv+0xd0>)
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4252      	negs	r2, r2
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f007 faee 	bl	80092b0 <osMutexAcquire>
    // Get Speed from Mitsuba
    uint16_t rpm = McRx0.GetMotorRPM();
 8001cd4:	231c      	movs	r3, #28
 8001cd6:	18fc      	adds	r4, r7, r3
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <_Z8UpdateUIv+0xd0>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f004 f92f 	bl	8005f3e <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	8023      	strh	r3, [r4, #0]
    // Get Current from Mitsuba
    gui.UpdateCurrent(McRx0.GetBatteryCurrent());
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <_Z8UpdateUIv+0xd0>)
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f004 f91e 	bl	8005f28 <_ZNK11SolarGators11DataModules10MitsubaRx017GetBatteryCurrentEv>
 8001cec:	0003      	movs	r3, r0
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	003b      	movs	r3, r7
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f006 fcb7 	bl	8008668 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh>
    osMutexRelease(McRx0.mutex_id_);
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_Z8UpdateUIv+0xd0>)
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f007 fb32 	bl	8009368 <osMutexRelease>
    // Get SOC from BMS
    osMutexAcquire(Bms.mutex_id_, osWaitForever);
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <_Z8UpdateUIv+0xd4>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4252      	negs	r2, r2
 8001d0c:	0011      	movs	r1, r2
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f007 face 	bl	80092b0 <osMutexAcquire>
    gui.UpdateSOC(Bms.GetPackVoltage());
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <_Z8UpdateUIv+0xd4>)
 8001d16:	0018      	movs	r0, r3
 8001d18:	f004 fad2 	bl	80062c0 <_ZN11SolarGators11DataModules8OrionBMS14GetPackVoltageEv>
 8001d1c:	1c03      	adds	r3, r0, #0
 8001d1e:	1c18      	adds	r0, r3, #0
 8001d20:	f7fe fa88 	bl	8000234 <__aeabi_f2uiz>
 8001d24:	0003      	movs	r3, r0
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	003b      	movs	r3, r7
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f006 fceb 	bl	8008708 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh>
    osMutexRelease(Bms.mutex_id_);
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <_Z8UpdateUIv+0xd4>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f007 fb16 	bl	8009368 <osMutexRelease>
    osDelay(100);
 8001d3c:	2064      	movs	r0, #100	; 0x64
 8001d3e:	f006 ffe3 	bl	8008d08 <osDelay>
  }
 8001d42:	e7ad      	b.n	8001ca0 <_Z8UpdateUIv+0x28>
 8001d44:	20002a3c 	.word	0x20002a3c
 8001d48:	20000664 	.word	0x20000664
 8001d4c:	200005e0 	.word	0x200005e0

08001d50 <CPP_HandleGPIOInterrupt>:
  McReq.SetRequestAllFrames();
  CANController.Send(&McReq);
}

void CPP_HandleGPIOInterrupt(uint16_t GPIO_Pin)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	1dbb      	adds	r3, r7, #6
 8001d5a:	801a      	strh	r2, [r3, #0]
  Controller.HandlePress(GPIO_Pin);
 8001d5c:	1dbb      	adds	r3, r7, #6
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <CPP_HandleGPIOInterrupt+0x24>)
 8001d62:	0011      	movs	r1, r2
 8001d64:	0018      	movs	r0, r3
 8001d66:	f004 ff78 	bl	8006c5a <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	200000a4 	.word	0x200000a4

08001d78 <CPP_HandleCANRxInterrupt>:

void CPP_HandleCANRxInterrupt()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  CANController.HandleReceive();
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <CPP_HandleCANRxInterrupt+0x14>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f005 fbe0 	bl	8007544 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv>
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	200006e8 	.word	0x200006e8

08001d90 <_Z9HandleEcov>:

void HandleEco()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  Controller.ToggleEco();
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <_Z9HandleEcov+0x1c>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f004 ff49 	bl	8006c2e <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv>
  eco_indicator.Toggle();
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <_Z9HandleEcov+0x20>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f006 fb6b 	bl	800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	200000a4 	.word	0x200000a4
 8001db0:	20000b14 	.word	0x20000b14

08001db4 <_Z16HandleHeadLightsv>:
void HandleHeadLights()
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  Controller.ToggleHeadlights();
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <_Z16HandleHeadLightsv+0x1c>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f004 fe64 	bl	8006a88 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>
  hl_indicator.Toggle();
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <_Z16HandleHeadLightsv+0x20>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f006 fb59 	bl	800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	200000a4 	.word	0x200000a4
 8001dd4:	20000b28 	.word	0x20000b28

08001dd8 <_Z12HandleCruisev>:
void HandleCruise()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  Controller.ToggleCruise();
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <_Z12HandleCruisev+0x1c>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f004 fe24 	bl	8006a2c <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>
  cr_indicator.Toggle();
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <_Z12HandleCruisev+0x20>)
 8001de6:	0018      	movs	r0, r3
 8001de8:	f006 fb47 	bl	800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	200000a4 	.word	0x200000a4
 8001df8:	20000b50 	.word	0x20000b50

08001dfc <_Z13HandleReversev>:
void HandleReverse()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  Controller.ToggleReverse();
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <_Z13HandleReversev+0x1c>)
 8001e02:	0018      	movs	r0, r3
 8001e04:	f004 fee5 	bl	8006bd2 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>
  rev_indicator.Toggle();
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <_Z13HandleReversev+0x20>)
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f006 fb35 	bl	800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001e10:	46c0      	nop			; (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	200000a4 	.word	0x200000a4
 8001e1c:	20000b64 	.word	0x20000b64

08001e20 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f861 	bl	8001ef6 <_ZSt7forwardIMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001e34:	0004      	movs	r4, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 f865 	bl	8001f08 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	0021      	movs	r1, r4
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f868 	bl	8001f1a <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1IJS5_EEEOS4_DpOT_>
    }
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b005      	add	sp, #20
 8001e50:	bd90      	pop	{r4, r7, pc}

08001e52 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff fcf0 	bl	8001842 <_ZNSt14_Function_baseD1Ev>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b08b      	sub	sp, #44	; 0x2c
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f89c 	bl	8001fb6 <_ZSt7forwardISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	241c      	movs	r4, #28
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	0011      	movs	r1, r2
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f876 	bl	8001f78 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>
 8001e8c:	193a      	adds	r2, r7, r4
 8001e8e:	240c      	movs	r4, #12
 8001e90:	193b      	adds	r3, r7, r4
 8001e92:	0011      	movs	r1, r2
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 f897 	bl	8001fc8 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_>
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	193b      	adds	r3, r7, r4
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 f8b9 	bl	8002018 <_ZNSt8functionIFvvEE4swapERS1_>
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff ffd2 	bl	8001e52 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8001eae:	687b      	ldr	r3, [r7, #4]
	}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b00b      	add	sp, #44	; 0x2c
 8001eb6:	bd90      	pop	{r4, r7, pc}

08001eb8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>:
	operator=(_Functor&& __f)
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f000 f8c8 	bl	800205a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	2408      	movs	r4, #8
 8001ece:	193b      	adds	r3, r7, r4
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f8ca 	bl	800206c <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	193b      	adds	r3, r7, r4
 8001edc:	0011      	movs	r1, r2
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 f89a 	bl	8002018 <_ZNSt8functionIFvvEE4swapERS1_>
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff ffb3 	bl	8001e52 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8001eec:	687b      	ldr	r3, [r7, #4]
	}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b007      	add	sp, #28
 8001ef4:	bd90      	pop	{r4, r7, pc}

08001ef6 <_ZSt7forwardIMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1IJS5_EEEOS4_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 8001f1a:	b590      	push	{r4, r7, lr}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f000 f8c7 	bl	80020bc <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	ca03      	ldmia	r2!, {r0, r1}
 8001f34:	c303      	stmia	r3!, {r0, r1}
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3308      	adds	r3, #8
 8001f3a:	001c      	movs	r4, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ffe2 	bl	8001f08 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001f44:	0003      	movs	r3, r0
 8001f46:	0019      	movs	r1, r3
 8001f48:	0020      	movs	r0, r4
 8001f4a:	f000 f8c0 	bl	80020ce <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1IJS3_ELb1EEEDpOT_>
	{ }
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b005      	add	sp, #20
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	0011      	movs	r1, r2
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 f8cd 	bl	8002108 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>:
      _Bind(_Bind&& __b)
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f000 f899 	bl	80020bc <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	ca03      	ldmia	r2!, {r0, r1}
 8001f90:	c303      	stmia	r3!, {r0, r1}
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3308      	adds	r3, #8
 8001f96:	001c      	movs	r4, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f000 f8aa 	bl	80020f6 <_ZSt4moveIRSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	0020      	movs	r0, r4
 8001fa8:	f7ff ffd6 	bl	8001f58 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>
      { }
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b003      	add	sp, #12
 8001fb4:	bd90      	pop	{r4, r7, pc}

08001fb6 <_ZSt7forwardISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b002      	add	sp, #8
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff fc28 	bl	800182a <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f8ab 	bl	8002138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE21_M_not_empty_functionIS9_EEbRKT_>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d00f      	beq.n	8002006 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x3e>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001fe6:	687c      	ldr	r4, [r7, #4]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 f8ad 	bl	800214a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	f000 f8b1 	bl	800215c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x48>)
 8001ffe:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x4c>)
 8002004:	609a      	str	r2, [r3, #8]
	  }
      }
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b003      	add	sp, #12
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	08002183 	.word	0x08002183
 8002014:	080021a3 	.word	0x080021a3

08002018 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	0011      	movs	r1, r2
 8002028:	0018      	movs	r0, r3
 800202a:	f000 f8f2 	bl	8002212 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3308      	adds	r3, #8
 8002032:	001a      	movs	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3308      	adds	r3, #8
 8002038:	0019      	movs	r1, r3
 800203a:	0010      	movs	r0, r2
 800203c:	f000 f914 	bl	8002268 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	330c      	adds	r3, #12
 8002044:	001a      	movs	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	330c      	adds	r3, #12
 800204a:	0019      	movs	r1, r3
 800204c:	0010      	movs	r0, r2
 800204e:	f000 f935 	bl	80022bc <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}

0800205a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <_ZNSt8functionIFvvEEC1IPS0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff fbd6 	bl	800182a <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f93c 	bl	80022fe <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d00f      	beq.n	80020aa <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x3e>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800208a:	687c      	ldr	r4, [r7, #4]
 800208c:	003b      	movs	r3, r7
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f941 	bl	8002316 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8002094:	0003      	movs	r3, r0
 8002096:	0019      	movs	r1, r3
 8002098:	0020      	movs	r0, r4
 800209a:	f000 f945 	bl	8002328 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x48>)
 80020a2:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x4c>)
 80020a8:	609a      	str	r2, [r3, #8]
      }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b003      	add	sp, #12
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	0800234f 	.word	0x0800234f
 80020b8:	0800236d 	.word	0x0800236d

080020bc <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1IJS3_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 80020ce:	b590      	push	{r4, r7, lr}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 80020d8:	687c      	ldr	r4, [r7, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff ff13 	bl	8001f08 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 80020e2:	0003      	movs	r3, r0
 80020e4:	0019      	movs	r1, r3
 80020e6:	0020      	movs	r0, r4
 80020e8:	f000 f96f 	bl	80023ca <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1IS3_EEOT_>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b003      	add	sp, #12
 80020f4:	bd90      	pop	{r4, r7, pc}

080020f6 <_ZSt4moveIRSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002112:	687c      	ldr	r4, [r7, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	0018      	movs	r0, r3
 8002118:	f000 f96b 	bl	80023f2 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>
 800211c:	0003      	movs	r3, r0
 800211e:	0018      	movs	r0, r3
 8002120:	f7ff fef2 	bl	8001f08 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002124:	0003      	movs	r3, r0
 8002126:	0019      	movs	r1, r3
 8002128:	0020      	movs	r0, r4
 800212a:	f000 f96f 	bl	800240c <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b003      	add	sp, #12
 8002136:	bd90      	pop	{r4, r7, pc}

08002138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE21_M_not_empty_functionIS9_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002140:	2301      	movs	r3, #1
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b002      	add	sp, #8
 8002148:	bd80      	pop	{r7, pc}

0800214a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b002      	add	sp, #8
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	0018      	movs	r0, r3
 800216a:	f7ff ffee 	bl	800214a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 800216e:	0001      	movs	r1, r0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	1c22      	adds	r2, r4, #0
 8002174:	0018      	movs	r0, r3
 8002176:	f000 f95b 	bl	8002430 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b005      	add	sp, #20
 8002180:	bd90      	pop	{r4, r7, pc}

08002182 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 f96e 	bl	800246e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>
 8002192:	0003      	movs	r3, r0
 8002194:	0018      	movs	r0, r3
 8002196:	f000 f978 	bl	800248a <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEclIJEvEET0_DpOT_>
      }
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80021a2:	b5b0      	push	{r4, r5, r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d018      	beq.n	80021ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x48>
 80021b8:	dc1d      	bgt.n	80021f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d002      	beq.n	80021c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x22>
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d00c      	beq.n	80021dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x3a>
 80021c2:	e018      	b.n	80021f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f96f 	bl	80024aa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 80021cc:	0004      	movs	r4, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 f94c 	bl	800246e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>
 80021d6:	0003      	movs	r3, r0
 80021d8:	6023      	str	r3, [r4, #0]
	      break;
 80021da:	e00c      	b.n	80021f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1c2a      	adds	r2, r5, #0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f96e 	bl	80024c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>
	      break;
 80021e8:	e005      	b.n	80021f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1c21      	adds	r1, r4, #0
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f988 	bl	8002504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 80021f4:	46c0      	nop			; (mov r8, r8)
	  return false;
 80021f6:	2300      	movs	r3, #0
	}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b006      	add	sp, #24
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}

08002200 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8002212:	b590      	push	{r4, r7, lr}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ffee 	bl	8002200 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002224:	0002      	movs	r2, r0
 8002226:	2408      	movs	r4, #8
 8002228:	193b      	adds	r3, r7, r4
 800222a:	ca03      	ldmia	r2!, {r0, r1}
 800222c:	c303      	stmia	r3!, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff ffe5 	bl	8002200 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002236:	0002      	movs	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	ca03      	ldmia	r2!, {r0, r1}
 800223c:	c303      	stmia	r3!, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800223e:	193b      	adds	r3, r7, r4
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff ffdd 	bl	8002200 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002246:	0002      	movs	r2, r0
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	ca03      	ldmia	r2!, {r0, r1}
 800224c:	c303      	stmia	r3!, {r0, r1}
    }
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b005      	add	sp, #20
 8002254:	bd90      	pop	{r4, r7, pc}

08002256 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff ffee 	bl	8002256 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800227a:	0003      	movs	r3, r0
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	f7ff ffe7 	bl	8002256 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8002288:	0003      	movs	r3, r0
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002290:	230c      	movs	r3, #12
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff ffde 	bl	8002256 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800229a:	0003      	movs	r3, r0
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	601a      	str	r2, [r3, #0]
    }
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff ffee 	bl	80022aa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80022ce:	0003      	movs	r3, r0
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7ff ffe7 	bl	80022aa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80022dc:	0003      	movs	r3, r0
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80022e4:	230c      	movs	r3, #12
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff ffde 	bl	80022aa <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80022ee:	0003      	movs	r3, r0
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	601a      	str	r2, [r3, #0]
    }
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b004      	add	sp, #16
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	4193      	sbcs	r3, r2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}

08002316 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff ffee 	bl	8002316 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 800233a:	0001      	movs	r1, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1c22      	adds	r2, r4, #0
 8002340:	0018      	movs	r0, r3
 8002342:	f000 f8f5 	bl	8002530 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	b005      	add	sp, #20
 800234c:	bd90      	pop	{r4, r7, pc}

0800234e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f000 f905 	bl	8002568 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800235e:	0003      	movs	r3, r0
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4798      	blx	r3
      }
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b002      	add	sp, #8
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d018      	beq.n	80023b4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x48>
 8002382:	dc1d      	bgt.n	80023c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
 8002384:	2b01      	cmp	r3, #1
 8002386:	d002      	beq.n	800238e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8002388:	2b02      	cmp	r3, #2
 800238a:	d00c      	beq.n	80023a6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3a>
 800238c:	e018      	b.n	80023c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 f8fd 	bl	8002590 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8002396:	0004      	movs	r4, r0
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f8e4 	bl	8002568 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80023a0:	0003      	movs	r3, r0
 80023a2:	6023      	str	r3, [r4, #0]
	      break;
 80023a4:	e00c      	b.n	80023c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 80023a6:	68b9      	ldr	r1, [r7, #8]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1c2a      	adds	r2, r5, #0
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 f8fc 	bl	80025aa <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 80023b2:	e005      	b.n	80023c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1c21      	adds	r1, r4, #0
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 f912 	bl	80025e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80023be:	46c0      	nop			; (mov r8, r8)
	  return false;
 80023c0:	2300      	movs	r3, #0
	}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b006      	add	sp, #24
 80023c8:	bdb0      	pop	{r4, r5, r7, pc}

080023ca <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 80023ca:	b590      	push	{r4, r7, lr}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 80023d4:	687c      	ldr	r4, [r7, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff fd95 	bl	8001f08 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 80023de:	0003      	movs	r3, r0
 80023e0:	0019      	movs	r1, r3
 80023e2:	0020      	movs	r0, r4
 80023e4:	f000 f812 	bl	800240c <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b003      	add	sp, #12
 80023f0:	bd90      	pop	{r4, r7, pc}

080023f2 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f8fe 	bl	80025fe <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EE7_M_headERS4_>
 8002402:	0003      	movs	r3, r0
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff fd75 	bl	8001f08 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 800241e:	0003      	movs	r3, r0
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	701a      	strb	r2, [r3, #0]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff fe82 	bl	800214a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8002446:	0005      	movs	r5, r0
 8002448:	200c      	movs	r0, #12
 800244a:	f00a f98b 	bl	800c764 <_Znwj>
 800244e:	0003      	movs	r3, r0
 8002450:	001c      	movs	r4, r3
 8002452:	0029      	movs	r1, r5
 8002454:	0020      	movs	r0, r4
 8002456:	f7ff fd8f 	bl	8001f78 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	0018      	movs	r0, r3
 800245e:	f000 f824 	bl	80024aa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 8002462:	0003      	movs	r3, r0
 8002464:	601c      	str	r4, [r3, #0]
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bdb0      	pop	{r4, r5, r7, pc}

0800246e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0018      	movs	r0, r3
 800247a:	f000 f8c9 	bl	8002610 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>
 800247e:	0003      	movs	r3, r0
 8002480:	681b      	ldr	r3, [r3, #0]
	}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b002      	add	sp, #8
 8002488:	bd80      	pop	{r7, pc}

0800248a <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEclIJEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 800248a:	b590      	push	{r4, r7, lr}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 8002492:	f000 f8ca 	bl	800262a <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	      _Bound_indexes());
 8002496:	2308      	movs	r3, #8
 8002498:	18f9      	adds	r1, r7, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	1c22      	adds	r2, r4, #0
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 f8c8 	bl	8002634 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b005      	add	sp, #20
 80024a8:	bd90      	pop	{r4, r7, pc}

080024aa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>:
      _M_access()
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff f9a6 	bl	8001806 <_ZNSt9_Any_data9_M_accessEv>
 80024ba:	0003      	movs	r3, r0
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	701a      	strb	r2, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 f8ca 	bl	800266e <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>
 80024da:	0003      	movs	r3, r0
	  __dest._M_access<_Functor*>() =
 80024dc:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80024de:	200c      	movs	r0, #12
 80024e0:	f00a f940 	bl	800c764 <_Znwj>
 80024e4:	0003      	movs	r3, r0
 80024e6:	001c      	movs	r4, r3
	  __dest._M_access<_Functor*>() =
 80024e8:	0023      	movs	r3, r4
 80024ea:	002a      	movs	r2, r5
 80024ec:	ca23      	ldmia	r2!, {r0, r1, r5}
 80024ee:	c323      	stmia	r3!, {r0, r1, r5}
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff ffd9 	bl	80024aa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 80024f8:	0003      	movs	r3, r0
 80024fa:	601c      	str	r4, [r3, #0]
	}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bdb0      	pop	{r4, r5, r7, pc}

08002504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	003b      	movs	r3, r7
 800250e:	7019      	strb	r1, [r3, #0]
	  delete __victim._M_access<_Functor*>();
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f7ff ffc9 	bl	80024aa <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 8002518:	0003      	movs	r3, r0
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x24>
 8002520:	210c      	movs	r1, #12
 8002522:	0018      	movs	r0, r3
 8002524:	f00a f91a 	bl	800c75c <_ZdlPvj>
	}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	701a      	strb	r2, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff fee8 	bl	8002316 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8002546:	0003      	movs	r3, r0
 8002548:	681c      	ldr	r4, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	0018      	movs	r0, r3
 800254e:	f7ff f95a 	bl	8001806 <_ZNSt9_Any_data9_M_accessEv>
 8002552:	0003      	movs	r3, r0
 8002554:	0019      	movs	r1, r3
 8002556:	2004      	movs	r0, #4
 8002558:	f7ff f94b 	bl	80017f2 <_ZnwjPv>
 800255c:	0003      	movs	r3, r0
 800255e:	601c      	str	r4, [r3, #0]
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b005      	add	sp, #20
 8002566:	bd90      	pop	{r4, r7, pc}

08002568 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 f888 	bl	8002688 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8002578:	0003      	movs	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 f88f 	bl	80026a2 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8002584:	0003      	movs	r3, r0
 8002586:	46c0      	nop			; (mov r8, r8)
	}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b004      	add	sp, #16
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f7ff f933 	bl	8001806 <_ZNSt9_Any_data9_M_accessEv>
 80025a0:	0003      	movs	r3, r0
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80025aa:	b590      	push	{r4, r7, lr}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	701a      	strb	r2, [r3, #0]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f864 	bl	8002688 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80025c0:	0003      	movs	r3, r0
 80025c2:	681c      	ldr	r4, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7ff f91d 	bl	8001806 <_ZNSt9_Any_data9_M_accessEv>
 80025cc:	0003      	movs	r3, r0
 80025ce:	0019      	movs	r1, r3
 80025d0:	2004      	movs	r0, #4
 80025d2:	f7ff f90e 	bl	80017f2 <_ZnwjPv>
 80025d6:	0003      	movs	r3, r0
 80025d8:	601c      	str	r4, [r3, #0]
	}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b005      	add	sp, #20
 80025e0:	bd90      	pop	{r4, r7, pc}

080025e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	003b      	movs	r3, r7
 80025ec:	7019      	strb	r1, [r3, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f85f 	bl	80026b4 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b002      	add	sp, #8
 800260e:	bd80      	pop	{r7, pc}

08002610 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>:
      _M_access() const
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff f8fc 	bl	8001818 <_ZNKSt9_Any_data9_M_accessEv>
 8002620:	0003      	movs	r3, r0
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b002      	add	sp, #8
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 800262e:	1c18      	adds	r0, r3, #0
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	701a      	strb	r2, [r3, #0]
	  return std::__invoke(_M_f,
 8002642:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3308      	adds	r3, #8
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f840 	bl	80026ce <_ZSt3getILj0EJPN11SolarGators11DataModules18SteeringControllerEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800264e:	0001      	movs	r1, r0
	  return std::__invoke(_M_f,
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	2314      	movs	r3, #20
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f846 	bl	80026e8 <_ZNVKSt3_MuIPN11SolarGators11DataModules18SteeringControllerELb0ELb0EEclIRS3_St5tupleIJEEEEOT_SA_RT0_>
 800265c:	0003      	movs	r3, r0
 800265e:	0019      	movs	r1, r3
 8002660:	0020      	movs	r0, r4
 8002662:	f000 f850 	bl	8002706 <_ZSt8__invokeIRMN11SolarGators11DataModules18SteeringControllerEFvvEJRPS2_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
	      );
 8002666:	46c0      	nop			; (mov r8, r8)
	}
 8002668:	46bd      	mov	sp, r7
 800266a:	b007      	add	sp, #28
 800266c:	bd90      	pop	{r4, r7, pc}

0800266e <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>:
      _M_access() const
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff f8cd 	bl	8001818 <_ZNKSt9_Any_data9_M_accessEv>
 800267e:	0003      	movs	r3, r0
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff f8c0 	bl	8001818 <_ZNKSt9_Any_data9_M_accessEv>
 8002698:	0003      	movs	r3, r0
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0018      	movs	r0, r3
 80026c0:	f7ff f8a1 	bl	8001806 <_ZNSt9_Any_data9_M_accessEv>
 80026c4:	0003      	movs	r3, r0
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b002      	add	sp, #8
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_ZSt3getILj0EJPN11SolarGators11DataModules18SteeringControllerEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f82c 	bl	8002736 <_ZSt12__get_helperILj0EPN11SolarGators11DataModules18SteeringControllerEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80026de:	0003      	movs	r3, r0
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_ZNVKSt3_MuIPN11SolarGators11DataModules18SteeringControllerELb0ELb0EEclIRS3_St5tupleIJEEEEOT_SA_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f82a 	bl	8002750 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 80026fc:	0003      	movs	r3, r0
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}

08002706 <_ZSt8__invokeIRMN11SolarGators11DataModules18SteeringControllerEFvvEJRPS2_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 8002706:	b5b0      	push	{r4, r5, r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f825 	bl	8002762 <_ZSt7forwardIRMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002718:	0004      	movs	r4, r0
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 f817 	bl	8002750 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002722:	0003      	movs	r3, r0
 8002724:	001a      	movs	r2, r3
 8002726:	0021      	movs	r1, r4
 8002728:	1c28      	adds	r0, r5, #0
 800272a:	f000 f823 	bl	8002774 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 800272e:	46c0      	nop			; (mov r8, r8)
    }
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bdb0      	pop	{r4, r5, r7, pc}

08002736 <_ZSt12__get_helperILj0EPN11SolarGators11DataModules18SteeringControllerEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0018      	movs	r0, r3
 8002742:	f7ff fe56 	bl	80023f2 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>
 8002746:	0003      	movs	r3, r0
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}

08002762 <_ZSt7forwardIRMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	230c      	movs	r3, #12
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	7018      	strb	r0, [r3, #0]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0018      	movs	r0, r3
 8002788:	f7ff ffe2 	bl	8002750 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 800278c:	0003      	movs	r3, r0
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	6852      	ldr	r2, [r2, #4]
 8002794:	1052      	asrs	r2, r2, #1
 8002796:	1899      	adds	r1, r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	6852      	ldr	r2, [r2, #4]
 800279c:	2001      	movs	r0, #1
 800279e:	4002      	ands	r2, r0
 80027a0:	d102      	bne.n	80027a8 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x34>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	e008      	b.n	80027ba <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x46>
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	6852      	ldr	r2, [r2, #4]
 80027ac:	1052      	asrs	r2, r2, #1
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	18d3      	adds	r3, r2, r3
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0008      	movs	r0, r1
 80027bc:	4798      	blx	r3
 80027be:	46c0      	nop			; (mov r8, r8)
    }
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <_Z41__static_initialization_and_destruction_0ii>:
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d000      	beq.n	80027da <_Z41__static_initialization_and_destruction_0ii+0x12>
 80027d8:	e0ba      	b.n	8002950 <_Z41__static_initialization_and_destruction_0ii+0x188>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	4a8c      	ldr	r2, [pc, #560]	; (8002a10 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d000      	beq.n	80027e4 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 80027e2:	e0b5      	b.n	8002950 <_Z41__static_initialization_and_destruction_0ii+0x188>
#include "DataModuleInfo.hpp"
#include "Button.hpp"
#include "CAN.hpp"


SolarGators::DataModules::SteeringController Controller;
 80027e4:	4b8b      	ldr	r3, [pc, #556]	; (8002a14 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80027e6:	0018      	movs	r0, r3
 80027e8:	f003 ff8a 	bl	8006700 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 80027ec:	4a8a      	ldr	r2, [pc, #552]	; (8002a18 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f003 faaa 	bl	8005d4c <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>
SolarGators::DataModules::OrionBMS Bms(SolarGators::DataModuleInfo::Orion_Id);
 80027f8:	23d6      	movs	r3, #214	; 0xd6
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f003 fd23 	bl	800624c <_ZN11SolarGators11DataModules8OrionBMSC1Em>
SolarGators::DataModules::MitsubaRx0 McRx0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID);
 8002806:	4a87      	ldr	r2, [pc, #540]	; (8002a24 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8002808:	4b87      	ldr	r3, [pc, #540]	; (8002a28 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800280a:	0011      	movs	r1, r2
 800280c:	0018      	movs	r0, r3
 800280e:	f003 fb31 	bl	8005e74 <_ZN11SolarGators11DataModules10MitsubaRx0C1Em>
// Forward Declares
extern SPI_HandleTypeDef hspi1;
extern CAN_HandleTypeDef hcan;
SolarGators::Drivers::CANDriver CANController(hcan, 1);
 8002812:	4986      	ldr	r1, [pc, #536]	; (8002a2c <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8002814:	4b86      	ldr	r3, [pc, #536]	; (8002a30 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8002816:	2201      	movs	r2, #1
 8002818:	0018      	movs	r0, r3
 800281a:	f004 fe07 	bl	800742c <_ZN11SolarGators7Drivers9CANDriverC1ER19__CAN_HandleTypeDefm>

// Buttons
// Left Side
SolarGators::Drivers::Button left_turn    ("Left Turn", LT_Button_GPIO_Port, LT_Button_Pin);
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4c84      	ldr	r4, [pc, #528]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002824:	4984      	ldr	r1, [pc, #528]	; (8002a38 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8002826:	4885      	ldr	r0, [pc, #532]	; (8002a3c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8002828:	2201      	movs	r2, #1
 800282a:	9201      	str	r2, [sp, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	9200      	str	r2, [sp, #0]
 8002830:	0022      	movs	r2, r4
 8002832:	f004 fd02 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_minus ("Cruise Minus", Cruise_M_GPIO_Port, Cruise_M_Pin);
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2290      	movs	r2, #144	; 0x90
 800283c:	05d2      	lsls	r2, r2, #23
 800283e:	4980      	ldr	r1, [pc, #512]	; (8002a40 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8002840:	4880      	ldr	r0, [pc, #512]	; (8002a44 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8002842:	2401      	movs	r4, #1
 8002844:	9401      	str	r4, [sp, #4]
 8002846:	2400      	movs	r4, #0
 8002848:	9400      	str	r4, [sp, #0]
 800284a:	f004 fcf6 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button eco          ("Eco Mode", Eco_Button_GPIO_Port, Eco_Button_Pin);
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4c78      	ldr	r4, [pc, #480]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002854:	497c      	ldr	r1, [pc, #496]	; (8002a48 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8002856:	487d      	ldr	r0, [pc, #500]	; (8002a4c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8002858:	2201      	movs	r2, #1
 800285a:	9201      	str	r2, [sp, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	0022      	movs	r2, r4
 8002862:	f004 fcea 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button headlights   ("Headlights", HL_Button_GPIO_Port, HL_Button_Pin);
 8002866:	4a73      	ldr	r2, [pc, #460]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002868:	4979      	ldr	r1, [pc, #484]	; (8002a50 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 800286a:	487a      	ldr	r0, [pc, #488]	; (8002a54 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800286c:	2301      	movs	r3, #1
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2300      	movs	r3, #0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	f004 fce0 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button hazards      ("Left Turn", Haz_Button_GPIO_Port, Haz_Button_Pin);
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	015b      	lsls	r3, r3, #5
 800287e:	4c76      	ldr	r4, [pc, #472]	; (8002a58 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8002880:	496d      	ldr	r1, [pc, #436]	; (8002a38 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8002882:	4876      	ldr	r0, [pc, #472]	; (8002a5c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8002884:	2201      	movs	r2, #1
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	0022      	movs	r2, r4
 800288e:	f004 fcd4 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
// Right Side
SolarGators::Drivers::Button right_turn   ("Right Turn", RT_Button_GPIO_Port, RT_Button_Pin);
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	4c67      	ldr	r4, [pc, #412]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002898:	4971      	ldr	r1, [pc, #452]	; (8002a60 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 800289a:	4872      	ldr	r0, [pc, #456]	; (8002a64 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800289c:	2201      	movs	r2, #1
 800289e:	9201      	str	r2, [sp, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	9200      	str	r2, [sp, #0]
 80028a4:	0022      	movs	r2, r4
 80028a6:	f004 fcc8 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", Cruise_P_GPIO_Port, Cruise_P_Pin);
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	4c61      	ldr	r4, [pc, #388]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80028b0:	496d      	ldr	r1, [pc, #436]	; (8002a68 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80028b2:	486e      	ldr	r0, [pc, #440]	; (8002a6c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	9200      	str	r2, [sp, #0]
 80028bc:	0022      	movs	r2, r4
 80028be:	f004 fcbc 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button horn         ("Horn", Horn_Button_GPIO_Port, Horn_Button_Pin);
 80028c2:	4a5c      	ldr	r2, [pc, #368]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80028c4:	496a      	ldr	r1, [pc, #424]	; (8002a70 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80028c6:	486b      	ldr	r0, [pc, #428]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80028c8:	2301      	movs	r3, #1
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2301      	movs	r3, #1
 80028d2:	f004 fcb2 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise       ("Cruise", Cruise_Button_GPIO_Port, Cruise_Button_Pin);
 80028d6:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80028d8:	4967      	ldr	r1, [pc, #412]	; (8002a78 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80028da:	4868      	ldr	r0, [pc, #416]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80028dc:	2301      	movs	r3, #1
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	2300      	movs	r3, #0
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2302      	movs	r3, #2
 80028e6:	f004 fca8 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button reverse      ("Reverse", Reverse_Button_GPIO_Port, Reverse_Button_Pin, 3000);
 80028ea:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80028ec:	4964      	ldr	r1, [pc, #400]	; (8002a80 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80028ee:	4865      	ldr	r0, [pc, #404]	; (8002a84 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80028f0:	2301      	movs	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2308      	movs	r3, #8
 80028fa:	f004 fc9e 	bl	800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
// Leds
// Left Side
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_Led_GPIO_Port, LT_Led_Pin);
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	2290      	movs	r2, #144	; 0x90
 8002904:	05d2      	lsls	r2, r2, #23
 8002906:	4961      	ldr	r1, [pc, #388]	; (8002a8c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8002908:	4861      	ldr	r0, [pc, #388]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800290a:	f005 fd5f 	bl	80083cc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED eco_indicator   ("ECO Indicator", Eco_Led_GPIO_Port, Eco_Led_Pin);
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4a48      	ldr	r2, [pc, #288]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002914:	495f      	ldr	r1, [pc, #380]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8002916:	4860      	ldr	r0, [pc, #384]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002918:	f005 fd58 	bl	80083cc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED hl_indicator    ("HL Indicator", HL_Led_GPIO_Port, HL_Led_Pin);
 800291c:	4a45      	ldr	r2, [pc, #276]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800291e:	495f      	ldr	r1, [pc, #380]	; (8002a9c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8002920:	485f      	ldr	r0, [pc, #380]	; (8002aa0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002922:	2340      	movs	r3, #64	; 0x40
 8002924:	f005 fd52 	bl	80083cc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
// Right Side
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_Led_GPIO_Port, RT_Led_Pin);
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	01db      	lsls	r3, r3, #7
 800292c:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800292e:	495d      	ldr	r1, [pc, #372]	; (8002aa4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8002930:	485d      	ldr	r0, [pc, #372]	; (8002aa8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8002932:	f005 fd4b 	bl	80083cc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED cr_indicator    ("CR Indicator", Cruise_Led_GPIO_Port, Cruise_Led_Pin);
 8002936:	4a3f      	ldr	r2, [pc, #252]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002938:	495c      	ldr	r1, [pc, #368]	; (8002aac <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800293a:	485d      	ldr	r0, [pc, #372]	; (8002ab0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800293c:	2304      	movs	r3, #4
 800293e:	f005 fd45 	bl	80083cc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED rev_indicator   ("Rev Indicator", Reverse_Led_GPIO_Port, Reverse_Led_Pin);
 8002942:	2390      	movs	r3, #144	; 0x90
 8002944:	05da      	lsls	r2, r3, #23
 8002946:	495b      	ldr	r1, [pc, #364]	; (8002ab4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8002948:	485b      	ldr	r0, [pc, #364]	; (8002ab8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800294a:	2301      	movs	r3, #1
 800294c:	f005 fd3e 	bl	80083cc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d157      	bne.n	8002a06 <_Z41__static_initialization_and_destruction_0ii+0x23e>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	4a2d      	ldr	r2, [pc, #180]	; (8002a10 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d153      	bne.n	8002a06 <_Z41__static_initialization_and_destruction_0ii+0x23e>
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8002960:	0018      	movs	r0, r3
 8002962:	f005 fd57 	bl	8008414 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED cr_indicator    ("CR Indicator", Cruise_Led_GPIO_Port, Cruise_Led_Pin);
 8002966:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8002968:	0018      	movs	r0, r3
 800296a:	f005 fd53 	bl	8008414 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_Led_GPIO_Port, RT_Led_Pin);
 800296e:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8002970:	0018      	movs	r0, r3
 8002972:	f005 fd4f 	bl	8008414 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED hl_indicator    ("HL Indicator", HL_Led_GPIO_Port, HL_Led_Pin);
 8002976:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002978:	0018      	movs	r0, r3
 800297a:	f005 fd4b 	bl	8008414 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED eco_indicator   ("ECO Indicator", Eco_Led_GPIO_Port, Eco_Led_Pin);
 800297e:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002980:	0018      	movs	r0, r3
 8002982:	f005 fd47 	bl	8008414 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_Led_GPIO_Port, LT_Led_Pin);
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8002988:	0018      	movs	r0, r3
 800298a:	f005 fd43 	bl	8008414 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::Button reverse      ("Reverse", Reverse_Button_GPIO_Port, Reverse_Button_Pin, 3000);
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8002990:	0018      	movs	r0, r3
 8002992:	f004 fc82 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise       ("Cruise", Cruise_Button_GPIO_Port, Cruise_Button_Pin);
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8002998:	0018      	movs	r0, r3
 800299a:	f004 fc7e 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button horn         ("Horn", Horn_Button_GPIO_Port, Horn_Button_Pin);
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80029a0:	0018      	movs	r0, r3
 80029a2:	f004 fc7a 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", Cruise_P_GPIO_Port, Cruise_P_Pin);
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80029a8:	0018      	movs	r0, r3
 80029aa:	f004 fc76 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button right_turn   ("Right Turn", RT_Button_GPIO_Port, RT_Button_Pin);
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80029b0:	0018      	movs	r0, r3
 80029b2:	f004 fc72 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button hazards      ("Left Turn", Haz_Button_GPIO_Port, Haz_Button_Pin);
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80029b8:	0018      	movs	r0, r3
 80029ba:	f004 fc6e 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button headlights   ("Headlights", HL_Button_GPIO_Port, HL_Button_Pin);
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80029c0:	0018      	movs	r0, r3
 80029c2:	f004 fc6a 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button eco          ("Eco Mode", Eco_Button_GPIO_Port, Eco_Button_Pin);
 80029c6:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80029c8:	0018      	movs	r0, r3
 80029ca:	f004 fc66 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise_minus ("Cruise Minus", Cruise_M_GPIO_Port, Cruise_M_Pin);
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80029d0:	0018      	movs	r0, r3
 80029d2:	f004 fc62 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button left_turn    ("Left Turn", LT_Button_GPIO_Port, LT_Button_Pin);
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f004 fc5e 	bl	800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::CANDriver CANController(hcan, 1);
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80029e0:	0018      	movs	r0, r3
 80029e2:	f004 fd8d 	bl	8007500 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
SolarGators::DataModules::MitsubaRx0 McRx0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID);
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80029e8:	0018      	movs	r0, r3
 80029ea:	f003 fa79 	bl	8005ee0 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
SolarGators::DataModules::OrionBMS Bms(SolarGators::DataModuleInfo::Orion_Id);
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80029f0:	0018      	movs	r0, r3
 80029f2:	f003 fc41 	bl	8006278 <_ZN11SolarGators11DataModules8OrionBMSD1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80029f8:	0018      	movs	r0, r3
 80029fa:	f003 f9bd 	bl	8005d78 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
SolarGators::DataModules::SteeringController Controller;
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8002a00:	0018      	movs	r0, r3
 8002a02:	f003 ff1d 	bl	8006840 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b003      	add	sp, #12
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	0000ffff 	.word	0x0000ffff
 8002a14:	200000a4 	.word	0x200000a4
 8002a18:	08f89540 	.word	0x08f89540
 8002a1c:	20000568 	.word	0x20000568
 8002a20:	200005e0 	.word	0x200005e0
 8002a24:	08850225 	.word	0x08850225
 8002a28:	20000664 	.word	0x20000664
 8002a2c:	20002710 	.word	0x20002710
 8002a30:	200006e8 	.word	0x200006e8
 8002a34:	48000800 	.word	0x48000800
 8002a38:	0800d358 	.word	0x0800d358
 8002a3c:	20000948 	.word	0x20000948
 8002a40:	0800d364 	.word	0x0800d364
 8002a44:	20000974 	.word	0x20000974
 8002a48:	0800d374 	.word	0x0800d374
 8002a4c:	200009a0 	.word	0x200009a0
 8002a50:	0800d380 	.word	0x0800d380
 8002a54:	200009cc 	.word	0x200009cc
 8002a58:	48000400 	.word	0x48000400
 8002a5c:	200009f8 	.word	0x200009f8
 8002a60:	0800d38c 	.word	0x0800d38c
 8002a64:	20000a24 	.word	0x20000a24
 8002a68:	0800d398 	.word	0x0800d398
 8002a6c:	20000a50 	.word	0x20000a50
 8002a70:	0800d3a4 	.word	0x0800d3a4
 8002a74:	20000a7c 	.word	0x20000a7c
 8002a78:	0800d3ac 	.word	0x0800d3ac
 8002a7c:	20000aa8 	.word	0x20000aa8
 8002a80:	0800d3b4 	.word	0x0800d3b4
 8002a84:	20000ad4 	.word	0x20000ad4
 8002a88:	00000bb8 	.word	0x00000bb8
 8002a8c:	0800d3bc 	.word	0x0800d3bc
 8002a90:	20000b00 	.word	0x20000b00
 8002a94:	0800d3cc 	.word	0x0800d3cc
 8002a98:	20000b14 	.word	0x20000b14
 8002a9c:	0800d3dc 	.word	0x0800d3dc
 8002aa0:	20000b28 	.word	0x20000b28
 8002aa4:	0800d3ec 	.word	0x0800d3ec
 8002aa8:	20000b3c 	.word	0x20000b3c
 8002aac:	0800d3fc 	.word	0x0800d3fc
 8002ab0:	20000b50 	.word	0x20000b50
 8002ab4:	0800d40c 	.word	0x0800d40c
 8002ab8:	20000b64 	.word	0x20000b64

08002abc <_GLOBAL__sub_I_Controller>:
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <_GLOBAL__sub_I_Controller+0x14>)
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7ff fe7f 	bl	80027c8 <_Z41__static_initialization_and_destruction_0ii>
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	0000ffff 	.word	0x0000ffff

08002ad4 <_GLOBAL__sub_D_Controller>:
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <_GLOBAL__sub_D_Controller+0x14>)
 8002ada:	0019      	movs	r1, r3
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7ff fe73 	bl	80027c8 <_Z41__static_initialization_and_destruction_0ii>
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	0000ffff 	.word	0x0000ffff

08002aec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002aec:	480d      	ldr	r0, [pc, #52]	; (8002b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002af2:	490e      	ldr	r1, [pc, #56]	; (8002b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <LoopForever+0xe>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b08:	4c0b      	ldr	r4, [pc, #44]	; (8002b38 <LoopForever+0x16>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b16:	f7fe fe67 	bl	80017e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b1a:	f009 febf 	bl	800c89c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b1e:	f7fe f901 	bl	8000d24 <main>

08002b22 <LoopForever>:

LoopForever:
    b LoopForever
 8002b22:	e7fe      	b.n	8002b22 <LoopForever>
  ldr   r0, =_estack
 8002b24:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b2c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002b30:	0800ddd8 	.word	0x0800ddd8
  ldr r2, =_sbss
 8002b34:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002b38:	20002eec 	.word	0x20002eec

08002b3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC1_COMP_IRQHandler>
	...

08002b40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_Init+0x24>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_Init+0x24>)
 8002b4a:	2110      	movs	r1, #16
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002b50:	2003      	movs	r0, #3
 8002b52:	f7fe fd2d 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b56:	f7fe fbe1 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40022000 	.word	0x40022000

08002b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_IncTick+0x1c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	001a      	movs	r2, r3
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_IncTick+0x20>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	18d2      	adds	r2, r2, r3
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_IncTick+0x20>)
 8002b7a:	601a      	str	r2, [r3, #0]
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	20000014 	.word	0x20000014
 8002b88:	20002e98 	.word	0x20002e98

08002b8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <HAL_GetTick+0x10>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	20002e98 	.word	0x20002e98

08002ba0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0f0      	b.n	8002d94 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7fe fbd5 	bl	8001370 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd6:	f7ff ffd9 	bl	8002b8c <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bde:	e013      	b.n	8002c08 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002be0:	f7ff ffd4 	bl	8002b8c <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b0a      	cmp	r3, #10
 8002bec:	d90c      	bls.n	8002c08 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	0292      	lsls	r2, r2, #10
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	2105      	movs	r1, #5
 8002c02:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0c5      	b.n	8002d94 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d0e5      	beq.n	8002be0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2102      	movs	r1, #2
 8002c20:	438a      	bics	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c24:	f7ff ffb2 	bl	8002b8c <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c2c:	e013      	b.n	8002c56 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c2e:	f7ff ffad 	bl	8002b8c <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b0a      	cmp	r3, #10
 8002c3a:	d90c      	bls.n	8002c56 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0292      	lsls	r2, r2, #10
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	2105      	movs	r1, #5
 8002c50:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e09e      	b.n	8002d94 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d1e5      	bne.n	8002c2e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7e1b      	ldrb	r3, [r3, #24]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e007      	b.n	8002c8c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	438a      	bics	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7e5b      	ldrb	r3, [r3, #25]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d108      	bne.n	8002ca6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2140      	movs	r1, #64	; 0x40
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e007      	b.n	8002cb6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7e9b      	ldrb	r3, [r3, #26]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d108      	bne.n	8002cd0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2120      	movs	r1, #32
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e007      	b.n	8002ce0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2120      	movs	r1, #32
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7edb      	ldrb	r3, [r3, #27]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d108      	bne.n	8002cfa <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e007      	b.n	8002d0a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2110      	movs	r1, #16
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7f1b      	ldrb	r3, [r3, #28]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2108      	movs	r1, #8
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e007      	b.n	8002d34 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2108      	movs	r1, #8
 8002d30:	438a      	bics	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7f5b      	ldrb	r3, [r3, #29]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2104      	movs	r1, #4
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e007      	b.n	8002d5e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2104      	movs	r1, #4
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	0011      	movs	r1, r2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002daa:	2017      	movs	r0, #23
 8002dac:	183b      	adds	r3, r7, r0
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	2120      	movs	r1, #32
 8002db2:	5c52      	ldrb	r2, [r2, r1]
 8002db4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002db6:	0002      	movs	r2, r0
 8002db8:	18bb      	adds	r3, r7, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d004      	beq.n	8002dca <HAL_CAN_GetRxMessage+0x2e>
 8002dc0:	18bb      	adds	r3, r7, r2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d000      	beq.n	8002dca <HAL_CAN_GetRxMessage+0x2e>
 8002dc8:	e0f8      	b.n	8002fbc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10e      	bne.n	8002dee <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d117      	bne.n	8002e0c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0392      	lsls	r2, r2, #14
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0ee      	b.n	8002fcc <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2203      	movs	r2, #3
 8002df6:	4013      	ands	r3, r2
 8002df8:	d108      	bne.n	8002e0c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	0392      	lsls	r2, r2, #14
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0df      	b.n	8002fcc <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	321b      	adds	r2, #27
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	58d3      	ldr	r3, [r2, r3]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	321b      	adds	r2, #27
 8002e30:	0112      	lsls	r2, r2, #4
 8002e32:	58d3      	ldr	r3, [r2, r3]
 8002e34:	0d5b      	lsrs	r3, r3, #21
 8002e36:	055b      	lsls	r3, r3, #21
 8002e38:	0d5a      	lsrs	r2, r3, #21
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e00a      	b.n	8002e56 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	321b      	adds	r2, #27
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	58d3      	ldr	r3, [r2, r3]
 8002e4c:	08db      	lsrs	r3, r3, #3
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	321b      	adds	r2, #27
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	58d3      	ldr	r3, [r2, r3]
 8002e62:	2202      	movs	r2, #2
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	331b      	adds	r3, #27
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	3304      	adds	r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	331b      	adds	r3, #27
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	18d3      	adds	r3, r2, r3
 8002e8e:	3304      	adds	r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	22ff      	movs	r2, #255	; 0xff
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	331b      	adds	r3, #27
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	18d3      	adds	r3, r2, r3
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0c1b      	lsrs	r3, r3, #16
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	0c1a      	lsrs	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	23dc      	movs	r3, #220	; 0xdc
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	188a      	adds	r2, r1, r2
 8002ec4:	18d3      	adds	r3, r2, r3
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	23dc      	movs	r3, #220	; 0xdc
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	0112      	lsls	r2, r2, #4
 8002eda:	188a      	adds	r2, r1, r2
 8002edc:	18d3      	adds	r3, r2, r3
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0a1a      	lsrs	r2, r3, #8
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	23dc      	movs	r3, #220	; 0xdc
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	188a      	adds	r2, r1, r2
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0c1a      	lsrs	r2, r3, #16
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	3302      	adds	r3, #2
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	23dc      	movs	r3, #220	; 0xdc
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	188a      	adds	r2, r1, r2
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e1a      	lsrs	r2, r3, #24
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	3303      	adds	r3, #3
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	23de      	movs	r3, #222	; 0xde
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	188a      	adds	r2, r1, r2
 8002f30:	18d3      	adds	r3, r2, r3
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	3304      	adds	r3, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	23de      	movs	r3, #222	; 0xde
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	188a      	adds	r2, r1, r2
 8002f4a:	18d3      	adds	r3, r2, r3
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0a1a      	lsrs	r2, r3, #8
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	3305      	adds	r3, #5
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	23de      	movs	r3, #222	; 0xde
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	188a      	adds	r2, r1, r2
 8002f66:	18d3      	adds	r3, r2, r3
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0c1a      	lsrs	r2, r3, #16
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3306      	adds	r3, #6
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	23de      	movs	r3, #222	; 0xde
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	188a      	adds	r2, r1, r2
 8002f82:	18d3      	adds	r3, r2, r3
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e1a      	lsrs	r2, r3, #24
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	3307      	adds	r3, #7
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e007      	b.n	8002fb8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e007      	b.n	8002fcc <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	02d2      	lsls	r2, r2, #11
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
  }
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b006      	add	sp, #24
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fe2:	200b      	movs	r0, #11
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	2120      	movs	r1, #32
 8002fea:	5c52      	ldrb	r2, [r2, r1]
 8002fec:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fee:	0002      	movs	r2, r0
 8002ff0:	18bb      	adds	r3, r7, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d003      	beq.n	8003000 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8002ff8:	18bb      	adds	r3, r7, r2
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d10f      	bne.n	8003020 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2203      	movs	r2, #3
 800300e:	4013      	ands	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	e005      	b.n	8003020 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2203      	movs	r2, #3
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003020:	68fb      	ldr	r3, [r7, #12]
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08a      	sub	sp, #40	; 0x28
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2201      	movs	r2, #1
 800306a:	4013      	ands	r3, r2
 800306c:	d100      	bne.n	8003070 <HAL_CAN_IRQHandler+0x46>
 800306e:	e084      	b.n	800317a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2201      	movs	r2, #1
 8003074:	4013      	ands	r3, r2
 8003076:	d024      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2201      	movs	r2, #1
 800307e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f981 	bl	8003392 <HAL_CAN_TxMailbox0CompleteCallback>
 8003090:	e017      	b.n	80030c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2204      	movs	r2, #4
 8003096:	4013      	ands	r3, r2
 8003098:	d005      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	2280      	movs	r2, #128	; 0x80
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	4313      	orrs	r3, r2
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
 80030a4:	e00d      	b.n	80030c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2208      	movs	r2, #8
 80030aa:	4013      	ands	r3, r2
 80030ac:	d005      	beq.n	80030ba <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	0152      	lsls	r2, r2, #5
 80030b4:	4313      	orrs	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	e003      	b.n	80030c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f980 	bl	80033c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	d028      	beq.n	800311e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	0052      	lsls	r2, r2, #1
 80030d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4013      	ands	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 f95d 	bl	80033a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80030e8:	e019      	b.n	800311e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4013      	ands	r3, r2
 80030f2:	d005      	beq.n	8003100 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	0192      	lsls	r2, r2, #6
 80030fa:	4313      	orrs	r3, r2
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
 80030fe:	e00e      	b.n	800311e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	4013      	ands	r3, r2
 8003108:	d005      	beq.n	8003116 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	01d2      	lsls	r2, r2, #7
 8003110:	4313      	orrs	r3, r2
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	e003      	b.n	800311e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f95a 	bl	80033d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	025b      	lsls	r3, r3, #9
 8003124:	4013      	ands	r3, r2
 8003126:	d028      	beq.n	800317a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	0252      	lsls	r2, r2, #9
 8003130:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	4013      	ands	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f937 	bl	80033b2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003144:	e019      	b.n	800317a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	02db      	lsls	r3, r3, #11
 800314c:	4013      	ands	r3, r2
 800314e:	d005      	beq.n	800315c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	0212      	lsls	r2, r2, #8
 8003156:	4313      	orrs	r3, r2
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	e00e      	b.n	800317a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	4013      	ands	r3, r2
 8003164:	d005      	beq.n	8003172 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	0252      	lsls	r2, r2, #9
 800316c:	4313      	orrs	r3, r2
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	e003      	b.n	800317a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f934 	bl	80033e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	2208      	movs	r2, #8
 800317e:	4013      	ands	r3, r2
 8003180:	d00c      	beq.n	800319c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2210      	movs	r2, #16
 8003186:	4013      	ands	r3, r2
 8003188:	d008      	beq.n	800319c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	4313      	orrs	r3, r2
 8003192:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2210      	movs	r2, #16
 800319a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2204      	movs	r2, #4
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00b      	beq.n	80031bc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2208      	movs	r2, #8
 80031a8:	4013      	ands	r3, r2
 80031aa:	d007      	beq.n	80031bc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2208      	movs	r2, #8
 80031b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 f923 	bl	8003402 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2202      	movs	r2, #2
 80031c0:	4013      	ands	r3, r2
 80031c2:	d009      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2203      	movs	r2, #3
 80031cc:	4013      	ands	r3, r2
 80031ce:	d003      	beq.n	80031d8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 f90d 	bl	80033f2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2240      	movs	r2, #64	; 0x40
 80031dc:	4013      	ands	r3, r2
 80031de:	d00c      	beq.n	80031fa <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2210      	movs	r2, #16
 80031e4:	4013      	ands	r3, r2
 80031e6:	d008      	beq.n	80031fa <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	00d2      	lsls	r2, r2, #3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2210      	movs	r2, #16
 80031f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	2220      	movs	r2, #32
 80031fe:	4013      	ands	r3, r2
 8003200:	d00b      	beq.n	800321a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2208      	movs	r2, #8
 8003206:	4013      	ands	r3, r2
 8003208:	d007      	beq.n	800321a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2208      	movs	r2, #8
 8003210:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0018      	movs	r0, r3
 8003216:	f000 f904 	bl	8003422 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	2210      	movs	r2, #16
 800321e:	4013      	ands	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2203      	movs	r2, #3
 800322a:	4013      	ands	r3, r2
 800322c:	d003      	beq.n	8003236 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 f8ee 	bl	8003412 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003236:	6a3a      	ldr	r2, [r7, #32]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	029b      	lsls	r3, r3, #10
 800323c:	4013      	ands	r3, r2
 800323e:	d00b      	beq.n	8003258 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2210      	movs	r2, #16
 8003244:	4013      	ands	r3, r2
 8003246:	d007      	beq.n	8003258 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2210      	movs	r2, #16
 800324e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f8ed 	bl	8003432 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	025b      	lsls	r3, r3, #9
 800325e:	4013      	ands	r3, r2
 8003260:	d00b      	beq.n	800327a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2208      	movs	r2, #8
 8003266:	4013      	ands	r3, r2
 8003268:	d007      	beq.n	800327a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2208      	movs	r2, #8
 8003270:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f000 f8e4 	bl	8003442 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800327a:	6a3a      	ldr	r2, [r7, #32]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	4013      	ands	r3, r2
 8003282:	d100      	bne.n	8003286 <HAL_CAN_IRQHandler+0x25c>
 8003284:	e074      	b.n	8003370 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2204      	movs	r2, #4
 800328a:	4013      	ands	r3, r2
 800328c:	d100      	bne.n	8003290 <HAL_CAN_IRQHandler+0x266>
 800328e:	e06b      	b.n	8003368 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032a0:	d003      	beq.n	80032aa <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	2201      	movs	r2, #1
 80032a6:	4313      	orrs	r3, r2
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4013      	ands	r3, r2
 80032b2:	d007      	beq.n	80032c4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2202      	movs	r2, #2
 80032b8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032ba:	d003      	beq.n	80032c4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	2202      	movs	r2, #2
 80032c0:	4313      	orrs	r3, r2
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4013      	ands	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032d4:	d003      	beq.n	80032de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	2204      	movs	r2, #4
 80032da:	4313      	orrs	r3, r2
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	4013      	ands	r3, r2
 80032e6:	d03f      	beq.n	8003368 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2270      	movs	r2, #112	; 0x70
 80032ec:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032ee:	d03b      	beq.n	8003368 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2270      	movs	r2, #112	; 0x70
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b60      	cmp	r3, #96	; 0x60
 80032f8:	d027      	beq.n	800334a <HAL_CAN_IRQHandler+0x320>
 80032fa:	d82c      	bhi.n	8003356 <HAL_CAN_IRQHandler+0x32c>
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d01f      	beq.n	8003340 <HAL_CAN_IRQHandler+0x316>
 8003300:	d829      	bhi.n	8003356 <HAL_CAN_IRQHandler+0x32c>
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d017      	beq.n	8003336 <HAL_CAN_IRQHandler+0x30c>
 8003306:	d826      	bhi.n	8003356 <HAL_CAN_IRQHandler+0x32c>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d00f      	beq.n	800332c <HAL_CAN_IRQHandler+0x302>
 800330c:	d823      	bhi.n	8003356 <HAL_CAN_IRQHandler+0x32c>
 800330e:	2b10      	cmp	r3, #16
 8003310:	d002      	beq.n	8003318 <HAL_CAN_IRQHandler+0x2ee>
 8003312:	2b20      	cmp	r3, #32
 8003314:	d005      	beq.n	8003322 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003316:	e01e      	b.n	8003356 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	2208      	movs	r2, #8
 800331c:	4313      	orrs	r3, r2
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003320:	e01a      	b.n	8003358 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	2210      	movs	r2, #16
 8003326:	4313      	orrs	r3, r2
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800332a:	e015      	b.n	8003358 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	2220      	movs	r2, #32
 8003330:	4313      	orrs	r3, r2
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003334:	e010      	b.n	8003358 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	2240      	movs	r2, #64	; 0x40
 800333a:	4313      	orrs	r3, r2
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800333e:	e00b      	b.n	8003358 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	4313      	orrs	r3, r2
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003348:	e006      	b.n	8003358 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	0052      	lsls	r2, r2, #1
 8003350:	4313      	orrs	r3, r2
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003354:	e000      	b.n	8003358 <HAL_CAN_IRQHandler+0x32e>
            break;
 8003356:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2170      	movs	r1, #112	; 0x70
 8003364:	438a      	bics	r2, r1
 8003366:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2204      	movs	r2, #4
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 f864 	bl	8003452 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b00a      	add	sp, #40	; 0x28
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b002      	add	sp, #8
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b002      	add	sp, #8
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b002      	add	sp, #8
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b002      	add	sp, #8
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b002      	add	sp, #8
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	0002      	movs	r2, r0
 800346c:	1dfb      	adds	r3, r7, #7
 800346e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003470:	1dfb      	adds	r3, r7, #7
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b7f      	cmp	r3, #127	; 0x7f
 8003476:	d809      	bhi.n	800348c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	001a      	movs	r2, r3
 800347e:	231f      	movs	r3, #31
 8003480:	401a      	ands	r2, r3
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <__NVIC_EnableIRQ+0x30>)
 8003484:	2101      	movs	r1, #1
 8003486:	4091      	lsls	r1, r2
 8003488:	000a      	movs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
  }
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	0002      	movs	r2, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b7f      	cmp	r3, #127	; 0x7f
 80034ac:	d828      	bhi.n	8003500 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ae:	4a2f      	ldr	r2, [pc, #188]	; (800356c <__NVIC_SetPriority+0xd4>)
 80034b0:	1dfb      	adds	r3, r7, #7
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	33c0      	adds	r3, #192	; 0xc0
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	589b      	ldr	r3, [r3, r2]
 80034be:	1dfa      	adds	r2, r7, #7
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	0011      	movs	r1, r2
 80034c4:	2203      	movs	r2, #3
 80034c6:	400a      	ands	r2, r1
 80034c8:	00d2      	lsls	r2, r2, #3
 80034ca:	21ff      	movs	r1, #255	; 0xff
 80034cc:	4091      	lsls	r1, r2
 80034ce:	000a      	movs	r2, r1
 80034d0:	43d2      	mvns	r2, r2
 80034d2:	401a      	ands	r2, r3
 80034d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	22ff      	movs	r2, #255	; 0xff
 80034dc:	401a      	ands	r2, r3
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	0018      	movs	r0, r3
 80034e4:	2303      	movs	r3, #3
 80034e6:	4003      	ands	r3, r0
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ec:	481f      	ldr	r0, [pc, #124]	; (800356c <__NVIC_SetPriority+0xd4>)
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	430a      	orrs	r2, r1
 80034f8:	33c0      	adds	r3, #192	; 0xc0
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034fe:	e031      	b.n	8003564 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <__NVIC_SetPriority+0xd8>)
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	0019      	movs	r1, r3
 8003508:	230f      	movs	r3, #15
 800350a:	400b      	ands	r3, r1
 800350c:	3b08      	subs	r3, #8
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3306      	adds	r3, #6
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	18d3      	adds	r3, r2, r3
 8003516:	3304      	adds	r3, #4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1dfa      	adds	r2, r7, #7
 800351c:	7812      	ldrb	r2, [r2, #0]
 800351e:	0011      	movs	r1, r2
 8003520:	2203      	movs	r2, #3
 8003522:	400a      	ands	r2, r1
 8003524:	00d2      	lsls	r2, r2, #3
 8003526:	21ff      	movs	r1, #255	; 0xff
 8003528:	4091      	lsls	r1, r2
 800352a:	000a      	movs	r2, r1
 800352c:	43d2      	mvns	r2, r2
 800352e:	401a      	ands	r2, r3
 8003530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	401a      	ands	r2, r3
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	0018      	movs	r0, r3
 8003540:	2303      	movs	r3, #3
 8003542:	4003      	ands	r3, r0
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003548:	4809      	ldr	r0, [pc, #36]	; (8003570 <__NVIC_SetPriority+0xd8>)
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	001c      	movs	r4, r3
 8003550:	230f      	movs	r3, #15
 8003552:	4023      	ands	r3, r4
 8003554:	3b08      	subs	r3, #8
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	430a      	orrs	r2, r1
 800355a:	3306      	adds	r3, #6
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	18c3      	adds	r3, r0, r3
 8003560:	3304      	adds	r3, #4
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b003      	add	sp, #12
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	e000e100 	.word	0xe000e100
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	210f      	movs	r1, #15
 8003580:	187b      	adds	r3, r7, r1
 8003582:	1c02      	adds	r2, r0, #0
 8003584:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	187b      	adds	r3, r7, r1
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b25b      	sxtb	r3, r3
 800358e:	0011      	movs	r1, r2
 8003590:	0018      	movs	r0, r3
 8003592:	f7ff ff81 	bl	8003498 <__NVIC_SetPriority>
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	0002      	movs	r2, r0
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035aa:	1dfb      	adds	r3, r7, #7
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b25b      	sxtb	r3, r3
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff ff57 	bl	8003464 <__NVIC_EnableIRQ>
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ce:	e155      	b.n	800387c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4091      	lsls	r1, r2
 80035da:	000a      	movs	r2, r1
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d100      	bne.n	80035e8 <HAL_GPIO_Init+0x28>
 80035e6:	e146      	b.n	8003876 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d005      	beq.n	8003600 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d130      	bne.n	8003662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	409a      	lsls	r2, r3
 800360e:	0013      	movs	r3, r2
 8003610:	43da      	mvns	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	409a      	lsls	r2, r3
 8003622:	0013      	movs	r3, r2
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003636:	2201      	movs	r2, #1
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	409a      	lsls	r2, r3
 800363c:	0013      	movs	r3, r2
 800363e:	43da      	mvns	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	2201      	movs	r2, #1
 800364e:	401a      	ands	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2203      	movs	r2, #3
 8003668:	4013      	ands	r3, r2
 800366a:	2b03      	cmp	r3, #3
 800366c:	d017      	beq.n	800369e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	409a      	lsls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	43da      	mvns	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2203      	movs	r2, #3
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d123      	bne.n	80036f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	0092      	lsls	r2, r2, #2
 80036b4:	58d3      	ldr	r3, [r2, r3]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2207      	movs	r2, #7
 80036bc:	4013      	ands	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	409a      	lsls	r2, r3
 80036c4:	0013      	movs	r3, r2
 80036c6:	43da      	mvns	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2107      	movs	r1, #7
 80036d6:	400b      	ands	r3, r1
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	409a      	lsls	r2, r3
 80036dc:	0013      	movs	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	6939      	ldr	r1, [r7, #16]
 80036f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	43da      	mvns	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2203      	movs	r2, #3
 8003710:	401a      	ands	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	0013      	movs	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	23c0      	movs	r3, #192	; 0xc0
 800372c:	029b      	lsls	r3, r3, #10
 800372e:	4013      	ands	r3, r2
 8003730:	d100      	bne.n	8003734 <HAL_GPIO_Init+0x174>
 8003732:	e0a0      	b.n	8003876 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003734:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_GPIO_Init+0x2d4>)
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	4b56      	ldr	r3, [pc, #344]	; (8003894 <HAL_GPIO_Init+0x2d4>)
 800373a:	2101      	movs	r1, #1
 800373c:	430a      	orrs	r2, r1
 800373e:	619a      	str	r2, [r3, #24]
 8003740:	4b54      	ldr	r3, [pc, #336]	; (8003894 <HAL_GPIO_Init+0x2d4>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2201      	movs	r2, #1
 8003746:	4013      	ands	r3, r2
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800374c:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_GPIO_Init+0x2d8>)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	3302      	adds	r3, #2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	589b      	ldr	r3, [r3, r2]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2203      	movs	r2, #3
 800375e:	4013      	ands	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	220f      	movs	r2, #15
 8003764:	409a      	lsls	r2, r3
 8003766:	0013      	movs	r3, r2
 8003768:	43da      	mvns	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	2390      	movs	r3, #144	; 0x90
 8003774:	05db      	lsls	r3, r3, #23
 8003776:	429a      	cmp	r2, r3
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x1ee>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a47      	ldr	r2, [pc, #284]	; (800389c <HAL_GPIO_Init+0x2dc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x1ea>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a46      	ldr	r2, [pc, #280]	; (80038a0 <HAL_GPIO_Init+0x2e0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x1e6>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a45      	ldr	r2, [pc, #276]	; (80038a4 <HAL_GPIO_Init+0x2e4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x1e2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a44      	ldr	r2, [pc, #272]	; (80038a8 <HAL_GPIO_Init+0x2e8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x1de>
 800379a:	2304      	movs	r3, #4
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x1f0>
 800379e:	2305      	movs	r3, #5
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x1f0>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x1f0>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x1f0>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x1f0>
 80037ae:	2300      	movs	r3, #0
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	2103      	movs	r1, #3
 80037b4:	400a      	ands	r2, r1
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	; (8003898 <HAL_GPIO_Init+0x2d8>)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ce:	4b37      	ldr	r3, [pc, #220]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	025b      	lsls	r3, r3, #9
 80037e6:	4013      	ands	r3, r2
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037f2:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43da      	mvns	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	029b      	lsls	r3, r3, #10
 8003810:	4013      	ands	r3, r2
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43da      	mvns	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	035b      	lsls	r3, r3, #13
 800383a:	4013      	ands	r3, r2
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43da      	mvns	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	039b      	lsls	r3, r3, #14
 8003864:	4013      	ands	r3, r2
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <HAL_GPIO_Init+0x2ec>)
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3301      	adds	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	40da      	lsrs	r2, r3
 8003884:	1e13      	subs	r3, r2, #0
 8003886:	d000      	beq.n	800388a <HAL_GPIO_Init+0x2ca>
 8003888:	e6a2      	b.n	80035d0 <HAL_GPIO_Init+0x10>
  } 
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b006      	add	sp, #24
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	40010000 	.word	0x40010000
 800389c:	48000400 	.word	0x48000400
 80038a0:	48000800 	.word	0x48000800
 80038a4:	48000c00 	.word	0x48000c00
 80038a8:	48001000 	.word	0x48001000
 80038ac:	40010400 	.word	0x40010400

080038b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	000a      	movs	r2, r1
 80038ba:	1cbb      	adds	r3, r7, #2
 80038bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	1cba      	adds	r2, r7, #2
 80038c4:	8812      	ldrh	r2, [r2, #0]
 80038c6:	4013      	ands	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80038ca:	230f      	movs	r3, #15
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e003      	b.n	80038dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038d4:	230f      	movs	r3, #15
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80038dc:	230f      	movs	r3, #15
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	781b      	ldrb	r3, [r3, #0]
  }
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b004      	add	sp, #16
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	0008      	movs	r0, r1
 80038f4:	0011      	movs	r1, r2
 80038f6:	1cbb      	adds	r3, r7, #2
 80038f8:	1c02      	adds	r2, r0, #0
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	1c7b      	adds	r3, r7, #1
 80038fe:	1c0a      	adds	r2, r1, #0
 8003900:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003902:	1c7b      	adds	r3, r7, #1
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800390a:	1cbb      	adds	r3, r7, #2
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003912:	e003      	b.n	800391c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003914:	1cbb      	adds	r3, r7, #2
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	000a      	movs	r2, r1
 800392e:	1cbb      	adds	r3, r7, #2
 8003930:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003938:	1cbb      	adds	r3, r7, #2
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	041a      	lsls	r2, r3, #16
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	1cb9      	adds	r1, r7, #2
 8003948:	8809      	ldrh	r1, [r1, #0]
 800394a:	400b      	ands	r3, r1
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	619a      	str	r2, [r3, #24]
}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	0002      	movs	r2, r0
 8003964:	1dbb      	adds	r3, r7, #6
 8003966:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	1dba      	adds	r2, r7, #6
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	4013      	ands	r3, r2
 8003972:	d008      	beq.n	8003986 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003976:	1dba      	adds	r2, r7, #6
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800397c:	1dbb      	adds	r3, r7, #6
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	0018      	movs	r0, r3
 8003982:	f7fd fc7d 	bl	8001280 <HAL_GPIO_EXTI_Callback>
  }
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	40010400 	.word	0x40010400

08003994 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	b08b      	sub	sp, #44	; 0x2c
 8003998:	af06      	add	r7, sp, #24
 800399a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0ff      	b.n	8003ba6 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a81      	ldr	r2, [pc, #516]	; (8003bb0 <HAL_PCD_Init+0x21c>)
 80039aa:	5c9b      	ldrb	r3, [r3, r2]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	23aa      	movs	r3, #170	; 0xaa
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	2100      	movs	r1, #0
 80039ba:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0018      	movs	r0, r3
 80039c0:	f7fd fdd6 	bl	8001570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a7a      	ldr	r2, [pc, #488]	; (8003bb0 <HAL_PCD_Init+0x21c>)
 80039c8:	2103      	movs	r1, #3
 80039ca:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f002 f921 	bl	8005c18 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d6:	230f      	movs	r3, #15
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e058      	b.n	8003a92 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039e0:	200f      	movs	r0, #15
 80039e2:	183b      	adds	r3, r7, r0
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	0013      	movs	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	18cb      	adds	r3, r1, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	0013      	movs	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	183a      	adds	r2, r7, r0
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a10:	0004      	movs	r4, r0
 8003a12:	183b      	adds	r3, r7, r0
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b298      	uxth	r0, r3
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	0013      	movs	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	18cb      	adds	r3, r1, r3
 8003a28:	3336      	adds	r3, #54	; 0x36
 8003a2a:	1c02      	adds	r2, r0, #0
 8003a2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	0013      	movs	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	18cb      	adds	r3, r1, r3
 8003a40:	3303      	adds	r3, #3
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	18cb      	adds	r3, r1, r3
 8003a56:	3338      	adds	r3, #56	; 0x38
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	0013      	movs	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	18cb      	adds	r3, r1, r3
 8003a6c:	333c      	adds	r3, #60	; 0x3c
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	0013      	movs	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	189b      	adds	r3, r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	18cb      	adds	r3, r1, r3
 8003a82:	3340      	adds	r3, #64	; 0x40
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	3201      	adds	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	210f      	movs	r1, #15
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d39f      	bcc.n	80039e0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa0:	187b      	adds	r3, r7, r1
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e056      	b.n	8003b56 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aa8:	240f      	movs	r4, #15
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	236a      	movs	r3, #106	; 0x6a
 8003ab2:	33ff      	adds	r3, #255	; 0xff
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	0013      	movs	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	18c3      	adds	r3, r0, r3
 8003ac0:	185b      	adds	r3, r3, r1
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	23b4      	movs	r3, #180	; 0xb4
 8003ace:	0059      	lsls	r1, r3, #1
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	18c3      	adds	r3, r0, r3
 8003ada:	185b      	adds	r3, r3, r1
 8003adc:	193a      	adds	r2, r7, r4
 8003ade:	7812      	ldrb	r2, [r2, #0]
 8003ae0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	236c      	movs	r3, #108	; 0x6c
 8003aea:	33ff      	adds	r3, #255	; 0xff
 8003aec:	0019      	movs	r1, r3
 8003aee:	0013      	movs	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	18c3      	adds	r3, r0, r3
 8003af8:	185b      	adds	r3, r3, r1
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003afe:	193b      	adds	r3, r7, r4
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	23bc      	movs	r3, #188	; 0xbc
 8003b06:	0059      	lsls	r1, r3, #1
 8003b08:	0013      	movs	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	18c3      	adds	r3, r0, r3
 8003b12:	185b      	adds	r3, r3, r1
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b18:	193b      	adds	r3, r7, r4
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	23be      	movs	r3, #190	; 0xbe
 8003b20:	0059      	lsls	r1, r3, #1
 8003b22:	0013      	movs	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	18c3      	adds	r3, r0, r3
 8003b2c:	185b      	adds	r3, r3, r1
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b32:	193b      	adds	r3, r7, r4
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	23c0      	movs	r3, #192	; 0xc0
 8003b3a:	0059      	lsls	r1, r3, #1
 8003b3c:	0013      	movs	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	189b      	adds	r3, r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	18c3      	adds	r3, r0, r3
 8003b46:	185b      	adds	r3, r3, r1
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	781a      	ldrb	r2, [r3, #0]
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	3201      	adds	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	230f      	movs	r3, #15
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3a1      	bcc.n	8003aa8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	466a      	mov	r2, sp
 8003b6c:	0011      	movs	r1, r2
 8003b6e:	001a      	movs	r2, r3
 8003b70:	3210      	adds	r2, #16
 8003b72:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003b74:	c170      	stmia	r1!, {r4, r5, r6}
 8003b76:	ca30      	ldmia	r2!, {r4, r5}
 8003b78:	c130      	stmia	r1!, {r4, r5}
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f002 f864 	bl	8005c4c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <HAL_PCD_Init+0x21c>)
 8003b90:	2101      	movs	r1, #1
 8003b92:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d103      	bne.n	8003ba4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 f808 	bl	8003bb4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b005      	add	sp, #20
 8003bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	000002a9 	.word	0x000002a9

08003bb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	23ba      	movs	r3, #186	; 0xba
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	2101      	movs	r1, #1
 8003bca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	23b8      	movs	r3, #184	; 0xb8
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2254      	movs	r2, #84	; 0x54
 8003bda:	5a9b      	ldrh	r3, [r3, r2]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2201      	movs	r2, #1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	b299      	uxth	r1, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2254      	movs	r2, #84	; 0x54
 8003be8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2254      	movs	r2, #84	; 0x54
 8003bee:	5a9b      	ldrh	r3, [r3, r2]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2254      	movs	r2, #84	; 0x54
 8003bfc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b004      	add	sp, #16
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f000 fb76 	bl	8004308 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	d100      	bne.n	8003c28 <HAL_RCC_OscConfig+0x20>
 8003c26:	e08e      	b.n	8003d46 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c28:	4bc5      	ldr	r3, [pc, #788]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	220c      	movs	r2, #12
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d00e      	beq.n	8003c52 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c34:	4bc2      	ldr	r3, [pc, #776]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	220c      	movs	r2, #12
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d117      	bne.n	8003c70 <HAL_RCC_OscConfig+0x68>
 8003c40:	4bbf      	ldr	r3, [pc, #764]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	23c0      	movs	r3, #192	; 0xc0
 8003c46:	025b      	lsls	r3, r3, #9
 8003c48:	401a      	ands	r2, r3
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	025b      	lsls	r3, r3, #9
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d10e      	bne.n	8003c70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c52:	4bbb      	ldr	r3, [pc, #748]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d100      	bne.n	8003c60 <HAL_RCC_OscConfig+0x58>
 8003c5e:	e071      	b.n	8003d44 <HAL_RCC_OscConfig+0x13c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d000      	beq.n	8003c6a <HAL_RCC_OscConfig+0x62>
 8003c68:	e06c      	b.n	8003d44 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f000 fb4c 	bl	8004308 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x80>
 8003c78:	4bb1      	ldr	r3, [pc, #708]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4bb0      	ldr	r3, [pc, #704]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	0249      	lsls	r1, r1, #9
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e02f      	b.n	8003ce8 <HAL_RCC_OscConfig+0xe0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0xa2>
 8003c90:	4bab      	ldr	r3, [pc, #684]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4baa      	ldr	r3, [pc, #680]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c96:	49ab      	ldr	r1, [pc, #684]	; (8003f44 <HAL_RCC_OscConfig+0x33c>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	4ba8      	ldr	r3, [pc, #672]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4ba7      	ldr	r3, [pc, #668]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003ca2:	49a9      	ldr	r1, [pc, #676]	; (8003f48 <HAL_RCC_OscConfig+0x340>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e01e      	b.n	8003ce8 <HAL_RCC_OscConfig+0xe0>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xc8>
 8003cb2:	4ba3      	ldr	r3, [pc, #652]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4ba2      	ldr	r3, [pc, #648]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	02c9      	lsls	r1, r1, #11
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	4b9f      	ldr	r3, [pc, #636]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b9e      	ldr	r3, [pc, #632]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	0249      	lsls	r1, r1, #9
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xe0>
 8003cd0:	4b9b      	ldr	r3, [pc, #620]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b9a      	ldr	r3, [pc, #616]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003cd6:	499b      	ldr	r1, [pc, #620]	; (8003f44 <HAL_RCC_OscConfig+0x33c>)
 8003cd8:	400a      	ands	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	4b98      	ldr	r3, [pc, #608]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b97      	ldr	r3, [pc, #604]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003ce2:	4999      	ldr	r1, [pc, #612]	; (8003f48 <HAL_RCC_OscConfig+0x340>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe ff4c 	bl	8002b8c <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfa:	f7fe ff47 	bl	8002b8c <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	; 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e2fd      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0c:	4b8c      	ldr	r3, [pc, #560]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0xf2>
 8003d18:	e015      	b.n	8003d46 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fe ff37 	bl	8002b8c <HAL_GetTick>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe ff32 	bl	8002b8c <HAL_GetTick>
 8003d28:	0002      	movs	r2, r0
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e2e8      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	4b82      	ldr	r3, [pc, #520]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	029b      	lsls	r3, r3, #10
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x11c>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <HAL_RCC_OscConfig+0x14a>
 8003d50:	e06c      	b.n	8003e2c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d52:	4b7b      	ldr	r3, [pc, #492]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	220c      	movs	r2, #12
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d5c:	4b78      	ldr	r3, [pc, #480]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	220c      	movs	r2, #12
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d11f      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1a0>
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	23c0      	movs	r3, #192	; 0xc0
 8003d6e:	025b      	lsls	r3, r3, #9
 8003d70:	401a      	ands	r2, r3
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b71      	ldr	r3, [pc, #452]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_OscConfig+0x188>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e2bb      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b6b      	ldr	r3, [pc, #428]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	22f8      	movs	r2, #248	; 0xf8
 8003d96:	4393      	bics	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00da      	lsls	r2, r3, #3
 8003da0:	4b67      	ldr	r3, [pc, #412]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e041      	b.n	8003e2c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d024      	beq.n	8003dfa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b63      	ldr	r3, [pc, #396]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b62      	ldr	r3, [pc, #392]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003db6:	2101      	movs	r1, #1
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fee6 	bl	8002b8c <HAL_GetTick>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fe fee1 	bl	8002b8c <HAL_GetTick>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e297      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	4013      	ands	r3, r2
 8003de0:	d0f1      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	22f8      	movs	r2, #248	; 0xf8
 8003de8:	4393      	bics	r3, r2
 8003dea:	0019      	movs	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	00da      	lsls	r2, r3, #3
 8003df2:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e018      	b.n	8003e2c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfa:	4b51      	ldr	r3, [pc, #324]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e00:	2101      	movs	r1, #1
 8003e02:	438a      	bics	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e06:	f7fe fec1 	bl	8002b8c <HAL_GetTick>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e10:	f7fe febc 	bl	8002b8c <HAL_GetTick>
 8003e14:	0002      	movs	r2, r0
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e272      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2202      	movs	r2, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d1f1      	bne.n	8003e10 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2208      	movs	r2, #8
 8003e32:	4013      	ands	r3, r2
 8003e34:	d036      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e44:	2101      	movs	r1, #1
 8003e46:	430a      	orrs	r2, r1
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fe9f 	bl	8002b8c <HAL_GetTick>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fe fe9a 	bl	8002b8c <HAL_GetTick>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e250      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d0f1      	beq.n	8003e54 <HAL_RCC_OscConfig+0x24c>
 8003e70:	e018      	b.n	8003ea4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e76:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e78:	2101      	movs	r1, #1
 8003e7a:	438a      	bics	r2, r1
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fe85 	bl	8002b8c <HAL_GetTick>
 8003e82:	0003      	movs	r3, r0
 8003e84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e88:	f7fe fe80 	bl	8002b8c <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e236      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9a:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d1f1      	bne.n	8003e88 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d100      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2a8>
 8003eae:	e0b5      	b.n	800401c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb0:	201f      	movs	r0, #31
 8003eb2:	183b      	adds	r3, r7, r0
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	055b      	lsls	r3, r3, #21
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d110      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003ec6:	69da      	ldr	r2, [r3, #28]
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	0549      	lsls	r1, r1, #21
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	61da      	str	r2, [r3, #28]
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	055b      	lsls	r3, r3, #21
 8003eda:	4013      	ands	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_RCC_OscConfig+0x344>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d11a      	bne.n	8003f28 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCC_OscConfig+0x344>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_RCC_OscConfig+0x344>)
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	0049      	lsls	r1, r1, #1
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f00:	f7fe fe44 	bl	8002b8c <HAL_GetTick>
 8003f04:	0003      	movs	r3, r0
 8003f06:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0a:	f7fe fe3f 	bl	8002b8c <HAL_GetTick>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b64      	cmp	r3, #100	; 0x64
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1f5      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_OscConfig+0x344>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10f      	bne.n	8003f50 <HAL_RCC_OscConfig+0x348>
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <HAL_RCC_OscConfig+0x338>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	621a      	str	r2, [r3, #32]
 8003f3c:	e036      	b.n	8003fac <HAL_RCC_OscConfig+0x3a4>
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	40021000 	.word	0x40021000
 8003f44:	fffeffff 	.word	0xfffeffff
 8003f48:	fffbffff 	.word	0xfffbffff
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10c      	bne.n	8003f72 <HAL_RCC_OscConfig+0x36a>
 8003f58:	4bca      	ldr	r3, [pc, #808]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f5a:	6a1a      	ldr	r2, [r3, #32]
 8003f5c:	4bc9      	ldr	r3, [pc, #804]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f5e:	2101      	movs	r1, #1
 8003f60:	438a      	bics	r2, r1
 8003f62:	621a      	str	r2, [r3, #32]
 8003f64:	4bc7      	ldr	r3, [pc, #796]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	4bc6      	ldr	r3, [pc, #792]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	621a      	str	r2, [r3, #32]
 8003f70:	e01c      	b.n	8003fac <HAL_RCC_OscConfig+0x3a4>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x38c>
 8003f7a:	4bc2      	ldr	r3, [pc, #776]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	4bc1      	ldr	r3, [pc, #772]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f80:	2104      	movs	r1, #4
 8003f82:	430a      	orrs	r2, r1
 8003f84:	621a      	str	r2, [r3, #32]
 8003f86:	4bbf      	ldr	r3, [pc, #764]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	4bbe      	ldr	r3, [pc, #760]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	621a      	str	r2, [r3, #32]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0x3a4>
 8003f94:	4bbb      	ldr	r3, [pc, #748]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	4bba      	ldr	r3, [pc, #744]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	621a      	str	r2, [r3, #32]
 8003fa0:	4bb8      	ldr	r3, [pc, #736]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	4bb7      	ldr	r3, [pc, #732]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	438a      	bics	r2, r1
 8003faa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d014      	beq.n	8003fde <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fe fdea 	bl	8002b8c <HAL_GetTick>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e009      	b.n	8003fd2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fe fde5 	bl	8002b8c <HAL_GetTick>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	4aaf      	ldr	r2, [pc, #700]	; (8004288 <HAL_RCC_OscConfig+0x680>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e19a      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd2:	4bac      	ldr	r3, [pc, #688]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x3b6>
 8003fdc:	e013      	b.n	8004006 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7fe fdd5 	bl	8002b8c <HAL_GetTick>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe6:	e009      	b.n	8003ffc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe fdd0 	bl	8002b8c <HAL_GetTick>
 8003fec:	0002      	movs	r2, r0
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	4aa5      	ldr	r2, [pc, #660]	; (8004288 <HAL_RCC_OscConfig+0x680>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e185      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffc:	4ba1      	ldr	r3, [pc, #644]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	2202      	movs	r2, #2
 8004002:	4013      	ands	r3, r2
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004006:	231f      	movs	r3, #31
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004010:	4b9c      	ldr	r3, [pc, #624]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	4b9b      	ldr	r3, [pc, #620]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004016:	499d      	ldr	r1, [pc, #628]	; (800428c <HAL_RCC_OscConfig+0x684>)
 8004018:	400a      	ands	r2, r1
 800401a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2210      	movs	r2, #16
 8004022:	4013      	ands	r3, r2
 8004024:	d063      	beq.n	80040ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d12a      	bne.n	8004084 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800402e:	4b95      	ldr	r3, [pc, #596]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004032:	4b94      	ldr	r3, [pc, #592]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004034:	2104      	movs	r1, #4
 8004036:	430a      	orrs	r2, r1
 8004038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800403a:	4b92      	ldr	r3, [pc, #584]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800403c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403e:	4b91      	ldr	r3, [pc, #580]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004040:	2101      	movs	r1, #1
 8004042:	430a      	orrs	r2, r1
 8004044:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004046:	f7fe fda1 	bl	8002b8c <HAL_GetTick>
 800404a:	0003      	movs	r3, r0
 800404c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004050:	f7fe fd9c 	bl	8002b8c <HAL_GetTick>
 8004054:	0002      	movs	r2, r0
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e152      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004062:	4b88      	ldr	r3, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	2202      	movs	r2, #2
 8004068:	4013      	ands	r3, r2
 800406a:	d0f1      	beq.n	8004050 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800406c:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	22f8      	movs	r2, #248	; 0xf8
 8004072:	4393      	bics	r3, r2
 8004074:	0019      	movs	r1, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	00da      	lsls	r2, r3, #3
 800407c:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800407e:	430a      	orrs	r2, r1
 8004080:	635a      	str	r2, [r3, #52]	; 0x34
 8004082:	e034      	b.n	80040ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	3305      	adds	r3, #5
 800408a:	d111      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800408c:	4b7d      	ldr	r3, [pc, #500]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	4b7c      	ldr	r3, [pc, #496]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004092:	2104      	movs	r1, #4
 8004094:	438a      	bics	r2, r1
 8004096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004098:	4b7a      	ldr	r3, [pc, #488]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800409a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409c:	22f8      	movs	r2, #248	; 0xf8
 800409e:	4393      	bics	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	00da      	lsls	r2, r3, #3
 80040a8:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80040aa:	430a      	orrs	r2, r1
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
 80040ae:	e01e      	b.n	80040ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80040b0:	4b74      	ldr	r3, [pc, #464]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80040b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b4:	4b73      	ldr	r3, [pc, #460]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80040b6:	2104      	movs	r1, #4
 80040b8:	430a      	orrs	r2, r1
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80040bc:	4b71      	ldr	r3, [pc, #452]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80040be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c0:	4b70      	ldr	r3, [pc, #448]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80040c2:	2101      	movs	r1, #1
 80040c4:	438a      	bics	r2, r1
 80040c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c8:	f7fe fd60 	bl	8002b8c <HAL_GetTick>
 80040cc:	0003      	movs	r3, r0
 80040ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80040d2:	f7fe fd5b 	bl	8002b8c <HAL_GetTick>
 80040d6:	0002      	movs	r2, r0
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e111      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040e4:	4b67      	ldr	r3, [pc, #412]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	2202      	movs	r2, #2
 80040ea:	4013      	ands	r3, r2
 80040ec:	d1f1      	bne.n	80040d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2220      	movs	r2, #32
 80040f4:	4013      	ands	r3, r2
 80040f6:	d05c      	beq.n	80041b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80040f8:	4b62      	ldr	r3, [pc, #392]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	220c      	movs	r2, #12
 80040fe:	4013      	ands	r3, r2
 8004100:	2b0c      	cmp	r3, #12
 8004102:	d00e      	beq.n	8004122 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004104:	4b5f      	ldr	r3, [pc, #380]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	220c      	movs	r2, #12
 800410a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800410c:	2b08      	cmp	r3, #8
 800410e:	d114      	bne.n	800413a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004110:	4b5c      	ldr	r3, [pc, #368]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	23c0      	movs	r3, #192	; 0xc0
 8004116:	025b      	lsls	r3, r3, #9
 8004118:	401a      	ands	r2, r3
 800411a:	23c0      	movs	r3, #192	; 0xc0
 800411c:	025b      	lsls	r3, r3, #9
 800411e:	429a      	cmp	r2, r3
 8004120:	d10b      	bne.n	800413a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004122:	4b58      	ldr	r3, [pc, #352]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	025b      	lsls	r3, r3, #9
 800412a:	4013      	ands	r3, r2
 800412c:	d040      	beq.n	80041b0 <HAL_RCC_OscConfig+0x5a8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d03c      	beq.n	80041b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0e6      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01b      	beq.n	800417a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004142:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004146:	4b4f      	ldr	r3, [pc, #316]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	0249      	lsls	r1, r1, #9
 800414c:	430a      	orrs	r2, r1
 800414e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fd1c 	bl	8002b8c <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800415a:	f7fe fd17 	bl	8002b8c <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e0cd      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800416c:	4b45      	ldr	r3, [pc, #276]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800416e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	025b      	lsls	r3, r3, #9
 8004174:	4013      	ands	r3, r2
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x552>
 8004178:	e01b      	b.n	80041b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800417a:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800417c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004180:	4943      	ldr	r1, [pc, #268]	; (8004290 <HAL_RCC_OscConfig+0x688>)
 8004182:	400a      	ands	r2, r1
 8004184:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe fd01 	bl	8002b8c <HAL_GetTick>
 800418a:	0003      	movs	r3, r0
 800418c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004190:	f7fe fcfc 	bl	8002b8c <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e0b2      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80041a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	025b      	lsls	r3, r3, #9
 80041aa:	4013      	ands	r3, r2
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x588>
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80041b0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d100      	bne.n	80041bc <HAL_RCC_OscConfig+0x5b4>
 80041ba:	e0a4      	b.n	8004306 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	220c      	movs	r2, #12
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d100      	bne.n	80041ca <HAL_RCC_OscConfig+0x5c2>
 80041c8:	e078      	b.n	80042bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d14c      	bne.n	800426c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80041d8:	492e      	ldr	r1, [pc, #184]	; (8004294 <HAL_RCC_OscConfig+0x68c>)
 80041da:	400a      	ands	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fe fcd5 	bl	8002b8c <HAL_GetTick>
 80041e2:	0003      	movs	r3, r0
 80041e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe fcd0 	bl	8002b8c <HAL_GetTick>
 80041ec:	0002      	movs	r2, r0
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e086      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	049b      	lsls	r3, r3, #18
 8004202:	4013      	ands	r3, r2
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004206:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	220f      	movs	r2, #15
 800420c:	4393      	bics	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004216:	430a      	orrs	r2, r1
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c
 800421a:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a1e      	ldr	r2, [pc, #120]	; (8004298 <HAL_RCC_OscConfig+0x690>)
 8004220:	4013      	ands	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	431a      	orrs	r2, r3
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800423a:	2180      	movs	r1, #128	; 0x80
 800423c:	0449      	lsls	r1, r1, #17
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fe fca3 	bl	8002b8c <HAL_GetTick>
 8004246:	0003      	movs	r3, r0
 8004248:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe fc9e 	bl	8002b8c <HAL_GetTick>
 8004250:	0002      	movs	r2, r0
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e054      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	049b      	lsls	r3, r3, #18
 8004266:	4013      	ands	r3, r2
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x644>
 800426a:	e04c      	b.n	8004306 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCC_OscConfig+0x67c>)
 8004272:	4908      	ldr	r1, [pc, #32]	; (8004294 <HAL_RCC_OscConfig+0x68c>)
 8004274:	400a      	ands	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe fc88 	bl	8002b8c <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x6a6>
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	40021000 	.word	0x40021000
 8004288:	00001388 	.word	0x00001388
 800428c:	efffffff 	.word	0xefffffff
 8004290:	fffeffff 	.word	0xfffeffff
 8004294:	feffffff 	.word	0xfeffffff
 8004298:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429c:	f7fe fc76 	bl	8002b8c <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e02c      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_RCC_OscConfig+0x708>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	049b      	lsls	r3, r3, #18
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x694>
 80042ba:	e024      	b.n	8004306 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e01f      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_OscConfig+0x708>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_RCC_OscConfig+0x708>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	23c0      	movs	r3, #192	; 0xc0
 80042d8:	025b      	lsls	r3, r3, #9
 80042da:	401a      	ands	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d10e      	bne.n	8004302 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	220f      	movs	r2, #15
 80042e8:	401a      	ands	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	23f0      	movs	r3, #240	; 0xf0
 80042f6:	039b      	lsls	r3, r3, #14
 80042f8:	401a      	ands	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d001      	beq.n	8004306 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b008      	add	sp, #32
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000

08004314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0bf      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004328:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	4013      	ands	r3, r2
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d911      	bls.n	800435a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b5e      	ldr	r3, [pc, #376]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	4393      	bics	r3, r2
 800433e:	0019      	movs	r1, r3
 8004340:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004348:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	4013      	ands	r3, r2
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d001      	beq.n	800435a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0a6      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d015      	beq.n	8004390 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2204      	movs	r2, #4
 800436a:	4013      	ands	r3, r2
 800436c:	d006      	beq.n	800437c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800436e:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004374:	21e0      	movs	r1, #224	; 0xe0
 8004376:	00c9      	lsls	r1, r1, #3
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437c:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	22f0      	movs	r2, #240	; 0xf0
 8004382:	4393      	bics	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2201      	movs	r2, #1
 8004396:	4013      	ands	r3, r2
 8004398:	d04c      	beq.n	8004434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	4013      	ands	r3, r2
 80043ac:	d120      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07a      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	049b      	lsls	r3, r3, #18
 80043c2:	4013      	ands	r3, r2
 80043c4:	d114      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06e      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043d2:	4b38      	ldr	r3, [pc, #224]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 80043d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d6:	2380      	movs	r3, #128	; 0x80
 80043d8:	025b      	lsls	r3, r3, #9
 80043da:	4013      	ands	r3, r2
 80043dc:	d108      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e062      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2202      	movs	r2, #2
 80043e8:	4013      	ands	r3, r2
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e05b      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2203      	movs	r2, #3
 80043f6:	4393      	bics	r3, r2
 80043f8:	0019      	movs	r1, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004404:	f7fe fbc2 	bl	8002b8c <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440c:	e009      	b.n	8004422 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440e:	f7fe fbbd 	bl	8002b8c <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <HAL_RCC_ClockConfig+0x1a4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e042      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	220c      	movs	r2, #12
 8004428:	401a      	ands	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	429a      	cmp	r2, r3
 8004432:	d1ec      	bne.n	800440e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004434:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2201      	movs	r2, #1
 800443a:	4013      	ands	r3, r2
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d211      	bcs.n	8004466 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4393      	bics	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004454:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <HAL_RCC_ClockConfig+0x19c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	4013      	ands	r3, r2
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d001      	beq.n	8004466 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e020      	b.n	80044a8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2204      	movs	r2, #4
 800446c:	4013      	ands	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	4a11      	ldr	r2, [pc, #68]	; (80044bc <HAL_RCC_ClockConfig+0x1a8>)
 8004476:	4013      	ands	r3, r2
 8004478:	0019      	movs	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004484:	f000 f820 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004488:	0001      	movs	r1, r0
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <HAL_RCC_ClockConfig+0x1a0>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	220f      	movs	r2, #15
 8004492:	4013      	ands	r3, r2
 8004494:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <HAL_RCC_ClockConfig+0x1ac>)
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	000a      	movs	r2, r1
 800449a:	40da      	lsrs	r2, r3
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1b0>)
 800449e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80044a0:	2003      	movs	r0, #3
 80044a2:	f7fd f885 	bl	80015b0 <HAL_InitTick>
  
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b004      	add	sp, #16
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40021000 	.word	0x40021000
 80044b8:	00001388 	.word	0x00001388
 80044bc:	fffff8ff 	.word	0xfffff8ff
 80044c0:	0800d5d4 	.word	0x0800d5d4
 80044c4:	20000000 	.word	0x20000000

080044c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b08f      	sub	sp, #60	; 0x3c
 80044cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80044ce:	2314      	movs	r3, #20
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	4a38      	ldr	r2, [pc, #224]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xec>)
 80044d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044d6:	c313      	stmia	r3!, {r0, r1, r4}
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80044e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044e2:	c313      	stmia	r3!, {r0, r1, r4}
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ec:	2300      	movs	r3, #0
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f0:	2300      	movs	r3, #0
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80044fc:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	220c      	movs	r2, #12
 8004506:	4013      	ands	r3, r2
 8004508:	2b0c      	cmp	r3, #12
 800450a:	d047      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0xd4>
 800450c:	d849      	bhi.n	80045a2 <HAL_RCC_GetSysClockFreq+0xda>
 800450e:	2b04      	cmp	r3, #4
 8004510:	d002      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x50>
 8004512:	2b08      	cmp	r3, #8
 8004514:	d003      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0x56>
 8004516:	e044      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004518:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800451c:	e044      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	0c9b      	lsrs	r3, r3, #18
 8004522:	220f      	movs	r2, #15
 8004524:	4013      	ands	r3, r2
 8004526:	2214      	movs	r2, #20
 8004528:	18ba      	adds	r2, r7, r2
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	220f      	movs	r2, #15
 8004534:	4013      	ands	r3, r2
 8004536:	1d3a      	adds	r2, r7, #4
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800453c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453e:	23c0      	movs	r3, #192	; 0xc0
 8004540:	025b      	lsls	r3, r3, #9
 8004542:	401a      	ands	r2, r3
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	025b      	lsls	r3, r3, #9
 8004548:	429a      	cmp	r2, r3
 800454a:	d109      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800454c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454e:	481c      	ldr	r0, [pc, #112]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004550:	f7fb fde4 	bl	800011c <__udivsi3>
 8004554:	0003      	movs	r3, r0
 8004556:	001a      	movs	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	4353      	muls	r3, r2
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
 800455e:	e01a      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004562:	23c0      	movs	r3, #192	; 0xc0
 8004564:	025b      	lsls	r3, r3, #9
 8004566:	401a      	ands	r2, r3
 8004568:	23c0      	movs	r3, #192	; 0xc0
 800456a:	025b      	lsls	r3, r3, #9
 800456c:	429a      	cmp	r2, r3
 800456e:	d109      	bne.n	8004584 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004572:	4814      	ldr	r0, [pc, #80]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004574:	f7fb fdd2 	bl	800011c <__udivsi3>
 8004578:	0003      	movs	r3, r0
 800457a:	001a      	movs	r2, r3
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	4353      	muls	r3, r2
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
 8004582:	e008      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004586:	480e      	ldr	r0, [pc, #56]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004588:	f7fb fdc8 	bl	800011c <__udivsi3>
 800458c:	0003      	movs	r3, r0
 800458e:	001a      	movs	r2, r3
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	4353      	muls	r3, r2
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800459a:	e005      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045a0:	e002      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80045aa:	0018      	movs	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b00f      	add	sp, #60	; 0x3c
 80045b0:	bd90      	pop	{r4, r7, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	0800d41c 	.word	0x0800d41c
 80045b8:	0800d42c 	.word	0x0800d42c
 80045bc:	40021000 	.word	0x40021000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	02dc6c00 	.word	0x02dc6c00

080045c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	20000000 	.word	0x20000000

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80045e0:	f7ff fff2 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045e4:	0001      	movs	r1, r0
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	2207      	movs	r2, #7
 80045ee:	4013      	ands	r3, r2
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f2:	5cd3      	ldrb	r3, [r2, r3]
 80045f4:	40d9      	lsrs	r1, r3
 80045f6:	000b      	movs	r3, r1
}    
 80045f8:	0018      	movs	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	40021000 	.word	0x40021000
 8004604:	0800d5e4 	.word	0x0800d5e4

08004608 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_RCC_GetClockConfig+0x4c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2203      	movs	r2, #3
 800461e:	401a      	ands	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_GetClockConfig+0x4c>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	22f0      	movs	r2, #240	; 0xf0
 800462a:	401a      	ands	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_GetClockConfig+0x4c>)
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	23e0      	movs	r3, #224	; 0xe0
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	401a      	ands	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_GetClockConfig+0x50>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	401a      	ands	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	46bd      	mov	sp, r7
 800464e:	b002      	add	sp, #8
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	40021000 	.word	0x40021000
 8004658:	40022000 	.word	0x40022000

0800465c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	025b      	lsls	r3, r3, #9
 8004674:	4013      	ands	r3, r2
 8004676:	d100      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004678:	e08e      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800467a:	2017      	movs	r0, #23
 800467c:	183b      	adds	r3, r7, r0
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004682:	4b6e      	ldr	r3, [pc, #440]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	055b      	lsls	r3, r3, #21
 800468a:	4013      	ands	r3, r2
 800468c:	d110      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800468e:	4b6b      	ldr	r3, [pc, #428]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	0549      	lsls	r1, r1, #21
 8004698:	430a      	orrs	r2, r1
 800469a:	61da      	str	r2, [r3, #28]
 800469c:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	055b      	lsls	r3, r3, #21
 80046a4:	4013      	ands	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046aa:	183b      	adds	r3, r7, r0
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b0:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4013      	ands	r3, r2
 80046ba:	d11a      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046bc:	4b60      	ldr	r3, [pc, #384]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b5f      	ldr	r3, [pc, #380]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	0049      	lsls	r1, r1, #1
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ca:	f7fe fa5f 	bl	8002b8c <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	e008      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d4:	f7fe fa5a 	bl	8002b8c <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0a6      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4013      	ands	r3, r2
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046f2:	4b52      	ldr	r3, [pc, #328]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046f4:	6a1a      	ldr	r2, [r3, #32]
 80046f6:	23c0      	movs	r3, #192	; 0xc0
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4013      	ands	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d034      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	23c0      	movs	r3, #192	; 0xc0
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4013      	ands	r3, r2
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	429a      	cmp	r2, r3
 8004712:	d02c      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004714:	4b49      	ldr	r3, [pc, #292]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4a4a      	ldr	r2, [pc, #296]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800471a:	4013      	ands	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004720:	6a1a      	ldr	r2, [r3, #32]
 8004722:	4b46      	ldr	r3, [pc, #280]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	0249      	lsls	r1, r1, #9
 8004728:	430a      	orrs	r2, r1
 800472a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800472c:	4b43      	ldr	r3, [pc, #268]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800472e:	6a1a      	ldr	r2, [r3, #32]
 8004730:	4b42      	ldr	r3, [pc, #264]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004732:	4945      	ldr	r1, [pc, #276]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004734:	400a      	ands	r2, r1
 8004736:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fa21 	bl	8002b8c <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	e009      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fe fa1c 	bl	8002b8c <HAL_GetTick>
 8004754:	0002      	movs	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	4a3c      	ldr	r2, [pc, #240]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e067      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d0f0      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476e:	4b33      	ldr	r3, [pc, #204]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4a34      	ldr	r2, [pc, #208]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004774:	4013      	ands	r3, r2
 8004776:	0019      	movs	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800477e:	430a      	orrs	r2, r1
 8004780:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004782:	2317      	movs	r3, #23
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d105      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004792:	492f      	ldr	r1, [pc, #188]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004794:	400a      	ands	r2, r1
 8004796:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047a2:	4b26      	ldr	r3, [pc, #152]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	2203      	movs	r2, #3
 80047a8:	4393      	bics	r3, r2
 80047aa:	0019      	movs	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047b2:	430a      	orrs	r2, r1
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2202      	movs	r2, #2
 80047bc:	4013      	ands	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	4a23      	ldr	r2, [pc, #140]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	0019      	movs	r1, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047d0:	430a      	orrs	r2, r1
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2220      	movs	r2, #32
 80047da:	4013      	ands	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	2210      	movs	r2, #16
 80047e4:	4393      	bics	r3, r2
 80047e6:	0019      	movs	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047ee:	430a      	orrs	r2, r1
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	029b      	lsls	r3, r3, #10
 80047fa:	4013      	ands	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	4393      	bics	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800480e:	430a      	orrs	r2, r1
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4013      	ands	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	4393      	bics	r3, r2
 8004826:	0019      	movs	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800482e:	430a      	orrs	r2, r1
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b006      	add	sp, #24
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
 8004844:	fffffcff 	.word	0xfffffcff
 8004848:	fffeffff 	.word	0xfffeffff
 800484c:	00001388 	.word	0x00001388
 8004850:	efffffff 	.word	0xefffffff
 8004854:	fffcffff 	.word	0xfffcffff

08004858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0a8      	b.n	80049bc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	2382      	movs	r3, #130	; 0x82
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	429a      	cmp	r2, r3
 800487c:	d009      	beq.n	8004892 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	61da      	str	r2, [r3, #28]
 8004884:	e005      	b.n	8004892 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	225d      	movs	r2, #93	; 0x5d
 800489c:	5c9b      	ldrb	r3, [r3, r2]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	225c      	movs	r2, #92	; 0x5c
 80048a8:	2100      	movs	r1, #0
 80048aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0018      	movs	r0, r3
 80048b0:	f7fc fdb4 	bl	800141c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	225d      	movs	r2, #93	; 0x5d
 80048b8:	2102      	movs	r1, #2
 80048ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2140      	movs	r1, #64	; 0x40
 80048c8:	438a      	bics	r2, r1
 80048ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	23e0      	movs	r3, #224	; 0xe0
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d902      	bls.n	80048de <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e002      	b.n	80048e4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	015b      	lsls	r3, r3, #5
 80048e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	23f0      	movs	r3, #240	; 0xf0
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d008      	beq.n	8004902 <HAL_SPI_Init+0xaa>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	23e0      	movs	r3, #224	; 0xe0
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	2382      	movs	r3, #130	; 0x82
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	401a      	ands	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6899      	ldr	r1, [r3, #8]
 8004910:	2384      	movs	r3, #132	; 0x84
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	400b      	ands	r3, r1
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2102      	movs	r1, #2
 800491e:	400b      	ands	r3, r1
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2101      	movs	r1, #1
 8004928:	400b      	ands	r3, r1
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6999      	ldr	r1, [r3, #24]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	400b      	ands	r3, r1
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	2138      	movs	r1, #56	; 0x38
 800493e:	400b      	ands	r3, r1
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	400b      	ands	r3, r1
 800494a:	431a      	orrs	r2, r3
 800494c:	0011      	movs	r1, r2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	401a      	ands	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	2204      	movs	r2, #4
 8004968:	401a      	ands	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2110      	movs	r1, #16
 8004970:	400b      	ands	r3, r1
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	2108      	movs	r1, #8
 800497a:	400b      	ands	r3, r1
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68d9      	ldr	r1, [r3, #12]
 8004982:	23f0      	movs	r3, #240	; 0xf0
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	400b      	ands	r3, r1
 8004988:	431a      	orrs	r2, r3
 800498a:	0011      	movs	r1, r2
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	015b      	lsls	r3, r3, #5
 8004992:	401a      	ands	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4907      	ldr	r1, [pc, #28]	; (80049c4 <HAL_SPI_Init+0x16c>)
 80049a8:	400a      	ands	r2, r1
 80049aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	225d      	movs	r2, #93	; 0x5d
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b004      	add	sp, #16
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	fffff7ff 	.word	0xfffff7ff

080049c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	001a      	movs	r2, r3
 80049d6:	1cbb      	adds	r3, r7, #2
 80049d8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049da:	2301      	movs	r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049de:	2323      	movs	r3, #35	; 0x23
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	225c      	movs	r2, #92	; 0x5c
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x2c>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e1b5      	b.n	8004d60 <HAL_SPI_TransmitReceive+0x398>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	225c      	movs	r2, #92	; 0x5c
 80049f8:	2101      	movs	r1, #1
 80049fa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049fc:	f7fe f8c6 	bl	8002b8c <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a04:	201b      	movs	r0, #27
 8004a06:	183b      	adds	r3, r7, r0
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	215d      	movs	r1, #93	; 0x5d
 8004a0c:	5c52      	ldrb	r2, [r2, r1]
 8004a0e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a16:	2312      	movs	r3, #18
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	1cba      	adds	r2, r7, #2
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d011      	beq.n	8004a4c <HAL_SPI_TransmitReceive+0x84>
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	2382      	movs	r3, #130	; 0x82
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d107      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x7a>
 8004a3a:	183b      	adds	r3, r7, r0
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d004      	beq.n	8004a4c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004a42:	2323      	movs	r3, #35	; 0x23
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a4a:	e17e      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d006      	beq.n	8004a60 <HAL_SPI_TransmitReceive+0x98>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_SPI_TransmitReceive+0x98>
 8004a58:	1cbb      	adds	r3, r7, #2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004a60:	2323      	movs	r3, #35	; 0x23
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	2201      	movs	r2, #1
 8004a66:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a68:	e16f      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	225d      	movs	r2, #93	; 0x5d
 8004a6e:	5c9b      	ldrb	r3, [r3, r2]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d003      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	225d      	movs	r2, #93	; 0x5d
 8004a7a:	2105      	movs	r1, #5
 8004a7c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1cba      	adds	r2, r7, #2
 8004a8e:	2146      	movs	r1, #70	; 0x46
 8004a90:	8812      	ldrh	r2, [r2, #0]
 8004a92:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1cba      	adds	r2, r7, #2
 8004a98:	2144      	movs	r1, #68	; 0x44
 8004a9a:	8812      	ldrh	r2, [r2, #0]
 8004a9c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1cba      	adds	r2, r7, #2
 8004aa8:	8812      	ldrh	r2, [r2, #0]
 8004aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1cba      	adds	r2, r7, #2
 8004ab0:	8812      	ldrh	r2, [r2, #0]
 8004ab2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	23e0      	movs	r3, #224	; 0xe0
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d908      	bls.n	8004ade <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	49a4      	ldr	r1, [pc, #656]	; (8004d68 <HAL_SPI_TransmitReceive+0x3a0>)
 8004ad8:	400a      	ands	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	e008      	b.n	8004af0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	0149      	lsls	r1, r1, #5
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2240      	movs	r2, #64	; 0x40
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d007      	beq.n	8004b0e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2140      	movs	r1, #64	; 0x40
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	23e0      	movs	r3, #224	; 0xe0
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d800      	bhi.n	8004b1c <HAL_SPI_TransmitReceive+0x154>
 8004b1a:	e07f      	b.n	8004c1c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x168>
 8004b24:	2312      	movs	r3, #18
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d000      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x168>
 8004b2e:	e069      	b.n	8004c04 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b54:	e056      	b.n	8004c04 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d11b      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x1d4>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d016      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x1d4>
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d113      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d11c      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x21c>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2246      	movs	r2, #70	; 0x46
 8004bae:	5a9b      	ldrh	r3, [r3, r2]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2246      	movs	r2, #70	; 0x46
 8004bd2:	5a9b      	ldrh	r3, [r3, r2]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2246      	movs	r2, #70	; 0x46
 8004bde:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004be0:	2301      	movs	r3, #1
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004be4:	f7fd ffd2 	bl	8002b8c <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d807      	bhi.n	8004c04 <HAL_SPI_TransmitReceive+0x23c>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	d004      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004bfa:	2323      	movs	r3, #35	; 0x23
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	2203      	movs	r2, #3
 8004c00:	701a      	strb	r2, [r3, #0]
        goto error;
 8004c02:	e0a2      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1a3      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x18e>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2246      	movs	r2, #70	; 0x46
 8004c12:	5a9b      	ldrh	r3, [r3, r2]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d19d      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x18e>
 8004c1a:	e085      	b.n	8004d28 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x268>
 8004c24:	2312      	movs	r3, #18
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d000      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x268>
 8004c2e:	e070      	b.n	8004d12 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c56:	e05c      	b.n	8004d12 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d11c      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x2d8>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d017      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x2d8>
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d114      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d11e      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x324>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2246      	movs	r2, #70	; 0x46
 8004cb2:	5a9b      	ldrh	r3, [r3, r2]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	7812      	ldrb	r2, [r2, #0]
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2246      	movs	r2, #70	; 0x46
 8004cda:	5a9b      	ldrh	r3, [r3, r2]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2246      	movs	r2, #70	; 0x46
 8004ce6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cec:	f7fd ff4e 	bl	8002b8c <HAL_GetTick>
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d802      	bhi.n	8004d02 <HAL_SPI_TransmitReceive+0x33a>
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	3301      	adds	r3, #1
 8004d00:	d102      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x340>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004d08:	2323      	movs	r3, #35	; 0x23
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004d10:	e01b      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d19d      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x290>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2246      	movs	r2, #70	; 0x46
 8004d20:	5a9b      	ldrh	r3, [r3, r2]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d197      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 f94c 	bl	8004fcc <SPI_EndRxTxTransaction>
 8004d34:	1e03      	subs	r3, r0, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004d38:	2323      	movs	r3, #35	; 0x23
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	661a      	str	r2, [r3, #96]	; 0x60
 8004d46:	e000      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004d48:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	225d      	movs	r2, #93	; 0x5d
 8004d4e:	2101      	movs	r1, #1
 8004d50:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	225c      	movs	r2, #92	; 0x5c
 8004d56:	2100      	movs	r1, #0
 8004d58:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004d5a:	2323      	movs	r3, #35	; 0x23
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	781b      	ldrb	r3, [r3, #0]
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b00a      	add	sp, #40	; 0x28
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	ffffefff 	.word	0xffffefff

08004d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d7c:	f7fd ff06 	bl	8002b8c <HAL_GetTick>
 8004d80:	0002      	movs	r2, r0
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	18d3      	adds	r3, r2, r3
 8004d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d8c:	f7fd fefe 	bl	8002b8c <HAL_GetTick>
 8004d90:	0003      	movs	r3, r0
 8004d92:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d94:	4b3a      	ldr	r3, [pc, #232]	; (8004e80 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	015b      	lsls	r3, r3, #5
 8004d9a:	0d1b      	lsrs	r3, r3, #20
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	4353      	muls	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004da2:	e058      	b.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	3301      	adds	r3, #1
 8004da8:	d055      	beq.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004daa:	f7fd feef 	bl	8002b8c <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d902      	bls.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d142      	bne.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	21e0      	movs	r1, #224	; 0xe0
 8004dcc:	438a      	bics	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	2382      	movs	r3, #130	; 0x82
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d113      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d005      	beq.n	8004df4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d107      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2140      	movs	r1, #64	; 0x40
 8004e00:	438a      	bics	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	019b      	lsls	r3, r3, #6
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d110      	bne.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	491a      	ldr	r1, [pc, #104]	; (8004e84 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	0189      	lsls	r1, r1, #6
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	225d      	movs	r2, #93	; 0x5d
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	225c      	movs	r2, #92	; 0x5c
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e017      	b.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	425a      	negs	r2, r3
 8004e66:	4153      	adcs	r3, r2
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d197      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	0018      	movs	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b008      	add	sp, #32
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	20000000 	.word	0x20000000
 8004e84:	ffffdfff 	.word	0xffffdfff

08004e88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e96:	2317      	movs	r3, #23
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e9e:	f7fd fe75 	bl	8002b8c <HAL_GetTick>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	18d3      	adds	r3, r2, r3
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004eae:	f7fd fe6d 	bl	8002b8c <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	00da      	lsls	r2, r3, #3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	0d1b      	lsrs	r3, r3, #20
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	4353      	muls	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ed4:	e068      	b.n	8004fa8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	23c0      	movs	r3, #192	; 0xc0
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d10a      	bne.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d107      	bne.n	8004ef6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	2117      	movs	r1, #23
 8004eee:	187b      	adds	r3, r7, r1
 8004ef0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	d055      	beq.n	8004fa8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004efc:	f7fd fe46 	bl	8002b8c <HAL_GetTick>
 8004f00:	0002      	movs	r2, r0
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d902      	bls.n	8004f12 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d142      	bne.n	8004f98 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	21e0      	movs	r1, #224	; 0xe0
 8004f1e:	438a      	bics	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	2382      	movs	r3, #130	; 0x82
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d113      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d005      	beq.n	8004f46 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d107      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2140      	movs	r1, #64	; 0x40
 8004f52:	438a      	bics	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	019b      	lsls	r3, r3, #6
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d110      	bne.n	8004f84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4916      	ldr	r1, [pc, #88]	; (8004fc8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004f6e:	400a      	ands	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2180      	movs	r1, #128	; 0x80
 8004f7e:	0189      	lsls	r1, r1, #6
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	225d      	movs	r2, #93	; 0x5d
 8004f88:	2101      	movs	r1, #1
 8004f8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	225c      	movs	r2, #92	; 0x5c
 8004f90:	2100      	movs	r1, #0
 8004f92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e010      	b.n	8004fba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d18e      	bne.n	8004ed6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	0018      	movs	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b00a      	add	sp, #40	; 0x28
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	ffffdfff 	.word	0xffffdfff

08004fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	23c0      	movs	r3, #192	; 0xc0
 8004fdc:	0159      	lsls	r1, r3, #5
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	0013      	movs	r3, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f7ff ff4e 	bl	8004e88 <SPI_WaitFifoStateUntilTimeout>
 8004fec:	1e03      	subs	r3, r0, #0
 8004fee:	d007      	beq.n	8005000 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e027      	b.n	8005050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	0013      	movs	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	f7ff fead 	bl	8004d6c <SPI_WaitFlagStateUntilTimeout>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d007      	beq.n	8005026 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	2220      	movs	r2, #32
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e014      	b.n	8005050 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	23c0      	movs	r3, #192	; 0xc0
 800502a:	00d9      	lsls	r1, r3, #3
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	0013      	movs	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	f7ff ff27 	bl	8004e88 <SPI_WaitFifoStateUntilTimeout>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d007      	beq.n	800504e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	2220      	movs	r2, #32
 8005044:	431a      	orrs	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e000      	b.n	8005050 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	b004      	add	sp, #16
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e042      	b.n	80050f0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	223d      	movs	r2, #61	; 0x3d
 800506e:	5c9b      	ldrb	r3, [r3, r2]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	223c      	movs	r2, #60	; 0x3c
 800507a:	2100      	movs	r1, #0
 800507c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 f839 	bl	80050f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	223d      	movs	r2, #61	; 0x3d
 800508a:	2102      	movs	r1, #2
 800508c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	0019      	movs	r1, r3
 8005098:	0010      	movs	r0, r2
 800509a:	f000 fad3 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2246      	movs	r2, #70	; 0x46
 80050a2:	2101      	movs	r1, #1
 80050a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	223e      	movs	r2, #62	; 0x3e
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	223f      	movs	r2, #63	; 0x3f
 80050b2:	2101      	movs	r1, #1
 80050b4:	5499      	strb	r1, [r3, r2]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2240      	movs	r2, #64	; 0x40
 80050ba:	2101      	movs	r1, #1
 80050bc:	5499      	strb	r1, [r3, r2]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2241      	movs	r2, #65	; 0x41
 80050c2:	2101      	movs	r1, #1
 80050c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2242      	movs	r2, #66	; 0x42
 80050ca:	2101      	movs	r1, #1
 80050cc:	5499      	strb	r1, [r3, r2]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2243      	movs	r2, #67	; 0x43
 80050d2:	2101      	movs	r1, #1
 80050d4:	5499      	strb	r1, [r3, r2]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2244      	movs	r2, #68	; 0x44
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2245      	movs	r2, #69	; 0x45
 80050e2:	2101      	movs	r1, #1
 80050e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	223d      	movs	r2, #61	; 0x3d
 80050ea:	2101      	movs	r1, #1
 80050ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b002      	add	sp, #8
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b002      	add	sp, #8
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	223d      	movs	r2, #61	; 0x3d
 8005114:	5c9b      	ldrb	r3, [r3, r2]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d001      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e03b      	b.n	8005198 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	223d      	movs	r2, #61	; 0x3d
 8005124:	2102      	movs	r1, #2
 8005126:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2101      	movs	r1, #1
 8005134:	430a      	orrs	r2, r1
 8005136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_TIM_Base_Start_IT+0x98>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00f      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0x5a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	05db      	lsls	r3, r3, #23
 800514a:	429a      	cmp	r2, r3
 800514c:	d009      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0x5a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_TIM_Base_Start_IT+0x5a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2207      	movs	r2, #7
 800516a:	4013      	ands	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b06      	cmp	r3, #6
 8005172:	d010      	beq.n	8005196 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2101      	movs	r1, #1
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005184:	e007      	b.n	8005196 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2101      	movs	r1, #1
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	0018      	movs	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	b004      	add	sp, #16
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40014000 	.word	0x40014000

080051ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e042      	b.n	8005244 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	223d      	movs	r2, #61	; 0x3d
 80051c2:	5c9b      	ldrb	r3, [r3, r2]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	223c      	movs	r2, #60	; 0x3c
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7fc f96d 	bl	80014b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	223d      	movs	r2, #61	; 0x3d
 80051de:	2102      	movs	r1, #2
 80051e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	0019      	movs	r1, r3
 80051ec:	0010      	movs	r0, r2
 80051ee:	f000 fa29 	bl	8005644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2246      	movs	r2, #70	; 0x46
 80051f6:	2101      	movs	r1, #1
 80051f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	223e      	movs	r2, #62	; 0x3e
 80051fe:	2101      	movs	r1, #1
 8005200:	5499      	strb	r1, [r3, r2]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	223f      	movs	r2, #63	; 0x3f
 8005206:	2101      	movs	r1, #1
 8005208:	5499      	strb	r1, [r3, r2]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2240      	movs	r2, #64	; 0x40
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2241      	movs	r2, #65	; 0x41
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2242      	movs	r2, #66	; 0x42
 800521e:	2101      	movs	r1, #1
 8005220:	5499      	strb	r1, [r3, r2]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2243      	movs	r2, #67	; 0x43
 8005226:	2101      	movs	r1, #1
 8005228:	5499      	strb	r1, [r3, r2]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2244      	movs	r2, #68	; 0x44
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2245      	movs	r2, #69	; 0x45
 8005236:	2101      	movs	r1, #1
 8005238:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223d      	movs	r2, #61	; 0x3d
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	b002      	add	sp, #8
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d124      	bne.n	80052ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2202      	movs	r2, #2
 800526a:	4013      	ands	r3, r2
 800526c:	2b02      	cmp	r3, #2
 800526e:	d11d      	bne.n	80052ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2203      	movs	r2, #3
 8005276:	4252      	negs	r2, r2
 8005278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2203      	movs	r2, #3
 8005288:	4013      	ands	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	0018      	movs	r0, r3
 8005290:	f000 f9c0 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 8005294:	e007      	b.n	80052a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0018      	movs	r0, r3
 800529a:	f000 f9b3 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 f9bf 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2204      	movs	r2, #4
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d125      	bne.n	8005306 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2204      	movs	r2, #4
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d11e      	bne.n	8005306 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2205      	movs	r2, #5
 80052ce:	4252      	negs	r2, r2
 80052d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	23c0      	movs	r3, #192	; 0xc0
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4013      	ands	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f993 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 80052ee:	e007      	b.n	8005300 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 f986 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 f992 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2208      	movs	r2, #8
 800530e:	4013      	ands	r3, r2
 8005310:	2b08      	cmp	r3, #8
 8005312:	d124      	bne.n	800535e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2208      	movs	r2, #8
 800531c:	4013      	ands	r3, r2
 800531e:	2b08      	cmp	r3, #8
 8005320:	d11d      	bne.n	800535e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2209      	movs	r2, #9
 8005328:	4252      	negs	r2, r2
 800532a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2204      	movs	r2, #4
 8005330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2203      	movs	r2, #3
 800533a:	4013      	ands	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0018      	movs	r0, r3
 8005342:	f000 f967 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 8005346:	e007      	b.n	8005358 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f95a 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 f966 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2210      	movs	r2, #16
 8005366:	4013      	ands	r3, r2
 8005368:	2b10      	cmp	r3, #16
 800536a:	d125      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2210      	movs	r2, #16
 8005374:	4013      	ands	r3, r2
 8005376:	2b10      	cmp	r3, #16
 8005378:	d11e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2211      	movs	r2, #17
 8005380:	4252      	negs	r2, r2
 8005382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2208      	movs	r2, #8
 8005388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	23c0      	movs	r3, #192	; 0xc0
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4013      	ands	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0018      	movs	r0, r3
 800539c:	f000 f93a 	bl	8005614 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e007      	b.n	80053b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f000 f92d 	bl	8005604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 f939 	bl	8005624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2201      	movs	r2, #1
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d10f      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2202      	movs	r2, #2
 80053da:	4252      	negs	r2, r2
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fb ff77 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d10f      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2280      	movs	r2, #128	; 0x80
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d108      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2281      	movs	r2, #129	; 0x81
 8005408:	4252      	negs	r2, r2
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	0018      	movs	r0, r3
 8005410:	f000 fbfa 	bl	8005c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2240      	movs	r2, #64	; 0x40
 800541c:	4013      	ands	r3, r2
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d10f      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	4013      	ands	r3, r2
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d108      	bne.n	8005442 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2241      	movs	r2, #65	; 0x41
 8005436:	4252      	negs	r2, r2
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 f8f9 	bl	8005634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2220      	movs	r2, #32
 800544a:	4013      	ands	r3, r2
 800544c:	2b20      	cmp	r3, #32
 800544e:	d10f      	bne.n	8005470 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	4013      	ands	r3, r2
 800545a:	2b20      	cmp	r3, #32
 800545c:	d108      	bne.n	8005470 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2221      	movs	r2, #33	; 0x21
 8005464:	4252      	negs	r2, r2
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	0018      	movs	r0, r3
 800546c:	f000 fbc4 	bl	8005bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005470:	46c0      	nop			; (mov r8, r8)
 8005472:	46bd      	mov	sp, r7
 8005474:	b002      	add	sp, #8
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2317      	movs	r3, #23
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	223c      	movs	r2, #60	; 0x3c
 8005490:	5c9b      	ldrb	r3, [r3, r2]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d101      	bne.n	800549a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005496:	2302      	movs	r3, #2
 8005498:	e0ad      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	223c      	movs	r2, #60	; 0x3c
 800549e:	2101      	movs	r1, #1
 80054a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	d100      	bne.n	80054aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80054a8:	e076      	b.n	8005598 <HAL_TIM_PWM_ConfigChannel+0x120>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	d900      	bls.n	80054b2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80054b0:	e095      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x166>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d04e      	beq.n	8005556 <HAL_TIM_PWM_ConfigChannel+0xde>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d900      	bls.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80054be:	e08e      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x166>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x56>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d021      	beq.n	8005510 <HAL_TIM_PWM_ConfigChannel+0x98>
 80054cc:	e087      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	0011      	movs	r1, r2
 80054d6:	0018      	movs	r0, r3
 80054d8:	f000 f934 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2108      	movs	r1, #8
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2104      	movs	r1, #4
 80054f8:	438a      	bics	r2, r1
 80054fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6999      	ldr	r1, [r3, #24]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	619a      	str	r2, [r3, #24]
      break;
 800550e:	e06b      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	0011      	movs	r1, r2
 8005518:	0018      	movs	r0, r3
 800551a:	f000 f99b 	bl	8005854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2180      	movs	r1, #128	; 0x80
 800552a:	0109      	lsls	r1, r1, #4
 800552c:	430a      	orrs	r2, r1
 800552e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4931      	ldr	r1, [pc, #196]	; (8005600 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800553c:	400a      	ands	r2, r1
 800553e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6999      	ldr	r1, [r3, #24]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	021a      	lsls	r2, r3, #8
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	619a      	str	r2, [r3, #24]
      break;
 8005554:	e048      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0011      	movs	r1, r2
 800555e:	0018      	movs	r0, r3
 8005560:	f000 f9fc 	bl	800595c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2108      	movs	r1, #8
 8005570:	430a      	orrs	r2, r1
 8005572:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2104      	movs	r1, #4
 8005580:	438a      	bics	r2, r1
 8005582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69d9      	ldr	r1, [r3, #28]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	61da      	str	r2, [r3, #28]
      break;
 8005596:	e027      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	0011      	movs	r1, r2
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 fa61 	bl	8005a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	0109      	lsls	r1, r1, #4
 80055b4:	430a      	orrs	r2, r1
 80055b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69da      	ldr	r2, [r3, #28]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	490f      	ldr	r1, [pc, #60]	; (8005600 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80055c4:	400a      	ands	r2, r1
 80055c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69d9      	ldr	r1, [r3, #28]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	61da      	str	r2, [r3, #28]
      break;
 80055dc:	e004      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80055de:	2317      	movs	r3, #23
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]
      break;
 80055e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	223c      	movs	r2, #60	; 0x3c
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

  return status;
 80055f0:	2317      	movs	r3, #23
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	781b      	ldrb	r3, [r3, #0]
}
 80055f6:	0018      	movs	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	b006      	add	sp, #24
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	fffffbff 	.word	0xfffffbff

08005604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560c:	46c0      	nop			; (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b002      	add	sp, #8
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}

08005644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a34      	ldr	r2, [pc, #208]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d008      	beq.n	800566e <TIM_Base_SetConfig+0x2a>
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	05db      	lsls	r3, r3, #23
 8005662:	429a      	cmp	r2, r3
 8005664:	d003      	beq.n	800566e <TIM_Base_SetConfig+0x2a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a30      	ldr	r2, [pc, #192]	; (800572c <TIM_Base_SetConfig+0xe8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d108      	bne.n	8005680 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2270      	movs	r2, #112	; 0x70
 8005672:	4393      	bics	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a29      	ldr	r2, [pc, #164]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	05db      	lsls	r3, r3, #23
 800568e:	429a      	cmp	r2, r3
 8005690:	d013      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a25      	ldr	r2, [pc, #148]	; (800572c <TIM_Base_SetConfig+0xe8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <TIM_Base_SetConfig+0xec>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <TIM_Base_SetConfig+0xf0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a22      	ldr	r2, [pc, #136]	; (8005738 <TIM_Base_SetConfig+0xf4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x76>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a21      	ldr	r2, [pc, #132]	; (800573c <TIM_Base_SetConfig+0xf8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a20      	ldr	r2, [pc, #128]	; (8005740 <TIM_Base_SetConfig+0xfc>)
 80056be:	4013      	ands	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	4393      	bics	r3, r2
 80056d2:	001a      	movs	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a0c      	ldr	r2, [pc, #48]	; (8005728 <TIM_Base_SetConfig+0xe4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0xce>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <TIM_Base_SetConfig+0xf0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0xce>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a0c      	ldr	r2, [pc, #48]	; (8005738 <TIM_Base_SetConfig+0xf4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0xce>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a0b      	ldr	r2, [pc, #44]	; (800573c <TIM_Base_SetConfig+0xf8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d103      	bne.n	800571a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	615a      	str	r2, [r3, #20]
}
 8005720:	46c0      	nop			; (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b004      	add	sp, #16
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	40002000 	.word	0x40002000
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800
 8005740:	fffffcff 	.word	0xfffffcff

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	2201      	movs	r2, #1
 8005754:	4393      	bics	r3, r2
 8005756:	001a      	movs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2270      	movs	r2, #112	; 0x70
 8005772:	4393      	bics	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2203      	movs	r2, #3
 800577a:	4393      	bics	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2202      	movs	r2, #2
 800578c:	4393      	bics	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a27      	ldr	r2, [pc, #156]	; (800583c <TIM_OC1_SetConfig+0xf8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00b      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <TIM_OC1_SetConfig+0xfc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a25      	ldr	r2, [pc, #148]	; (8005844 <TIM_OC1_SetConfig+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_OC1_SetConfig+0x76>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a24      	ldr	r2, [pc, #144]	; (8005848 <TIM_OC1_SetConfig+0x104>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10c      	bne.n	80057d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2208      	movs	r2, #8
 80057be:	4393      	bics	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2204      	movs	r2, #4
 80057d0:	4393      	bics	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <TIM_OC1_SetConfig+0xf8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <TIM_OC1_SetConfig+0xfc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <TIM_OC1_SetConfig+0x100>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC1_SetConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a16      	ldr	r2, [pc, #88]	; (8005848 <TIM_OC1_SetConfig+0x104>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d111      	bne.n	8005818 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <TIM_OC1_SetConfig+0x108>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4a14      	ldr	r2, [pc, #80]	; (8005850 <TIM_OC1_SetConfig+0x10c>)
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	46bd      	mov	sp, r7
 8005836:	b006      	add	sp, #24
 8005838:	bd80      	pop	{r7, pc}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40014400 	.word	0x40014400
 8005848:	40014800 	.word	0x40014800
 800584c:	fffffeff 	.word	0xfffffeff
 8005850:	fffffdff 	.word	0xfffffdff

08005854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	2210      	movs	r2, #16
 8005864:	4393      	bics	r3, r2
 8005866:	001a      	movs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4a2e      	ldr	r2, [pc, #184]	; (800593c <TIM_OC2_SetConfig+0xe8>)
 8005882:	4013      	ands	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <TIM_OC2_SetConfig+0xec>)
 800588a:	4013      	ands	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2220      	movs	r2, #32
 800589e:	4393      	bics	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a24      	ldr	r2, [pc, #144]	; (8005944 <TIM_OC2_SetConfig+0xf0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2280      	movs	r2, #128	; 0x80
 80058ba:	4393      	bics	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2240      	movs	r2, #64	; 0x40
 80058ce:	4393      	bics	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <TIM_OC2_SetConfig+0xf0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <TIM_OC2_SetConfig+0xf4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a19      	ldr	r2, [pc, #100]	; (800594c <TIM_OC2_SetConfig+0xf8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC2_SetConfig+0x9e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a18      	ldr	r2, [pc, #96]	; (8005950 <TIM_OC2_SetConfig+0xfc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <TIM_OC2_SetConfig+0x100>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4a16      	ldr	r2, [pc, #88]	; (8005958 <TIM_OC2_SetConfig+0x104>)
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b006      	add	sp, #24
 800593a:	bd80      	pop	{r7, pc}
 800593c:	ffff8fff 	.word	0xffff8fff
 8005940:	fffffcff 	.word	0xfffffcff
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	fffffbff 	.word	0xfffffbff
 8005958:	fffff7ff 	.word	0xfffff7ff

0800595c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	4a35      	ldr	r2, [pc, #212]	; (8005a40 <TIM_OC3_SetConfig+0xe4>)
 800596c:	401a      	ands	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2270      	movs	r2, #112	; 0x70
 8005988:	4393      	bics	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2203      	movs	r2, #3
 8005990:	4393      	bics	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <TIM_OC3_SetConfig+0xe8>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <TIM_OC3_SetConfig+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10d      	bne.n	80059d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <TIM_OC3_SetConfig+0xf0>)
 80059be:	4013      	ands	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <TIM_OC3_SetConfig+0xf4>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <TIM_OC3_SetConfig+0xec>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <TIM_OC3_SetConfig+0xf8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <TIM_OC3_SetConfig+0xfc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC3_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <TIM_OC3_SetConfig+0x100>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d113      	bne.n	8005a1e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <TIM_OC3_SetConfig+0x104>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <TIM_OC3_SetConfig+0x108>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b006      	add	sp, #24
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	fffffeff 	.word	0xfffffeff
 8005a44:	fffffdff 	.word	0xfffffdff
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	fffff7ff 	.word	0xfffff7ff
 8005a50:	fffffbff 	.word	0xfffffbff
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	ffffefff 	.word	0xffffefff
 8005a64:	ffffdfff 	.word	0xffffdfff

08005a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_OC4_SetConfig+0xb0>)
 8005a78:	401a      	ands	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <TIM_OC4_SetConfig+0xb4>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC4_SetConfig+0xb8>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <TIM_OC4_SetConfig+0xbc>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	031b      	lsls	r3, r3, #12
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <TIM_OC4_SetConfig+0xc0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <TIM_OC4_SetConfig+0xc4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	; (8005b30 <TIM_OC4_SetConfig+0xc8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC4_SetConfig+0x78>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <TIM_OC4_SetConfig+0xcc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d109      	bne.n	8005af4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <TIM_OC4_SetConfig+0xd0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b006      	add	sp, #24
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	ffffefff 	.word	0xffffefff
 8005b1c:	ffff8fff 	.word	0xffff8fff
 8005b20:	fffffcff 	.word	0xfffffcff
 8005b24:	ffffdfff 	.word	0xffffdfff
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800
 8005b38:	ffffbfff 	.word	0xffffbfff

08005b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	223c      	movs	r2, #60	; 0x3c
 8005b4a:	5c9b      	ldrb	r3, [r3, r2]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e047      	b.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	223c      	movs	r2, #60	; 0x3c
 8005b58:	2101      	movs	r1, #1
 8005b5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	223d      	movs	r2, #61	; 0x3d
 8005b60:	2102      	movs	r1, #2
 8005b62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2270      	movs	r2, #112	; 0x70
 8005b78:	4393      	bics	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	05db      	lsls	r3, r3, #23
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a10      	ldr	r2, [pc, #64]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d10c      	bne.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2280      	movs	r2, #128	; 0x80
 8005bbc:	4393      	bics	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	223d      	movs	r2, #61	; 0x3d
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	223c      	movs	r2, #60	; 0x3c
 8005bde:	2100      	movs	r1, #0
 8005be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	0018      	movs	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b004      	add	sp, #16
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40014000 	.word	0x40014000

08005bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c00:	46c0      	nop			; (mov r8, r8)
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c10:	46c0      	nop			; (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b002      	add	sp, #8
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <USB_DisableGlobalInt+0x30>)
 8005c22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2240      	movs	r2, #64	; 0x40
 8005c28:	5a9b      	ldrh	r3, [r3, r2]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	b292      	uxth	r2, r2
 8005c30:	43d2      	mvns	r2, r2
 8005c32:	b292      	uxth	r2, r2
 8005c34:	4013      	ands	r3, r2
 8005c36:	b299      	uxth	r1, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2240      	movs	r2, #64	; 0x40
 8005c3c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	0018      	movs	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b004      	add	sp, #16
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	0000bf80 	.word	0x0000bf80

08005c4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	b590      	push	{r4, r7, lr}
 8005c50:	46c6      	mov	lr, r8
 8005c52:	b500      	push	{lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	2004      	movs	r0, #4
 8005c5c:	2410      	movs	r4, #16
 8005c5e:	46a4      	mov	ip, r4
 8005c60:	2408      	movs	r4, #8
 8005c62:	46a0      	mov	r8, r4
 8005c64:	44b8      	add	r8, r7
 8005c66:	44c4      	add	ip, r8
 8005c68:	4460      	add	r0, ip
 8005c6a:	6001      	str	r1, [r0, #0]
 8005c6c:	6042      	str	r2, [r0, #4]
 8005c6e:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2240      	movs	r2, #64	; 0x40
 8005c74:	2101      	movs	r1, #1
 8005c76:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2240      	movs	r2, #64	; 0x40
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2244      	movs	r2, #68	; 0x44
 8005c84:	2100      	movs	r1, #0
 8005c86:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2250      	movs	r2, #80	; 0x50
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	0018      	movs	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b002      	add	sp, #8
 8005c98:	bc80      	pop	{r7}
 8005c9a:	46b8      	mov	r8, r7
 8005c9c:	bc90      	pop	{r4, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	b004      	add	sp, #16
 8005ca2:	4718      	bx	r3

08005ca4 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>:
namespace SolarGators {
namespace DataModules {

class DataModule {
public:
  DataModule(uint32_t id, uint32_t size, bool is_ext_id = false):
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	001a      	movs	r2, r3
 8005cb2:	1cfb      	adds	r3, r7, #3
 8005cb4:	701a      	strb	r2, [r3, #0]
    id_(id), size_(size), is_ext_id_(false)
 8005cb6:	4a13      	ldr	r2, [pc, #76]	; (8005d04 <_ZN11SolarGators11DataModules10DataModuleC1Emmb+0x60>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	731a      	strb	r2, [r3, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	; (8005d08 <_ZN11SolarGators11DataModules10DataModuleC1Emmb+0x64>)
 8005cd2:	665a      	str	r2, [r3, #100]	; 0x64
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	669a      	str	r2, [r3, #104]	; 0x68
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	001a      	movs	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	66da      	str	r2, [r3, #108]	; 0x6c
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2250      	movs	r2, #80	; 0x50
 8005ce8:	671a      	str	r2, [r3, #112]	; 0x70
  {
    mutex_id_ = osMutexNew(&mutex_attributes_);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3364      	adds	r3, #100	; 0x64
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f003 fa44 	bl	800917c <osMutexNew>
 8005cf4:	0002      	movs	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	611a      	str	r2, [r3, #16]
  };
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b004      	add	sp, #16
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	0800d648 	.word	0x0800d648
 8005d08:	0800d43c 	.word	0x0800d43c

08005d0c <_ZN11SolarGators11DataModules10DataModuleD1Ev>:
  virtual ~DataModule() {};
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	4a03      	ldr	r2, [pc, #12]	; (8005d24 <_ZN11SolarGators11DataModules10DataModuleD1Ev+0x18>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b002      	add	sp, #8
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	0800d648 	.word	0x0800d648

08005d28 <_ZN11SolarGators11DataModules10DataModuleD0Ev>:
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7ff ffea 	bl	8005d0c <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2174      	movs	r1, #116	; 0x74
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f006 fd0d 	bl	800c75c <_ZdlPvj>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	0018      	movs	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b002      	add	sp, #8
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>:
#include <Mitsuba.hpp>

namespace SolarGators {
namespace DataModules {

MitsubaRequest::MitsubaRequest(uint32_t id):
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
    DataModule(id, Request_Size, true)
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f7ff ffa1 	bl	8005ca4 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 8005d62:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em+0x28>)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	601a      	str	r2, [r3, #0]
{ }
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b002      	add	sp, #8
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	0800d630 	.word	0x0800d630

08005d78 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>:

MitsubaRequest::~MitsubaRequest()
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev+0x20>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f7ff ffbf 	bl	8005d0c <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b002      	add	sp, #8
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	0800d630 	.word	0x0800d630

08005d9c <_ZN11SolarGators11DataModules14MitsubaRequestD0Ev>:
MitsubaRequest::~MitsubaRequest()
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
{ }
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	0018      	movs	r0, r3
 8005da8:	f7ff ffe6 	bl	8005d78 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2178      	movs	r1, #120	; 0x78
 8005db0:	0018      	movs	r0, r3
 8005db2:	f006 fcd3 	bl	800c75c <_ZdlPvj>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	0018      	movs	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <_ZNK11SolarGators11DataModules14MitsubaRequest11ToByteArrayEPh>:
  requestFrame1 = true;
  requestFrame2 = true;
}

void MitsubaRequest::ToByteArray(uint8_t* buff) const
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  buff[0] = 0;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame0) << 0;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	2174      	movs	r1, #116	; 0x74
 8005dd8:	5c52      	ldrb	r2, [r2, r1]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame1) << 1;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	b25a      	sxtb	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2175      	movs	r1, #117	; 0x75
 8005dec:	5c5b      	ldrb	r3, [r3, r1]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	b25b      	sxtb	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame2) << 2;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b25a      	sxtb	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2176      	movs	r1, #118	; 0x76
 8005e06:	5c5b      	ldrb	r3, [r3, r1]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	701a      	strb	r2, [r3, #0]
}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b002      	add	sp, #8
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <_ZN11SolarGators11DataModules14MitsubaRequest13FromByteArrayEPh>:
void MitsubaRequest::FromByteArray(uint8_t* buff)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  requestFrame0 = buff[0] & (1 << 0);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	001a      	movs	r2, r3
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4013      	ands	r3, r2
 8005e32:	1e5a      	subs	r2, r3, #1
 8005e34:	4193      	sbcs	r3, r2
 8005e36:	b2d9      	uxtb	r1, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2274      	movs	r2, #116	; 0x74
 8005e3c:	5499      	strb	r1, [r3, r2]
  requestFrame1 = buff[0] & (1 << 1);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	001a      	movs	r2, r3
 8005e44:	2302      	movs	r3, #2
 8005e46:	4013      	ands	r3, r2
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	4193      	sbcs	r3, r2
 8005e4c:	b2d9      	uxtb	r1, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2275      	movs	r2, #117	; 0x75
 8005e52:	5499      	strb	r1, [r3, r2]
  requestFrame2 = buff[0] & (1 << 2);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	001a      	movs	r2, r3
 8005e5a:	2304      	movs	r3, #4
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	4193      	sbcs	r3, r2
 8005e62:	b2d9      	uxtb	r1, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2276      	movs	r2, #118	; 0x76
 8005e68:	5499      	strb	r1, [r3, r2]
}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b002      	add	sp, #8
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <_ZN11SolarGators11DataModules10MitsubaRx0C1Em>:

MitsubaRx0::MitsubaRx0(uint32_t id):
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
    DataModule(id, Rx0_Size, true), battVoltage(0),battCurrent(0),
    battCurrentDir(false),motorCurrentPkAvg(0),FETtemp(0),
    motorRPM(0),PWMDuty(0),LeadAngle(0)
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	2301      	movs	r3, #1
 8005e84:	2208      	movs	r2, #8
 8005e86:	f7ff ff0d 	bl	8005ca4 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 8005e8a:	4a14      	ldr	r2, [pc, #80]	; (8005edc <_ZN11SolarGators11DataModules10MitsubaRx0C1Em+0x68>)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2274      	movs	r2, #116	; 0x74
 8005e94:	2100      	movs	r1, #0
 8005e96:	5299      	strh	r1, [r3, r2]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2276      	movs	r2, #118	; 0x76
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5299      	strh	r1, [r3, r2]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2278      	movs	r2, #120	; 0x78
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	5499      	strb	r1, [r3, r2]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	227a      	movs	r2, #122	; 0x7a
 8005eac:	2100      	movs	r1, #0
 8005eae:	5299      	strh	r1, [r3, r2]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	227c      	movs	r2, #124	; 0x7c
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	5499      	strb	r1, [r3, r2]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	227e      	movs	r2, #126	; 0x7e
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5299      	strh	r1, [r3, r2]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	5299      	strh	r1, [r3, r2]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2282      	movs	r2, #130	; 0x82
 8005ecc:	2100      	movs	r1, #0
 8005ece:	5499      	strb	r1, [r3, r2]
{ }
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b002      	add	sp, #8
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	0800d618 	.word	0x0800d618

08005ee0 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>:

MitsubaRx0::~MitsubaRx0()
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	4a05      	ldr	r2, [pc, #20]	; (8005f00 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev+0x20>)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7ff ff0b 	bl	8005d0c <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b002      	add	sp, #8
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	0800d618 	.word	0x0800d618

08005f04 <_ZN11SolarGators11DataModules10MitsubaRx0D0Ev>:
MitsubaRx0::~MitsubaRx0()
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
{ }
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7ff ffe6 	bl	8005ee0 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2184      	movs	r1, #132	; 0x84
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f006 fc1f 	bl	800c75c <_ZdlPvj>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b002      	add	sp, #8
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <_ZNK11SolarGators11DataModules10MitsubaRx017GetBatteryCurrentEv>:
uint16_t MitsubaRx0::GetBatteryVoltage() const
{
  return battVoltage;
}
uint16_t MitsubaRx0::GetBatteryCurrent() const
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  return battCurrent;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2276      	movs	r2, #118	; 0x76
 8005f34:	5a9b      	ldrh	r3, [r3, r2]
}
 8005f36:	0018      	movs	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>:
uint8_t MitsubaRx0::GetFetTemp() const
{
  return FETtemp;
}
uint16_t MitsubaRx0::GetMotorRPM() const
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  return motorRPM;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	227e      	movs	r2, #126	; 0x7e
 8005f4a:	5a9b      	ldrh	r3, [r3, r2]
}
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b002      	add	sp, #8
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <_ZNK11SolarGators11DataModules10MitsubaRx011ToByteArrayEPh>:
{
  return LeadAngle;
}
// Converter Functions
void MitsubaRx0::ToByteArray(uint8_t* buff) const
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]

  buff[0] = 0;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battVoltage);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2174      	movs	r1, #116	; 0x74
 8005f6c:	5a5b      	ldrh	r3, [r3, r1]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	4313      	orrs	r3, r2
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	701a      	strb	r2, [r3, #0]

  buff[1] = 0;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(battVoltage >> 8);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	7819      	ldrb	r1, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2274      	movs	r2, #116	; 0x74
 8005f8a:	5a9b      	ldrh	r3, [r3, r2]
 8005f8c:	121b      	asrs	r3, r3, #8
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	430a      	orrs	r2, r1
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrent) << 2);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	7819      	ldrb	r1, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2276      	movs	r2, #118	; 0x76
 8005fa4:	5a9b      	ldrh	r3, [r3, r2]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]

  buff[2] = 0;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	3302      	adds	r3, #2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(battCurrent >> 6);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	7819      	ldrb	r1, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2276      	movs	r2, #118	; 0x76
 8005fc8:	5a9b      	ldrh	r3, [r3, r2]
 8005fca:	119b      	asrs	r3, r3, #6
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrentDir) << 3);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	3302      	adds	r3, #2
 8005fdc:	7819      	ldrb	r1, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2278      	movs	r2, #120	; 0x78
 8005fe2:	5c9b      	ldrb	r3, [r3, r2]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	3302      	adds	r3, #2
 8005fec:	430a      	orrs	r2, r1
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(motorCurrentPkAvg << 4);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	7819      	ldrb	r1, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	227a      	movs	r2, #122	; 0x7a
 8005ffc:	5a9b      	ldrh	r3, [r3, r2]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	b2da      	uxtb	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	3302      	adds	r3, #2
 8006008:	430a      	orrs	r2, r1
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

  buff[3] = 0;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	3303      	adds	r3, #3
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(motorCurrentPkAvg >> 4);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	3303      	adds	r3, #3
 800601a:	7819      	ldrb	r1, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	227a      	movs	r2, #122	; 0x7a
 8006020:	5a9b      	ldrh	r3, [r3, r2]
 8006022:	111b      	asrs	r3, r3, #4
 8006024:	b2da      	uxtb	r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	3303      	adds	r3, #3
 800602a:	430a      	orrs	r2, r1
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(static_cast<uint32_t>(FETtemp) << 6);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	3303      	adds	r3, #3
 8006034:	7819      	ldrb	r1, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	227c      	movs	r2, #124	; 0x7c
 800603a:	5c9b      	ldrb	r3, [r3, r2]
 800603c:	019b      	lsls	r3, r3, #6
 800603e:	b2da      	uxtb	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	3303      	adds	r3, #3
 8006044:	430a      	orrs	r2, r1
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]


  uint32_t convMotorRPM = motorRPM * 1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	227e      	movs	r2, #126	; 0x7e
 800604e:	5a9b      	ldrh	r3, [r3, r2]
 8006050:	60fb      	str	r3, [r7, #12]
  buff[4] = 0;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	3304      	adds	r3, #4
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
  buff[4] |= static_cast<uint8_t>(FETtemp >> 2);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	3304      	adds	r3, #4
 800605e:	7819      	ldrb	r1, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	227c      	movs	r2, #124	; 0x7c
 8006064:	5c9b      	ldrb	r3, [r3, r2]
 8006066:	109b      	asrs	r3, r3, #2
 8006068:	b2da      	uxtb	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	3304      	adds	r3, #4
 800606e:	430a      	orrs	r2, r1
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
  buff[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	3304      	adds	r3, #4
 8006078:	7819      	ldrb	r1, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	b2da      	uxtb	r2, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	3304      	adds	r3, #4
 8006086:	430a      	orrs	r2, r1
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]

  buff[5] = 0;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	3305      	adds	r3, #5
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	3305      	adds	r3, #5
 8006098:	7819      	ldrb	r1, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	227f      	movs	r2, #127	; 0x7f
 80060a2:	4013      	ands	r3, r2
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	3305      	adds	r3, #5
 80060aa:	430a      	orrs	r2, r1
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint8_t>(PWMDuty << 7));
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	3305      	adds	r3, #5
 80060b4:	7819      	ldrb	r1, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	5a9b      	ldrh	r3, [r3, r2]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	01db      	lsls	r3, r3, #7
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	3305      	adds	r3, #5
 80060c6:	430a      	orrs	r2, r1
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]

  buff[6] = 0;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	3306      	adds	r3, #6
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
  buff[6] |= static_cast<uint8_t>(PWMDuty >> 1);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	3306      	adds	r3, #6
 80060d8:	7819      	ldrb	r1, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2280      	movs	r2, #128	; 0x80
 80060de:	5a9b      	ldrh	r3, [r3, r2]
 80060e0:	105b      	asrs	r3, r3, #1
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	3306      	adds	r3, #6
 80060e8:	430a      	orrs	r2, r1
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

  buff[7] = 0;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	3307      	adds	r3, #7
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(PWMDuty >> 9);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	3307      	adds	r3, #7
 80060fa:	7819      	ldrb	r1, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2280      	movs	r2, #128	; 0x80
 8006100:	5a9b      	ldrh	r3, [r3, r2]
 8006102:	125b      	asrs	r3, r3, #9
 8006104:	b2da      	uxtb	r2, r3
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	3307      	adds	r3, #7
 800610a:	430a      	orrs	r2, r1
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(static_cast<uint32_t>(LeadAngle) << 1);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	3307      	adds	r3, #7
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2282      	movs	r2, #130	; 0x82
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	18db      	adds	r3, r3, r3
 800611e:	b2da      	uxtb	r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	3307      	adds	r3, #7
 8006124:	430a      	orrs	r2, r1
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	b004      	add	sp, #16
 8006130:	bd80      	pop	{r7, pc}

08006132 <_ZN11SolarGators11DataModules10MitsubaRx013FromByteArrayEPh>:

void MitsubaRx0::FromByteArray(uint8_t* buff)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b088      	sub	sp, #32
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
  uint32_t preBattVoltage = (static_cast<uint32_t>(buff[1] & 3) << 8) | (buff[0]);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	23c0      	movs	r3, #192	; 0xc0
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4013      	ands	r3, r2
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	4313      	orrs	r3, r2
 8006150:	61fb      	str	r3, [r7, #28]
  battVoltage = static_cast<uint16_t>(preBattVoltage);
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	b299      	uxth	r1, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2274      	movs	r2, #116	; 0x74
 800615a:	5299      	strh	r1, [r3, r2]

  uint32_t preBattCurrent = (static_cast<uint32_t>(buff[2] & 7) << 6) | (buff[1] >> 2);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	3302      	adds	r3, #2
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	019a      	lsls	r2, r3, #6
 8006164:	23e0      	movs	r3, #224	; 0xe0
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4013      	ands	r3, r2
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	3201      	adds	r2, #1
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	1092      	asrs	r2, r2, #2
 8006172:	4313      	orrs	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
  battCurrent = static_cast<uint16_t>(preBattCurrent);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	b299      	uxth	r1, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2276      	movs	r2, #118	; 0x76
 800617e:	5299      	strh	r1, [r3, r2]

  battCurrentDir = static_cast<bool>(buff[2] & 8);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	3302      	adds	r3, #2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	001a      	movs	r2, r3
 8006188:	2308      	movs	r3, #8
 800618a:	4013      	ands	r3, r2
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	4193      	sbcs	r3, r2
 8006190:	b2d9      	uxtb	r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2278      	movs	r2, #120	; 0x78
 8006196:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorCurrent = static_cast<uint32_t>((buff[3] & 0x3F) << 4) | (buff[2] >> 4);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	3303      	adds	r3, #3
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	001a      	movs	r2, r3
 80061a2:	23fc      	movs	r3, #252	; 0xfc
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4013      	ands	r3, r2
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	3202      	adds	r2, #2
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	1112      	asrs	r2, r2, #4
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
  motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	b299      	uxth	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	227a      	movs	r2, #122	; 0x7a
 80061bc:	5299      	strh	r1, [r3, r2]

  uint32_t preFETtemp = static_cast<uint32_t>((buff[4] & 7) << 2) | (buff[3] >> 6);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	3304      	adds	r3, #4
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	001a      	movs	r2, r3
 80061c8:	231c      	movs	r3, #28
 80061ca:	4013      	ands	r3, r2
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	3203      	adds	r2, #3
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	1192      	asrs	r2, r2, #6
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
  FETtemp = static_cast<uint8_t>(preFETtemp);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	b2d9      	uxtb	r1, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	227c      	movs	r2, #124	; 0x7c
 80061e0:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorRPM = (static_cast<uint32_t>(buff[5] & 0x7F) << 5) | (buff[4] >> 3);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	3305      	adds	r3, #5
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	23fe      	movs	r3, #254	; 0xfe
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	4013      	ands	r3, r2
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	3204      	adds	r2, #4
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	10d2      	asrs	r2, r2, #3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  motorRPM = static_cast<uint16_t>(preMotorRPM);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	b299      	uxth	r1, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	227e      	movs	r2, #126	; 0x7e
 8006204:	5299      	strh	r1, [r3, r2]

  uint32_t preDuty = (static_cast<uint32_t>(buff[7] & 1) << 9) | (buff[6] << 1) | (buff[5] >> 7);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	3307      	adds	r3, #7
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	025a      	lsls	r2, r3, #9
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4013      	ands	r3, r2
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	3206      	adds	r2, #6
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	0052      	lsls	r2, r2, #1
 800621c:	4313      	orrs	r3, r2
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	3205      	adds	r2, #5
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	11d2      	asrs	r2, r2, #7
 8006226:	4313      	orrs	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]
  PWMDuty = static_cast<uint16_t>(preDuty);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	b299      	uxth	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2280      	movs	r2, #128	; 0x80
 8006232:	5299      	strh	r1, [r3, r2]

  LeadAngle = static_cast<uint8_t>((buff[7] >> 1));
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	3307      	adds	r3, #7
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	105b      	asrs	r3, r3, #1
 800623c:	b2d9      	uxtb	r1, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2282      	movs	r2, #130	; 0x82
 8006242:	5499      	strb	r1, [r3, r2]
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	46bd      	mov	sp, r7
 8006248:	b008      	add	sp, #32
 800624a:	bd80      	pop	{r7, pc}

0800624c <_ZN11SolarGators11DataModules8OrionBMSC1Em>:

#include "OrionBMS.hpp"

namespace SolarGators::DataModules
{
  OrionBMS::OrionBMS(uint32_t id):
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
      DataModule(id, Size)
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	2208      	movs	r2, #8
 800625e:	f7ff fd21 	bl	8005ca4 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 8006262:	4a04      	ldr	r2, [pc, #16]	; (8006274 <_ZN11SolarGators11DataModules8OrionBMSC1Em+0x28>)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
  { }
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	46bd      	mov	sp, r7
 800626e:	b002      	add	sp, #8
 8006270:	bd80      	pop	{r7, pc}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	0800d660 	.word	0x0800d660

08006278 <_ZN11SolarGators11DataModules8OrionBMSD1Ev>:

  OrionBMS::~OrionBMS()
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	4a05      	ldr	r2, [pc, #20]	; (8006298 <_ZN11SolarGators11DataModules8OrionBMSD1Ev+0x20>)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f7ff fd3f 	bl	8005d0c <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  { }
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0018      	movs	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	b002      	add	sp, #8
 8006296:	bd80      	pop	{r7, pc}
 8006298:	0800d660 	.word	0x0800d660

0800629c <_ZN11SolarGators11DataModules8OrionBMSD0Ev>:
  OrionBMS::~OrionBMS()
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  { }
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f7ff ffe6 	bl	8006278 <_ZN11SolarGators11DataModules8OrionBMSD1Ev>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2184      	movs	r1, #132	; 0x84
 80062b0:	0018      	movs	r0, r3
 80062b2:	f006 fa53 	bl	800c75c <_ZdlPvj>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0018      	movs	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b002      	add	sp, #8
 80062be:	bd80      	pop	{r7, pc}

080062c0 <_ZN11SolarGators11DataModules8OrionBMS14GetPackVoltageEv>:
  float OrionBMS::GetAvgCellVoltage()
  {
    return avgCellVoltage;
  }
  float OrionBMS::GetPackVoltage()
  {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
    return packSummedVoltage;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2280      	movs	r2, #128	; 0x80
 80062cc:	589b      	ldr	r3, [r3, r2]
  }
 80062ce:	1c18      	adds	r0, r3, #0
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b002      	add	sp, #8
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh>:
  {
    // TODO: Add this to BMS packet
    return 0;
  }
  void OrionBMS::ToByteArray(uint8_t* buff) const
  {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
    float convLowCellVoltage = lowCellVoltage * 10000;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e6:	4933      	ldr	r1, [pc, #204]	; (80063b4 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 80062e8:	1c18      	adds	r0, r3, #0
 80062ea:	f7fa f8c7 	bl	800047c <__aeabi_fmul>
 80062ee:	1c03      	adds	r3, r0, #0
 80062f0:	617b      	str	r3, [r7, #20]
    float convHighCellVoltage = highCellVoltage * 10000;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f6:	492f      	ldr	r1, [pc, #188]	; (80063b4 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 80062f8:	1c18      	adds	r0, r3, #0
 80062fa:	f7fa f8bf 	bl	800047c <__aeabi_fmul>
 80062fe:	1c03      	adds	r3, r0, #0
 8006300:	613b      	str	r3, [r7, #16]
    float convAvgCellVoltage = avgCellVoltage * 10000;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006306:	492b      	ldr	r1, [pc, #172]	; (80063b4 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 8006308:	1c18      	adds	r0, r3, #0
 800630a:	f7fa f8b7 	bl	800047c <__aeabi_fmul>
 800630e:	1c03      	adds	r3, r0, #0
 8006310:	60fb      	str	r3, [r7, #12]
    float convPackSummedVoltage = packSummedVoltage * 1000;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2280      	movs	r2, #128	; 0x80
 8006316:	589b      	ldr	r3, [r3, r2]
 8006318:	4927      	ldr	r1, [pc, #156]	; (80063b8 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xe0>)
 800631a:	1c18      	adds	r0, r3, #0
 800631c:	f7fa f8ae 	bl	800047c <__aeabi_fmul>
 8006320:	1c03      	adds	r3, r0, #0
 8006322:	60bb      	str	r3, [r7, #8]

    buff[0] = static_cast<uint32_t>(convLowCellVoltage) & 0xFF;
 8006324:	6978      	ldr	r0, [r7, #20]
 8006326:	f7f9 ff85 	bl	8000234 <__aeabi_f2uiz>
 800632a:	0003      	movs	r3, r0
 800632c:	b2da      	uxtb	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	701a      	strb	r2, [r3, #0]
    buff[1] = (static_cast<uint32_t>(convLowCellVoltage) >> 8) & 0xFF;
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f7f9 ff7e 	bl	8000234 <__aeabi_f2uiz>
 8006338:	0003      	movs	r3, r0
 800633a:	0a1a      	lsrs	r2, r3, #8
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
    buff[2] = static_cast<uint32_t>(convHighCellVoltage) & 0xFF;
 8006344:	6938      	ldr	r0, [r7, #16]
 8006346:	f7f9 ff75 	bl	8000234 <__aeabi_f2uiz>
 800634a:	0002      	movs	r2, r0
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	3302      	adds	r3, #2
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
    buff[3] = (static_cast<uint32_t>(convHighCellVoltage) >> 8) & 0xFF;
 8006354:	6938      	ldr	r0, [r7, #16]
 8006356:	f7f9 ff6d 	bl	8000234 <__aeabi_f2uiz>
 800635a:	0003      	movs	r3, r0
 800635c:	0a1a      	lsrs	r2, r3, #8
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	3303      	adds	r3, #3
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
    buff[4] = static_cast<uint32_t>(convAvgCellVoltage) & 0xFF;
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7f9 ff64 	bl	8000234 <__aeabi_f2uiz>
 800636c:	0002      	movs	r2, r0
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	3304      	adds	r3, #4
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
    buff[5] = (static_cast<uint32_t>(convAvgCellVoltage) >> 8) & 0xFF;
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7f9 ff5c 	bl	8000234 <__aeabi_f2uiz>
 800637c:	0003      	movs	r3, r0
 800637e:	0a1a      	lsrs	r2, r3, #8
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	3305      	adds	r3, #5
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]
    buff[6] = static_cast<uint32_t>(convPackSummedVoltage) & 0xFF;
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	f7f9 ff53 	bl	8000234 <__aeabi_f2uiz>
 800638e:	0002      	movs	r2, r0
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	3306      	adds	r3, #6
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
    buff[7] = (static_cast<uint32_t>(convPackSummedVoltage) >> 8) & 0xFF;
 8006398:	68b8      	ldr	r0, [r7, #8]
 800639a:	f7f9 ff4b 	bl	8000234 <__aeabi_f2uiz>
 800639e:	0003      	movs	r3, r0
 80063a0:	0a1a      	lsrs	r2, r3, #8
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	3307      	adds	r3, #7
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]
  }
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b006      	add	sp, #24
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	461c4000 	.word	0x461c4000
 80063b8:	447a0000 	.word	0x447a0000

080063bc <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh>:

  void OrionBMS::FromByteArray(uint8_t* buff)
  {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
    uint32_t preLCV = (static_cast<uint32_t>(buff[1]) << 8) | buff[0];
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	7812      	ldrb	r2, [r2, #0]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    uint32_t preHCV = (static_cast<uint32_t>(buff[3]) << 8) | buff[2];
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	3303      	adds	r3, #3
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	3202      	adds	r2, #2
 80063e2:	7812      	ldrb	r2, [r2, #0]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
    uint32_t preACV = (static_cast<uint32_t>(buff[5]) << 8) | buff[4];
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	3305      	adds	r3, #5
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	3204      	adds	r2, #4
 80063f4:	7812      	ldrb	r2, [r2, #0]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
    uint32_t prePCV = (static_cast<uint32_t>(buff[7]) << 8) | buff[6];
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	3307      	adds	r3, #7
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	3206      	adds	r2, #6
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	4313      	orrs	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]
    lowCellVoltage = static_cast<float>(preLCV)/10000;
 800640c:	6978      	ldr	r0, [r7, #20]
 800640e:	f7fa fb37 	bl	8000a80 <__aeabi_ui2f>
 8006412:	1c03      	adds	r3, r0, #0
 8006414:	4918      	ldr	r1, [pc, #96]	; (8006478 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 8006416:	1c18      	adds	r0, r3, #0
 8006418:	f7f9 ff24 	bl	8000264 <__aeabi_fdiv>
 800641c:	1c03      	adds	r3, r0, #0
 800641e:	1c1a      	adds	r2, r3, #0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	675a      	str	r2, [r3, #116]	; 0x74
    highCellVoltage = static_cast<float>(preHCV)/10000;
 8006424:	6938      	ldr	r0, [r7, #16]
 8006426:	f7fa fb2b 	bl	8000a80 <__aeabi_ui2f>
 800642a:	1c03      	adds	r3, r0, #0
 800642c:	4912      	ldr	r1, [pc, #72]	; (8006478 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 800642e:	1c18      	adds	r0, r3, #0
 8006430:	f7f9 ff18 	bl	8000264 <__aeabi_fdiv>
 8006434:	1c03      	adds	r3, r0, #0
 8006436:	1c1a      	adds	r2, r3, #0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	679a      	str	r2, [r3, #120]	; 0x78
    avgCellVoltage = static_cast<float>(preACV)/10000;
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7fa fb1f 	bl	8000a80 <__aeabi_ui2f>
 8006442:	1c03      	adds	r3, r0, #0
 8006444:	490c      	ldr	r1, [pc, #48]	; (8006478 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 8006446:	1c18      	adds	r0, r3, #0
 8006448:	f7f9 ff0c 	bl	8000264 <__aeabi_fdiv>
 800644c:	1c03      	adds	r3, r0, #0
 800644e:	1c1a      	adds	r2, r3, #0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c
    //TODO: figure out whether this should be 1000 or 100
    packSummedVoltage = static_cast<float>(prePCV)/1000;
 8006454:	68b8      	ldr	r0, [r7, #8]
 8006456:	f7fa fb13 	bl	8000a80 <__aeabi_ui2f>
 800645a:	1c03      	adds	r3, r0, #0
 800645c:	4907      	ldr	r1, [pc, #28]	; (800647c <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xc0>)
 800645e:	1c18      	adds	r0, r3, #0
 8006460:	f7f9 ff00 	bl	8000264 <__aeabi_fdiv>
 8006464:	1c03      	adds	r3, r0, #0
 8006466:	1c19      	adds	r1, r3, #0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2280      	movs	r2, #128	; 0x80
 800646c:	5099      	str	r1, [r3, r2]
  }
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	46bd      	mov	sp, r7
 8006472:	b006      	add	sp, #24
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	461c4000 	.word	0x461c4000
 800647c:	447a0000 	.word	0x447a0000

08006480 <_ZN11SolarGators11DataModules8SteeringC1Ev>:
  static constexpr uint32_t ID = 0x1234;
  static constexpr uint32_t SIZE = 0x2;
}
namespace SolarGators::DataModules
{
  Steering::Steering():
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
    cruise_enable_(false),
    eco_enable_(true),
    headlights_(false),
    horn_(false),
    reverse_(false),
    cruise_speed_(Min_Cruise_Speed_)
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	491a      	ldr	r1, [pc, #104]	; (80064f4 <_ZN11SolarGators11DataModules8SteeringC1Ev+0x74>)
 800648c:	2300      	movs	r3, #0
 800648e:	2202      	movs	r2, #2
 8006490:	f7ff fc08 	bl	8005ca4 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 8006494:	4a18      	ldr	r2, [pc, #96]	; (80064f8 <_ZN11SolarGators11DataModules8SteeringC1Ev+0x78>)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2274      	movs	r2, #116	; 0x74
 800649e:	2100      	movs	r1, #0
 80064a0:	5499      	strb	r1, [r3, r2]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2275      	movs	r2, #117	; 0x75
 80064a6:	2100      	movs	r1, #0
 80064a8:	5499      	strb	r1, [r3, r2]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2276      	movs	r2, #118	; 0x76
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2277      	movs	r2, #119	; 0x77
 80064b6:	2100      	movs	r1, #0
 80064b8:	5499      	strb	r1, [r3, r2]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2278      	movs	r2, #120	; 0x78
 80064be:	2100      	movs	r1, #0
 80064c0:	5499      	strb	r1, [r3, r2]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2279      	movs	r2, #121	; 0x79
 80064c6:	2101      	movs	r1, #1
 80064c8:	5499      	strb	r1, [r3, r2]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	227a      	movs	r2, #122	; 0x7a
 80064ce:	2100      	movs	r1, #0
 80064d0:	5499      	strb	r1, [r3, r2]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	227b      	movs	r2, #123	; 0x7b
 80064d6:	2100      	movs	r1, #0
 80064d8:	5499      	strb	r1, [r3, r2]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	227c      	movs	r2, #124	; 0x7c
 80064de:	2100      	movs	r1, #0
 80064e0:	5499      	strb	r1, [r3, r2]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	227d      	movs	r2, #125	; 0x7d
 80064e6:	2100      	movs	r1, #0
 80064e8:	5499      	strb	r1, [r3, r2]
  {}
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	b002      	add	sp, #8
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	00001234 	.word	0x00001234
 80064f8:	0800d678 	.word	0x0800d678

080064fc <_ZN11SolarGators11DataModules8SteeringD1Ev>:
  Steering::~Steering()
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	4a05      	ldr	r2, [pc, #20]	; (800651c <_ZN11SolarGators11DataModules8SteeringD1Ev+0x20>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0018      	movs	r0, r3
 800650e:	f7ff fbfd 	bl	8005d0c <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  {}
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	0018      	movs	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	b002      	add	sp, #8
 800651a:	bd80      	pop	{r7, pc}
 800651c:	0800d678 	.word	0x0800d678

08006520 <_ZN11SolarGators11DataModules8SteeringD0Ev>:
  Steering::~Steering()
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  {}
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0018      	movs	r0, r3
 800652c:	f7ff ffe6 	bl	80064fc <_ZN11SolarGators11DataModules8SteeringD1Ev>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	0018      	movs	r0, r3
 8006536:	f006 f911 	bl	800c75c <_ZdlPvj>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0018      	movs	r0, r3
 800653e:	46bd      	mov	sp, r7
 8006540:	b002      	add	sp, #8
 8006542:	bd80      	pop	{r7, pc}

08006544 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>:
  bool Steering::GetLeftTurnStatus() const
  {
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
    return left_turn_;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2274      	movs	r2, #116	; 0x74
 8006550:	5c9b      	ldrb	r3, [r3, r2]
  }
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b002      	add	sp, #8
 8006558:	bd80      	pop	{r7, pc}

0800655a <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>:
  bool Steering::GetRightTurnStatus() const
  {
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
    return right_turn_;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2275      	movs	r2, #117	; 0x75
 8006566:	5c9b      	ldrb	r3, [r3, r2]
  }
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}

08006570 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>:
  bool Steering::GetHazardsStatus() const
  {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
    return hazards_;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2276      	movs	r2, #118	; 0x76
 800657c:	5c9b      	ldrb	r3, [r3, r2]
  }
 800657e:	0018      	movs	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	b002      	add	sp, #8
 8006584:	bd80      	pop	{r7, pc}

08006586 <_ZNK11SolarGators11DataModules8Steering11ToByteArrayEPh>:
  uint8_t Steering::GetCruiseSpeed() const
  {
    return cruise_speed_;
  }
  void Steering::ToByteArray(uint8_t* buff) const
  {
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
    buff[0] = (static_cast<uint8_t>(left_turn_)     << 0);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2274      	movs	r2, #116	; 0x74
 8006594:	5c9b      	ldrb	r3, [r3, r2]
 8006596:	001a      	movs	r2, r3
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(right_turn_)    << 1);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2275      	movs	r2, #117	; 0x75
 80065a0:	5c9b      	ldrb	r3, [r3, r2]
 80065a2:	18db      	adds	r3, r3, r3
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(hazards_)       << 2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2276      	movs	r2, #118	; 0x76
 80065ae:	5c9b      	ldrb	r3, [r3, r2]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(bps_fault_)     << 3);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2277      	movs	r2, #119	; 0x77
 80065bc:	5c9b      	ldrb	r3, [r3, r2]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(cruise_enable_) << 4);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2278      	movs	r2, #120	; 0x78
 80065ca:	5c9b      	ldrb	r3, [r3, r2]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(eco_enable_)    << 5);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2279      	movs	r2, #121	; 0x79
 80065d8:	5c9b      	ldrb	r3, [r3, r2]
 80065da:	015b      	lsls	r3, r3, #5
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(headlights_)    << 6);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	227a      	movs	r2, #122	; 0x7a
 80065e6:	5c9b      	ldrb	r3, [r3, r2]
 80065e8:	019b      	lsls	r3, r3, #6
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(horn_)          << 7);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	227b      	movs	r2, #123	; 0x7b
 80065f4:	5c9b      	ldrb	r3, [r3, r2]
 80065f6:	01db      	lsls	r3, r3, #7
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	701a      	strb	r2, [r3, #0]
    buff[1] = (static_cast<uint8_t>(reverse_)       << 0);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	227c      	movs	r2, #124	; 0x7c
 8006602:	5c9a      	ldrb	r2, [r3, r2]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	701a      	strb	r2, [r3, #0]
    buff[2] = cruise_speed_;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	3302      	adds	r3, #2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	217d      	movs	r1, #125	; 0x7d
 8006612:	5c52      	ldrb	r2, [r2, r1]
 8006614:	701a      	strb	r2, [r3, #0]
  }
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	46bd      	mov	sp, r7
 800661a:	b002      	add	sp, #8
 800661c:	bd80      	pop	{r7, pc}

0800661e <_ZN11SolarGators11DataModules8Steering13FromByteArrayEPh>:
  void Steering::FromByteArray(uint8_t* buff)
  {
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
    left_turn_      = buff[0] & (1 << 0);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	001a      	movs	r2, r3
 800662e:	2301      	movs	r3, #1
 8006630:	4013      	ands	r3, r2
 8006632:	1e5a      	subs	r2, r3, #1
 8006634:	4193      	sbcs	r3, r2
 8006636:	b2d9      	uxtb	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2274      	movs	r2, #116	; 0x74
 800663c:	5499      	strb	r1, [r3, r2]
    right_turn_     = buff[0] & (1 << 1);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	001a      	movs	r2, r3
 8006644:	2302      	movs	r3, #2
 8006646:	4013      	ands	r3, r2
 8006648:	1e5a      	subs	r2, r3, #1
 800664a:	4193      	sbcs	r3, r2
 800664c:	b2d9      	uxtb	r1, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2275      	movs	r2, #117	; 0x75
 8006652:	5499      	strb	r1, [r3, r2]
    hazards_        = buff[0] & (1 << 2);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	001a      	movs	r2, r3
 800665a:	2304      	movs	r3, #4
 800665c:	4013      	ands	r3, r2
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	4193      	sbcs	r3, r2
 8006662:	b2d9      	uxtb	r1, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2276      	movs	r2, #118	; 0x76
 8006668:	5499      	strb	r1, [r3, r2]
    bps_fault_      = buff[0] & (1 << 3);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	001a      	movs	r2, r3
 8006670:	2308      	movs	r3, #8
 8006672:	4013      	ands	r3, r2
 8006674:	1e5a      	subs	r2, r3, #1
 8006676:	4193      	sbcs	r3, r2
 8006678:	b2d9      	uxtb	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2277      	movs	r2, #119	; 0x77
 800667e:	5499      	strb	r1, [r3, r2]
    cruise_enable_  = buff[0] & (1 << 4);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	001a      	movs	r2, r3
 8006686:	2310      	movs	r3, #16
 8006688:	4013      	ands	r3, r2
 800668a:	1e5a      	subs	r2, r3, #1
 800668c:	4193      	sbcs	r3, r2
 800668e:	b2d9      	uxtb	r1, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2278      	movs	r2, #120	; 0x78
 8006694:	5499      	strb	r1, [r3, r2]
    eco_enable_     = buff[0] & (1 << 5);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	001a      	movs	r2, r3
 800669c:	2320      	movs	r3, #32
 800669e:	4013      	ands	r3, r2
 80066a0:	1e5a      	subs	r2, r3, #1
 80066a2:	4193      	sbcs	r3, r2
 80066a4:	b2d9      	uxtb	r1, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2279      	movs	r2, #121	; 0x79
 80066aa:	5499      	strb	r1, [r3, r2]
    headlights_     = buff[0] & (1 << 6);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	001a      	movs	r2, r3
 80066b2:	2340      	movs	r3, #64	; 0x40
 80066b4:	4013      	ands	r3, r2
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	4193      	sbcs	r3, r2
 80066ba:	b2d9      	uxtb	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	227a      	movs	r2, #122	; 0x7a
 80066c0:	5499      	strb	r1, [r3, r2]
    horn_           = buff[0] & (1 << 7);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	09db      	lsrs	r3, r3, #7
 80066cc:	b2d9      	uxtb	r1, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	227b      	movs	r2, #123	; 0x7b
 80066d2:	5499      	strb	r1, [r3, r2]
    reverse_        = buff[1] & (1 << 0);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	001a      	movs	r2, r3
 80066dc:	2301      	movs	r3, #1
 80066de:	4013      	ands	r3, r2
 80066e0:	1e5a      	subs	r2, r3, #1
 80066e2:	4193      	sbcs	r3, r2
 80066e4:	b2d9      	uxtb	r1, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	227c      	movs	r2, #124	; 0x7c
 80066ea:	5499      	strb	r1, [r3, r2]
    cruise_speed_   = buff[2];
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	7899      	ldrb	r1, [r3, #2]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	227d      	movs	r2, #125	; 0x7d
 80066f4:	5499      	strb	r1, [r3, r2]
  }
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b002      	add	sp, #8
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>:
namespace SolarGators {
namespace DataModules {

// TODO: Currently left turn and right turn are able to be true at the same time

  SteeringController::SteeringController()
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0018      	movs	r0, r3
 800670c:	f7ff feb8 	bl	8006480 <_ZN11SolarGators11DataModules8SteeringC1Ev>
 8006710:	4a47      	ldr	r2, [pc, #284]	; (8006830 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x130>)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	22f8      	movs	r2, #248	; 0xf8
 800671a:	189b      	adds	r3, r3, r2
 800671c:	2218      	movs	r2, #24
 800671e:	2100      	movs	r1, #0
 8006720:	0018      	movs	r0, r3
 8006722:	f006 f91c 	bl	800c95e <memset>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	21f8      	movs	r1, #248	; 0xf8
 800672a:	4a42      	ldr	r2, [pc, #264]	; (8006834 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x134>)
 800672c:	505a      	str	r2, [r3, r1]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	33a8      	adds	r3, #168	; 0xa8
 8006732:	0019      	movs	r1, r3
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	2380      	movs	r3, #128	; 0x80
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	50d1      	str	r1, [r2, r3]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	2382      	movs	r3, #130	; 0x82
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	2150      	movs	r1, #80	; 0x50
 8006744:	50d1      	str	r1, [r2, r3]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3388      	adds	r3, #136	; 0x88
 800674a:	0019      	movs	r1, r3
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	2384      	movs	r3, #132	; 0x84
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	50d1      	str	r1, [r2, r3]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	2386      	movs	r3, #134	; 0x86
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	2120      	movs	r1, #32
 800675c:	50d1      	str	r1, [r2, r3]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	23f4      	movs	r3, #244	; 0xf4
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	18d3      	adds	r3, r2, r3
 8006766:	2224      	movs	r2, #36	; 0x24
 8006768:	2100      	movs	r1, #0
 800676a:	0018      	movs	r0, r3
 800676c:	f006 f8f7 	bl	800c95e <memset>
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	23f4      	movs	r3, #244	; 0xf4
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4930      	ldr	r1, [pc, #192]	; (8006838 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x138>)
 8006778:	50d1      	str	r1, [r2, r3]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	22c5      	movs	r2, #197	; 0xc5
 800677e:	0092      	lsls	r2, r2, #2
 8006780:	1899      	adds	r1, r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	23f6      	movs	r3, #246	; 0xf6
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	50d1      	str	r1, [r2, r3]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	23f7      	movs	r3, #247	; 0xf7
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	21bc      	movs	r1, #188	; 0xbc
 8006792:	50d1      	str	r1, [r2, r3]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3315      	adds	r3, #21
 8006798:	33ff      	adds	r3, #255	; 0xff
 800679a:	0019      	movs	r1, r3
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	23f8      	movs	r3, #248	; 0xf8
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	50d1      	str	r1, [r2, r3]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	23f9      	movs	r3, #249	; 0xf9
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	0089      	lsls	r1, r1, #2
 80067ae:	50d1      	str	r1, [r2, r3]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	23fa      	movs	r3, #250	; 0xfa
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	2137      	movs	r1, #55	; 0x37
 80067b8:	50d1      	str	r1, [r2, r3]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	22fd      	movs	r2, #253	; 0xfd
 80067be:	0092      	lsls	r2, r2, #2
 80067c0:	4694      	mov	ip, r2
 80067c2:	4463      	add	r3, ip
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 faab 	bl	8006d20 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EEC1Ev>
  {
    button_handle_ = osThreadNew((osThreadFunc_t)&SteeringController::ButtonHandler, this, &button_attributes_);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	22f4      	movs	r2, #244	; 0xf4
 80067ce:	0092      	lsls	r2, r2, #2
 80067d0:	189a      	adds	r2, r3, r2
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4b19      	ldr	r3, [pc, #100]	; (800683c <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x13c>)
 80067d6:	0018      	movs	r0, r3
 80067d8:	f002 f9ee 	bl	8008bb8 <osThreadNew>
 80067dc:	0001      	movs	r1, r0
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	2388      	movs	r3, #136	; 0x88
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	50d1      	str	r1, [r2, r3]
    button_event_ = osEventFlagsNew(NULL);
 80067e6:	2000      	movs	r0, #0
 80067e8:	f002 fb90 	bl	8008f0c <osEventFlagsNew>
 80067ec:	0002      	movs	r2, r0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2180      	movs	r1, #128	; 0x80
 80067f2:	505a      	str	r2, [r3, r1]
    if (button_event_ == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	589b      	ldr	r3, [r3, r2]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x102>
    {
        Error_Handler();
 80067fe:	f7fa fd7b 	bl	80012f8 <Error_Handler>
    }
    button_queue_ = osMessageQueueNew(16, sizeof(uint16_t), &button_queue_attributes_);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	33f8      	adds	r3, #248	; 0xf8
 8006806:	001a      	movs	r2, r3
 8006808:	2102      	movs	r1, #2
 800680a:	2010      	movs	r0, #16
 800680c:	f002 fdf6 	bl	80093fc <osMessageQueueNew>
 8006810:	0002      	movs	r2, r0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2184      	movs	r1, #132	; 0x84
 8006816:	505a      	str	r2, [r3, r1]
    if (button_queue_ == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2284      	movs	r2, #132	; 0x84
 800681c:	589b      	ldr	r3, [r3, r2]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x126>
    {
        Error_Handler();
 8006822:	f7fa fd69 	bl	80012f8 <Error_Handler>
    }
  }
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	46bd      	mov	sp, r7
 800682c:	b002      	add	sp, #8
 800682e:	bd80      	pop	{r7, pc}
 8006830:	0800d690 	.word	0x0800d690
 8006834:	0800d440 	.word	0x0800d440
 8006838:	0800d450 	.word	0x0800d450
 800683c:	08006cb5 	.word	0x08006cb5

08006840 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>:

  SteeringController::~SteeringController() {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	4a0b      	ldr	r2, [pc, #44]	; (8006878 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev+0x38>)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
    osEventFlagsDelete(button_event_);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2280      	movs	r2, #128	; 0x80
 8006852:	589b      	ldr	r3, [r3, r2]
 8006854:	0018      	movs	r0, r3
 8006856:	f002 fc63 	bl	8009120 <osEventFlagsDelete>
    osMessageQueueDelete(button_queue_);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2284      	movs	r2, #132	; 0x84
 800685e:	589b      	ldr	r3, [r3, r2]
 8006860:	0018      	movs	r0, r3
 8006862:	f002 ff53 	bl	800970c <osMessageQueueDelete>
  SteeringController::~SteeringController() {
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0018      	movs	r0, r3
 800686a:	f7ff fe47 	bl	80064fc <_ZN11SolarGators11DataModules8SteeringD1Ev>
  }
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}
 8006878:	0800d690 	.word	0x0800d690

0800687c <_ZN11SolarGators11DataModules18SteeringControllerD0Ev>:
  SteeringController::~SteeringController() {
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  }
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	0018      	movs	r0, r3
 8006888:	f7ff ffda 	bl	8006840 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
 800688c:	4a05      	ldr	r2, [pc, #20]	; (80068a4 <_ZN11SolarGators11DataModules18SteeringControllerD0Ev+0x28>)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f005 ff62 	bl	800c75c <_ZdlPvj>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b002      	add	sp, #8
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	000004c4 	.word	0x000004c4

080068a8 <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>:

  void SteeringController::EnableLeftTurnSignal()
  {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2276      	movs	r2, #118	; 0x76
 80068b4:	5c9b      	ldrb	r3, [r3, r2]
 80068b6:	2201      	movs	r2, #1
 80068b8:	4053      	eors	r3, r2
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv+0x20>
      left_turn_ = true;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2274      	movs	r2, #116	; 0x74
 80068c4:	2101      	movs	r1, #1
 80068c6:	5499      	strb	r1, [r3, r2]
  }
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>:

  void SteeringController::DisableLeftTurnSignal()
  {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
    left_turn_ = false;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2274      	movs	r2, #116	; 0x74
 80068dc:	2100      	movs	r1, #0
 80068de:	5499      	strb	r1, [r3, r2]
  }
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b002      	add	sp, #8
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv>:

  void SteeringController::ToggleLeftTurnSignal()
  {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
    if(left_turn_)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2274      	movs	r2, #116	; 0x74
 80068f4:	5c9b      	ldrb	r3, [r3, r2]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x1c>
      DisableLeftTurnSignal();
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7ff ffe7 	bl	80068d0 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    else
      EnableLeftTurnSignal();
  }
 8006902:	e003      	b.n	800690c <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x24>
      EnableLeftTurnSignal();
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	0018      	movs	r0, r3
 8006908:	f7ff ffce 	bl	80068a8 <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>
  }
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	46bd      	mov	sp, r7
 8006910:	b002      	add	sp, #8
 8006912:	bd80      	pop	{r7, pc}

08006914 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>:

  void SteeringController::EnableRightTurnSignal()
  {
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2276      	movs	r2, #118	; 0x76
 8006920:	5c9b      	ldrb	r3, [r3, r2]
 8006922:	2201      	movs	r2, #1
 8006924:	4053      	eors	r3, r2
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv+0x20>
      right_turn_ = true;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2275      	movs	r2, #117	; 0x75
 8006930:	2101      	movs	r1, #1
 8006932:	5499      	strb	r1, [r3, r2]
  }
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	46bd      	mov	sp, r7
 8006938:	b002      	add	sp, #8
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>:

  void SteeringController::DisableRightTurnSignal()
  {
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
    right_turn_ = false;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2275      	movs	r2, #117	; 0x75
 8006948:	2100      	movs	r1, #0
 800694a:	5499      	strb	r1, [r3, r2]
  }
 800694c:	46c0      	nop			; (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b002      	add	sp, #8
 8006952:	bd80      	pop	{r7, pc}

08006954 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv>:

  void SteeringController::ToggleRightTurnSignal()
  {
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
    if(right_turn_)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2275      	movs	r2, #117	; 0x75
 8006960:	5c9b      	ldrb	r3, [r3, r2]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x1c>
      DisableRightTurnSignal();
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0018      	movs	r0, r3
 800696a:	f7ff ffe7 	bl	800693c <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    else
      EnableRightTurnSignal();
  }
 800696e:	e003      	b.n	8006978 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x24>
      EnableRightTurnSignal();
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff ffce 	bl	8006914 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>
  }
 8006978:	46c0      	nop			; (mov r8, r8)
 800697a:	46bd      	mov	sp, r7
 800697c:	b002      	add	sp, #8
 800697e:	bd80      	pop	{r7, pc}

08006980 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>:

  void SteeringController::EnableHazards()
  {
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
    DisableLeftTurnSignal();
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0018      	movs	r0, r3
 800698c:	f7ff ffa0 	bl	80068d0 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    DisableRightTurnSignal();
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0018      	movs	r0, r3
 8006994:	f7ff ffd2 	bl	800693c <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    hazards_ = true;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2276      	movs	r2, #118	; 0x76
 800699c:	2101      	movs	r1, #1
 800699e:	5499      	strb	r1, [r3, r2]
  }
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>:

  void SteeringController::DisableHazards()
  {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
    hazards_ = false;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2276      	movs	r2, #118	; 0x76
 80069b4:	2100      	movs	r1, #0
 80069b6:	5499      	strb	r1, [r3, r2]
  }
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}

080069c0 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv>:

  void SteeringController::ToggleHazards()
  {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
    if(hazards_)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2276      	movs	r2, #118	; 0x76
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d004      	beq.n	80069dc <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x1c>
      DisableHazards();
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7ff ffe7 	bl	80069a8 <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>
    else
      EnableHazards();
  }
 80069da:	e003      	b.n	80069e4 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x24>
      EnableHazards();
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	0018      	movs	r0, r3
 80069e0:	f7ff ffce 	bl	8006980 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>
  }
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b002      	add	sp, #8
 80069ea:	bd80      	pop	{r7, pc}

080069ec <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>:
  {
    bps_fault_ = fault;
  }

  void SteeringController::EnableCruise()
  {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
    // Don't allow cruise to be enabled in reverse
    if(!reverse_)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	227c      	movs	r2, #124	; 0x7c
 80069f8:	5c9b      	ldrb	r3, [r3, r2]
 80069fa:	2201      	movs	r2, #1
 80069fc:	4053      	eors	r3, r2
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv+0x20>
      cruise_enable_ = true;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2278      	movs	r2, #120	; 0x78
 8006a08:	2101      	movs	r1, #1
 8006a0a:	5499      	strb	r1, [r3, r2]
  }
 8006a0c:	46c0      	nop			; (mov r8, r8)
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b002      	add	sp, #8
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>:

  void SteeringController::DisableCruise()
  {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
    cruise_enable_ = false;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2278      	movs	r2, #120	; 0x78
 8006a20:	2100      	movs	r1, #0
 8006a22:	5499      	strb	r1, [r3, r2]
  }
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b002      	add	sp, #8
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>:
  void SteeringController::ToggleCruise()
  {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
    if(cruise_enable_)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2278      	movs	r2, #120	; 0x78
 8006a38:	5c9b      	ldrb	r3, [r3, r2]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x1c>
      DisableCruise();
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7ff ffe7 	bl	8006a14 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    else
      EnableCruise();
  }
 8006a46:	e003      	b.n	8006a50 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x24>
      EnableCruise();
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff ffce 	bl	80069ec <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>
  }
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b002      	add	sp, #8
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>:

  void SteeringController::EnableHeadlights()
  {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
    headlights_ = true;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	227a      	movs	r2, #122	; 0x7a
 8006a64:	2101      	movs	r1, #1
 8006a66:	5499      	strb	r1, [r3, r2]
  }
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>:

  void SteeringController::DisableHeadlights()
  {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    headlights_ = false;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	227a      	movs	r2, #122	; 0x7a
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	5499      	strb	r1, [r3, r2]
  }
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b002      	add	sp, #8
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>:

  void SteeringController::ToggleHeadlights()
  {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
    if(headlights_)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	227a      	movs	r2, #122	; 0x7a
 8006a94:	5c9b      	ldrb	r3, [r3, r2]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d004      	beq.n	8006aa4 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x1c>
      DisableHeadlights();
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7ff ffe7 	bl	8006a70 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>
    else
      EnableHeadlights();
  }
 8006aa2:	e003      	b.n	8006aac <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x24>
      EnableHeadlights();
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7ff ffd6 	bl	8006a58 <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>
  }
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>:

  void SteeringController::EnableHorn()
  {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
    horn_ = true;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	227b      	movs	r2, #123	; 0x7b
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	5499      	strb	r1, [r3, r2]
  }
 8006ac4:	46c0      	nop			; (mov r8, r8)
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b002      	add	sp, #8
 8006aca:	bd80      	pop	{r7, pc}

08006acc <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>:

  void SteeringController::DisableHorn()
  {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
    horn_ = false;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	227b      	movs	r2, #123	; 0x7b
 8006ad8:	2100      	movs	r1, #0
 8006ada:	5499      	strb	r1, [r3, r2]
  }
 8006adc:	46c0      	nop			; (mov r8, r8)
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv>:

  void SteeringController::ToggleHorn()
  {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
    if(horn_)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	227b      	movs	r2, #123	; 0x7b
 8006af0:	5c9b      	ldrb	r3, [r3, r2]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv+0x1c>
      DisableHorn();
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7ff ffe7 	bl	8006acc <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>
    else
      EnableHorn();
  }
 8006afe:	e003      	b.n	8006b08 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv+0x24>
      EnableHorn();
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	0018      	movs	r0, r3
 8006b04:	f7ff ffd6 	bl	8006ab4 <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>
  }
 8006b08:	46c0      	nop			; (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <_ZN11SolarGators11DataModules18SteeringController19IncreaseCruiseSpeedEv>:

  void SteeringController::IncreaseCruiseSpeed()
  {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
    SetCruiseSpeed(cruise_speed_++);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	227d      	movs	r2, #125	; 0x7d
 8006b1c:	5c9b      	ldrb	r3, [r3, r2]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	b2d0      	uxtb	r0, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	217d      	movs	r1, #125	; 0x7d
 8006b26:	5450      	strb	r0, [r2, r1]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	0011      	movs	r1, r2
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f000 f81a 	bl	8006b68 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>
  }
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <_ZN11SolarGators11DataModules18SteeringController19DecreaseCruiseSpeedEv>:

  void SteeringController::DecreaseCruiseSpeed()
  {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
    SetCruiseSpeed(cruise_speed_--);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	227d      	movs	r2, #125	; 0x7d
 8006b48:	5c9b      	ldrb	r3, [r3, r2]
 8006b4a:	1e5a      	subs	r2, r3, #1
 8006b4c:	b2d0      	uxtb	r0, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	217d      	movs	r1, #125	; 0x7d
 8006b52:	5450      	strb	r0, [r2, r1]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	0011      	movs	r1, r2
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f000 f804 	bl	8006b68 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>
  }
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	46bd      	mov	sp, r7
 8006b64:	b002      	add	sp, #8
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>:

  void SteeringController::SetCruiseSpeed(uint16_t speed)
  {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	000a      	movs	r2, r1
 8006b72:	1cbb      	adds	r3, r7, #2
 8006b74:	801a      	strh	r2, [r3, #0]
    // Make sure the the requested cruise speed is acceptable
    if(speed < Max_Cruise_Speed_ && speed > Min_Cruise_Speed_)
 8006b76:	1cbb      	adds	r3, r7, #2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	2b3b      	cmp	r3, #59	; 0x3b
 8006b7c:	d809      	bhi.n	8006b92 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt+0x2a>
 8006b7e:	1cbb      	adds	r3, r7, #2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt+0x2a>
      cruise_speed_ = speed;
 8006b86:	1cbb      	adds	r3, r7, #2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b2d9      	uxtb	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	227d      	movs	r2, #125	; 0x7d
 8006b90:	5499      	strb	r1, [r3, r2]
  }
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	46bd      	mov	sp, r7
 8006b96:	b002      	add	sp, #8
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>:

  void SteeringController::EnableReverse()
  {
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
    // Disable cruise if switching into reverse (should never need to happen but just in case)
    DisableCruise();
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f7ff ff35 	bl	8006a14 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    reverse_ = true;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	227c      	movs	r2, #124	; 0x7c
 8006bae:	2101      	movs	r1, #1
 8006bb0:	5499      	strb	r1, [r3, r2]
  }
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b002      	add	sp, #8
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>:

  void SteeringController::DisableReverse()
  {
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
    reverse_ = false;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	227c      	movs	r2, #124	; 0x7c
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	5499      	strb	r1, [r3, r2]
  }
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	b002      	add	sp, #8
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>:

  void SteeringController::ToggleReverse()
  {
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
    if(reverse_)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	227c      	movs	r2, #124	; 0x7c
 8006bde:	5c9b      	ldrb	r3, [r3, r2]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x1c>
      DisableReverse();
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f7ff ffe7 	bl	8006bba <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>
    else
      EnableReverse();
  }
 8006bec:	e003      	b.n	8006bf6 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x24>
      EnableReverse();
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7ff ffd2 	bl	8006b9a <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>
  }
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>:

  void SteeringController::EnableEco()
  {
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
    eco_enable_ = true;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2279      	movs	r2, #121	; 0x79
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]
  }
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b002      	add	sp, #8
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <_ZN11SolarGators11DataModules18SteeringController10DisableEcoEv>:

  void SteeringController::DisableEco()
  {
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
    eco_enable_ = false;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2279      	movs	r2, #121	; 0x79
 8006c22:	2100      	movs	r1, #0
 8006c24:	5499      	strb	r1, [r3, r2]
  }
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b002      	add	sp, #8
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv>:
  void SteeringController::ToggleEco()
  {
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
    if(eco_enable_)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2279      	movs	r2, #121	; 0x79
 8006c3a:	5c9b      	ldrb	r3, [r3, r2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv+0x1c>
      DisableEco();
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	0018      	movs	r0, r3
 8006c44:	f7ff ffe7 	bl	8006c16 <_ZN11SolarGators11DataModules18SteeringController10DisableEcoEv>
    else
      EnableEco();
  }
 8006c48:	e003      	b.n	8006c52 <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv+0x24>
      EnableEco();
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7ff ffd6 	bl	8006bfe <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>
  }
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	46bd      	mov	sp, r7
 8006c56:	b002      	add	sp, #8
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>:

  void SteeringController::HandlePress(uint16_t pin)
  {
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	000a      	movs	r2, r1
 8006c64:	1cbb      	adds	r3, r7, #2
 8006c66:	801a      	strh	r2, [r3, #0]
    // Handles calling the action debouncing
    osEventFlagsSet(button_event_, 0x1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2280      	movs	r2, #128	; 0x80
 8006c6c:	589b      	ldr	r3, [r3, r2]
 8006c6e:	2101      	movs	r1, #1
 8006c70:	0018      	movs	r0, r3
 8006c72:	f002 f999 	bl	8008fa8 <osEventFlagsSet>
    osMessageQueuePut(button_queue_, &pin, 0, 0);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2284      	movs	r2, #132	; 0x84
 8006c7a:	5898      	ldr	r0, [r3, r2]
 8006c7c:	1cb9      	adds	r1, r7, #2
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2200      	movs	r2, #0
 8006c82:	f002 fc41 	bl	8009508 <osMessageQueuePut>
  }
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	b002      	add	sp, #8
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>:

  void SteeringController::AddButton(Drivers::Button* button)
  {
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
    buttons_.Insert(button->pin_, button);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	22fd      	movs	r2, #253	; 0xfd
 8006c9c:	0092      	lsls	r2, r2, #2
 8006c9e:	1898      	adds	r0, r3, r2
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	8b1b      	ldrh	r3, [r3, #24]
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	0019      	movs	r1, r3
 8006ca8:	f000 f84b 	bl	8006d42 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_>
  }
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv>:

  void SteeringController::ButtonHandler()
  {
 8006cb4:	b590      	push	{r4, r7, lr}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
    while(1)
    {
      // Wait for event to be set, no timeout
      osEventFlagsWait(button_event_, 0x1, osFlagsWaitAny, osWaitForever);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2280      	movs	r2, #128	; 0x80
 8006cc0:	5898      	ldr	r0, [r3, r2]
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	425b      	negs	r3, r3
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2101      	movs	r1, #1
 8006cca:	f002 f9bb 	bl	8009044 <osEventFlagsWait>
      while(osMessageQueueGetCount(button_queue_) > 0)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2284      	movs	r2, #132	; 0x84
 8006cd2:	589b      	ldr	r3, [r3, r2]
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f002 fce9 	bl	80096ac <osMessageQueueGetCount>
 8006cda:	0003      	movs	r3, r0
 8006cdc:	1e5a      	subs	r2, r3, #1
 8006cde:	4193      	sbcs	r3, r2
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0ea      	beq.n	8006cbc <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x8>
      {
        uint16_t pin;
        osMessageQueueGet(button_queue_, &pin, NULL, 0);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2284      	movs	r2, #132	; 0x84
 8006cea:	5898      	ldr	r0, [r3, r2]
 8006cec:	240a      	movs	r4, #10
 8006cee:	1939      	adds	r1, r7, r4
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f002 fc72 	bl	80095dc <osMessageQueueGet>
        Drivers::Button* button = buttons_.Find(pin);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22fd      	movs	r2, #253	; 0xfd
 8006cfc:	0092      	lsls	r2, r2, #2
 8006cfe:	189a      	adds	r2, r3, r2
 8006d00:	193b      	adds	r3, r7, r4
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	0019      	movs	r1, r3
 8006d06:	0010      	movs	r0, r2
 8006d08:	f000 f847 	bl	8006d9a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	60fb      	str	r3, [r7, #12]
        if(button != nullptr)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0db      	beq.n	8006cce <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>
          button->HandlePress();
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f000 fadc 	bl	80072d6 <_ZN11SolarGators7Drivers6Button11HandlePressEv>
      while(osMessageQueueGetCount(button_queue_) > 0)
 8006d1e:	e7d6      	b.n	8006cce <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>

08006d20 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EEC1Ev>:
    Node* FindNode(Node* node, KEY_T key);
    uint32_t Max(uint32_t a, uint32_t b);
  };

  template<typename KEY_T, typename DATA_T, int SIZE>
  Map<KEY_T, DATA_T, SIZE>::Map():current_size_(0)
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	22cc      	movs	r2, #204	; 0xcc
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	5099      	str	r1, [r3, r2]
  {
    root_ = nullptr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	22c8      	movs	r2, #200	; 0xc8
 8006d34:	2100      	movs	r1, #0
 8006d36:	5099      	str	r1, [r3, r2]
  }
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	b002      	add	sp, #8
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_>:

  template<typename KEY_T, typename DATA_T, int SIZE>
  bool Map<KEY_T, DATA_T, SIZE>::Insert(KEY_T key, DATA_T* new_element)
 8006d42:	b590      	push	{r4, r7, lr}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	200a      	movs	r0, #10
 8006d4e:	183b      	adds	r3, r7, r0
 8006d50:	1c0a      	adds	r2, r1, #0
 8006d52:	801a      	strh	r2, [r3, #0]
  {
    //Only insert a node if there is room
    if(current_size_ < MAX_NODES && new_element != nullptr)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	22cc      	movs	r2, #204	; 0xcc
 8006d58:	589b      	ldr	r3, [r3, r2]
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d818      	bhi.n	8006d90 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_+0x4e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d015      	beq.n	8006d90 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_+0x4e>
    {
      root_ = AddNode(root_, NewNode(key, new_element));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	22c8      	movs	r2, #200	; 0xc8
 8006d68:	589c      	ldr	r4, [r3, r2]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	183b      	adds	r3, r7, r0
 8006d6e:	8819      	ldrh	r1, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f000 f8df 	bl	8006f36 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7NewNodeEtPS3_>
 8006d78:	0002      	movs	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	0021      	movs	r1, r4
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f000 f828 	bl	8006dd4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>
 8006d84:	0002      	movs	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	21c8      	movs	r1, #200	; 0xc8
 8006d8a:	505a      	str	r2, [r3, r1]
      return true;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_+0x50>
    }
    return false;
 8006d90:	2300      	movs	r3, #0
  }
 8006d92:	0018      	movs	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b005      	add	sp, #20
 8006d98:	bd90      	pop	{r4, r7, pc}

08006d9a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt>:
    // Return new root
    return x;
  }

  template<typename KEY_T, typename DATA_T, int SIZE>
  DATA_T* Map<KEY_T, DATA_T, SIZE>::Find(KEY_T key)
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	000a      	movs	r2, r1
 8006da4:	1cbb      	adds	r3, r7, #2
 8006da6:	801a      	strh	r2, [r3, #0]
  {
    Node* foundNode = FindNode(root_, key);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	22c8      	movs	r2, #200	; 0xc8
 8006dac:	5899      	ldr	r1, [r3, r2]
 8006dae:	1cbb      	adds	r3, r7, #2
 8006db0:	881a      	ldrh	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	0018      	movs	r0, r3
 8006db6:	f000 f8e7 	bl	8006f88 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt+0x2e>
    {
      return nullptr;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e001      	b.n	8006dcc <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt+0x32>
    }
    else
    {
      return foundNode->data;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685b      	ldr	r3, [r3, #4]
    }
  }
 8006dcc:	0018      	movs	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b004      	add	sp, #16
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::AddNode(Node* node, Node* new_node)
 8006dd4:	b590      	push	{r4, r7, lr}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
    if (node == nullptr)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x16>
      return new_node;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	e0a1      	b.n	8006f2e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (new_node->key < node->key)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d20a      	bcs.n	8006e0c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x38>
        node->left = AddNode(node->left, new_node);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6899      	ldr	r1, [r3, #8]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7ff ffe8 	bl	8006dd4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>
 8006e04:	0002      	movs	r2, r0
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	609a      	str	r2, [r3, #8]
 8006e0a:	e012      	b.n	8006e32 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x5e>
    else if (new_node->key > node->key)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d90a      	bls.n	8006e2e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x5a>
        node->right = AddNode(node->right, new_node);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	68d9      	ldr	r1, [r3, #12]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7ff ffd7 	bl	8006dd4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>
 8006e26:	0002      	movs	r2, r0
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e001      	b.n	8006e32 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x5e>
        return node;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	e07d      	b.n	8006f2e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    node->height = 1 + Max(Height(node->left),
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	0011      	movs	r1, r2
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f000 f8e6 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8006e40:	0004      	movs	r4, r0
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	0011      	movs	r1, r2
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f000 f8de 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8006e50:	0002      	movs	r2, r0
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	0021      	movs	r1, r4
 8006e56:	0018      	movs	r0, r3
 8006e58:	f000 f8c7 	bl	8006fea <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	611a      	str	r2, [r3, #16]
    int balance = GetBalance(node);
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	0011      	movs	r1, r2
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f000 f8de 	bl	800702c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE>
 8006e70:	0003      	movs	r3, r0
 8006e72:	617b      	str	r3, [r7, #20]
    if (balance > 1 && new_node->key < node->left->key)
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	dd0e      	ble.n	8006e98 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xc4>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	881a      	ldrh	r2, [r3, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d207      	bcs.n	8006e98 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xc4>
        return RightRotate(node);
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	0011      	movs	r1, r2
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f000 f8eb 	bl	800706a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>
 8006e94:	0003      	movs	r3, r0
 8006e96:	e04a      	b.n	8006f2e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key > node->right->key)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	da0e      	bge.n	8006ebc <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xe8>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d907      	bls.n	8006ebc <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xe8>
        return LeftRotate(node);
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	0011      	movs	r1, r2
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 f921 	bl	80070fa <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	e038      	b.n	8006f2e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance > 1 && new_node->key > node->left->key)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	dd18      	ble.n	8006ef4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x120>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	881a      	ldrh	r2, [r3, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d911      	bls.n	8006ef4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x120>
        node->left = LeftRotate(node->left);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	0011      	movs	r1, r2
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f000 f90e 	bl	80070fa <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>
 8006ede:	0002      	movs	r2, r0
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	609a      	str	r2, [r3, #8]
        return RightRotate(node);
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	0011      	movs	r1, r2
 8006eea:	0018      	movs	r0, r3
 8006eec:	f000 f8bd 	bl	800706a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	e01c      	b.n	8006f2e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key < node->right->key)
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	da18      	bge.n	8006f2c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x158>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	881a      	ldrh	r2, [r3, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d211      	bcs.n	8006f2c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x158>
        node->right = RightRotate(node->right);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	0011      	movs	r1, r2
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 f8aa 	bl	800706a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>
 8006f16:	0002      	movs	r2, r0
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	60da      	str	r2, [r3, #12]
        return LeftRotate(node);
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	0011      	movs	r1, r2
 8006f22:	0018      	movs	r0, r3
 8006f24:	f000 f8e9 	bl	80070fa <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	e000      	b.n	8006f2e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    return node;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
  }
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b007      	add	sp, #28
 8006f34:	bd90      	pop	{r4, r7, pc}

08006f36 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7NewNodeEtPS3_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::NewNode(KEY_T key, DATA_T* new_element)
 8006f36:	b590      	push	{r4, r7, lr}
 8006f38:	b087      	sub	sp, #28
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	240a      	movs	r4, #10
 8006f42:	193b      	adds	r3, r7, r4
 8006f44:	1c0a      	adds	r2, r1, #0
 8006f46:	801a      	strh	r2, [r3, #0]
      Node* node = &array[current_size_++];
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	22cc      	movs	r2, #204	; 0xcc
 8006f4c:	589a      	ldr	r2, [r3, r2]
 8006f4e:	1c51      	adds	r1, r2, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	20cc      	movs	r0, #204	; 0xcc
 8006f54:	5019      	str	r1, [r3, r0]
 8006f56:	0013      	movs	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	189b      	adds	r3, r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	18d3      	adds	r3, r2, r3
 8006f62:	617b      	str	r3, [r7, #20]
      node->data = new_element;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	605a      	str	r2, [r3, #4]
      node->key = key;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	193a      	adds	r2, r7, r4
 8006f6e:	8812      	ldrh	r2, [r2, #0]
 8006f70:	801a      	strh	r2, [r3, #0]
      node->left = nullptr;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2200      	movs	r2, #0
 8006f76:	609a      	str	r2, [r3, #8]
      node->right = nullptr;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	60da      	str	r2, [r3, #12]
      return node;
 8006f7e:	697b      	ldr	r3, [r7, #20]
  }
 8006f80:	0018      	movs	r0, r3
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b007      	add	sp, #28
 8006f86:	bd90      	pop	{r4, r7, pc}

08006f88 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>:

  template<typename KEY_T, typename DATA_T, int SIZE>
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::FindNode(Node* node, KEY_T key)
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	1dbb      	adds	r3, r7, #6
 8006f94:	801a      	strh	r2, [r3, #0]
  {
    //Can't find node return nullptr
    if(node == nullptr)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x18>
    {
      return node;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	e020      	b.n	8006fe2 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x5a>
    }

    if(key < node->key)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	1dba      	adds	r2, r7, #6
 8006fa6:	8812      	ldrh	r2, [r2, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d209      	bcs.n	8006fc0 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x38>
    {
      return FindNode(node->left, key);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6899      	ldr	r1, [r3, #8]
 8006fb0:	1dbb      	adds	r3, r7, #6
 8006fb2:	881a      	ldrh	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f7ff ffe6 	bl	8006f88 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	e010      	b.n	8006fe2 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x5a>
    }
    else if(key > node->key)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	1dba      	adds	r2, r7, #6
 8006fc6:	8812      	ldrh	r2, [r2, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d909      	bls.n	8006fe0 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x58>
    {
      return FindNode(node->right, key);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	68d9      	ldr	r1, [r3, #12]
 8006fd0:	1dbb      	adds	r3, r7, #6
 8006fd2:	881a      	ldrh	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7ff ffd6 	bl	8006f88 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	e000      	b.n	8006fe2 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x5a>
    }
    else
    {
      //If key == node_key then return the node
      return node;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
    }
  }
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b004      	add	sp, #16
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>:

  template<typename KEY_T, typename DATA_T, int SIZE>
  uint32_t Map<KEY_T, DATA_T, SIZE>::Max(uint32_t a, uint32_t b)
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
  {
      return (a > b)? a : b;
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d901      	bls.n	8007002 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm+0x18>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	e000      	b.n	8007004 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm+0x1a>
 8007002:	687b      	ldr	r3, [r7, #4]
  }
 8007004:	0018      	movs	r0, r3
 8007006:	46bd      	mov	sp, r7
 8007008:	b004      	add	sp, #16
 800700a:	bd80      	pop	{r7, pc}

0800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::Height(Node *N)
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE+0x14>
      return 0;
 800701c:	2300      	movs	r3, #0
 800701e:	e001      	b.n	8007024 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE+0x18>
    return N->height;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
  }
 8007024:	0018      	movs	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	b002      	add	sp, #8
 800702a:	bd80      	pop	{r7, pc}

0800702c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::GetBalance(Node *N)
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE+0x14>
      return 0;
 800703c:	2300      	movs	r3, #0
 800703e:	e010      	b.n	8007062 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE+0x36>
    return Height(N->left) - Height(N->right);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	0011      	movs	r1, r2
 8007048:	0018      	movs	r0, r3
 800704a:	f7ff ffdf 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800704e:	0004      	movs	r4, r0
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	0011      	movs	r1, r2
 8007058:	0018      	movs	r0, r3
 800705a:	f7ff ffd7 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800705e:	0003      	movs	r3, r0
 8007060:	1ae3      	subs	r3, r4, r3
  }
 8007062:	0018      	movs	r0, r3
 8007064:	46bd      	mov	sp, r7
 8007066:	b003      	add	sp, #12
 8007068:	bd90      	pop	{r4, r7, pc}

0800706a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::RightRotate(Node *y)
 800706a:	b590      	push	{r4, r7, lr}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
    Node *x = y->left;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	60bb      	str	r3, [r7, #8]
    x->right = y;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	60da      	str	r2, [r3, #12]
    y->left = T2;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	609a      	str	r2, [r3, #8]
        Height(y->right)) + 1;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	0011      	movs	r1, r2
 8007094:	0018      	movs	r0, r3
 8007096:	f7ff ffb9 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800709a:	0004      	movs	r4, r0
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	0011      	movs	r1, r2
 80070a4:	0018      	movs	r0, r3
 80070a6:	f7ff ffb1 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 80070aa:	0002      	movs	r2, r0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	0021      	movs	r1, r4
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7ff ff9a 	bl	8006fea <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 80070b6:	0003      	movs	r3, r0
 80070b8:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	611a      	str	r2, [r3, #16]
        Height(x->right)) + 1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0011      	movs	r1, r2
 80070c6:	0018      	movs	r0, r3
 80070c8:	f7ff ffa0 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 80070cc:	0004      	movs	r4, r0
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	0011      	movs	r1, r2
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7ff ff98 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 80070dc:	0002      	movs	r2, r0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	0021      	movs	r1, r4
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7ff ff81 	bl	8006fea <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 80070e8:	0003      	movs	r3, r0
 80070ea:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	611a      	str	r2, [r3, #16]
    return x;
 80070f0:	68fb      	ldr	r3, [r7, #12]
  }
 80070f2:	0018      	movs	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	b005      	add	sp, #20
 80070f8:	bd90      	pop	{r4, r7, pc}

080070fa <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::LeftRotate(Node *x)
 80070fa:	b590      	push	{r4, r7, lr}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
    Node *y = x->right;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	60bb      	str	r3, [r7, #8]
    y->left = x;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	609a      	str	r2, [r3, #8]
    x->right = T2;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	60da      	str	r2, [r3, #12]
        Height(x->right)) + 1;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	0011      	movs	r1, r2
 8007124:	0018      	movs	r0, r3
 8007126:	f7ff ff71 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800712a:	0004      	movs	r4, r0
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0011      	movs	r1, r2
 8007134:	0018      	movs	r0, r3
 8007136:	f7ff ff69 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800713a:	0002      	movs	r2, r0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	0021      	movs	r1, r4
 8007140:	0018      	movs	r0, r3
 8007142:	f7ff ff52 	bl	8006fea <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 8007146:	0003      	movs	r3, r0
 8007148:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	611a      	str	r2, [r3, #16]
        Height(y->right)) + 1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f7ff ff58 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800715c:	0004      	movs	r4, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	0011      	movs	r1, r2
 8007166:	0018      	movs	r0, r3
 8007168:	f7ff ff50 	bl	800700c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800716c:	0002      	movs	r2, r0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0021      	movs	r1, r4
 8007172:	0018      	movs	r0, r3
 8007174:	f7ff ff39 	bl	8006fea <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 8007178:	0003      	movs	r3, r0
 800717a:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	611a      	str	r2, [r3, #16]
    return y;
 8007180:	68fb      	ldr	r3, [r7, #12]
  }
 8007182:	0018      	movs	r0, r3
 8007184:	46bd      	mov	sp, r7
 8007186:	b005      	add	sp, #20
 8007188:	bd90      	pop	{r4, r7, pc}
	...

0800718c <_Z12GetASCIICodePhh>:
* Output         : - *pBuffer: Store data pointer
* Return         : None
* Attention		 : None
*******************************************************************************/
void GetASCIICode(unsigned char* pBuffer,unsigned char ASCII)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	000a      	movs	r2, r1
 8007196:	1cfb      	adds	r3, r7, #3
 8007198:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 16; i++)
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b0f      	cmp	r3, #15
 80071a2:	dc11      	bgt.n	80071c8 <_Z12GetASCIICodePhh+0x3c>
   {
       pBuffer[i] = AsciiLib[(ASCII - 32)][i];
 80071a4:	1cfb      	adds	r3, r7, #3
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	3b20      	subs	r3, #32
 80071aa:	001a      	movs	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	18cb      	adds	r3, r1, r3
 80071b2:	4907      	ldr	r1, [pc, #28]	; (80071d0 <_Z12GetASCIICodePhh+0x44>)
 80071b4:	0112      	lsls	r2, r2, #4
 80071b6:	1889      	adds	r1, r1, r2
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	188a      	adds	r2, r1, r2
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 16; i++)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e7ea      	b.n	800719e <_Z12GetASCIICodePhh+0x12>
   }
}
 80071c8:	46c0      	nop			; (mov r8, r8)
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b004      	add	sp, #16
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	0800d6a0 	.word	0x0800d6a0

080071d4 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	0002      	movs	r2, r0
 80071dc:	6039      	str	r1, [r7, #0]
 80071de:	1dfb      	adds	r3, r7, #7
 80071e0:	701a      	strb	r2, [r3, #0]
    return memory_order(int(__m) & int(__mod));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	b25b      	sxtb	r3, r3
 80071e6:	1dfa      	adds	r2, r7, #7
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	b252      	sxtb	r2, r2
 80071ec:	4013      	ands	r3, r2
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	b2db      	uxtb	r3, r3
  }
 80071f2:	0018      	movs	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b002      	add	sp, #8
 80071f8:	bd80      	pop	{r7, pc}

080071fa <_ZNSt6atomicIbEaSEb>:
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	000a      	movs	r2, r1
 8007204:	1cfb      	adds	r3, r7, #3
 8007206:	701a      	strb	r2, [r3, #0]
    { return _M_base.operator=(__i); }
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	1cfb      	adds	r3, r7, #3
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	0019      	movs	r1, r3
 8007210:	0010      	movs	r0, r2
 8007212:	f000 f8a9 	bl	8007368 <_ZNSt13__atomic_baseIbEaSEb>
 8007216:	0003      	movs	r3, r0
 8007218:	0018      	movs	r0, r3
 800721a:	46bd      	mov	sp, r7
 800721c:	b002      	add	sp, #8
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	425a      	negs	r2, r3
 800722e:	4153      	adcs	r3, r2
 8007230:	b2db      	uxtb	r3, r3
 8007232:	0018      	movs	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	b002      	add	sp, #8
 8007238:	bd80      	pop	{r7, pc}

0800723a <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>:
#include "Button.hpp"

#include "map"
namespace SolarGators::Drivers {

Button::Button(const char* name, GPIO_TypeDef* port, uint16_t pin, uint16_t press_time, GPIO_PinState active_state):
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	001a      	movs	r2, r3
 8007248:	1cbb      	adds	r3, r7, #2
 800724a:	801a      	strh	r2, [r3, #0]
    name_(name),port_(port),pin_(pin),press_time_(press_time), active_state_(active_state)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	0018      	movs	r0, r3
 8007250:	f000 f8b8 	bl	80073c4 <_ZNSt8functionIFvvEEC1Ev>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	611a      	str	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	615a      	str	r2, [r3, #20]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1cba      	adds	r2, r7, #2
 8007264:	8812      	ldrh	r2, [r2, #0]
 8007266:	831a      	strh	r2, [r3, #24]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	2318      	movs	r3, #24
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	8493      	strh	r3, [r2, #36]	; 0x24
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	221c      	movs	r2, #28
 8007276:	18ba      	adds	r2, r7, r2
 8007278:	2126      	movs	r1, #38	; 0x26
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	545a      	strb	r2, [r3, r1]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2232      	movs	r2, #50	; 0x32
 8007282:	851a      	strh	r2, [r3, #40]	; 0x28
{
  disabled_ = false;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	332a      	adds	r3, #42	; 0x2a
 8007288:	2100      	movs	r1, #0
 800728a:	0018      	movs	r0, r3
 800728c:	f7ff ffb5 	bl	80071fa <_ZNSt6atomicIbEaSEb>
}
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b004      	add	sp, #16
 8007298:	bd80      	pop	{r7, pc}

0800729a <_ZN11SolarGators7Drivers6ButtonD1Ev>:

Button::~Button()
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	0018      	movs	r0, r3
 80072a6:	f7fa fdd4 	bl	8001e52 <_ZNSt8functionIFvvEED1Ev>
{
}
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	0018      	movs	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b002      	add	sp, #8
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_ZN11SolarGators7Drivers6Button7ReadPinEv>:

GPIO_PinState Button::ReadPin()
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port_, pin_);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695a      	ldr	r2, [r3, #20]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	8b1b      	ldrh	r3, [r3, #24]
 80072c4:	0019      	movs	r1, r3
 80072c6:	0010      	movs	r0, r2
 80072c8:	f7fc faf2 	bl	80038b0 <HAL_GPIO_ReadPin>
 80072cc:	0003      	movs	r3, r0
}
 80072ce:	0018      	movs	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	b002      	add	sp, #8
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <_ZN11SolarGators7Drivers6Button11HandlePressEv>:

void Button::HandlePress()
{
 80072d6:	b590      	push	{r4, r7, lr}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  if(last_valid_press_time_ + debounce_time_ < osKernelGetTickCount())
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80072e6:	189c      	adds	r4, r3, r2
 80072e8:	f001 fc42 	bl	8008b70 <osKernelGetTickCount>
 80072ec:	0003      	movs	r3, r0
 80072ee:	429c      	cmp	r4, r3
 80072f0:	419b      	sbcs	r3, r3
 80072f2:	425b      	negs	r3, r3
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d033      	beq.n	8007362 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8c>
  {
    press_count_++;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	621a      	str	r2, [r3, #32]
    last_valid_press_time_ = osKernelGetTickCount();
 8007304:	f001 fc34 	bl	8008b70 <osKernelGetTickCount>
 8007308:	0002      	movs	r2, r0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	61da      	str	r2, [r3, #28]
    // Sleep until we should call action
    osDelay(debounce_time_ + press_time_);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007312:	001a      	movs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007318:	18d3      	adds	r3, r2, r3
 800731a:	0018      	movs	r0, r3
 800731c:	f001 fcf4 	bl	8008d08 <osDelay>
    if(ReadPin() != active_state_)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	0018      	movs	r0, r3
 8007324:	f7ff ffc6 	bl	80072b4 <_ZN11SolarGators7Drivers6Button7ReadPinEv>
 8007328:	0003      	movs	r3, r0
 800732a:	0019      	movs	r1, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2226      	movs	r2, #38	; 0x26
 8007330:	5c9b      	ldrb	r3, [r3, r2]
 8007332:	1acb      	subs	r3, r1, r3
 8007334:	1e5a      	subs	r2, r3, #1
 8007336:	4193      	sbcs	r3, r2
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d110      	bne.n	8007360 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8a>
      return;
    // Make sure button is still pressed
    // and there is an action assigned to it
    if(action_)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	0018      	movs	r0, r3
 8007342:	f000 f84c 	bl	80073de <_ZNKSt8functionIFvvEEcvbEv>
 8007346:	1e03      	subs	r3, r0, #0
 8007348:	d00b      	beq.n	8007362 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8c>
    {
      action_();
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	0018      	movs	r0, r3
 800734e:	f000 f857 	bl	8007400 <_ZNKSt8functionIFvvEEclEv>
      action_called_time_++;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7e9b      	ldrb	r3, [r3, #26]
 8007356:	3301      	adds	r3, #1
 8007358:	b2da      	uxtb	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	769a      	strb	r2, [r3, #26]
 800735e:	e000      	b.n	8007362 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8c>
      return;
 8007360:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007362:	46bd      	mov	sp, r7
 8007364:	b003      	add	sp, #12
 8007366:	bd90      	pop	{r4, r7, pc}

08007368 <_ZNSt13__atomic_baseIbEaSEb>:

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
 8007368:	b5b0      	push	{r4, r5, r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	000a      	movs	r2, r1
 8007372:	1cfb      	adds	r3, r7, #3
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	250b      	movs	r5, #11
 800737c:	197b      	adds	r3, r7, r5
 800737e:	1cfa      	adds	r2, r7, #3
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	210a      	movs	r1, #10
 8007386:	187b      	adds	r3, r7, r1
 8007388:	2205      	movs	r2, #5
 800738a:	701a      	strb	r2, [r3, #0]
      }

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 800738c:	2309      	movs	r3, #9
 800738e:	18fc      	adds	r4, r7, r3
 8007390:	4a0b      	ldr	r2, [pc, #44]	; (80073c0 <_ZNSt13__atomic_baseIbEaSEb+0x58>)
 8007392:	187b      	adds	r3, r7, r1
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	0011      	movs	r1, r2
 8007398:	0018      	movs	r0, r3
 800739a:	f7ff ff1b 	bl	80071d4 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 800739e:	0003      	movs	r3, r0
 80073a0:	7023      	strb	r3, [r4, #0]
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	197a      	adds	r2, r7, r5
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	f3bf 8f5b 	dmb	ish
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	f3bf 8f5b 	dmb	ish
      }
 80073b2:	46c0      	nop			; (mov r8, r8)
	return __i;
 80073b4:	1cfb      	adds	r3, r7, #3
 80073b6:	781b      	ldrb	r3, [r3, #0]
      }
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b004      	add	sp, #16
 80073be:	bdb0      	pop	{r4, r5, r7, pc}
 80073c0:	0000ffff 	.word	0x0000ffff

080073c4 <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	0018      	movs	r0, r3
 80073d0:	f7fa fa2b 	bl	800182a <_ZNSt14_Function_baseC1Ev>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	b002      	add	sp, #8
 80073dc:	bd80      	pop	{r7, pc}

080073de <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7ff ff19 	bl	8007220 <_ZNKSt14_Function_base8_M_emptyEv>
 80073ee:	0003      	movs	r3, r0
 80073f0:	001a      	movs	r2, r3
 80073f2:	2301      	movs	r3, #1
 80073f4:	4053      	eors	r3, r2
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	0018      	movs	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b002      	add	sp, #8
 80073fe:	bd80      	pop	{r7, pc}

08007400 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	0018      	movs	r0, r3
 800740c:	f7ff ff08 	bl	8007220 <_ZNKSt14_Function_base8_M_emptyEv>
 8007410:	1e03      	subs	r3, r0, #0
 8007412:	d001      	beq.n	8007418 <_ZNKSt8functionIFvvEEclEv+0x18>
	__throw_bad_function_call();
 8007414:	f005 f9c6 	bl	800c7a4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	0010      	movs	r0, r2
 8007420:	4798      	blx	r3
 8007422:	46c0      	nop			; (mov r8, r8)
    }
 8007424:	46bd      	mov	sp, r7
 8007426:	b002      	add	sp, #8
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <_ZN11SolarGators7Drivers9CANDriverC1ER19__CAN_HandleTypeDefm>:
#include <CAN.hpp>

namespace SolarGators {
namespace Drivers {

CANDriver::CANDriver(CAN_HandleTypeDef& hcan, uint32_t rx_fifo_num_):hcan_(hcan),rx_fifo_num_(rx_fifo_num_)
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	4a2e      	ldr	r2, [pc, #184]	; (80074f4 <_ZN11SolarGators7Drivers9CANDriverC1ER19__CAN_HandleTypeDefm+0xc8>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3304      	adds	r3, #4
 8007442:	0018      	movs	r0, r3
 8007444:	f000 f8e4 	bl	8007610 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EEC1Ev>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	671a      	str	r2, [r3, #112]	; 0x70
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	675a      	str	r2, [r3, #116]	; 0x74
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	238f      	movs	r3, #143	; 0x8f
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	18d3      	adds	r3, r2, r3
 800745c:	2224      	movs	r2, #36	; 0x24
 800745e:	2100      	movs	r1, #0
 8007460:	0018      	movs	r0, r3
 8007462:	f005 fa7c 	bl	800c95e <memset>
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	238f      	movs	r3, #143	; 0x8f
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4922      	ldr	r1, [pc, #136]	; (80074f8 <_ZN11SolarGators7Drivers9CANDriverC1ER19__CAN_HandleTypeDefm+0xcc>)
 800746e:	50d1      	str	r1, [r2, r3]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3381      	adds	r3, #129	; 0x81
 8007474:	33ff      	adds	r3, #255	; 0xff
 8007476:	0019      	movs	r1, r3
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	2391      	movs	r3, #145	; 0x91
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	50d1      	str	r1, [r2, r3]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	2392      	movs	r3, #146	; 0x92
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	21bc      	movs	r1, #188	; 0xbc
 8007488:	50d1      	str	r1, [r2, r3]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3380      	adds	r3, #128	; 0x80
 800748e:	0019      	movs	r1, r3
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	2393      	movs	r3, #147	; 0x93
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	50d1      	str	r1, [r2, r3]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	2394      	movs	r3, #148	; 0x94
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	0049      	lsls	r1, r1, #1
 80074a2:	50d1      	str	r1, [r2, r3]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	2395      	movs	r3, #149	; 0x95
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	2108      	movs	r1, #8
 80074ac:	50d1      	str	r1, [r2, r3]
{
  can_rx_event_ = osEventFlagsNew(NULL);
 80074ae:	2000      	movs	r0, #0
 80074b0:	f001 fd2c 	bl	8008f0c <osEventFlagsNew>
 80074b4:	0002      	movs	r2, r0
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	679a      	str	r2, [r3, #120]	; 0x78
  if (can_rx_event_ == NULL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <_ZN11SolarGators7Drivers9CANDriverC1ER19__CAN_HandleTypeDefm+0x9a>
  {
      Error_Handler();
 80074c2:	f7f9 ff19 	bl	80012f8 <Error_Handler>
  }

  rx_task_handle_ = osThreadNew((osThreadFunc_t)&CANDriver::HandleReceive, this, &rx_task_attributes_);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	228f      	movs	r2, #143	; 0x8f
 80074ca:	0092      	lsls	r2, r2, #2
 80074cc:	189a      	adds	r2, r3, r2
 80074ce:	68f9      	ldr	r1, [r7, #12]
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <_ZN11SolarGators7Drivers9CANDriverC1ER19__CAN_HandleTypeDefm+0xd0>)
 80074d2:	0018      	movs	r0, r3
 80074d4:	f001 fb70 	bl	8008bb8 <osThreadNew>
 80074d8:	0002      	movs	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	67da      	str	r2, [r3, #124]	; 0x7c
  if (rx_task_handle_ == NULL)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <_ZN11SolarGators7Drivers9CANDriverC1ER19__CAN_HandleTypeDefm+0xbe>
  {
      Error_Handler();
 80074e6:	f7f9 ff07 	bl	80012f8 <Error_Handler>
  }
}
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	0018      	movs	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b004      	add	sp, #16
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	0800dc98 	.word	0x0800dc98
 80074f8:	0800d460 	.word	0x0800d460
 80074fc:	08007545 	.word	0x08007545

08007500 <_ZN11SolarGators7Drivers9CANDriverD1Ev>:

CANDriver::~CANDriver()
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	4a03      	ldr	r2, [pc, #12]	; (8007518 <_ZN11SolarGators7Drivers9CANDriverD1Ev+0x18>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]
{ }
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}
 8007518:	0800dc98 	.word	0x0800dc98

0800751c <_ZN11SolarGators7Drivers9CANDriverD0Ev>:
CANDriver::~CANDriver()
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
{ }
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	0018      	movs	r0, r3
 8007528:	f7ff ffea 	bl	8007500 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
 800752c:	2398      	movs	r3, #152	; 0x98
 800752e:	009a      	lsls	r2, r3, #2
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	0011      	movs	r1, r2
 8007534:	0018      	movs	r0, r3
 8007536:	f005 f911 	bl	800c75c <_ZdlPvj>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	0018      	movs	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}

08007544 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv>:

void CANDriver::HandleReceive()
{
 8007544:	b590      	push	{r4, r7, lr}
 8007546:	b08f      	sub	sp, #60	; 0x3c
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    osEventFlagsWait(can_rx_event_, 0x1, osFlagsWaitAny, osWaitForever);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007550:	2301      	movs	r3, #1
 8007552:	425b      	negs	r3, r3
 8007554:	2200      	movs	r2, #0
 8007556:	2101      	movs	r1, #1
 8007558:	f001 fd74 	bl	8009044 <osEventFlagsWait>
    CAN_RxHeaderTypeDef pHeader;
    uint8_t aData[MAX_DATA_SIZE];

    while(HAL_CAN_GetRxFifoFillLevel(&hcan_, rx_fifo_num_))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007564:	0019      	movs	r1, r3
 8007566:	0010      	movs	r0, r2
 8007568:	f7fb fd34 	bl	8002fd4 <HAL_CAN_GetRxFifoFillLevel>
 800756c:	0003      	movs	r3, r0
 800756e:	1e5a      	subs	r2, r3, #1
 8007570:	4193      	sbcs	r3, r2
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0e9      	beq.n	800754c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>
    {
      HAL_CAN_GetRxMessage(&hcan_, rx_fifo_num_, &pHeader, aData);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8007580:	2308      	movs	r3, #8
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	2418      	movs	r4, #24
 8007586:	193a      	adds	r2, r7, r4
 8007588:	f7fb fc08 	bl	8002d9c <HAL_CAN_GetRxMessage>
      DataModules::DataModule* rx_module = modules_.Find(pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	0021      	movs	r1, r4
 8007592:	187b      	adds	r3, r7, r1
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x5e>
 800759a:	187b      	adds	r3, r7, r1
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	e003      	b.n	80075aa <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x66>
 80075a2:	2318      	movs	r3, #24
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	0019      	movs	r1, r3
 80075ac:	0010      	movs	r0, r2
 80075ae:	f000 f83e 	bl	800762e <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt>
 80075b2:	0003      	movs	r3, r0
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(rx_module != nullptr)
 80075b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0cf      	beq.n	800755c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x18>
      {
        osMutexAcquire(rx_module->mutex_id_, osWaitForever);
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2201      	movs	r2, #1
 80075c2:	4252      	negs	r2, r2
 80075c4:	0011      	movs	r1, r2
 80075c6:	0018      	movs	r0, r3
 80075c8:	f001 fe72 	bl	80092b0 <osMutexAcquire>
        rx_module->FromByteArray(aData);
 80075cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2208      	movs	r2, #8
 80075d6:	18b9      	adds	r1, r7, r2
 80075d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075da:	0010      	movs	r0, r2
 80075dc:	4798      	blx	r3
        osMutexRelease(rx_module->mutex_id_);
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	0018      	movs	r0, r3
 80075e4:	f001 fec0 	bl	8009368 <osMutexRelease>
    while(HAL_CAN_GetRxFifoFillLevel(&hcan_, rx_fifo_num_))
 80075e8:	e7b8      	b.n	800755c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x18>

080075ea <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>:
  osMutexRelease(data->mutex_id_);
  HAL_CAN_AddTxMessage(&hcan_, &pHeader, aData, &pTxMailbox);
}

bool CANDriver::AddRxModule(DataModules::DataModule* module)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  return modules_.Insert(module->id_, module);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	1d18      	adds	r0, r3, #4
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	0019      	movs	r1, r3
 8007602:	f000 f830 	bl	8007666 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_>
 8007606:	0003      	movs	r3, r0
}
 8007608:	0018      	movs	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	b002      	add	sp, #8
 800760e:	bd80      	pop	{r7, pc}

08007610 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EEC1Ev>:
  Map<KEY_T, DATA_T, SIZE>::Map():current_size_(0)
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	669a      	str	r2, [r3, #104]	; 0x68
    root_ = nullptr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	665a      	str	r2, [r3, #100]	; 0x64
  }
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	b002      	add	sp, #8
 800762c:	bd80      	pop	{r7, pc}

0800762e <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt>:
  DATA_T* Map<KEY_T, DATA_T, SIZE>::Find(KEY_T key)
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	000a      	movs	r2, r1
 8007638:	1cbb      	adds	r3, r7, #2
 800763a:	801a      	strh	r2, [r3, #0]
    Node* foundNode = FindNode(root_, key);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007640:	1cbb      	adds	r3, r7, #2
 8007642:	881a      	ldrh	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	0018      	movs	r0, r3
 8007648:	f000 f836 	bl	80076b8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>
 800764c:	0003      	movs	r3, r0
 800764e:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt+0x2c>
      return nullptr;
 8007656:	2300      	movs	r3, #0
 8007658:	e001      	b.n	800765e <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt+0x30>
      return foundNode->data;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
  }
 800765e:	0018      	movs	r0, r3
 8007660:	46bd      	mov	sp, r7
 8007662:	b004      	add	sp, #16
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_>:
  bool Map<KEY_T, DATA_T, SIZE>::Insert(KEY_T key, DATA_T* new_element)
 8007666:	b590      	push	{r4, r7, lr}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	200a      	movs	r0, #10
 8007672:	183b      	adds	r3, r7, r0
 8007674:	1c0a      	adds	r2, r1, #0
 8007676:	801a      	strh	r2, [r3, #0]
    if(current_size_ < MAX_NODES && new_element != nullptr)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800767c:	2b04      	cmp	r3, #4
 800767e:	d816      	bhi.n	80076ae <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_+0x48>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d013      	beq.n	80076ae <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_+0x48>
      root_ = AddNode(root_, NewNode(key, new_element));
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	183b      	adds	r3, r7, r0
 800768e:	8819      	ldrh	r1, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	0018      	movs	r0, r3
 8007694:	f000 f8f2 	bl	800787c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7NewNodeEtPS3_>
 8007698:	0002      	movs	r2, r0
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	0021      	movs	r1, r4
 800769e:	0018      	movs	r0, r3
 80076a0:	f000 f83b 	bl	800771a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>
 80076a4:	0002      	movs	r2, r0
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	665a      	str	r2, [r3, #100]	; 0x64
      return true;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_+0x4a>
    return false;
 80076ae:	2300      	movs	r3, #0
  }
 80076b0:	0018      	movs	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b005      	add	sp, #20
 80076b6:	bd90      	pop	{r4, r7, pc}

080076b8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::FindNode(Node* node, KEY_T key)
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	1dbb      	adds	r3, r7, #6
 80076c4:	801a      	strh	r2, [r3, #0]
    if(node == nullptr)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x18>
      return node;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	e020      	b.n	8007712 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x5a>
    if(key < node->key)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	1dba      	adds	r2, r7, #6
 80076d6:	8812      	ldrh	r2, [r2, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d209      	bcs.n	80076f0 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x38>
      return FindNode(node->left, key);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6899      	ldr	r1, [r3, #8]
 80076e0:	1dbb      	adds	r3, r7, #6
 80076e2:	881a      	ldrh	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	0018      	movs	r0, r3
 80076e8:	f7ff ffe6 	bl	80076b8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>
 80076ec:	0003      	movs	r3, r0
 80076ee:	e010      	b.n	8007712 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x5a>
    else if(key > node->key)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	1dba      	adds	r2, r7, #6
 80076f6:	8812      	ldrh	r2, [r2, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d909      	bls.n	8007710 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x58>
      return FindNode(node->right, key);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	68d9      	ldr	r1, [r3, #12]
 8007700:	1dbb      	adds	r3, r7, #6
 8007702:	881a      	ldrh	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	0018      	movs	r0, r3
 8007708:	f7ff ffd6 	bl	80076b8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>
 800770c:	0003      	movs	r3, r0
 800770e:	e000      	b.n	8007712 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x5a>
      return node;
 8007710:	68bb      	ldr	r3, [r7, #8]
  }
 8007712:	0018      	movs	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	b004      	add	sp, #16
 8007718:	bd80      	pop	{r7, pc}

0800771a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::AddNode(Node* node, Node* new_node)
 800771a:	b590      	push	{r4, r7, lr}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
    if (node == nullptr)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x16>
      return new_node;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	e0a1      	b.n	8007874 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (new_node->key < node->key)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	881a      	ldrh	r2, [r3, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d20a      	bcs.n	8007752 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x38>
        node->left = AddNode(node->left, new_node);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6899      	ldr	r1, [r3, #8]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	0018      	movs	r0, r3
 8007746:	f7ff ffe8 	bl	800771a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>
 800774a:	0002      	movs	r2, r0
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	609a      	str	r2, [r3, #8]
 8007750:	e012      	b.n	8007778 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x5e>
    else if (new_node->key > node->key)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	881a      	ldrh	r2, [r3, #0]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d90a      	bls.n	8007774 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x5a>
        node->right = AddNode(node->right, new_node);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	68d9      	ldr	r1, [r3, #12]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	0018      	movs	r0, r3
 8007768:	f7ff ffd7 	bl	800771a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>
 800776c:	0002      	movs	r2, r0
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	60da      	str	r2, [r3, #12]
 8007772:	e001      	b.n	8007778 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x5e>
        return node;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	e07d      	b.n	8007874 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    node->height = 1 + Max(Height(node->left),
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	0011      	movs	r1, r2
 8007780:	0018      	movs	r0, r3
 8007782:	f000 f8b3 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007786:	0004      	movs	r4, r0
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0011      	movs	r1, r2
 8007790:	0018      	movs	r0, r3
 8007792:	f000 f8ab 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007796:	0002      	movs	r2, r0
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	0021      	movs	r1, r4
 800779c:	0018      	movs	r0, r3
 800779e:	f000 f894 	bl	80078ca <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 80077a2:	0003      	movs	r3, r0
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	611a      	str	r2, [r3, #16]
    int balance = GetBalance(node);
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	0011      	movs	r1, r2
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 f8ab 	bl	800790c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE>
 80077b6:	0003      	movs	r3, r0
 80077b8:	617b      	str	r3, [r7, #20]
    if (balance > 1 && new_node->key < node->left->key)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	dd0e      	ble.n	80077de <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xc4>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	881a      	ldrh	r2, [r3, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d207      	bcs.n	80077de <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xc4>
        return RightRotate(node);
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	0011      	movs	r1, r2
 80077d4:	0018      	movs	r0, r3
 80077d6:	f000 f8b8 	bl	800794a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>
 80077da:	0003      	movs	r3, r0
 80077dc:	e04a      	b.n	8007874 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key > node->right->key)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	3301      	adds	r3, #1
 80077e2:	da0e      	bge.n	8007802 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xe8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	881a      	ldrh	r2, [r3, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d907      	bls.n	8007802 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xe8>
        return LeftRotate(node);
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	0011      	movs	r1, r2
 80077f8:	0018      	movs	r0, r3
 80077fa:	f000 f8ee 	bl	80079da <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>
 80077fe:	0003      	movs	r3, r0
 8007800:	e038      	b.n	8007874 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance > 1 && new_node->key > node->left->key)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b01      	cmp	r3, #1
 8007806:	dd18      	ble.n	800783a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x120>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	881a      	ldrh	r2, [r3, #0]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d911      	bls.n	800783a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x120>
        node->left = LeftRotate(node->left);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f000 f8db 	bl	80079da <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>
 8007824:	0002      	movs	r2, r0
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	609a      	str	r2, [r3, #8]
        return RightRotate(node);
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	0011      	movs	r1, r2
 8007830:	0018      	movs	r0, r3
 8007832:	f000 f88a 	bl	800794a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>
 8007836:	0003      	movs	r3, r0
 8007838:	e01c      	b.n	8007874 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key < node->right->key)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	3301      	adds	r3, #1
 800783e:	da18      	bge.n	8007872 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x158>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	881a      	ldrh	r2, [r3, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d211      	bcs.n	8007872 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x158>
        node->right = RightRotate(node->right);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	0011      	movs	r1, r2
 8007856:	0018      	movs	r0, r3
 8007858:	f000 f877 	bl	800794a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>
 800785c:	0002      	movs	r2, r0
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	60da      	str	r2, [r3, #12]
        return LeftRotate(node);
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	0011      	movs	r1, r2
 8007868:	0018      	movs	r0, r3
 800786a:	f000 f8b6 	bl	80079da <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>
 800786e:	0003      	movs	r3, r0
 8007870:	e000      	b.n	8007874 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    return node;
 8007872:	68bb      	ldr	r3, [r7, #8]
  }
 8007874:	0018      	movs	r0, r3
 8007876:	46bd      	mov	sp, r7
 8007878:	b007      	add	sp, #28
 800787a:	bd90      	pop	{r4, r7, pc}

0800787c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7NewNodeEtPS3_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::NewNode(KEY_T key, DATA_T* new_element)
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	200a      	movs	r0, #10
 8007888:	183b      	adds	r3, r7, r0
 800788a:	1c0a      	adds	r2, r1, #0
 800788c:	801a      	strh	r2, [r3, #0]
      Node* node = &array[current_size_++];
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007892:	1c51      	adds	r1, r2, #1
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6699      	str	r1, [r3, #104]	; 0x68
 8007898:	0013      	movs	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	189b      	adds	r3, r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	18d3      	adds	r3, r2, r3
 80078a4:	617b      	str	r3, [r7, #20]
      node->data = new_element;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	605a      	str	r2, [r3, #4]
      node->key = key;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	183a      	adds	r2, r7, r0
 80078b0:	8812      	ldrh	r2, [r2, #0]
 80078b2:	801a      	strh	r2, [r3, #0]
      node->left = nullptr;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2200      	movs	r2, #0
 80078b8:	609a      	str	r2, [r3, #8]
      node->right = nullptr;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2200      	movs	r2, #0
 80078be:	60da      	str	r2, [r3, #12]
      return node;
 80078c0:	697b      	ldr	r3, [r7, #20]
  }
 80078c2:	0018      	movs	r0, r3
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b006      	add	sp, #24
 80078c8:	bd80      	pop	{r7, pc}

080078ca <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::Max(uint32_t a, uint32_t b)
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	607a      	str	r2, [r7, #4]
      return (a > b)? a : b;
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d901      	bls.n	80078e2 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm+0x18>
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	e000      	b.n	80078e4 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm+0x1a>
 80078e2:	687b      	ldr	r3, [r7, #4]
  }
 80078e4:	0018      	movs	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b004      	add	sp, #16
 80078ea:	bd80      	pop	{r7, pc}

080078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::Height(Node *N)
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE+0x14>
      return 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	e001      	b.n	8007904 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE+0x18>
    return N->height;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
  }
 8007904:	0018      	movs	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	b002      	add	sp, #8
 800790a:	bd80      	pop	{r7, pc}

0800790c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::GetBalance(Node *N)
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE+0x14>
      return 0;
 800791c:	2300      	movs	r3, #0
 800791e:	e010      	b.n	8007942 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE+0x36>
    return Height(N->left) - Height(N->right);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	0011      	movs	r1, r2
 8007928:	0018      	movs	r0, r3
 800792a:	f7ff ffdf 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800792e:	0004      	movs	r4, r0
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	0011      	movs	r1, r2
 8007938:	0018      	movs	r0, r3
 800793a:	f7ff ffd7 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800793e:	0003      	movs	r3, r0
 8007940:	1ae3      	subs	r3, r4, r3
  }
 8007942:	0018      	movs	r0, r3
 8007944:	46bd      	mov	sp, r7
 8007946:	b003      	add	sp, #12
 8007948:	bd90      	pop	{r4, r7, pc}

0800794a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::RightRotate(Node *y)
 800794a:	b590      	push	{r4, r7, lr}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
    Node *x = y->left;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	60bb      	str	r3, [r7, #8]
    x->right = y;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	60da      	str	r2, [r3, #12]
    y->left = T2;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	609a      	str	r2, [r3, #8]
        Height(y->right)) + 1;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	0011      	movs	r1, r2
 8007974:	0018      	movs	r0, r3
 8007976:	f7ff ffb9 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800797a:	0004      	movs	r4, r0
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	0011      	movs	r1, r2
 8007984:	0018      	movs	r0, r3
 8007986:	f7ff ffb1 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800798a:	0002      	movs	r2, r0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	0021      	movs	r1, r4
 8007990:	0018      	movs	r0, r3
 8007992:	f7ff ff9a 	bl	80078ca <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8007996:	0003      	movs	r3, r0
 8007998:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	611a      	str	r2, [r3, #16]
        Height(x->right)) + 1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	0011      	movs	r1, r2
 80079a6:	0018      	movs	r0, r3
 80079a8:	f7ff ffa0 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 80079ac:	0004      	movs	r4, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	0011      	movs	r1, r2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7ff ff98 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 80079bc:	0002      	movs	r2, r0
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	0021      	movs	r1, r4
 80079c2:	0018      	movs	r0, r3
 80079c4:	f7ff ff81 	bl	80078ca <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 80079c8:	0003      	movs	r3, r0
 80079ca:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	611a      	str	r2, [r3, #16]
    return x;
 80079d0:	68fb      	ldr	r3, [r7, #12]
  }
 80079d2:	0018      	movs	r0, r3
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b005      	add	sp, #20
 80079d8:	bd90      	pop	{r4, r7, pc}

080079da <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::LeftRotate(Node *x)
 80079da:	b590      	push	{r4, r7, lr}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
    Node *y = x->right;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	60bb      	str	r3, [r7, #8]
    y->left = x;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	609a      	str	r2, [r3, #8]
    x->right = T2;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	60da      	str	r2, [r3, #12]
        Height(x->right)) + 1;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	0011      	movs	r1, r2
 8007a04:	0018      	movs	r0, r3
 8007a06:	f7ff ff71 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007a0a:	0004      	movs	r4, r0
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	0011      	movs	r1, r2
 8007a14:	0018      	movs	r0, r3
 8007a16:	f7ff ff69 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007a1a:	0002      	movs	r2, r0
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	0021      	movs	r1, r4
 8007a20:	0018      	movs	r0, r3
 8007a22:	f7ff ff52 	bl	80078ca <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8007a26:	0003      	movs	r3, r0
 8007a28:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	611a      	str	r2, [r3, #16]
        Height(y->right)) + 1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	0011      	movs	r1, r2
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff ff58 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007a3c:	0004      	movs	r4, r0
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0011      	movs	r1, r2
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7ff ff50 	bl	80078ec <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007a4c:	0002      	movs	r2, r0
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	0021      	movs	r1, r4
 8007a52:	0018      	movs	r0, r3
 8007a54:	f7ff ff39 	bl	80078ca <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	611a      	str	r2, [r3, #16]
    return y;
 8007a60:	68fb      	ldr	r3, [r7, #12]
  }
 8007a62:	0018      	movs	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b005      	add	sp, #20
 8007a68:	bd90      	pop	{r4, r7, pc}

08007a6a <_ZL5Delaym>:

/*
 * Delay x ms
 */
static void Delay(unsigned long interval)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  osDelay(interval);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	0018      	movs	r0, r3
 8007a76:	f001 f947 	bl	8008d08 <osDelay>
}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b002      	add	sp, #8
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <_ZN5HY28bD1Ev>:
HY28b::~HY28b() {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	4a03      	ldr	r2, [pc, #12]	; (8007a9c <_ZN5HY28bD1Ev+0x18>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
}
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0018      	movs	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b002      	add	sp, #8
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	0800dca8 	.word	0x0800dca8

08007aa0 <_ZN5HY28bD0Ev>:
HY28b::~HY28b() {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
}
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	0018      	movs	r0, r3
 8007aac:	f7ff ffea 	bl	8007a84 <_ZN5HY28bD1Ev>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	210c      	movs	r1, #12
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f004 fe51 	bl	800c75c <_ZdlPvj>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	0018      	movs	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b002      	add	sp, #8
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <_ZL9LCD_resetv>:
 * Output         : None
 * Return         : None
 * Attention      : Uses P10.0 for reset
 *******************************************************************************/
static void LCD_reset()
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8007ac8:	2380      	movs	r3, #128	; 0x80
 8007aca:	01db      	lsls	r3, r3, #7
 8007acc:	480d      	ldr	r0, [pc, #52]	; (8007b04 <_ZL9LCD_resetv+0x40>)
 8007ace:	2201      	movs	r2, #1
 8007ad0:	0019      	movs	r1, r3
 8007ad2:	f7fb ff0a 	bl	80038ea <HAL_GPIO_WritePin>
    Delay(100);
 8007ad6:	2064      	movs	r0, #100	; 0x64
 8007ad8:	f7ff ffc7 	bl	8007a6a <_ZL5Delaym>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8007adc:	2380      	movs	r3, #128	; 0x80
 8007ade:	01db      	lsls	r3, r3, #7
 8007ae0:	4808      	ldr	r0, [pc, #32]	; (8007b04 <_ZL9LCD_resetv+0x40>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	0019      	movs	r1, r3
 8007ae6:	f7fb ff00 	bl	80038ea <HAL_GPIO_WritePin>
    Delay(100);
 8007aea:	2064      	movs	r0, #100	; 0x64
 8007aec:	f7ff ffbd 	bl	8007a6a <_ZL5Delaym>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8007af0:	2380      	movs	r3, #128	; 0x80
 8007af2:	01db      	lsls	r3, r3, #7
 8007af4:	4803      	ldr	r0, [pc, #12]	; (8007b04 <_ZL9LCD_resetv+0x40>)
 8007af6:	2201      	movs	r2, #1
 8007af8:	0019      	movs	r1, r3
 8007afa:	f7fb fef6 	bl	80038ea <HAL_GPIO_WritePin>
}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	48000400 	.word	0x48000400

08007b08 <_ZN5HY28b13DrawRectangleEsssst>:
 * Output         : None
 * Return         : None
 * Attention      : Must draw from left to right, top to bottom!
 *******************************************************************************/
inline void HY28b::DrawRectangle(int16_t xStart, int16_t xEnd, int16_t yStart, int16_t yEnd, uint16_t Color)
{
 8007b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	000c      	movs	r4, r1
 8007b12:	0010      	movs	r0, r2
 8007b14:	0019      	movs	r1, r3
 8007b16:	250a      	movs	r5, #10
 8007b18:	197b      	adds	r3, r7, r5
 8007b1a:	1c22      	adds	r2, r4, #0
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	2408      	movs	r4, #8
 8007b20:	193b      	adds	r3, r7, r4
 8007b22:	1c02      	adds	r2, r0, #0
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	1dbb      	adds	r3, r7, #6
 8007b28:	1c0a      	adds	r2, r1, #0
 8007b2a:	801a      	strh	r2, [r3, #0]
    WriteReg(HOR_ADDR_START_POS, yStart);
 8007b2c:	1dbb      	adds	r3, r7, #6
 8007b2e:	881a      	ldrh	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2150      	movs	r1, #80	; 0x50
 8007b34:	0018      	movs	r0, r3
 8007b36:	f000 fa78 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(HOR_ADDR_END_POS, yEnd);
 8007b3a:	2628      	movs	r6, #40	; 0x28
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	18fa      	adds	r2, r7, r3
 8007b40:	1993      	adds	r3, r2, r6
 8007b42:	881a      	ldrh	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2151      	movs	r1, #81	; 0x51
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f000 fa6e 	bl	800802a <_ZN5HY28b8WriteRegEtt>
	WriteReg(VERT_ADDR_START_POS, xStart);
 8007b4e:	197b      	adds	r3, r7, r5
 8007b50:	881a      	ldrh	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2152      	movs	r1, #82	; 0x52
 8007b56:	0018      	movs	r0, r3
 8007b58:	f000 fa67 	bl	800802a <_ZN5HY28b8WriteRegEtt>
	WriteReg(VERT_ADDR_END_POS, xEnd);
 8007b5c:	193b      	adds	r3, r7, r4
 8007b5e:	881a      	ldrh	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2153      	movs	r1, #83	; 0x53
 8007b64:	0018      	movs	r0, r3
 8007b66:	f000 fa60 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    SetCursor(xStart, yStart);
 8007b6a:	197b      	adds	r3, r7, r5
 8007b6c:	8819      	ldrh	r1, [r3, #0]
 8007b6e:	1dbb      	adds	r3, r7, #6
 8007b70:	881a      	ldrh	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	0018      	movs	r0, r3
 8007b76:	f000 fa76 	bl	8008066 <_ZN5HY28b9SetCursorEtt>
    WriteIndex(GRAM);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2122      	movs	r1, #34	; 0x22
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f000 f9fe 	bl	8007f80 <_ZN5HY28b10WriteIndexEt>
    SPI_CS_LOW;
 8007b84:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <_ZN5HY28b13DrawRectangleEsssst+0xf8>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	2104      	movs	r1, #4
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f7fb fead 	bl	80038ea <HAL_GPIO_WritePin>
    WriteDataStart();
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	0018      	movs	r0, r3
 8007b94:	f000 fa3c 	bl	8008010 <_ZN5HY28b14WriteDataStartEv>
    int total = (xEnd - xStart + 1)*(yEnd - yStart + 1);
 8007b98:	193b      	adds	r3, r7, r4
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	5e9a      	ldrsh	r2, [r3, r2]
 8007b9e:	197b      	adds	r3, r7, r5
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	5e5b      	ldrsh	r3, [r3, r1]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	2308      	movs	r3, #8
 8007baa:	18fb      	adds	r3, r7, r3
 8007bac:	199b      	adds	r3, r3, r6
 8007bae:	2100      	movs	r1, #0
 8007bb0:	5e59      	ldrsh	r1, [r3, r1]
 8007bb2:	1dbb      	adds	r3, r7, #6
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	5e1b      	ldrsh	r3, [r3, r0]
 8007bb8:	1acb      	subs	r3, r1, r3
 8007bba:	3301      	adds	r3, #1
 8007bbc:	4353      	muls	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < total; ++i)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	da0e      	bge.n	8007bea <_ZN5HY28b13DrawRectangleEsssst+0xe2>
    {
        WriteDataOnly(Color);
 8007bcc:	232c      	movs	r3, #44	; 0x2c
 8007bce:	2208      	movs	r2, #8
 8007bd0:	4694      	mov	ip, r2
 8007bd2:	44bc      	add	ip, r7
 8007bd4:	4463      	add	r3, ip
 8007bd6:	881a      	ldrh	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	0011      	movs	r1, r2
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f000 f982 	bl	8007ee6 <_ZN5HY28b13WriteDataOnlyEt>
    for (int i = 0; i < total; ++i)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	3301      	adds	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e7ec      	b.n	8007bc4 <_ZN5HY28b13DrawRectangleEsssst+0xbc>
    }
    SPI_CS_HIGH;
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <_ZN5HY28b13DrawRectangleEsssst+0xf8>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	2104      	movs	r1, #4
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f7fb fe7a 	bl	80038ea <HAL_GPIO_WritePin>
}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b007      	add	sp, #28
 8007bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	48000c00 	.word	0x48000c00

08007c04 <_ZN5HY28b7PutCharEttht>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::PutChar( uint16_t Xpos, uint16_t Ypos, uint8_t ASCI, uint16_t charColor)
{
 8007c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c06:	b08d      	sub	sp, #52	; 0x34
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	000c      	movs	r4, r1
 8007c0e:	0010      	movs	r0, r2
 8007c10:	0019      	movs	r1, r3
 8007c12:	230a      	movs	r3, #10
 8007c14:	18fb      	adds	r3, r7, r3
 8007c16:	1c22      	adds	r2, r4, #0
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	1c02      	adds	r2, r0, #0
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	1dfb      	adds	r3, r7, #7
 8007c24:	1c0a      	adds	r2, r1, #0
 8007c26:	701a      	strb	r2, [r3, #0]
    uint16_t i, j;
    uint8_t buffer[16], tmp_char;
    GetASCIICode(buffer,ASCI);  /* get font data */
 8007c28:	1dfb      	adds	r3, r7, #7
 8007c2a:	781a      	ldrb	r2, [r3, #0]
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	18fb      	adds	r3, r7, r3
 8007c30:	0011      	movs	r1, r2
 8007c32:	0018      	movs	r0, r3
 8007c34:	f7ff faaa 	bl	800718c <_Z12GetASCIICodePhh>
    for( i=0; i<16; i++ )
 8007c38:	2326      	movs	r3, #38	; 0x26
 8007c3a:	18fb      	adds	r3, r7, r3
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	2226      	movs	r2, #38	; 0x26
 8007c42:	18bb      	adds	r3, r7, r2
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d900      	bls.n	8007c4c <_ZN5HY28b7PutCharEttht+0x48>
 8007c4a:	e093      	b.n	8007d74 <_ZN5HY28b7PutCharEttht+0x170>
    {
        tmp_char = buffer[i];
 8007c4c:	18bb      	adds	r3, r7, r2
 8007c4e:	881a      	ldrh	r2, [r3, #0]
 8007c50:	2323      	movs	r3, #35	; 0x23
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	2110      	movs	r1, #16
 8007c56:	1879      	adds	r1, r7, r1
 8007c58:	5c8a      	ldrb	r2, [r1, r2]
 8007c5a:	701a      	strb	r2, [r3, #0]
        for( j=0; j<8; j++ )
 8007c5c:	2324      	movs	r3, #36	; 0x24
 8007c5e:	18fb      	adds	r3, r7, r3
 8007c60:	2200      	movs	r2, #0
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	2024      	movs	r0, #36	; 0x24
 8007c66:	183b      	adds	r3, r7, r0
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	2b07      	cmp	r3, #7
 8007c6c:	d900      	bls.n	8007c70 <_ZN5HY28b7PutCharEttht+0x6c>
 8007c6e:	e07a      	b.n	8007d66 <_ZN5HY28b7PutCharEttht+0x162>
        {
            if( ((tmp_char >> (7 - j)) & 0x01) == 0x01 )
 8007c70:	2323      	movs	r3, #35	; 0x23
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	183b      	adds	r3, r7, r0
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	2107      	movs	r1, #7
 8007c7c:	1acb      	subs	r3, r1, r3
 8007c7e:	411a      	asrs	r2, r3
 8007c80:	0013      	movs	r3, r2
 8007c82:	2201      	movs	r2, #1
 8007c84:	4013      	ands	r3, r2
 8007c86:	d067      	beq.n	8007d58 <_ZN5HY28b7PutCharEttht+0x154>
            {
              if(size_ == 1)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	7a1b      	ldrb	r3, [r3, #8]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d118      	bne.n	8007cc2 <_ZN5HY28b7PutCharEttht+0xbe>
                SetPoint( Xpos + j, Ypos + i, charColor );  /* Character color */
 8007c90:	230a      	movs	r3, #10
 8007c92:	18fa      	adds	r2, r7, r3
 8007c94:	183b      	adds	r3, r7, r0
 8007c96:	8812      	ldrh	r2, [r2, #0]
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	18d3      	adds	r3, r2, r3
 8007c9c:	b299      	uxth	r1, r3
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	18fa      	adds	r2, r7, r3
 8007ca2:	2326      	movs	r3, #38	; 0x26
 8007ca4:	18fb      	adds	r3, r7, r3
 8007ca6:	8812      	ldrh	r2, [r2, #0]
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	18d3      	adds	r3, r2, r3
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	2338      	movs	r3, #56	; 0x38
 8007cb0:	2008      	movs	r0, #8
 8007cb2:	4684      	mov	ip, r0
 8007cb4:	44bc      	add	ip, r7
 8007cb6:	4463      	add	r3, ip
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f8ee 	bl	8007e9c <_ZN5HY28b8SetPointEttt>
 8007cc0:	e04a      	b.n	8007d58 <_ZN5HY28b7PutCharEttht+0x154>
              else
              {
                DrawRectangle(Xpos + j * size_, Xpos + j * size_ + size_, Ypos + i * size_, Ypos + i * size_ + size_, charColor);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	7a1b      	ldrb	r3, [r3, #8]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2024      	movs	r0, #36	; 0x24
 8007cca:	183a      	adds	r2, r7, r0
 8007ccc:	8812      	ldrh	r2, [r2, #0]
 8007cce:	4353      	muls	r3, r2
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	240a      	movs	r4, #10
 8007cd4:	193b      	adds	r3, r7, r4
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	18d3      	adds	r3, r2, r3
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	b219      	sxth	r1, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	7a1b      	ldrb	r3, [r3, #8]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	183a      	adds	r2, r7, r0
 8007ce6:	8812      	ldrh	r2, [r2, #0]
 8007ce8:	4353      	muls	r3, r2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	193b      	adds	r3, r7, r4
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	18d3      	adds	r3, r2, r3
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	7a1b      	ldrb	r3, [r3, #8]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	18d3      	adds	r3, r2, r3
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	b21c      	sxth	r4, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	7a1b      	ldrb	r3, [r3, #8]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2026      	movs	r0, #38	; 0x26
 8007d08:	183a      	adds	r2, r7, r0
 8007d0a:	8812      	ldrh	r2, [r2, #0]
 8007d0c:	4353      	muls	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	2608      	movs	r6, #8
 8007d12:	19bb      	adds	r3, r7, r6
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	18d3      	adds	r3, r2, r3
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	b21d      	sxth	r5, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	7a1b      	ldrb	r3, [r3, #8]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	183a      	adds	r2, r7, r0
 8007d24:	8812      	ldrh	r2, [r2, #0]
 8007d26:	4353      	muls	r3, r2
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	19bb      	adds	r3, r7, r6
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	18d3      	adds	r3, r2, r3
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	7a1b      	ldrb	r3, [r3, #8]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	18d3      	adds	r3, r2, r3
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	b21a      	sxth	r2, r3
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	2338      	movs	r3, #56	; 0x38
 8007d42:	2608      	movs	r6, #8
 8007d44:	46b4      	mov	ip, r6
 8007d46:	44bc      	add	ip, r7
 8007d48:	4463      	add	r3, ip
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	9200      	str	r2, [sp, #0]
 8007d50:	002b      	movs	r3, r5
 8007d52:	0022      	movs	r2, r4
 8007d54:	f7ff fed8 	bl	8007b08 <_ZN5HY28b13DrawRectangleEsssst>
        for( j=0; j<8; j++ )
 8007d58:	2124      	movs	r1, #36	; 0x24
 8007d5a:	187b      	adds	r3, r7, r1
 8007d5c:	881a      	ldrh	r2, [r3, #0]
 8007d5e:	187b      	adds	r3, r7, r1
 8007d60:	3201      	adds	r2, #1
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	e77e      	b.n	8007c64 <_ZN5HY28b7PutCharEttht+0x60>
    for( i=0; i<16; i++ )
 8007d66:	2126      	movs	r1, #38	; 0x26
 8007d68:	187b      	adds	r3, r7, r1
 8007d6a:	881a      	ldrh	r2, [r3, #0]
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	3201      	adds	r2, #1
 8007d70:	801a      	strh	r2, [r3, #0]
 8007d72:	e765      	b.n	8007c40 <_ZN5HY28b7PutCharEttht+0x3c>
              }
            }
        }
    }
}
 8007d74:	46c0      	nop			; (mov r8, r8)
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b00b      	add	sp, #44	; 0x2c
 8007d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d7c <_ZN5HY28b8DrawTextEttPht>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
void HY28b::DrawText(uint16_t Xpos, uint16_t Ypos, uint8_t *str, uint16_t Color)
{
 8007d7c:	b5b0      	push	{r4, r5, r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	0008      	movs	r0, r1
 8007d86:	0011      	movs	r1, r2
 8007d88:	607b      	str	r3, [r7, #4]
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	1c02      	adds	r2, r0, #0
 8007d90:	801a      	strh	r2, [r3, #0]
 8007d92:	2308      	movs	r3, #8
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	1c0a      	adds	r2, r1, #0
 8007d98:	801a      	strh	r2, [r3, #0]
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    WriteReg(HOR_ADDR_START_POS, 0x0000);     /* Horizontal GRAM Start Address */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2150      	movs	r1, #80	; 0x50
 8007da0:	0018      	movs	r0, r3
 8007da2:	f000 f942 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(HOR_ADDR_END_POS, (MAX_SCREEN_Y - 1));  /* Horizontal GRAM End Address */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	22ef      	movs	r2, #239	; 0xef
 8007daa:	2151      	movs	r1, #81	; 0x51
 8007dac:	0018      	movs	r0, r3
 8007dae:	f000 f93c 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_START_POS, 0x0000);    /* Vertical GRAM Start Address */
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	2152      	movs	r1, #82	; 0x52
 8007db8:	0018      	movs	r0, r3
 8007dba:	f000 f936 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_END_POS, (MAX_SCREEN_X - 1)); /* Vertical GRAM Start Address */
 8007dbe:	2340      	movs	r3, #64	; 0x40
 8007dc0:	33ff      	adds	r3, #255	; 0xff
 8007dc2:	001a      	movs	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2153      	movs	r1, #83	; 0x53
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f000 f92e 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    do
    {
        TempChar = *str++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	2117      	movs	r1, #23
 8007dd6:	187a      	adds	r2, r7, r1
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	7013      	strb	r3, [r2, #0]
        PutChar( Xpos, Ypos, TempChar, Color);
 8007ddc:	187b      	adds	r3, r7, r1
 8007dde:	781c      	ldrb	r4, [r3, #0]
 8007de0:	2308      	movs	r3, #8
 8007de2:	18fb      	adds	r3, r7, r3
 8007de4:	881a      	ldrh	r2, [r3, #0]
 8007de6:	250a      	movs	r5, #10
 8007de8:	197b      	adds	r3, r7, r5
 8007dea:	8819      	ldrh	r1, [r3, #0]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	2328      	movs	r3, #40	; 0x28
 8007df0:	18fb      	adds	r3, r7, r3
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	0023      	movs	r3, r4
 8007df8:	f7ff ff04 	bl	8007c04 <_ZN5HY28b7PutCharEttht>
        if( Xpos < MAX_SCREEN_X - 8)
 8007dfc:	0028      	movs	r0, r5
 8007dfe:	183b      	adds	r3, r7, r0
 8007e00:	881a      	ldrh	r2, [r3, #0]
 8007e02:	239c      	movs	r3, #156	; 0x9c
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d20a      	bcs.n	8007e20 <_ZN5HY28b8DrawTextEttPht+0xa4>
        {
            Xpos += (8 * size_);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	7a1b      	ldrb	r3, [r3, #8]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	b299      	uxth	r1, r3
 8007e14:	183b      	adds	r3, r7, r0
 8007e16:	183a      	adds	r2, r7, r0
 8007e18:	8812      	ldrh	r2, [r2, #0]
 8007e1a:	188a      	adds	r2, r1, r2
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	e01d      	b.n	8007e5c <_ZN5HY28b8DrawTextEttPht+0xe0>
        }
        else if ( Ypos < MAX_SCREEN_X - 16)
 8007e20:	2008      	movs	r0, #8
 8007e22:	183b      	adds	r3, r7, r0
 8007e24:	881a      	ldrh	r2, [r3, #0]
 8007e26:	2398      	movs	r3, #152	; 0x98
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d20e      	bcs.n	8007e4c <_ZN5HY28b8DrawTextEttPht+0xd0>
        {
            Xpos = 0;
 8007e2e:	230a      	movs	r3, #10
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	801a      	strh	r2, [r3, #0]
            Ypos += (16 * size_);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	7a1b      	ldrb	r3, [r3, #8]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	b299      	uxth	r1, r3
 8007e40:	183b      	adds	r3, r7, r0
 8007e42:	183a      	adds	r2, r7, r0
 8007e44:	8812      	ldrh	r2, [r2, #0]
 8007e46:	188a      	adds	r2, r1, r2
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	e007      	b.n	8007e5c <_ZN5HY28b8DrawTextEttPht+0xe0>
        }
        else
        {
            Xpos = 0;
 8007e4c:	230a      	movs	r3, #10
 8007e4e:	18fb      	adds	r3, r7, r3
 8007e50:	2200      	movs	r2, #0
 8007e52:	801a      	strh	r2, [r3, #0]
            Ypos = 0;
 8007e54:	2308      	movs	r3, #8
 8007e56:	18fb      	adds	r3, r7, r3
 8007e58:	2200      	movs	r2, #0
 8007e5a:	801a      	strh	r2, [r3, #0]
        }
    }
    while ( *str != 0 );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d000      	beq.n	8007e66 <_ZN5HY28b8DrawTextEttPht+0xea>
    do
 8007e64:	e7b3      	b.n	8007dce <_ZN5HY28b8DrawTextEttPht+0x52>
}
 8007e66:	46c0      	nop			; (mov r8, r8)
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b006      	add	sp, #24
 8007e6c:	bdb0      	pop	{r4, r5, r7, pc}

08007e6e <_ZN5HY28b5ClearEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::Clear(uint16_t Color)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af02      	add	r7, sp, #8
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	000a      	movs	r2, r1
 8007e78:	1cbb      	adds	r3, r7, #2
 8007e7a:	801a      	strh	r2, [r3, #0]
    DrawRectangle(0, MAX_SCREEN_X, 0, MAX_SCREEN_Y, Color);
 8007e7c:	23a0      	movs	r3, #160	; 0xa0
 8007e7e:	005a      	lsls	r2, r3, #1
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	1cbb      	adds	r3, r7, #2
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	23f0      	movs	r3, #240	; 0xf0
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f7ff fe3a 	bl	8007b08 <_ZN5HY28b13DrawRectangleEsssst>
}
 8007e94:	46c0      	nop			; (mov r8, r8)
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b002      	add	sp, #8
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <_ZN5HY28b8SetPointEttt>:
 * Output         : None
 * Return         : None
 * Attention      : 18N Bytes Written
 *******************************************************************************/
void HY28b::SetPoint(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8007e9c:	b5b0      	push	{r4, r5, r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	000c      	movs	r4, r1
 8007ea6:	0010      	movs	r0, r2
 8007ea8:	0019      	movs	r1, r3
 8007eaa:	250a      	movs	r5, #10
 8007eac:	197b      	adds	r3, r7, r5
 8007eae:	1c22      	adds	r2, r4, #0
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	2408      	movs	r4, #8
 8007eb4:	193b      	adds	r3, r7, r4
 8007eb6:	1c02      	adds	r2, r0, #0
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	1dbb      	adds	r3, r7, #6
 8007ebc:	1c0a      	adds	r2, r1, #0
 8007ebe:	801a      	strh	r2, [r3, #0]
    SetCursor(Xpos, Ypos);
 8007ec0:	193b      	adds	r3, r7, r4
 8007ec2:	881a      	ldrh	r2, [r3, #0]
 8007ec4:	197b      	adds	r3, r7, r5
 8007ec6:	8819      	ldrh	r1, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f000 f8cb 	bl	8008066 <_ZN5HY28b9SetCursorEtt>
    WriteReg(GRAM, color);
 8007ed0:	1dbb      	adds	r3, r7, #6
 8007ed2:	881a      	ldrh	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2122      	movs	r1, #34	; 0x22
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f000 f8a6 	bl	800802a <_ZN5HY28b8WriteRegEtt>
}
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	b004      	add	sp, #16
 8007ee4:	bdb0      	pop	{r4, r5, r7, pc}

08007ee6 <_ZN5HY28b13WriteDataOnlyEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteDataOnly(uint16_t data)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	000a      	movs	r2, r1
 8007ef0:	1cbb      	adds	r3, r7, #2
 8007ef2:	801a      	strh	r2, [r3, #0]
    SPISendRecvByte((data >>   8));                    /* Write D8..D15                */
 8007ef4:	1cbb      	adds	r3, r7, #2
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	121b      	asrs	r3, r3, #8
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	0011      	movs	r1, r2
 8007f00:	0018      	movs	r0, r3
 8007f02:	f000 f869 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte((data & 0xFF));                    /* Write D0..D7                 */
 8007f06:	1cbb      	adds	r3, r7, #2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	0011      	movs	r1, r2
 8007f10:	0018      	movs	r0, r3
 8007f12:	f000 f861 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>
}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	b002      	add	sp, #8
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <_ZN5HY28b9WriteDataEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteData(uint16_t data)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	000a      	movs	r2, r1
 8007f2a:	1cbb      	adds	r3, r7, #2
 8007f2c:	801a      	strh	r2, [r3, #0]
    SPI_CS_LOW;
 8007f2e:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <_ZN5HY28b9WriteDataEt+0x5c>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	2104      	movs	r1, #4
 8007f34:	0018      	movs	r0, r3
 8007f36:	f7fb fcd8 	bl	80038ea <HAL_GPIO_WritePin>

    SPISendRecvByte(SPI_START | SPI_WR | SPI_DATA);    /* Write : RS = 1, RW = 0       */
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2172      	movs	r1, #114	; 0x72
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f000 f84a 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte((data >>   8));                    /* Write D8..D15                */
 8007f44:	1cbb      	adds	r3, r7, #2
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	121b      	asrs	r3, r3, #8
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	0011      	movs	r1, r2
 8007f50:	0018      	movs	r0, r3
 8007f52:	f000 f841 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte((data & 0xFF));                    /* Write D0..D7                 */
 8007f56:	1cbb      	adds	r3, r7, #2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0011      	movs	r1, r2
 8007f60:	0018      	movs	r0, r3
 8007f62:	f000 f839 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>

    SPI_CS_HIGH;
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <_ZN5HY28b9WriteDataEt+0x5c>)
 8007f68:	2201      	movs	r2, #1
 8007f6a:	2104      	movs	r1, #4
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	f7fb fcbc 	bl	80038ea <HAL_GPIO_WritePin>
}
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	46bd      	mov	sp, r7
 8007f76:	b002      	add	sp, #8
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	48000c00 	.word	0x48000c00

08007f80 <_ZN5HY28b10WriteIndexEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteIndex(uint16_t index)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	000a      	movs	r2, r1
 8007f8a:	1cbb      	adds	r3, r7, #2
 8007f8c:	801a      	strh	r2, [r3, #0]
    SPI_CS_LOW;
 8007f8e:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <_ZN5HY28b10WriteIndexEt+0x54>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	2104      	movs	r1, #4
 8007f94:	0018      	movs	r0, r3
 8007f96:	f7fb fca8 	bl	80038ea <HAL_GPIO_WritePin>

    /* SPI write data */
    SPISendRecvByte(SPI_START | SPI_WR | SPI_INDEX);   /* Write : RS = 0, RW = 0  */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2170      	movs	r1, #112	; 0x70
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f000 f81a 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte(0);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f000 f815 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte(index);
 8007fae:	1cbb      	adds	r3, r7, #2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	0011      	movs	r1, r2
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f000 f80d 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>

    SPI_CS_HIGH;
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <_ZN5HY28b10WriteIndexEt+0x54>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	2104      	movs	r1, #4
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f7fb fc90 	bl	80038ea <HAL_GPIO_WritePin>
}
 8007fca:	46c0      	nop			; (mov r8, r8)
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	b002      	add	sp, #8
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	46c0      	nop			; (mov r8, r8)
 8007fd4:	48000c00 	.word	0x48000c00

08007fd8 <_ZN5HY28b15SPISendRecvByteEh>:
 * Output         : None
 * Return         : Recieved value
 * Attention      : None
 *******************************************************************************/
inline uint8_t HY28b::SPISendRecvByte (uint8_t byte)
{
 8007fd8:	b590      	push	{r4, r7, lr}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	000a      	movs	r2, r1
 8007fe2:	1cfb      	adds	r3, r7, #3
 8007fe4:	701a      	strb	r2, [r3, #0]
	uint8_t rxData = 0;
 8007fe6:	210f      	movs	r1, #15
 8007fe8:	187b      	adds	r3, r7, r1
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(this->spi, &byte, &rxData, 1, HAL_MAX_DELAY);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6858      	ldr	r0, [r3, #4]
 8007ff2:	000c      	movs	r4, r1
 8007ff4:	187a      	adds	r2, r7, r1
 8007ff6:	1cf9      	adds	r1, r7, #3
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	425b      	negs	r3, r3
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2301      	movs	r3, #1
 8008000:	f7fc fce2 	bl	80049c8 <HAL_SPI_TransmitReceive>
    return rxData;
 8008004:	193b      	adds	r3, r7, r4
 8008006:	781b      	ldrb	r3, [r3, #0]
}
 8008008:	0018      	movs	r0, r3
 800800a:	46bd      	mov	sp, r7
 800800c:	b005      	add	sp, #20
 800800e:	bd90      	pop	{r4, r7, pc}

08008010 <_ZN5HY28b14WriteDataStartEv>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteDataStart(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
    SPISendRecvByte(SPI_START | SPI_WR | SPI_DATA);    /* Write : RS = 1, RW = 0 */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2172      	movs	r1, #114	; 0x72
 800801c:	0018      	movs	r0, r3
 800801e:	f7ff ffdb 	bl	8007fd8 <_ZN5HY28b15SPISendRecvByteEh>
}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	46bd      	mov	sp, r7
 8008026:	b002      	add	sp, #8
 8008028:	bd80      	pop	{r7, pc}

0800802a <_ZN5HY28b8WriteRegEtt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	0008      	movs	r0, r1
 8008034:	0011      	movs	r1, r2
 8008036:	1cbb      	adds	r3, r7, #2
 8008038:	1c02      	adds	r2, r0, #0
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	003b      	movs	r3, r7
 800803e:	1c0a      	adds	r2, r1, #0
 8008040:	801a      	strh	r2, [r3, #0]
    WriteIndex(LCD_Reg);
 8008042:	1cbb      	adds	r3, r7, #2
 8008044:	881a      	ldrh	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	0011      	movs	r1, r2
 800804a:	0018      	movs	r0, r3
 800804c:	f7ff ff98 	bl	8007f80 <_ZN5HY28b10WriteIndexEt>
    WriteData(LCD_RegValue);
 8008050:	003b      	movs	r3, r7
 8008052:	881a      	ldrh	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	0011      	movs	r1, r2
 8008058:	0018      	movs	r0, r3
 800805a:	f7ff ff61 	bl	8007f20 <_ZN5HY28b9WriteDataEt>
}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	46bd      	mov	sp, r7
 8008062:	b002      	add	sp, #8
 8008064:	bd80      	pop	{r7, pc}

08008066 <_ZN5HY28b9SetCursorEtt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::SetCursor(uint16_t Xpos, uint16_t Ypos )
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	0008      	movs	r0, r1
 8008070:	0011      	movs	r1, r2
 8008072:	1cbb      	adds	r3, r7, #2
 8008074:	1c02      	adds	r2, r0, #0
 8008076:	801a      	strh	r2, [r3, #0]
 8008078:	003b      	movs	r3, r7
 800807a:	1c0a      	adds	r2, r1, #0
 800807c:	801a      	strh	r2, [r3, #0]
    WriteReg(GRAM_HORIZONTAL_ADDRESS_SET, Ypos);
 800807e:	003b      	movs	r3, r7
 8008080:	881a      	ldrh	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2120      	movs	r1, #32
 8008086:	0018      	movs	r0, r3
 8008088:	f7ff ffcf 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GRAM_VERTICAL_ADDRESS_SET, Xpos);
 800808c:	1cbb      	adds	r3, r7, #2
 800808e:	881a      	ldrh	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2121      	movs	r1, #33	; 0x21
 8008094:	0018      	movs	r0, r3
 8008096:	f7ff ffc8 	bl	800802a <_ZN5HY28b8WriteRegEtt>
}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	46bd      	mov	sp, r7
 800809e:	b002      	add	sp, #8
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb>:
 * Input          : bool usingTP: determines whether or not to enable TP interrupt
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
HY28b::HY28b(SPI_HandleTypeDef* hspi, bool usingTP):spi{hspi}
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	1dfb      	adds	r3, r7, #7
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	4ab3      	ldr	r2, [pc, #716]	; (8008380 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2dc>)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	605a      	str	r2, [r3, #4]
{
  size_ = 1;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	721a      	strb	r2, [r3, #8]
	SPI_CS_HIGH;
 80080c4:	4baf      	ldr	r3, [pc, #700]	; (8008384 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2e0>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	2104      	movs	r1, #4
 80080ca:	0018      	movs	r0, r3
 80080cc:	f7fb fc0d 	bl	80038ea <HAL_GPIO_WritePin>
	SPI_CS_TP_HIGH;
 80080d0:	4bad      	ldr	r3, [pc, #692]	; (8008388 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2e4>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	2140      	movs	r1, #64	; 0x40
 80080d6:	0018      	movs	r0, r3
 80080d8:	f7fb fc07 	bl	80038ea <HAL_GPIO_WritePin>
//        P4->IFG &= ~BIT0;
//        P4->IE |= BIT0;
//        P4->IES |= BIT0;
    }

    LCD_reset();
 80080dc:	f7ff fcf2 	bl	8007ac4 <_ZL9LCD_resetv>

    WriteReg(0xE5, 0x78F0);                             /* set SRAM internal timing */
 80080e0:	4aaa      	ldr	r2, [pc, #680]	; (800838c <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2e8>)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	21e5      	movs	r1, #229	; 0xe5
 80080e6:	0018      	movs	r0, r3
 80080e8:	f7ff ff9f 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DRIVER_OUTPUT_CONTROL, 0x0100);            /* set Driver Output Control */
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	005a      	lsls	r2, r3, #1
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2101      	movs	r1, #1
 80080f4:	0018      	movs	r0, r3
 80080f6:	f7ff ff98 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DRIVING_WAVE_CONTROL, 0x0700);             /* set 1 line inversion */
 80080fa:	23e0      	movs	r3, #224	; 0xe0
 80080fc:	00da      	lsls	r2, r3, #3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2102      	movs	r1, #2
 8008102:	0018      	movs	r0, r3
 8008104:	f7ff ff91 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(ENTRY_MODE, 0x1038);                       /* set GRAM write direction and BGR=1 */
 8008108:	4aa1      	ldr	r2, [pc, #644]	; (8008390 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2ec>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2103      	movs	r1, #3
 800810e:	0018      	movs	r0, r3
 8008110:	f7ff ff8b 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(RESIZING_CONTROL, 0x0000);                 /* Resize register */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	2104      	movs	r1, #4
 800811a:	0018      	movs	r0, r3
 800811c:	f7ff ff85 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_2, 0x0207);                /* set the back porch and front porch */
 8008120:	4a9c      	ldr	r2, [pc, #624]	; (8008394 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2f0>)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2108      	movs	r1, #8
 8008126:	0018      	movs	r0, r3
 8008128:	f7ff ff7f 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_3, 0x0000);                /* set non-display area refresh cycle ISC[3:0] */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	2109      	movs	r1, #9
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff ff79 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_4, 0x0000);                /* FMARK function */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	210a      	movs	r1, #10
 800813e:	0018      	movs	r0, r3
 8008140:	f7ff ff73 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(RGB_DISPLAY_INTERFACE_CONTROL_1, 0x0000);  /* RGB interface setting */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	210c      	movs	r1, #12
 800814a:	0018      	movs	r0, r3
 800814c:	f7ff ff6d 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(FRAME_MARKER_POSITION, 0x0000);            /* Frame marker Position */
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	210d      	movs	r1, #13
 8008156:	0018      	movs	r0, r3
 8008158:	f7ff ff67 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(RGB_DISPLAY_INTERFACE_CONTROL_2, 0x0000);  /* RGB interface polarity */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	210f      	movs	r1, #15
 8008162:	0018      	movs	r0, r3
 8008164:	f7ff ff61 	bl	800802a <_ZN5HY28b8WriteRegEtt>

    /* Power On sequence */
    WriteReg(POWER_CONTROL_1, 0x0000);        /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	2110      	movs	r1, #16
 800816e:	0018      	movs	r0, r3
 8008170:	f7ff ff5b 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_2, 0x0007);        /* DC1[2:0], DC0[2:0], VC[2:0] */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2207      	movs	r2, #7
 8008178:	2111      	movs	r1, #17
 800817a:	0018      	movs	r0, r3
 800817c:	f7ff ff55 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_3, 0x0000);        /* VREG1OUT voltage */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	2112      	movs	r1, #18
 8008186:	0018      	movs	r0, r3
 8008188:	f7ff ff4f 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_4, 0x0000);        /* VDV[4:0] for VCOM amplitude */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	2113      	movs	r1, #19
 8008192:	0018      	movs	r0, r3
 8008194:	f7ff ff49 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_1, 0x0001);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	2107      	movs	r1, #7
 800819e:	0018      	movs	r0, r3
 80081a0:	f7ff ff43 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    Delay(200);
 80081a4:	20c8      	movs	r0, #200	; 0xc8
 80081a6:	f7ff fc60 	bl	8007a6a <_ZL5Delaym>

    /* Dis-charge capacitor power voltage */
    WriteReg(POWER_CONTROL_1, 0x1090);              /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80081aa:	4a7b      	ldr	r2, [pc, #492]	; (8008398 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2f4>)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2110      	movs	r1, #16
 80081b0:	0018      	movs	r0, r3
 80081b2:	f7ff ff3a 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_2, 0x0227);              /* Set DC1[2:0], DC0[2:0], VC[2:0] */
 80081b6:	4a79      	ldr	r2, [pc, #484]	; (800839c <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2f8>)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2111      	movs	r1, #17
 80081bc:	0018      	movs	r0, r3
 80081be:	f7ff ff34 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    Delay(50);                                      /* Delay 50ms */
 80081c2:	2032      	movs	r0, #50	; 0x32
 80081c4:	f7ff fc51 	bl	8007a6a <_ZL5Delaym>
    WriteReg(POWER_CONTROL_3, 0x001F);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	221f      	movs	r2, #31
 80081cc:	2112      	movs	r1, #18
 80081ce:	0018      	movs	r0, r3
 80081d0:	f7ff ff2b 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    Delay(50);                                      /* Delay 50ms */
 80081d4:	2032      	movs	r0, #50	; 0x32
 80081d6:	f7ff fc48 	bl	8007a6a <_ZL5Delaym>
    WriteReg(POWER_CONTROL_4, 0x1500);              /* VDV[4:0] for VCOM amplitude */
 80081da:	23a8      	movs	r3, #168	; 0xa8
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2113      	movs	r1, #19
 80081e2:	0018      	movs	r0, r3
 80081e4:	f7ff ff21 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_7, 0x0027);              /* 04 VCM[5:0] for VCOMH */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2227      	movs	r2, #39	; 0x27
 80081ec:	2129      	movs	r1, #41	; 0x29
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7ff ff1b 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(FRAME_RATE_AND_COLOR_CONTROL, 0x000D); /* Set Frame Rate */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	220d      	movs	r2, #13
 80081f8:	212b      	movs	r1, #43	; 0x2b
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7ff ff15 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    Delay(50);                                      /* Delay 50ms */
 8008200:	2032      	movs	r0, #50	; 0x32
 8008202:	f7ff fc32 	bl	8007a6a <_ZL5Delaym>
    WriteReg(GRAM_HORIZONTAL_ADDRESS_SET, 0x0000);  /* GRAM horizontal Address */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	2120      	movs	r1, #32
 800820c:	0018      	movs	r0, r3
 800820e:	f7ff ff0c 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GRAM_VERTICAL_ADDRESS_SET, 0x0000);    /* GRAM Vertical Address */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	2121      	movs	r1, #33	; 0x21
 8008218:	0018      	movs	r0, r3
 800821a:	f7ff ff06 	bl	800802a <_ZN5HY28b8WriteRegEtt>

    /* Adjust the Gamma Curve */
    WriteReg(GAMMA_CONTROL_1,    0x0000);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	2130      	movs	r1, #48	; 0x30
 8008224:	0018      	movs	r0, r3
 8008226:	f7ff ff00 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_2,    0x0707);
 800822a:	4a5d      	ldr	r2, [pc, #372]	; (80083a0 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2fc>)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2131      	movs	r1, #49	; 0x31
 8008230:	0018      	movs	r0, r3
 8008232:	f7ff fefa 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_3,    0x0307);
 8008236:	4a5b      	ldr	r2, [pc, #364]	; (80083a4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x300>)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2132      	movs	r1, #50	; 0x32
 800823c:	0018      	movs	r0, r3
 800823e:	f7ff fef4 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_4,    0x0200);
 8008242:	2380      	movs	r3, #128	; 0x80
 8008244:	009a      	lsls	r2, r3, #2
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2135      	movs	r1, #53	; 0x35
 800824a:	0018      	movs	r0, r3
 800824c:	f7ff feed 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_5,    0x0008);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2208      	movs	r2, #8
 8008254:	2136      	movs	r1, #54	; 0x36
 8008256:	0018      	movs	r0, r3
 8008258:	f7ff fee7 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_6,    0x0004);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2204      	movs	r2, #4
 8008260:	2137      	movs	r1, #55	; 0x37
 8008262:	0018      	movs	r0, r3
 8008264:	f7ff fee1 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_7,    0x0000);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	2138      	movs	r1, #56	; 0x38
 800826e:	0018      	movs	r0, r3
 8008270:	f7ff fedb 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_8,    0x0707);
 8008274:	4a4a      	ldr	r2, [pc, #296]	; (80083a0 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2fc>)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2139      	movs	r1, #57	; 0x39
 800827a:	0018      	movs	r0, r3
 800827c:	f7ff fed5 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_9,    0x0002);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2202      	movs	r2, #2
 8008284:	213c      	movs	r1, #60	; 0x3c
 8008286:	0018      	movs	r0, r3
 8008288:	f7ff fecf 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_10,   0x1D04);
 800828c:	4a46      	ldr	r2, [pc, #280]	; (80083a8 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x304>)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	213d      	movs	r1, #61	; 0x3d
 8008292:	0018      	movs	r0, r3
 8008294:	f7ff fec9 	bl	800802a <_ZN5HY28b8WriteRegEtt>

    /* Set GRAM area */
    WriteReg(HOR_ADDR_START_POS, 0x0000);             /* Horizontal GRAM Start Address */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	2150      	movs	r1, #80	; 0x50
 800829e:	0018      	movs	r0, r3
 80082a0:	f7ff fec3 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(HOR_ADDR_END_POS, (MAX_SCREEN_Y - 1));   /* Horizontal GRAM End Address */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	22ef      	movs	r2, #239	; 0xef
 80082a8:	2151      	movs	r1, #81	; 0x51
 80082aa:	0018      	movs	r0, r3
 80082ac:	f7ff febd 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_START_POS, 0x0000);            /* Vertical GRAM Start Address */
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	2152      	movs	r1, #82	; 0x52
 80082b6:	0018      	movs	r0, r3
 80082b8:	f7ff feb7 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_END_POS, (MAX_SCREEN_X - 1));  /* Vertical GRAM Start Address */
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	33ff      	adds	r3, #255	; 0xff
 80082c0:	001a      	movs	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2153      	movs	r1, #83	; 0x53
 80082c6:	0018      	movs	r0, r3
 80082c8:	f7ff feaf 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GATE_SCAN_CONTROL_0X60, 0x2700);         /* Gate Scan Line */
 80082cc:	239c      	movs	r3, #156	; 0x9c
 80082ce:	019a      	lsls	r2, r3, #6
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2160      	movs	r1, #96	; 0x60
 80082d4:	0018      	movs	r0, r3
 80082d6:	f7ff fea8 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GATE_SCAN_CONTROL_0X61, 0x0001);         /* NDL,VLE, REV */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	2161      	movs	r1, #97	; 0x61
 80082e0:	0018      	movs	r0, r3
 80082e2:	f7ff fea2 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GATE_SCAN_CONTROL_0X6A, 0x0000);         /* set scrolling line */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	216a      	movs	r1, #106	; 0x6a
 80082ec:	0018      	movs	r0, r3
 80082ee:	f7ff fe9c 	bl	800802a <_ZN5HY28b8WriteRegEtt>

    /* Partial Display Control */
    WriteReg(PART_IMAGE_1_DISPLAY_POS, 0x0000);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	2180      	movs	r1, #128	; 0x80
 80082f8:	0018      	movs	r0, r3
 80082fa:	f7ff fe96 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_1_START_END_ADDR_0x81, 0x0000);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	2181      	movs	r1, #129	; 0x81
 8008304:	0018      	movs	r0, r3
 8008306:	f7ff fe90 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_1_START_END_ADDR_0x82, 0x0000);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	2181      	movs	r1, #129	; 0x81
 8008310:	0018      	movs	r0, r3
 8008312:	f7ff fe8a 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMAGE_2_DISPLAY_POS, 0x0000);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	2183      	movs	r1, #131	; 0x83
 800831c:	0018      	movs	r0, r3
 800831e:	f7ff fe84 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_2_START_END_ADDR_0x84, 0x0000);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	2184      	movs	r1, #132	; 0x84
 8008328:	0018      	movs	r0, r3
 800832a:	f7ff fe7e 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_2_START_END_ADDR_0x85, 0x0000);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	2185      	movs	r1, #133	; 0x85
 8008334:	0018      	movs	r0, r3
 8008336:	f7ff fe78 	bl	800802a <_ZN5HY28b8WriteRegEtt>

    /* Panel Control */
    WriteReg(PANEL_ITERFACE_CONTROL_1, 0x0010);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2210      	movs	r2, #16
 800833e:	2190      	movs	r1, #144	; 0x90
 8008340:	0018      	movs	r0, r3
 8008342:	f7ff fe72 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PANEL_ITERFACE_CONTROL_2, 0x0600);
 8008346:	23c0      	movs	r3, #192	; 0xc0
 8008348:	00da      	lsls	r2, r3, #3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2192      	movs	r1, #146	; 0x92
 800834e:	0018      	movs	r0, r3
 8008350:	f7ff fe6b 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_1, 0x0133); /* 262K color and display ON */
 8008354:	2334      	movs	r3, #52	; 0x34
 8008356:	33ff      	adds	r3, #255	; 0xff
 8008358:	001a      	movs	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2107      	movs	r1, #7
 800835e:	0018      	movs	r0, r3
 8008360:	f7ff fe63 	bl	800802a <_ZN5HY28b8WriteRegEtt>
    Delay(50); /* delay 50 ms */
 8008364:	2032      	movs	r0, #50	; 0x32
 8008366:	f7ff fb80 	bl	8007a6a <_ZL5Delaym>

    Clear(HY28b::BLACK);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2100      	movs	r1, #0
 800836e:	0018      	movs	r0, r3
 8008370:	f7ff fd7d 	bl	8007e6e <_ZN5HY28b5ClearEt>
}
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0018      	movs	r0, r3
 8008378:	46bd      	mov	sp, r7
 800837a:	b004      	add	sp, #16
 800837c:	bd80      	pop	{r7, pc}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	0800dca8 	.word	0x0800dca8
 8008384:	48000c00 	.word	0x48000c00
 8008388:	48000400 	.word	0x48000400
 800838c:	000078f0 	.word	0x000078f0
 8008390:	00001038 	.word	0x00001038
 8008394:	00000207 	.word	0x00000207
 8008398:	00001090 	.word	0x00001090
 800839c:	00000227 	.word	0x00000227
 80083a0:	00000707 	.word	0x00000707
 80083a4:	00000307 	.word	0x00000307
 80083a8:	00001d04 	.word	0x00001d04

080083ac <_ZN5HY28b7SetSizeEh>:
//    touchPoint.y = ((float)TP_ReadReg(CHY)/0xFFF)*(MAX_SCREEN_Y - 1);
    return touchPoint;
}

void HY28b::SetSize(uint8_t size)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	000a      	movs	r2, r1
 80083b6:	1cfb      	adds	r3, r7, #3
 80083b8:	701a      	strb	r2, [r3, #0]
  size_ = size;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	1cfa      	adds	r2, r7, #3
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	721a      	strb	r2, [r3, #8]
}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	46bd      	mov	sp, r7
 80083c6:	b002      	add	sp, #8
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>:

#include <LED.hpp>

namespace SolarGators::Drivers {

LED::LED(const char* name, GPIO_TypeDef* port, uint16_t pin):on_(false), name_(name), port_(port), pin_(pin)
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	001a      	movs	r2, r3
 80083da:	1cbb      	adds	r3, r7, #2
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	4a0c      	ldr	r2, [pc, #48]	; (8008410 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft+0x44>)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	711a      	strb	r2, [r3, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	60da      	str	r2, [r3, #12]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	1cba      	adds	r2, r7, #2
 80083fa:	8812      	ldrh	r2, [r2, #0]
 80083fc:	821a      	strh	r2, [r3, #16]
{
  TurnOff();
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	0018      	movs	r0, r3
 8008402:	f000 f827 	bl	8008454 <_ZN11SolarGators7Drivers3LED7TurnOffEv>
}
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	0018      	movs	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	b004      	add	sp, #16
 800840e:	bd80      	pop	{r7, pc}
 8008410:	0800dcb8 	.word	0x0800dcb8

08008414 <_ZN11SolarGators7Drivers3LEDD1Ev>:

LED::~LED()
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	4a03      	ldr	r2, [pc, #12]	; (800842c <_ZN11SolarGators7Drivers3LEDD1Ev+0x18>)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	601a      	str	r2, [r3, #0]
{

}
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	0018      	movs	r0, r3
 8008426:	46bd      	mov	sp, r7
 8008428:	b002      	add	sp, #8
 800842a:	bd80      	pop	{r7, pc}
 800842c:	0800dcb8 	.word	0x0800dcb8

08008430 <_ZN11SolarGators7Drivers3LEDD0Ev>:
LED::~LED()
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
}
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0018      	movs	r0, r3
 800843c:	f7ff ffea 	bl	8008414 <_ZN11SolarGators7Drivers3LEDD1Ev>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2114      	movs	r1, #20
 8008444:	0018      	movs	r0, r3
 8008446:	f004 f989 	bl	800c75c <_ZdlPvj>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	0018      	movs	r0, r3
 800844e:	46bd      	mov	sp, r7
 8008450:	b002      	add	sp, #8
 8008452:	bd80      	pop	{r7, pc}

08008454 <_ZN11SolarGators7Drivers3LED7TurnOffEv>:
{
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_SET);
  on_ = true;
}
void LED::TurnOff()
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_RESET);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68d8      	ldr	r0, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	8a1b      	ldrh	r3, [r3, #16]
 8008464:	2200      	movs	r2, #0
 8008466:	0019      	movs	r1, r3
 8008468:	f7fb fa3f 	bl	80038ea <HAL_GPIO_WritePin>
  on_ = false;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	711a      	strb	r2, [r3, #4]
}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	46bd      	mov	sp, r7
 8008476:	b002      	add	sp, #8
 8008478:	bd80      	pop	{r7, pc}

0800847a <_ZN11SolarGators7Drivers3LED6ToggleEv>:
void LED::Toggle()
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(port_, pin_);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8a1b      	ldrh	r3, [r3, #16]
 800848a:	0019      	movs	r1, r3
 800848c:	0010      	movs	r0, r2
 800848e:	f7fb fa49 	bl	8003924 <HAL_GPIO_TogglePin>
  on_ = !on_;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	791b      	ldrb	r3, [r3, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	4053      	eors	r3, r2
 800849a:	b2da      	uxtb	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	711a      	strb	r2, [r3, #4]
}
 80084a0:	46c0      	nop			; (mov r8, r8)
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b002      	add	sp, #8
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4a05      	ldr	r2, [pc, #20]	; (80084cc <_ZNSt7__cxx119to_stringEi+0x24>)
 80084b6:	4906      	ldr	r1, [pc, #24]	; (80084d0 <_ZNSt7__cxx119to_stringEi+0x28>)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	0013      	movs	r3, r2
 80084be:	2210      	movs	r2, #16
 80084c0:	f000 f9fc 	bl	80088bc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	46bd      	mov	sp, r7
 80084c8:	b002      	add	sp, #8
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	0800d470 	.word	0x0800d470
 80084d0:	0800ccb9 	.word	0x0800ccb9

080084d4 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b>:
#include <string>

namespace SolarGators {
namespace Drivers {

UI::UI(uint16_t background_color, HY28b& display):background_color_(background_color),display_(display)
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	200a      	movs	r0, #10
 80084e0:	183b      	adds	r3, r7, r0
 80084e2:	1c0a      	adds	r2, r1, #0
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	4a21      	ldr	r2, [pc, #132]	; (800856c <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0x98>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	183a      	adds	r2, r7, r0
 80084f0:	8812      	ldrh	r2, [r2, #0]
 80084f2:	809a      	strh	r2, [r3, #4]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	4252      	negs	r2, r2
 80084fa:	80da      	strh	r2, [r3, #6]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	609a      	str	r2, [r3, #8]
{
  speed_ = 0;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	731a      	strb	r2, [r3, #12]
  current_ = 0;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	735a      	strb	r2, [r3, #13]
  state_of_charge_ = 0;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	739a      	strb	r2, [r3, #14]
  DrawTitle(Speed_Title_Pos, "Speed");
 8008514:	4916      	ldr	r1, [pc, #88]	; (8008570 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0x9c>)
 8008516:	4b17      	ldr	r3, [pc, #92]	; (8008574 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xa0>)
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	881a      	ldrh	r2, [r3, #0]
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	041b      	lsls	r3, r3, #16
 8008520:	431a      	orrs	r2, r3
 8008522:	2300      	movs	r3, #0
 8008524:	0013      	movs	r3, r2
 8008526:	000a      	movs	r2, r1
 8008528:	0019      	movs	r1, r3
 800852a:	f000 f9a8 	bl	800887e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>
  DrawTitle(SOC_Title_Pos, "SOC");
 800852e:	4912      	ldr	r1, [pc, #72]	; (8008578 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xa4>)
 8008530:	4b12      	ldr	r3, [pc, #72]	; (800857c <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xa8>)
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	881a      	ldrh	r2, [r3, #0]
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	431a      	orrs	r2, r3
 800853c:	2300      	movs	r3, #0
 800853e:	0013      	movs	r3, r2
 8008540:	000a      	movs	r2, r1
 8008542:	0019      	movs	r1, r3
 8008544:	f000 f99b 	bl	800887e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>
  DrawTitle(Current_Title_Pos, "Current");
 8008548:	490d      	ldr	r1, [pc, #52]	; (8008580 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xac>)
 800854a:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xb0>)
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	881a      	ldrh	r2, [r3, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	041b      	lsls	r3, r3, #16
 8008554:	431a      	orrs	r2, r3
 8008556:	2300      	movs	r3, #0
 8008558:	0013      	movs	r3, r2
 800855a:	000a      	movs	r2, r1
 800855c:	0019      	movs	r1, r3
 800855e:	f000 f98e 	bl	800887e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>
}
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	0018      	movs	r0, r3
 8008566:	46bd      	mov	sp, r7
 8008568:	b004      	add	sp, #16
 800856a:	bd80      	pop	{r7, pc}
 800856c:	0800dcec 	.word	0x0800dcec
 8008570:	0800d474 	.word	0x0800d474
 8008574:	0800dcd8 	.word	0x0800dcd8
 8008578:	0800d47c 	.word	0x0800d47c
 800857c:	0800dce0 	.word	0x0800dce0
 8008580:	0800d480 	.word	0x0800d480
 8008584:	0800dcdc 	.word	0x0800dcdc

08008588 <_ZN11SolarGators7Drivers2UID1Ev>:

UI::~UI()
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	4a03      	ldr	r2, [pc, #12]	; (80085a0 <_ZN11SolarGators7Drivers2UID1Ev+0x18>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
{

}
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b002      	add	sp, #8
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	0800dcec 	.word	0x0800dcec

080085a4 <_ZN11SolarGators7Drivers2UID0Ev>:
UI::~UI()
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
}
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7ff ffea 	bl	8008588 <_ZN11SolarGators7Drivers2UID1Ev>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2110      	movs	r1, #16
 80085b8:	0018      	movs	r0, r3
 80085ba:	f004 f8cf 	bl	800c75c <_ZdlPvj>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	0018      	movs	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	b002      	add	sp, #8
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh>:

void UI::UpdateSpeed(uint8_t new_speed)
{
 80085c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ca:	b091      	sub	sp, #68	; 0x44
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	000a      	movs	r2, r1
 80085d2:	1cfb      	adds	r3, r7, #3
 80085d4:	701a      	strb	r2, [r3, #0]
  std::string new_speed_s = std::to_string(new_speed);
 80085d6:	1cfb      	adds	r3, r7, #3
 80085d8:	781a      	ldrb	r2, [r3, #0]
 80085da:	2620      	movs	r6, #32
 80085dc:	19bb      	adds	r3, r7, r6
 80085de:	0011      	movs	r1, r2
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7ff ff61 	bl	80084a8 <_ZNSt7__cxx119to_stringEi>
  std::string old_speed_s = std::to_string(speed_);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	7b1b      	ldrb	r3, [r3, #12]
 80085ea:	001a      	movs	r2, r3
 80085ec:	2408      	movs	r4, #8
 80085ee:	193b      	adds	r3, r7, r4
 80085f0:	0011      	movs	r1, r2
 80085f2:	0018      	movs	r0, r3
 80085f4:	f7ff ff58 	bl	80084a8 <_ZNSt7__cxx119to_stringEi>
  display_.SetSize(Speed_Size);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2105      	movs	r1, #5
 80085fe:	0018      	movs	r0, r3
 8008600:	f7ff fed4 	bl	80083ac <_ZN5HY28b7SetSizeEh>
  UpdateDisplayValue(Speed_Position, Speed_Char_Size, old_speed_s.c_str(), new_speed_s.c_str());
 8008604:	193b      	adds	r3, r7, r4
 8008606:	0018      	movs	r0, r3
 8008608:	f004 f91f 	bl	800c84a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800860c:	0005      	movs	r5, r0
 800860e:	19bb      	adds	r3, r7, r6
 8008610:	0018      	movs	r0, r3
 8008612:	f004 f91a 	bl	800c84a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008616:	0001      	movs	r1, r0
 8008618:	4a11      	ldr	r2, [pc, #68]	; (8008660 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh+0x98>)
 800861a:	4b12      	ldr	r3, [pc, #72]	; (8008664 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh+0x9c>)
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	9100      	str	r1, [sp, #0]
 8008620:	8811      	ldrh	r1, [r2, #0]
 8008622:	8852      	ldrh	r2, [r2, #2]
 8008624:	0412      	lsls	r2, r2, #16
 8008626:	430a      	orrs	r2, r1
 8008628:	0014      	movs	r4, r2
 800862a:	881a      	ldrh	r2, [r3, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	041b      	lsls	r3, r3, #16
 8008630:	4313      	orrs	r3, r2
 8008632:	0019      	movs	r1, r3
 8008634:	002b      	movs	r3, r5
 8008636:	0022      	movs	r2, r4
 8008638:	f000 f8b6 	bl	80087a8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>
  speed_ = new_speed;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	1cfa      	adds	r2, r7, #3
 8008640:	7812      	ldrb	r2, [r2, #0]
 8008642:	731a      	strb	r2, [r3, #12]
  std::string old_speed_s = std::to_string(speed_);
 8008644:	2408      	movs	r4, #8
 8008646:	193b      	adds	r3, r7, r4
 8008648:	0018      	movs	r0, r3
 800864a:	f004 f8f8 	bl	800c83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string new_speed_s = std::to_string(new_speed);
 800864e:	19bb      	adds	r3, r7, r6
 8008650:	0018      	movs	r0, r3
 8008652:	f004 f8f4 	bl	800c83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8008656:	46c0      	nop			; (mov r8, r8)
 8008658:	46bd      	mov	sp, r7
 800865a:	b00f      	add	sp, #60	; 0x3c
 800865c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865e:	46c0      	nop			; (mov r8, r8)
 8008660:	0800dcc4 	.word	0x0800dcc4
 8008664:	0800dccc 	.word	0x0800dccc

08008668 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh>:
void UI::UpdateCurrent(uint8_t new_current)
{
 8008668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866a:	b091      	sub	sp, #68	; 0x44
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	000a      	movs	r2, r1
 8008672:	1cfb      	adds	r3, r7, #3
 8008674:	701a      	strb	r2, [r3, #0]
  std::string new_s = std::to_string(new_current);
 8008676:	1cfb      	adds	r3, r7, #3
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	2620      	movs	r6, #32
 800867c:	19bb      	adds	r3, r7, r6
 800867e:	0011      	movs	r1, r2
 8008680:	0018      	movs	r0, r3
 8008682:	f7ff ff11 	bl	80084a8 <_ZNSt7__cxx119to_stringEi>
  std::string old_s = std::to_string(current_);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7b5b      	ldrb	r3, [r3, #13]
 800868a:	001a      	movs	r2, r3
 800868c:	2408      	movs	r4, #8
 800868e:	193b      	adds	r3, r7, r4
 8008690:	0011      	movs	r1, r2
 8008692:	0018      	movs	r0, r3
 8008694:	f7ff ff08 	bl	80084a8 <_ZNSt7__cxx119to_stringEi>
  display_.SetSize(Current_Size);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	2104      	movs	r1, #4
 800869e:	0018      	movs	r0, r3
 80086a0:	f7ff fe84 	bl	80083ac <_ZN5HY28b7SetSizeEh>
  UpdateDisplayValue(Current_Position, Current_Char_Size, old_s.c_str(), new_s.c_str());
 80086a4:	193b      	adds	r3, r7, r4
 80086a6:	0018      	movs	r0, r3
 80086a8:	f004 f8cf 	bl	800c84a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80086ac:	0005      	movs	r5, r0
 80086ae:	19bb      	adds	r3, r7, r6
 80086b0:	0018      	movs	r0, r3
 80086b2:	f004 f8ca 	bl	800c84a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80086b6:	0001      	movs	r1, r0
 80086b8:	4a11      	ldr	r2, [pc, #68]	; (8008700 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh+0x98>)
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh+0x9c>)
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	9100      	str	r1, [sp, #0]
 80086c0:	8811      	ldrh	r1, [r2, #0]
 80086c2:	8852      	ldrh	r2, [r2, #2]
 80086c4:	0412      	lsls	r2, r2, #16
 80086c6:	430a      	orrs	r2, r1
 80086c8:	0014      	movs	r4, r2
 80086ca:	881a      	ldrh	r2, [r3, #0]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	041b      	lsls	r3, r3, #16
 80086d0:	4313      	orrs	r3, r2
 80086d2:	0019      	movs	r1, r3
 80086d4:	002b      	movs	r3, r5
 80086d6:	0022      	movs	r2, r4
 80086d8:	f000 f866 	bl	80087a8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>
  current_ = new_current;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	1cfa      	adds	r2, r7, #3
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	735a      	strb	r2, [r3, #13]
  std::string old_s = std::to_string(current_);
 80086e4:	2408      	movs	r4, #8
 80086e6:	193b      	adds	r3, r7, r4
 80086e8:	0018      	movs	r0, r3
 80086ea:	f004 f8a8 	bl	800c83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string new_s = std::to_string(new_current);
 80086ee:	19bb      	adds	r3, r7, r6
 80086f0:	0018      	movs	r0, r3
 80086f2:	f004 f8a4 	bl	800c83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	46bd      	mov	sp, r7
 80086fa:	b00f      	add	sp, #60	; 0x3c
 80086fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	0800dcc0 	.word	0x0800dcc0
 8008704:	0800dcd0 	.word	0x0800dcd0

08008708 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh>:
void UI::UpdateSOC(uint8_t new_soc)
{
 8008708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800870a:	b091      	sub	sp, #68	; 0x44
 800870c:	af02      	add	r7, sp, #8
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	000a      	movs	r2, r1
 8008712:	1cfb      	adds	r3, r7, #3
 8008714:	701a      	strb	r2, [r3, #0]
  std::string new_s = std::to_string(new_soc);
 8008716:	1cfb      	adds	r3, r7, #3
 8008718:	781a      	ldrb	r2, [r3, #0]
 800871a:	2620      	movs	r6, #32
 800871c:	19bb      	adds	r3, r7, r6
 800871e:	0011      	movs	r1, r2
 8008720:	0018      	movs	r0, r3
 8008722:	f7ff fec1 	bl	80084a8 <_ZNSt7__cxx119to_stringEi>
  std::string old_s = std::to_string(state_of_charge_);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7b9b      	ldrb	r3, [r3, #14]
 800872a:	001a      	movs	r2, r3
 800872c:	2408      	movs	r4, #8
 800872e:	193b      	adds	r3, r7, r4
 8008730:	0011      	movs	r1, r2
 8008732:	0018      	movs	r0, r3
 8008734:	f7ff feb8 	bl	80084a8 <_ZNSt7__cxx119to_stringEi>
  display_.SetSize(SOC_Size);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	2104      	movs	r1, #4
 800873e:	0018      	movs	r0, r3
 8008740:	f7ff fe34 	bl	80083ac <_ZN5HY28b7SetSizeEh>
  UpdateDisplayValue(SOC_Position, SOC_Char_Size, old_s.c_str(), new_s.c_str());
 8008744:	193b      	adds	r3, r7, r4
 8008746:	0018      	movs	r0, r3
 8008748:	f004 f87f 	bl	800c84a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800874c:	0005      	movs	r5, r0
 800874e:	19bb      	adds	r3, r7, r6
 8008750:	0018      	movs	r0, r3
 8008752:	f004 f87a 	bl	800c84a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008756:	0001      	movs	r1, r0
 8008758:	4a11      	ldr	r2, [pc, #68]	; (80087a0 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh+0x98>)
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh+0x9c>)
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	9100      	str	r1, [sp, #0]
 8008760:	8811      	ldrh	r1, [r2, #0]
 8008762:	8852      	ldrh	r2, [r2, #2]
 8008764:	0412      	lsls	r2, r2, #16
 8008766:	430a      	orrs	r2, r1
 8008768:	0014      	movs	r4, r2
 800876a:	881a      	ldrh	r2, [r3, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	4313      	orrs	r3, r2
 8008772:	0019      	movs	r1, r3
 8008774:	002b      	movs	r3, r5
 8008776:	0022      	movs	r2, r4
 8008778:	f000 f816 	bl	80087a8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>
  state_of_charge_ = new_soc;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	1cfa      	adds	r2, r7, #3
 8008780:	7812      	ldrb	r2, [r2, #0]
 8008782:	739a      	strb	r2, [r3, #14]
  std::string old_s = std::to_string(state_of_charge_);
 8008784:	2408      	movs	r4, #8
 8008786:	193b      	adds	r3, r7, r4
 8008788:	0018      	movs	r0, r3
 800878a:	f004 f858 	bl	800c83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string new_s = std::to_string(new_soc);
 800878e:	19bb      	adds	r3, r7, r6
 8008790:	0018      	movs	r0, r3
 8008792:	f004 f854 	bl	800c83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	46bd      	mov	sp, r7
 800879a:	b00f      	add	sp, #60	; 0x3c
 800879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	0800dcc8 	.word	0x0800dcc8
 80087a4:	0800dcd4 	.word	0x0800dcd4

080087a8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>:

void UI::UpdateDisplayValue(point_t pos, dimension_t char_size, const char* old_value, const char* new_value)
{
 80087a8:	b5b0      	push	{r4, r5, r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	2008      	movs	r0, #8
 80087b2:	1838      	adds	r0, r7, r0
 80087b4:	6001      	str	r1, [r0, #0]
 80087b6:	1d39      	adds	r1, r7, #4
 80087b8:	600a      	str	r2, [r1, #0]
 80087ba:	603b      	str	r3, [r7, #0]
  // See if strings are the same
  uint8_t i = 0;
 80087bc:	2317      	movs	r3, #23
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	2200      	movs	r2, #0
 80087c2:	701a      	strb	r2, [r3, #0]
  while (*old_value && (*old_value == *new_value))
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d012      	beq.n	80087f2 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x4a>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d10c      	bne.n	80087f2 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x4a>
  {
    ++i;
 80087d8:	2217      	movs	r2, #23
 80087da:	18bb      	adds	r3, r7, r2
 80087dc:	18ba      	adds	r2, r7, r2
 80087de:	7812      	ldrb	r2, [r2, #0]
 80087e0:	3201      	adds	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
    ++old_value;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	603b      	str	r3, [r7, #0]
    ++new_value;
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	3301      	adds	r3, #1
 80087ee:	62bb      	str	r3, [r7, #40]	; 0x28
  while (*old_value && (*old_value == *new_value))
 80087f0:	e7e8      	b.n	80087c4 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x1c>
  }
  if(*old_value == '\0')
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d03d      	beq.n	8008876 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0xce>
    return;
  display_.DrawText(pos.x + i * char_size.x, pos.y, (uint8_t*)old_value, background_color_);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6898      	ldr	r0, [r3, #8]
 80087fe:	2408      	movs	r4, #8
 8008800:	193b      	adds	r3, r7, r4
 8008802:	881a      	ldrh	r2, [r3, #0]
 8008804:	2517      	movs	r5, #23
 8008806:	197b      	adds	r3, r7, r5
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	1d39      	adds	r1, r7, #4
 800880e:	8809      	ldrh	r1, [r1, #0]
 8008810:	434b      	muls	r3, r1
 8008812:	b29b      	uxth	r3, r3
 8008814:	18d3      	adds	r3, r2, r3
 8008816:	b299      	uxth	r1, r3
 8008818:	193b      	adds	r3, r7, r4
 800881a:	885a      	ldrh	r2, [r3, #2]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	889b      	ldrh	r3, [r3, #4]
 8008820:	683c      	ldr	r4, [r7, #0]
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	0023      	movs	r3, r4
 8008826:	f7ff faa9 	bl	8007d7c <_ZN5HY28b8DrawTextEttPht>
  if(*new_value == '\0')
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d108      	bne.n	8008844 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x9c>
  {
    new_value -= i;
 8008832:	197b      	adds	r3, r7, r5
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	425b      	negs	r3, r3
 8008838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800883a:	18d3      	adds	r3, r2, r3
 800883c:	62bb      	str	r3, [r7, #40]	; 0x28
    i = 0;
 800883e:	197b      	adds	r3, r7, r5
 8008840:	2200      	movs	r2, #0
 8008842:	701a      	strb	r2, [r3, #0]
  }
  display_.DrawText(pos.x + i * char_size.x, pos.y, (uint8_t*)new_value, display_.RED);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6898      	ldr	r0, [r3, #8]
 8008848:	2408      	movs	r4, #8
 800884a:	193b      	adds	r3, r7, r4
 800884c:	881a      	ldrh	r2, [r3, #0]
 800884e:	2317      	movs	r3, #23
 8008850:	18fb      	adds	r3, r7, r3
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	b29b      	uxth	r3, r3
 8008856:	1d39      	adds	r1, r7, #4
 8008858:	8809      	ldrh	r1, [r1, #0]
 800885a:	434b      	muls	r3, r1
 800885c:	b29b      	uxth	r3, r3
 800885e:	18d3      	adds	r3, r2, r3
 8008860:	b299      	uxth	r1, r3
 8008862:	193b      	adds	r3, r7, r4
 8008864:	885a      	ldrh	r2, [r3, #2]
 8008866:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8008868:	23f8      	movs	r3, #248	; 0xf8
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	0023      	movs	r3, r4
 8008870:	f7ff fa84 	bl	8007d7c <_ZN5HY28b8DrawTextEttPht>
 8008874:	e000      	b.n	8008878 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0xd0>
    return;
 8008876:	46c0      	nop			; (mov r8, r8)
}
 8008878:	46bd      	mov	sp, r7
 800887a:	b006      	add	sp, #24
 800887c:	bdb0      	pop	{r4, r5, r7, pc}

0800887e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>:

void UI::DrawTitle(point_t pos, const char* title)
{
 800887e:	b590      	push	{r4, r7, lr}
 8008880:	b087      	sub	sp, #28
 8008882:	af02      	add	r7, sp, #8
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	2408      	movs	r4, #8
 8008888:	193b      	adds	r3, r7, r4
 800888a:	6019      	str	r1, [r3, #0]
 800888c:	607a      	str	r2, [r7, #4]
  display_.SetSize(Title_Size);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2101      	movs	r1, #1
 8008894:	0018      	movs	r0, r3
 8008896:	f7ff fd89 	bl	80083ac <_ZN5HY28b7SetSizeEh>
  display_.DrawText(pos.x, pos.y, (uint8_t*)title, title_color_);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6898      	ldr	r0, [r3, #8]
 800889e:	193b      	adds	r3, r7, r4
 80088a0:	8819      	ldrh	r1, [r3, #0]
 80088a2:	193b      	adds	r3, r7, r4
 80088a4:	885a      	ldrh	r2, [r3, #2]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	687c      	ldr	r4, [r7, #4]
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	0023      	movs	r3, r4
 80088b0:	f7ff fa64 	bl	8007d7c <_ZN5HY28b8DrawTextEttPht>
}
 80088b4:	46c0      	nop			; (mov r8, r8)
 80088b6:	46bd      	mov	sp, r7
 80088b8:	b005      	add	sp, #20
 80088ba:	bd90      	pop	{r4, r7, pc}

080088bc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 80088bc:	b408      	push	{r3}
 80088be:	b5b0      	push	{r4, r5, r7, lr}
 80088c0:	b089      	sub	sp, #36	; 0x24
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3307      	adds	r3, #7
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	466a      	mov	r2, sp
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	469d      	mov	sp, r3
 80088d8:	466b      	mov	r3, sp
 80088da:	3307      	adds	r3, #7
 80088dc:	08db      	lsrs	r3, r3, #3
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 80088e2:	2330      	movs	r3, #48	; 0x30
 80088e4:	2208      	movs	r2, #8
 80088e6:	4694      	mov	ip, r2
 80088e8:	44bc      	add	ip, r7
 80088ea:	4463      	add	r3, ip
 80088ec:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	69f8      	ldr	r0, [r7, #28]
 80088f6:	68bc      	ldr	r4, [r7, #8]
 80088f8:	47a0      	blx	r4
 80088fa:	0003      	movs	r3, r0
 80088fc:	61bb      	str	r3, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	18d4      	adds	r4, r2, r3
 8008904:	2514      	movs	r5, #20
 8008906:	197b      	adds	r3, r7, r5
 8008908:	0018      	movs	r0, r3
 800890a:	f003 ff40 	bl	800c78e <_ZNSaIcEC1Ev>
 800890e:	197b      	adds	r3, r7, r5
 8008910:	69f9      	ldr	r1, [r7, #28]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	0022      	movs	r2, r4
 8008916:	f000 f80c 	bl	8008932 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800891a:	197b      	adds	r3, r7, r5
 800891c:	0018      	movs	r0, r3
 800891e:	f003 ff37 	bl	800c790 <_ZNSaIcED1Ev>
 8008922:	46c0      	nop			; (mov r8, r8)
    }
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	46bd      	mov	sp, r7
 8008928:	b009      	add	sp, #36	; 0x24
 800892a:	bcb0      	pop	{r4, r5, r7}
 800892c:	bc08      	pop	{r3}
 800892e:	b001      	add	sp, #4
 8008930:	4718      	bx	r3

08008932 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8008932:	b590      	push	{r4, r7, lr}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8008940:	68fc      	ldr	r4, [r7, #12]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	0018      	movs	r0, r3
 8008946:	f003 ff3a 	bl	800c7be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800894a:	0001      	movs	r1, r0
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	001a      	movs	r2, r3
 8008950:	0020      	movs	r0, r4
 8008952:	f003 ff7c 	bl	800c84e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	0018      	movs	r0, r3
 800895e:	f000 f805 	bl	800896c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	0018      	movs	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	b005      	add	sp, #20
 800896a:	bd90      	pop	{r4, r7, pc}

0800896c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	68b9      	ldr	r1, [r7, #8]
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 f804 	bl	800898a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	46bd      	mov	sp, r7
 8008986:	b006      	add	sp, #24
 8008988:	bd80      	pop	{r7, pc}

0800898a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800898a:	b590      	push	{r4, r7, lr}
 800898c:	b087      	sub	sp, #28
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	003a      	movs	r2, r7
 8008998:	7013      	strb	r3, [r2, #0]
          _M_construct(__beg, __end, _Tag());
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	68b9      	ldr	r1, [r7, #8]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	1c23      	adds	r3, r4, #0
 80089a2:	f000 f805 	bl	80089b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	46bd      	mov	sp, r7
 80089aa:	b007      	add	sp, #28
 80089ac:	bd90      	pop	{r4, r7, pc}
	...

080089b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	003a      	movs	r2, r7
 80089be:	7013      	strb	r3, [r2, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	0018      	movs	r0, r3
 80089c4:	f000 f842 	bl	8008a4c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 80089c8:	1e03      	subs	r3, r0, #0
 80089ca:	d005      	beq.n	80089d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d001      	beq.n	80089d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80089d8:	2300      	movs	r3, #0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x36>
	  std::__throw_logic_error(__N("basic_string::"
 80089de:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x98>)
 80089e0:	0018      	movs	r0, r3
 80089e2:	f003 fed9 	bl	800c798 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	0011      	movs	r1, r2
 80089ec:	0018      	movs	r0, r3
 80089ee:	f000 f839 	bl	8008a64 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80089f2:	0003      	movs	r3, r0
 80089f4:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b0f      	cmp	r3, #15
 80089fa:	d912      	bls.n	8008a22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x72>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80089fc:	2314      	movs	r3, #20
 80089fe:	18f9      	adds	r1, r7, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	0018      	movs	r0, r3
 8008a06:	f003 fee3 	bl	800c7d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008a0a:	0002      	movs	r2, r0
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	0011      	movs	r1, r2
 8008a10:	0018      	movs	r0, r3
 8008a12:	f003 fed0 	bl	800c7b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	0011      	movs	r1, r2
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f003 fed0 	bl	800c7c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	0018      	movs	r0, r3
 8008a26:	f003 fec8 	bl	800c7ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	0019      	movs	r1, r3
 8008a30:	f003 ff00 	bl	800c834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	0011      	movs	r1, r2
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	f003 fec3 	bl	800c7c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8008a40:	46c0      	nop			; (mov r8, r8)
 8008a42:	46bd      	mov	sp, r7
 8008a44:	b006      	add	sp, #24
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	0800d488 	.word	0x0800d488

08008a4c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	425a      	negs	r2, r3
 8008a58:	4153      	adcs	r3, r2
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	b002      	add	sp, #8
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008a64:	b5b0      	push	{r4, r5, r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008a6e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008a70:	1d3b      	adds	r3, r7, #4
 8008a72:	0018      	movs	r0, r3
 8008a74:	f000 f80b 	bl	8008a8e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	1c2a      	adds	r2, r5, #0
 8008a7c:	0019      	movs	r1, r3
 8008a7e:	0020      	movs	r0, r4
 8008a80:	f000 f80d 	bl	8008a9e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8008a84:	0003      	movs	r3, r0
    }
 8008a86:	0018      	movs	r0, r3
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	b004      	add	sp, #16
 8008a8c:	bdb0      	pop	{r4, r5, r7, pc}

08008a8e <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008a96:	1c18      	adds	r0, r3, #0
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	b002      	add	sp, #8
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	1d3b      	adds	r3, r7, #4
 8008aaa:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	1ad3      	subs	r3, r2, r3
    }
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	b004      	add	sp, #16
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ac2:	f3ef 8305 	mrs	r3, IPSR
 8008ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ace:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad2:	607b      	str	r3, [r7, #4]
  return(result);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <osKernelInitialize+0x2e>
 8008ada:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <osKernelInitialize+0x54>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d103      	bne.n	8008aea <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8008ae2:	2306      	movs	r3, #6
 8008ae4:	425b      	negs	r3, r3
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	e00c      	b.n	8008b04 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <osKernelInitialize+0x54>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d105      	bne.n	8008afe <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008af2:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <osKernelInitialize+0x54>)
 8008af4:	2201      	movs	r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	e002      	b.n	8008b04 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8008afe:	2301      	movs	r3, #1
 8008b00:	425b      	negs	r3, r3
 8008b02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008b04:	68fb      	ldr	r3, [r7, #12]
}
 8008b06:	0018      	movs	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b004      	add	sp, #16
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	20000d3c 	.word	0x20000d3c

08008b14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b1a:	f3ef 8305 	mrs	r3, IPSR
 8008b1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b26:	f3ef 8310 	mrs	r3, PRIMASK
 8008b2a:	607b      	str	r3, [r7, #4]
  return(result);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d007      	beq.n	8008b42 <osKernelStart+0x2e>
 8008b32:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <osKernelStart+0x58>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d103      	bne.n	8008b42 <osKernelStart+0x2e>
    stat = osErrorISR;
 8008b3a:	2306      	movs	r3, #6
 8008b3c:	425b      	negs	r3, r3
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e00e      	b.n	8008b60 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008b42:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <osKernelStart+0x58>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d107      	bne.n	8008b5a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8008b4a:	4b08      	ldr	r3, [pc, #32]	; (8008b6c <osKernelStart+0x58>)
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008b50:	f002 f93c 	bl	800adcc <vTaskStartScheduler>
      stat = osOK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	e002      	b.n	8008b60 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	425b      	negs	r3, r3
 8008b5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008b60:	68fb      	ldr	r3, [r7, #12]
}
 8008b62:	0018      	movs	r0, r3
 8008b64:	46bd      	mov	sp, r7
 8008b66:	b004      	add	sp, #16
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	20000d3c 	.word	0x20000d3c

08008b70 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b76:	f3ef 8305 	mrs	r3, IPSR
 8008b7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d109      	bne.n	8008b96 <osKernelGetTickCount+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b82:	f3ef 8310 	mrs	r3, PRIMASK
 8008b86:	607b      	str	r3, [r7, #4]
  return(result);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <osKernelGetTickCount+0x30>
 8008b8e:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <osKernelGetTickCount+0x44>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d104      	bne.n	8008ba0 <osKernelGetTickCount+0x30>
    ticks = xTaskGetTickCountFromISR();
 8008b96:	f002 fa1d 	bl	800afd4 <xTaskGetTickCountFromISR>
 8008b9a:	0003      	movs	r3, r0
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	e003      	b.n	8008ba8 <osKernelGetTickCount+0x38>
  } else {
    ticks = xTaskGetTickCount();
 8008ba0:	f002 fa0a 	bl	800afb8 <xTaskGetTickCount>
 8008ba4:	0003      	movs	r3, r0
 8008ba6:	60fb      	str	r3, [r7, #12]
  }

  return (ticks);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
}
 8008baa:	0018      	movs	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b004      	add	sp, #16
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	46c0      	nop			; (mov r8, r8)
 8008bb4:	20000d3c 	.word	0x20000d3c

08008bb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bb8:	b5b0      	push	{r4, r5, r7, lr}
 8008bba:	b090      	sub	sp, #64	; 0x40
 8008bbc:	af04      	add	r7, sp, #16
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc8:	f3ef 8305 	mrs	r3, IPSR
 8008bcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8008bce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d000      	beq.n	8008bd6 <osThreadNew+0x1e>
 8008bd4:	e090      	b.n	8008cf8 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <osThreadNew+0x34>
 8008be2:	4b48      	ldr	r3, [pc, #288]	; (8008d04 <osThreadNew+0x14c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d100      	bne.n	8008bec <osThreadNew+0x34>
 8008bea:	e085      	b.n	8008cf8 <osThreadNew+0x140>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d100      	bne.n	8008bf4 <osThreadNew+0x3c>
 8008bf2:	e081      	b.n	8008cf8 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008bf8:	2318      	movs	r3, #24
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8008bfc:	2117      	movs	r1, #23
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	2200      	movs	r2, #0
 8008c02:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8008c04:	187b      	adds	r3, r7, r1
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	425b      	negs	r3, r3
 8008c0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d044      	beq.n	8008c9e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <osThreadNew+0x6a>
        name = attr->name;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <osThreadNew+0x8e>
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	2b38      	cmp	r3, #56	; 0x38
 8008c3a:	d804      	bhi.n	8008c46 <osThreadNew+0x8e>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	4013      	ands	r3, r2
 8008c44:	d001      	beq.n	8008c4a <osThreadNew+0x92>
        return (NULL);
 8008c46:	2300      	movs	r3, #0
 8008c48:	e057      	b.n	8008cfa <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	089b      	lsrs	r3, r3, #2
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00e      	beq.n	8008c80 <osThreadNew+0xc8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	2bbb      	cmp	r3, #187	; 0xbb
 8008c68:	d90a      	bls.n	8008c80 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <osThreadNew+0xc8>
        mem = 1;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	623b      	str	r3, [r7, #32]
 8008c7e:	e010      	b.n	8008ca2 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <osThreadNew+0xea>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d108      	bne.n	8008ca2 <osThreadNew+0xea>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d104      	bne.n	8008ca2 <osThreadNew+0xea>
          mem = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	623b      	str	r3, [r7, #32]
 8008c9c:	e001      	b.n	8008ca2 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d112      	bne.n	8008cce <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008cb0:	68bd      	ldr	r5, [r7, #8]
 8008cb2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8008cb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	9201      	str	r2, [sp, #4]
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	002b      	movs	r3, r5
 8008cc2:	0022      	movs	r2, r4
 8008cc4:	f001 fecd 	bl	800aa62 <xTaskCreateStatic>
 8008cc8:	0003      	movs	r3, r0
 8008cca:	613b      	str	r3, [r7, #16]
 8008ccc:	e014      	b.n	8008cf8 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d111      	bne.n	8008cf8 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	68bc      	ldr	r4, [r7, #8]
 8008cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	2310      	movs	r3, #16
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	0023      	movs	r3, r4
 8008cea:	f001 fefd 	bl	800aae8 <xTaskCreate>
 8008cee:	0003      	movs	r3, r0
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d001      	beq.n	8008cf8 <osThreadNew+0x140>
          hTask = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008cf8:	693b      	ldr	r3, [r7, #16]
}
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	b00c      	add	sp, #48	; 0x30
 8008d00:	bdb0      	pop	{r4, r5, r7, pc}
 8008d02:	46c0      	nop			; (mov r8, r8)
 8008d04:	20000d3c 	.word	0x20000d3c

08008d08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d10:	f3ef 8305 	mrs	r3, IPSR
 8008d14:	613b      	str	r3, [r7, #16]
  return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d109      	bne.n	8008d30 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d007      	beq.n	8008d38 <osDelay+0x30>
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <osDelay+0x4c>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d103      	bne.n	8008d38 <osDelay+0x30>
    stat = osErrorISR;
 8008d30:	2306      	movs	r3, #6
 8008d32:	425b      	negs	r3, r3
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e008      	b.n	8008d4a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <osDelay+0x42>
      vTaskDelay(ticks);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f002 f81b 	bl	800ad80 <vTaskDelay>
    }
  }

  return (stat);
 8008d4a:	697b      	ldr	r3, [r7, #20]
}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	b006      	add	sp, #24
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000d3c 	.word	0x20000d3c

08008d58 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	0018      	movs	r0, r3
 8008d64:	f003 f9e2 	bl	800c12c <pvTimerGetTimerID>
 8008d68:	0003      	movs	r3, r0
 8008d6a:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <TimerCallback+0x26>
    callb->func (callb->arg);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	4790      	blx	r2
  }
}
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	46bd      	mov	sp, r7
 8008d82:	b004      	add	sp, #16
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08e      	sub	sp, #56	; 0x38
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	230b      	movs	r3, #11
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	1c0a      	adds	r2, r1, #0
 8008d9a:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da0:	f3ef 8305 	mrs	r3, IPSR
 8008da4:	61bb      	str	r3, [r7, #24]
  return(result);
 8008da6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d000      	beq.n	8008dae <osTimerNew+0x26>
 8008dac:	e06b      	b.n	8008e86 <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dae:	f3ef 8310 	mrs	r3, PRIMASK
 8008db2:	617b      	str	r3, [r7, #20]
  return(result);
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <osTimerNew+0x3a>
 8008dba:	4b35      	ldr	r3, [pc, #212]	; (8008e90 <osTimerNew+0x108>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d061      	beq.n	8008e86 <osTimerNew+0xfe>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d05e      	beq.n	8008e86 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008dc8:	2008      	movs	r0, #8
 8008dca:	f003 fb21 	bl	800c410 <pvPortMalloc>
 8008dce:	0003      	movs	r3, r0
 8008dd0:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d056      	beq.n	8008e86 <osTimerNew+0xfe>
      callb->func = func;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008de4:	230b      	movs	r3, #11
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <osTimerNew+0x6c>
        reload = pdFALSE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
 8008df2:	e001      	b.n	8008df8 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8008df4:	2301      	movs	r3, #1
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	425b      	negs	r3, r3
 8008dfc:	623b      	str	r3, [r7, #32]
      name = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01c      	beq.n	8008e42 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <osTimerNew+0x8e>
          name = attr->name;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d006      	beq.n	8008e2c <osTimerNew+0xa4>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	2b2f      	cmp	r3, #47	; 0x2f
 8008e24:	d902      	bls.n	8008e2c <osTimerNew+0xa4>
          mem = 1;
 8008e26:	2301      	movs	r3, #1
 8008e28:	623b      	str	r3, [r7, #32]
 8008e2a:	e00c      	b.n	8008e46 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d108      	bne.n	8008e46 <osTimerNew+0xbe>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <osTimerNew+0xbe>
            mem = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	623b      	str	r3, [r7, #32]
 8008e40:	e001      	b.n	8008e46 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d10e      	bne.n	8008e6a <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	69f9      	ldr	r1, [r7, #28]
 8008e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	4b0e      	ldr	r3, [pc, #56]	; (8008e94 <osTimerNew+0x10c>)
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	000b      	movs	r3, r1
 8008e5e:	2101      	movs	r1, #1
 8008e60:	f002 fe7d 	bl	800bb5e <xTimerCreateStatic>
 8008e64:	0003      	movs	r3, r0
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e68:	e00d      	b.n	8008e86 <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008e70:	69f9      	ldr	r1, [r7, #28]
 8008e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e76:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <osTimerNew+0x10c>)
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	000b      	movs	r3, r1
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	f002 fe4b 	bl	800bb18 <xTimerCreate>
 8008e82:	0003      	movs	r3, r0
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008e88:	0018      	movs	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b00c      	add	sp, #48	; 0x30
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000d3c 	.word	0x20000d3c
 8008e94:	08008d59 	.word	0x08008d59

08008e98 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea6:	f3ef 8305 	mrs	r3, IPSR
 8008eaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d109      	bne.n	8008ec6 <osTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <osTimerStart+0x36>
 8008ebe:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <osTimerStart+0x70>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d103      	bne.n	8008ece <osTimerStart+0x36>
    stat = osErrorISR;
 8008ec6:	2306      	movs	r3, #6
 8008ec8:	425b      	negs	r3, r3
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e017      	b.n	8008efe <osTimerStart+0x66>
  }
  else if (hTimer == NULL) {
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <osTimerStart+0x44>
    stat = osErrorParameter;
 8008ed4:	2304      	movs	r3, #4
 8008ed6:	425b      	negs	r3, r3
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e010      	b.n	8008efe <osTimerStart+0x66>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	6938      	ldr	r0, [r7, #16]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	2104      	movs	r1, #4
 8008ee8:	f002 fe8e 	bl	800bc08 <xTimerGenericCommand>
 8008eec:	0003      	movs	r3, r0
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d102      	bne.n	8008ef8 <osTimerStart+0x60>
      stat = osOK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	e002      	b.n	8008efe <osTimerStart+0x66>
    } else {
      stat = osErrorResource;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	425b      	negs	r3, r3
 8008efc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008efe:	697b      	ldr	r3, [r7, #20]
}
 8008f00:	0018      	movs	r0, r3
 8008f02:	46bd      	mov	sp, r7
 8008f04:	b006      	add	sp, #24
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20000d3c 	.word	0x20000d3c

08008f0c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f18:	f3ef 8305 	mrs	r3, IPSR
 8008f1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f1e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d139      	bne.n	8008f98 <osEventFlagsNew+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f24:	f3ef 8310 	mrs	r3, PRIMASK
 8008f28:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <osEventFlagsNew+0x2c>
 8008f30:	4b1c      	ldr	r3, [pc, #112]	; (8008fa4 <osEventFlagsNew+0x98>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d02f      	beq.n	8008f98 <osEventFlagsNew+0x8c>
    mem = -1;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	425b      	negs	r3, r3
 8008f3c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d015      	beq.n	8008f70 <osEventFlagsNew+0x64>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d006      	beq.n	8008f5a <osEventFlagsNew+0x4e>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	2b1f      	cmp	r3, #31
 8008f52:	d902      	bls.n	8008f5a <osEventFlagsNew+0x4e>
        mem = 1;
 8008f54:	2301      	movs	r3, #1
 8008f56:	613b      	str	r3, [r7, #16]
 8008f58:	e00c      	b.n	8008f74 <osEventFlagsNew+0x68>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d108      	bne.n	8008f74 <osEventFlagsNew+0x68>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <osEventFlagsNew+0x68>
          mem = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	613b      	str	r3, [r7, #16]
 8008f6e:	e001      	b.n	8008f74 <osEventFlagsNew+0x68>
        }
      }
    }
    else {
      mem = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d107      	bne.n	8008f8a <osEventFlagsNew+0x7e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f000 fc26 	bl	80097d0 <xEventGroupCreateStatic>
 8008f84:	0003      	movs	r3, r0
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e006      	b.n	8008f98 <osEventFlagsNew+0x8c>
    }
    else {
      if (mem == 0) {
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <osEventFlagsNew+0x8c>
        hEventGroup = xEventGroupCreate();
 8008f90:	f000 fc43 	bl	800981a <xEventGroupCreate>
 8008f94:	0003      	movs	r3, r0
 8008f96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008f98:	697b      	ldr	r3, [r7, #20]
}
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	b006      	add	sp, #24
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	20000d3c 	.word	0x20000d3c

08008fa8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <osEventFlagsSet+0x1c>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	0e1b      	lsrs	r3, r3, #24
 8008fc0:	061b      	lsls	r3, r3, #24
 8008fc2:	d003      	beq.n	8008fcc <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8008fc4:	2304      	movs	r3, #4
 8008fc6:	425b      	negs	r3, r3
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e032      	b.n	8009032 <osEventFlagsSet+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fcc:	f3ef 8305 	mrs	r3, IPSR
 8008fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8008fd2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d109      	bne.n	8008fec <osEventFlagsSet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008fdc:	613b      	str	r3, [r7, #16]
  return(result);
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01c      	beq.n	800901e <osEventFlagsSet+0x76>
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <osEventFlagsSet+0x94>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d118      	bne.n	800901e <osEventFlagsSet+0x76>
    yield = pdFALSE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	18fa      	adds	r2, r7, r3
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f000 fda5 	bl	8009b48 <xEventGroupSetBitsFromISR>
 8008ffe:	1e03      	subs	r3, r0, #0
 8009000:	d003      	beq.n	800900a <osEventFlagsSet+0x62>
      rflags = (uint32_t)osErrorResource;
 8009002:	2303      	movs	r3, #3
 8009004:	425b      	negs	r3, r3
 8009006:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009008:	e012      	b.n	8009030 <osEventFlagsSet+0x88>
    } else {
      rflags = flags;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00d      	beq.n	8009030 <osEventFlagsSet+0x88>
 8009014:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <osEventFlagsSet+0x98>)
 8009016:	2280      	movs	r2, #128	; 0x80
 8009018:	0552      	lsls	r2, r2, #21
 800901a:	601a      	str	r2, [r3, #0]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800901c:	e008      	b.n	8009030 <osEventFlagsSet+0x88>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	0011      	movs	r1, r2
 8009024:	0018      	movs	r0, r3
 8009026:	f000 fcb9 	bl	800999c <xEventGroupSetBits>
 800902a:	0003      	movs	r3, r0
 800902c:	61fb      	str	r3, [r7, #28]
 800902e:	e000      	b.n	8009032 <osEventFlagsSet+0x8a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009030:	46c0      	nop			; (mov r8, r8)
  }

  return (rflags);
 8009032:	69fb      	ldr	r3, [r7, #28]
}
 8009034:	0018      	movs	r0, r3
 8009036:	46bd      	mov	sp, r7
 8009038:	b008      	add	sp, #32
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000d3c 	.word	0x20000d3c
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009044:	b590      	push	{r4, r7, lr}
 8009046:	b08d      	sub	sp, #52	; 0x34
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <osEventFlagsWait+0x20>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	0e1b      	lsrs	r3, r3, #24
 8009060:	061b      	lsls	r3, r3, #24
 8009062:	d003      	beq.n	800906c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8009064:	2304      	movs	r3, #4
 8009066:	425b      	negs	r3, r3
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	e051      	b.n	8009110 <osEventFlagsWait+0xcc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800906c:	f3ef 8305 	mrs	r3, IPSR
 8009070:	617b      	str	r3, [r7, #20]
  return(result);
 8009072:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009074:	2b00      	cmp	r3, #0
 8009076:	d109      	bne.n	800908c <osEventFlagsWait+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009078:	f3ef 8310 	mrs	r3, PRIMASK
 800907c:	613b      	str	r3, [r7, #16]
  return(result);
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d007      	beq.n	8009094 <osEventFlagsWait+0x50>
 8009084:	4b25      	ldr	r3, [pc, #148]	; (800911c <osEventFlagsWait+0xd8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d103      	bne.n	8009094 <osEventFlagsWait+0x50>
    rflags = (uint32_t)osErrorISR;
 800908c:	2306      	movs	r3, #6
 800908e:	425b      	negs	r3, r3
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	e03d      	b.n	8009110 <osEventFlagsWait+0xcc>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	4013      	ands	r3, r2
 800909a:	d002      	beq.n	80090a2 <osEventFlagsWait+0x5e>
      wait_all = pdTRUE;
 800909c:	2301      	movs	r3, #1
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
 80090a0:	e001      	b.n	80090a6 <osEventFlagsWait+0x62>
    } else {
      wait_all = pdFAIL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2202      	movs	r2, #2
 80090aa:	4013      	ands	r3, r2
 80090ac:	d002      	beq.n	80090b4 <osEventFlagsWait+0x70>
      exit_clr = pdFAIL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	623b      	str	r3, [r7, #32]
 80090b2:	e001      	b.n	80090b8 <osEventFlagsWait+0x74>
    } else {
      exit_clr = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80090b8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80090ba:	6a3a      	ldr	r2, [r7, #32]
 80090bc:	68b9      	ldr	r1, [r7, #8]
 80090be:	69b8      	ldr	r0, [r7, #24]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	0023      	movs	r3, r4
 80090c6:	f000 fbc3 	bl	8009850 <xEventGroupWaitBits>
 80090ca:	0003      	movs	r3, r0
 80090cc:	61fb      	str	r3, [r7, #28]

    if (options & osFlagsWaitAll) {
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	4013      	ands	r3, r2
 80090d4:	d00e      	beq.n	80090f4 <osEventFlagsWait+0xb0>
      if (flags != rflags) {
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d018      	beq.n	8009110 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <osEventFlagsWait+0xa8>
          rflags = (uint32_t)osErrorTimeout;
 80090e4:	2302      	movs	r3, #2
 80090e6:	425b      	negs	r3, r3
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	e011      	b.n	8009110 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 80090ec:	2303      	movs	r3, #3
 80090ee:	425b      	negs	r3, r3
 80090f0:	61fb      	str	r3, [r7, #28]
 80090f2:	e00d      	b.n	8009110 <osEventFlagsWait+0xcc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	4013      	ands	r3, r2
 80090fa:	d109      	bne.n	8009110 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <osEventFlagsWait+0xc6>
          rflags = (uint32_t)osErrorTimeout;
 8009102:	2302      	movs	r3, #2
 8009104:	425b      	negs	r3, r3
 8009106:	61fb      	str	r3, [r7, #28]
 8009108:	e002      	b.n	8009110 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800910a:	2303      	movs	r3, #3
 800910c:	425b      	negs	r3, r3
 800910e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009110:	69fb      	ldr	r3, [r7, #28]
}
 8009112:	0018      	movs	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	b00b      	add	sp, #44	; 0x2c
 8009118:	bd90      	pop	{r4, r7, pc}
 800911a:	46c0      	nop			; (mov r8, r8)
 800911c:	20000d3c 	.word	0x20000d3c

08009120 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800912c:	f3ef 8305 	mrs	r3, IPSR
 8009130:	60fb      	str	r3, [r7, #12]
  return(result);
 8009132:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009134:	2b00      	cmp	r3, #0
 8009136:	d109      	bne.n	800914c <osEventFlagsDelete+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009138:	f3ef 8310 	mrs	r3, PRIMASK
 800913c:	60bb      	str	r3, [r7, #8]
  return(result);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <osEventFlagsDelete+0x34>
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <osEventFlagsDelete+0x58>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d103      	bne.n	8009154 <osEventFlagsDelete+0x34>
    stat = osErrorISR;
 800914c:	2306      	movs	r3, #6
 800914e:	425b      	negs	r3, r3
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	e00c      	b.n	800916e <osEventFlagsDelete+0x4e>
  }
  else if (hEventGroup == NULL) {
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d103      	bne.n	8009162 <osEventFlagsDelete+0x42>
    stat = osErrorParameter;
 800915a:	2304      	movs	r3, #4
 800915c:	425b      	negs	r3, r3
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e005      	b.n	800916e <osEventFlagsDelete+0x4e>
  }
  else {
    stat = osOK;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	0018      	movs	r0, r3
 800916a:	f000 fc90 	bl	8009a8e <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800916e:	697b      	ldr	r3, [r7, #20]
}
 8009170:	0018      	movs	r0, r3
 8009172:	46bd      	mov	sp, r7
 8009174:	b006      	add	sp, #24
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000d3c 	.word	0x20000d3c

0800917c <osMutexNew>:

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	; 0x28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009188:	f3ef 8305 	mrs	r3, IPSR
 800918c:	613b      	str	r3, [r7, #16]
  return(result);
 800918e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009190:	2b00      	cmp	r3, #0
 8009192:	d000      	beq.n	8009196 <osMutexNew+0x1a>
 8009194:	e084      	b.n	80092a0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009196:	f3ef 8310 	mrs	r3, PRIMASK
 800919a:	60fb      	str	r3, [r7, #12]
  return(result);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <osMutexNew+0x30>
 80091a2:	4b42      	ldr	r3, [pc, #264]	; (80092ac <osMutexNew+0x130>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d100      	bne.n	80091ac <osMutexNew+0x30>
 80091aa:	e079      	b.n	80092a0 <osMutexNew+0x124>
    if (attr != NULL) {
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <osMutexNew+0x3e>
      type = attr->attr_bits;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	623b      	str	r3, [r7, #32]
 80091b8:	e001      	b.n	80091be <osMutexNew+0x42>
    } else {
      type = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	2201      	movs	r2, #1
 80091c2:	4013      	ands	r3, r2
 80091c4:	d002      	beq.n	80091cc <osMutexNew+0x50>
      rmtx = 1U;
 80091c6:	2301      	movs	r3, #1
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	e001      	b.n	80091d0 <osMutexNew+0x54>
    } else {
      rmtx = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	2208      	movs	r2, #8
 80091d4:	4013      	ands	r3, r2
 80091d6:	d000      	beq.n	80091da <osMutexNew+0x5e>
 80091d8:	e062      	b.n	80092a0 <osMutexNew+0x124>
      mem = -1;
 80091da:	2301      	movs	r3, #1
 80091dc:	425b      	negs	r3, r3
 80091de:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d015      	beq.n	8009212 <osMutexNew+0x96>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d006      	beq.n	80091fc <osMutexNew+0x80>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	2b4f      	cmp	r3, #79	; 0x4f
 80091f4:	d902      	bls.n	80091fc <osMutexNew+0x80>
          mem = 1;
 80091f6:	2301      	movs	r3, #1
 80091f8:	61bb      	str	r3, [r7, #24]
 80091fa:	e00c      	b.n	8009216 <osMutexNew+0x9a>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d108      	bne.n	8009216 <osMutexNew+0x9a>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <osMutexNew+0x9a>
            mem = 0;
 800920c:	2300      	movs	r3, #0
 800920e:	61bb      	str	r3, [r7, #24]
 8009210:	e001      	b.n	8009216 <osMutexNew+0x9a>
          }
        }
      }
      else {
        mem = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d114      	bne.n	8009246 <osMutexNew+0xca>
        if (rmtx != 0U) {
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d008      	beq.n	8009234 <osMutexNew+0xb8>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	0019      	movs	r1, r3
 8009228:	2004      	movs	r0, #4
 800922a:	f000 fe7e 	bl	8009f2a <xQueueCreateMutexStatic>
 800922e:	0003      	movs	r3, r0
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
 8009232:	e019      	b.n	8009268 <osMutexNew+0xec>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	0019      	movs	r1, r3
 800923a:	2001      	movs	r0, #1
 800923c:	f000 fe75 	bl	8009f2a <xQueueCreateMutexStatic>
 8009240:	0003      	movs	r3, r0
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
 8009244:	e010      	b.n	8009268 <osMutexNew+0xec>
        }
      }
      else {
        if (mem == 0) {
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10d      	bne.n	8009268 <osMutexNew+0xec>
          if (rmtx != 0U) {
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <osMutexNew+0xe2>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009252:	2004      	movs	r0, #4
 8009254:	f000 fe4d 	bl	8009ef2 <xQueueCreateMutex>
 8009258:	0003      	movs	r3, r0
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
 800925c:	e004      	b.n	8009268 <osMutexNew+0xec>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800925e:	2001      	movs	r0, #1
 8009260:	f000 fe47 	bl	8009ef2 <xQueueCreateMutex>
 8009264:	0003      	movs	r3, r0
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00e      	beq.n	800928c <osMutexNew+0x110>
        if (attr != NULL) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <osMutexNew+0x100>
          name = attr->name;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	e001      	b.n	8009280 <osMutexNew+0x104>
        } else {
          name = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	0011      	movs	r1, r2
 8009286:	0018      	movs	r0, r3
 8009288:	f001 fb66 	bl	800a958 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	2b00      	cmp	r3, #0
 8009290:	d006      	beq.n	80092a0 <osMutexNew+0x124>
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	2201      	movs	r2, #1
 800929c:	4313      	orrs	r3, r2
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092a2:	0018      	movs	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	b00a      	add	sp, #40	; 0x28
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	46c0      	nop			; (mov r8, r8)
 80092ac:	20000d3c 	.word	0x20000d3c

080092b0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	4393      	bics	r3, r2
 80092c0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	4013      	ands	r3, r2
 80092c8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ce:	f3ef 8305 	mrs	r3, IPSR
 80092d2:	613b      	str	r3, [r7, #16]
  return(result);
 80092d4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <osMutexAcquire+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092da:	f3ef 8310 	mrs	r3, PRIMASK
 80092de:	60fb      	str	r3, [r7, #12]
  return(result);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d007      	beq.n	80092f6 <osMutexAcquire+0x46>
 80092e6:	4b1f      	ldr	r3, [pc, #124]	; (8009364 <osMutexAcquire+0xb4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d103      	bne.n	80092f6 <osMutexAcquire+0x46>
    stat = osErrorISR;
 80092ee:	2306      	movs	r3, #6
 80092f0:	425b      	negs	r3, r3
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	e030      	b.n	8009358 <osMutexAcquire+0xa8>
  }
  else if (hMutex == NULL) {
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d103      	bne.n	8009304 <osMutexAcquire+0x54>
    stat = osErrorParameter;
 80092fc:	2304      	movs	r3, #4
 80092fe:	425b      	negs	r3, r3
 8009300:	61fb      	str	r3, [r7, #28]
 8009302:	e029      	b.n	8009358 <osMutexAcquire+0xa8>
  }
  else {
    if (rmtx != 0U) {
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d013      	beq.n	8009332 <osMutexAcquire+0x82>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	0011      	movs	r1, r2
 8009310:	0018      	movs	r0, r3
 8009312:	f000 fe55 	bl	8009fc0 <xQueueTakeMutexRecursive>
 8009316:	0003      	movs	r3, r0
 8009318:	2b01      	cmp	r3, #1
 800931a:	d01d      	beq.n	8009358 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <osMutexAcquire+0x7a>
          stat = osErrorTimeout;
 8009322:	2302      	movs	r3, #2
 8009324:	425b      	negs	r3, r3
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e016      	b.n	8009358 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800932a:	2303      	movs	r3, #3
 800932c:	425b      	negs	r3, r3
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	e012      	b.n	8009358 <osMutexAcquire+0xa8>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	0011      	movs	r1, r2
 8009338:	0018      	movs	r0, r3
 800933a:	f001 f85b 	bl	800a3f4 <xQueueSemaphoreTake>
 800933e:	0003      	movs	r3, r0
 8009340:	2b01      	cmp	r3, #1
 8009342:	d009      	beq.n	8009358 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <osMutexAcquire+0xa2>
          stat = osErrorTimeout;
 800934a:	2302      	movs	r3, #2
 800934c:	425b      	negs	r3, r3
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	e002      	b.n	8009358 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 8009352:	2303      	movs	r3, #3
 8009354:	425b      	negs	r3, r3
 8009356:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009358:	69fb      	ldr	r3, [r7, #28]
}
 800935a:	0018      	movs	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	b008      	add	sp, #32
 8009360:	bd80      	pop	{r7, pc}
 8009362:	46c0      	nop			; (mov r8, r8)
 8009364:	20000d3c 	.word	0x20000d3c

08009368 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	4393      	bics	r3, r2
 8009376:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	4013      	ands	r3, r2
 800937e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009384:	f3ef 8305 	mrs	r3, IPSR
 8009388:	613b      	str	r3, [r7, #16]
  return(result);
 800938a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <osMutexRelease+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009390:	f3ef 8310 	mrs	r3, PRIMASK
 8009394:	60fb      	str	r3, [r7, #12]
  return(result);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d007      	beq.n	80093ac <osMutexRelease+0x44>
 800939c:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <osMutexRelease+0x90>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d103      	bne.n	80093ac <osMutexRelease+0x44>
    stat = osErrorISR;
 80093a4:	2306      	movs	r3, #6
 80093a6:	425b      	negs	r3, r3
 80093a8:	61fb      	str	r3, [r7, #28]
 80093aa:	e020      	b.n	80093ee <osMutexRelease+0x86>
  }
  else if (hMutex == NULL) {
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d103      	bne.n	80093ba <osMutexRelease+0x52>
    stat = osErrorParameter;
 80093b2:	2304      	movs	r3, #4
 80093b4:	425b      	negs	r3, r3
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	e019      	b.n	80093ee <osMutexRelease+0x86>
  }
  else {
    if (rmtx != 0U) {
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <osMutexRelease+0x6e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	0018      	movs	r0, r3
 80093c4:	f000 fdd1 	bl	8009f6a <xQueueGiveMutexRecursive>
 80093c8:	0003      	movs	r3, r0
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d00f      	beq.n	80093ee <osMutexRelease+0x86>
        stat = osErrorResource;
 80093ce:	2303      	movs	r3, #3
 80093d0:	425b      	negs	r3, r3
 80093d2:	61fb      	str	r3, [r7, #28]
 80093d4:	e00b      	b.n	80093ee <osMutexRelease+0x86>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80093d6:	69b8      	ldr	r0, [r7, #24]
 80093d8:	2300      	movs	r3, #0
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	f000 fe1f 	bl	800a020 <xQueueGenericSend>
 80093e2:	0003      	movs	r3, r0
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d002      	beq.n	80093ee <osMutexRelease+0x86>
        stat = osErrorResource;
 80093e8:	2303      	movs	r3, #3
 80093ea:	425b      	negs	r3, r3
 80093ec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80093ee:	69fb      	ldr	r3, [r7, #28]
}
 80093f0:	0018      	movs	r0, r3
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b008      	add	sp, #32
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000d3c 	.word	0x20000d3c

080093fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b08d      	sub	sp, #52	; 0x34
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009408:	2300      	movs	r3, #0
 800940a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800940c:	f3ef 8305 	mrs	r3, IPSR
 8009410:	61bb      	str	r3, [r7, #24]
  return(result);
 8009412:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009414:	2b00      	cmp	r3, #0
 8009416:	d000      	beq.n	800941a <osMessageQueueNew+0x1e>
 8009418:	e06f      	b.n	80094fa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800941a:	f3ef 8310 	mrs	r3, PRIMASK
 800941e:	617b      	str	r3, [r7, #20]
  return(result);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <osMessageQueueNew+0x34>
 8009426:	4b37      	ldr	r3, [pc, #220]	; (8009504 <osMessageQueueNew+0x108>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b02      	cmp	r3, #2
 800942c:	d100      	bne.n	8009430 <osMessageQueueNew+0x34>
 800942e:	e064      	b.n	80094fa <osMessageQueueNew+0xfe>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d100      	bne.n	8009438 <osMessageQueueNew+0x3c>
 8009436:	e060      	b.n	80094fa <osMessageQueueNew+0xfe>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d05d      	beq.n	80094fa <osMessageQueueNew+0xfe>
    mem = -1;
 800943e:	2301      	movs	r3, #1
 8009440:	425b      	negs	r3, r3
 8009442:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d028      	beq.n	800949c <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d011      	beq.n	8009476 <osMessageQueueNew+0x7a>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	2b4f      	cmp	r3, #79	; 0x4f
 8009458:	d90d      	bls.n	8009476 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68b9      	ldr	r1, [r7, #8]
 800946a:	434b      	muls	r3, r1
 800946c:	429a      	cmp	r2, r3
 800946e:	d302      	bcc.n	8009476 <osMessageQueueNew+0x7a>
        mem = 1;
 8009470:	2301      	movs	r3, #1
 8009472:	623b      	str	r3, [r7, #32]
 8009474:	e014      	b.n	80094a0 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d110      	bne.n	80094a0 <osMessageQueueNew+0xa4>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10c      	bne.n	80094a0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800948a:	2b00      	cmp	r3, #0
 800948c:	d108      	bne.n	80094a0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <osMessageQueueNew+0xa4>
          mem = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	623b      	str	r3, [r7, #32]
 800949a:	e001      	b.n	80094a0 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d10c      	bne.n	80094c0 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	2400      	movs	r4, #0
 80094b4:	9400      	str	r4, [sp, #0]
 80094b6:	f000 fc5a 	bl	8009d6e <xQueueGenericCreateStatic>
 80094ba:	0003      	movs	r3, r0
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
 80094be:	e00a      	b.n	80094d6 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d107      	bne.n	80094d6 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	0018      	movs	r0, r3
 80094ce:	f000 fc99 	bl	8009e04 <xQueueGenericCreate>
 80094d2:	0003      	movs	r3, r0
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00e      	beq.n	80094fa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <osMessageQueueNew+0xee>
        name = attr->name;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	61fb      	str	r3, [r7, #28]
 80094e8:	e001      	b.n	80094ee <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	0011      	movs	r1, r2
 80094f4:	0018      	movs	r0, r3
 80094f6:	f001 fa2f 	bl	800a958 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094fc:	0018      	movs	r0, r3
 80094fe:	46bd      	mov	sp, r7
 8009500:	b00b      	add	sp, #44	; 0x2c
 8009502:	bd90      	pop	{r4, r7, pc}
 8009504:	20000d3c 	.word	0x20000d3c

08009508 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	603b      	str	r3, [r7, #0]
 8009514:	1dfb      	adds	r3, r7, #7
 8009516:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800951c:	2300      	movs	r3, #0
 800951e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009520:	f3ef 8305 	mrs	r3, IPSR
 8009524:	61fb      	str	r3, [r7, #28]
  return(result);
 8009526:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009528:	2b00      	cmp	r3, #0
 800952a:	d109      	bne.n	8009540 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800952c:	f3ef 8310 	mrs	r3, PRIMASK
 8009530:	61bb      	str	r3, [r7, #24]
  return(result);
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d028      	beq.n	800958a <osMessageQueuePut+0x82>
 8009538:	4b26      	ldr	r3, [pc, #152]	; (80095d4 <osMessageQueuePut+0xcc>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d124      	bne.n	800958a <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <osMessageQueuePut+0x4a>
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <osMessageQueuePut+0x4a>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 8009552:	2304      	movs	r3, #4
 8009554:	425b      	negs	r3, r3
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009558:	e035      	b.n	80095c6 <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800955e:	2314      	movs	r3, #20
 8009560:	18fa      	adds	r2, r7, r3
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	6a38      	ldr	r0, [r7, #32]
 8009566:	2300      	movs	r3, #0
 8009568:	f000 fe1e 	bl	800a1a8 <xQueueGenericSendFromISR>
 800956c:	0003      	movs	r3, r0
 800956e:	2b01      	cmp	r3, #1
 8009570:	d003      	beq.n	800957a <osMessageQueuePut+0x72>
        stat = osErrorResource;
 8009572:	2303      	movs	r3, #3
 8009574:	425b      	negs	r3, r3
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009578:	e025      	b.n	80095c6 <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d022      	beq.n	80095c6 <osMessageQueuePut+0xbe>
 8009580:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <osMessageQueuePut+0xd0>)
 8009582:	2280      	movs	r2, #128	; 0x80
 8009584:	0552      	lsls	r2, r2, #21
 8009586:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009588:	e01d      	b.n	80095c6 <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <osMessageQueuePut+0x8e>
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d103      	bne.n	800959e <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 8009596:	2304      	movs	r3, #4
 8009598:	425b      	negs	r3, r3
 800959a:	627b      	str	r3, [r7, #36]	; 0x24
 800959c:	e014      	b.n	80095c8 <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	6a38      	ldr	r0, [r7, #32]
 80095a4:	2300      	movs	r3, #0
 80095a6:	f000 fd3b 	bl	800a020 <xQueueGenericSend>
 80095aa:	0003      	movs	r3, r0
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d00b      	beq.n	80095c8 <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 80095b6:	2302      	movs	r3, #2
 80095b8:	425b      	negs	r3, r3
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
 80095bc:	e004      	b.n	80095c8 <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 80095be:	2303      	movs	r3, #3
 80095c0:	425b      	negs	r3, r3
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
 80095c4:	e000      	b.n	80095c8 <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80095c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095ca:	0018      	movs	r0, r3
 80095cc:	46bd      	mov	sp, r7
 80095ce:	b00a      	add	sp, #40	; 0x28
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	46c0      	nop			; (mov r8, r8)
 80095d4:	20000d3c 	.word	0x20000d3c
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095f2:	f3ef 8305 	mrs	r3, IPSR
 80095f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80095f8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009602:	61bb      	str	r3, [r7, #24]
  return(result);
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d028      	beq.n	800965c <osMessageQueueGet+0x80>
 800960a:	4b26      	ldr	r3, [pc, #152]	; (80096a4 <osMessageQueueGet+0xc8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d124      	bne.n	800965c <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d005      	beq.n	8009624 <osMessageQueueGet+0x48>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <osMessageQueueGet+0x48>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 8009624:	2304      	movs	r3, #4
 8009626:	425b      	negs	r3, r3
 8009628:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800962a:	e035      	b.n	8009698 <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 800962c:	2300      	movs	r3, #0
 800962e:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009630:	2314      	movs	r3, #20
 8009632:	18fa      	adds	r2, r7, r3
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	0018      	movs	r0, r3
 800963a:	f000 ffb5 	bl	800a5a8 <xQueueReceiveFromISR>
 800963e:	0003      	movs	r3, r0
 8009640:	2b01      	cmp	r3, #1
 8009642:	d003      	beq.n	800964c <osMessageQueueGet+0x70>
        stat = osErrorResource;
 8009644:	2303      	movs	r3, #3
 8009646:	425b      	negs	r3, r3
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800964a:	e025      	b.n	8009698 <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d022      	beq.n	8009698 <osMessageQueueGet+0xbc>
 8009652:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <osMessageQueueGet+0xcc>)
 8009654:	2280      	movs	r2, #128	; 0x80
 8009656:	0552      	lsls	r2, r2, #21
 8009658:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800965a:	e01d      	b.n	8009698 <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <osMessageQueueGet+0x8c>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d103      	bne.n	8009670 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 8009668:	2304      	movs	r3, #4
 800966a:	425b      	negs	r3, r3
 800966c:	627b      	str	r3, [r7, #36]	; 0x24
 800966e:	e014      	b.n	800969a <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	0018      	movs	r0, r3
 8009678:	f000 fe07 	bl	800a28a <xQueueReceive>
 800967c:	0003      	movs	r3, r0
 800967e:	2b01      	cmp	r3, #1
 8009680:	d00b      	beq.n	800969a <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 8009688:	2302      	movs	r3, #2
 800968a:	425b      	negs	r3, r3
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
 800968e:	e004      	b.n	800969a <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 8009690:	2303      	movs	r3, #3
 8009692:	425b      	negs	r3, r3
 8009694:	627b      	str	r3, [r7, #36]	; 0x24
 8009696:	e000      	b.n	800969a <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009698:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800969c:	0018      	movs	r0, r3
 800969e:	46bd      	mov	sp, r7
 80096a0:	b00a      	add	sp, #40	; 0x28
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20000d3c 	.word	0x20000d3c
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	e01c      	b.n	80096fe <osMessageQueueGetCount+0x52>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096c4:	f3ef 8305 	mrs	r3, IPSR
 80096c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80096ca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <osMessageQueueGetCount+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096d0:	f3ef 8310 	mrs	r3, PRIMASK
 80096d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00a      	beq.n	80096f2 <osMessageQueueGetCount+0x46>
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <osMessageQueueGetCount+0x5c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d106      	bne.n	80096f2 <osMessageQueueGetCount+0x46>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	0018      	movs	r0, r3
 80096e8:	f000 ffd6 	bl	800a698 <uxQueueMessagesWaitingFromISR>
 80096ec:	0003      	movs	r3, r0
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e005      	b.n	80096fe <osMessageQueueGetCount+0x52>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	0018      	movs	r0, r3
 80096f6:	f000 ffba 	bl	800a66e <uxQueueMessagesWaiting>
 80096fa:	0003      	movs	r3, r0
 80096fc:	617b      	str	r3, [r7, #20]
  }

  return ((uint32_t)count);
 80096fe:	697b      	ldr	r3, [r7, #20]
}
 8009700:	0018      	movs	r0, r3
 8009702:	46bd      	mov	sp, r7
 8009704:	b006      	add	sp, #24
 8009706:	bd80      	pop	{r7, pc}
 8009708:	20000d3c 	.word	0x20000d3c

0800970c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009718:	f3ef 8305 	mrs	r3, IPSR
 800971c:	60fb      	str	r3, [r7, #12]
  return(result);
 800971e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009720:	2b00      	cmp	r3, #0
 8009722:	d109      	bne.n	8009738 <osMessageQueueDelete+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009724:	f3ef 8310 	mrs	r3, PRIMASK
 8009728:	60bb      	str	r3, [r7, #8]
  return(result);
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <osMessageQueueDelete+0x34>
 8009730:	4b0e      	ldr	r3, [pc, #56]	; (800976c <osMessageQueueDelete+0x60>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b02      	cmp	r3, #2
 8009736:	d103      	bne.n	8009740 <osMessageQueueDelete+0x34>
    stat = osErrorISR;
 8009738:	2306      	movs	r3, #6
 800973a:	425b      	negs	r3, r3
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	e010      	b.n	8009762 <osMessageQueueDelete+0x56>
  }
  else if (hQueue == NULL) {
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d103      	bne.n	800974e <osMessageQueueDelete+0x42>
    stat = osErrorParameter;
 8009746:	2304      	movs	r3, #4
 8009748:	425b      	negs	r3, r3
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	e009      	b.n	8009762 <osMessageQueueDelete+0x56>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	0018      	movs	r0, r3
 8009752:	f001 f929 	bl	800a9a8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	0018      	movs	r0, r3
 800975e:	f000 ffac 	bl	800a6ba <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009762:	697b      	ldr	r3, [r7, #20]
}
 8009764:	0018      	movs	r0, r3
 8009766:	46bd      	mov	sp, r7
 8009768:	b006      	add	sp, #24
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000d3c 	.word	0x20000d3c

08009770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4a06      	ldr	r2, [pc, #24]	; (8009798 <vApplicationGetIdleTaskMemory+0x28>)
 8009780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	4a05      	ldr	r2, [pc, #20]	; (800979c <vApplicationGetIdleTaskMemory+0x2c>)
 8009786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2280      	movs	r2, #128	; 0x80
 800978c:	601a      	str	r2, [r3, #0]
}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	46bd      	mov	sp, r7
 8009792:	b004      	add	sp, #16
 8009794:	bd80      	pop	{r7, pc}
 8009796:	46c0      	nop			; (mov r8, r8)
 8009798:	20000d40 	.word	0x20000d40
 800979c:	20000dfc 	.word	0x20000dfc

080097a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a06      	ldr	r2, [pc, #24]	; (80097c8 <vApplicationGetTimerTaskMemory+0x28>)
 80097b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4a05      	ldr	r2, [pc, #20]	; (80097cc <vApplicationGetTimerTaskMemory+0x2c>)
 80097b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2280      	movs	r2, #128	; 0x80
 80097bc:	0052      	lsls	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]
}
 80097c0:	46c0      	nop			; (mov r8, r8)
 80097c2:	46bd      	mov	sp, r7
 80097c4:	b004      	add	sp, #16
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20000ffc 	.word	0x20000ffc
 80097cc:	200010b8 	.word	0x200010b8

080097d0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <xEventGroupCreateStatic+0x12>
 80097de:	b672      	cpsid	i
 80097e0:	e7fe      	b.n	80097e0 <xEventGroupCreateStatic+0x10>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80097e2:	2320      	movs	r3, #32
 80097e4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d001      	beq.n	80097f0 <xEventGroupCreateStatic+0x20>
 80097ec:	b672      	cpsid	i
 80097ee:	e7fe      	b.n	80097ee <xEventGroupCreateStatic+0x1e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60fb      	str	r3, [r7, #12]

		if( pxEventBits != NULL )
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <xEventGroupCreateStatic+0x40>
		{
			pxEventBits->uxEventBits = 0;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3304      	adds	r3, #4
 8009804:	0018      	movs	r0, r3
 8009806:	f000 f9b5 	bl	8009b74 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2201      	movs	r2, #1
 800980e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8009810:	68fb      	ldr	r3, [r7, #12]
	}
 8009812:	0018      	movs	r0, r3
 8009814:	46bd      	mov	sp, r7
 8009816:	b004      	add	sp, #16
 8009818:	bd80      	pop	{r7, pc}

0800981a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8009820:	2020      	movs	r0, #32
 8009822:	f002 fdf5 	bl	800c410 <pvPortMalloc>
 8009826:	0003      	movs	r3, r0
 8009828:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00a      	beq.n	8009846 <xEventGroupCreate+0x2c>
		{
			pxEventBits->uxEventBits = 0;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3304      	adds	r3, #4
 800983a:	0018      	movs	r0, r3
 800983c:	f000 f99a 	bl	8009b74 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8009846:	687b      	ldr	r3, [r7, #4]
	}
 8009848:	0018      	movs	r0, r3
 800984a:	46bd      	mov	sp, r7
 800984c:	b002      	add	sp, #8
 800984e:	bd80      	pop	{r7, pc}

08009850 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08c      	sub	sp, #48	; 0x30
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009866:	2300      	movs	r3, #0
 8009868:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <xEventGroupWaitBits+0x24>
 8009870:	b672      	cpsid	i
 8009872:	e7fe      	b.n	8009872 <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	0e1b      	lsrs	r3, r3, #24
 8009878:	061b      	lsls	r3, r3, #24
 800987a:	d001      	beq.n	8009880 <xEventGroupWaitBits+0x30>
 800987c:	b672      	cpsid	i
 800987e:	e7fe      	b.n	800987e <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <xEventGroupWaitBits+0x3a>
 8009886:	b672      	cpsid	i
 8009888:	e7fe      	b.n	8009888 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800988a:	f001 ff31 	bl	800b6f0 <xTaskGetSchedulerState>
 800988e:	1e03      	subs	r3, r0, #0
 8009890:	d102      	bne.n	8009898 <xEventGroupWaitBits+0x48>
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <xEventGroupWaitBits+0x4c>
 8009898:	2301      	movs	r3, #1
 800989a:	e000      	b.n	800989e <xEventGroupWaitBits+0x4e>
 800989c:	2300      	movs	r3, #0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <xEventGroupWaitBits+0x56>
 80098a2:	b672      	cpsid	i
 80098a4:	e7fe      	b.n	80098a4 <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 80098a6:	f001 faef 	bl	800ae88 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	0018      	movs	r0, r3
 80098b8:	f000 f926 	bl	8009b08 <prvTestWaitCondition>
 80098bc:	0003      	movs	r3, r0
 80098be:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00e      	beq.n	80098e4 <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d02a      	beq.n	800992a <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	43d2      	mvns	r2, r2
 80098dc:	401a      	ands	r2, r3
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e022      	b.n	800992a <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d104      	bne.n	80098f4 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	623b      	str	r3, [r7, #32]
 80098f2:	e01a      	b.n	800992a <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	2280      	movs	r2, #128	; 0x80
 80098fe:	0452      	lsls	r2, r2, #17
 8009900:	4313      	orrs	r3, r2
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	2280      	movs	r2, #128	; 0x80
 800990e:	04d2      	lsls	r2, r2, #19
 8009910:	4313      	orrs	r3, r2
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	1d18      	adds	r0, r3, #4
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	4313      	orrs	r3, r2
 800991e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009920:	0019      	movs	r1, r3
 8009922:	f001 fc93 	bl	800b24c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800992a:	f001 fab9 	bl	800aea0 <xTaskResumeAll>
 800992e:	0003      	movs	r3, r0
 8009930:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	2b00      	cmp	r3, #0
 8009936:	d02c      	beq.n	8009992 <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 800993e:	f002 fcbf 	bl	800c2c0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009942:	f002 f82f 	bl	800b9a4 <uxTaskResetEventItemValue>
 8009946:	0003      	movs	r3, r0
 8009948:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800994a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800994c:	2380      	movs	r3, #128	; 0x80
 800994e:	049b      	lsls	r3, r3, #18
 8009950:	4013      	ands	r3, r2
 8009952:	d11a      	bne.n	800998a <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 8009954:	f002 fcc4 	bl	800c2e0 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	68b9      	ldr	r1, [r7, #8]
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	0018      	movs	r0, r3
 8009966:	f000 f8cf 	bl	8009b08 <prvTestWaitCondition>
 800996a:	1e03      	subs	r3, r0, #0
 800996c:	d009      	beq.n	8009982 <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	43d2      	mvns	r2, r2
 800997c:	401a      	ands	r2, r3
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009982:	2301      	movs	r3, #1
 8009984:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 8009986:	f002 fcbd 	bl	800c304 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	021b      	lsls	r3, r3, #8
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009994:	0018      	movs	r0, r3
 8009996:	46bd      	mov	sp, r7
 8009998:	b00c      	add	sp, #48	; 0x30
 800999a:	bd80      	pop	{r7, pc}

0800999c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08c      	sub	sp, #48	; 0x30
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80099a6:	2300      	movs	r3, #0
 80099a8:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <xEventGroupSetBits+0x20>
 80099b8:	b672      	cpsid	i
 80099ba:	e7fe      	b.n	80099ba <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	0e1b      	lsrs	r3, r3, #24
 80099c0:	061b      	lsls	r3, r3, #24
 80099c2:	d001      	beq.n	80099c8 <xEventGroupSetBits+0x2c>
 80099c4:	b672      	cpsid	i
 80099c6:	e7fe      	b.n	80099c6 <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	3304      	adds	r3, #4
 80099cc:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	3308      	adds	r3, #8
 80099d2:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 80099d4:	f001 fa58 	bl	800ae88 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80099ea:	e03d      	b.n	8009a68 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 80099f8:	2300      	movs	r3, #0
 80099fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	0e1b      	lsrs	r3, r3, #24
 8009a00:	061b      	lsls	r3, r3, #24
 8009a02:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	021b      	lsls	r3, r3, #8
 8009a08:	0a1b      	lsrs	r3, r3, #8
 8009a0a:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	2380      	movs	r3, #128	; 0x80
 8009a10:	04db      	lsls	r3, r3, #19
 8009a12:	4013      	ands	r3, r2
 8009a14:	d107      	bne.n	8009a26 <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	d00b      	beq.n	8009a38 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
 8009a24:	e008      	b.n	8009a38 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d101      	bne.n	8009a38 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d012      	beq.n	8009a64 <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	2380      	movs	r3, #128	; 0x80
 8009a42:	045b      	lsls	r3, r3, #17
 8009a44:	4013      	ands	r3, r2
 8009a46:	d003      	beq.n	8009a50 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2280      	movs	r2, #128	; 0x80
 8009a56:	0492      	lsls	r2, r2, #18
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	0011      	movs	r1, r2
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f001 fca4 	bl	800b3ac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 8009a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d1bd      	bne.n	80099ec <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a76:	43d2      	mvns	r2, r2
 8009a78:	401a      	ands	r2, r3
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009a7e:	f001 fa0f 	bl	800aea0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	681b      	ldr	r3, [r3, #0]
}
 8009a86:	0018      	movs	r0, r3
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	b00c      	add	sp, #48	; 0x30
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	60fb      	str	r3, [r7, #12]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 8009aa0:	f001 f9f2 	bl	800ae88 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8009aa4:	e00f      	b.n	8009ac6 <vEventGroupDelete+0x38>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	3308      	adds	r3, #8
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d101      	bne.n	8009ab6 <vEventGroupDelete+0x28>
 8009ab2:	b672      	cpsid	i
 8009ab4:	e7fe      	b.n	8009ab4 <vEventGroupDelete+0x26>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	2280      	movs	r2, #128	; 0x80
 8009abc:	0492      	lsls	r2, r2, #18
 8009abe:	0011      	movs	r1, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f001 fc73 	bl	800b3ac <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1eb      	bne.n	8009aa6 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	7f1b      	ldrb	r3, [r3, #28]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d103      	bne.n	8009ade <vEventGroupDelete+0x50>
			{
				vPortFree( pxEventBits );
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f002 fd3f 	bl	800c55c <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8009ade:	f001 f9df 	bl	800aea0 <xTaskResumeAll>
}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	b004      	add	sp, #16
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b082      	sub	sp, #8
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	0011      	movs	r1, r2
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7ff ff4e 	bl	800999c <xEventGroupSetBits>
}
 8009b00:	46c0      	nop			; (mov r8, r8)
 8009b02:	46bd      	mov	sp, r7
 8009b04:	b002      	add	sp, #8
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	4013      	ands	r3, r2
 8009b24:	d00a      	beq.n	8009b3c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8009b26:	2301      	movs	r3, #1
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	e007      	b.n	8009b3c <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	4013      	ands	r3, r2
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d101      	bne.n	8009b3c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009b3c:	697b      	ldr	r3, [r7, #20]
}
 8009b3e:	0018      	movs	r0, r3
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b006      	add	sp, #24
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	4805      	ldr	r0, [pc, #20]	; (8009b70 <xEventGroupSetBitsFromISR+0x28>)
 8009b5c:	f002 fafe 	bl	800c15c <xTimerPendFunctionCallFromISR>
 8009b60:	0003      	movs	r3, r0
 8009b62:	617b      	str	r3, [r7, #20]

		return xReturn;
 8009b64:	697b      	ldr	r3, [r7, #20]
	}
 8009b66:	0018      	movs	r0, r3
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	b006      	add	sp, #24
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	46c0      	nop			; (mov r8, r8)
 8009b70:	08009aeb 	.word	0x08009aeb

08009b74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3308      	adds	r3, #8
 8009b80:	001a      	movs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	4252      	negs	r2, r2
 8009b8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3308      	adds	r3, #8
 8009b92:	001a      	movs	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ba8:	46c0      	nop			; (mov r8, r8)
 8009baa:	46bd      	mov	sp, r7
 8009bac:	b002      	add	sp, #8
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	b002      	add	sp, #8
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	601a      	str	r2, [r3, #0]
}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	46bd      	mov	sp, r7
 8009c06:	b004      	add	sp, #16
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	d103      	bne.n	8009c28 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	e00c      	b.n	8009c42 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	e002      	b.n	8009c36 <vListInsert+0x2c>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	60fb      	str	r3, [r7, #12]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d2f6      	bcs.n	8009c30 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	601a      	str	r2, [r3, #0]
}
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	46bd      	mov	sp, r7
 8009c72:	b004      	add	sp, #16
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	6892      	ldr	r2, [r2, #8]
 8009c8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6852      	ldr	r2, [r2, #4]
 8009c96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d103      	bne.n	8009caa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	689a      	ldr	r2, [r3, #8]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	1e5a      	subs	r2, r3, #1
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
}
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	b004      	add	sp, #16
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <xQueueGenericReset+0x18>
 8009cda:	b672      	cpsid	i
 8009cdc:	e7fe      	b.n	8009cdc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8009cde:	f002 faff 	bl	800c2e0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	434b      	muls	r3, r1
 8009cf0:	18d2      	adds	r2, r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0c:	1e59      	subs	r1, r3, #1
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	434b      	muls	r3, r1
 8009d14:	18d2      	adds	r2, r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2244      	movs	r2, #68	; 0x44
 8009d1e:	21ff      	movs	r1, #255	; 0xff
 8009d20:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2245      	movs	r2, #69	; 0x45
 8009d26:	21ff      	movs	r1, #255	; 0xff
 8009d28:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10d      	bne.n	8009d4c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d013      	beq.n	8009d60 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3310      	adds	r3, #16
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	f001 fad9 	bl	800b2f4 <xTaskRemoveFromEventList>
 8009d42:	1e03      	subs	r3, r0, #0
 8009d44:	d00c      	beq.n	8009d60 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d46:	f002 fabb 	bl	800c2c0 <vPortYield>
 8009d4a:	e009      	b.n	8009d60 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	3310      	adds	r3, #16
 8009d50:	0018      	movs	r0, r3
 8009d52:	f7ff ff0f 	bl	8009b74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3324      	adds	r3, #36	; 0x24
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f7ff ff0a 	bl	8009b74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d60:	f002 fad0 	bl	800c304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d64:	2301      	movs	r3, #1
}
 8009d66:	0018      	movs	r0, r3
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	b004      	add	sp, #16
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d6e:	b590      	push	{r4, r7, lr}
 8009d70:	b089      	sub	sp, #36	; 0x24
 8009d72:	af02      	add	r7, sp, #8
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
 8009d7a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <xQueueGenericCreateStatic+0x18>
 8009d82:	b672      	cpsid	i
 8009d84:	e7fe      	b.n	8009d84 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d101      	bne.n	8009d90 <xQueueGenericCreateStatic+0x22>
 8009d8c:	b672      	cpsid	i
 8009d8e:	e7fe      	b.n	8009d8e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <xQueueGenericCreateStatic+0x2e>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <xQueueGenericCreateStatic+0x32>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e000      	b.n	8009da2 <xQueueGenericCreateStatic+0x34>
 8009da0:	2300      	movs	r3, #0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <xQueueGenericCreateStatic+0x3c>
 8009da6:	b672      	cpsid	i
 8009da8:	e7fe      	b.n	8009da8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <xQueueGenericCreateStatic+0x48>
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <xQueueGenericCreateStatic+0x4c>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <xQueueGenericCreateStatic+0x4e>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <xQueueGenericCreateStatic+0x56>
 8009dc0:	b672      	cpsid	i
 8009dc2:	e7fe      	b.n	8009dc2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dc4:	2350      	movs	r3, #80	; 0x50
 8009dc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	2b50      	cmp	r3, #80	; 0x50
 8009dcc:	d001      	beq.n	8009dd2 <xQueueGenericCreateStatic+0x64>
 8009dce:	b672      	cpsid	i
 8009dd0:	e7fe      	b.n	8009dd0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00e      	beq.n	8009dfa <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2246      	movs	r2, #70	; 0x46
 8009de0:	2101      	movs	r1, #1
 8009de2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009de4:	2328      	movs	r3, #40	; 0x28
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	781c      	ldrb	r4, [r3, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	0023      	movs	r3, r4
 8009df6:	f000 f83b 	bl	8009e70 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009dfa:	697b      	ldr	r3, [r7, #20]
	}
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	b007      	add	sp, #28
 8009e02:	bd90      	pop	{r4, r7, pc}

08009e04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e04:	b590      	push	{r4, r7, lr}
 8009e06:	b08b      	sub	sp, #44	; 0x2c
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	1dfb      	adds	r3, r7, #7
 8009e10:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <xQueueGenericCreate+0x18>
 8009e18:	b672      	cpsid	i
 8009e1a:	e7fe      	b.n	8009e1a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d102      	bne.n	8009e28 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	61fb      	str	r3, [r7, #28]
 8009e26:	e003      	b.n	8009e30 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	4353      	muls	r3, r2
 8009e2e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	3350      	adds	r3, #80	; 0x50
 8009e34:	0018      	movs	r0, r3
 8009e36:	f002 faeb 	bl	800c410 <pvPortMalloc>
 8009e3a:	0003      	movs	r3, r0
 8009e3c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d010      	beq.n	8009e66 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	3350      	adds	r3, #80	; 0x50
 8009e48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	2246      	movs	r2, #70	; 0x46
 8009e4e:	2100      	movs	r1, #0
 8009e50:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e52:	1dfb      	adds	r3, r7, #7
 8009e54:	781c      	ldrb	r4, [r3, #0]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	0023      	movs	r3, r4
 8009e62:	f000 f805 	bl	8009e70 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009e66:	69bb      	ldr	r3, [r7, #24]
	}
 8009e68:	0018      	movs	r0, r3
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b009      	add	sp, #36	; 0x24
 8009e6e:	bd90      	pop	{r4, r7, pc}

08009e70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	001a      	movs	r2, r3
 8009e7e:	1cfb      	adds	r3, r7, #3
 8009e80:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	e002      	b.n	8009e96 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f7ff ff0d 	bl	8009cc6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	1cfa      	adds	r2, r7, #3
 8009eb0:	214c      	movs	r1, #76	; 0x4c
 8009eb2:	7812      	ldrb	r2, [r2, #0]
 8009eb4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	b004      	add	sp, #16
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00e      	beq.n	8009eea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	f000 f89b 	bl	800a020 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	46bd      	mov	sp, r7
 8009eee:	b002      	add	sp, #8
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	0002      	movs	r2, r0
 8009efa:	1dfb      	adds	r3, r7, #7
 8009efc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009efe:	2301      	movs	r3, #1
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	2300      	movs	r3, #0
 8009f04:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009f06:	1dfb      	adds	r3, r7, #7
 8009f08:	781a      	ldrb	r2, [r3, #0]
 8009f0a:	6939      	ldr	r1, [r7, #16]
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f7ff ff78 	bl	8009e04 <xQueueGenericCreate>
 8009f14:	0003      	movs	r3, r0
 8009f16:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f7ff ffcf 	bl	8009ebe <prvInitialiseMutex>

		return pxNewQueue;
 8009f20:	68fb      	ldr	r3, [r7, #12]
	}
 8009f22:	0018      	movs	r0, r3
 8009f24:	46bd      	mov	sp, r7
 8009f26:	b006      	add	sp, #24
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b088      	sub	sp, #32
 8009f2e:	af02      	add	r7, sp, #8
 8009f30:	0002      	movs	r2, r0
 8009f32:	6039      	str	r1, [r7, #0]
 8009f34:	1dfb      	adds	r3, r7, #7
 8009f36:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	6939      	ldr	r1, [r7, #16]
 8009f44:	6978      	ldr	r0, [r7, #20]
 8009f46:	1dfb      	adds	r3, r7, #7
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	0013      	movs	r3, r2
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f7ff ff0d 	bl	8009d6e <xQueueGenericCreateStatic>
 8009f54:	0003      	movs	r3, r0
 8009f56:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	0018      	movs	r0, r3
 8009f5c:	f7ff ffaf 	bl	8009ebe <prvInitialiseMutex>

		return pxNewQueue;
 8009f60:	68fb      	ldr	r3, [r7, #12]
	}
 8009f62:	0018      	movs	r0, r3
 8009f64:	46bd      	mov	sp, r7
 8009f66:	b006      	add	sp, #24
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009f6a:	b590      	push	{r4, r7, lr}
 8009f6c:	b085      	sub	sp, #20
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <xQueueGiveMutexRecursive+0x16>
 8009f7c:	b672      	cpsid	i
 8009f7e:	e7fe      	b.n	8009f7e <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	685c      	ldr	r4, [r3, #4]
 8009f84:	f001 fba6 	bl	800b6d4 <xTaskGetCurrentTaskHandle>
 8009f88:	0003      	movs	r3, r0
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	d111      	bne.n	8009fb2 <xQueueGiveMutexRecursive+0x48>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	1e5a      	subs	r2, r3, #1
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d105      	bne.n	8009fac <xQueueGiveMutexRecursive+0x42>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009fa0:	68b8      	ldr	r0, [r7, #8]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	f000 f83a 	bl	800a020 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009fac:	2301      	movs	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e001      	b.n	8009fb6 <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
	}
 8009fb8:	0018      	movs	r0, r3
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	b005      	add	sp, #20
 8009fbe:	bd90      	pop	{r4, r7, pc}

08009fc0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009fc0:	b590      	push	{r4, r7, lr}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <xQueueTakeMutexRecursive+0x18>
 8009fd4:	b672      	cpsid	i
 8009fd6:	e7fe      	b.n	8009fd6 <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	685c      	ldr	r4, [r3, #4]
 8009fdc:	f001 fb7a 	bl	800b6d4 <xTaskGetCurrentTaskHandle>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	429c      	cmp	r4, r3
 8009fe4:	d107      	bne.n	8009ff6 <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e00f      	b.n	800a016 <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	0011      	movs	r1, r2
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f000 f9f9 	bl	800a3f4 <xQueueSemaphoreTake>
 800a002:	0003      	movs	r3, r0
 800a004:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	1c5a      	adds	r2, r3, #1
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a016:	68fb      	ldr	r3, [r7, #12]
	}
 800a018:	0018      	movs	r0, r3
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b005      	add	sp, #20
 800a01e:	bd90      	pop	{r4, r7, pc}

0800a020 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08a      	sub	sp, #40	; 0x28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a02e:	2300      	movs	r3, #0
 800a030:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <xQueueGenericSend+0x20>
 800a03c:	b672      	cpsid	i
 800a03e:	e7fe      	b.n	800a03e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d103      	bne.n	800a04e <xQueueGenericSend+0x2e>
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <xQueueGenericSend+0x32>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <xQueueGenericSend+0x34>
 800a052:	2300      	movs	r3, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <xQueueGenericSend+0x3c>
 800a058:	b672      	cpsid	i
 800a05a:	e7fe      	b.n	800a05a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d103      	bne.n	800a06a <xQueueGenericSend+0x4a>
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a066:	2b01      	cmp	r3, #1
 800a068:	d101      	bne.n	800a06e <xQueueGenericSend+0x4e>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <xQueueGenericSend+0x50>
 800a06e:	2300      	movs	r3, #0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <xQueueGenericSend+0x58>
 800a074:	b672      	cpsid	i
 800a076:	e7fe      	b.n	800a076 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a078:	f001 fb3a 	bl	800b6f0 <xTaskGetSchedulerState>
 800a07c:	1e03      	subs	r3, r0, #0
 800a07e:	d102      	bne.n	800a086 <xQueueGenericSend+0x66>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <xQueueGenericSend+0x6a>
 800a086:	2301      	movs	r3, #1
 800a088:	e000      	b.n	800a08c <xQueueGenericSend+0x6c>
 800a08a:	2300      	movs	r3, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <xQueueGenericSend+0x74>
 800a090:	b672      	cpsid	i
 800a092:	e7fe      	b.n	800a092 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a094:	f002 f924 	bl	800c2e0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d302      	bcc.n	800a0aa <xQueueGenericSend+0x8a>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d11e      	bne.n	800a0e8 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f000 fb34 	bl	800a71e <prvCopyDataToQueue>
 800a0b6:	0003      	movs	r3, r0
 800a0b8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d009      	beq.n	800a0d6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0c2:	6a3b      	ldr	r3, [r7, #32]
 800a0c4:	3324      	adds	r3, #36	; 0x24
 800a0c6:	0018      	movs	r0, r3
 800a0c8:	f001 f914 	bl	800b2f4 <xTaskRemoveFromEventList>
 800a0cc:	1e03      	subs	r3, r0, #0
 800a0ce:	d007      	beq.n	800a0e0 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0d0:	f002 f8f6 	bl	800c2c0 <vPortYield>
 800a0d4:	e004      	b.n	800a0e0 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0dc:	f002 f8f0 	bl	800c2c0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0e0:	f002 f910 	bl	800c304 <vPortExitCritical>
				return pdPASS;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e05b      	b.n	800a1a0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d103      	bne.n	800a0f6 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0ee:	f002 f909 	bl	800c304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e054      	b.n	800a1a0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0fc:	2314      	movs	r3, #20
 800a0fe:	18fb      	adds	r3, r7, r3
 800a100:	0018      	movs	r0, r3
 800a102:	f001 f9a5 	bl	800b450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a106:	2301      	movs	r3, #1
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a10a:	f002 f8fb 	bl	800c304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a10e:	f000 febb 	bl	800ae88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a112:	f002 f8e5 	bl	800c2e0 <vPortEnterCritical>
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	2244      	movs	r2, #68	; 0x44
 800a11a:	5c9b      	ldrb	r3, [r3, r2]
 800a11c:	b25b      	sxtb	r3, r3
 800a11e:	3301      	adds	r3, #1
 800a120:	d103      	bne.n	800a12a <xQueueGenericSend+0x10a>
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	2244      	movs	r2, #68	; 0x44
 800a126:	2100      	movs	r1, #0
 800a128:	5499      	strb	r1, [r3, r2]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	2245      	movs	r2, #69	; 0x45
 800a12e:	5c9b      	ldrb	r3, [r3, r2]
 800a130:	b25b      	sxtb	r3, r3
 800a132:	3301      	adds	r3, #1
 800a134:	d103      	bne.n	800a13e <xQueueGenericSend+0x11e>
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	2245      	movs	r2, #69	; 0x45
 800a13a:	2100      	movs	r1, #0
 800a13c:	5499      	strb	r1, [r3, r2]
 800a13e:	f002 f8e1 	bl	800c304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a142:	1d3a      	adds	r2, r7, #4
 800a144:	2314      	movs	r3, #20
 800a146:	18fb      	adds	r3, r7, r3
 800a148:	0011      	movs	r1, r2
 800a14a:	0018      	movs	r0, r3
 800a14c:	f001 f994 	bl	800b478 <xTaskCheckForTimeOut>
 800a150:	1e03      	subs	r3, r0, #0
 800a152:	d11e      	bne.n	800a192 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	0018      	movs	r0, r3
 800a158:	f000 fbe6 	bl	800a928 <prvIsQueueFull>
 800a15c:	1e03      	subs	r3, r0, #0
 800a15e:	d011      	beq.n	800a184 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	3310      	adds	r3, #16
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	0011      	movs	r1, r2
 800a168:	0018      	movs	r0, r3
 800a16a:	f001 f851 	bl	800b210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	0018      	movs	r0, r3
 800a172:	f000 fb65 	bl	800a840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a176:	f000 fe93 	bl	800aea0 <xTaskResumeAll>
 800a17a:	1e03      	subs	r3, r0, #0
 800a17c:	d18a      	bne.n	800a094 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800a17e:	f002 f89f 	bl	800c2c0 <vPortYield>
 800a182:	e787      	b.n	800a094 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	0018      	movs	r0, r3
 800a188:	f000 fb5a 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a18c:	f000 fe88 	bl	800aea0 <xTaskResumeAll>
 800a190:	e780      	b.n	800a094 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	0018      	movs	r0, r3
 800a196:	f000 fb53 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19a:	f000 fe81 	bl	800aea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a19e:	2300      	movs	r3, #0
		}
	}
}
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b00a      	add	sp, #40	; 0x28
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1a8:	b590      	push	{r4, r7, lr}
 800a1aa:	b089      	sub	sp, #36	; 0x24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <xQueueGenericSendFromISR+0x1c>
 800a1c0:	b672      	cpsid	i
 800a1c2:	e7fe      	b.n	800a1c2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d103      	bne.n	800a1d2 <xQueueGenericSendFromISR+0x2a>
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <xQueueGenericSendFromISR+0x2e>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <xQueueGenericSendFromISR+0x30>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <xQueueGenericSendFromISR+0x38>
 800a1dc:	b672      	cpsid	i
 800a1de:	e7fe      	b.n	800a1de <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d103      	bne.n	800a1ee <xQueueGenericSendFromISR+0x46>
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d101      	bne.n	800a1f2 <xQueueGenericSendFromISR+0x4a>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xQueueGenericSendFromISR+0x4c>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <xQueueGenericSendFromISR+0x54>
 800a1f8:	b672      	cpsid	i
 800a1fa:	e7fe      	b.n	800a1fa <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1fc:	f002 f89a 	bl	800c334 <ulSetInterruptMaskFromISR>
 800a200:	0003      	movs	r3, r0
 800a202:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d302      	bcc.n	800a216 <xQueueGenericSendFromISR+0x6e>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d12e      	bne.n	800a274 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a216:	2413      	movs	r4, #19
 800a218:	193b      	adds	r3, r7, r4
 800a21a:	69ba      	ldr	r2, [r7, #24]
 800a21c:	2145      	movs	r1, #69	; 0x45
 800a21e:	5c52      	ldrb	r2, [r2, r1]
 800a220:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	0018      	movs	r0, r3
 800a22a:	f000 fa78 	bl	800a71e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a22e:	193b      	adds	r3, r7, r4
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	b25b      	sxtb	r3, r3
 800a234:	3301      	adds	r3, #1
 800a236:	d111      	bne.n	800a25c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d016      	beq.n	800a26e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	3324      	adds	r3, #36	; 0x24
 800a244:	0018      	movs	r0, r3
 800a246:	f001 f855 	bl	800b2f4 <xTaskRemoveFromEventList>
 800a24a:	1e03      	subs	r3, r0, #0
 800a24c:	d00f      	beq.n	800a26e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00c      	beq.n	800a26e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	e008      	b.n	800a26e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a25c:	2313      	movs	r3, #19
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	b2db      	uxtb	r3, r3
 800a266:	b259      	sxtb	r1, r3
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	2245      	movs	r2, #69	; 0x45
 800a26c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a26e:	2301      	movs	r3, #1
 800a270:	61fb      	str	r3, [r7, #28]
		{
 800a272:	e001      	b.n	800a278 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	0018      	movs	r0, r3
 800a27c:	f002 f860 	bl	800c340 <vClearInterruptMaskFromISR>

	return xReturn;
 800a280:	69fb      	ldr	r3, [r7, #28]
}
 800a282:	0018      	movs	r0, r3
 800a284:	46bd      	mov	sp, r7
 800a286:	b009      	add	sp, #36	; 0x24
 800a288:	bd90      	pop	{r4, r7, pc}

0800a28a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b08a      	sub	sp, #40	; 0x28
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a296:	2300      	movs	r3, #0
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <xQueueReceive+0x1e>
 800a2a4:	b672      	cpsid	i
 800a2a6:	e7fe      	b.n	800a2a6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d103      	bne.n	800a2b6 <xQueueReceive+0x2c>
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <xQueueReceive+0x30>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e000      	b.n	800a2bc <xQueueReceive+0x32>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <xQueueReceive+0x3a>
 800a2c0:	b672      	cpsid	i
 800a2c2:	e7fe      	b.n	800a2c2 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2c4:	f001 fa14 	bl	800b6f0 <xTaskGetSchedulerState>
 800a2c8:	1e03      	subs	r3, r0, #0
 800a2ca:	d102      	bne.n	800a2d2 <xQueueReceive+0x48>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <xQueueReceive+0x4c>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e000      	b.n	800a2d8 <xQueueReceive+0x4e>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <xQueueReceive+0x56>
 800a2dc:	b672      	cpsid	i
 800a2de:	e7fe      	b.n	800a2de <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2e0:	f001 fffe 	bl	800c2e0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01a      	beq.n	800a326 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	0011      	movs	r1, r2
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	f000 fa7c 	bl	800a7f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	1e5a      	subs	r2, r3, #1
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	3310      	adds	r3, #16
 800a310:	0018      	movs	r0, r3
 800a312:	f000 ffef 	bl	800b2f4 <xTaskRemoveFromEventList>
 800a316:	1e03      	subs	r3, r0, #0
 800a318:	d001      	beq.n	800a31e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a31a:	f001 ffd1 	bl	800c2c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a31e:	f001 fff1 	bl	800c304 <vPortExitCritical>
				return pdPASS;
 800a322:	2301      	movs	r3, #1
 800a324:	e062      	b.n	800a3ec <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a32c:	f001 ffea 	bl	800c304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a330:	2300      	movs	r3, #0
 800a332:	e05b      	b.n	800a3ec <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a33a:	2314      	movs	r3, #20
 800a33c:	18fb      	adds	r3, r7, r3
 800a33e:	0018      	movs	r0, r3
 800a340:	f001 f886 	bl	800b450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a344:	2301      	movs	r3, #1
 800a346:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a348:	f001 ffdc 	bl	800c304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a34c:	f000 fd9c 	bl	800ae88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a350:	f001 ffc6 	bl	800c2e0 <vPortEnterCritical>
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	2244      	movs	r2, #68	; 0x44
 800a358:	5c9b      	ldrb	r3, [r3, r2]
 800a35a:	b25b      	sxtb	r3, r3
 800a35c:	3301      	adds	r3, #1
 800a35e:	d103      	bne.n	800a368 <xQueueReceive+0xde>
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	2244      	movs	r2, #68	; 0x44
 800a364:	2100      	movs	r1, #0
 800a366:	5499      	strb	r1, [r3, r2]
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	2245      	movs	r2, #69	; 0x45
 800a36c:	5c9b      	ldrb	r3, [r3, r2]
 800a36e:	b25b      	sxtb	r3, r3
 800a370:	3301      	adds	r3, #1
 800a372:	d103      	bne.n	800a37c <xQueueReceive+0xf2>
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	2245      	movs	r2, #69	; 0x45
 800a378:	2100      	movs	r1, #0
 800a37a:	5499      	strb	r1, [r3, r2]
 800a37c:	f001 ffc2 	bl	800c304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a380:	1d3a      	adds	r2, r7, #4
 800a382:	2314      	movs	r3, #20
 800a384:	18fb      	adds	r3, r7, r3
 800a386:	0011      	movs	r1, r2
 800a388:	0018      	movs	r0, r3
 800a38a:	f001 f875 	bl	800b478 <xTaskCheckForTimeOut>
 800a38e:	1e03      	subs	r3, r0, #0
 800a390:	d11e      	bne.n	800a3d0 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	0018      	movs	r0, r3
 800a396:	f000 fab1 	bl	800a8fc <prvIsQueueEmpty>
 800a39a:	1e03      	subs	r3, r0, #0
 800a39c:	d011      	beq.n	800a3c2 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	3324      	adds	r3, #36	; 0x24
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	0011      	movs	r1, r2
 800a3a6:	0018      	movs	r0, r3
 800a3a8:	f000 ff32 	bl	800b210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f000 fa46 	bl	800a840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3b4:	f000 fd74 	bl	800aea0 <xTaskResumeAll>
 800a3b8:	1e03      	subs	r3, r0, #0
 800a3ba:	d191      	bne.n	800a2e0 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800a3bc:	f001 ff80 	bl	800c2c0 <vPortYield>
 800a3c0:	e78e      	b.n	800a2e0 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f000 fa3b 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3ca:	f000 fd69 	bl	800aea0 <xTaskResumeAll>
 800a3ce:	e787      	b.n	800a2e0 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f000 fa34 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3d8:	f000 fd62 	bl	800aea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f000 fa8c 	bl	800a8fc <prvIsQueueEmpty>
 800a3e4:	1e03      	subs	r3, r0, #0
 800a3e6:	d100      	bne.n	800a3ea <xQueueReceive+0x160>
 800a3e8:	e77a      	b.n	800a2e0 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	b00a      	add	sp, #40	; 0x28
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08a      	sub	sp, #40	; 0x28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a406:	2300      	movs	r3, #0
 800a408:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <xQueueSemaphoreTake+0x20>
 800a410:	b672      	cpsid	i
 800a412:	e7fe      	b.n	800a412 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <xQueueSemaphoreTake+0x2c>
 800a41c:	b672      	cpsid	i
 800a41e:	e7fe      	b.n	800a41e <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a420:	f001 f966 	bl	800b6f0 <xTaskGetSchedulerState>
 800a424:	1e03      	subs	r3, r0, #0
 800a426:	d102      	bne.n	800a42e <xQueueSemaphoreTake+0x3a>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <xQueueSemaphoreTake+0x3e>
 800a42e:	2301      	movs	r3, #1
 800a430:	e000      	b.n	800a434 <xQueueSemaphoreTake+0x40>
 800a432:	2300      	movs	r3, #0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <xQueueSemaphoreTake+0x48>
 800a438:	b672      	cpsid	i
 800a43a:	e7fe      	b.n	800a43a <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a43c:	f001 ff50 	bl	800c2e0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01d      	beq.n	800a488 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	1e5a      	subs	r2, r3, #1
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a45c:	f001 fab8 	bl	800b9d0 <pvTaskIncrementMutexHeldCount>
 800a460:	0002      	movs	r2, r0
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d008      	beq.n	800a480 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	3310      	adds	r3, #16
 800a472:	0018      	movs	r0, r3
 800a474:	f000 ff3e 	bl	800b2f4 <xTaskRemoveFromEventList>
 800a478:	1e03      	subs	r3, r0, #0
 800a47a:	d001      	beq.n	800a480 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a47c:	f001 ff20 	bl	800c2c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a480:	f001 ff40 	bl	800c304 <vPortExitCritical>
				return pdPASS;
 800a484:	2301      	movs	r3, #1
 800a486:	e08b      	b.n	800a5a0 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d108      	bne.n	800a4a0 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <xQueueSemaphoreTake+0xa4>
 800a494:	b672      	cpsid	i
 800a496:	e7fe      	b.n	800a496 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a498:	f001 ff34 	bl	800c304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a49c:	2300      	movs	r3, #0
 800a49e:	e07f      	b.n	800a5a0 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d106      	bne.n	800a4b4 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	18fb      	adds	r3, r7, r3
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	f000 ffd0 	bl	800b450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4b4:	f001 ff26 	bl	800c304 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4b8:	f000 fce6 	bl	800ae88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4bc:	f001 ff10 	bl	800c2e0 <vPortEnterCritical>
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	2244      	movs	r2, #68	; 0x44
 800a4c4:	5c9b      	ldrb	r3, [r3, r2]
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	d103      	bne.n	800a4d4 <xQueueSemaphoreTake+0xe0>
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	2244      	movs	r2, #68	; 0x44
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	5499      	strb	r1, [r3, r2]
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	2245      	movs	r2, #69	; 0x45
 800a4d8:	5c9b      	ldrb	r3, [r3, r2]
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	3301      	adds	r3, #1
 800a4de:	d103      	bne.n	800a4e8 <xQueueSemaphoreTake+0xf4>
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	2245      	movs	r2, #69	; 0x45
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	5499      	strb	r1, [r3, r2]
 800a4e8:	f001 ff0c 	bl	800c304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ec:	003a      	movs	r2, r7
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	18fb      	adds	r3, r7, r3
 800a4f2:	0011      	movs	r1, r2
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f000 ffbf 	bl	800b478 <xTaskCheckForTimeOut>
 800a4fa:	1e03      	subs	r3, r0, #0
 800a4fc:	d12e      	bne.n	800a55c <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	0018      	movs	r0, r3
 800a502:	f000 f9fb 	bl	800a8fc <prvIsQueueEmpty>
 800a506:	1e03      	subs	r3, r0, #0
 800a508:	d021      	beq.n	800a54e <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800a512:	f001 fee5 	bl	800c2e0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	0018      	movs	r0, r3
 800a51c:	f001 f904 	bl	800b728 <xTaskPriorityInherit>
 800a520:	0003      	movs	r3, r0
 800a522:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800a524:	f001 feee 	bl	800c304 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	3324      	adds	r3, #36	; 0x24
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	0011      	movs	r1, r2
 800a530:	0018      	movs	r0, r3
 800a532:	f000 fe6d 	bl	800b210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	0018      	movs	r0, r3
 800a53a:	f000 f981 	bl	800a840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a53e:	f000 fcaf 	bl	800aea0 <xTaskResumeAll>
 800a542:	1e03      	subs	r3, r0, #0
 800a544:	d000      	beq.n	800a548 <xQueueSemaphoreTake+0x154>
 800a546:	e779      	b.n	800a43c <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800a548:	f001 feba 	bl	800c2c0 <vPortYield>
 800a54c:	e776      	b.n	800a43c <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	0018      	movs	r0, r3
 800a552:	f000 f975 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a556:	f000 fca3 	bl	800aea0 <xTaskResumeAll>
 800a55a:	e76f      	b.n	800a43c <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	0018      	movs	r0, r3
 800a560:	f000 f96e 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a564:	f000 fc9c 	bl	800aea0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	0018      	movs	r0, r3
 800a56c:	f000 f9c6 	bl	800a8fc <prvIsQueueEmpty>
 800a570:	1e03      	subs	r3, r0, #0
 800a572:	d100      	bne.n	800a576 <xQueueSemaphoreTake+0x182>
 800a574:	e762      	b.n	800a43c <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d010      	beq.n	800a59e <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800a57c:	f001 feb0 	bl	800c2e0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	0018      	movs	r0, r3
 800a584:	f000 f8b5 	bl	800a6f2 <prvGetDisinheritPriorityAfterTimeout>
 800a588:	0003      	movs	r3, r0
 800a58a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	0011      	movs	r1, r2
 800a594:	0018      	movs	r0, r3
 800a596:	f001 f991 	bl	800b8bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a59a:	f001 feb3 	bl	800c304 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a59e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	b00a      	add	sp, #40	; 0x28
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b08b      	sub	sp, #44	; 0x2c
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a5b8:	6a3b      	ldr	r3, [r7, #32]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <xQueueReceiveFromISR+0x1a>
 800a5be:	b672      	cpsid	i
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d103      	bne.n	800a5d0 <xQueueReceiveFromISR+0x28>
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <xQueueReceiveFromISR+0x2c>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <xQueueReceiveFromISR+0x2e>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <xQueueReceiveFromISR+0x36>
 800a5da:	b672      	cpsid	i
 800a5dc:	e7fe      	b.n	800a5dc <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5de:	f001 fea9 	bl	800c334 <ulSetInterruptMaskFromISR>
 800a5e2:	0003      	movs	r3, r0
 800a5e4:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ea:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d032      	beq.n	800a658 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a5f2:	2417      	movs	r4, #23
 800a5f4:	193b      	adds	r3, r7, r4
 800a5f6:	6a3a      	ldr	r2, [r7, #32]
 800a5f8:	2144      	movs	r1, #68	; 0x44
 800a5fa:	5c52      	ldrb	r2, [r2, r1]
 800a5fc:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	6a3b      	ldr	r3, [r7, #32]
 800a602:	0011      	movs	r1, r2
 800a604:	0018      	movs	r0, r3
 800a606:	f000 f8f5 	bl	800a7f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	1e5a      	subs	r2, r3, #1
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a612:	193b      	adds	r3, r7, r4
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	b25b      	sxtb	r3, r3
 800a618:	3301      	adds	r3, #1
 800a61a:	d111      	bne.n	800a640 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d016      	beq.n	800a652 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	3310      	adds	r3, #16
 800a628:	0018      	movs	r0, r3
 800a62a:	f000 fe63 	bl	800b2f4 <xTaskRemoveFromEventList>
 800a62e:	1e03      	subs	r3, r0, #0
 800a630:	d00f      	beq.n	800a652 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00c      	beq.n	800a652 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	e008      	b.n	800a652 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a640:	2317      	movs	r3, #23
 800a642:	18fb      	adds	r3, r7, r3
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	3301      	adds	r3, #1
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	b259      	sxtb	r1, r3
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	2244      	movs	r2, #68	; 0x44
 800a650:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a652:	2301      	movs	r3, #1
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
 800a656:	e001      	b.n	800a65c <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800a658:	2300      	movs	r3, #0
 800a65a:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	0018      	movs	r0, r3
 800a660:	f001 fe6e 	bl	800c340 <vClearInterruptMaskFromISR>

	return xReturn;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a666:	0018      	movs	r0, r3
 800a668:	46bd      	mov	sp, r7
 800a66a:	b00b      	add	sp, #44	; 0x2c
 800a66c:	bd90      	pop	{r4, r7, pc}

0800a66e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <uxQueueMessagesWaiting+0x12>
 800a67c:	b672      	cpsid	i
 800a67e:	e7fe      	b.n	800a67e <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 800a680:	f001 fe2e 	bl	800c2e0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a68a:	f001 fe3b 	bl	800c304 <vPortExitCritical>

	return uxReturn;
 800a68e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a690:	0018      	movs	r0, r3
 800a692:	46bd      	mov	sp, r7
 800a694:	b004      	add	sp, #16
 800a696:	bd80      	pop	{r7, pc}

0800a698 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <uxQueueMessagesWaitingFromISR+0x12>
 800a6a6:	b672      	cpsid	i
 800a6a8:	e7fe      	b.n	800a6a8 <uxQueueMessagesWaitingFromISR+0x10>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	b004      	add	sp, #16
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <vQueueDelete+0x16>
 800a6cc:	b672      	cpsid	i
 800a6ce:	e7fe      	b.n	800a6ce <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f000 f968 	bl	800a9a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2246      	movs	r2, #70	; 0x46
 800a6dc:	5c9b      	ldrb	r3, [r3, r2]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d103      	bne.n	800a6ea <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	f001 ff39 	bl	800c55c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	b004      	add	sp, #16
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d006      	beq.n	800a710 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2238      	movs	r2, #56	; 0x38
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	e001      	b.n	800a714 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a714:	68fb      	ldr	r3, [r7, #12]
	}
 800a716:	0018      	movs	r0, r3
 800a718:	46bd      	mov	sp, r7
 800a71a:	b004      	add	sp, #16
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b086      	sub	sp, #24
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10e      	bne.n	800a75a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d14e      	bne.n	800a7e2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	0018      	movs	r0, r3
 800a74a:	f001 f85b 	bl	800b804 <xTaskPriorityDisinherit>
 800a74e:	0003      	movs	r3, r0
 800a750:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	605a      	str	r2, [r3, #4]
 800a758:	e043      	b.n	800a7e2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d119      	bne.n	800a794 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6898      	ldr	r0, [r3, #8]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	0019      	movs	r1, r3
 800a76c:	f002 f8db 	bl	800c926 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	18d2      	adds	r2, r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	429a      	cmp	r2, r3
 800a788:	d32b      	bcc.n	800a7e2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	609a      	str	r2, [r3, #8]
 800a792:	e026      	b.n	800a7e2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68d8      	ldr	r0, [r3, #12]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	0019      	movs	r1, r3
 800a7a0:	f002 f8c1 	bl	800c926 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	425b      	negs	r3, r3
 800a7ae:	18d2      	adds	r2, r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d207      	bcs.n	800a7d0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c8:	425b      	negs	r3, r3
 800a7ca:	18d2      	adds	r2, r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d105      	bne.n	800a7e2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7ea:	697b      	ldr	r3, [r7, #20]
}
 800a7ec:	0018      	movs	r0, r3
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	b006      	add	sp, #24
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d018      	beq.n	800a838 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	18d2      	adds	r2, r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d303      	bcc.n	800a828 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68d9      	ldr	r1, [r3, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	0018      	movs	r0, r3
 800a834:	f002 f877 	bl	800c926 <memcpy>
	}
}
 800a838:	46c0      	nop			; (mov r8, r8)
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b002      	add	sp, #8
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a848:	f001 fd4a 	bl	800c2e0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a84c:	230f      	movs	r3, #15
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	2145      	movs	r1, #69	; 0x45
 800a854:	5c52      	ldrb	r2, [r2, r1]
 800a856:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a858:	e013      	b.n	800a882 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d016      	beq.n	800a890 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3324      	adds	r3, #36	; 0x24
 800a866:	0018      	movs	r0, r3
 800a868:	f000 fd44 	bl	800b2f4 <xTaskRemoveFromEventList>
 800a86c:	1e03      	subs	r3, r0, #0
 800a86e:	d001      	beq.n	800a874 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a870:	f000 fe52 	bl	800b518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a874:	210f      	movs	r1, #15
 800a876:	187b      	adds	r3, r7, r1
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	187b      	adds	r3, r7, r1
 800a880:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a882:	230f      	movs	r3, #15
 800a884:	18fb      	adds	r3, r7, r3
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	b25b      	sxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dce5      	bgt.n	800a85a <prvUnlockQueue+0x1a>
 800a88e:	e000      	b.n	800a892 <prvUnlockQueue+0x52>
					break;
 800a890:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2245      	movs	r2, #69	; 0x45
 800a896:	21ff      	movs	r1, #255	; 0xff
 800a898:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a89a:	f001 fd33 	bl	800c304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a89e:	f001 fd1f 	bl	800c2e0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8a2:	230e      	movs	r3, #14
 800a8a4:	18fb      	adds	r3, r7, r3
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	2144      	movs	r1, #68	; 0x44
 800a8aa:	5c52      	ldrb	r2, [r2, r1]
 800a8ac:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8ae:	e013      	b.n	800a8d8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d016      	beq.n	800a8e6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3310      	adds	r3, #16
 800a8bc:	0018      	movs	r0, r3
 800a8be:	f000 fd19 	bl	800b2f4 <xTaskRemoveFromEventList>
 800a8c2:	1e03      	subs	r3, r0, #0
 800a8c4:	d001      	beq.n	800a8ca <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800a8c6:	f000 fe27 	bl	800b518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8ca:	210e      	movs	r1, #14
 800a8cc:	187b      	adds	r3, r7, r1
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	187b      	adds	r3, r7, r1
 800a8d6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8d8:	230e      	movs	r3, #14
 800a8da:	18fb      	adds	r3, r7, r3
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b25b      	sxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dce5      	bgt.n	800a8b0 <prvUnlockQueue+0x70>
 800a8e4:	e000      	b.n	800a8e8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800a8e6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2244      	movs	r2, #68	; 0x44
 800a8ec:	21ff      	movs	r1, #255	; 0xff
 800a8ee:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a8f0:	f001 fd08 	bl	800c304 <vPortExitCritical>
}
 800a8f4:	46c0      	nop			; (mov r8, r8)
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	b004      	add	sp, #16
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a904:	f001 fcec 	bl	800c2e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d102      	bne.n	800a916 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	e001      	b.n	800a91a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a91a:	f001 fcf3 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800a91e:	68fb      	ldr	r3, [r7, #12]
}
 800a920:	0018      	movs	r0, r3
 800a922:	46bd      	mov	sp, r7
 800a924:	b004      	add	sp, #16
 800a926:	bd80      	pop	{r7, pc}

0800a928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a930:	f001 fcd6 	bl	800c2e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d102      	bne.n	800a946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e001      	b.n	800a94a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a94a:	f001 fcdb 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800a94e:	68fb      	ldr	r3, [r7, #12]
}
 800a950:	0018      	movs	r0, r3
 800a952:	46bd      	mov	sp, r7
 800a954:	b004      	add	sp, #16
 800a956:	bd80      	pop	{r7, pc}

0800a958 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	e015      	b.n	800a994 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a968:	4b0e      	ldr	r3, [pc, #56]	; (800a9a4 <vQueueAddToRegistry+0x4c>)
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	00d2      	lsls	r2, r2, #3
 800a96e:	58d3      	ldr	r3, [r2, r3]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10c      	bne.n	800a98e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a974:	4b0b      	ldr	r3, [pc, #44]	; (800a9a4 <vQueueAddToRegistry+0x4c>)
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	00d2      	lsls	r2, r2, #3
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a97e:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <vQueueAddToRegistry+0x4c>)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	18d3      	adds	r3, r2, r3
 800a986:	3304      	adds	r3, #4
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a98c:	e006      	b.n	800a99c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3301      	adds	r3, #1
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b07      	cmp	r3, #7
 800a998:	d9e6      	bls.n	800a968 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	46c0      	nop			; (mov r8, r8)
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	b004      	add	sp, #16
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20002e9c 	.word	0x20002e9c

0800a9a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	e018      	b.n	800a9e8 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a9b6:	4a10      	ldr	r2, [pc, #64]	; (800a9f8 <vQueueUnregisterQueue+0x50>)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	00db      	lsls	r3, r3, #3
 800a9bc:	18d3      	adds	r3, r2, r3
 800a9be:	3304      	adds	r3, #4
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d10c      	bne.n	800a9e2 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a9c8:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <vQueueUnregisterQueue+0x50>)
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	00d2      	lsls	r2, r2, #3
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a9d2:	4a09      	ldr	r2, [pc, #36]	; (800a9f8 <vQueueUnregisterQueue+0x50>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	00db      	lsls	r3, r3, #3
 800a9d8:	18d3      	adds	r3, r2, r3
 800a9da:	3304      	adds	r3, #4
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
				break;
 800a9e0:	e006      	b.n	800a9f0 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b07      	cmp	r3, #7
 800a9ec:	d9e3      	bls.n	800a9b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	46c0      	nop			; (mov r8, r8)
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	b004      	add	sp, #16
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20002e9c 	.word	0x20002e9c

0800a9fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa0c:	f001 fc68 	bl	800c2e0 <vPortEnterCritical>
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2244      	movs	r2, #68	; 0x44
 800aa14:	5c9b      	ldrb	r3, [r3, r2]
 800aa16:	b25b      	sxtb	r3, r3
 800aa18:	3301      	adds	r3, #1
 800aa1a:	d103      	bne.n	800aa24 <vQueueWaitForMessageRestricted+0x28>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2244      	movs	r2, #68	; 0x44
 800aa20:	2100      	movs	r1, #0
 800aa22:	5499      	strb	r1, [r3, r2]
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2245      	movs	r2, #69	; 0x45
 800aa28:	5c9b      	ldrb	r3, [r3, r2]
 800aa2a:	b25b      	sxtb	r3, r3
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	d103      	bne.n	800aa38 <vQueueWaitForMessageRestricted+0x3c>
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	2245      	movs	r2, #69	; 0x45
 800aa34:	2100      	movs	r1, #0
 800aa36:	5499      	strb	r1, [r3, r2]
 800aa38:	f001 fc64 	bl	800c304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d106      	bne.n	800aa52 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	3324      	adds	r3, #36	; 0x24
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f000 fc2b 	bl	800b2a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	0018      	movs	r0, r3
 800aa56:	f7ff fef3 	bl	800a840 <prvUnlockQueue>
	}
 800aa5a:	46c0      	nop			; (mov r8, r8)
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	b006      	add	sp, #24
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa62:	b590      	push	{r4, r7, lr}
 800aa64:	b08d      	sub	sp, #52	; 0x34
 800aa66:	af04      	add	r7, sp, #16
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
 800aa6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <xTaskCreateStatic+0x18>
 800aa76:	b672      	cpsid	i
 800aa78:	e7fe      	b.n	800aa78 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <xTaskCreateStatic+0x22>
 800aa80:	b672      	cpsid	i
 800aa82:	e7fe      	b.n	800aa82 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa84:	23bc      	movs	r3, #188	; 0xbc
 800aa86:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2bbc      	cmp	r3, #188	; 0xbc
 800aa8c:	d001      	beq.n	800aa92 <xTaskCreateStatic+0x30>
 800aa8e:	b672      	cpsid	i
 800aa90:	e7fe      	b.n	800aa90 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d020      	beq.n	800aada <xTaskCreateStatic+0x78>
 800aa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d01d      	beq.n	800aada <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaa6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	22b9      	movs	r2, #185	; 0xb9
 800aaac:	2102      	movs	r1, #2
 800aaae:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aab0:	683c      	ldr	r4, [r7, #0]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	2300      	movs	r3, #0
 800aaba:	9303      	str	r3, [sp, #12]
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	9302      	str	r3, [sp, #8]
 800aac0:	2318      	movs	r3, #24
 800aac2:	18fb      	adds	r3, r7, r3
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	0023      	movs	r3, r4
 800aacc:	f000 f858 	bl	800ab80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	0018      	movs	r0, r3
 800aad4:	f000 f8ec 	bl	800acb0 <prvAddNewTaskToReadyList>
 800aad8:	e001      	b.n	800aade <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aade:	69bb      	ldr	r3, [r7, #24]
	}
 800aae0:	0018      	movs	r0, r3
 800aae2:	46bd      	mov	sp, r7
 800aae4:	b009      	add	sp, #36	; 0x24
 800aae6:	bd90      	pop	{r4, r7, pc}

0800aae8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aae8:	b590      	push	{r4, r7, lr}
 800aaea:	b08d      	sub	sp, #52	; 0x34
 800aaec:	af04      	add	r7, sp, #16
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	1dbb      	adds	r3, r7, #6
 800aaf6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf8:	1dbb      	adds	r3, r7, #6
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	0018      	movs	r0, r3
 800ab00:	f001 fc86 	bl	800c410 <pvPortMalloc>
 800ab04:	0003      	movs	r3, r0
 800ab06:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d010      	beq.n	800ab30 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ab0e:	20bc      	movs	r0, #188	; 0xbc
 800ab10:	f001 fc7e 	bl	800c410 <pvPortMalloc>
 800ab14:	0003      	movs	r3, r0
 800ab16:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	631a      	str	r2, [r3, #48]	; 0x30
 800ab24:	e006      	b.n	800ab34 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f001 fd17 	bl	800c55c <vPortFree>
 800ab2e:	e001      	b.n	800ab34 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d01a      	beq.n	800ab70 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	22b9      	movs	r2, #185	; 0xb9
 800ab3e:	2100      	movs	r1, #0
 800ab40:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab42:	1dbb      	adds	r3, r7, #6
 800ab44:	881a      	ldrh	r2, [r3, #0]
 800ab46:	683c      	ldr	r4, [r7, #0]
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9303      	str	r3, [sp, #12]
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	9302      	str	r3, [sp, #8]
 800ab54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	0023      	movs	r3, r4
 800ab5e:	f000 f80f 	bl	800ab80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	0018      	movs	r0, r3
 800ab66:	f000 f8a3 	bl	800acb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	61bb      	str	r3, [r7, #24]
 800ab6e:	e002      	b.n	800ab76 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab70:	2301      	movs	r3, #1
 800ab72:	425b      	negs	r3, r3
 800ab74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab76:	69bb      	ldr	r3, [r7, #24]
	}
 800ab78:	0018      	movs	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b009      	add	sp, #36	; 0x24
 800ab7e:	bd90      	pop	{r4, r7, pc}

0800ab80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
 800ab8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	001a      	movs	r2, r3
 800ab98:	21a5      	movs	r1, #165	; 0xa5
 800ab9a:	f001 fee0 	bl	800c95e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	493e      	ldr	r1, [pc, #248]	; (800aca0 <prvInitialiseNewTask+0x120>)
 800aba6:	468c      	mov	ip, r1
 800aba8:	4463      	add	r3, ip
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	18d3      	adds	r3, r2, r3
 800abae:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	2207      	movs	r2, #7
 800abb4:	4393      	bics	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2207      	movs	r2, #7
 800abbc:	4013      	ands	r3, r2
 800abbe:	d001      	beq.n	800abc4 <prvInitialiseNewTask+0x44>
 800abc0:	b672      	cpsid	i
 800abc2:	e7fe      	b.n	800abc2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abc4:	2300      	movs	r3, #0
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	e013      	b.n	800abf2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	18d3      	adds	r3, r2, r3
 800abd0:	7818      	ldrb	r0, [r3, #0]
 800abd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd4:	2134      	movs	r1, #52	; 0x34
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	18d3      	adds	r3, r2, r3
 800abda:	185b      	adds	r3, r3, r1
 800abdc:	1c02      	adds	r2, r0, #0
 800abde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	18d3      	adds	r3, r2, r3
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	3301      	adds	r3, #1
 800abf0:	617b      	str	r3, [r7, #20]
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2b0f      	cmp	r3, #15
 800abf6:	d9e8      	bls.n	800abca <prvInitialiseNewTask+0x4a>
 800abf8:	e000      	b.n	800abfc <prvInitialiseNewTask+0x7c>
		{
			break;
 800abfa:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	2243      	movs	r2, #67	; 0x43
 800ac00:	2100      	movs	r1, #0
 800ac02:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	2b37      	cmp	r3, #55	; 0x37
 800ac08:	d901      	bls.n	800ac0e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac0a:	2337      	movs	r3, #55	; 0x37
 800ac0c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac10:	6a3a      	ldr	r2, [r7, #32]
 800ac12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	6a3a      	ldr	r2, [r7, #32]
 800ac18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	3304      	adds	r3, #4
 800ac24:	0018      	movs	r0, r3
 800ac26:	f7fe ffc3 	bl	8009bb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	3318      	adds	r3, #24
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f7fe ffbe 	bl	8009bb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	2238      	movs	r2, #56	; 0x38
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	22b4      	movs	r2, #180	; 0xb4
 800ac4e:	2100      	movs	r1, #0
 800ac50:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac54:	22b8      	movs	r2, #184	; 0xb8
 800ac56:	2100      	movs	r1, #0
 800ac58:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	3354      	adds	r3, #84	; 0x54
 800ac5e:	2260      	movs	r2, #96	; 0x60
 800ac60:	2100      	movs	r1, #0
 800ac62:	0018      	movs	r0, r3
 800ac64:	f001 fe7b 	bl	800c95e <memset>
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	4a0e      	ldr	r2, [pc, #56]	; (800aca4 <prvInitialiseNewTask+0x124>)
 800ac6c:	659a      	str	r2, [r3, #88]	; 0x58
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	4a0d      	ldr	r2, [pc, #52]	; (800aca8 <prvInitialiseNewTask+0x128>)
 800ac72:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	4a0d      	ldr	r2, [pc, #52]	; (800acac <prvInitialiseNewTask+0x12c>)
 800ac78:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	68f9      	ldr	r1, [r7, #12]
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	0018      	movs	r0, r3
 800ac82:	f001 fa91 	bl	800c1a8 <pxPortInitialiseStack>
 800ac86:	0002      	movs	r2, r0
 800ac88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac98:	46c0      	nop			; (mov r8, r8)
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	b006      	add	sp, #24
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	3fffffff 	.word	0x3fffffff
 800aca4:	0800dd54 	.word	0x0800dd54
 800aca8:	0800dd74 	.word	0x0800dd74
 800acac:	0800dd34 	.word	0x0800dd34

0800acb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acb8:	f001 fb12 	bl	800c2e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acbc:	4b2a      	ldr	r3, [pc, #168]	; (800ad68 <prvAddNewTaskToReadyList+0xb8>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	4b29      	ldr	r3, [pc, #164]	; (800ad68 <prvAddNewTaskToReadyList+0xb8>)
 800acc4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800acc6:	4b29      	ldr	r3, [pc, #164]	; (800ad6c <prvAddNewTaskToReadyList+0xbc>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d109      	bne.n	800ace2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acce:	4b27      	ldr	r3, [pc, #156]	; (800ad6c <prvAddNewTaskToReadyList+0xbc>)
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acd4:	4b24      	ldr	r3, [pc, #144]	; (800ad68 <prvAddNewTaskToReadyList+0xb8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d110      	bne.n	800acfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acdc:	f000 fc36 	bl	800b54c <prvInitialiseTaskLists>
 800ace0:	e00d      	b.n	800acfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ace2:	4b23      	ldr	r3, [pc, #140]	; (800ad70 <prvAddNewTaskToReadyList+0xc0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d109      	bne.n	800acfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acea:	4b20      	ldr	r3, [pc, #128]	; (800ad6c <prvAddNewTaskToReadyList+0xbc>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d802      	bhi.n	800acfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acf8:	4b1c      	ldr	r3, [pc, #112]	; (800ad6c <prvAddNewTaskToReadyList+0xbc>)
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acfe:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <prvAddNewTaskToReadyList+0xc4>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	4b1b      	ldr	r3, [pc, #108]	; (800ad74 <prvAddNewTaskToReadyList+0xc4>)
 800ad06:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad08:	4b1a      	ldr	r3, [pc, #104]	; (800ad74 <prvAddNewTaskToReadyList+0xc4>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	4b18      	ldr	r3, [pc, #96]	; (800ad78 <prvAddNewTaskToReadyList+0xc8>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d903      	bls.n	800ad24 <prvAddNewTaskToReadyList+0x74>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad20:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <prvAddNewTaskToReadyList+0xc8>)
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad28:	0013      	movs	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	189b      	adds	r3, r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4a12      	ldr	r2, [pc, #72]	; (800ad7c <prvAddNewTaskToReadyList+0xcc>)
 800ad32:	189a      	adds	r2, r3, r2
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3304      	adds	r3, #4
 800ad38:	0019      	movs	r1, r3
 800ad3a:	0010      	movs	r0, r2
 800ad3c:	f7fe ff43 	bl	8009bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad40:	f001 fae0 	bl	800c304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <prvAddNewTaskToReadyList+0xc0>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d008      	beq.n	800ad5e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad4c:	4b07      	ldr	r3, [pc, #28]	; (800ad6c <prvAddNewTaskToReadyList+0xbc>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d201      	bcs.n	800ad5e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad5a:	f001 fab1 	bl	800c2c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	46bd      	mov	sp, r7
 800ad62:	b002      	add	sp, #8
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	2000198c 	.word	0x2000198c
 800ad6c:	200014b8 	.word	0x200014b8
 800ad70:	20001998 	.word	0x20001998
 800ad74:	200019a8 	.word	0x200019a8
 800ad78:	20001994 	.word	0x20001994
 800ad7c:	200014bc 	.word	0x200014bc

0800ad80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d010      	beq.n	800adb4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad92:	4b0d      	ldr	r3, [pc, #52]	; (800adc8 <vTaskDelay+0x48>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <vTaskDelay+0x1e>
 800ad9a:	b672      	cpsid	i
 800ad9c:	e7fe      	b.n	800ad9c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800ad9e:	f000 f873 	bl	800ae88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2100      	movs	r1, #0
 800ada6:	0018      	movs	r0, r3
 800ada8:	f000 fe24 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adac:	f000 f878 	bl	800aea0 <xTaskResumeAll>
 800adb0:	0003      	movs	r3, r0
 800adb2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800adba:	f001 fa81 	bl	800c2c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b004      	add	sp, #16
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	200019b4 	.word	0x200019b4

0800adcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adcc:	b590      	push	{r4, r7, lr}
 800adce:	b089      	sub	sp, #36	; 0x24
 800add0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800add2:	2300      	movs	r3, #0
 800add4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800add6:	2300      	movs	r3, #0
 800add8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adda:	003a      	movs	r2, r7
 800addc:	1d39      	adds	r1, r7, #4
 800adde:	2308      	movs	r3, #8
 800ade0:	18fb      	adds	r3, r7, r3
 800ade2:	0018      	movs	r0, r3
 800ade4:	f7fe fcc4 	bl	8009770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ade8:	683c      	ldr	r4, [r7, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	491e      	ldr	r1, [pc, #120]	; (800ae68 <vTaskStartScheduler+0x9c>)
 800adf0:	481e      	ldr	r0, [pc, #120]	; (800ae6c <vTaskStartScheduler+0xa0>)
 800adf2:	9202      	str	r2, [sp, #8]
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	2300      	movs	r3, #0
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	2300      	movs	r3, #0
 800adfc:	0022      	movs	r2, r4
 800adfe:	f7ff fe30 	bl	800aa62 <xTaskCreateStatic>
 800ae02:	0002      	movs	r2, r0
 800ae04:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <vTaskStartScheduler+0xa4>)
 800ae06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae08:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <vTaskStartScheduler+0xa4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae10:	2301      	movs	r3, #1
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	e001      	b.n	800ae1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d103      	bne.n	800ae28 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800ae20:	f000 fe3c 	bl	800ba9c <xTimerCreateTimerTask>
 800ae24:	0003      	movs	r3, r0
 800ae26:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d113      	bne.n	800ae56 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800ae2e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae30:	4b10      	ldr	r3, [pc, #64]	; (800ae74 <vTaskStartScheduler+0xa8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3354      	adds	r3, #84	; 0x54
 800ae36:	001a      	movs	r2, r3
 800ae38:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <vTaskStartScheduler+0xac>)
 800ae3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae3c:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <vTaskStartScheduler+0xb0>)
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4252      	negs	r2, r2
 800ae42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae44:	4b0e      	ldr	r3, [pc, #56]	; (800ae80 <vTaskStartScheduler+0xb4>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ae4a:	4b0e      	ldr	r3, [pc, #56]	; (800ae84 <vTaskStartScheduler+0xb8>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae50:	f001 fa12 	bl	800c278 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae54:	e004      	b.n	800ae60 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	d101      	bne.n	800ae60 <vTaskStartScheduler+0x94>
 800ae5c:	b672      	cpsid	i
 800ae5e:	e7fe      	b.n	800ae5e <vTaskStartScheduler+0x92>
}
 800ae60:	46c0      	nop			; (mov r8, r8)
 800ae62:	46bd      	mov	sp, r7
 800ae64:	b005      	add	sp, #20
 800ae66:	bd90      	pop	{r4, r7, pc}
 800ae68:	0800d4b4 	.word	0x0800d4b4
 800ae6c:	0800b52d 	.word	0x0800b52d
 800ae70:	200019b0 	.word	0x200019b0
 800ae74:	200014b8 	.word	0x200014b8
 800ae78:	20000020 	.word	0x20000020
 800ae7c:	200019ac 	.word	0x200019ac
 800ae80:	20001998 	.word	0x20001998
 800ae84:	20001990 	.word	0x20001990

0800ae88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ae8c:	4b03      	ldr	r3, [pc, #12]	; (800ae9c <vTaskSuspendAll+0x14>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <vTaskSuspendAll+0x14>)
 800ae94:	601a      	str	r2, [r3, #0]
}
 800ae96:	46c0      	nop			; (mov r8, r8)
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	200019b4 	.word	0x200019b4

0800aea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aeae:	4b3a      	ldr	r3, [pc, #232]	; (800af98 <xTaskResumeAll+0xf8>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <xTaskResumeAll+0x1a>
 800aeb6:	b672      	cpsid	i
 800aeb8:	e7fe      	b.n	800aeb8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aeba:	f001 fa11 	bl	800c2e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aebe:	4b36      	ldr	r3, [pc, #216]	; (800af98 <xTaskResumeAll+0xf8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	1e5a      	subs	r2, r3, #1
 800aec4:	4b34      	ldr	r3, [pc, #208]	; (800af98 <xTaskResumeAll+0xf8>)
 800aec6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec8:	4b33      	ldr	r3, [pc, #204]	; (800af98 <xTaskResumeAll+0xf8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d15b      	bne.n	800af88 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aed0:	4b32      	ldr	r3, [pc, #200]	; (800af9c <xTaskResumeAll+0xfc>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d057      	beq.n	800af88 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aed8:	e02f      	b.n	800af3a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aeda:	4b31      	ldr	r3, [pc, #196]	; (800afa0 <xTaskResumeAll+0x100>)
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3318      	adds	r3, #24
 800aee6:	0018      	movs	r0, r3
 800aee8:	f7fe fec5 	bl	8009c76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3304      	adds	r3, #4
 800aef0:	0018      	movs	r0, r3
 800aef2:	f7fe fec0 	bl	8009c76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefa:	4b2a      	ldr	r3, [pc, #168]	; (800afa4 <xTaskResumeAll+0x104>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d903      	bls.n	800af0a <xTaskResumeAll+0x6a>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af06:	4b27      	ldr	r3, [pc, #156]	; (800afa4 <xTaskResumeAll+0x104>)
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af0e:	0013      	movs	r3, r2
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	189b      	adds	r3, r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4a24      	ldr	r2, [pc, #144]	; (800afa8 <xTaskResumeAll+0x108>)
 800af18:	189a      	adds	r2, r3, r2
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3304      	adds	r3, #4
 800af1e:	0019      	movs	r1, r3
 800af20:	0010      	movs	r0, r2
 800af22:	f7fe fe50 	bl	8009bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2a:	4b20      	ldr	r3, [pc, #128]	; (800afac <xTaskResumeAll+0x10c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	429a      	cmp	r2, r3
 800af32:	d302      	bcc.n	800af3a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800af34:	4b1e      	ldr	r3, [pc, #120]	; (800afb0 <xTaskResumeAll+0x110>)
 800af36:	2201      	movs	r2, #1
 800af38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af3a:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <xTaskResumeAll+0x100>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1cb      	bne.n	800aeda <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af48:	f000 fba0 	bl	800b68c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800af4c:	4b19      	ldr	r3, [pc, #100]	; (800afb4 <xTaskResumeAll+0x114>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00f      	beq.n	800af78 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af58:	f000 f84c 	bl	800aff4 <xTaskIncrementTick>
 800af5c:	1e03      	subs	r3, r0, #0
 800af5e:	d002      	beq.n	800af66 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800af60:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <xTaskResumeAll+0x110>)
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3b01      	subs	r3, #1
 800af6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f2      	bne.n	800af58 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800af72:	4b10      	ldr	r3, [pc, #64]	; (800afb4 <xTaskResumeAll+0x114>)
 800af74:	2200      	movs	r2, #0
 800af76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af78:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <xTaskResumeAll+0x110>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d003      	beq.n	800af88 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af80:	2301      	movs	r3, #1
 800af82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af84:	f001 f99c 	bl	800c2c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af88:	f001 f9bc 	bl	800c304 <vPortExitCritical>

	return xAlreadyYielded;
 800af8c:	68bb      	ldr	r3, [r7, #8]
}
 800af8e:	0018      	movs	r0, r3
 800af90:	46bd      	mov	sp, r7
 800af92:	b004      	add	sp, #16
 800af94:	bd80      	pop	{r7, pc}
 800af96:	46c0      	nop			; (mov r8, r8)
 800af98:	200019b4 	.word	0x200019b4
 800af9c:	2000198c 	.word	0x2000198c
 800afa0:	2000194c 	.word	0x2000194c
 800afa4:	20001994 	.word	0x20001994
 800afa8:	200014bc 	.word	0x200014bc
 800afac:	200014b8 	.word	0x200014b8
 800afb0:	200019a0 	.word	0x200019a0
 800afb4:	2000199c 	.word	0x2000199c

0800afb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afbe:	4b04      	ldr	r3, [pc, #16]	; (800afd0 <xTaskGetTickCount+0x18>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afc4:	687b      	ldr	r3, [r7, #4]
}
 800afc6:	0018      	movs	r0, r3
 800afc8:	46bd      	mov	sp, r7
 800afca:	b002      	add	sp, #8
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	46c0      	nop			; (mov r8, r8)
 800afd0:	20001990 	.word	0x20001990

0800afd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800afda:	2300      	movs	r3, #0
 800afdc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800afde:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <xTaskGetTickCountFromISR+0x1c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800afe4:	683b      	ldr	r3, [r7, #0]
}
 800afe6:	0018      	movs	r0, r3
 800afe8:	46bd      	mov	sp, r7
 800afea:	b002      	add	sp, #8
 800afec:	bd80      	pop	{r7, pc}
 800afee:	46c0      	nop			; (mov r8, r8)
 800aff0:	20001990 	.word	0x20001990

0800aff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800affa:	2300      	movs	r3, #0
 800affc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800affe:	4b4c      	ldr	r3, [pc, #304]	; (800b130 <xTaskIncrementTick+0x13c>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d000      	beq.n	800b008 <xTaskIncrementTick+0x14>
 800b006:	e083      	b.n	800b110 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b008:	4b4a      	ldr	r3, [pc, #296]	; (800b134 <xTaskIncrementTick+0x140>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b010:	4b48      	ldr	r3, [pc, #288]	; (800b134 <xTaskIncrementTick+0x140>)
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d117      	bne.n	800b04c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800b01c:	4b46      	ldr	r3, [pc, #280]	; (800b138 <xTaskIncrementTick+0x144>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <xTaskIncrementTick+0x36>
 800b026:	b672      	cpsid	i
 800b028:	e7fe      	b.n	800b028 <xTaskIncrementTick+0x34>
 800b02a:	4b43      	ldr	r3, [pc, #268]	; (800b138 <xTaskIncrementTick+0x144>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	4b42      	ldr	r3, [pc, #264]	; (800b13c <xTaskIncrementTick+0x148>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b40      	ldr	r3, [pc, #256]	; (800b138 <xTaskIncrementTick+0x144>)
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	4b40      	ldr	r3, [pc, #256]	; (800b13c <xTaskIncrementTick+0x148>)
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	4b40      	ldr	r3, [pc, #256]	; (800b140 <xTaskIncrementTick+0x14c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	4b3e      	ldr	r3, [pc, #248]	; (800b140 <xTaskIncrementTick+0x14c>)
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f000 fb20 	bl	800b68c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b04c:	4b3d      	ldr	r3, [pc, #244]	; (800b144 <xTaskIncrementTick+0x150>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	429a      	cmp	r2, r3
 800b054:	d34e      	bcc.n	800b0f4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b056:	4b38      	ldr	r3, [pc, #224]	; (800b138 <xTaskIncrementTick+0x144>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <xTaskIncrementTick+0x70>
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <xTaskIncrementTick+0x72>
 800b064:	2300      	movs	r3, #0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b06a:	4b36      	ldr	r3, [pc, #216]	; (800b144 <xTaskIncrementTick+0x150>)
 800b06c:	2201      	movs	r2, #1
 800b06e:	4252      	negs	r2, r2
 800b070:	601a      	str	r2, [r3, #0]
					break;
 800b072:	e03f      	b.n	800b0f4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b074:	4b30      	ldr	r3, [pc, #192]	; (800b138 <xTaskIncrementTick+0x144>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d203      	bcs.n	800b094 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b08c:	4b2d      	ldr	r3, [pc, #180]	; (800b144 <xTaskIncrementTick+0x150>)
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	601a      	str	r2, [r3, #0]
						break;
 800b092:	e02f      	b.n	800b0f4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	3304      	adds	r3, #4
 800b098:	0018      	movs	r0, r3
 800b09a:	f7fe fdec 	bl	8009c76 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	3318      	adds	r3, #24
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	f7fe fde3 	bl	8009c76 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b4:	4b24      	ldr	r3, [pc, #144]	; (800b148 <xTaskIncrementTick+0x154>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d903      	bls.n	800b0c4 <xTaskIncrementTick+0xd0>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c0:	4b21      	ldr	r3, [pc, #132]	; (800b148 <xTaskIncrementTick+0x154>)
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c8:	0013      	movs	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	189b      	adds	r3, r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4a1e      	ldr	r2, [pc, #120]	; (800b14c <xTaskIncrementTick+0x158>)
 800b0d2:	189a      	adds	r2, r3, r2
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	0019      	movs	r1, r3
 800b0da:	0010      	movs	r0, r2
 800b0dc:	f7fe fd73 	bl	8009bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e4:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <xTaskIncrementTick+0x15c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d3b3      	bcc.n	800b056 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0f2:	e7b0      	b.n	800b056 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0f4:	4b16      	ldr	r3, [pc, #88]	; (800b150 <xTaskIncrementTick+0x15c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fa:	4914      	ldr	r1, [pc, #80]	; (800b14c <xTaskIncrementTick+0x158>)
 800b0fc:	0013      	movs	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	189b      	adds	r3, r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	585b      	ldr	r3, [r3, r1]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d907      	bls.n	800b11a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b10a:	2301      	movs	r3, #1
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	e004      	b.n	800b11a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b110:	4b10      	ldr	r3, [pc, #64]	; (800b154 <xTaskIncrementTick+0x160>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	4b0f      	ldr	r3, [pc, #60]	; (800b154 <xTaskIncrementTick+0x160>)
 800b118:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b11a:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <xTaskIncrementTick+0x164>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800b122:	2301      	movs	r3, #1
 800b124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b126:	697b      	ldr	r3, [r7, #20]
}
 800b128:	0018      	movs	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	b006      	add	sp, #24
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	200019b4 	.word	0x200019b4
 800b134:	20001990 	.word	0x20001990
 800b138:	20001944 	.word	0x20001944
 800b13c:	20001948 	.word	0x20001948
 800b140:	200019a4 	.word	0x200019a4
 800b144:	200019ac 	.word	0x200019ac
 800b148:	20001994 	.word	0x20001994
 800b14c:	200014bc 	.word	0x200014bc
 800b150:	200014b8 	.word	0x200014b8
 800b154:	2000199c 	.word	0x2000199c
 800b158:	200019a0 	.word	0x200019a0

0800b15c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b162:	4b25      	ldr	r3, [pc, #148]	; (800b1f8 <vTaskSwitchContext+0x9c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b16a:	4b24      	ldr	r3, [pc, #144]	; (800b1fc <vTaskSwitchContext+0xa0>)
 800b16c:	2201      	movs	r2, #1
 800b16e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b170:	e03d      	b.n	800b1ee <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800b172:	4b22      	ldr	r3, [pc, #136]	; (800b1fc <vTaskSwitchContext+0xa0>)
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b178:	4b21      	ldr	r3, [pc, #132]	; (800b200 <vTaskSwitchContext+0xa4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	607b      	str	r3, [r7, #4]
 800b17e:	e007      	b.n	800b190 <vTaskSwitchContext+0x34>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <vTaskSwitchContext+0x2e>
 800b186:	b672      	cpsid	i
 800b188:	e7fe      	b.n	800b188 <vTaskSwitchContext+0x2c>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	607b      	str	r3, [r7, #4]
 800b190:	491c      	ldr	r1, [pc, #112]	; (800b204 <vTaskSwitchContext+0xa8>)
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	0013      	movs	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	189b      	adds	r3, r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	585b      	ldr	r3, [r3, r1]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d0ee      	beq.n	800b180 <vTaskSwitchContext+0x24>
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	0013      	movs	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	189b      	adds	r3, r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	4a15      	ldr	r2, [pc, #84]	; (800b204 <vTaskSwitchContext+0xa8>)
 800b1ae:	189b      	adds	r3, r3, r2
 800b1b0:	603b      	str	r3, [r7, #0]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	605a      	str	r2, [r3, #4]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d104      	bne.n	800b1d2 <vTaskSwitchContext+0x76>
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	605a      	str	r2, [r3, #4]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	4b0b      	ldr	r3, [pc, #44]	; (800b208 <vTaskSwitchContext+0xac>)
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	4b08      	ldr	r3, [pc, #32]	; (800b200 <vTaskSwitchContext+0xa4>)
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1e2:	4b09      	ldr	r3, [pc, #36]	; (800b208 <vTaskSwitchContext+0xac>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3354      	adds	r3, #84	; 0x54
 800b1e8:	001a      	movs	r2, r3
 800b1ea:	4b08      	ldr	r3, [pc, #32]	; (800b20c <vTaskSwitchContext+0xb0>)
 800b1ec:	601a      	str	r2, [r3, #0]
}
 800b1ee:	46c0      	nop			; (mov r8, r8)
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	b002      	add	sp, #8
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	200019b4 	.word	0x200019b4
 800b1fc:	200019a0 	.word	0x200019a0
 800b200:	20001994 	.word	0x20001994
 800b204:	200014bc 	.word	0x200014bc
 800b208:	200014b8 	.word	0x200014b8
 800b20c:	20000020 	.word	0x20000020

0800b210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <vTaskPlaceOnEventList+0x14>
 800b220:	b672      	cpsid	i
 800b222:	e7fe      	b.n	800b222 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b224:	4b08      	ldr	r3, [pc, #32]	; (800b248 <vTaskPlaceOnEventList+0x38>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3318      	adds	r3, #24
 800b22a:	001a      	movs	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	0011      	movs	r1, r2
 800b230:	0018      	movs	r0, r3
 800b232:	f7fe fcea 	bl	8009c0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	2101      	movs	r1, #1
 800b23a:	0018      	movs	r0, r3
 800b23c:	f000 fbda 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
}
 800b240:	46c0      	nop			; (mov r8, r8)
 800b242:	46bd      	mov	sp, r7
 800b244:	b002      	add	sp, #8
 800b246:	bd80      	pop	{r7, pc}
 800b248:	200014b8 	.word	0x200014b8

0800b24c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <vTaskPlaceOnUnorderedEventList+0x16>
 800b25e:	b672      	cpsid	i
 800b260:	e7fe      	b.n	800b260 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b262:	4b0f      	ldr	r3, [pc, #60]	; (800b2a0 <vTaskPlaceOnUnorderedEventList+0x54>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <vTaskPlaceOnUnorderedEventList+0x22>
 800b26a:	b672      	cpsid	i
 800b26c:	e7fe      	b.n	800b26c <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b26e:	4b0d      	ldr	r3, [pc, #52]	; (800b2a4 <vTaskPlaceOnUnorderedEventList+0x58>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	2180      	movs	r1, #128	; 0x80
 800b276:	0609      	lsls	r1, r1, #24
 800b278:	430a      	orrs	r2, r1
 800b27a:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <vTaskPlaceOnUnorderedEventList+0x58>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3318      	adds	r3, #24
 800b282:	001a      	movs	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	0011      	movs	r1, r2
 800b288:	0018      	movs	r0, r3
 800b28a:	f7fe fc9c 	bl	8009bc6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2101      	movs	r1, #1
 800b292:	0018      	movs	r0, r3
 800b294:	f000 fbae 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
}
 800b298:	46c0      	nop			; (mov r8, r8)
 800b29a:	46bd      	mov	sp, r7
 800b29c:	b004      	add	sp, #16
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	200019b4 	.word	0x200019b4
 800b2a4:	200014b8 	.word	0x200014b8

0800b2a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d101      	bne.n	800b2be <vTaskPlaceOnEventListRestricted+0x16>
 800b2ba:	b672      	cpsid	i
 800b2bc:	e7fe      	b.n	800b2bc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2be:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <vTaskPlaceOnEventListRestricted+0x48>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3318      	adds	r3, #24
 800b2c4:	001a      	movs	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	0011      	movs	r1, r2
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f7fe fc7b 	bl	8009bc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	425b      	negs	r3, r3
 800b2da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	0011      	movs	r1, r2
 800b2e2:	0018      	movs	r0, r3
 800b2e4:	f000 fb86 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
	}
 800b2e8:	46c0      	nop			; (mov r8, r8)
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	b004      	add	sp, #16
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	200014b8 	.word	0x200014b8

0800b2f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <xTaskRemoveFromEventList+0x1a>
 800b30a:	b672      	cpsid	i
 800b30c:	e7fe      	b.n	800b30c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	3318      	adds	r3, #24
 800b312:	0018      	movs	r0, r3
 800b314:	f7fe fcaf 	bl	8009c76 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b318:	4b1e      	ldr	r3, [pc, #120]	; (800b394 <xTaskRemoveFromEventList+0xa0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d11d      	bne.n	800b35c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	3304      	adds	r3, #4
 800b324:	0018      	movs	r0, r3
 800b326:	f7fe fca6 	bl	8009c76 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	4b1a      	ldr	r3, [pc, #104]	; (800b398 <xTaskRemoveFromEventList+0xa4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d903      	bls.n	800b33e <xTaskRemoveFromEventList+0x4a>
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33a:	4b17      	ldr	r3, [pc, #92]	; (800b398 <xTaskRemoveFromEventList+0xa4>)
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b342:	0013      	movs	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	189b      	adds	r3, r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4a14      	ldr	r2, [pc, #80]	; (800b39c <xTaskRemoveFromEventList+0xa8>)
 800b34c:	189a      	adds	r2, r3, r2
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	3304      	adds	r3, #4
 800b352:	0019      	movs	r1, r3
 800b354:	0010      	movs	r0, r2
 800b356:	f7fe fc36 	bl	8009bc6 <vListInsertEnd>
 800b35a:	e007      	b.n	800b36c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	3318      	adds	r3, #24
 800b360:	001a      	movs	r2, r3
 800b362:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <xTaskRemoveFromEventList+0xac>)
 800b364:	0011      	movs	r1, r2
 800b366:	0018      	movs	r0, r3
 800b368:	f7fe fc2d 	bl	8009bc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b370:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <xTaskRemoveFromEventList+0xb0>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b376:	429a      	cmp	r2, r3
 800b378:	d905      	bls.n	800b386 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b37a:	2301      	movs	r3, #1
 800b37c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b37e:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <xTaskRemoveFromEventList+0xb4>)
 800b380:	2201      	movs	r2, #1
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	e001      	b.n	800b38a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b38a:	68fb      	ldr	r3, [r7, #12]
}
 800b38c:	0018      	movs	r0, r3
 800b38e:	46bd      	mov	sp, r7
 800b390:	b004      	add	sp, #16
 800b392:	bd80      	pop	{r7, pc}
 800b394:	200019b4 	.word	0x200019b4
 800b398:	20001994 	.word	0x20001994
 800b39c:	200014bc 	.word	0x200014bc
 800b3a0:	2000194c 	.word	0x2000194c
 800b3a4:	200014b8 	.word	0x200014b8
 800b3a8:	200019a0 	.word	0x200019a0

0800b3ac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b3b6:	4b21      	ldr	r3, [pc, #132]	; (800b43c <vTaskRemoveFromUnorderedEventList+0x90>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <vTaskRemoveFromUnorderedEventList+0x16>
 800b3be:	b672      	cpsid	i
 800b3c0:	e7fe      	b.n	800b3c0 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2280      	movs	r2, #128	; 0x80
 800b3c6:	0612      	lsls	r2, r2, #24
 800b3c8:	431a      	orrs	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <vTaskRemoveFromUnorderedEventList+0x32>
 800b3da:	b672      	cpsid	i
 800b3dc:	e7fe      	b.n	800b3dc <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	0018      	movs	r0, r3
 800b3e2:	f7fe fc48 	bl	8009c76 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f7fe fc43 	bl	8009c76 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f4:	4b12      	ldr	r3, [pc, #72]	; (800b440 <vTaskRemoveFromUnorderedEventList+0x94>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d903      	bls.n	800b404 <vTaskRemoveFromUnorderedEventList+0x58>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	4b0f      	ldr	r3, [pc, #60]	; (800b440 <vTaskRemoveFromUnorderedEventList+0x94>)
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b408:	0013      	movs	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	189b      	adds	r3, r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4a0c      	ldr	r2, [pc, #48]	; (800b444 <vTaskRemoveFromUnorderedEventList+0x98>)
 800b412:	189a      	adds	r2, r3, r2
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3304      	adds	r3, #4
 800b418:	0019      	movs	r1, r3
 800b41a:	0010      	movs	r0, r2
 800b41c:	f7fe fbd3 	bl	8009bc6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b424:	4b08      	ldr	r3, [pc, #32]	; (800b448 <vTaskRemoveFromUnorderedEventList+0x9c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d902      	bls.n	800b434 <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b42e:	4b07      	ldr	r3, [pc, #28]	; (800b44c <vTaskRemoveFromUnorderedEventList+0xa0>)
 800b430:	2201      	movs	r2, #1
 800b432:	601a      	str	r2, [r3, #0]
	}
}
 800b434:	46c0      	nop			; (mov r8, r8)
 800b436:	46bd      	mov	sp, r7
 800b438:	b004      	add	sp, #16
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	200019b4 	.word	0x200019b4
 800b440:	20001994 	.word	0x20001994
 800b444:	200014bc 	.word	0x200014bc
 800b448:	200014b8 	.word	0x200014b8
 800b44c:	200019a0 	.word	0x200019a0

0800b450 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <vTaskInternalSetTimeOutState+0x20>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b460:	4b04      	ldr	r3, [pc, #16]	; (800b474 <vTaskInternalSetTimeOutState+0x24>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	605a      	str	r2, [r3, #4]
}
 800b468:	46c0      	nop			; (mov r8, r8)
 800b46a:	46bd      	mov	sp, r7
 800b46c:	b002      	add	sp, #8
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	200019a4 	.word	0x200019a4
 800b474:	20001990 	.word	0x20001990

0800b478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <xTaskCheckForTimeOut+0x14>
 800b488:	b672      	cpsid	i
 800b48a:	e7fe      	b.n	800b48a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d101      	bne.n	800b496 <xTaskCheckForTimeOut+0x1e>
 800b492:	b672      	cpsid	i
 800b494:	e7fe      	b.n	800b494 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800b496:	f000 ff23 	bl	800c2e0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b49a:	4b1d      	ldr	r3, [pc, #116]	; (800b510 <xTaskCheckForTimeOut+0x98>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	d102      	bne.n	800b4b8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]
 800b4b6:	e024      	b.n	800b502 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	4b15      	ldr	r3, [pc, #84]	; (800b514 <xTaskCheckForTimeOut+0x9c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d007      	beq.n	800b4d4 <xTaskCheckForTimeOut+0x5c>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d302      	bcc.n	800b4d4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
 800b4d2:	e016      	b.n	800b502 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d20c      	bcs.n	800b4f8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	1ad2      	subs	r2, r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f7ff ffaf 	bl	800b450 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	e004      	b.n	800b502 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4fe:	2301      	movs	r3, #1
 800b500:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b502:	f000 feff 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800b506:	697b      	ldr	r3, [r7, #20]
}
 800b508:	0018      	movs	r0, r3
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b006      	add	sp, #24
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20001990 	.word	0x20001990
 800b514:	200019a4 	.word	0x200019a4

0800b518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b51c:	4b02      	ldr	r3, [pc, #8]	; (800b528 <vTaskMissedYield+0x10>)
 800b51e:	2201      	movs	r2, #1
 800b520:	601a      	str	r2, [r3, #0]
}
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	200019a0 	.word	0x200019a0

0800b52c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b534:	f000 f84e 	bl	800b5d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b538:	4b03      	ldr	r3, [pc, #12]	; (800b548 <prvIdleTask+0x1c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d9f9      	bls.n	800b534 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b540:	f000 febe 	bl	800c2c0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b544:	e7f6      	b.n	800b534 <prvIdleTask+0x8>
 800b546:	46c0      	nop			; (mov r8, r8)
 800b548:	200014bc 	.word	0x200014bc

0800b54c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b552:	2300      	movs	r3, #0
 800b554:	607b      	str	r3, [r7, #4]
 800b556:	e00c      	b.n	800b572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	0013      	movs	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	189b      	adds	r3, r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4a14      	ldr	r2, [pc, #80]	; (800b5b4 <prvInitialiseTaskLists+0x68>)
 800b564:	189b      	adds	r3, r3, r2
 800b566:	0018      	movs	r0, r3
 800b568:	f7fe fb04 	bl	8009b74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3301      	adds	r3, #1
 800b570:	607b      	str	r3, [r7, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b37      	cmp	r3, #55	; 0x37
 800b576:	d9ef      	bls.n	800b558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b578:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <prvInitialiseTaskLists+0x6c>)
 800b57a:	0018      	movs	r0, r3
 800b57c:	f7fe fafa 	bl	8009b74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b580:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <prvInitialiseTaskLists+0x70>)
 800b582:	0018      	movs	r0, r3
 800b584:	f7fe faf6 	bl	8009b74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b588:	4b0d      	ldr	r3, [pc, #52]	; (800b5c0 <prvInitialiseTaskLists+0x74>)
 800b58a:	0018      	movs	r0, r3
 800b58c:	f7fe faf2 	bl	8009b74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b590:	4b0c      	ldr	r3, [pc, #48]	; (800b5c4 <prvInitialiseTaskLists+0x78>)
 800b592:	0018      	movs	r0, r3
 800b594:	f7fe faee 	bl	8009b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b598:	4b0b      	ldr	r3, [pc, #44]	; (800b5c8 <prvInitialiseTaskLists+0x7c>)
 800b59a:	0018      	movs	r0, r3
 800b59c:	f7fe faea 	bl	8009b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5a0:	4b0a      	ldr	r3, [pc, #40]	; (800b5cc <prvInitialiseTaskLists+0x80>)
 800b5a2:	4a05      	ldr	r2, [pc, #20]	; (800b5b8 <prvInitialiseTaskLists+0x6c>)
 800b5a4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5a6:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <prvInitialiseTaskLists+0x84>)
 800b5a8:	4a04      	ldr	r2, [pc, #16]	; (800b5bc <prvInitialiseTaskLists+0x70>)
 800b5aa:	601a      	str	r2, [r3, #0]
}
 800b5ac:	46c0      	nop			; (mov r8, r8)
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	b002      	add	sp, #8
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	200014bc 	.word	0x200014bc
 800b5b8:	2000191c 	.word	0x2000191c
 800b5bc:	20001930 	.word	0x20001930
 800b5c0:	2000194c 	.word	0x2000194c
 800b5c4:	20001960 	.word	0x20001960
 800b5c8:	20001978 	.word	0x20001978
 800b5cc:	20001944 	.word	0x20001944
 800b5d0:	20001948 	.word	0x20001948

0800b5d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5da:	e01a      	b.n	800b612 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800b5dc:	f000 fe80 	bl	800c2e0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b5e0:	4b10      	ldr	r3, [pc, #64]	; (800b624 <prvCheckTasksWaitingTermination+0x50>)
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3304      	adds	r3, #4
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	f7fe fb42 	bl	8009c76 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <prvCheckTasksWaitingTermination+0x54>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	1e5a      	subs	r2, r3, #1
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <prvCheckTasksWaitingTermination+0x54>)
 800b5fa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5fc:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <prvCheckTasksWaitingTermination+0x58>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	1e5a      	subs	r2, r3, #1
 800b602:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <prvCheckTasksWaitingTermination+0x58>)
 800b604:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800b606:	f000 fe7d 	bl	800c304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	0018      	movs	r0, r3
 800b60e:	f000 f80f 	bl	800b630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b612:	4b06      	ldr	r3, [pc, #24]	; (800b62c <prvCheckTasksWaitingTermination+0x58>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e0      	bne.n	800b5dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b61a:	46c0      	nop			; (mov r8, r8)
 800b61c:	46c0      	nop			; (mov r8, r8)
 800b61e:	46bd      	mov	sp, r7
 800b620:	b002      	add	sp, #8
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20001960 	.word	0x20001960
 800b628:	2000198c 	.word	0x2000198c
 800b62c:	20001974 	.word	0x20001974

0800b630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3354      	adds	r3, #84	; 0x54
 800b63c:	0018      	movs	r0, r3
 800b63e:	f001 fa4d 	bl	800cadc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	22b9      	movs	r2, #185	; 0xb9
 800b646:	5c9b      	ldrb	r3, [r3, r2]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d109      	bne.n	800b660 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	0018      	movs	r0, r3
 800b652:	f000 ff83 	bl	800c55c <vPortFree>
				vPortFree( pxTCB );
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	0018      	movs	r0, r3
 800b65a:	f000 ff7f 	bl	800c55c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b65e:	e010      	b.n	800b682 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	22b9      	movs	r2, #185	; 0xb9
 800b664:	5c9b      	ldrb	r3, [r3, r2]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d104      	bne.n	800b674 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	0018      	movs	r0, r3
 800b66e:	f000 ff75 	bl	800c55c <vPortFree>
	}
 800b672:	e006      	b.n	800b682 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	22b9      	movs	r2, #185	; 0xb9
 800b678:	5c9b      	ldrb	r3, [r3, r2]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d001      	beq.n	800b682 <prvDeleteTCB+0x52>
 800b67e:	b672      	cpsid	i
 800b680:	e7fe      	b.n	800b680 <prvDeleteTCB+0x50>
	}
 800b682:	46c0      	nop			; (mov r8, r8)
 800b684:	46bd      	mov	sp, r7
 800b686:	b002      	add	sp, #8
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b692:	4b0e      	ldr	r3, [pc, #56]	; (800b6cc <prvResetNextTaskUnblockTime+0x40>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <prvResetNextTaskUnblockTime+0x14>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e000      	b.n	800b6a2 <prvResetNextTaskUnblockTime+0x16>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d004      	beq.n	800b6b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6a6:	4b0a      	ldr	r3, [pc, #40]	; (800b6d0 <prvResetNextTaskUnblockTime+0x44>)
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	4252      	negs	r2, r2
 800b6ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6ae:	e008      	b.n	800b6c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b6b0:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <prvResetNextTaskUnblockTime+0x40>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <prvResetNextTaskUnblockTime+0x44>)
 800b6c0:	601a      	str	r2, [r3, #0]
}
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	b002      	add	sp, #8
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	20001944 	.word	0x20001944
 800b6d0:	200019ac 	.word	0x200019ac

0800b6d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b6da:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <xTaskGetCurrentTaskHandle+0x18>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b6e0:	687b      	ldr	r3, [r7, #4]
	}
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	b002      	add	sp, #8
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	200014b8 	.word	0x200014b8

0800b6f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <xTaskGetSchedulerState+0x30>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d102      	bne.n	800b704 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6fe:	2301      	movs	r3, #1
 800b700:	607b      	str	r3, [r7, #4]
 800b702:	e008      	b.n	800b716 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b704:	4b07      	ldr	r3, [pc, #28]	; (800b724 <xTaskGetSchedulerState+0x34>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d102      	bne.n	800b712 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b70c:	2302      	movs	r3, #2
 800b70e:	607b      	str	r3, [r7, #4]
 800b710:	e001      	b.n	800b716 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b712:	2300      	movs	r3, #0
 800b714:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b716:	687b      	ldr	r3, [r7, #4]
	}
 800b718:	0018      	movs	r0, r3
 800b71a:	46bd      	mov	sp, r7
 800b71c:	b002      	add	sp, #8
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20001998 	.word	0x20001998
 800b724:	200019b4 	.word	0x200019b4

0800b728 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b734:	2300      	movs	r3, #0
 800b736:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d056      	beq.n	800b7ec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b742:	4b2d      	ldr	r3, [pc, #180]	; (800b7f8 <xTaskPriorityInherit+0xd0>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	429a      	cmp	r2, r3
 800b74a:	d246      	bcs.n	800b7da <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	2b00      	cmp	r3, #0
 800b752:	db06      	blt.n	800b762 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b754:	4b28      	ldr	r3, [pc, #160]	; (800b7f8 <xTaskPriorityInherit+0xd0>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	2238      	movs	r2, #56	; 0x38
 800b75c:	1ad2      	subs	r2, r2, r3
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	6959      	ldr	r1, [r3, #20]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	0013      	movs	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	189b      	adds	r3, r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4a22      	ldr	r2, [pc, #136]	; (800b7fc <xTaskPriorityInherit+0xd4>)
 800b774:	189b      	adds	r3, r3, r2
 800b776:	4299      	cmp	r1, r3
 800b778:	d101      	bne.n	800b77e <xTaskPriorityInherit+0x56>
 800b77a:	2301      	movs	r3, #1
 800b77c:	e000      	b.n	800b780 <xTaskPriorityInherit+0x58>
 800b77e:	2300      	movs	r3, #0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d022      	beq.n	800b7ca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	3304      	adds	r3, #4
 800b788:	0018      	movs	r0, r3
 800b78a:	f7fe fa74 	bl	8009c76 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b78e:	4b1a      	ldr	r3, [pc, #104]	; (800b7f8 <xTaskPriorityInherit+0xd0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79c:	4b18      	ldr	r3, [pc, #96]	; (800b800 <xTaskPriorityInherit+0xd8>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d903      	bls.n	800b7ac <xTaskPriorityInherit+0x84>
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <xTaskPriorityInherit+0xd8>)
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b0:	0013      	movs	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	189b      	adds	r3, r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4a10      	ldr	r2, [pc, #64]	; (800b7fc <xTaskPriorityInherit+0xd4>)
 800b7ba:	189a      	adds	r2, r3, r2
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	0019      	movs	r1, r3
 800b7c2:	0010      	movs	r0, r2
 800b7c4:	f7fe f9ff 	bl	8009bc6 <vListInsertEnd>
 800b7c8:	e004      	b.n	800b7d4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7ca:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <xTaskPriorityInherit+0xd0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e008      	b.n	800b7ec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7de:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <xTaskPriorityInherit+0xd0>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d201      	bcs.n	800b7ec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ee:	0018      	movs	r0, r3
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	b004      	add	sp, #16
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	46c0      	nop			; (mov r8, r8)
 800b7f8:	200014b8 	.word	0x200014b8
 800b7fc:	200014bc 	.word	0x200014bc
 800b800:	20001994 	.word	0x20001994

0800b804 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d044      	beq.n	800b8a4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b81a:	4b25      	ldr	r3, [pc, #148]	; (800b8b0 <xTaskPriorityDisinherit+0xac>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	429a      	cmp	r2, r3
 800b822:	d001      	beq.n	800b828 <xTaskPriorityDisinherit+0x24>
 800b824:	b672      	cpsid	i
 800b826:	e7fe      	b.n	800b826 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <xTaskPriorityDisinherit+0x30>
 800b830:	b672      	cpsid	i
 800b832:	e7fe      	b.n	800b832 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b838:	1e5a      	subs	r2, r3, #1
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b846:	429a      	cmp	r2, r3
 800b848:	d02c      	beq.n	800b8a4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d128      	bne.n	800b8a4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	3304      	adds	r3, #4
 800b856:	0018      	movs	r0, r3
 800b858:	f7fe fa0d 	bl	8009c76 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	2238      	movs	r2, #56	; 0x38
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b874:	4b0f      	ldr	r3, [pc, #60]	; (800b8b4 <xTaskPriorityDisinherit+0xb0>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d903      	bls.n	800b884 <xTaskPriorityDisinherit+0x80>
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b880:	4b0c      	ldr	r3, [pc, #48]	; (800b8b4 <xTaskPriorityDisinherit+0xb0>)
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b888:	0013      	movs	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	189b      	adds	r3, r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4a09      	ldr	r2, [pc, #36]	; (800b8b8 <xTaskPriorityDisinherit+0xb4>)
 800b892:	189a      	adds	r2, r3, r2
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	3304      	adds	r3, #4
 800b898:	0019      	movs	r1, r3
 800b89a:	0010      	movs	r0, r2
 800b89c:	f7fe f993 	bl	8009bc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
	}
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	b004      	add	sp, #16
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	46c0      	nop			; (mov r8, r8)
 800b8b0:	200014b8 	.word	0x200014b8
 800b8b4:	20001994 	.word	0x20001994
 800b8b8:	200014bc 	.word	0x200014bc

0800b8bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d05d      	beq.n	800b990 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800b8dc:	b672      	cpsid	i
 800b8de:	e7fe      	b.n	800b8de <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d902      	bls.n	800b8f0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	e002      	b.n	800b8f6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8f4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d047      	beq.n	800b990 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	429a      	cmp	r2, r3
 800b908:	d142      	bne.n	800b990 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b90a:	4b23      	ldr	r3, [pc, #140]	; (800b998 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	429a      	cmp	r2, r3
 800b912:	d101      	bne.n	800b918 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800b914:	b672      	cpsid	i
 800b916:	e7fe      	b.n	800b916 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	db04      	blt.n	800b936 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	2238      	movs	r2, #56	; 0x38
 800b930:	1ad2      	subs	r2, r2, r3
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	6959      	ldr	r1, [r3, #20]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	0013      	movs	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	189b      	adds	r3, r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4a15      	ldr	r2, [pc, #84]	; (800b99c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800b946:	189b      	adds	r3, r3, r2
 800b948:	4299      	cmp	r1, r3
 800b94a:	d101      	bne.n	800b950 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800b94c:	2301      	movs	r3, #1
 800b94e:	e000      	b.n	800b952 <vTaskPriorityDisinheritAfterTimeout+0x96>
 800b950:	2300      	movs	r3, #0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01c      	beq.n	800b990 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	3304      	adds	r3, #4
 800b95a:	0018      	movs	r0, r3
 800b95c:	f7fe f98b 	bl	8009c76 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b964:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d903      	bls.n	800b974 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b970:	4b0b      	ldr	r3, [pc, #44]	; (800b9a0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b978:	0013      	movs	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	189b      	adds	r3, r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4a06      	ldr	r2, [pc, #24]	; (800b99c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800b982:	189a      	adds	r2, r3, r2
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	3304      	adds	r3, #4
 800b988:	0019      	movs	r1, r3
 800b98a:	0010      	movs	r0, r2
 800b98c:	f7fe f91b 	bl	8009bc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b990:	46c0      	nop			; (mov r8, r8)
 800b992:	46bd      	mov	sp, r7
 800b994:	b006      	add	sp, #24
 800b996:	bd80      	pop	{r7, pc}
 800b998:	200014b8 	.word	0x200014b8
 800b99c:	200014bc 	.word	0x200014bc
 800b9a0:	20001994 	.word	0x20001994

0800b9a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b9aa:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <uxTaskResetEventItemValue+0x28>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b2:	4b06      	ldr	r3, [pc, #24]	; (800b9cc <uxTaskResetEventItemValue+0x28>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b8:	4b04      	ldr	r3, [pc, #16]	; (800b9cc <uxTaskResetEventItemValue+0x28>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2138      	movs	r1, #56	; 0x38
 800b9be:	1a8a      	subs	r2, r1, r2
 800b9c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800b9c2:	687b      	ldr	r3, [r7, #4]
}
 800b9c4:	0018      	movs	r0, r3
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	b002      	add	sp, #8
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	200014b8 	.word	0x200014b8

0800b9d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9d4:	4b06      	ldr	r3, [pc, #24]	; (800b9f0 <pvTaskIncrementMutexHeldCount+0x20>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <pvTaskIncrementMutexHeldCount+0x20>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9e2:	3201      	adds	r2, #1
 800b9e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b9e6:	4b02      	ldr	r3, [pc, #8]	; (800b9f0 <pvTaskIncrementMutexHeldCount+0x20>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
	}
 800b9ea:	0018      	movs	r0, r3
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	200014b8 	.word	0x200014b8

0800b9f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9fe:	4b21      	ldr	r3, [pc, #132]	; (800ba84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba04:	4b20      	ldr	r3, [pc, #128]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f7fe f933 	bl	8009c76 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3301      	adds	r3, #1
 800ba14:	d10b      	bne.n	800ba2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d008      	beq.n	800ba2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba1c:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	1d1a      	adds	r2, r3, #4
 800ba22:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ba24:	0011      	movs	r1, r2
 800ba26:	0018      	movs	r0, r3
 800ba28:	f7fe f8cd 	bl	8009bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba2c:	e026      	b.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	18d3      	adds	r3, r2, r3
 800ba34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba36:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d209      	bcs.n	800ba5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba46:	4b12      	ldr	r3, [pc, #72]	; (800ba90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	0019      	movs	r1, r3
 800ba52:	0010      	movs	r0, r2
 800ba54:	f7fe f8d9 	bl	8009c0a <vListInsert>
}
 800ba58:	e010      	b.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3304      	adds	r3, #4
 800ba64:	0019      	movs	r1, r3
 800ba66:	0010      	movs	r0, r2
 800ba68:	f7fe f8cf 	bl	8009c0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba6c:	4b0a      	ldr	r3, [pc, #40]	; (800ba98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d202      	bcs.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	601a      	str	r2, [r3, #0]
}
 800ba7c:	46c0      	nop			; (mov r8, r8)
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	b004      	add	sp, #16
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20001990 	.word	0x20001990
 800ba88:	200014b8 	.word	0x200014b8
 800ba8c:	20001978 	.word	0x20001978
 800ba90:	20001948 	.word	0x20001948
 800ba94:	20001944 	.word	0x20001944
 800ba98:	200019ac 	.word	0x200019ac

0800ba9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b089      	sub	sp, #36	; 0x24
 800baa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800baa6:	f000 faff 	bl	800c0a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800baaa:	4b17      	ldr	r3, [pc, #92]	; (800bb08 <xTimerCreateTimerTask+0x6c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d020      	beq.n	800baf4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800baba:	003a      	movs	r2, r7
 800babc:	1d39      	adds	r1, r7, #4
 800babe:	2308      	movs	r3, #8
 800bac0:	18fb      	adds	r3, r7, r3
 800bac2:	0018      	movs	r0, r3
 800bac4:	f7fd fe6c 	bl	80097a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bac8:	683c      	ldr	r4, [r7, #0]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	490f      	ldr	r1, [pc, #60]	; (800bb0c <xTimerCreateTimerTask+0x70>)
 800bad0:	480f      	ldr	r0, [pc, #60]	; (800bb10 <xTimerCreateTimerTask+0x74>)
 800bad2:	9202      	str	r2, [sp, #8]
 800bad4:	9301      	str	r3, [sp, #4]
 800bad6:	2302      	movs	r3, #2
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	2300      	movs	r3, #0
 800badc:	0022      	movs	r2, r4
 800bade:	f7fe ffc0 	bl	800aa62 <xTaskCreateStatic>
 800bae2:	0002      	movs	r2, r0
 800bae4:	4b0b      	ldr	r3, [pc, #44]	; (800bb14 <xTimerCreateTimerTask+0x78>)
 800bae6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bae8:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <xTimerCreateTimerTask+0x78>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800baf0:	2301      	movs	r3, #1
 800baf2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d101      	bne.n	800bafe <xTimerCreateTimerTask+0x62>
 800bafa:	b672      	cpsid	i
 800bafc:	e7fe      	b.n	800bafc <xTimerCreateTimerTask+0x60>
	return xReturn;
 800bafe:	68fb      	ldr	r3, [r7, #12]
}
 800bb00:	0018      	movs	r0, r3
 800bb02:	46bd      	mov	sp, r7
 800bb04:	b005      	add	sp, #20
 800bb06:	bd90      	pop	{r4, r7, pc}
 800bb08:	200019e8 	.word	0x200019e8
 800bb0c:	0800d4bc 	.word	0x0800d4bc
 800bb10:	0800bd0d 	.word	0x0800bd0d
 800bb14:	200019ec 	.word	0x200019ec

0800bb18 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800bb18:	b590      	push	{r4, r7, lr}
 800bb1a:	b089      	sub	sp, #36	; 0x24
 800bb1c:	af02      	add	r7, sp, #8
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800bb26:	2030      	movs	r0, #48	; 0x30
 800bb28:	f000 fc72 	bl	800c410 <pvPortMalloc>
 800bb2c:	0003      	movs	r3, r0
 800bb2e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00e      	beq.n	800bb54 <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bb36:	683c      	ldr	r4, [r7, #0]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	68b9      	ldr	r1, [r7, #8]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	0023      	movs	r3, r4
 800bb48:	f000 f835 	bl	800bbb6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	222c      	movs	r2, #44	; 0x2c
 800bb50:	2100      	movs	r1, #0
 800bb52:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800bb54:	697b      	ldr	r3, [r7, #20]
	}
 800bb56:	0018      	movs	r0, r3
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	b007      	add	sp, #28
 800bb5c:	bd90      	pop	{r4, r7, pc}

0800bb5e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800bb5e:	b590      	push	{r4, r7, lr}
 800bb60:	b089      	sub	sp, #36	; 0x24
 800bb62:	af02      	add	r7, sp, #8
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
 800bb6a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800bb6c:	2330      	movs	r3, #48	; 0x30
 800bb6e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2b30      	cmp	r3, #48	; 0x30
 800bb74:	d001      	beq.n	800bb7a <xTimerCreateStatic+0x1c>
 800bb76:	b672      	cpsid	i
 800bb78:	e7fe      	b.n	800bb78 <xTimerCreateStatic+0x1a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800bb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <xTimerCreateStatic+0x26>
 800bb80:	b672      	cpsid	i
 800bb82:	e7fe      	b.n	800bb82 <xTimerCreateStatic+0x24>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00e      	beq.n	800bbac <xTimerCreateStatic+0x4e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bb8e:	683c      	ldr	r4, [r7, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	0023      	movs	r3, r4
 800bba0:	f000 f809 	bl	800bbb6 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	222c      	movs	r2, #44	; 0x2c
 800bba8:	2101      	movs	r1, #1
 800bbaa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800bbac:	697b      	ldr	r3, [r7, #20]
	}
 800bbae:	0018      	movs	r0, r3
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	b007      	add	sp, #28
 800bbb4:	bd90      	pop	{r4, r7, pc}

0800bbb6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b084      	sub	sp, #16
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	60b9      	str	r1, [r7, #8]
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <prvInitialiseNewTimer+0x18>
 800bbca:	b672      	cpsid	i
 800bbcc:	e7fe      	b.n	800bbcc <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d015      	beq.n	800bc00 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bbd4:	f000 fa68 	bl	800c0a8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	683a      	ldr	r2, [r7, #0]
 800bbee:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f7fd ffd8 	bl	8009bb0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bc00:	46c0      	nop			; (mov r8, r8)
 800bc02:	46bd      	mov	sp, r7
 800bc04:	b004      	add	sp, #16
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc08:	b590      	push	{r4, r7, lr}
 800bc0a:	b08b      	sub	sp, #44	; 0x2c
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <xTimerGenericCommand+0x1c>
 800bc20:	b672      	cpsid	i
 800bc22:	e7fe      	b.n	800bc22 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc24:	4b1c      	ldr	r3, [pc, #112]	; (800bc98 <xTimerGenericCommand+0x90>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d030      	beq.n	800bc8e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc2c:	2414      	movs	r4, #20
 800bc2e:	193b      	adds	r3, r7, r4
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc34:	193b      	adds	r3, r7, r4
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bc3a:	193b      	adds	r3, r7, r4
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b05      	cmp	r3, #5
 800bc44:	dc19      	bgt.n	800bc7a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc46:	f7ff fd53 	bl	800b6f0 <xTaskGetSchedulerState>
 800bc4a:	0003      	movs	r3, r0
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d109      	bne.n	800bc64 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc50:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <xTimerGenericCommand+0x90>)
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc56:	1939      	adds	r1, r7, r4
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f7fe f9e1 	bl	800a020 <xQueueGenericSend>
 800bc5e:	0003      	movs	r3, r0
 800bc60:	627b      	str	r3, [r7, #36]	; 0x24
 800bc62:	e014      	b.n	800bc8e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc64:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <xTimerGenericCommand+0x90>)
 800bc66:	6818      	ldr	r0, [r3, #0]
 800bc68:	2314      	movs	r3, #20
 800bc6a:	18f9      	adds	r1, r7, r3
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f7fe f9d6 	bl	800a020 <xQueueGenericSend>
 800bc74:	0003      	movs	r3, r0
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
 800bc78:	e009      	b.n	800bc8e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc7a:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <xTimerGenericCommand+0x90>)
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	2314      	movs	r3, #20
 800bc82:	18f9      	adds	r1, r7, r3
 800bc84:	2300      	movs	r3, #0
 800bc86:	f7fe fa8f 	bl	800a1a8 <xQueueGenericSendFromISR>
 800bc8a:	0003      	movs	r3, r0
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc90:	0018      	movs	r0, r3
 800bc92:	46bd      	mov	sp, r7
 800bc94:	b00b      	add	sp, #44	; 0x2c
 800bc96:	bd90      	pop	{r4, r7, pc}
 800bc98:	200019e8 	.word	0x200019e8

0800bc9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bca6:	4b18      	ldr	r3, [pc, #96]	; (800bd08 <prvProcessExpiredTimer+0x6c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f7fd ffde 	bl	8009c76 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d119      	bne.n	800bcf6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	699a      	ldr	r2, [r3, #24]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	18d1      	adds	r1, r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f8b6 	bl	800be40 <prvInsertTimerInActiveList>
 800bcd4:	1e03      	subs	r3, r0, #0
 800bcd6:	d00e      	beq.n	800bcf6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	2300      	movs	r3, #0
 800bce2:	2100      	movs	r1, #0
 800bce4:	f7ff ff90 	bl	800bc08 <xTimerGenericCommand>
 800bce8:	0003      	movs	r3, r0
 800bcea:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <prvProcessExpiredTimer+0x5a>
 800bcf2:	b672      	cpsid	i
 800bcf4:	e7fe      	b.n	800bcf4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	0010      	movs	r0, r2
 800bcfe:	4798      	blx	r3
}
 800bd00:	46c0      	nop			; (mov r8, r8)
 800bd02:	46bd      	mov	sp, r7
 800bd04:	b004      	add	sp, #16
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	200019e0 	.word	0x200019e0

0800bd0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd14:	2308      	movs	r3, #8
 800bd16:	18fb      	adds	r3, r7, r3
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f000 f851 	bl	800bdc0 <prvGetNextExpireTime>
 800bd1e:	0003      	movs	r3, r0
 800bd20:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	0011      	movs	r1, r2
 800bd28:	0018      	movs	r0, r3
 800bd2a:	f000 f803 	bl	800bd34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd2e:	f000 f8c9 	bl	800bec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd32:	e7ef      	b.n	800bd14 <prvTimerTask+0x8>

0800bd34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd3e:	f7ff f8a3 	bl	800ae88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd42:	2308      	movs	r3, #8
 800bd44:	18fb      	adds	r3, r7, r3
 800bd46:	0018      	movs	r0, r3
 800bd48:	f000 f85a 	bl	800be00 <prvSampleTimeNow>
 800bd4c:	0003      	movs	r3, r0
 800bd4e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d129      	bne.n	800bdaa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10c      	bne.n	800bd76 <prvProcessTimerOrBlockTask+0x42>
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d808      	bhi.n	800bd76 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800bd64:	f7ff f89c 	bl	800aea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	0011      	movs	r1, r2
 800bd6e:	0018      	movs	r0, r3
 800bd70:	f7ff ff94 	bl	800bc9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd74:	e01b      	b.n	800bdae <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d006      	beq.n	800bd8a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd7c:	4b0e      	ldr	r3, [pc, #56]	; (800bdb8 <prvProcessTimerOrBlockTask+0x84>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	425a      	negs	r2, r3
 800bd84:	4153      	adcs	r3, r2
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <prvProcessTimerOrBlockTask+0x88>)
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	0019      	movs	r1, r3
 800bd98:	f7fe fe30 	bl	800a9fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd9c:	f7ff f880 	bl	800aea0 <xTaskResumeAll>
 800bda0:	1e03      	subs	r3, r0, #0
 800bda2:	d104      	bne.n	800bdae <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800bda4:	f000 fa8c 	bl	800c2c0 <vPortYield>
}
 800bda8:	e001      	b.n	800bdae <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800bdaa:	f7ff f879 	bl	800aea0 <xTaskResumeAll>
}
 800bdae:	46c0      	nop			; (mov r8, r8)
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	b004      	add	sp, #16
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	46c0      	nop			; (mov r8, r8)
 800bdb8:	200019e4 	.word	0x200019e4
 800bdbc:	200019e8 	.word	0x200019e8

0800bdc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <prvGetNextExpireTime+0x3c>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	425a      	negs	r2, r3
 800bdd0:	4153      	adcs	r3, r2
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	001a      	movs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d105      	bne.n	800bdee <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bde2:	4b06      	ldr	r3, [pc, #24]	; (800bdfc <prvGetNextExpireTime+0x3c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	e001      	b.n	800bdf2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
}
 800bdf4:	0018      	movs	r0, r3
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	b004      	add	sp, #16
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	200019e0 	.word	0x200019e0

0800be00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be08:	f7ff f8d6 	bl	800afb8 <xTaskGetTickCount>
 800be0c:	0003      	movs	r3, r0
 800be0e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800be10:	4b0a      	ldr	r3, [pc, #40]	; (800be3c <prvSampleTimeNow+0x3c>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	429a      	cmp	r2, r3
 800be18:	d205      	bcs.n	800be26 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800be1a:	f000 f8eb 	bl	800bff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	601a      	str	r2, [r3, #0]
 800be24:	e002      	b.n	800be2c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be2c:	4b03      	ldr	r3, [pc, #12]	; (800be3c <prvSampleTimeNow+0x3c>)
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800be32:	68fb      	ldr	r3, [r7, #12]
}
 800be34:	0018      	movs	r0, r3
 800be36:	46bd      	mov	sp, r7
 800be38:	b004      	add	sp, #16
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	200019f0 	.word	0x200019f0

0800be40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	429a      	cmp	r2, r3
 800be64:	d812      	bhi.n	800be8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	1ad2      	subs	r2, r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	429a      	cmp	r2, r3
 800be72:	d302      	bcc.n	800be7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be74:	2301      	movs	r3, #1
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e01b      	b.n	800beb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be7a:	4b10      	ldr	r3, [pc, #64]	; (800bebc <prvInsertTimerInActiveList+0x7c>)
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3304      	adds	r3, #4
 800be82:	0019      	movs	r1, r3
 800be84:	0010      	movs	r0, r2
 800be86:	f7fd fec0 	bl	8009c0a <vListInsert>
 800be8a:	e012      	b.n	800beb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d206      	bcs.n	800bea2 <prvInsertTimerInActiveList+0x62>
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d302      	bcc.n	800bea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be9c:	2301      	movs	r3, #1
 800be9e:	617b      	str	r3, [r7, #20]
 800bea0:	e007      	b.n	800beb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bea2:	4b07      	ldr	r3, [pc, #28]	; (800bec0 <prvInsertTimerInActiveList+0x80>)
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3304      	adds	r3, #4
 800beaa:	0019      	movs	r1, r3
 800beac:	0010      	movs	r0, r2
 800beae:	f7fd feac 	bl	8009c0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800beb2:	697b      	ldr	r3, [r7, #20]
}
 800beb4:	0018      	movs	r0, r3
 800beb6:	46bd      	mov	sp, r7
 800beb8:	b006      	add	sp, #24
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	200019e4 	.word	0x200019e4
 800bec0:	200019e0 	.word	0x200019e0

0800bec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bec4:	b590      	push	{r4, r7, lr}
 800bec6:	b08d      	sub	sp, #52	; 0x34
 800bec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800beca:	e07f      	b.n	800bfcc <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800becc:	2208      	movs	r2, #8
 800bece:	18bb      	adds	r3, r7, r2
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	da0f      	bge.n	800bef6 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bed6:	18bb      	adds	r3, r7, r2
 800bed8:	3304      	adds	r3, #4
 800beda:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <prvProcessReceivedCommands+0x22>
 800bee2:	b672      	cpsid	i
 800bee4:	e7fe      	b.n	800bee4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	6858      	ldr	r0, [r3, #4]
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	0019      	movs	r1, r3
 800bef4:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bef6:	2208      	movs	r2, #8
 800bef8:	18bb      	adds	r3, r7, r2
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	db64      	blt.n	800bfca <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf00:	18bb      	adds	r3, r7, r2
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d004      	beq.n	800bf18 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	3304      	adds	r3, #4
 800bf12:	0018      	movs	r0, r3
 800bf14:	f7fd feaf 	bl	8009c76 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf18:	1d3b      	adds	r3, r7, #4
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f7ff ff70 	bl	800be00 <prvSampleTimeNow>
 800bf20:	0003      	movs	r3, r0
 800bf22:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800bf24:	2308      	movs	r3, #8
 800bf26:	18fb      	adds	r3, r7, r3
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b09      	cmp	r3, #9
 800bf2c:	d84e      	bhi.n	800bfcc <prvProcessReceivedCommands+0x108>
 800bf2e:	009a      	lsls	r2, r3, #2
 800bf30:	4b2e      	ldr	r3, [pc, #184]	; (800bfec <prvProcessReceivedCommands+0x128>)
 800bf32:	18d3      	adds	r3, r2, r3
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf38:	2408      	movs	r4, #8
 800bf3a:	193b      	adds	r3, r7, r4
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	18d1      	adds	r1, r2, r3
 800bf44:	193b      	adds	r3, r7, r4
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	69fa      	ldr	r2, [r7, #28]
 800bf4a:	6a38      	ldr	r0, [r7, #32]
 800bf4c:	f7ff ff78 	bl	800be40 <prvInsertTimerInActiveList>
 800bf50:	1e03      	subs	r3, r0, #0
 800bf52:	d03b      	beq.n	800bfcc <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf58:	6a3a      	ldr	r2, [r7, #32]
 800bf5a:	0010      	movs	r0, r2
 800bf5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	69db      	ldr	r3, [r3, #28]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d132      	bne.n	800bfcc <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf66:	193b      	adds	r3, r7, r4
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	18d2      	adds	r2, r2, r3
 800bf70:	6a38      	ldr	r0, [r7, #32]
 800bf72:	2300      	movs	r3, #0
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	2300      	movs	r3, #0
 800bf78:	2100      	movs	r1, #0
 800bf7a:	f7ff fe45 	bl	800bc08 <xTimerGenericCommand>
 800bf7e:	0003      	movs	r3, r0
 800bf80:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d121      	bne.n	800bfcc <prvProcessReceivedCommands+0x108>
 800bf88:	b672      	cpsid	i
 800bf8a:	e7fe      	b.n	800bf8a <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf8c:	2308      	movs	r3, #8
 800bf8e:	18fb      	adds	r3, r7, r3
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf96:	6a3b      	ldr	r3, [r7, #32]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <prvProcessReceivedCommands+0xde>
 800bf9e:	b672      	cpsid	i
 800bfa0:	e7fe      	b.n	800bfa0 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	699a      	ldr	r2, [r3, #24]
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	18d1      	adds	r1, r2, r3
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	69fa      	ldr	r2, [r7, #28]
 800bfae:	6a38      	ldr	r0, [r7, #32]
 800bfb0:	f7ff ff46 	bl	800be40 <prvInsertTimerInActiveList>
					break;
 800bfb4:	e00a      	b.n	800bfcc <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	222c      	movs	r2, #44	; 0x2c
 800bfba:	5c9b      	ldrb	r3, [r3, r2]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d105      	bne.n	800bfcc <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	0018      	movs	r0, r3
 800bfc4:	f000 faca 	bl	800c55c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfc8:	e000      	b.n	800bfcc <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bfca:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfcc:	4b08      	ldr	r3, [pc, #32]	; (800bff0 <prvProcessReceivedCommands+0x12c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2208      	movs	r2, #8
 800bfd2:	18b9      	adds	r1, r7, r2
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f7fe f957 	bl	800a28a <xQueueReceive>
 800bfdc:	1e03      	subs	r3, r0, #0
 800bfde:	d000      	beq.n	800bfe2 <prvProcessReceivedCommands+0x11e>
 800bfe0:	e774      	b.n	800becc <prvProcessReceivedCommands+0x8>
	}
}
 800bfe2:	46c0      	nop			; (mov r8, r8)
 800bfe4:	46c0      	nop			; (mov r8, r8)
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	b00b      	add	sp, #44	; 0x2c
 800bfea:	bd90      	pop	{r4, r7, pc}
 800bfec:	0800dcf4 	.word	0x0800dcf4
 800bff0:	200019e8 	.word	0x200019e8

0800bff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bffa:	e03e      	b.n	800c07a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bffc:	4b28      	ldr	r3, [pc, #160]	; (800c0a0 <prvSwitchTimerLists+0xac>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c006:	4b26      	ldr	r3, [pc, #152]	; (800c0a0 <prvSwitchTimerLists+0xac>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3304      	adds	r3, #4
 800c014:	0018      	movs	r0, r3
 800c016:	f7fd fe2e 	bl	8009c76 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	0010      	movs	r0, r2
 800c022:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d126      	bne.n	800c07a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	18d3      	adds	r3, r2, r3
 800c034:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d90e      	bls.n	800c05c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c04a:	4b15      	ldr	r3, [pc, #84]	; (800c0a0 <prvSwitchTimerLists+0xac>)
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3304      	adds	r3, #4
 800c052:	0019      	movs	r1, r3
 800c054:	0010      	movs	r0, r2
 800c056:	f7fd fdd8 	bl	8009c0a <vListInsert>
 800c05a:	e00e      	b.n	800c07a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c05c:	693a      	ldr	r2, [r7, #16]
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	2300      	movs	r3, #0
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	2300      	movs	r3, #0
 800c066:	2100      	movs	r1, #0
 800c068:	f7ff fdce 	bl	800bc08 <xTimerGenericCommand>
 800c06c:	0003      	movs	r3, r0
 800c06e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <prvSwitchTimerLists+0x86>
 800c076:	b672      	cpsid	i
 800c078:	e7fe      	b.n	800c078 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c07a:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <prvSwitchTimerLists+0xac>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1bb      	bne.n	800bffc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c084:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <prvSwitchTimerLists+0xac>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <prvSwitchTimerLists+0xb0>)
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	4b04      	ldr	r3, [pc, #16]	; (800c0a0 <prvSwitchTimerLists+0xac>)
 800c090:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800c092:	4b04      	ldr	r3, [pc, #16]	; (800c0a4 <prvSwitchTimerLists+0xb0>)
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	601a      	str	r2, [r3, #0]
}
 800c098:	46c0      	nop			; (mov r8, r8)
 800c09a:	46bd      	mov	sp, r7
 800c09c:	b006      	add	sp, #24
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	200019e0 	.word	0x200019e0
 800c0a4:	200019e4 	.word	0x200019e4

0800c0a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0ae:	f000 f917 	bl	800c2e0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0b2:	4b16      	ldr	r3, [pc, #88]	; (800c10c <prvCheckForValidListAndQueue+0x64>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d123      	bne.n	800c102 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0ba:	4b15      	ldr	r3, [pc, #84]	; (800c110 <prvCheckForValidListAndQueue+0x68>)
 800c0bc:	0018      	movs	r0, r3
 800c0be:	f7fd fd59 	bl	8009b74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0c2:	4b14      	ldr	r3, [pc, #80]	; (800c114 <prvCheckForValidListAndQueue+0x6c>)
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	f7fd fd55 	bl	8009b74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0ca:	4b13      	ldr	r3, [pc, #76]	; (800c118 <prvCheckForValidListAndQueue+0x70>)
 800c0cc:	4a10      	ldr	r2, [pc, #64]	; (800c110 <prvCheckForValidListAndQueue+0x68>)
 800c0ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c0d0:	4b12      	ldr	r3, [pc, #72]	; (800c11c <prvCheckForValidListAndQueue+0x74>)
 800c0d2:	4a10      	ldr	r2, [pc, #64]	; (800c114 <prvCheckForValidListAndQueue+0x6c>)
 800c0d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <prvCheckForValidListAndQueue+0x78>)
 800c0d8:	4a12      	ldr	r2, [pc, #72]	; (800c124 <prvCheckForValidListAndQueue+0x7c>)
 800c0da:	2100      	movs	r1, #0
 800c0dc:	9100      	str	r1, [sp, #0]
 800c0de:	2110      	movs	r1, #16
 800c0e0:	200a      	movs	r0, #10
 800c0e2:	f7fd fe44 	bl	8009d6e <xQueueGenericCreateStatic>
 800c0e6:	0002      	movs	r2, r0
 800c0e8:	4b08      	ldr	r3, [pc, #32]	; (800c10c <prvCheckForValidListAndQueue+0x64>)
 800c0ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c0ec:	4b07      	ldr	r3, [pc, #28]	; (800c10c <prvCheckForValidListAndQueue+0x64>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d006      	beq.n	800c102 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c0f4:	4b05      	ldr	r3, [pc, #20]	; (800c10c <prvCheckForValidListAndQueue+0x64>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a0b      	ldr	r2, [pc, #44]	; (800c128 <prvCheckForValidListAndQueue+0x80>)
 800c0fa:	0011      	movs	r1, r2
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	f7fe fc2b 	bl	800a958 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c102:	f000 f8ff 	bl	800c304 <vPortExitCritical>
}
 800c106:	46c0      	nop			; (mov r8, r8)
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	200019e8 	.word	0x200019e8
 800c110:	200019b8 	.word	0x200019b8
 800c114:	200019cc 	.word	0x200019cc
 800c118:	200019e0 	.word	0x200019e0
 800c11c:	200019e4 	.word	0x200019e4
 800c120:	20001a94 	.word	0x20001a94
 800c124:	200019f4 	.word	0x200019f4
 800c128:	0800d4c4 	.word	0x0800d4c4

0800c12c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <pvTimerGetTimerID+0x16>
 800c13e:	b672      	cpsid	i
 800c140:	e7fe      	b.n	800c140 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800c142:	f000 f8cd 	bl	800c2e0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 800c14c:	f000 f8da 	bl	800c304 <vPortExitCritical>

	return pvReturn;
 800c150:	68bb      	ldr	r3, [r7, #8]
}
 800c152:	0018      	movs	r0, r3
 800c154:	46bd      	mov	sp, r7
 800c156:	b004      	add	sp, #16
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08a      	sub	sp, #40	; 0x28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c16a:	2114      	movs	r1, #20
 800c16c:	187b      	adds	r3, r7, r1
 800c16e:	2202      	movs	r2, #2
 800c170:	4252      	negs	r2, r2
 800c172:	601a      	str	r2, [r3, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c174:	187b      	adds	r3, r7, r1
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	605a      	str	r2, [r3, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c17a:	187b      	adds	r3, r7, r1
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	609a      	str	r2, [r3, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c180:	187b      	adds	r3, r7, r1
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	60da      	str	r2, [r3, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c186:	4b07      	ldr	r3, [pc, #28]	; (800c1a4 <xTimerPendFunctionCallFromISR+0x48>)
 800c188:	6818      	ldr	r0, [r3, #0]
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	1879      	adds	r1, r7, r1
 800c18e:	2300      	movs	r3, #0
 800c190:	f7fe f80a 	bl	800a1a8 <xQueueGenericSendFromISR>
 800c194:	0003      	movs	r3, r0
 800c196:	627b      	str	r3, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c19a:	0018      	movs	r0, r3
 800c19c:	46bd      	mov	sp, r7
 800c19e:	b00a      	add	sp, #40	; 0x28
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	46c0      	nop			; (mov r8, r8)
 800c1a4:	200019e8 	.word	0x200019e8

0800c1a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3b04      	subs	r3, #4
 800c1b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2280      	movs	r2, #128	; 0x80
 800c1be:	0452      	lsls	r2, r2, #17
 800c1c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	3b04      	subs	r3, #4
 800c1d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1d4:	4a08      	ldr	r2, [pc, #32]	; (800c1f8 <pxPortInitialiseStack+0x50>)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3b14      	subs	r3, #20
 800c1de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3b20      	subs	r3, #32
 800c1ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
}
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	b004      	add	sp, #16
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	46c0      	nop			; (mov r8, r8)
 800c1f8:	0800c1fd 	.word	0x0800c1fd

0800c1fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c202:	2300      	movs	r3, #0
 800c204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c206:	4b08      	ldr	r3, [pc, #32]	; (800c228 <prvTaskExitError+0x2c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3301      	adds	r3, #1
 800c20c:	d001      	beq.n	800c212 <prvTaskExitError+0x16>
 800c20e:	b672      	cpsid	i
 800c210:	e7fe      	b.n	800c210 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800c212:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c214:	46c0      	nop			; (mov r8, r8)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d0fc      	beq.n	800c216 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c21c:	46c0      	nop			; (mov r8, r8)
 800c21e:	46c0      	nop			; (mov r8, r8)
 800c220:	46bd      	mov	sp, r7
 800c222:	b002      	add	sp, #8
 800c224:	bd80      	pop	{r7, pc}
 800c226:	46c0      	nop			; (mov r8, r8)
 800c228:	20000018 	.word	0x20000018

0800c22c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800c230:	46c0      	nop			; (mov r8, r8)
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c240 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c240:	4a0b      	ldr	r2, [pc, #44]	; (800c270 <pxCurrentTCBConst2>)
 800c242:	6813      	ldr	r3, [r2, #0]
 800c244:	6818      	ldr	r0, [r3, #0]
 800c246:	3020      	adds	r0, #32
 800c248:	f380 8809 	msr	PSP, r0
 800c24c:	2002      	movs	r0, #2
 800c24e:	f380 8814 	msr	CONTROL, r0
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c258:	46ae      	mov	lr, r5
 800c25a:	bc08      	pop	{r3}
 800c25c:	bc04      	pop	{r2}
 800c25e:	b662      	cpsie	i
 800c260:	4718      	bx	r3
 800c262:	46c0      	nop			; (mov r8, r8)
 800c264:	46c0      	nop			; (mov r8, r8)
 800c266:	46c0      	nop			; (mov r8, r8)
 800c268:	46c0      	nop			; (mov r8, r8)
 800c26a:	46c0      	nop			; (mov r8, r8)
 800c26c:	46c0      	nop			; (mov r8, r8)
 800c26e:	46c0      	nop			; (mov r8, r8)

0800c270 <pxCurrentTCBConst2>:
 800c270:	200014b8 	.word	0x200014b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800c274:	46c0      	nop			; (mov r8, r8)
 800c276:	46c0      	nop			; (mov r8, r8)

0800c278 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800c27c:	4b0e      	ldr	r3, [pc, #56]	; (800c2b8 <xPortStartScheduler+0x40>)
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	4b0d      	ldr	r3, [pc, #52]	; (800c2b8 <xPortStartScheduler+0x40>)
 800c282:	21ff      	movs	r1, #255	; 0xff
 800c284:	0409      	lsls	r1, r1, #16
 800c286:	430a      	orrs	r2, r1
 800c288:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800c28a:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <xPortStartScheduler+0x40>)
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <xPortStartScheduler+0x40>)
 800c290:	21ff      	movs	r1, #255	; 0xff
 800c292:	0609      	lsls	r1, r1, #24
 800c294:	430a      	orrs	r2, r1
 800c296:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800c298:	f000 f898 	bl	800c3cc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c29c:	4b07      	ldr	r3, [pc, #28]	; (800c2bc <xPortStartScheduler+0x44>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800c2a2:	f7ff ffcd 	bl	800c240 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2a6:	f7fe ff59 	bl	800b15c <vTaskSwitchContext>
	prvTaskExitError();
 800c2aa:	f7ff ffa7 	bl	800c1fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2ae:	2300      	movs	r3, #0
}
 800c2b0:	0018      	movs	r0, r3
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	46c0      	nop			; (mov r8, r8)
 800c2b8:	e000ed20 	.word	0xe000ed20
 800c2bc:	20000018 	.word	0x20000018

0800c2c0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800c2c4:	4b05      	ldr	r3, [pc, #20]	; (800c2dc <vPortYield+0x1c>)
 800c2c6:	2280      	movs	r2, #128	; 0x80
 800c2c8:	0552      	lsls	r2, r2, #21
 800c2ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c2cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c2d0:	f3bf 8f6f 	isb	sy
}
 800c2d4:	46c0      	nop			; (mov r8, r8)
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	46c0      	nop			; (mov r8, r8)
 800c2dc:	e000ed04 	.word	0xe000ed04

0800c2e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800c2e4:	b672      	cpsid	i
    uxCriticalNesting++;
 800c2e6:	4b06      	ldr	r3, [pc, #24]	; (800c300 <vPortEnterCritical+0x20>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	1c5a      	adds	r2, r3, #1
 800c2ec:	4b04      	ldr	r3, [pc, #16]	; (800c300 <vPortEnterCritical+0x20>)
 800c2ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c2f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c2f4:	f3bf 8f6f 	isb	sy
}
 800c2f8:	46c0      	nop			; (mov r8, r8)
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	46c0      	nop			; (mov r8, r8)
 800c300:	20000018 	.word	0x20000018

0800c304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c308:	4b09      	ldr	r3, [pc, #36]	; (800c330 <vPortExitCritical+0x2c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <vPortExitCritical+0x10>
 800c310:	b672      	cpsid	i
 800c312:	e7fe      	b.n	800c312 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800c314:	4b06      	ldr	r3, [pc, #24]	; (800c330 <vPortExitCritical+0x2c>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	1e5a      	subs	r2, r3, #1
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <vPortExitCritical+0x2c>)
 800c31c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800c31e:	4b04      	ldr	r3, [pc, #16]	; (800c330 <vPortExitCritical+0x2c>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d100      	bne.n	800c328 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800c326:	b662      	cpsie	i
    }
}
 800c328:	46c0      	nop			; (mov r8, r8)
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	46c0      	nop			; (mov r8, r8)
 800c330:	20000018 	.word	0x20000018

0800c334 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c334:	f3ef 8010 	mrs	r0, PRIMASK
 800c338:	b672      	cpsid	i
 800c33a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800c33c:	46c0      	nop			; (mov r8, r8)
 800c33e:	0018      	movs	r0, r3

0800c340 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c340:	f380 8810 	msr	PRIMASK, r0
 800c344:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800c346:	46c0      	nop			; (mov r8, r8)
	...

0800c350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c350:	f3ef 8009 	mrs	r0, PSP
 800c354:	4b0e      	ldr	r3, [pc, #56]	; (800c390 <pxCurrentTCBConst>)
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	3820      	subs	r0, #32
 800c35a:	6010      	str	r0, [r2, #0]
 800c35c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c35e:	4644      	mov	r4, r8
 800c360:	464d      	mov	r5, r9
 800c362:	4656      	mov	r6, sl
 800c364:	465f      	mov	r7, fp
 800c366:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c368:	b508      	push	{r3, lr}
 800c36a:	b672      	cpsid	i
 800c36c:	f7fe fef6 	bl	800b15c <vTaskSwitchContext>
 800c370:	b662      	cpsie	i
 800c372:	bc0c      	pop	{r2, r3}
 800c374:	6811      	ldr	r1, [r2, #0]
 800c376:	6808      	ldr	r0, [r1, #0]
 800c378:	3010      	adds	r0, #16
 800c37a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c37c:	46a0      	mov	r8, r4
 800c37e:	46a9      	mov	r9, r5
 800c380:	46b2      	mov	sl, r6
 800c382:	46bb      	mov	fp, r7
 800c384:	f380 8809 	msr	PSP, r0
 800c388:	3820      	subs	r0, #32
 800c38a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c38c:	4718      	bx	r3
 800c38e:	46c0      	nop			; (mov r8, r8)

0800c390 <pxCurrentTCBConst>:
 800c390:	200014b8 	.word	0x200014b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800c394:	46c0      	nop			; (mov r8, r8)
 800c396:	46c0      	nop			; (mov r8, r8)

0800c398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c39e:	f7ff ffc9 	bl	800c334 <ulSetInterruptMaskFromISR>
 800c3a2:	0003      	movs	r3, r0
 800c3a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3a6:	f7fe fe25 	bl	800aff4 <xTaskIncrementTick>
 800c3aa:	1e03      	subs	r3, r0, #0
 800c3ac:	d003      	beq.n	800c3b6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800c3ae:	4b06      	ldr	r3, [pc, #24]	; (800c3c8 <SysTick_Handler+0x30>)
 800c3b0:	2280      	movs	r2, #128	; 0x80
 800c3b2:	0552      	lsls	r2, r2, #21
 800c3b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	0018      	movs	r0, r3
 800c3ba:	f7ff ffc1 	bl	800c340 <vClearInterruptMaskFromISR>
}
 800c3be:	46c0      	nop			; (mov r8, r8)
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	b002      	add	sp, #8
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	e000ed04 	.word	0xe000ed04

0800c3cc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <prvSetupTimerInterrupt+0x34>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800c3d6:	4b0b      	ldr	r3, [pc, #44]	; (800c404 <prvSetupTimerInterrupt+0x38>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <prvSetupTimerInterrupt+0x3c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	22fa      	movs	r2, #250	; 0xfa
 800c3e2:	0091      	lsls	r1, r2, #2
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	f7f3 fe99 	bl	800011c <__udivsi3>
 800c3ea:	0003      	movs	r3, r0
 800c3ec:	001a      	movs	r2, r3
 800c3ee:	4b07      	ldr	r3, [pc, #28]	; (800c40c <prvSetupTimerInterrupt+0x40>)
 800c3f0:	3a01      	subs	r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800c3f4:	4b02      	ldr	r3, [pc, #8]	; (800c400 <prvSetupTimerInterrupt+0x34>)
 800c3f6:	2207      	movs	r2, #7
 800c3f8:	601a      	str	r2, [r3, #0]
}
 800c3fa:	46c0      	nop			; (mov r8, r8)
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	e000e010 	.word	0xe000e010
 800c404:	e000e018 	.word	0xe000e018
 800c408:	20000000 	.word	0x20000000
 800c40c:	e000e014 	.word	0xe000e014

0800c410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c418:	2300      	movs	r3, #0
 800c41a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c41c:	f7fe fd34 	bl	800ae88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c420:	4b49      	ldr	r3, [pc, #292]	; (800c548 <pvPortMalloc+0x138>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c428:	f000 f8e0 	bl	800c5ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c42c:	4b47      	ldr	r3, [pc, #284]	; (800c54c <pvPortMalloc+0x13c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	4013      	ands	r3, r2
 800c434:	d000      	beq.n	800c438 <pvPortMalloc+0x28>
 800c436:	e079      	b.n	800c52c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d012      	beq.n	800c464 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800c43e:	2208      	movs	r2, #8
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	189b      	adds	r3, r3, r2
 800c444:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2207      	movs	r2, #7
 800c44a:	4013      	ands	r3, r2
 800c44c:	d00a      	beq.n	800c464 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2207      	movs	r2, #7
 800c452:	4393      	bics	r3, r2
 800c454:	3308      	adds	r3, #8
 800c456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2207      	movs	r2, #7
 800c45c:	4013      	ands	r3, r2
 800c45e:	d001      	beq.n	800c464 <pvPortMalloc+0x54>
 800c460:	b672      	cpsid	i
 800c462:	e7fe      	b.n	800c462 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d060      	beq.n	800c52c <pvPortMalloc+0x11c>
 800c46a:	4b39      	ldr	r3, [pc, #228]	; (800c550 <pvPortMalloc+0x140>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	429a      	cmp	r2, r3
 800c472:	d85b      	bhi.n	800c52c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c474:	4b37      	ldr	r3, [pc, #220]	; (800c554 <pvPortMalloc+0x144>)
 800c476:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c478:	4b36      	ldr	r3, [pc, #216]	; (800c554 <pvPortMalloc+0x144>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c47e:	e004      	b.n	800c48a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d903      	bls.n	800c49c <pvPortMalloc+0x8c>
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1f1      	bne.n	800c480 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c49c:	4b2a      	ldr	r3, [pc, #168]	; (800c548 <pvPortMalloc+0x138>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d042      	beq.n	800c52c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2208      	movs	r2, #8
 800c4ac:	189b      	adds	r3, r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d916      	bls.n	800c4f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	18d3      	adds	r3, r2, r3
 800c4ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2207      	movs	r2, #7
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	d001      	beq.n	800c4dc <pvPortMalloc+0xcc>
 800c4d8:	b672      	cpsid	i
 800c4da:	e7fe      	b.n	800c4da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	685a      	ldr	r2, [r3, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	1ad2      	subs	r2, r2, r3
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	0018      	movs	r0, r3
 800c4f2:	f000 f8db 	bl	800c6ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4f6:	4b16      	ldr	r3, [pc, #88]	; (800c550 <pvPortMalloc+0x140>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	4b13      	ldr	r3, [pc, #76]	; (800c550 <pvPortMalloc+0x140>)
 800c502:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c504:	4b12      	ldr	r3, [pc, #72]	; (800c550 <pvPortMalloc+0x140>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4b13      	ldr	r3, [pc, #76]	; (800c558 <pvPortMalloc+0x148>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d203      	bcs.n	800c518 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c510:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <pvPortMalloc+0x140>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	4b10      	ldr	r3, [pc, #64]	; (800c558 <pvPortMalloc+0x148>)
 800c516:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	4b0b      	ldr	r3, [pc, #44]	; (800c54c <pvPortMalloc+0x13c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	431a      	orrs	r2, r3
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2200      	movs	r2, #0
 800c52a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c52c:	f7fe fcb8 	bl	800aea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2207      	movs	r2, #7
 800c534:	4013      	ands	r3, r2
 800c536:	d001      	beq.n	800c53c <pvPortMalloc+0x12c>
 800c538:	b672      	cpsid	i
 800c53a:	e7fe      	b.n	800c53a <pvPortMalloc+0x12a>
	return pvReturn;
 800c53c:	68fb      	ldr	r3, [r7, #12]
}
 800c53e:	0018      	movs	r0, r3
 800c540:	46bd      	mov	sp, r7
 800c542:	b006      	add	sp, #24
 800c544:	bd80      	pop	{r7, pc}
 800c546:	46c0      	nop			; (mov r8, r8)
 800c548:	200026ec 	.word	0x200026ec
 800c54c:	200026f8 	.word	0x200026f8
 800c550:	200026f0 	.word	0x200026f0
 800c554:	200026e4 	.word	0x200026e4
 800c558:	200026f4 	.word	0x200026f4

0800c55c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d035      	beq.n	800c5da <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c56e:	2308      	movs	r3, #8
 800c570:	425b      	negs	r3, r3
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	18d3      	adds	r3, r2, r3
 800c576:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <vPortFree+0x88>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4013      	ands	r3, r2
 800c586:	d101      	bne.n	800c58c <vPortFree+0x30>
 800c588:	b672      	cpsid	i
 800c58a:	e7fe      	b.n	800c58a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <vPortFree+0x3c>
 800c594:	b672      	cpsid	i
 800c596:	e7fe      	b.n	800c596 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	4b11      	ldr	r3, [pc, #68]	; (800c5e4 <vPortFree+0x88>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	d01a      	beq.n	800c5da <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d116      	bne.n	800c5da <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	4b0c      	ldr	r3, [pc, #48]	; (800c5e4 <vPortFree+0x88>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	43db      	mvns	r3, r3
 800c5b6:	401a      	ands	r2, r3
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5bc:	f7fe fc64 	bl	800ae88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	4b08      	ldr	r3, [pc, #32]	; (800c5e8 <vPortFree+0x8c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	18d2      	adds	r2, r2, r3
 800c5ca:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <vPortFree+0x8c>)
 800c5cc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f000 f86b 	bl	800c6ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c5d6:	f7fe fc63 	bl	800aea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5da:	46c0      	nop			; (mov r8, r8)
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	b004      	add	sp, #16
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	46c0      	nop			; (mov r8, r8)
 800c5e4:	200026f8 	.word	0x200026f8
 800c5e8:	200026f0 	.word	0x200026f0

0800c5ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5f2:	23c0      	movs	r3, #192	; 0xc0
 800c5f4:	011b      	lsls	r3, r3, #4
 800c5f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5f8:	4b26      	ldr	r3, [pc, #152]	; (800c694 <prvHeapInit+0xa8>)
 800c5fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2207      	movs	r2, #7
 800c600:	4013      	ands	r3, r2
 800c602:	d00c      	beq.n	800c61e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	3307      	adds	r3, #7
 800c608:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2207      	movs	r2, #7
 800c60e:	4393      	bics	r3, r2
 800c610:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	1ad2      	subs	r2, r2, r3
 800c618:	4b1e      	ldr	r3, [pc, #120]	; (800c694 <prvHeapInit+0xa8>)
 800c61a:	18d3      	adds	r3, r2, r3
 800c61c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c622:	4b1d      	ldr	r3, [pc, #116]	; (800c698 <prvHeapInit+0xac>)
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c628:	4b1b      	ldr	r3, [pc, #108]	; (800c698 <prvHeapInit+0xac>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	18d3      	adds	r3, r2, r3
 800c634:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c636:	2208      	movs	r2, #8
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	1a9b      	subs	r3, r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2207      	movs	r2, #7
 800c642:	4393      	bics	r3, r2
 800c644:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	4b14      	ldr	r3, [pc, #80]	; (800c69c <prvHeapInit+0xb0>)
 800c64a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800c64c:	4b13      	ldr	r3, [pc, #76]	; (800c69c <prvHeapInit+0xb0>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2200      	movs	r2, #0
 800c652:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c654:	4b11      	ldr	r3, [pc, #68]	; (800c69c <prvHeapInit+0xb0>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	1ad2      	subs	r2, r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c66a:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <prvHeapInit+0xb0>)
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	4b0a      	ldr	r3, [pc, #40]	; (800c6a0 <prvHeapInit+0xb4>)
 800c678:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	685a      	ldr	r2, [r3, #4]
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <prvHeapInit+0xb8>)
 800c680:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c682:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <prvHeapInit+0xbc>)
 800c684:	2280      	movs	r2, #128	; 0x80
 800c686:	0612      	lsls	r2, r2, #24
 800c688:	601a      	str	r2, [r3, #0]
}
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	46bd      	mov	sp, r7
 800c68e:	b004      	add	sp, #16
 800c690:	bd80      	pop	{r7, pc}
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	20001ae4 	.word	0x20001ae4
 800c698:	200026e4 	.word	0x200026e4
 800c69c:	200026ec 	.word	0x200026ec
 800c6a0:	200026f4 	.word	0x200026f4
 800c6a4:	200026f0 	.word	0x200026f0
 800c6a8:	200026f8 	.word	0x200026f8

0800c6ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6b4:	4b27      	ldr	r3, [pc, #156]	; (800c754 <prvInsertBlockIntoFreeList+0xa8>)
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	e002      	b.n	800c6c0 <prvInsertBlockIntoFreeList+0x14>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d8f7      	bhi.n	800c6ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	18d3      	adds	r3, r2, r3
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d108      	bne.n	800c6ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	18d2      	adds	r2, r2, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	18d2      	adds	r2, r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d118      	bne.n	800c734 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	4b14      	ldr	r3, [pc, #80]	; (800c758 <prvInsertBlockIntoFreeList+0xac>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d00d      	beq.n	800c72a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	18d2      	adds	r2, r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	e008      	b.n	800c73c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c72a:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <prvInsertBlockIntoFreeList+0xac>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	e003      	b.n	800c73c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	429a      	cmp	r2, r3
 800c742:	d002      	beq.n	800c74a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c74a:	46c0      	nop			; (mov r8, r8)
 800c74c:	46bd      	mov	sp, r7
 800c74e:	b004      	add	sp, #16
 800c750:	bd80      	pop	{r7, pc}
 800c752:	46c0      	nop			; (mov r8, r8)
 800c754:	200026e4 	.word	0x200026e4
 800c758:	200026ec 	.word	0x200026ec

0800c75c <_ZdlPvj>:
 800c75c:	b510      	push	{r4, lr}
 800c75e:	f000 f878 	bl	800c852 <_ZdlPv>
 800c762:	bd10      	pop	{r4, pc}

0800c764 <_Znwj>:
 800c764:	b510      	push	{r4, lr}
 800c766:	1e04      	subs	r4, r0, #0
 800c768:	d100      	bne.n	800c76c <_Znwj+0x8>
 800c76a:	3401      	adds	r4, #1
 800c76c:	0020      	movs	r0, r4
 800c76e:	f000 f8bb 	bl	800c8e8 <malloc>
 800c772:	2800      	cmp	r0, #0
 800c774:	d107      	bne.n	800c786 <_Znwj+0x22>
 800c776:	f000 f87d 	bl	800c874 <_ZSt15get_new_handlerv>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d101      	bne.n	800c782 <_Znwj+0x1e>
 800c77e:	f000 f87f 	bl	800c880 <abort>
 800c782:	4780      	blx	r0
 800c784:	e7f2      	b.n	800c76c <_Znwj+0x8>
 800c786:	bd10      	pop	{r4, pc}

0800c788 <__cxa_pure_virtual>:
 800c788:	b510      	push	{r4, lr}
 800c78a:	f000 f86b 	bl	800c864 <_ZSt9terminatev>

0800c78e <_ZNSaIcEC1Ev>:
 800c78e:	4770      	bx	lr

0800c790 <_ZNSaIcED1Ev>:
 800c790:	4770      	bx	lr

0800c792 <_ZSt17__throw_bad_allocv>:
 800c792:	b510      	push	{r4, lr}
 800c794:	f000 f874 	bl	800c880 <abort>

0800c798 <_ZSt19__throw_logic_errorPKc>:
 800c798:	b510      	push	{r4, lr}
 800c79a:	f000 f871 	bl	800c880 <abort>

0800c79e <_ZSt20__throw_length_errorPKc>:
 800c79e:	b510      	push	{r4, lr}
 800c7a0:	f000 f86e 	bl	800c880 <abort>

0800c7a4 <_ZSt25__throw_bad_function_callv>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	f000 f86b 	bl	800c880 <abort>

0800c7aa <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800c7aa:	b510      	push	{r4, lr}
 800c7ac:	2a00      	cmp	r2, #0
 800c7ae:	d001      	beq.n	800c7b4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 800c7b0:	f000 f8b9 	bl	800c926 <memcpy>
 800c7b4:	bd10      	pop	{r4, pc}

0800c7b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800c7b6:	6001      	str	r1, [r0, #0]
 800c7b8:	4770      	bx	lr

0800c7ba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800c7ba:	6800      	ldr	r0, [r0, #0]
 800c7bc:	4770      	bx	lr

0800c7be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800c7be:	3008      	adds	r0, #8
 800c7c0:	4770      	bx	lr

0800c7c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800c7c2:	6081      	str	r1, [r0, #8]
 800c7c4:	4770      	bx	lr

0800c7c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	6803      	ldr	r3, [r0, #0]
 800c7ca:	6041      	str	r1, [r0, #4]
 800c7cc:	545a      	strb	r2, [r3, r1]
 800c7ce:	4770      	bx	lr

0800c7d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800c7d0:	2080      	movs	r0, #128	; 0x80
 800c7d2:	680b      	ldr	r3, [r1, #0]
 800c7d4:	b510      	push	{r4, lr}
 800c7d6:	05c0      	lsls	r0, r0, #23
 800c7d8:	4283      	cmp	r3, r0
 800c7da:	d302      	bcc.n	800c7e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 800c7dc:	480a      	ldr	r0, [pc, #40]	; (800c808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 800c7de:	f7ff ffde 	bl	800c79e <_ZSt20__throw_length_errorPKc>
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d905      	bls.n	800c7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800c7e6:	0052      	lsls	r2, r2, #1
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d202      	bcs.n	800c7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800c7ec:	4282      	cmp	r2, r0
 800c7ee:	d205      	bcs.n	800c7fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800c7f0:	600a      	str	r2, [r1, #0]
 800c7f2:	6808      	ldr	r0, [r1, #0]
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	d504      	bpl.n	800c802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 800c7f8:	f7ff ffcb 	bl	800c792 <_ZSt17__throw_bad_allocv>
 800c7fc:	4b03      	ldr	r3, [pc, #12]	; (800c80c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 800c7fe:	600b      	str	r3, [r1, #0]
 800c800:	e7f7      	b.n	800c7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800c802:	f7ff ffaf 	bl	800c764 <_Znwj>
 800c806:	bd10      	pop	{r4, pc}
 800c808:	0800dd1c 	.word	0x0800dd1c
 800c80c:	3fffffff 	.word	0x3fffffff

0800c810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800c810:	0003      	movs	r3, r0
 800c812:	6800      	ldr	r0, [r0, #0]
 800c814:	3308      	adds	r3, #8
 800c816:	b510      	push	{r4, lr}
 800c818:	4298      	cmp	r0, r3
 800c81a:	d001      	beq.n	800c820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 800c81c:	f000 f819 	bl	800c852 <_ZdlPv>
 800c820:	bd10      	pop	{r4, pc}

0800c822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800c822:	b510      	push	{r4, lr}
 800c824:	2a01      	cmp	r2, #1
 800c826:	d102      	bne.n	800c82e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800c828:	780b      	ldrb	r3, [r1, #0]
 800c82a:	7003      	strb	r3, [r0, #0]
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	f7ff ffbc 	bl	800c7aa <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800c832:	e7fb      	b.n	800c82c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800c834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800c834:	b510      	push	{r4, lr}
 800c836:	1a52      	subs	r2, r2, r1
 800c838:	f7ff fff3 	bl	800c822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800c83c:	bd10      	pop	{r4, pc}

0800c83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800c83e:	b510      	push	{r4, lr}
 800c840:	0004      	movs	r4, r0
 800c842:	f7ff ffe5 	bl	800c810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800c846:	0020      	movs	r0, r4
 800c848:	bd10      	pop	{r4, pc}

0800c84a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800c84a:	6800      	ldr	r0, [r0, #0]
 800c84c:	4770      	bx	lr

0800c84e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800c84e:	6001      	str	r1, [r0, #0]
 800c850:	4770      	bx	lr

0800c852 <_ZdlPv>:
 800c852:	b510      	push	{r4, lr}
 800c854:	f000 f852 	bl	800c8fc <free>
 800c858:	bd10      	pop	{r4, pc}

0800c85a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c85a:	b510      	push	{r4, lr}
 800c85c:	4780      	blx	r0
 800c85e:	f000 f80f 	bl	800c880 <abort>
	...

0800c864 <_ZSt9terminatev>:
 800c864:	4b02      	ldr	r3, [pc, #8]	; (800c870 <_ZSt9terminatev+0xc>)
 800c866:	b510      	push	{r4, lr}
 800c868:	6818      	ldr	r0, [r3, #0]
 800c86a:	f7ff fff6 	bl	800c85a <_ZN10__cxxabiv111__terminateEPFvvE>
 800c86e:	46c0      	nop			; (mov r8, r8)
 800c870:	2000001c 	.word	0x2000001c

0800c874 <_ZSt15get_new_handlerv>:
 800c874:	4b01      	ldr	r3, [pc, #4]	; (800c87c <_ZSt15get_new_handlerv+0x8>)
 800c876:	6818      	ldr	r0, [r3, #0]
 800c878:	4770      	bx	lr
 800c87a:	46c0      	nop			; (mov r8, r8)
 800c87c:	200026fc 	.word	0x200026fc

0800c880 <abort>:
 800c880:	2006      	movs	r0, #6
 800c882:	b510      	push	{r4, lr}
 800c884:	f000 f9cc 	bl	800cc20 <raise>
 800c888:	2001      	movs	r0, #1
 800c88a:	f7f4 ff6b 	bl	8001764 <_exit>
	...

0800c890 <__errno>:
 800c890:	4b01      	ldr	r3, [pc, #4]	; (800c898 <__errno+0x8>)
 800c892:	6818      	ldr	r0, [r3, #0]
 800c894:	4770      	bx	lr
 800c896:	46c0      	nop			; (mov r8, r8)
 800c898:	20000020 	.word	0x20000020

0800c89c <__libc_init_array>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	2600      	movs	r6, #0
 800c8a0:	4d0c      	ldr	r5, [pc, #48]	; (800c8d4 <__libc_init_array+0x38>)
 800c8a2:	4c0d      	ldr	r4, [pc, #52]	; (800c8d8 <__libc_init_array+0x3c>)
 800c8a4:	1b64      	subs	r4, r4, r5
 800c8a6:	10a4      	asrs	r4, r4, #2
 800c8a8:	42a6      	cmp	r6, r4
 800c8aa:	d109      	bne.n	800c8c0 <__libc_init_array+0x24>
 800c8ac:	2600      	movs	r6, #0
 800c8ae:	f000 fd31 	bl	800d314 <_init>
 800c8b2:	4d0a      	ldr	r5, [pc, #40]	; (800c8dc <__libc_init_array+0x40>)
 800c8b4:	4c0a      	ldr	r4, [pc, #40]	; (800c8e0 <__libc_init_array+0x44>)
 800c8b6:	1b64      	subs	r4, r4, r5
 800c8b8:	10a4      	asrs	r4, r4, #2
 800c8ba:	42a6      	cmp	r6, r4
 800c8bc:	d105      	bne.n	800c8ca <__libc_init_array+0x2e>
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
 800c8c0:	00b3      	lsls	r3, r6, #2
 800c8c2:	58eb      	ldr	r3, [r5, r3]
 800c8c4:	4798      	blx	r3
 800c8c6:	3601      	adds	r6, #1
 800c8c8:	e7ee      	b.n	800c8a8 <__libc_init_array+0xc>
 800c8ca:	00b3      	lsls	r3, r6, #2
 800c8cc:	58eb      	ldr	r3, [r5, r3]
 800c8ce:	4798      	blx	r3
 800c8d0:	3601      	adds	r6, #1
 800c8d2:	e7f2      	b.n	800c8ba <__libc_init_array+0x1e>
 800c8d4:	0800ddc8 	.word	0x0800ddc8
 800c8d8:	0800ddc8 	.word	0x0800ddc8
 800c8dc:	0800ddc8 	.word	0x0800ddc8
 800c8e0:	0800ddd0 	.word	0x0800ddd0

0800c8e4 <__retarget_lock_acquire_recursive>:
 800c8e4:	4770      	bx	lr

0800c8e6 <__retarget_lock_release_recursive>:
 800c8e6:	4770      	bx	lr

0800c8e8 <malloc>:
 800c8e8:	b510      	push	{r4, lr}
 800c8ea:	4b03      	ldr	r3, [pc, #12]	; (800c8f8 <malloc+0x10>)
 800c8ec:	0001      	movs	r1, r0
 800c8ee:	6818      	ldr	r0, [r3, #0]
 800c8f0:	f000 f888 	bl	800ca04 <_malloc_r>
 800c8f4:	bd10      	pop	{r4, pc}
 800c8f6:	46c0      	nop			; (mov r8, r8)
 800c8f8:	20000020 	.word	0x20000020

0800c8fc <free>:
 800c8fc:	b510      	push	{r4, lr}
 800c8fe:	4b03      	ldr	r3, [pc, #12]	; (800c90c <free+0x10>)
 800c900:	0001      	movs	r1, r0
 800c902:	6818      	ldr	r0, [r3, #0]
 800c904:	f000 f834 	bl	800c970 <_free_r>
 800c908:	bd10      	pop	{r4, pc}
 800c90a:	46c0      	nop			; (mov r8, r8)
 800c90c:	20000020 	.word	0x20000020

0800c910 <memchr>:
 800c910:	b2c9      	uxtb	r1, r1
 800c912:	1882      	adds	r2, r0, r2
 800c914:	4290      	cmp	r0, r2
 800c916:	d101      	bne.n	800c91c <memchr+0xc>
 800c918:	2000      	movs	r0, #0
 800c91a:	4770      	bx	lr
 800c91c:	7803      	ldrb	r3, [r0, #0]
 800c91e:	428b      	cmp	r3, r1
 800c920:	d0fb      	beq.n	800c91a <memchr+0xa>
 800c922:	3001      	adds	r0, #1
 800c924:	e7f6      	b.n	800c914 <memchr+0x4>

0800c926 <memcpy>:
 800c926:	2300      	movs	r3, #0
 800c928:	b510      	push	{r4, lr}
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d100      	bne.n	800c930 <memcpy+0xa>
 800c92e:	bd10      	pop	{r4, pc}
 800c930:	5ccc      	ldrb	r4, [r1, r3]
 800c932:	54c4      	strb	r4, [r0, r3]
 800c934:	3301      	adds	r3, #1
 800c936:	e7f8      	b.n	800c92a <memcpy+0x4>

0800c938 <memmove>:
 800c938:	b510      	push	{r4, lr}
 800c93a:	4288      	cmp	r0, r1
 800c93c:	d902      	bls.n	800c944 <memmove+0xc>
 800c93e:	188b      	adds	r3, r1, r2
 800c940:	4298      	cmp	r0, r3
 800c942:	d303      	bcc.n	800c94c <memmove+0x14>
 800c944:	2300      	movs	r3, #0
 800c946:	e007      	b.n	800c958 <memmove+0x20>
 800c948:	5c8b      	ldrb	r3, [r1, r2]
 800c94a:	5483      	strb	r3, [r0, r2]
 800c94c:	3a01      	subs	r2, #1
 800c94e:	d2fb      	bcs.n	800c948 <memmove+0x10>
 800c950:	bd10      	pop	{r4, pc}
 800c952:	5ccc      	ldrb	r4, [r1, r3]
 800c954:	54c4      	strb	r4, [r0, r3]
 800c956:	3301      	adds	r3, #1
 800c958:	429a      	cmp	r2, r3
 800c95a:	d1fa      	bne.n	800c952 <memmove+0x1a>
 800c95c:	e7f8      	b.n	800c950 <memmove+0x18>

0800c95e <memset>:
 800c95e:	0003      	movs	r3, r0
 800c960:	1882      	adds	r2, r0, r2
 800c962:	4293      	cmp	r3, r2
 800c964:	d100      	bne.n	800c968 <memset+0xa>
 800c966:	4770      	bx	lr
 800c968:	7019      	strb	r1, [r3, #0]
 800c96a:	3301      	adds	r3, #1
 800c96c:	e7f9      	b.n	800c962 <memset+0x4>
	...

0800c970 <_free_r>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	0005      	movs	r5, r0
 800c974:	2900      	cmp	r1, #0
 800c976:	d010      	beq.n	800c99a <_free_r+0x2a>
 800c978:	1f0c      	subs	r4, r1, #4
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	da00      	bge.n	800c982 <_free_r+0x12>
 800c980:	18e4      	adds	r4, r4, r3
 800c982:	0028      	movs	r0, r5
 800c984:	f000 f9a4 	bl	800ccd0 <__malloc_lock>
 800c988:	4a1d      	ldr	r2, [pc, #116]	; (800ca00 <_free_r+0x90>)
 800c98a:	6813      	ldr	r3, [r2, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d105      	bne.n	800c99c <_free_r+0x2c>
 800c990:	6063      	str	r3, [r4, #4]
 800c992:	6014      	str	r4, [r2, #0]
 800c994:	0028      	movs	r0, r5
 800c996:	f000 f9a3 	bl	800cce0 <__malloc_unlock>
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	d908      	bls.n	800c9b2 <_free_r+0x42>
 800c9a0:	6821      	ldr	r1, [r4, #0]
 800c9a2:	1860      	adds	r0, r4, r1
 800c9a4:	4283      	cmp	r3, r0
 800c9a6:	d1f3      	bne.n	800c990 <_free_r+0x20>
 800c9a8:	6818      	ldr	r0, [r3, #0]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	1841      	adds	r1, r0, r1
 800c9ae:	6021      	str	r1, [r4, #0]
 800c9b0:	e7ee      	b.n	800c990 <_free_r+0x20>
 800c9b2:	001a      	movs	r2, r3
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <_free_r+0x4e>
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	d9f9      	bls.n	800c9b2 <_free_r+0x42>
 800c9be:	6811      	ldr	r1, [r2, #0]
 800c9c0:	1850      	adds	r0, r2, r1
 800c9c2:	42a0      	cmp	r0, r4
 800c9c4:	d10b      	bne.n	800c9de <_free_r+0x6e>
 800c9c6:	6820      	ldr	r0, [r4, #0]
 800c9c8:	1809      	adds	r1, r1, r0
 800c9ca:	1850      	adds	r0, r2, r1
 800c9cc:	6011      	str	r1, [r2, #0]
 800c9ce:	4283      	cmp	r3, r0
 800c9d0:	d1e0      	bne.n	800c994 <_free_r+0x24>
 800c9d2:	6818      	ldr	r0, [r3, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	1841      	adds	r1, r0, r1
 800c9d8:	6011      	str	r1, [r2, #0]
 800c9da:	6053      	str	r3, [r2, #4]
 800c9dc:	e7da      	b.n	800c994 <_free_r+0x24>
 800c9de:	42a0      	cmp	r0, r4
 800c9e0:	d902      	bls.n	800c9e8 <_free_r+0x78>
 800c9e2:	230c      	movs	r3, #12
 800c9e4:	602b      	str	r3, [r5, #0]
 800c9e6:	e7d5      	b.n	800c994 <_free_r+0x24>
 800c9e8:	6821      	ldr	r1, [r4, #0]
 800c9ea:	1860      	adds	r0, r4, r1
 800c9ec:	4283      	cmp	r3, r0
 800c9ee:	d103      	bne.n	800c9f8 <_free_r+0x88>
 800c9f0:	6818      	ldr	r0, [r3, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	1841      	adds	r1, r0, r1
 800c9f6:	6021      	str	r1, [r4, #0]
 800c9f8:	6063      	str	r3, [r4, #4]
 800c9fa:	6054      	str	r4, [r2, #4]
 800c9fc:	e7ca      	b.n	800c994 <_free_r+0x24>
 800c9fe:	46c0      	nop			; (mov r8, r8)
 800ca00:	20002700 	.word	0x20002700

0800ca04 <_malloc_r>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	2303      	movs	r3, #3
 800ca08:	1ccd      	adds	r5, r1, #3
 800ca0a:	439d      	bics	r5, r3
 800ca0c:	3508      	adds	r5, #8
 800ca0e:	0006      	movs	r6, r0
 800ca10:	2d0c      	cmp	r5, #12
 800ca12:	d21f      	bcs.n	800ca54 <_malloc_r+0x50>
 800ca14:	250c      	movs	r5, #12
 800ca16:	42a9      	cmp	r1, r5
 800ca18:	d81e      	bhi.n	800ca58 <_malloc_r+0x54>
 800ca1a:	0030      	movs	r0, r6
 800ca1c:	f000 f958 	bl	800ccd0 <__malloc_lock>
 800ca20:	4925      	ldr	r1, [pc, #148]	; (800cab8 <_malloc_r+0xb4>)
 800ca22:	680a      	ldr	r2, [r1, #0]
 800ca24:	0014      	movs	r4, r2
 800ca26:	2c00      	cmp	r4, #0
 800ca28:	d11a      	bne.n	800ca60 <_malloc_r+0x5c>
 800ca2a:	4f24      	ldr	r7, [pc, #144]	; (800cabc <_malloc_r+0xb8>)
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d104      	bne.n	800ca3c <_malloc_r+0x38>
 800ca32:	0021      	movs	r1, r4
 800ca34:	0030      	movs	r0, r6
 800ca36:	f000 f8b7 	bl	800cba8 <_sbrk_r>
 800ca3a:	6038      	str	r0, [r7, #0]
 800ca3c:	0029      	movs	r1, r5
 800ca3e:	0030      	movs	r0, r6
 800ca40:	f000 f8b2 	bl	800cba8 <_sbrk_r>
 800ca44:	1c43      	adds	r3, r0, #1
 800ca46:	d12b      	bne.n	800caa0 <_malloc_r+0x9c>
 800ca48:	230c      	movs	r3, #12
 800ca4a:	0030      	movs	r0, r6
 800ca4c:	6033      	str	r3, [r6, #0]
 800ca4e:	f000 f947 	bl	800cce0 <__malloc_unlock>
 800ca52:	e003      	b.n	800ca5c <_malloc_r+0x58>
 800ca54:	2d00      	cmp	r5, #0
 800ca56:	dade      	bge.n	800ca16 <_malloc_r+0x12>
 800ca58:	230c      	movs	r3, #12
 800ca5a:	6033      	str	r3, [r6, #0]
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	1b5b      	subs	r3, r3, r5
 800ca64:	d419      	bmi.n	800ca9a <_malloc_r+0x96>
 800ca66:	2b0b      	cmp	r3, #11
 800ca68:	d903      	bls.n	800ca72 <_malloc_r+0x6e>
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	18e4      	adds	r4, r4, r3
 800ca6e:	6025      	str	r5, [r4, #0]
 800ca70:	e003      	b.n	800ca7a <_malloc_r+0x76>
 800ca72:	6863      	ldr	r3, [r4, #4]
 800ca74:	42a2      	cmp	r2, r4
 800ca76:	d10e      	bne.n	800ca96 <_malloc_r+0x92>
 800ca78:	600b      	str	r3, [r1, #0]
 800ca7a:	0030      	movs	r0, r6
 800ca7c:	f000 f930 	bl	800cce0 <__malloc_unlock>
 800ca80:	0020      	movs	r0, r4
 800ca82:	2207      	movs	r2, #7
 800ca84:	300b      	adds	r0, #11
 800ca86:	1d23      	adds	r3, r4, #4
 800ca88:	4390      	bics	r0, r2
 800ca8a:	1ac2      	subs	r2, r0, r3
 800ca8c:	4298      	cmp	r0, r3
 800ca8e:	d0e6      	beq.n	800ca5e <_malloc_r+0x5a>
 800ca90:	1a1b      	subs	r3, r3, r0
 800ca92:	50a3      	str	r3, [r4, r2]
 800ca94:	e7e3      	b.n	800ca5e <_malloc_r+0x5a>
 800ca96:	6053      	str	r3, [r2, #4]
 800ca98:	e7ef      	b.n	800ca7a <_malloc_r+0x76>
 800ca9a:	0022      	movs	r2, r4
 800ca9c:	6864      	ldr	r4, [r4, #4]
 800ca9e:	e7c2      	b.n	800ca26 <_malloc_r+0x22>
 800caa0:	2303      	movs	r3, #3
 800caa2:	1cc4      	adds	r4, r0, #3
 800caa4:	439c      	bics	r4, r3
 800caa6:	42a0      	cmp	r0, r4
 800caa8:	d0e1      	beq.n	800ca6e <_malloc_r+0x6a>
 800caaa:	1a21      	subs	r1, r4, r0
 800caac:	0030      	movs	r0, r6
 800caae:	f000 f87b 	bl	800cba8 <_sbrk_r>
 800cab2:	1c43      	adds	r3, r0, #1
 800cab4:	d1db      	bne.n	800ca6e <_malloc_r+0x6a>
 800cab6:	e7c7      	b.n	800ca48 <_malloc_r+0x44>
 800cab8:	20002700 	.word	0x20002700
 800cabc:	20002704 	.word	0x20002704

0800cac0 <cleanup_glue>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	000d      	movs	r5, r1
 800cac4:	6809      	ldr	r1, [r1, #0]
 800cac6:	0004      	movs	r4, r0
 800cac8:	2900      	cmp	r1, #0
 800caca:	d001      	beq.n	800cad0 <cleanup_glue+0x10>
 800cacc:	f7ff fff8 	bl	800cac0 <cleanup_glue>
 800cad0:	0029      	movs	r1, r5
 800cad2:	0020      	movs	r0, r4
 800cad4:	f7ff ff4c 	bl	800c970 <_free_r>
 800cad8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cadc <_reclaim_reent>:
 800cadc:	4b31      	ldr	r3, [pc, #196]	; (800cba4 <_reclaim_reent+0xc8>)
 800cade:	b570      	push	{r4, r5, r6, lr}
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	0004      	movs	r4, r0
 800cae4:	4283      	cmp	r3, r0
 800cae6:	d049      	beq.n	800cb7c <_reclaim_reent+0xa0>
 800cae8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00a      	beq.n	800cb04 <_reclaim_reent+0x28>
 800caee:	2500      	movs	r5, #0
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	42ab      	cmp	r3, r5
 800caf4:	d147      	bne.n	800cb86 <_reclaim_reent+0xaa>
 800caf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caf8:	6819      	ldr	r1, [r3, #0]
 800cafa:	2900      	cmp	r1, #0
 800cafc:	d002      	beq.n	800cb04 <_reclaim_reent+0x28>
 800cafe:	0020      	movs	r0, r4
 800cb00:	f7ff ff36 	bl	800c970 <_free_r>
 800cb04:	6961      	ldr	r1, [r4, #20]
 800cb06:	2900      	cmp	r1, #0
 800cb08:	d002      	beq.n	800cb10 <_reclaim_reent+0x34>
 800cb0a:	0020      	movs	r0, r4
 800cb0c:	f7ff ff30 	bl	800c970 <_free_r>
 800cb10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb12:	2900      	cmp	r1, #0
 800cb14:	d002      	beq.n	800cb1c <_reclaim_reent+0x40>
 800cb16:	0020      	movs	r0, r4
 800cb18:	f7ff ff2a 	bl	800c970 <_free_r>
 800cb1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb1e:	2900      	cmp	r1, #0
 800cb20:	d002      	beq.n	800cb28 <_reclaim_reent+0x4c>
 800cb22:	0020      	movs	r0, r4
 800cb24:	f7ff ff24 	bl	800c970 <_free_r>
 800cb28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb2a:	2900      	cmp	r1, #0
 800cb2c:	d002      	beq.n	800cb34 <_reclaim_reent+0x58>
 800cb2e:	0020      	movs	r0, r4
 800cb30:	f7ff ff1e 	bl	800c970 <_free_r>
 800cb34:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb36:	2900      	cmp	r1, #0
 800cb38:	d002      	beq.n	800cb40 <_reclaim_reent+0x64>
 800cb3a:	0020      	movs	r0, r4
 800cb3c:	f7ff ff18 	bl	800c970 <_free_r>
 800cb40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb42:	2900      	cmp	r1, #0
 800cb44:	d002      	beq.n	800cb4c <_reclaim_reent+0x70>
 800cb46:	0020      	movs	r0, r4
 800cb48:	f7ff ff12 	bl	800c970 <_free_r>
 800cb4c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d002      	beq.n	800cb58 <_reclaim_reent+0x7c>
 800cb52:	0020      	movs	r0, r4
 800cb54:	f7ff ff0c 	bl	800c970 <_free_r>
 800cb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb5a:	2900      	cmp	r1, #0
 800cb5c:	d002      	beq.n	800cb64 <_reclaim_reent+0x88>
 800cb5e:	0020      	movs	r0, r4
 800cb60:	f7ff ff06 	bl	800c970 <_free_r>
 800cb64:	69a3      	ldr	r3, [r4, #24]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d008      	beq.n	800cb7c <_reclaim_reent+0xa0>
 800cb6a:	0020      	movs	r0, r4
 800cb6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb6e:	4798      	blx	r3
 800cb70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb72:	2900      	cmp	r1, #0
 800cb74:	d002      	beq.n	800cb7c <_reclaim_reent+0xa0>
 800cb76:	0020      	movs	r0, r4
 800cb78:	f7ff ffa2 	bl	800cac0 <cleanup_glue>
 800cb7c:	bd70      	pop	{r4, r5, r6, pc}
 800cb7e:	5949      	ldr	r1, [r1, r5]
 800cb80:	2900      	cmp	r1, #0
 800cb82:	d108      	bne.n	800cb96 <_reclaim_reent+0xba>
 800cb84:	3504      	adds	r5, #4
 800cb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb88:	68d9      	ldr	r1, [r3, #12]
 800cb8a:	2d80      	cmp	r5, #128	; 0x80
 800cb8c:	d1f7      	bne.n	800cb7e <_reclaim_reent+0xa2>
 800cb8e:	0020      	movs	r0, r4
 800cb90:	f7ff feee 	bl	800c970 <_free_r>
 800cb94:	e7af      	b.n	800caf6 <_reclaim_reent+0x1a>
 800cb96:	680e      	ldr	r6, [r1, #0]
 800cb98:	0020      	movs	r0, r4
 800cb9a:	f7ff fee9 	bl	800c970 <_free_r>
 800cb9e:	0031      	movs	r1, r6
 800cba0:	e7ee      	b.n	800cb80 <_reclaim_reent+0xa4>
 800cba2:	46c0      	nop			; (mov r8, r8)
 800cba4:	20000020 	.word	0x20000020

0800cba8 <_sbrk_r>:
 800cba8:	2300      	movs	r3, #0
 800cbaa:	b570      	push	{r4, r5, r6, lr}
 800cbac:	4d06      	ldr	r5, [pc, #24]	; (800cbc8 <_sbrk_r+0x20>)
 800cbae:	0004      	movs	r4, r0
 800cbb0:	0008      	movs	r0, r1
 800cbb2:	602b      	str	r3, [r5, #0]
 800cbb4:	f7f4 fde2 	bl	800177c <_sbrk>
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	d103      	bne.n	800cbc4 <_sbrk_r+0x1c>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d000      	beq.n	800cbc4 <_sbrk_r+0x1c>
 800cbc2:	6023      	str	r3, [r4, #0]
 800cbc4:	bd70      	pop	{r4, r5, r6, pc}
 800cbc6:	46c0      	nop			; (mov r8, r8)
 800cbc8:	20002ee8 	.word	0x20002ee8

0800cbcc <_raise_r>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	0004      	movs	r4, r0
 800cbd0:	000d      	movs	r5, r1
 800cbd2:	291f      	cmp	r1, #31
 800cbd4:	d904      	bls.n	800cbe0 <_raise_r+0x14>
 800cbd6:	2316      	movs	r3, #22
 800cbd8:	6003      	str	r3, [r0, #0]
 800cbda:	2001      	movs	r0, #1
 800cbdc:	4240      	negs	r0, r0
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d004      	beq.n	800cbf0 <_raise_r+0x24>
 800cbe6:	008a      	lsls	r2, r1, #2
 800cbe8:	189b      	adds	r3, r3, r2
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	2a00      	cmp	r2, #0
 800cbee:	d108      	bne.n	800cc02 <_raise_r+0x36>
 800cbf0:	0020      	movs	r0, r4
 800cbf2:	f000 f831 	bl	800cc58 <_getpid_r>
 800cbf6:	002a      	movs	r2, r5
 800cbf8:	0001      	movs	r1, r0
 800cbfa:	0020      	movs	r0, r4
 800cbfc:	f000 f81a 	bl	800cc34 <_kill_r>
 800cc00:	e7ed      	b.n	800cbde <_raise_r+0x12>
 800cc02:	2000      	movs	r0, #0
 800cc04:	2a01      	cmp	r2, #1
 800cc06:	d0ea      	beq.n	800cbde <_raise_r+0x12>
 800cc08:	1c51      	adds	r1, r2, #1
 800cc0a:	d103      	bne.n	800cc14 <_raise_r+0x48>
 800cc0c:	2316      	movs	r3, #22
 800cc0e:	3001      	adds	r0, #1
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	e7e4      	b.n	800cbde <_raise_r+0x12>
 800cc14:	2400      	movs	r4, #0
 800cc16:	0028      	movs	r0, r5
 800cc18:	601c      	str	r4, [r3, #0]
 800cc1a:	4790      	blx	r2
 800cc1c:	0020      	movs	r0, r4
 800cc1e:	e7de      	b.n	800cbde <_raise_r+0x12>

0800cc20 <raise>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4b03      	ldr	r3, [pc, #12]	; (800cc30 <raise+0x10>)
 800cc24:	0001      	movs	r1, r0
 800cc26:	6818      	ldr	r0, [r3, #0]
 800cc28:	f7ff ffd0 	bl	800cbcc <_raise_r>
 800cc2c:	bd10      	pop	{r4, pc}
 800cc2e:	46c0      	nop			; (mov r8, r8)
 800cc30:	20000020 	.word	0x20000020

0800cc34 <_kill_r>:
 800cc34:	2300      	movs	r3, #0
 800cc36:	b570      	push	{r4, r5, r6, lr}
 800cc38:	4d06      	ldr	r5, [pc, #24]	; (800cc54 <_kill_r+0x20>)
 800cc3a:	0004      	movs	r4, r0
 800cc3c:	0008      	movs	r0, r1
 800cc3e:	0011      	movs	r1, r2
 800cc40:	602b      	str	r3, [r5, #0]
 800cc42:	f7f4 fd7f 	bl	8001744 <_kill>
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	d103      	bne.n	800cc52 <_kill_r+0x1e>
 800cc4a:	682b      	ldr	r3, [r5, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d000      	beq.n	800cc52 <_kill_r+0x1e>
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	bd70      	pop	{r4, r5, r6, pc}
 800cc54:	20002ee8 	.word	0x20002ee8

0800cc58 <_getpid_r>:
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	f7f4 fd6d 	bl	8001738 <_getpid>
 800cc5e:	bd10      	pop	{r4, pc}

0800cc60 <_vsniprintf_r>:
 800cc60:	b530      	push	{r4, r5, lr}
 800cc62:	0014      	movs	r4, r2
 800cc64:	0005      	movs	r5, r0
 800cc66:	001a      	movs	r2, r3
 800cc68:	b09b      	sub	sp, #108	; 0x6c
 800cc6a:	2c00      	cmp	r4, #0
 800cc6c:	da05      	bge.n	800cc7a <_vsniprintf_r+0x1a>
 800cc6e:	238b      	movs	r3, #139	; 0x8b
 800cc70:	6003      	str	r3, [r0, #0]
 800cc72:	2001      	movs	r0, #1
 800cc74:	4240      	negs	r0, r0
 800cc76:	b01b      	add	sp, #108	; 0x6c
 800cc78:	bd30      	pop	{r4, r5, pc}
 800cc7a:	2382      	movs	r3, #130	; 0x82
 800cc7c:	4668      	mov	r0, sp
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	8183      	strh	r3, [r0, #12]
 800cc82:	2300      	movs	r3, #0
 800cc84:	9100      	str	r1, [sp, #0]
 800cc86:	9104      	str	r1, [sp, #16]
 800cc88:	429c      	cmp	r4, r3
 800cc8a:	d000      	beq.n	800cc8e <_vsniprintf_r+0x2e>
 800cc8c:	1e63      	subs	r3, r4, #1
 800cc8e:	9302      	str	r3, [sp, #8]
 800cc90:	9305      	str	r3, [sp, #20]
 800cc92:	2301      	movs	r3, #1
 800cc94:	4669      	mov	r1, sp
 800cc96:	425b      	negs	r3, r3
 800cc98:	81cb      	strh	r3, [r1, #14]
 800cc9a:	0028      	movs	r0, r5
 800cc9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cc9e:	f000 f889 	bl	800cdb4 <_svfiprintf_r>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	da01      	bge.n	800ccaa <_vsniprintf_r+0x4a>
 800cca6:	238b      	movs	r3, #139	; 0x8b
 800cca8:	602b      	str	r3, [r5, #0]
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	d0e3      	beq.n	800cc76 <_vsniprintf_r+0x16>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9a00      	ldr	r2, [sp, #0]
 800ccb2:	7013      	strb	r3, [r2, #0]
 800ccb4:	e7df      	b.n	800cc76 <_vsniprintf_r+0x16>
	...

0800ccb8 <vsniprintf>:
 800ccb8:	b507      	push	{r0, r1, r2, lr}
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	0013      	movs	r3, r2
 800ccbe:	000a      	movs	r2, r1
 800ccc0:	0001      	movs	r1, r0
 800ccc2:	4802      	ldr	r0, [pc, #8]	; (800cccc <vsniprintf+0x14>)
 800ccc4:	6800      	ldr	r0, [r0, #0]
 800ccc6:	f7ff ffcb 	bl	800cc60 <_vsniprintf_r>
 800ccca:	bd0e      	pop	{r1, r2, r3, pc}
 800cccc:	20000020 	.word	0x20000020

0800ccd0 <__malloc_lock>:
 800ccd0:	b510      	push	{r4, lr}
 800ccd2:	4802      	ldr	r0, [pc, #8]	; (800ccdc <__malloc_lock+0xc>)
 800ccd4:	f7ff fe06 	bl	800c8e4 <__retarget_lock_acquire_recursive>
 800ccd8:	bd10      	pop	{r4, pc}
 800ccda:	46c0      	nop			; (mov r8, r8)
 800ccdc:	20002ee0 	.word	0x20002ee0

0800cce0 <__malloc_unlock>:
 800cce0:	b510      	push	{r4, lr}
 800cce2:	4802      	ldr	r0, [pc, #8]	; (800ccec <__malloc_unlock+0xc>)
 800cce4:	f7ff fdff 	bl	800c8e6 <__retarget_lock_release_recursive>
 800cce8:	bd10      	pop	{r4, pc}
 800ccea:	46c0      	nop			; (mov r8, r8)
 800ccec:	20002ee0 	.word	0x20002ee0

0800ccf0 <__ssputs_r>:
 800ccf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccf2:	688e      	ldr	r6, [r1, #8]
 800ccf4:	b085      	sub	sp, #20
 800ccf6:	0007      	movs	r7, r0
 800ccf8:	000c      	movs	r4, r1
 800ccfa:	9203      	str	r2, [sp, #12]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	429e      	cmp	r6, r3
 800cd00:	d83c      	bhi.n	800cd7c <__ssputs_r+0x8c>
 800cd02:	2390      	movs	r3, #144	; 0x90
 800cd04:	898a      	ldrh	r2, [r1, #12]
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	421a      	tst	r2, r3
 800cd0a:	d034      	beq.n	800cd76 <__ssputs_r+0x86>
 800cd0c:	2503      	movs	r5, #3
 800cd0e:	6909      	ldr	r1, [r1, #16]
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	1a5b      	subs	r3, r3, r1
 800cd14:	9302      	str	r3, [sp, #8]
 800cd16:	6963      	ldr	r3, [r4, #20]
 800cd18:	9802      	ldr	r0, [sp, #8]
 800cd1a:	435d      	muls	r5, r3
 800cd1c:	0feb      	lsrs	r3, r5, #31
 800cd1e:	195d      	adds	r5, r3, r5
 800cd20:	9b01      	ldr	r3, [sp, #4]
 800cd22:	106d      	asrs	r5, r5, #1
 800cd24:	3301      	adds	r3, #1
 800cd26:	181b      	adds	r3, r3, r0
 800cd28:	42ab      	cmp	r3, r5
 800cd2a:	d900      	bls.n	800cd2e <__ssputs_r+0x3e>
 800cd2c:	001d      	movs	r5, r3
 800cd2e:	0553      	lsls	r3, r2, #21
 800cd30:	d532      	bpl.n	800cd98 <__ssputs_r+0xa8>
 800cd32:	0029      	movs	r1, r5
 800cd34:	0038      	movs	r0, r7
 800cd36:	f7ff fe65 	bl	800ca04 <_malloc_r>
 800cd3a:	1e06      	subs	r6, r0, #0
 800cd3c:	d109      	bne.n	800cd52 <__ssputs_r+0x62>
 800cd3e:	230c      	movs	r3, #12
 800cd40:	603b      	str	r3, [r7, #0]
 800cd42:	2340      	movs	r3, #64	; 0x40
 800cd44:	2001      	movs	r0, #1
 800cd46:	89a2      	ldrh	r2, [r4, #12]
 800cd48:	4240      	negs	r0, r0
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	81a3      	strh	r3, [r4, #12]
 800cd4e:	b005      	add	sp, #20
 800cd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd52:	9a02      	ldr	r2, [sp, #8]
 800cd54:	6921      	ldr	r1, [r4, #16]
 800cd56:	f7ff fde6 	bl	800c926 <memcpy>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	4a14      	ldr	r2, [pc, #80]	; (800cdb0 <__ssputs_r+0xc0>)
 800cd5e:	401a      	ands	r2, r3
 800cd60:	2380      	movs	r3, #128	; 0x80
 800cd62:	4313      	orrs	r3, r2
 800cd64:	81a3      	strh	r3, [r4, #12]
 800cd66:	9b02      	ldr	r3, [sp, #8]
 800cd68:	6126      	str	r6, [r4, #16]
 800cd6a:	18f6      	adds	r6, r6, r3
 800cd6c:	6026      	str	r6, [r4, #0]
 800cd6e:	6165      	str	r5, [r4, #20]
 800cd70:	9e01      	ldr	r6, [sp, #4]
 800cd72:	1aed      	subs	r5, r5, r3
 800cd74:	60a5      	str	r5, [r4, #8]
 800cd76:	9b01      	ldr	r3, [sp, #4]
 800cd78:	429e      	cmp	r6, r3
 800cd7a:	d900      	bls.n	800cd7e <__ssputs_r+0x8e>
 800cd7c:	9e01      	ldr	r6, [sp, #4]
 800cd7e:	0032      	movs	r2, r6
 800cd80:	9903      	ldr	r1, [sp, #12]
 800cd82:	6820      	ldr	r0, [r4, #0]
 800cd84:	f7ff fdd8 	bl	800c938 <memmove>
 800cd88:	68a3      	ldr	r3, [r4, #8]
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	1b9b      	subs	r3, r3, r6
 800cd8e:	60a3      	str	r3, [r4, #8]
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	199e      	adds	r6, r3, r6
 800cd94:	6026      	str	r6, [r4, #0]
 800cd96:	e7da      	b.n	800cd4e <__ssputs_r+0x5e>
 800cd98:	002a      	movs	r2, r5
 800cd9a:	0038      	movs	r0, r7
 800cd9c:	f000 fa8c 	bl	800d2b8 <_realloc_r>
 800cda0:	1e06      	subs	r6, r0, #0
 800cda2:	d1e0      	bne.n	800cd66 <__ssputs_r+0x76>
 800cda4:	0038      	movs	r0, r7
 800cda6:	6921      	ldr	r1, [r4, #16]
 800cda8:	f7ff fde2 	bl	800c970 <_free_r>
 800cdac:	e7c7      	b.n	800cd3e <__ssputs_r+0x4e>
 800cdae:	46c0      	nop			; (mov r8, r8)
 800cdb0:	fffffb7f 	.word	0xfffffb7f

0800cdb4 <_svfiprintf_r>:
 800cdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb6:	b0a1      	sub	sp, #132	; 0x84
 800cdb8:	9003      	str	r0, [sp, #12]
 800cdba:	001d      	movs	r5, r3
 800cdbc:	898b      	ldrh	r3, [r1, #12]
 800cdbe:	000f      	movs	r7, r1
 800cdc0:	0016      	movs	r6, r2
 800cdc2:	061b      	lsls	r3, r3, #24
 800cdc4:	d511      	bpl.n	800cdea <_svfiprintf_r+0x36>
 800cdc6:	690b      	ldr	r3, [r1, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10e      	bne.n	800cdea <_svfiprintf_r+0x36>
 800cdcc:	2140      	movs	r1, #64	; 0x40
 800cdce:	f7ff fe19 	bl	800ca04 <_malloc_r>
 800cdd2:	6038      	str	r0, [r7, #0]
 800cdd4:	6138      	str	r0, [r7, #16]
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d105      	bne.n	800cde6 <_svfiprintf_r+0x32>
 800cdda:	230c      	movs	r3, #12
 800cddc:	9a03      	ldr	r2, [sp, #12]
 800cdde:	3801      	subs	r0, #1
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	b021      	add	sp, #132	; 0x84
 800cde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cde6:	2340      	movs	r3, #64	; 0x40
 800cde8:	617b      	str	r3, [r7, #20]
 800cdea:	2300      	movs	r3, #0
 800cdec:	ac08      	add	r4, sp, #32
 800cdee:	6163      	str	r3, [r4, #20]
 800cdf0:	3320      	adds	r3, #32
 800cdf2:	7663      	strb	r3, [r4, #25]
 800cdf4:	3310      	adds	r3, #16
 800cdf6:	76a3      	strb	r3, [r4, #26]
 800cdf8:	9507      	str	r5, [sp, #28]
 800cdfa:	0035      	movs	r5, r6
 800cdfc:	782b      	ldrb	r3, [r5, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <_svfiprintf_r+0x52>
 800ce02:	2b25      	cmp	r3, #37	; 0x25
 800ce04:	d147      	bne.n	800ce96 <_svfiprintf_r+0xe2>
 800ce06:	1bab      	subs	r3, r5, r6
 800ce08:	9305      	str	r3, [sp, #20]
 800ce0a:	42b5      	cmp	r5, r6
 800ce0c:	d00c      	beq.n	800ce28 <_svfiprintf_r+0x74>
 800ce0e:	0032      	movs	r2, r6
 800ce10:	0039      	movs	r1, r7
 800ce12:	9803      	ldr	r0, [sp, #12]
 800ce14:	f7ff ff6c 	bl	800ccf0 <__ssputs_r>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d100      	bne.n	800ce1e <_svfiprintf_r+0x6a>
 800ce1c:	e0ae      	b.n	800cf7c <_svfiprintf_r+0x1c8>
 800ce1e:	6962      	ldr	r2, [r4, #20]
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	4694      	mov	ip, r2
 800ce24:	4463      	add	r3, ip
 800ce26:	6163      	str	r3, [r4, #20]
 800ce28:	782b      	ldrb	r3, [r5, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d100      	bne.n	800ce30 <_svfiprintf_r+0x7c>
 800ce2e:	e0a5      	b.n	800cf7c <_svfiprintf_r+0x1c8>
 800ce30:	2201      	movs	r2, #1
 800ce32:	2300      	movs	r3, #0
 800ce34:	4252      	negs	r2, r2
 800ce36:	6062      	str	r2, [r4, #4]
 800ce38:	a904      	add	r1, sp, #16
 800ce3a:	3254      	adds	r2, #84	; 0x54
 800ce3c:	1852      	adds	r2, r2, r1
 800ce3e:	1c6e      	adds	r6, r5, #1
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	60e3      	str	r3, [r4, #12]
 800ce44:	60a3      	str	r3, [r4, #8]
 800ce46:	7013      	strb	r3, [r2, #0]
 800ce48:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce4a:	2205      	movs	r2, #5
 800ce4c:	7831      	ldrb	r1, [r6, #0]
 800ce4e:	4854      	ldr	r0, [pc, #336]	; (800cfa0 <_svfiprintf_r+0x1ec>)
 800ce50:	f7ff fd5e 	bl	800c910 <memchr>
 800ce54:	1c75      	adds	r5, r6, #1
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d11f      	bne.n	800ce9a <_svfiprintf_r+0xe6>
 800ce5a:	6822      	ldr	r2, [r4, #0]
 800ce5c:	06d3      	lsls	r3, r2, #27
 800ce5e:	d504      	bpl.n	800ce6a <_svfiprintf_r+0xb6>
 800ce60:	2353      	movs	r3, #83	; 0x53
 800ce62:	a904      	add	r1, sp, #16
 800ce64:	185b      	adds	r3, r3, r1
 800ce66:	2120      	movs	r1, #32
 800ce68:	7019      	strb	r1, [r3, #0]
 800ce6a:	0713      	lsls	r3, r2, #28
 800ce6c:	d504      	bpl.n	800ce78 <_svfiprintf_r+0xc4>
 800ce6e:	2353      	movs	r3, #83	; 0x53
 800ce70:	a904      	add	r1, sp, #16
 800ce72:	185b      	adds	r3, r3, r1
 800ce74:	212b      	movs	r1, #43	; 0x2b
 800ce76:	7019      	strb	r1, [r3, #0]
 800ce78:	7833      	ldrb	r3, [r6, #0]
 800ce7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce7c:	d016      	beq.n	800ceac <_svfiprintf_r+0xf8>
 800ce7e:	0035      	movs	r5, r6
 800ce80:	2100      	movs	r1, #0
 800ce82:	200a      	movs	r0, #10
 800ce84:	68e3      	ldr	r3, [r4, #12]
 800ce86:	782a      	ldrb	r2, [r5, #0]
 800ce88:	1c6e      	adds	r6, r5, #1
 800ce8a:	3a30      	subs	r2, #48	; 0x30
 800ce8c:	2a09      	cmp	r2, #9
 800ce8e:	d94e      	bls.n	800cf2e <_svfiprintf_r+0x17a>
 800ce90:	2900      	cmp	r1, #0
 800ce92:	d111      	bne.n	800ceb8 <_svfiprintf_r+0x104>
 800ce94:	e017      	b.n	800cec6 <_svfiprintf_r+0x112>
 800ce96:	3501      	adds	r5, #1
 800ce98:	e7b0      	b.n	800cdfc <_svfiprintf_r+0x48>
 800ce9a:	4b41      	ldr	r3, [pc, #260]	; (800cfa0 <_svfiprintf_r+0x1ec>)
 800ce9c:	6822      	ldr	r2, [r4, #0]
 800ce9e:	1ac0      	subs	r0, r0, r3
 800cea0:	2301      	movs	r3, #1
 800cea2:	4083      	lsls	r3, r0
 800cea4:	4313      	orrs	r3, r2
 800cea6:	002e      	movs	r6, r5
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	e7ce      	b.n	800ce4a <_svfiprintf_r+0x96>
 800ceac:	9b07      	ldr	r3, [sp, #28]
 800ceae:	1d19      	adds	r1, r3, #4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	9107      	str	r1, [sp, #28]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	db01      	blt.n	800cebc <_svfiprintf_r+0x108>
 800ceb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ceba:	e004      	b.n	800cec6 <_svfiprintf_r+0x112>
 800cebc:	425b      	negs	r3, r3
 800cebe:	60e3      	str	r3, [r4, #12]
 800cec0:	2302      	movs	r3, #2
 800cec2:	4313      	orrs	r3, r2
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	782b      	ldrb	r3, [r5, #0]
 800cec8:	2b2e      	cmp	r3, #46	; 0x2e
 800ceca:	d10a      	bne.n	800cee2 <_svfiprintf_r+0x12e>
 800cecc:	786b      	ldrb	r3, [r5, #1]
 800cece:	2b2a      	cmp	r3, #42	; 0x2a
 800ced0:	d135      	bne.n	800cf3e <_svfiprintf_r+0x18a>
 800ced2:	9b07      	ldr	r3, [sp, #28]
 800ced4:	3502      	adds	r5, #2
 800ced6:	1d1a      	adds	r2, r3, #4
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	9207      	str	r2, [sp, #28]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	db2b      	blt.n	800cf38 <_svfiprintf_r+0x184>
 800cee0:	9309      	str	r3, [sp, #36]	; 0x24
 800cee2:	4e30      	ldr	r6, [pc, #192]	; (800cfa4 <_svfiprintf_r+0x1f0>)
 800cee4:	2203      	movs	r2, #3
 800cee6:	0030      	movs	r0, r6
 800cee8:	7829      	ldrb	r1, [r5, #0]
 800ceea:	f7ff fd11 	bl	800c910 <memchr>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d006      	beq.n	800cf00 <_svfiprintf_r+0x14c>
 800cef2:	2340      	movs	r3, #64	; 0x40
 800cef4:	1b80      	subs	r0, r0, r6
 800cef6:	4083      	lsls	r3, r0
 800cef8:	6822      	ldr	r2, [r4, #0]
 800cefa:	3501      	adds	r5, #1
 800cefc:	4313      	orrs	r3, r2
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	7829      	ldrb	r1, [r5, #0]
 800cf02:	2206      	movs	r2, #6
 800cf04:	4828      	ldr	r0, [pc, #160]	; (800cfa8 <_svfiprintf_r+0x1f4>)
 800cf06:	1c6e      	adds	r6, r5, #1
 800cf08:	7621      	strb	r1, [r4, #24]
 800cf0a:	f7ff fd01 	bl	800c910 <memchr>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d03c      	beq.n	800cf8c <_svfiprintf_r+0x1d8>
 800cf12:	4b26      	ldr	r3, [pc, #152]	; (800cfac <_svfiprintf_r+0x1f8>)
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d125      	bne.n	800cf64 <_svfiprintf_r+0x1b0>
 800cf18:	2207      	movs	r2, #7
 800cf1a:	9b07      	ldr	r3, [sp, #28]
 800cf1c:	3307      	adds	r3, #7
 800cf1e:	4393      	bics	r3, r2
 800cf20:	3308      	adds	r3, #8
 800cf22:	9307      	str	r3, [sp, #28]
 800cf24:	6963      	ldr	r3, [r4, #20]
 800cf26:	9a04      	ldr	r2, [sp, #16]
 800cf28:	189b      	adds	r3, r3, r2
 800cf2a:	6163      	str	r3, [r4, #20]
 800cf2c:	e765      	b.n	800cdfa <_svfiprintf_r+0x46>
 800cf2e:	4343      	muls	r3, r0
 800cf30:	0035      	movs	r5, r6
 800cf32:	2101      	movs	r1, #1
 800cf34:	189b      	adds	r3, r3, r2
 800cf36:	e7a6      	b.n	800ce86 <_svfiprintf_r+0xd2>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	425b      	negs	r3, r3
 800cf3c:	e7d0      	b.n	800cee0 <_svfiprintf_r+0x12c>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	200a      	movs	r0, #10
 800cf42:	001a      	movs	r2, r3
 800cf44:	3501      	adds	r5, #1
 800cf46:	6063      	str	r3, [r4, #4]
 800cf48:	7829      	ldrb	r1, [r5, #0]
 800cf4a:	1c6e      	adds	r6, r5, #1
 800cf4c:	3930      	subs	r1, #48	; 0x30
 800cf4e:	2909      	cmp	r1, #9
 800cf50:	d903      	bls.n	800cf5a <_svfiprintf_r+0x1a6>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d0c5      	beq.n	800cee2 <_svfiprintf_r+0x12e>
 800cf56:	9209      	str	r2, [sp, #36]	; 0x24
 800cf58:	e7c3      	b.n	800cee2 <_svfiprintf_r+0x12e>
 800cf5a:	4342      	muls	r2, r0
 800cf5c:	0035      	movs	r5, r6
 800cf5e:	2301      	movs	r3, #1
 800cf60:	1852      	adds	r2, r2, r1
 800cf62:	e7f1      	b.n	800cf48 <_svfiprintf_r+0x194>
 800cf64:	ab07      	add	r3, sp, #28
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	003a      	movs	r2, r7
 800cf6a:	0021      	movs	r1, r4
 800cf6c:	4b10      	ldr	r3, [pc, #64]	; (800cfb0 <_svfiprintf_r+0x1fc>)
 800cf6e:	9803      	ldr	r0, [sp, #12]
 800cf70:	e000      	b.n	800cf74 <_svfiprintf_r+0x1c0>
 800cf72:	bf00      	nop
 800cf74:	9004      	str	r0, [sp, #16]
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	d1d3      	bne.n	800cf24 <_svfiprintf_r+0x170>
 800cf7c:	89bb      	ldrh	r3, [r7, #12]
 800cf7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cf80:	065b      	lsls	r3, r3, #25
 800cf82:	d400      	bmi.n	800cf86 <_svfiprintf_r+0x1d2>
 800cf84:	e72d      	b.n	800cde2 <_svfiprintf_r+0x2e>
 800cf86:	2001      	movs	r0, #1
 800cf88:	4240      	negs	r0, r0
 800cf8a:	e72a      	b.n	800cde2 <_svfiprintf_r+0x2e>
 800cf8c:	ab07      	add	r3, sp, #28
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	003a      	movs	r2, r7
 800cf92:	0021      	movs	r1, r4
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <_svfiprintf_r+0x1fc>)
 800cf96:	9803      	ldr	r0, [sp, #12]
 800cf98:	f000 f87c 	bl	800d094 <_printf_i>
 800cf9c:	e7ea      	b.n	800cf74 <_svfiprintf_r+0x1c0>
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	0800dd94 	.word	0x0800dd94
 800cfa4:	0800dd9a 	.word	0x0800dd9a
 800cfa8:	0800dd9e 	.word	0x0800dd9e
 800cfac:	00000000 	.word	0x00000000
 800cfb0:	0800ccf1 	.word	0x0800ccf1

0800cfb4 <_printf_common>:
 800cfb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfb6:	0015      	movs	r5, r2
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	688a      	ldr	r2, [r1, #8]
 800cfbc:	690b      	ldr	r3, [r1, #16]
 800cfbe:	000c      	movs	r4, r1
 800cfc0:	9000      	str	r0, [sp, #0]
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	da00      	bge.n	800cfc8 <_printf_common+0x14>
 800cfc6:	0013      	movs	r3, r2
 800cfc8:	0022      	movs	r2, r4
 800cfca:	602b      	str	r3, [r5, #0]
 800cfcc:	3243      	adds	r2, #67	; 0x43
 800cfce:	7812      	ldrb	r2, [r2, #0]
 800cfd0:	2a00      	cmp	r2, #0
 800cfd2:	d001      	beq.n	800cfd8 <_printf_common+0x24>
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	069b      	lsls	r3, r3, #26
 800cfdc:	d502      	bpl.n	800cfe4 <_printf_common+0x30>
 800cfde:	682b      	ldr	r3, [r5, #0]
 800cfe0:	3302      	adds	r3, #2
 800cfe2:	602b      	str	r3, [r5, #0]
 800cfe4:	6822      	ldr	r2, [r4, #0]
 800cfe6:	2306      	movs	r3, #6
 800cfe8:	0017      	movs	r7, r2
 800cfea:	401f      	ands	r7, r3
 800cfec:	421a      	tst	r2, r3
 800cfee:	d027      	beq.n	800d040 <_printf_common+0x8c>
 800cff0:	0023      	movs	r3, r4
 800cff2:	3343      	adds	r3, #67	; 0x43
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	1e5a      	subs	r2, r3, #1
 800cff8:	4193      	sbcs	r3, r2
 800cffa:	6822      	ldr	r2, [r4, #0]
 800cffc:	0692      	lsls	r2, r2, #26
 800cffe:	d430      	bmi.n	800d062 <_printf_common+0xae>
 800d000:	0022      	movs	r2, r4
 800d002:	9901      	ldr	r1, [sp, #4]
 800d004:	9800      	ldr	r0, [sp, #0]
 800d006:	9e08      	ldr	r6, [sp, #32]
 800d008:	3243      	adds	r2, #67	; 0x43
 800d00a:	47b0      	blx	r6
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d025      	beq.n	800d05c <_printf_common+0xa8>
 800d010:	2306      	movs	r3, #6
 800d012:	6820      	ldr	r0, [r4, #0]
 800d014:	682a      	ldr	r2, [r5, #0]
 800d016:	68e1      	ldr	r1, [r4, #12]
 800d018:	2500      	movs	r5, #0
 800d01a:	4003      	ands	r3, r0
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d103      	bne.n	800d028 <_printf_common+0x74>
 800d020:	1a8d      	subs	r5, r1, r2
 800d022:	43eb      	mvns	r3, r5
 800d024:	17db      	asrs	r3, r3, #31
 800d026:	401d      	ands	r5, r3
 800d028:	68a3      	ldr	r3, [r4, #8]
 800d02a:	6922      	ldr	r2, [r4, #16]
 800d02c:	4293      	cmp	r3, r2
 800d02e:	dd01      	ble.n	800d034 <_printf_common+0x80>
 800d030:	1a9b      	subs	r3, r3, r2
 800d032:	18ed      	adds	r5, r5, r3
 800d034:	2700      	movs	r7, #0
 800d036:	42bd      	cmp	r5, r7
 800d038:	d120      	bne.n	800d07c <_printf_common+0xc8>
 800d03a:	2000      	movs	r0, #0
 800d03c:	e010      	b.n	800d060 <_printf_common+0xac>
 800d03e:	3701      	adds	r7, #1
 800d040:	68e3      	ldr	r3, [r4, #12]
 800d042:	682a      	ldr	r2, [r5, #0]
 800d044:	1a9b      	subs	r3, r3, r2
 800d046:	42bb      	cmp	r3, r7
 800d048:	ddd2      	ble.n	800cff0 <_printf_common+0x3c>
 800d04a:	0022      	movs	r2, r4
 800d04c:	2301      	movs	r3, #1
 800d04e:	9901      	ldr	r1, [sp, #4]
 800d050:	9800      	ldr	r0, [sp, #0]
 800d052:	9e08      	ldr	r6, [sp, #32]
 800d054:	3219      	adds	r2, #25
 800d056:	47b0      	blx	r6
 800d058:	1c43      	adds	r3, r0, #1
 800d05a:	d1f0      	bne.n	800d03e <_printf_common+0x8a>
 800d05c:	2001      	movs	r0, #1
 800d05e:	4240      	negs	r0, r0
 800d060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d062:	2030      	movs	r0, #48	; 0x30
 800d064:	18e1      	adds	r1, r4, r3
 800d066:	3143      	adds	r1, #67	; 0x43
 800d068:	7008      	strb	r0, [r1, #0]
 800d06a:	0021      	movs	r1, r4
 800d06c:	1c5a      	adds	r2, r3, #1
 800d06e:	3145      	adds	r1, #69	; 0x45
 800d070:	7809      	ldrb	r1, [r1, #0]
 800d072:	18a2      	adds	r2, r4, r2
 800d074:	3243      	adds	r2, #67	; 0x43
 800d076:	3302      	adds	r3, #2
 800d078:	7011      	strb	r1, [r2, #0]
 800d07a:	e7c1      	b.n	800d000 <_printf_common+0x4c>
 800d07c:	0022      	movs	r2, r4
 800d07e:	2301      	movs	r3, #1
 800d080:	9901      	ldr	r1, [sp, #4]
 800d082:	9800      	ldr	r0, [sp, #0]
 800d084:	9e08      	ldr	r6, [sp, #32]
 800d086:	321a      	adds	r2, #26
 800d088:	47b0      	blx	r6
 800d08a:	1c43      	adds	r3, r0, #1
 800d08c:	d0e6      	beq.n	800d05c <_printf_common+0xa8>
 800d08e:	3701      	adds	r7, #1
 800d090:	e7d1      	b.n	800d036 <_printf_common+0x82>
	...

0800d094 <_printf_i>:
 800d094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d096:	b08b      	sub	sp, #44	; 0x2c
 800d098:	9206      	str	r2, [sp, #24]
 800d09a:	000a      	movs	r2, r1
 800d09c:	3243      	adds	r2, #67	; 0x43
 800d09e:	9307      	str	r3, [sp, #28]
 800d0a0:	9005      	str	r0, [sp, #20]
 800d0a2:	9204      	str	r2, [sp, #16]
 800d0a4:	7e0a      	ldrb	r2, [r1, #24]
 800d0a6:	000c      	movs	r4, r1
 800d0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0aa:	2a78      	cmp	r2, #120	; 0x78
 800d0ac:	d806      	bhi.n	800d0bc <_printf_i+0x28>
 800d0ae:	2a62      	cmp	r2, #98	; 0x62
 800d0b0:	d808      	bhi.n	800d0c4 <_printf_i+0x30>
 800d0b2:	2a00      	cmp	r2, #0
 800d0b4:	d100      	bne.n	800d0b8 <_printf_i+0x24>
 800d0b6:	e0c0      	b.n	800d23a <_printf_i+0x1a6>
 800d0b8:	2a58      	cmp	r2, #88	; 0x58
 800d0ba:	d052      	beq.n	800d162 <_printf_i+0xce>
 800d0bc:	0026      	movs	r6, r4
 800d0be:	3642      	adds	r6, #66	; 0x42
 800d0c0:	7032      	strb	r2, [r6, #0]
 800d0c2:	e022      	b.n	800d10a <_printf_i+0x76>
 800d0c4:	0010      	movs	r0, r2
 800d0c6:	3863      	subs	r0, #99	; 0x63
 800d0c8:	2815      	cmp	r0, #21
 800d0ca:	d8f7      	bhi.n	800d0bc <_printf_i+0x28>
 800d0cc:	f7f3 f81c 	bl	8000108 <__gnu_thumb1_case_shi>
 800d0d0:	001f0016 	.word	0x001f0016
 800d0d4:	fff6fff6 	.word	0xfff6fff6
 800d0d8:	fff6fff6 	.word	0xfff6fff6
 800d0dc:	fff6001f 	.word	0xfff6001f
 800d0e0:	fff6fff6 	.word	0xfff6fff6
 800d0e4:	00a8fff6 	.word	0x00a8fff6
 800d0e8:	009a0036 	.word	0x009a0036
 800d0ec:	fff6fff6 	.word	0xfff6fff6
 800d0f0:	fff600b9 	.word	0xfff600b9
 800d0f4:	fff60036 	.word	0xfff60036
 800d0f8:	009efff6 	.word	0x009efff6
 800d0fc:	0026      	movs	r6, r4
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	3642      	adds	r6, #66	; 0x42
 800d102:	1d11      	adds	r1, r2, #4
 800d104:	6019      	str	r1, [r3, #0]
 800d106:	6813      	ldr	r3, [r2, #0]
 800d108:	7033      	strb	r3, [r6, #0]
 800d10a:	2301      	movs	r3, #1
 800d10c:	e0a7      	b.n	800d25e <_printf_i+0x1ca>
 800d10e:	6808      	ldr	r0, [r1, #0]
 800d110:	6819      	ldr	r1, [r3, #0]
 800d112:	1d0a      	adds	r2, r1, #4
 800d114:	0605      	lsls	r5, r0, #24
 800d116:	d50b      	bpl.n	800d130 <_printf_i+0x9c>
 800d118:	680d      	ldr	r5, [r1, #0]
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	2d00      	cmp	r5, #0
 800d11e:	da03      	bge.n	800d128 <_printf_i+0x94>
 800d120:	232d      	movs	r3, #45	; 0x2d
 800d122:	9a04      	ldr	r2, [sp, #16]
 800d124:	426d      	negs	r5, r5
 800d126:	7013      	strb	r3, [r2, #0]
 800d128:	4b61      	ldr	r3, [pc, #388]	; (800d2b0 <_printf_i+0x21c>)
 800d12a:	270a      	movs	r7, #10
 800d12c:	9303      	str	r3, [sp, #12]
 800d12e:	e032      	b.n	800d196 <_printf_i+0x102>
 800d130:	680d      	ldr	r5, [r1, #0]
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	0641      	lsls	r1, r0, #25
 800d136:	d5f1      	bpl.n	800d11c <_printf_i+0x88>
 800d138:	b22d      	sxth	r5, r5
 800d13a:	e7ef      	b.n	800d11c <_printf_i+0x88>
 800d13c:	680d      	ldr	r5, [r1, #0]
 800d13e:	6819      	ldr	r1, [r3, #0]
 800d140:	1d08      	adds	r0, r1, #4
 800d142:	6018      	str	r0, [r3, #0]
 800d144:	062e      	lsls	r6, r5, #24
 800d146:	d501      	bpl.n	800d14c <_printf_i+0xb8>
 800d148:	680d      	ldr	r5, [r1, #0]
 800d14a:	e003      	b.n	800d154 <_printf_i+0xc0>
 800d14c:	066d      	lsls	r5, r5, #25
 800d14e:	d5fb      	bpl.n	800d148 <_printf_i+0xb4>
 800d150:	680d      	ldr	r5, [r1, #0]
 800d152:	b2ad      	uxth	r5, r5
 800d154:	4b56      	ldr	r3, [pc, #344]	; (800d2b0 <_printf_i+0x21c>)
 800d156:	270a      	movs	r7, #10
 800d158:	9303      	str	r3, [sp, #12]
 800d15a:	2a6f      	cmp	r2, #111	; 0x6f
 800d15c:	d117      	bne.n	800d18e <_printf_i+0xfa>
 800d15e:	2708      	movs	r7, #8
 800d160:	e015      	b.n	800d18e <_printf_i+0xfa>
 800d162:	3145      	adds	r1, #69	; 0x45
 800d164:	700a      	strb	r2, [r1, #0]
 800d166:	4a52      	ldr	r2, [pc, #328]	; (800d2b0 <_printf_i+0x21c>)
 800d168:	9203      	str	r2, [sp, #12]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	6821      	ldr	r1, [r4, #0]
 800d16e:	ca20      	ldmia	r2!, {r5}
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	0608      	lsls	r0, r1, #24
 800d174:	d550      	bpl.n	800d218 <_printf_i+0x184>
 800d176:	07cb      	lsls	r3, r1, #31
 800d178:	d502      	bpl.n	800d180 <_printf_i+0xec>
 800d17a:	2320      	movs	r3, #32
 800d17c:	4319      	orrs	r1, r3
 800d17e:	6021      	str	r1, [r4, #0]
 800d180:	2710      	movs	r7, #16
 800d182:	2d00      	cmp	r5, #0
 800d184:	d103      	bne.n	800d18e <_printf_i+0xfa>
 800d186:	2320      	movs	r3, #32
 800d188:	6822      	ldr	r2, [r4, #0]
 800d18a:	439a      	bics	r2, r3
 800d18c:	6022      	str	r2, [r4, #0]
 800d18e:	0023      	movs	r3, r4
 800d190:	2200      	movs	r2, #0
 800d192:	3343      	adds	r3, #67	; 0x43
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	6863      	ldr	r3, [r4, #4]
 800d198:	60a3      	str	r3, [r4, #8]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	db03      	blt.n	800d1a6 <_printf_i+0x112>
 800d19e:	2204      	movs	r2, #4
 800d1a0:	6821      	ldr	r1, [r4, #0]
 800d1a2:	4391      	bics	r1, r2
 800d1a4:	6021      	str	r1, [r4, #0]
 800d1a6:	2d00      	cmp	r5, #0
 800d1a8:	d102      	bne.n	800d1b0 <_printf_i+0x11c>
 800d1aa:	9e04      	ldr	r6, [sp, #16]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00c      	beq.n	800d1ca <_printf_i+0x136>
 800d1b0:	9e04      	ldr	r6, [sp, #16]
 800d1b2:	0028      	movs	r0, r5
 800d1b4:	0039      	movs	r1, r7
 800d1b6:	f7f3 f837 	bl	8000228 <__aeabi_uidivmod>
 800d1ba:	9b03      	ldr	r3, [sp, #12]
 800d1bc:	3e01      	subs	r6, #1
 800d1be:	5c5b      	ldrb	r3, [r3, r1]
 800d1c0:	7033      	strb	r3, [r6, #0]
 800d1c2:	002b      	movs	r3, r5
 800d1c4:	0005      	movs	r5, r0
 800d1c6:	429f      	cmp	r7, r3
 800d1c8:	d9f3      	bls.n	800d1b2 <_printf_i+0x11e>
 800d1ca:	2f08      	cmp	r7, #8
 800d1cc:	d109      	bne.n	800d1e2 <_printf_i+0x14e>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	07db      	lsls	r3, r3, #31
 800d1d2:	d506      	bpl.n	800d1e2 <_printf_i+0x14e>
 800d1d4:	6863      	ldr	r3, [r4, #4]
 800d1d6:	6922      	ldr	r2, [r4, #16]
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	dc02      	bgt.n	800d1e2 <_printf_i+0x14e>
 800d1dc:	2330      	movs	r3, #48	; 0x30
 800d1de:	3e01      	subs	r6, #1
 800d1e0:	7033      	strb	r3, [r6, #0]
 800d1e2:	9b04      	ldr	r3, [sp, #16]
 800d1e4:	1b9b      	subs	r3, r3, r6
 800d1e6:	6123      	str	r3, [r4, #16]
 800d1e8:	9b07      	ldr	r3, [sp, #28]
 800d1ea:	0021      	movs	r1, r4
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	9805      	ldr	r0, [sp, #20]
 800d1f0:	9b06      	ldr	r3, [sp, #24]
 800d1f2:	aa09      	add	r2, sp, #36	; 0x24
 800d1f4:	f7ff fede 	bl	800cfb4 <_printf_common>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	d135      	bne.n	800d268 <_printf_i+0x1d4>
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	4240      	negs	r0, r0
 800d200:	b00b      	add	sp, #44	; 0x2c
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	2220      	movs	r2, #32
 800d206:	6809      	ldr	r1, [r1, #0]
 800d208:	430a      	orrs	r2, r1
 800d20a:	6022      	str	r2, [r4, #0]
 800d20c:	0022      	movs	r2, r4
 800d20e:	2178      	movs	r1, #120	; 0x78
 800d210:	3245      	adds	r2, #69	; 0x45
 800d212:	7011      	strb	r1, [r2, #0]
 800d214:	4a27      	ldr	r2, [pc, #156]	; (800d2b4 <_printf_i+0x220>)
 800d216:	e7a7      	b.n	800d168 <_printf_i+0xd4>
 800d218:	0648      	lsls	r0, r1, #25
 800d21a:	d5ac      	bpl.n	800d176 <_printf_i+0xe2>
 800d21c:	b2ad      	uxth	r5, r5
 800d21e:	e7aa      	b.n	800d176 <_printf_i+0xe2>
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	680d      	ldr	r5, [r1, #0]
 800d224:	1d10      	adds	r0, r2, #4
 800d226:	6949      	ldr	r1, [r1, #20]
 800d228:	6018      	str	r0, [r3, #0]
 800d22a:	6813      	ldr	r3, [r2, #0]
 800d22c:	062e      	lsls	r6, r5, #24
 800d22e:	d501      	bpl.n	800d234 <_printf_i+0x1a0>
 800d230:	6019      	str	r1, [r3, #0]
 800d232:	e002      	b.n	800d23a <_printf_i+0x1a6>
 800d234:	066d      	lsls	r5, r5, #25
 800d236:	d5fb      	bpl.n	800d230 <_printf_i+0x19c>
 800d238:	8019      	strh	r1, [r3, #0]
 800d23a:	2300      	movs	r3, #0
 800d23c:	9e04      	ldr	r6, [sp, #16]
 800d23e:	6123      	str	r3, [r4, #16]
 800d240:	e7d2      	b.n	800d1e8 <_printf_i+0x154>
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	1d11      	adds	r1, r2, #4
 800d246:	6019      	str	r1, [r3, #0]
 800d248:	6816      	ldr	r6, [r2, #0]
 800d24a:	2100      	movs	r1, #0
 800d24c:	0030      	movs	r0, r6
 800d24e:	6862      	ldr	r2, [r4, #4]
 800d250:	f7ff fb5e 	bl	800c910 <memchr>
 800d254:	2800      	cmp	r0, #0
 800d256:	d001      	beq.n	800d25c <_printf_i+0x1c8>
 800d258:	1b80      	subs	r0, r0, r6
 800d25a:	6060      	str	r0, [r4, #4]
 800d25c:	6863      	ldr	r3, [r4, #4]
 800d25e:	6123      	str	r3, [r4, #16]
 800d260:	2300      	movs	r3, #0
 800d262:	9a04      	ldr	r2, [sp, #16]
 800d264:	7013      	strb	r3, [r2, #0]
 800d266:	e7bf      	b.n	800d1e8 <_printf_i+0x154>
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	0032      	movs	r2, r6
 800d26c:	9906      	ldr	r1, [sp, #24]
 800d26e:	9805      	ldr	r0, [sp, #20]
 800d270:	9d07      	ldr	r5, [sp, #28]
 800d272:	47a8      	blx	r5
 800d274:	1c43      	adds	r3, r0, #1
 800d276:	d0c1      	beq.n	800d1fc <_printf_i+0x168>
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	079b      	lsls	r3, r3, #30
 800d27c:	d415      	bmi.n	800d2aa <_printf_i+0x216>
 800d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d280:	68e0      	ldr	r0, [r4, #12]
 800d282:	4298      	cmp	r0, r3
 800d284:	dabc      	bge.n	800d200 <_printf_i+0x16c>
 800d286:	0018      	movs	r0, r3
 800d288:	e7ba      	b.n	800d200 <_printf_i+0x16c>
 800d28a:	0022      	movs	r2, r4
 800d28c:	2301      	movs	r3, #1
 800d28e:	9906      	ldr	r1, [sp, #24]
 800d290:	9805      	ldr	r0, [sp, #20]
 800d292:	9e07      	ldr	r6, [sp, #28]
 800d294:	3219      	adds	r2, #25
 800d296:	47b0      	blx	r6
 800d298:	1c43      	adds	r3, r0, #1
 800d29a:	d0af      	beq.n	800d1fc <_printf_i+0x168>
 800d29c:	3501      	adds	r5, #1
 800d29e:	68e3      	ldr	r3, [r4, #12]
 800d2a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2a2:	1a9b      	subs	r3, r3, r2
 800d2a4:	42ab      	cmp	r3, r5
 800d2a6:	dcf0      	bgt.n	800d28a <_printf_i+0x1f6>
 800d2a8:	e7e9      	b.n	800d27e <_printf_i+0x1ea>
 800d2aa:	2500      	movs	r5, #0
 800d2ac:	e7f7      	b.n	800d29e <_printf_i+0x20a>
 800d2ae:	46c0      	nop			; (mov r8, r8)
 800d2b0:	0800dda5 	.word	0x0800dda5
 800d2b4:	0800ddb6 	.word	0x0800ddb6

0800d2b8 <_realloc_r>:
 800d2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ba:	0007      	movs	r7, r0
 800d2bc:	000d      	movs	r5, r1
 800d2be:	0016      	movs	r6, r2
 800d2c0:	2900      	cmp	r1, #0
 800d2c2:	d105      	bne.n	800d2d0 <_realloc_r+0x18>
 800d2c4:	0011      	movs	r1, r2
 800d2c6:	f7ff fb9d 	bl	800ca04 <_malloc_r>
 800d2ca:	0004      	movs	r4, r0
 800d2cc:	0020      	movs	r0, r4
 800d2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2d0:	2a00      	cmp	r2, #0
 800d2d2:	d103      	bne.n	800d2dc <_realloc_r+0x24>
 800d2d4:	f7ff fb4c 	bl	800c970 <_free_r>
 800d2d8:	0034      	movs	r4, r6
 800d2da:	e7f7      	b.n	800d2cc <_realloc_r+0x14>
 800d2dc:	f000 f812 	bl	800d304 <_malloc_usable_size_r>
 800d2e0:	002c      	movs	r4, r5
 800d2e2:	42b0      	cmp	r0, r6
 800d2e4:	d2f2      	bcs.n	800d2cc <_realloc_r+0x14>
 800d2e6:	0031      	movs	r1, r6
 800d2e8:	0038      	movs	r0, r7
 800d2ea:	f7ff fb8b 	bl	800ca04 <_malloc_r>
 800d2ee:	1e04      	subs	r4, r0, #0
 800d2f0:	d0ec      	beq.n	800d2cc <_realloc_r+0x14>
 800d2f2:	0029      	movs	r1, r5
 800d2f4:	0032      	movs	r2, r6
 800d2f6:	f7ff fb16 	bl	800c926 <memcpy>
 800d2fa:	0029      	movs	r1, r5
 800d2fc:	0038      	movs	r0, r7
 800d2fe:	f7ff fb37 	bl	800c970 <_free_r>
 800d302:	e7e3      	b.n	800d2cc <_realloc_r+0x14>

0800d304 <_malloc_usable_size_r>:
 800d304:	1f0b      	subs	r3, r1, #4
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	1f18      	subs	r0, r3, #4
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	da01      	bge.n	800d312 <_malloc_usable_size_r+0xe>
 800d30e:	580b      	ldr	r3, [r1, r0]
 800d310:	18c0      	adds	r0, r0, r3
 800d312:	4770      	bx	lr

0800d314 <_init>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	46c0      	nop			; (mov r8, r8)
 800d318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d31a:	bc08      	pop	{r3}
 800d31c:	469e      	mov	lr, r3
 800d31e:	4770      	bx	lr

0800d320 <_fini>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	46c0      	nop			; (mov r8, r8)
 800d324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d326:	bc08      	pop	{r3}
 800d328:	469e      	mov	lr, r3
 800d32a:	4770      	bx	lr
