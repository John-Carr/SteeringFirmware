
SteeringFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8ac  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d96c  0800d96c  0001d96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3dc  0800e3dc  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3dc  0800e3dc  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3dc  0800e3dc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e3dc  0800e3dc  0001e3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e3e4  0800e3e4  0001e3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e3ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031ac  20000094  0800e480  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003240  0800e480  00023240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048067  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008892  00000000  00000000  00068123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002298  00000000  00000000  000709b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002020  00000000  00000000  00072c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d4c  00000000  00000000  00074c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027873  00000000  00000000  000989bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c08f8  00000000  00000000  000c022f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00180b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ae0  00000000  00000000  00180b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d954 	.word	0x0800d954

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	0800d954 	.word	0x0800d954

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_f2uiz>:
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	b510      	push	{r4, lr}
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	1c04      	adds	r4, r0, #0
 800023c:	f000 fc8c 	bl	8000b58 <__aeabi_fcmpge>
 8000240:	2800      	cmp	r0, #0
 8000242:	d103      	bne.n	800024c <__aeabi_f2uiz+0x18>
 8000244:	1c20      	adds	r0, r4, #0
 8000246:	f000 fbfb 	bl	8000a40 <__aeabi_f2iz>
 800024a:	bd10      	pop	{r4, pc}
 800024c:	219e      	movs	r1, #158	; 0x9e
 800024e:	1c20      	adds	r0, r4, #0
 8000250:	05c9      	lsls	r1, r1, #23
 8000252:	f000 fa2d 	bl	80006b0 <__aeabi_fsub>
 8000256:	f000 fbf3 	bl	8000a40 <__aeabi_f2iz>
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	061b      	lsls	r3, r3, #24
 800025e:	469c      	mov	ip, r3
 8000260:	4460      	add	r0, ip
 8000262:	e7f2      	b.n	800024a <__aeabi_f2uiz+0x16>

08000264 <__aeabi_fdiv>:
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000266:	464f      	mov	r7, r9
 8000268:	4646      	mov	r6, r8
 800026a:	46d6      	mov	lr, sl
 800026c:	0245      	lsls	r5, r0, #9
 800026e:	b5c0      	push	{r6, r7, lr}
 8000270:	0047      	lsls	r7, r0, #1
 8000272:	1c0c      	adds	r4, r1, #0
 8000274:	0a6d      	lsrs	r5, r5, #9
 8000276:	0e3f      	lsrs	r7, r7, #24
 8000278:	0fc6      	lsrs	r6, r0, #31
 800027a:	2f00      	cmp	r7, #0
 800027c:	d066      	beq.n	800034c <__aeabi_fdiv+0xe8>
 800027e:	2fff      	cmp	r7, #255	; 0xff
 8000280:	d06c      	beq.n	800035c <__aeabi_fdiv+0xf8>
 8000282:	2300      	movs	r3, #0
 8000284:	00ea      	lsls	r2, r5, #3
 8000286:	2580      	movs	r5, #128	; 0x80
 8000288:	4699      	mov	r9, r3
 800028a:	469a      	mov	sl, r3
 800028c:	04ed      	lsls	r5, r5, #19
 800028e:	4315      	orrs	r5, r2
 8000290:	3f7f      	subs	r7, #127	; 0x7f
 8000292:	0260      	lsls	r0, r4, #9
 8000294:	0061      	lsls	r1, r4, #1
 8000296:	0a43      	lsrs	r3, r0, #9
 8000298:	4698      	mov	r8, r3
 800029a:	0e09      	lsrs	r1, r1, #24
 800029c:	0fe4      	lsrs	r4, r4, #31
 800029e:	2900      	cmp	r1, #0
 80002a0:	d048      	beq.n	8000334 <__aeabi_fdiv+0xd0>
 80002a2:	29ff      	cmp	r1, #255	; 0xff
 80002a4:	d010      	beq.n	80002c8 <__aeabi_fdiv+0x64>
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	00d8      	lsls	r0, r3, #3
 80002aa:	04d2      	lsls	r2, r2, #19
 80002ac:	4302      	orrs	r2, r0
 80002ae:	4690      	mov	r8, r2
 80002b0:	2000      	movs	r0, #0
 80002b2:	397f      	subs	r1, #127	; 0x7f
 80002b4:	464a      	mov	r2, r9
 80002b6:	0033      	movs	r3, r6
 80002b8:	1a7f      	subs	r7, r7, r1
 80002ba:	4302      	orrs	r2, r0
 80002bc:	496c      	ldr	r1, [pc, #432]	; (8000470 <__aeabi_fdiv+0x20c>)
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	588a      	ldr	r2, [r1, r2]
 80002c2:	4063      	eors	r3, r4
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4697      	mov	pc, r2
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d16d      	bne.n	80003a8 <__aeabi_fdiv+0x144>
 80002cc:	2002      	movs	r0, #2
 80002ce:	3fff      	subs	r7, #255	; 0xff
 80002d0:	e033      	b.n	800033a <__aeabi_fdiv+0xd6>
 80002d2:	2300      	movs	r3, #0
 80002d4:	4698      	mov	r8, r3
 80002d6:	0026      	movs	r6, r4
 80002d8:	4645      	mov	r5, r8
 80002da:	4682      	mov	sl, r0
 80002dc:	4653      	mov	r3, sl
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fdiv+0x80>
 80002e2:	e07f      	b.n	80003e4 <__aeabi_fdiv+0x180>
 80002e4:	2b03      	cmp	r3, #3
 80002e6:	d100      	bne.n	80002ea <__aeabi_fdiv+0x86>
 80002e8:	e094      	b.n	8000414 <__aeabi_fdiv+0x1b0>
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d017      	beq.n	800031e <__aeabi_fdiv+0xba>
 80002ee:	0038      	movs	r0, r7
 80002f0:	307f      	adds	r0, #127	; 0x7f
 80002f2:	2800      	cmp	r0, #0
 80002f4:	dd5f      	ble.n	80003b6 <__aeabi_fdiv+0x152>
 80002f6:	076b      	lsls	r3, r5, #29
 80002f8:	d004      	beq.n	8000304 <__aeabi_fdiv+0xa0>
 80002fa:	230f      	movs	r3, #15
 80002fc:	402b      	ands	r3, r5
 80002fe:	2b04      	cmp	r3, #4
 8000300:	d000      	beq.n	8000304 <__aeabi_fdiv+0xa0>
 8000302:	3504      	adds	r5, #4
 8000304:	012b      	lsls	r3, r5, #4
 8000306:	d503      	bpl.n	8000310 <__aeabi_fdiv+0xac>
 8000308:	0038      	movs	r0, r7
 800030a:	4b5a      	ldr	r3, [pc, #360]	; (8000474 <__aeabi_fdiv+0x210>)
 800030c:	3080      	adds	r0, #128	; 0x80
 800030e:	401d      	ands	r5, r3
 8000310:	28fe      	cmp	r0, #254	; 0xfe
 8000312:	dc67      	bgt.n	80003e4 <__aeabi_fdiv+0x180>
 8000314:	01ad      	lsls	r5, r5, #6
 8000316:	0a6d      	lsrs	r5, r5, #9
 8000318:	b2c0      	uxtb	r0, r0
 800031a:	e002      	b.n	8000322 <__aeabi_fdiv+0xbe>
 800031c:	001e      	movs	r6, r3
 800031e:	2000      	movs	r0, #0
 8000320:	2500      	movs	r5, #0
 8000322:	05c0      	lsls	r0, r0, #23
 8000324:	4328      	orrs	r0, r5
 8000326:	07f6      	lsls	r6, r6, #31
 8000328:	4330      	orrs	r0, r6
 800032a:	bce0      	pop	{r5, r6, r7}
 800032c:	46ba      	mov	sl, r7
 800032e:	46b1      	mov	r9, r6
 8000330:	46a8      	mov	r8, r5
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	2b00      	cmp	r3, #0
 8000336:	d12b      	bne.n	8000390 <__aeabi_fdiv+0x12c>
 8000338:	2001      	movs	r0, #1
 800033a:	464a      	mov	r2, r9
 800033c:	0033      	movs	r3, r6
 800033e:	494e      	ldr	r1, [pc, #312]	; (8000478 <__aeabi_fdiv+0x214>)
 8000340:	4302      	orrs	r2, r0
 8000342:	0092      	lsls	r2, r2, #2
 8000344:	588a      	ldr	r2, [r1, r2]
 8000346:	4063      	eors	r3, r4
 8000348:	b2db      	uxtb	r3, r3
 800034a:	4697      	mov	pc, r2
 800034c:	2d00      	cmp	r5, #0
 800034e:	d113      	bne.n	8000378 <__aeabi_fdiv+0x114>
 8000350:	2304      	movs	r3, #4
 8000352:	4699      	mov	r9, r3
 8000354:	3b03      	subs	r3, #3
 8000356:	2700      	movs	r7, #0
 8000358:	469a      	mov	sl, r3
 800035a:	e79a      	b.n	8000292 <__aeabi_fdiv+0x2e>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d105      	bne.n	800036c <__aeabi_fdiv+0x108>
 8000360:	2308      	movs	r3, #8
 8000362:	4699      	mov	r9, r3
 8000364:	3b06      	subs	r3, #6
 8000366:	27ff      	movs	r7, #255	; 0xff
 8000368:	469a      	mov	sl, r3
 800036a:	e792      	b.n	8000292 <__aeabi_fdiv+0x2e>
 800036c:	230c      	movs	r3, #12
 800036e:	4699      	mov	r9, r3
 8000370:	3b09      	subs	r3, #9
 8000372:	27ff      	movs	r7, #255	; 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e78c      	b.n	8000292 <__aeabi_fdiv+0x2e>
 8000378:	0028      	movs	r0, r5
 800037a:	f000 fbf7 	bl	8000b6c <__clzsi2>
 800037e:	2776      	movs	r7, #118	; 0x76
 8000380:	1f43      	subs	r3, r0, #5
 8000382:	409d      	lsls	r5, r3
 8000384:	2300      	movs	r3, #0
 8000386:	427f      	negs	r7, r7
 8000388:	4699      	mov	r9, r3
 800038a:	469a      	mov	sl, r3
 800038c:	1a3f      	subs	r7, r7, r0
 800038e:	e780      	b.n	8000292 <__aeabi_fdiv+0x2e>
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fbeb 	bl	8000b6c <__clzsi2>
 8000396:	4642      	mov	r2, r8
 8000398:	1f43      	subs	r3, r0, #5
 800039a:	2176      	movs	r1, #118	; 0x76
 800039c:	409a      	lsls	r2, r3
 800039e:	4249      	negs	r1, r1
 80003a0:	1a09      	subs	r1, r1, r0
 80003a2:	4690      	mov	r8, r2
 80003a4:	2000      	movs	r0, #0
 80003a6:	e785      	b.n	80002b4 <__aeabi_fdiv+0x50>
 80003a8:	21ff      	movs	r1, #255	; 0xff
 80003aa:	2003      	movs	r0, #3
 80003ac:	e782      	b.n	80002b4 <__aeabi_fdiv+0x50>
 80003ae:	001e      	movs	r6, r3
 80003b0:	20ff      	movs	r0, #255	; 0xff
 80003b2:	2500      	movs	r5, #0
 80003b4:	e7b5      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003b6:	2301      	movs	r3, #1
 80003b8:	1a1b      	subs	r3, r3, r0
 80003ba:	2b1b      	cmp	r3, #27
 80003bc:	dcaf      	bgt.n	800031e <__aeabi_fdiv+0xba>
 80003be:	379e      	adds	r7, #158	; 0x9e
 80003c0:	0029      	movs	r1, r5
 80003c2:	40bd      	lsls	r5, r7
 80003c4:	40d9      	lsrs	r1, r3
 80003c6:	1e6a      	subs	r2, r5, #1
 80003c8:	4195      	sbcs	r5, r2
 80003ca:	430d      	orrs	r5, r1
 80003cc:	076b      	lsls	r3, r5, #29
 80003ce:	d004      	beq.n	80003da <__aeabi_fdiv+0x176>
 80003d0:	230f      	movs	r3, #15
 80003d2:	402b      	ands	r3, r5
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	d000      	beq.n	80003da <__aeabi_fdiv+0x176>
 80003d8:	3504      	adds	r5, #4
 80003da:	016b      	lsls	r3, r5, #5
 80003dc:	d544      	bpl.n	8000468 <__aeabi_fdiv+0x204>
 80003de:	2001      	movs	r0, #1
 80003e0:	2500      	movs	r5, #0
 80003e2:	e79e      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	2500      	movs	r5, #0
 80003e8:	e79b      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003ea:	2580      	movs	r5, #128	; 0x80
 80003ec:	2600      	movs	r6, #0
 80003ee:	20ff      	movs	r0, #255	; 0xff
 80003f0:	03ed      	lsls	r5, r5, #15
 80003f2:	e796      	b.n	8000322 <__aeabi_fdiv+0xbe>
 80003f4:	2300      	movs	r3, #0
 80003f6:	4698      	mov	r8, r3
 80003f8:	2080      	movs	r0, #128	; 0x80
 80003fa:	03c0      	lsls	r0, r0, #15
 80003fc:	4205      	tst	r5, r0
 80003fe:	d009      	beq.n	8000414 <__aeabi_fdiv+0x1b0>
 8000400:	4643      	mov	r3, r8
 8000402:	4203      	tst	r3, r0
 8000404:	d106      	bne.n	8000414 <__aeabi_fdiv+0x1b0>
 8000406:	4645      	mov	r5, r8
 8000408:	4305      	orrs	r5, r0
 800040a:	026d      	lsls	r5, r5, #9
 800040c:	0026      	movs	r6, r4
 800040e:	20ff      	movs	r0, #255	; 0xff
 8000410:	0a6d      	lsrs	r5, r5, #9
 8000412:	e786      	b.n	8000322 <__aeabi_fdiv+0xbe>
 8000414:	2080      	movs	r0, #128	; 0x80
 8000416:	03c0      	lsls	r0, r0, #15
 8000418:	4305      	orrs	r5, r0
 800041a:	026d      	lsls	r5, r5, #9
 800041c:	20ff      	movs	r0, #255	; 0xff
 800041e:	0a6d      	lsrs	r5, r5, #9
 8000420:	e77f      	b.n	8000322 <__aeabi_fdiv+0xbe>
 8000422:	4641      	mov	r1, r8
 8000424:	016a      	lsls	r2, r5, #5
 8000426:	0148      	lsls	r0, r1, #5
 8000428:	4282      	cmp	r2, r0
 800042a:	d219      	bcs.n	8000460 <__aeabi_fdiv+0x1fc>
 800042c:	211b      	movs	r1, #27
 800042e:	2500      	movs	r5, #0
 8000430:	3f01      	subs	r7, #1
 8000432:	2601      	movs	r6, #1
 8000434:	0014      	movs	r4, r2
 8000436:	006d      	lsls	r5, r5, #1
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	2c00      	cmp	r4, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_fdiv+0x1de>
 800043e:	4290      	cmp	r0, r2
 8000440:	d801      	bhi.n	8000446 <__aeabi_fdiv+0x1e2>
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	4335      	orrs	r5, r6
 8000446:	3901      	subs	r1, #1
 8000448:	2900      	cmp	r1, #0
 800044a:	d1f3      	bne.n	8000434 <__aeabi_fdiv+0x1d0>
 800044c:	1e50      	subs	r0, r2, #1
 800044e:	4182      	sbcs	r2, r0
 8000450:	0038      	movs	r0, r7
 8000452:	307f      	adds	r0, #127	; 0x7f
 8000454:	001e      	movs	r6, r3
 8000456:	4315      	orrs	r5, r2
 8000458:	2800      	cmp	r0, #0
 800045a:	dd00      	ble.n	800045e <__aeabi_fdiv+0x1fa>
 800045c:	e74b      	b.n	80002f6 <__aeabi_fdiv+0x92>
 800045e:	e7aa      	b.n	80003b6 <__aeabi_fdiv+0x152>
 8000460:	211a      	movs	r1, #26
 8000462:	2501      	movs	r5, #1
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	e7e4      	b.n	8000432 <__aeabi_fdiv+0x1ce>
 8000468:	01ad      	lsls	r5, r5, #6
 800046a:	2000      	movs	r0, #0
 800046c:	0a6d      	lsrs	r5, r5, #9
 800046e:	e758      	b.n	8000322 <__aeabi_fdiv+0xbe>
 8000470:	0800db04 	.word	0x0800db04
 8000474:	f7ffffff 	.word	0xf7ffffff
 8000478:	0800db44 	.word	0x0800db44

0800047c <__aeabi_fmul>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	4657      	mov	r7, sl
 8000480:	464e      	mov	r6, r9
 8000482:	4645      	mov	r5, r8
 8000484:	46de      	mov	lr, fp
 8000486:	0244      	lsls	r4, r0, #9
 8000488:	b5e0      	push	{r5, r6, r7, lr}
 800048a:	0045      	lsls	r5, r0, #1
 800048c:	1c0f      	adds	r7, r1, #0
 800048e:	0a64      	lsrs	r4, r4, #9
 8000490:	0e2d      	lsrs	r5, r5, #24
 8000492:	0fc6      	lsrs	r6, r0, #31
 8000494:	2d00      	cmp	r5, #0
 8000496:	d047      	beq.n	8000528 <__aeabi_fmul+0xac>
 8000498:	2dff      	cmp	r5, #255	; 0xff
 800049a:	d04d      	beq.n	8000538 <__aeabi_fmul+0xbc>
 800049c:	2300      	movs	r3, #0
 800049e:	2080      	movs	r0, #128	; 0x80
 80004a0:	469a      	mov	sl, r3
 80004a2:	469b      	mov	fp, r3
 80004a4:	00e4      	lsls	r4, r4, #3
 80004a6:	04c0      	lsls	r0, r0, #19
 80004a8:	4304      	orrs	r4, r0
 80004aa:	3d7f      	subs	r5, #127	; 0x7f
 80004ac:	0278      	lsls	r0, r7, #9
 80004ae:	0a43      	lsrs	r3, r0, #9
 80004b0:	4699      	mov	r9, r3
 80004b2:	007a      	lsls	r2, r7, #1
 80004b4:	0ffb      	lsrs	r3, r7, #31
 80004b6:	4698      	mov	r8, r3
 80004b8:	0e12      	lsrs	r2, r2, #24
 80004ba:	464b      	mov	r3, r9
 80004bc:	d044      	beq.n	8000548 <__aeabi_fmul+0xcc>
 80004be:	2aff      	cmp	r2, #255	; 0xff
 80004c0:	d011      	beq.n	80004e6 <__aeabi_fmul+0x6a>
 80004c2:	00d8      	lsls	r0, r3, #3
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	04db      	lsls	r3, r3, #19
 80004c8:	4303      	orrs	r3, r0
 80004ca:	4699      	mov	r9, r3
 80004cc:	2000      	movs	r0, #0
 80004ce:	3a7f      	subs	r2, #127	; 0x7f
 80004d0:	18ad      	adds	r5, r5, r2
 80004d2:	4647      	mov	r7, r8
 80004d4:	4653      	mov	r3, sl
 80004d6:	4077      	eors	r7, r6
 80004d8:	1c69      	adds	r1, r5, #1
 80004da:	2b0f      	cmp	r3, #15
 80004dc:	d83f      	bhi.n	800055e <__aeabi_fmul+0xe2>
 80004de:	4a72      	ldr	r2, [pc, #456]	; (80006a8 <__aeabi_fmul+0x22c>)
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	58d3      	ldr	r3, [r2, r3]
 80004e4:	469f      	mov	pc, r3
 80004e6:	35ff      	adds	r5, #255	; 0xff
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_fmul+0x72>
 80004ec:	e079      	b.n	80005e2 <__aeabi_fmul+0x166>
 80004ee:	4652      	mov	r2, sl
 80004f0:	2302      	movs	r3, #2
 80004f2:	431a      	orrs	r2, r3
 80004f4:	4692      	mov	sl, r2
 80004f6:	2002      	movs	r0, #2
 80004f8:	e7eb      	b.n	80004d2 <__aeabi_fmul+0x56>
 80004fa:	4647      	mov	r7, r8
 80004fc:	464c      	mov	r4, r9
 80004fe:	4683      	mov	fp, r0
 8000500:	465b      	mov	r3, fp
 8000502:	2b02      	cmp	r3, #2
 8000504:	d028      	beq.n	8000558 <__aeabi_fmul+0xdc>
 8000506:	2b03      	cmp	r3, #3
 8000508:	d100      	bne.n	800050c <__aeabi_fmul+0x90>
 800050a:	e0c6      	b.n	800069a <__aeabi_fmul+0x21e>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d14f      	bne.n	80005b0 <__aeabi_fmul+0x134>
 8000510:	2000      	movs	r0, #0
 8000512:	2400      	movs	r4, #0
 8000514:	05c0      	lsls	r0, r0, #23
 8000516:	07ff      	lsls	r7, r7, #31
 8000518:	4320      	orrs	r0, r4
 800051a:	4338      	orrs	r0, r7
 800051c:	bcf0      	pop	{r4, r5, r6, r7}
 800051e:	46bb      	mov	fp, r7
 8000520:	46b2      	mov	sl, r6
 8000522:	46a9      	mov	r9, r5
 8000524:	46a0      	mov	r8, r4
 8000526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000528:	2c00      	cmp	r4, #0
 800052a:	d171      	bne.n	8000610 <__aeabi_fmul+0x194>
 800052c:	2304      	movs	r3, #4
 800052e:	469a      	mov	sl, r3
 8000530:	3b03      	subs	r3, #3
 8000532:	2500      	movs	r5, #0
 8000534:	469b      	mov	fp, r3
 8000536:	e7b9      	b.n	80004ac <__aeabi_fmul+0x30>
 8000538:	2c00      	cmp	r4, #0
 800053a:	d163      	bne.n	8000604 <__aeabi_fmul+0x188>
 800053c:	2308      	movs	r3, #8
 800053e:	469a      	mov	sl, r3
 8000540:	3b06      	subs	r3, #6
 8000542:	25ff      	movs	r5, #255	; 0xff
 8000544:	469b      	mov	fp, r3
 8000546:	e7b1      	b.n	80004ac <__aeabi_fmul+0x30>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d150      	bne.n	80005ee <__aeabi_fmul+0x172>
 800054c:	4652      	mov	r2, sl
 800054e:	3301      	adds	r3, #1
 8000550:	431a      	orrs	r2, r3
 8000552:	4692      	mov	sl, r2
 8000554:	2001      	movs	r0, #1
 8000556:	e7bc      	b.n	80004d2 <__aeabi_fmul+0x56>
 8000558:	20ff      	movs	r0, #255	; 0xff
 800055a:	2400      	movs	r4, #0
 800055c:	e7da      	b.n	8000514 <__aeabi_fmul+0x98>
 800055e:	4648      	mov	r0, r9
 8000560:	0c26      	lsrs	r6, r4, #16
 8000562:	0424      	lsls	r4, r4, #16
 8000564:	0c22      	lsrs	r2, r4, #16
 8000566:	0404      	lsls	r4, r0, #16
 8000568:	0c24      	lsrs	r4, r4, #16
 800056a:	464b      	mov	r3, r9
 800056c:	0020      	movs	r0, r4
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	4350      	muls	r0, r2
 8000572:	4374      	muls	r4, r6
 8000574:	435a      	muls	r2, r3
 8000576:	435e      	muls	r6, r3
 8000578:	1912      	adds	r2, r2, r4
 800057a:	0c03      	lsrs	r3, r0, #16
 800057c:	189b      	adds	r3, r3, r2
 800057e:	429c      	cmp	r4, r3
 8000580:	d903      	bls.n	800058a <__aeabi_fmul+0x10e>
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0252      	lsls	r2, r2, #9
 8000586:	4694      	mov	ip, r2
 8000588:	4466      	add	r6, ip
 800058a:	0400      	lsls	r0, r0, #16
 800058c:	041a      	lsls	r2, r3, #16
 800058e:	0c00      	lsrs	r0, r0, #16
 8000590:	1812      	adds	r2, r2, r0
 8000592:	0194      	lsls	r4, r2, #6
 8000594:	1e60      	subs	r0, r4, #1
 8000596:	4184      	sbcs	r4, r0
 8000598:	0c1b      	lsrs	r3, r3, #16
 800059a:	0e92      	lsrs	r2, r2, #26
 800059c:	199b      	adds	r3, r3, r6
 800059e:	4314      	orrs	r4, r2
 80005a0:	019b      	lsls	r3, r3, #6
 80005a2:	431c      	orrs	r4, r3
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	d572      	bpl.n	800068e <__aeabi_fmul+0x212>
 80005a8:	2001      	movs	r0, #1
 80005aa:	0863      	lsrs	r3, r4, #1
 80005ac:	4004      	ands	r4, r0
 80005ae:	431c      	orrs	r4, r3
 80005b0:	0008      	movs	r0, r1
 80005b2:	307f      	adds	r0, #127	; 0x7f
 80005b4:	2800      	cmp	r0, #0
 80005b6:	dd3c      	ble.n	8000632 <__aeabi_fmul+0x1b6>
 80005b8:	0763      	lsls	r3, r4, #29
 80005ba:	d004      	beq.n	80005c6 <__aeabi_fmul+0x14a>
 80005bc:	230f      	movs	r3, #15
 80005be:	4023      	ands	r3, r4
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fmul+0x14a>
 80005c4:	3404      	adds	r4, #4
 80005c6:	0123      	lsls	r3, r4, #4
 80005c8:	d503      	bpl.n	80005d2 <__aeabi_fmul+0x156>
 80005ca:	3180      	adds	r1, #128	; 0x80
 80005cc:	0008      	movs	r0, r1
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <__aeabi_fmul+0x230>)
 80005d0:	401c      	ands	r4, r3
 80005d2:	28fe      	cmp	r0, #254	; 0xfe
 80005d4:	dcc0      	bgt.n	8000558 <__aeabi_fmul+0xdc>
 80005d6:	01a4      	lsls	r4, r4, #6
 80005d8:	0a64      	lsrs	r4, r4, #9
 80005da:	b2c0      	uxtb	r0, r0
 80005dc:	e79a      	b.n	8000514 <__aeabi_fmul+0x98>
 80005de:	0037      	movs	r7, r6
 80005e0:	e78e      	b.n	8000500 <__aeabi_fmul+0x84>
 80005e2:	4652      	mov	r2, sl
 80005e4:	2303      	movs	r3, #3
 80005e6:	431a      	orrs	r2, r3
 80005e8:	4692      	mov	sl, r2
 80005ea:	2003      	movs	r0, #3
 80005ec:	e771      	b.n	80004d2 <__aeabi_fmul+0x56>
 80005ee:	4648      	mov	r0, r9
 80005f0:	f000 fabc 	bl	8000b6c <__clzsi2>
 80005f4:	464a      	mov	r2, r9
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	409a      	lsls	r2, r3
 80005fa:	1a2d      	subs	r5, r5, r0
 80005fc:	4691      	mov	r9, r2
 80005fe:	2000      	movs	r0, #0
 8000600:	3d76      	subs	r5, #118	; 0x76
 8000602:	e766      	b.n	80004d2 <__aeabi_fmul+0x56>
 8000604:	230c      	movs	r3, #12
 8000606:	469a      	mov	sl, r3
 8000608:	3b09      	subs	r3, #9
 800060a:	25ff      	movs	r5, #255	; 0xff
 800060c:	469b      	mov	fp, r3
 800060e:	e74d      	b.n	80004ac <__aeabi_fmul+0x30>
 8000610:	0020      	movs	r0, r4
 8000612:	f000 faab 	bl	8000b6c <__clzsi2>
 8000616:	2576      	movs	r5, #118	; 0x76
 8000618:	1f43      	subs	r3, r0, #5
 800061a:	409c      	lsls	r4, r3
 800061c:	2300      	movs	r3, #0
 800061e:	426d      	negs	r5, r5
 8000620:	469a      	mov	sl, r3
 8000622:	469b      	mov	fp, r3
 8000624:	1a2d      	subs	r5, r5, r0
 8000626:	e741      	b.n	80004ac <__aeabi_fmul+0x30>
 8000628:	2480      	movs	r4, #128	; 0x80
 800062a:	2700      	movs	r7, #0
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	03e4      	lsls	r4, r4, #15
 8000630:	e770      	b.n	8000514 <__aeabi_fmul+0x98>
 8000632:	2301      	movs	r3, #1
 8000634:	1a1b      	subs	r3, r3, r0
 8000636:	2b1b      	cmp	r3, #27
 8000638:	dd00      	ble.n	800063c <__aeabi_fmul+0x1c0>
 800063a:	e769      	b.n	8000510 <__aeabi_fmul+0x94>
 800063c:	319e      	adds	r1, #158	; 0x9e
 800063e:	0020      	movs	r0, r4
 8000640:	408c      	lsls	r4, r1
 8000642:	40d8      	lsrs	r0, r3
 8000644:	1e63      	subs	r3, r4, #1
 8000646:	419c      	sbcs	r4, r3
 8000648:	4304      	orrs	r4, r0
 800064a:	0763      	lsls	r3, r4, #29
 800064c:	d004      	beq.n	8000658 <__aeabi_fmul+0x1dc>
 800064e:	230f      	movs	r3, #15
 8000650:	4023      	ands	r3, r4
 8000652:	2b04      	cmp	r3, #4
 8000654:	d000      	beq.n	8000658 <__aeabi_fmul+0x1dc>
 8000656:	3404      	adds	r4, #4
 8000658:	0163      	lsls	r3, r4, #5
 800065a:	d51a      	bpl.n	8000692 <__aeabi_fmul+0x216>
 800065c:	2001      	movs	r0, #1
 800065e:	2400      	movs	r4, #0
 8000660:	e758      	b.n	8000514 <__aeabi_fmul+0x98>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	03c0      	lsls	r0, r0, #15
 8000666:	4204      	tst	r4, r0
 8000668:	d009      	beq.n	800067e <__aeabi_fmul+0x202>
 800066a:	464b      	mov	r3, r9
 800066c:	4203      	tst	r3, r0
 800066e:	d106      	bne.n	800067e <__aeabi_fmul+0x202>
 8000670:	464c      	mov	r4, r9
 8000672:	4304      	orrs	r4, r0
 8000674:	0264      	lsls	r4, r4, #9
 8000676:	4647      	mov	r7, r8
 8000678:	20ff      	movs	r0, #255	; 0xff
 800067a:	0a64      	lsrs	r4, r4, #9
 800067c:	e74a      	b.n	8000514 <__aeabi_fmul+0x98>
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	03c0      	lsls	r0, r0, #15
 8000682:	4304      	orrs	r4, r0
 8000684:	0264      	lsls	r4, r4, #9
 8000686:	0037      	movs	r7, r6
 8000688:	20ff      	movs	r0, #255	; 0xff
 800068a:	0a64      	lsrs	r4, r4, #9
 800068c:	e742      	b.n	8000514 <__aeabi_fmul+0x98>
 800068e:	0029      	movs	r1, r5
 8000690:	e78e      	b.n	80005b0 <__aeabi_fmul+0x134>
 8000692:	01a4      	lsls	r4, r4, #6
 8000694:	2000      	movs	r0, #0
 8000696:	0a64      	lsrs	r4, r4, #9
 8000698:	e73c      	b.n	8000514 <__aeabi_fmul+0x98>
 800069a:	2080      	movs	r0, #128	; 0x80
 800069c:	03c0      	lsls	r0, r0, #15
 800069e:	4304      	orrs	r4, r0
 80006a0:	0264      	lsls	r4, r4, #9
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	e735      	b.n	8000514 <__aeabi_fmul+0x98>
 80006a8:	0800db84 	.word	0x0800db84
 80006ac:	f7ffffff 	.word	0xf7ffffff

080006b0 <__aeabi_fsub>:
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	4646      	mov	r6, r8
 80006b4:	46d6      	mov	lr, sl
 80006b6:	464f      	mov	r7, r9
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	00da      	lsls	r2, r3, #3
 80006be:	4694      	mov	ip, r2
 80006c0:	024a      	lsls	r2, r1, #9
 80006c2:	b5c0      	push	{r6, r7, lr}
 80006c4:	0044      	lsls	r4, r0, #1
 80006c6:	0a56      	lsrs	r6, r2, #9
 80006c8:	1c05      	adds	r5, r0, #0
 80006ca:	46b0      	mov	r8, r6
 80006cc:	0e24      	lsrs	r4, r4, #24
 80006ce:	004e      	lsls	r6, r1, #1
 80006d0:	0992      	lsrs	r2, r2, #6
 80006d2:	001f      	movs	r7, r3
 80006d4:	0020      	movs	r0, r4
 80006d6:	4692      	mov	sl, r2
 80006d8:	0fed      	lsrs	r5, r5, #31
 80006da:	0e36      	lsrs	r6, r6, #24
 80006dc:	0fc9      	lsrs	r1, r1, #31
 80006de:	2eff      	cmp	r6, #255	; 0xff
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fsub+0x34>
 80006e2:	e07f      	b.n	80007e4 <__aeabi_fsub+0x134>
 80006e4:	2201      	movs	r2, #1
 80006e6:	4051      	eors	r1, r2
 80006e8:	428d      	cmp	r5, r1
 80006ea:	d051      	beq.n	8000790 <__aeabi_fsub+0xe0>
 80006ec:	1ba2      	subs	r2, r4, r6
 80006ee:	4691      	mov	r9, r2
 80006f0:	2a00      	cmp	r2, #0
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_fsub+0x46>
 80006f4:	e07e      	b.n	80007f4 <__aeabi_fsub+0x144>
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_fsub+0x4c>
 80006fa:	e099      	b.n	8000830 <__aeabi_fsub+0x180>
 80006fc:	2cff      	cmp	r4, #255	; 0xff
 80006fe:	d100      	bne.n	8000702 <__aeabi_fsub+0x52>
 8000700:	e08c      	b.n	800081c <__aeabi_fsub+0x16c>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	4652      	mov	r2, sl
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	431a      	orrs	r2, r3
 800070a:	4692      	mov	sl, r2
 800070c:	464a      	mov	r2, r9
 800070e:	2301      	movs	r3, #1
 8000710:	2a1b      	cmp	r2, #27
 8000712:	dc08      	bgt.n	8000726 <__aeabi_fsub+0x76>
 8000714:	4653      	mov	r3, sl
 8000716:	2120      	movs	r1, #32
 8000718:	40d3      	lsrs	r3, r2
 800071a:	1a89      	subs	r1, r1, r2
 800071c:	4652      	mov	r2, sl
 800071e:	408a      	lsls	r2, r1
 8000720:	1e51      	subs	r1, r2, #1
 8000722:	418a      	sbcs	r2, r1
 8000724:	4313      	orrs	r3, r2
 8000726:	4662      	mov	r2, ip
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	015a      	lsls	r2, r3, #5
 800072c:	d400      	bmi.n	8000730 <__aeabi_fsub+0x80>
 800072e:	e0f3      	b.n	8000918 <__aeabi_fsub+0x268>
 8000730:	019b      	lsls	r3, r3, #6
 8000732:	099e      	lsrs	r6, r3, #6
 8000734:	0030      	movs	r0, r6
 8000736:	f000 fa19 	bl	8000b6c <__clzsi2>
 800073a:	3805      	subs	r0, #5
 800073c:	4086      	lsls	r6, r0
 800073e:	4284      	cmp	r4, r0
 8000740:	dd00      	ble.n	8000744 <__aeabi_fsub+0x94>
 8000742:	e0f7      	b.n	8000934 <__aeabi_fsub+0x284>
 8000744:	0032      	movs	r2, r6
 8000746:	1b04      	subs	r4, r0, r4
 8000748:	2020      	movs	r0, #32
 800074a:	3401      	adds	r4, #1
 800074c:	40e2      	lsrs	r2, r4
 800074e:	1b04      	subs	r4, r0, r4
 8000750:	40a6      	lsls	r6, r4
 8000752:	0033      	movs	r3, r6
 8000754:	1e5e      	subs	r6, r3, #1
 8000756:	41b3      	sbcs	r3, r6
 8000758:	2400      	movs	r4, #0
 800075a:	4313      	orrs	r3, r2
 800075c:	075a      	lsls	r2, r3, #29
 800075e:	d004      	beq.n	800076a <__aeabi_fsub+0xba>
 8000760:	220f      	movs	r2, #15
 8000762:	401a      	ands	r2, r3
 8000764:	2a04      	cmp	r2, #4
 8000766:	d000      	beq.n	800076a <__aeabi_fsub+0xba>
 8000768:	3304      	adds	r3, #4
 800076a:	015a      	lsls	r2, r3, #5
 800076c:	d400      	bmi.n	8000770 <__aeabi_fsub+0xc0>
 800076e:	e0d6      	b.n	800091e <__aeabi_fsub+0x26e>
 8000770:	1c62      	adds	r2, r4, #1
 8000772:	2cfe      	cmp	r4, #254	; 0xfe
 8000774:	d100      	bne.n	8000778 <__aeabi_fsub+0xc8>
 8000776:	e0da      	b.n	800092e <__aeabi_fsub+0x27e>
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	0a5f      	lsrs	r7, r3, #9
 800077c:	b2d0      	uxtb	r0, r2
 800077e:	05c0      	lsls	r0, r0, #23
 8000780:	4338      	orrs	r0, r7
 8000782:	07ed      	lsls	r5, r5, #31
 8000784:	4328      	orrs	r0, r5
 8000786:	bce0      	pop	{r5, r6, r7}
 8000788:	46ba      	mov	sl, r7
 800078a:	46b1      	mov	r9, r6
 800078c:	46a8      	mov	r8, r5
 800078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000790:	1ba2      	subs	r2, r4, r6
 8000792:	4691      	mov	r9, r2
 8000794:	2a00      	cmp	r2, #0
 8000796:	dd63      	ble.n	8000860 <__aeabi_fsub+0x1b0>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fsub+0xee>
 800079c:	e099      	b.n	80008d2 <__aeabi_fsub+0x222>
 800079e:	2cff      	cmp	r4, #255	; 0xff
 80007a0:	d03c      	beq.n	800081c <__aeabi_fsub+0x16c>
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	4652      	mov	r2, sl
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	431a      	orrs	r2, r3
 80007aa:	4692      	mov	sl, r2
 80007ac:	464a      	mov	r2, r9
 80007ae:	2301      	movs	r3, #1
 80007b0:	2a1b      	cmp	r2, #27
 80007b2:	dc08      	bgt.n	80007c6 <__aeabi_fsub+0x116>
 80007b4:	4653      	mov	r3, sl
 80007b6:	2120      	movs	r1, #32
 80007b8:	40d3      	lsrs	r3, r2
 80007ba:	1a89      	subs	r1, r1, r2
 80007bc:	4652      	mov	r2, sl
 80007be:	408a      	lsls	r2, r1
 80007c0:	1e51      	subs	r1, r2, #1
 80007c2:	418a      	sbcs	r2, r1
 80007c4:	4313      	orrs	r3, r2
 80007c6:	4463      	add	r3, ip
 80007c8:	015a      	lsls	r2, r3, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fsub+0x11e>
 80007cc:	e0a4      	b.n	8000918 <__aeabi_fsub+0x268>
 80007ce:	3401      	adds	r4, #1
 80007d0:	2cff      	cmp	r4, #255	; 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fsub+0x126>
 80007d4:	e0ab      	b.n	800092e <__aeabi_fsub+0x27e>
 80007d6:	2201      	movs	r2, #1
 80007d8:	4997      	ldr	r1, [pc, #604]	; (8000a38 <__aeabi_fsub+0x388>)
 80007da:	401a      	ands	r2, r3
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	400b      	ands	r3, r1
 80007e0:	4313      	orrs	r3, r2
 80007e2:	e7bb      	b.n	800075c <__aeabi_fsub+0xac>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d032      	beq.n	800084e <__aeabi_fsub+0x19e>
 80007e8:	428d      	cmp	r5, r1
 80007ea:	d035      	beq.n	8000858 <__aeabi_fsub+0x1a8>
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	4252      	negs	r2, r2
 80007f0:	4691      	mov	r9, r2
 80007f2:	44a1      	add	r9, r4
 80007f4:	464a      	mov	r2, r9
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	d051      	beq.n	800089e <__aeabi_fsub+0x1ee>
 80007fa:	1b30      	subs	r0, r6, r4
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_fsub+0x152>
 8000800:	e09c      	b.n	800093c <__aeabi_fsub+0x28c>
 8000802:	4663      	mov	r3, ip
 8000804:	2b00      	cmp	r3, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fsub+0x15a>
 8000808:	e0df      	b.n	80009ca <__aeabi_fsub+0x31a>
 800080a:	3801      	subs	r0, #1
 800080c:	2800      	cmp	r0, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0x162>
 8000810:	e0f7      	b.n	8000a02 <__aeabi_fsub+0x352>
 8000812:	2eff      	cmp	r6, #255	; 0xff
 8000814:	d000      	beq.n	8000818 <__aeabi_fsub+0x168>
 8000816:	e099      	b.n	800094c <__aeabi_fsub+0x29c>
 8000818:	000d      	movs	r5, r1
 800081a:	4643      	mov	r3, r8
 800081c:	2b00      	cmp	r3, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fsub+0x172>
 8000820:	e085      	b.n	800092e <__aeabi_fsub+0x27e>
 8000822:	2780      	movs	r7, #128	; 0x80
 8000824:	03ff      	lsls	r7, r7, #15
 8000826:	431f      	orrs	r7, r3
 8000828:	027f      	lsls	r7, r7, #9
 800082a:	20ff      	movs	r0, #255	; 0xff
 800082c:	0a7f      	lsrs	r7, r7, #9
 800082e:	e7a6      	b.n	800077e <__aeabi_fsub+0xce>
 8000830:	4652      	mov	r2, sl
 8000832:	2a00      	cmp	r2, #0
 8000834:	d074      	beq.n	8000920 <__aeabi_fsub+0x270>
 8000836:	2201      	movs	r2, #1
 8000838:	4252      	negs	r2, r2
 800083a:	4690      	mov	r8, r2
 800083c:	44c1      	add	r9, r8
 800083e:	464a      	mov	r2, r9
 8000840:	2a00      	cmp	r2, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fsub+0x196>
 8000844:	e0c8      	b.n	80009d8 <__aeabi_fsub+0x328>
 8000846:	2cff      	cmp	r4, #255	; 0xff
 8000848:	d000      	beq.n	800084c <__aeabi_fsub+0x19c>
 800084a:	e75f      	b.n	800070c <__aeabi_fsub+0x5c>
 800084c:	e7e6      	b.n	800081c <__aeabi_fsub+0x16c>
 800084e:	2201      	movs	r2, #1
 8000850:	4051      	eors	r1, r2
 8000852:	42a9      	cmp	r1, r5
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x1a8>
 8000856:	e749      	b.n	80006ec <__aeabi_fsub+0x3c>
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	4252      	negs	r2, r2
 800085c:	4691      	mov	r9, r2
 800085e:	44a1      	add	r9, r4
 8000860:	464a      	mov	r2, r9
 8000862:	2a00      	cmp	r2, #0
 8000864:	d043      	beq.n	80008ee <__aeabi_fsub+0x23e>
 8000866:	1b31      	subs	r1, r6, r4
 8000868:	2c00      	cmp	r4, #0
 800086a:	d100      	bne.n	800086e <__aeabi_fsub+0x1be>
 800086c:	e08c      	b.n	8000988 <__aeabi_fsub+0x2d8>
 800086e:	2eff      	cmp	r6, #255	; 0xff
 8000870:	d100      	bne.n	8000874 <__aeabi_fsub+0x1c4>
 8000872:	e092      	b.n	800099a <__aeabi_fsub+0x2ea>
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	4662      	mov	r2, ip
 8000878:	04db      	lsls	r3, r3, #19
 800087a:	431a      	orrs	r2, r3
 800087c:	4694      	mov	ip, r2
 800087e:	2301      	movs	r3, #1
 8000880:	291b      	cmp	r1, #27
 8000882:	dc09      	bgt.n	8000898 <__aeabi_fsub+0x1e8>
 8000884:	2020      	movs	r0, #32
 8000886:	4663      	mov	r3, ip
 8000888:	4662      	mov	r2, ip
 800088a:	40cb      	lsrs	r3, r1
 800088c:	1a41      	subs	r1, r0, r1
 800088e:	408a      	lsls	r2, r1
 8000890:	0011      	movs	r1, r2
 8000892:	1e48      	subs	r0, r1, #1
 8000894:	4181      	sbcs	r1, r0
 8000896:	430b      	orrs	r3, r1
 8000898:	0034      	movs	r4, r6
 800089a:	4453      	add	r3, sl
 800089c:	e794      	b.n	80007c8 <__aeabi_fsub+0x118>
 800089e:	22fe      	movs	r2, #254	; 0xfe
 80008a0:	1c66      	adds	r6, r4, #1
 80008a2:	4232      	tst	r2, r6
 80008a4:	d164      	bne.n	8000970 <__aeabi_fsub+0x2c0>
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_fsub+0x1fc>
 80008aa:	e082      	b.n	80009b2 <__aeabi_fsub+0x302>
 80008ac:	4663      	mov	r3, ip
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fsub+0x204>
 80008b2:	e0ab      	b.n	8000a0c <__aeabi_fsub+0x35c>
 80008b4:	4653      	mov	r3, sl
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x20c>
 80008ba:	e760      	b.n	800077e <__aeabi_fsub+0xce>
 80008bc:	4663      	mov	r3, ip
 80008be:	4652      	mov	r2, sl
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	d400      	bmi.n	80008c8 <__aeabi_fsub+0x218>
 80008c6:	e0aa      	b.n	8000a1e <__aeabi_fsub+0x36e>
 80008c8:	4663      	mov	r3, ip
 80008ca:	4652      	mov	r2, sl
 80008cc:	000d      	movs	r5, r1
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	e744      	b.n	800075c <__aeabi_fsub+0xac>
 80008d2:	4652      	mov	r2, sl
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d023      	beq.n	8000920 <__aeabi_fsub+0x270>
 80008d8:	2201      	movs	r2, #1
 80008da:	4252      	negs	r2, r2
 80008dc:	4690      	mov	r8, r2
 80008de:	44c1      	add	r9, r8
 80008e0:	464a      	mov	r2, r9
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	d075      	beq.n	80009d2 <__aeabi_fsub+0x322>
 80008e6:	2cff      	cmp	r4, #255	; 0xff
 80008e8:	d000      	beq.n	80008ec <__aeabi_fsub+0x23c>
 80008ea:	e75f      	b.n	80007ac <__aeabi_fsub+0xfc>
 80008ec:	e796      	b.n	800081c <__aeabi_fsub+0x16c>
 80008ee:	26fe      	movs	r6, #254	; 0xfe
 80008f0:	3401      	adds	r4, #1
 80008f2:	4226      	tst	r6, r4
 80008f4:	d153      	bne.n	800099e <__aeabi_fsub+0x2ee>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d172      	bne.n	80009e0 <__aeabi_fsub+0x330>
 80008fa:	4663      	mov	r3, ip
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_fsub+0x252>
 8000900:	e093      	b.n	8000a2a <__aeabi_fsub+0x37a>
 8000902:	4653      	mov	r3, sl
 8000904:	2b00      	cmp	r3, #0
 8000906:	d100      	bne.n	800090a <__aeabi_fsub+0x25a>
 8000908:	e739      	b.n	800077e <__aeabi_fsub+0xce>
 800090a:	4463      	add	r3, ip
 800090c:	2400      	movs	r4, #0
 800090e:	015a      	lsls	r2, r3, #5
 8000910:	d502      	bpl.n	8000918 <__aeabi_fsub+0x268>
 8000912:	4a4a      	ldr	r2, [pc, #296]	; (8000a3c <__aeabi_fsub+0x38c>)
 8000914:	3401      	adds	r4, #1
 8000916:	4013      	ands	r3, r2
 8000918:	075a      	lsls	r2, r3, #29
 800091a:	d000      	beq.n	800091e <__aeabi_fsub+0x26e>
 800091c:	e720      	b.n	8000760 <__aeabi_fsub+0xb0>
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	2cff      	cmp	r4, #255	; 0xff
 8000922:	d100      	bne.n	8000926 <__aeabi_fsub+0x276>
 8000924:	e77a      	b.n	800081c <__aeabi_fsub+0x16c>
 8000926:	025b      	lsls	r3, r3, #9
 8000928:	0a5f      	lsrs	r7, r3, #9
 800092a:	b2e0      	uxtb	r0, r4
 800092c:	e727      	b.n	800077e <__aeabi_fsub+0xce>
 800092e:	20ff      	movs	r0, #255	; 0xff
 8000930:	2700      	movs	r7, #0
 8000932:	e724      	b.n	800077e <__aeabi_fsub+0xce>
 8000934:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <__aeabi_fsub+0x38c>)
 8000936:	1a24      	subs	r4, r4, r0
 8000938:	4033      	ands	r3, r6
 800093a:	e70f      	b.n	800075c <__aeabi_fsub+0xac>
 800093c:	2eff      	cmp	r6, #255	; 0xff
 800093e:	d100      	bne.n	8000942 <__aeabi_fsub+0x292>
 8000940:	e76a      	b.n	8000818 <__aeabi_fsub+0x168>
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	4662      	mov	r2, ip
 8000946:	04db      	lsls	r3, r3, #19
 8000948:	431a      	orrs	r2, r3
 800094a:	4694      	mov	ip, r2
 800094c:	2301      	movs	r3, #1
 800094e:	281b      	cmp	r0, #27
 8000950:	dc09      	bgt.n	8000966 <__aeabi_fsub+0x2b6>
 8000952:	2420      	movs	r4, #32
 8000954:	4663      	mov	r3, ip
 8000956:	4662      	mov	r2, ip
 8000958:	40c3      	lsrs	r3, r0
 800095a:	1a20      	subs	r0, r4, r0
 800095c:	4082      	lsls	r2, r0
 800095e:	0010      	movs	r0, r2
 8000960:	1e44      	subs	r4, r0, #1
 8000962:	41a0      	sbcs	r0, r4
 8000964:	4303      	orrs	r3, r0
 8000966:	4652      	mov	r2, sl
 8000968:	000d      	movs	r5, r1
 800096a:	0034      	movs	r4, r6
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	e6dc      	b.n	800072a <__aeabi_fsub+0x7a>
 8000970:	4663      	mov	r3, ip
 8000972:	4652      	mov	r2, sl
 8000974:	1a9e      	subs	r6, r3, r2
 8000976:	0173      	lsls	r3, r6, #5
 8000978:	d417      	bmi.n	80009aa <__aeabi_fsub+0x2fa>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fsub+0x2d0>
 800097e:	e6d9      	b.n	8000734 <__aeabi_fsub+0x84>
 8000980:	2500      	movs	r5, #0
 8000982:	2000      	movs	r0, #0
 8000984:	2700      	movs	r7, #0
 8000986:	e6fa      	b.n	800077e <__aeabi_fsub+0xce>
 8000988:	4663      	mov	r3, ip
 800098a:	2b00      	cmp	r3, #0
 800098c:	d044      	beq.n	8000a18 <__aeabi_fsub+0x368>
 800098e:	3901      	subs	r1, #1
 8000990:	2900      	cmp	r1, #0
 8000992:	d04c      	beq.n	8000a2e <__aeabi_fsub+0x37e>
 8000994:	2eff      	cmp	r6, #255	; 0xff
 8000996:	d000      	beq.n	800099a <__aeabi_fsub+0x2ea>
 8000998:	e771      	b.n	800087e <__aeabi_fsub+0x1ce>
 800099a:	4643      	mov	r3, r8
 800099c:	e73e      	b.n	800081c <__aeabi_fsub+0x16c>
 800099e:	2cff      	cmp	r4, #255	; 0xff
 80009a0:	d0c5      	beq.n	800092e <__aeabi_fsub+0x27e>
 80009a2:	4652      	mov	r2, sl
 80009a4:	4462      	add	r2, ip
 80009a6:	0853      	lsrs	r3, r2, #1
 80009a8:	e7b6      	b.n	8000918 <__aeabi_fsub+0x268>
 80009aa:	4663      	mov	r3, ip
 80009ac:	000d      	movs	r5, r1
 80009ae:	1ad6      	subs	r6, r2, r3
 80009b0:	e6c0      	b.n	8000734 <__aeabi_fsub+0x84>
 80009b2:	4662      	mov	r2, ip
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d116      	bne.n	80009e6 <__aeabi_fsub+0x336>
 80009b8:	4653      	mov	r3, sl
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fsub+0x310>
 80009be:	e72b      	b.n	8000818 <__aeabi_fsub+0x168>
 80009c0:	2780      	movs	r7, #128	; 0x80
 80009c2:	2500      	movs	r5, #0
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	03ff      	lsls	r7, r7, #15
 80009c8:	e6d9      	b.n	800077e <__aeabi_fsub+0xce>
 80009ca:	000d      	movs	r5, r1
 80009cc:	4643      	mov	r3, r8
 80009ce:	0034      	movs	r4, r6
 80009d0:	e7a6      	b.n	8000920 <__aeabi_fsub+0x270>
 80009d2:	4653      	mov	r3, sl
 80009d4:	4463      	add	r3, ip
 80009d6:	e6f7      	b.n	80007c8 <__aeabi_fsub+0x118>
 80009d8:	4663      	mov	r3, ip
 80009da:	4652      	mov	r2, sl
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	e6a4      	b.n	800072a <__aeabi_fsub+0x7a>
 80009e0:	4662      	mov	r2, ip
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d0d9      	beq.n	800099a <__aeabi_fsub+0x2ea>
 80009e6:	4652      	mov	r2, sl
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_fsub+0x33e>
 80009ec:	e716      	b.n	800081c <__aeabi_fsub+0x16c>
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	03d2      	lsls	r2, r2, #15
 80009f2:	4213      	tst	r3, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fsub+0x348>
 80009f6:	e711      	b.n	800081c <__aeabi_fsub+0x16c>
 80009f8:	4640      	mov	r0, r8
 80009fa:	4210      	tst	r0, r2
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fsub+0x350>
 80009fe:	e70d      	b.n	800081c <__aeabi_fsub+0x16c>
 8000a00:	e70a      	b.n	8000818 <__aeabi_fsub+0x168>
 8000a02:	4652      	mov	r2, sl
 8000a04:	000d      	movs	r5, r1
 8000a06:	0034      	movs	r4, r6
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	e68e      	b.n	800072a <__aeabi_fsub+0x7a>
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d008      	beq.n	8000a24 <__aeabi_fsub+0x374>
 8000a12:	000d      	movs	r5, r1
 8000a14:	4647      	mov	r7, r8
 8000a16:	e6b2      	b.n	800077e <__aeabi_fsub+0xce>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	0034      	movs	r4, r6
 8000a1c:	e780      	b.n	8000920 <__aeabi_fsub+0x270>
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x374>
 8000a22:	e779      	b.n	8000918 <__aeabi_fsub+0x268>
 8000a24:	2500      	movs	r5, #0
 8000a26:	2700      	movs	r7, #0
 8000a28:	e6a9      	b.n	800077e <__aeabi_fsub+0xce>
 8000a2a:	4647      	mov	r7, r8
 8000a2c:	e6a7      	b.n	800077e <__aeabi_fsub+0xce>
 8000a2e:	4653      	mov	r3, sl
 8000a30:	0034      	movs	r4, r6
 8000a32:	4463      	add	r3, ip
 8000a34:	e6c8      	b.n	80007c8 <__aeabi_fsub+0x118>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	7dffffff 	.word	0x7dffffff
 8000a3c:	fbffffff 	.word	0xfbffffff

08000a40 <__aeabi_f2iz>:
 8000a40:	0241      	lsls	r1, r0, #9
 8000a42:	0042      	lsls	r2, r0, #1
 8000a44:	0fc3      	lsrs	r3, r0, #31
 8000a46:	0a49      	lsrs	r1, r1, #9
 8000a48:	2000      	movs	r0, #0
 8000a4a:	0e12      	lsrs	r2, r2, #24
 8000a4c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a4e:	d903      	bls.n	8000a58 <__aeabi_f2iz+0x18>
 8000a50:	2a9d      	cmp	r2, #157	; 0x9d
 8000a52:	d902      	bls.n	8000a5a <__aeabi_f2iz+0x1a>
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <__aeabi_f2iz+0x3c>)
 8000a56:	1898      	adds	r0, r3, r2
 8000a58:	4770      	bx	lr
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	0400      	lsls	r0, r0, #16
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	2a95      	cmp	r2, #149	; 0x95
 8000a62:	dc07      	bgt.n	8000a74 <__aeabi_f2iz+0x34>
 8000a64:	2096      	movs	r0, #150	; 0x96
 8000a66:	1a82      	subs	r2, r0, r2
 8000a68:	40d1      	lsrs	r1, r2
 8000a6a:	4248      	negs	r0, r1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f3      	bne.n	8000a58 <__aeabi_f2iz+0x18>
 8000a70:	0008      	movs	r0, r1
 8000a72:	e7f1      	b.n	8000a58 <__aeabi_f2iz+0x18>
 8000a74:	3a96      	subs	r2, #150	; 0x96
 8000a76:	4091      	lsls	r1, r2
 8000a78:	e7f7      	b.n	8000a6a <__aeabi_f2iz+0x2a>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	7fffffff 	.word	0x7fffffff

08000a80 <__aeabi_ui2f>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	1e05      	subs	r5, r0, #0
 8000a84:	d00e      	beq.n	8000aa4 <__aeabi_ui2f+0x24>
 8000a86:	f000 f871 	bl	8000b6c <__clzsi2>
 8000a8a:	239e      	movs	r3, #158	; 0x9e
 8000a8c:	0004      	movs	r4, r0
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2b96      	cmp	r3, #150	; 0x96
 8000a92:	dc0c      	bgt.n	8000aae <__aeabi_ui2f+0x2e>
 8000a94:	2808      	cmp	r0, #8
 8000a96:	dd01      	ble.n	8000a9c <__aeabi_ui2f+0x1c>
 8000a98:	3c08      	subs	r4, #8
 8000a9a:	40a5      	lsls	r5, r4
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	b2d8      	uxtb	r0, r3
 8000aa2:	e001      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	05c0      	lsls	r0, r0, #23
 8000aaa:	4328      	orrs	r0, r5
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	2b99      	cmp	r3, #153	; 0x99
 8000ab0:	dd09      	ble.n	8000ac6 <__aeabi_ui2f+0x46>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	0029      	movs	r1, r5
 8000ab6:	321b      	adds	r2, #27
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	1e4a      	subs	r2, r1, #1
 8000abc:	4191      	sbcs	r1, r2
 8000abe:	2205      	movs	r2, #5
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	40d5      	lsrs	r5, r2
 8000ac4:	430d      	orrs	r5, r1
 8000ac6:	2c05      	cmp	r4, #5
 8000ac8:	dd01      	ble.n	8000ace <__aeabi_ui2f+0x4e>
 8000aca:	1f62      	subs	r2, r4, #5
 8000acc:	4095      	lsls	r5, r2
 8000ace:	0029      	movs	r1, r5
 8000ad0:	4e08      	ldr	r6, [pc, #32]	; (8000af4 <__aeabi_ui2f+0x74>)
 8000ad2:	4031      	ands	r1, r6
 8000ad4:	076a      	lsls	r2, r5, #29
 8000ad6:	d009      	beq.n	8000aec <__aeabi_ui2f+0x6c>
 8000ad8:	200f      	movs	r0, #15
 8000ada:	4028      	ands	r0, r5
 8000adc:	2804      	cmp	r0, #4
 8000ade:	d005      	beq.n	8000aec <__aeabi_ui2f+0x6c>
 8000ae0:	3104      	adds	r1, #4
 8000ae2:	014a      	lsls	r2, r1, #5
 8000ae4:	d502      	bpl.n	8000aec <__aeabi_ui2f+0x6c>
 8000ae6:	239f      	movs	r3, #159	; 0x9f
 8000ae8:	4031      	ands	r1, r6
 8000aea:	1b1b      	subs	r3, r3, r4
 8000aec:	0189      	lsls	r1, r1, #6
 8000aee:	0a4d      	lsrs	r5, r1, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e7d9      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_cfrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	1c08      	adds	r0, r1, #0
 8000afc:	4661      	mov	r1, ip
 8000afe:	e7ff      	b.n	8000b00 <__aeabi_cfcmpeq>

08000b00 <__aeabi_cfcmpeq>:
 8000b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b02:	f000 f8c5 	bl	8000c90 <__lesf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d401      	bmi.n	8000b0e <__aeabi_cfcmpeq+0xe>
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	42c8      	cmn	r0, r1
 8000b0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b10 <__aeabi_fcmpeq>:
 8000b10:	b510      	push	{r4, lr}
 8000b12:	f000 f849 	bl	8000ba8 <__eqsf2>
 8000b16:	4240      	negs	r0, r0
 8000b18:	3001      	adds	r0, #1
 8000b1a:	bd10      	pop	{r4, pc}

08000b1c <__aeabi_fcmplt>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	f000 f8b7 	bl	8000c90 <__lesf2>
 8000b22:	2800      	cmp	r0, #0
 8000b24:	db01      	blt.n	8000b2a <__aeabi_fcmplt+0xe>
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)

08000b30 <__aeabi_fcmple>:
 8000b30:	b510      	push	{r4, lr}
 8000b32:	f000 f8ad 	bl	8000c90 <__lesf2>
 8000b36:	2800      	cmp	r0, #0
 8000b38:	dd01      	ble.n	8000b3e <__aeabi_fcmple+0xe>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	bd10      	pop	{r4, pc}
 8000b3e:	2001      	movs	r0, #1
 8000b40:	bd10      	pop	{r4, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)

08000b44 <__aeabi_fcmpgt>:
 8000b44:	b510      	push	{r4, lr}
 8000b46:	f000 f857 	bl	8000bf8 <__gesf2>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	dc01      	bgt.n	8000b52 <__aeabi_fcmpgt+0xe>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	2001      	movs	r0, #1
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)

08000b58 <__aeabi_fcmpge>:
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	f000 f84d 	bl	8000bf8 <__gesf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	da01      	bge.n	8000b66 <__aeabi_fcmpge+0xe>
 8000b62:	2000      	movs	r0, #0
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	2001      	movs	r0, #1
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)

08000b6c <__clzsi2>:
 8000b6c:	211c      	movs	r1, #28
 8000b6e:	2301      	movs	r3, #1
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	4298      	cmp	r0, r3
 8000b74:	d301      	bcc.n	8000b7a <__clzsi2+0xe>
 8000b76:	0c00      	lsrs	r0, r0, #16
 8000b78:	3910      	subs	r1, #16
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	d301      	bcc.n	8000b84 <__clzsi2+0x18>
 8000b80:	0a00      	lsrs	r0, r0, #8
 8000b82:	3908      	subs	r1, #8
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	4298      	cmp	r0, r3
 8000b88:	d301      	bcc.n	8000b8e <__clzsi2+0x22>
 8000b8a:	0900      	lsrs	r0, r0, #4
 8000b8c:	3904      	subs	r1, #4
 8000b8e:	a202      	add	r2, pc, #8	; (adr r2, 8000b98 <__clzsi2+0x2c>)
 8000b90:	5c10      	ldrb	r0, [r2, r0]
 8000b92:	1840      	adds	r0, r0, r1
 8000b94:	4770      	bx	lr
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	02020304 	.word	0x02020304
 8000b9c:	01010101 	.word	0x01010101
	...

08000ba8 <__eqsf2>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	0042      	lsls	r2, r0, #1
 8000bac:	024e      	lsls	r6, r1, #9
 8000bae:	004c      	lsls	r4, r1, #1
 8000bb0:	0245      	lsls	r5, r0, #9
 8000bb2:	0a6d      	lsrs	r5, r5, #9
 8000bb4:	0e12      	lsrs	r2, r2, #24
 8000bb6:	0fc3      	lsrs	r3, r0, #31
 8000bb8:	0a76      	lsrs	r6, r6, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	0fc9      	lsrs	r1, r1, #31
 8000bbe:	2aff      	cmp	r2, #255	; 0xff
 8000bc0:	d00f      	beq.n	8000be2 <__eqsf2+0x3a>
 8000bc2:	2cff      	cmp	r4, #255	; 0xff
 8000bc4:	d011      	beq.n	8000bea <__eqsf2+0x42>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	42a2      	cmp	r2, r4
 8000bca:	d000      	beq.n	8000bce <__eqsf2+0x26>
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
 8000bce:	42b5      	cmp	r5, r6
 8000bd0:	d1fc      	bne.n	8000bcc <__eqsf2+0x24>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d00d      	beq.n	8000bf2 <__eqsf2+0x4a>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d1f8      	bne.n	8000bcc <__eqsf2+0x24>
 8000bda:	0028      	movs	r0, r5
 8000bdc:	1e45      	subs	r5, r0, #1
 8000bde:	41a8      	sbcs	r0, r5
 8000be0:	e7f4      	b.n	8000bcc <__eqsf2+0x24>
 8000be2:	2001      	movs	r0, #1
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d1f1      	bne.n	8000bcc <__eqsf2+0x24>
 8000be8:	e7eb      	b.n	8000bc2 <__eqsf2+0x1a>
 8000bea:	2001      	movs	r0, #1
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d1ed      	bne.n	8000bcc <__eqsf2+0x24>
 8000bf0:	e7e9      	b.n	8000bc6 <__eqsf2+0x1e>
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	e7ea      	b.n	8000bcc <__eqsf2+0x24>
 8000bf6:	46c0      	nop			; (mov r8, r8)

08000bf8 <__gesf2>:
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	0042      	lsls	r2, r0, #1
 8000bfc:	0246      	lsls	r6, r0, #9
 8000bfe:	024d      	lsls	r5, r1, #9
 8000c00:	004c      	lsls	r4, r1, #1
 8000c02:	0fc3      	lsrs	r3, r0, #31
 8000c04:	0a76      	lsrs	r6, r6, #9
 8000c06:	0e12      	lsrs	r2, r2, #24
 8000c08:	0a6d      	lsrs	r5, r5, #9
 8000c0a:	0e24      	lsrs	r4, r4, #24
 8000c0c:	0fc8      	lsrs	r0, r1, #31
 8000c0e:	2aff      	cmp	r2, #255	; 0xff
 8000c10:	d01f      	beq.n	8000c52 <__gesf2+0x5a>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d010      	beq.n	8000c38 <__gesf2+0x40>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d11f      	bne.n	8000c5a <__gesf2+0x62>
 8000c1a:	4271      	negs	r1, r6
 8000c1c:	4171      	adcs	r1, r6
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d101      	bne.n	8000c26 <__gesf2+0x2e>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d01e      	beq.n	8000c64 <__gesf2+0x6c>
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d10e      	bne.n	8000c48 <__gesf2+0x50>
 8000c2a:	4283      	cmp	r3, r0
 8000c2c:	d01e      	beq.n	8000c6c <__gesf2+0x74>
 8000c2e:	2102      	movs	r1, #2
 8000c30:	1e58      	subs	r0, r3, #1
 8000c32:	4008      	ands	r0, r1
 8000c34:	3801      	subs	r0, #1
 8000c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d126      	bne.n	8000c8a <__gesf2+0x92>
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d1f4      	bne.n	8000c2a <__gesf2+0x32>
 8000c40:	4271      	negs	r1, r6
 8000c42:	4171      	adcs	r1, r6
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d0f0      	beq.n	8000c2a <__gesf2+0x32>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d1f4      	bne.n	8000c36 <__gesf2+0x3e>
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4240      	negs	r0, r0
 8000c50:	e7f1      	b.n	8000c36 <__gesf2+0x3e>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d119      	bne.n	8000c8a <__gesf2+0x92>
 8000c56:	2cff      	cmp	r4, #255	; 0xff
 8000c58:	d0ee      	beq.n	8000c38 <__gesf2+0x40>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d1e5      	bne.n	8000c2a <__gesf2+0x32>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d1e3      	bne.n	8000c2a <__gesf2+0x32>
 8000c62:	e7e4      	b.n	8000c2e <__gesf2+0x36>
 8000c64:	2000      	movs	r0, #0
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0e5      	beq.n	8000c36 <__gesf2+0x3e>
 8000c6a:	e7e0      	b.n	8000c2e <__gesf2+0x36>
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	dc05      	bgt.n	8000c7c <__gesf2+0x84>
 8000c70:	dbea      	blt.n	8000c48 <__gesf2+0x50>
 8000c72:	42ae      	cmp	r6, r5
 8000c74:	d802      	bhi.n	8000c7c <__gesf2+0x84>
 8000c76:	d3e7      	bcc.n	8000c48 <__gesf2+0x50>
 8000c78:	2000      	movs	r0, #0
 8000c7a:	e7dc      	b.n	8000c36 <__gesf2+0x3e>
 8000c7c:	4241      	negs	r1, r0
 8000c7e:	4141      	adcs	r1, r0
 8000c80:	4248      	negs	r0, r1
 8000c82:	2102      	movs	r1, #2
 8000c84:	4008      	ands	r0, r1
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7d5      	b.n	8000c36 <__gesf2+0x3e>
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	4240      	negs	r0, r0
 8000c8e:	e7d2      	b.n	8000c36 <__gesf2+0x3e>

08000c90 <__lesf2>:
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	0042      	lsls	r2, r0, #1
 8000c94:	0246      	lsls	r6, r0, #9
 8000c96:	024d      	lsls	r5, r1, #9
 8000c98:	004c      	lsls	r4, r1, #1
 8000c9a:	0fc3      	lsrs	r3, r0, #31
 8000c9c:	0a76      	lsrs	r6, r6, #9
 8000c9e:	0e12      	lsrs	r2, r2, #24
 8000ca0:	0a6d      	lsrs	r5, r5, #9
 8000ca2:	0e24      	lsrs	r4, r4, #24
 8000ca4:	0fc8      	lsrs	r0, r1, #31
 8000ca6:	2aff      	cmp	r2, #255	; 0xff
 8000ca8:	d00d      	beq.n	8000cc6 <__lesf2+0x36>
 8000caa:	2cff      	cmp	r4, #255	; 0xff
 8000cac:	d00f      	beq.n	8000cce <__lesf2+0x3e>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d123      	bne.n	8000cfa <__lesf2+0x6a>
 8000cb2:	4271      	negs	r1, r6
 8000cb4:	4171      	adcs	r1, r6
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	d10f      	bne.n	8000cda <__lesf2+0x4a>
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d10d      	bne.n	8000cda <__lesf2+0x4a>
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d014      	beq.n	8000cee <__lesf2+0x5e>
 8000cc4:	e00d      	b.n	8000ce2 <__lesf2+0x52>
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d110      	bne.n	8000cec <__lesf2+0x5c>
 8000cca:	2cff      	cmp	r4, #255	; 0xff
 8000ccc:	d115      	bne.n	8000cfa <__lesf2+0x6a>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d10c      	bne.n	8000cec <__lesf2+0x5c>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d103      	bne.n	8000cde <__lesf2+0x4e>
 8000cd6:	4271      	negs	r1, r6
 8000cd8:	4171      	adcs	r1, r6
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d108      	bne.n	8000cf0 <__lesf2+0x60>
 8000cde:	4283      	cmp	r3, r0
 8000ce0:	d010      	beq.n	8000d04 <__lesf2+0x74>
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	1e58      	subs	r0, r3, #1
 8000ce6:	4008      	ands	r0, r1
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e000      	b.n	8000cee <__lesf2+0x5e>
 8000cec:	2002      	movs	r0, #2
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d1fc      	bne.n	8000cee <__lesf2+0x5e>
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	e7f9      	b.n	8000cee <__lesf2+0x5e>
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	d1ef      	bne.n	8000cde <__lesf2+0x4e>
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d1ed      	bne.n	8000cde <__lesf2+0x4e>
 8000d02:	e7ee      	b.n	8000ce2 <__lesf2+0x52>
 8000d04:	42a2      	cmp	r2, r4
 8000d06:	dc05      	bgt.n	8000d14 <__lesf2+0x84>
 8000d08:	dbf2      	blt.n	8000cf0 <__lesf2+0x60>
 8000d0a:	42ae      	cmp	r6, r5
 8000d0c:	d802      	bhi.n	8000d14 <__lesf2+0x84>
 8000d0e:	d3ef      	bcc.n	8000cf0 <__lesf2+0x60>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e7ec      	b.n	8000cee <__lesf2+0x5e>
 8000d14:	4241      	negs	r1, r0
 8000d16:	4141      	adcs	r1, r0
 8000d18:	4248      	negs	r0, r1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4008      	ands	r0, r1
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7e5      	b.n	8000cee <__lesf2+0x5e>
 8000d22:	46c0      	nop			; (mov r8, r8)

08000d24 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8000d2e:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <vApplicationStackOverflowHook+0x18>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	0018      	movs	r0, r3
 8000d36:	f003 f846 	bl	8003dc6 <HAL_GPIO_WritePin>
  while(1)
 8000d3a:	e7fe      	b.n	8000d3a <vApplicationStackOverflowHook+0x16>
 8000d3c:	48000400 	.word	0x48000400

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f001 ff1c 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f820 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f000 f980 	bl	8001050 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d50:	f000 f882 	bl	8000e58 <MX_CAN_Init>
  MX_SPI1_Init();
 8000d54:	f000 f8b8 	bl	8000ec8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000d58:	f000 f8f4 	bl	8000f44 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 8000d5c:	f000 f952 	bl	8001004 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d60:	f008 f9bc 	bl	80090dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <main+0x40>)
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <main+0x44>)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f008 fa34 	bl	80091d8 <osThreadNew>
 8000d70:	0002      	movs	r2, r0
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <main+0x48>)
 8000d74:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  CPP_UserSetup();
 8000d76:	f000 fd6d 	bl	8001854 <CPP_UserSetup>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d7a:	f008 f9db 	bl	8009134 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <main+0x3e>
 8000d80:	0800dbc4 	.word	0x0800dbc4
 8000d84:	0800129d 	.word	0x0800129d
 8000d88:	20002b1c 	.word	0x20002b1c

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b099      	sub	sp, #100	; 0x64
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	242c      	movs	r4, #44	; 0x2c
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	0018      	movs	r0, r3
 8000d98:	2334      	movs	r3, #52	; 0x34
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f00c f8fe 	bl	800cf9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da2:	231c      	movs	r3, #28
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	0018      	movs	r0, r3
 8000da8:	2310      	movs	r3, #16
 8000daa:	001a      	movs	r2, r3
 8000dac:	2100      	movs	r1, #0
 8000dae:	f00c f8f6 	bl	800cf9e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db2:	003b      	movs	r3, r7
 8000db4:	0018      	movs	r0, r3
 8000db6:	231c      	movs	r3, #28
 8000db8:	001a      	movs	r2, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f00c f8ef 	bl	800cf9e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000dc0:	0021      	movs	r1, r4
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2222      	movs	r2, #34	; 0x22
 8000dc6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2201      	movs	r2, #1
 8000dcc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2202      	movs	r2, #2
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	0212      	lsls	r2, r2, #8
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	22e0      	movs	r2, #224	; 0xe0
 8000dec:	0352      	lsls	r2, r2, #13
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2201      	movs	r2, #1
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f003 f973 	bl	80040e4 <HAL_RCC_OscConfig>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e02:	f000 fa6f 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	211c      	movs	r1, #28
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2202      	movs	r2, #2
 8000e12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2101      	movs	r1, #1
 8000e24:	0018      	movs	r0, r3
 8000e26:	f003 fce3 	bl	80047f0 <HAL_RCC_ClockConfig>
 8000e2a:	1e03      	subs	r3, r0, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e2e:	f000 fa59 	bl	80012e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0292      	lsls	r2, r2, #10
 8000e38:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	003b      	movs	r3, r7
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 fe78 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e4c:	f000 fa4a 	bl	80012e4 <Error_Handler>
  }
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b019      	add	sp, #100	; 0x64
 8000e56:	bd90      	pop	{r4, r7, pc}

08000e58 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <MX_CAN_Init+0x6c>)
 8000e60:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e64:	2204      	movs	r2, #4
 8000e66:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	05d2      	lsls	r2, r2, #23
 8000e6e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e78:	22d0      	movs	r2, #208	; 0xd0
 8000e7a:	0312      	lsls	r2, r2, #12
 8000e7c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	0392      	lsls	r2, r2, #14
 8000e84:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <MX_CAN_Init+0x68>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f001 fe97 	bl	8002be0 <HAL_CAN_Init>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000eb6:	f000 fa15 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20002b20 	.word	0x20002b20
 8000ec4:	40006400 	.word	0x40006400

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_SPI1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ed4:	2282      	movs	r2, #130	; 0x82
 8000ed6:	0052      	lsls	r2, r2, #1
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ee2:	22e0      	movs	r2, #224	; 0xe0
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f003 ff03 	bl	8004d34 <HAL_SPI_Init>
 8000f2e:	1e03      	subs	r3, r0, #0
 8000f30:	d001      	beq.n	8000f36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 f9d7 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20002d90 	.word	0x20002d90
 8000f40:	40013000 	.word	0x40013000

08000f44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2308      	movs	r3, #8
 8000f52:	001a      	movs	r2, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	f00c f822 	bl	800cf9e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	231c      	movs	r3, #28
 8000f60:	001a      	movs	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f00c f81b 	bl	800cf9e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <MX_TIM3_Init+0xbc>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000f7c:	22fa      	movs	r2, #250	; 0xfa
 8000f7e:	00d2      	lsls	r2, r2, #3
 8000f80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000f90:	0018      	movs	r0, r3
 8000f92:	f004 fb79 	bl	8005688 <HAL_TIM_PWM_Init>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f9a:	f000 f9a3 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fac:	187a      	adds	r2, r7, r1
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f005 f830 	bl	8006018 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f000 f992 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2260      	movs	r2, #96	; 0x60
 8000fc4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd8:	1d39      	adds	r1, r7, #4
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f004 fcb8 	bl	8005954 <HAL_TIM_PWM_ConfigChannel>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000fe8:	f000 f97c 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <MX_TIM3_Init+0xb8>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fa74 	bl	80014dc <HAL_TIM_MspPostInit>

}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b00a      	add	sp, #40	; 0x28
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20002b48 	.word	0x20002b48
 8001000:	40000400 	.word	0x40000400

08001004 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_USB_PCD_Init+0x44>)
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <MX_USB_PCD_Init+0x48>)
 800100c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USB_PCD_Init+0x44>)
 8001010:	2208      	movs	r2, #8
 8001012:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USB_PCD_Init+0x44>)
 8001016:	2202      	movs	r2, #2
 8001018:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USB_PCD_Init+0x44>)
 800101c:	2202      	movs	r2, #2
 800101e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USB_PCD_Init+0x44>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USB_PCD_Init+0x44>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USB_PCD_Init+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <MX_USB_PCD_Init+0x44>)
 8001034:	0018      	movs	r0, r3
 8001036:	f002 ff1b 	bl	8003e70 <HAL_PCD_Init>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800103e:	f000 f951 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20002eb0 	.word	0x20002eb0
 800104c:	40005c00 	.word	0x40005c00

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	2414      	movs	r4, #20
 8001058:	193b      	adds	r3, r7, r4
 800105a:	0018      	movs	r0, r3
 800105c:	2314      	movs	r3, #20
 800105e:	001a      	movs	r2, r3
 8001060:	2100      	movs	r1, #0
 8001062:	f00b ff9c 	bl	800cf9e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b7d      	ldr	r3, [pc, #500]	; (800125c <MX_GPIO_Init+0x20c>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4b7c      	ldr	r3, [pc, #496]	; (800125c <MX_GPIO_Init+0x20c>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0309      	lsls	r1, r1, #12
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	4b79      	ldr	r3, [pc, #484]	; (800125c <MX_GPIO_Init+0x20c>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	031b      	lsls	r3, r3, #12
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b76      	ldr	r3, [pc, #472]	; (800125c <MX_GPIO_Init+0x20c>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	4b75      	ldr	r3, [pc, #468]	; (800125c <MX_GPIO_Init+0x20c>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0289      	lsls	r1, r1, #10
 800108c:	430a      	orrs	r2, r1
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	4b72      	ldr	r3, [pc, #456]	; (800125c <MX_GPIO_Init+0x20c>)
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b6f      	ldr	r3, [pc, #444]	; (800125c <MX_GPIO_Init+0x20c>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	4b6e      	ldr	r3, [pc, #440]	; (800125c <MX_GPIO_Init+0x20c>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	02c9      	lsls	r1, r1, #11
 80010a8:	430a      	orrs	r2, r1
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	4b6b      	ldr	r3, [pc, #428]	; (800125c <MX_GPIO_Init+0x20c>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	02db      	lsls	r3, r3, #11
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b68      	ldr	r3, [pc, #416]	; (800125c <MX_GPIO_Init+0x20c>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	4b67      	ldr	r3, [pc, #412]	; (800125c <MX_GPIO_Init+0x20c>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0349      	lsls	r1, r1, #13
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	4b64      	ldr	r3, [pc, #400]	; (800125c <MX_GPIO_Init+0x20c>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	035b      	lsls	r3, r3, #13
 80010d0:	4013      	ands	r3, r2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RT_Led_Pin|Cruise_Led_Pin|User_LED_Pin|HL_Led_Pin
 80010d6:	4962      	ldr	r1, [pc, #392]	; (8001260 <MX_GPIO_Init+0x210>)
 80010d8:	4b62      	ldr	r3, [pc, #392]	; (8001264 <MX_GPIO_Init+0x214>)
 80010da:	2200      	movs	r2, #0
 80010dc:	0018      	movs	r0, r3
 80010de:	f002 fe72 	bl	8003dc6 <HAL_GPIO_WritePin>
                          |Eco_Led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reverse_Led_Pin|LT_Led_Pin, GPIO_PIN_RESET);
 80010e2:	4961      	ldr	r1, [pc, #388]	; (8001268 <MX_GPIO_Init+0x218>)
 80010e4:	2390      	movs	r3, #144	; 0x90
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	2200      	movs	r2, #0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f002 fe6b 	bl	8003dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERROR_LED_Pin|LCD_RST_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 80010f0:	495e      	ldr	r1, [pc, #376]	; (800126c <MX_GPIO_Init+0x21c>)
 80010f2:	4b5f      	ldr	r3, [pc, #380]	; (8001270 <MX_GPIO_Init+0x220>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f002 fe65 	bl	8003dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80010fc:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <MX_GPIO_Init+0x224>)
 80010fe:	2200      	movs	r2, #0
 8001100:	2104      	movs	r1, #4
 8001102:	0018      	movs	r0, r3
 8001104:	f002 fe5f 	bl	8003dc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RT_Button_Pin Cruise_P_Pin Horn_Button_Pin Cruise_Button_Pin
                           Reverse_Button_Pin HL_Button_Pin Eco_Button_Pin LT_Button_Pin */
  GPIO_InitStruct.Pin = RT_Button_Pin|Cruise_P_Pin|Horn_Button_Pin|Cruise_Button_Pin
 8001108:	193b      	adds	r3, r7, r4
 800110a:	4a5b      	ldr	r2, [pc, #364]	; (8001278 <MX_GPIO_Init+0x228>)
 800110c:	601a      	str	r2, [r3, #0]
                          |Reverse_Button_Pin|HL_Button_Pin|Eco_Button_Pin|LT_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2288      	movs	r2, #136	; 0x88
 8001112:	0352      	lsls	r2, r2, #13
 8001114:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2202      	movs	r2, #2
 800111a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	193b      	adds	r3, r7, r4
 800111e:	4a51      	ldr	r2, [pc, #324]	; (8001264 <MX_GPIO_Init+0x214>)
 8001120:	0019      	movs	r1, r3
 8001122:	0010      	movs	r0, r2
 8001124:	f002 fcba 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RT_Led_Pin Cruise_Led_Pin User_LED_Pin HL_Led_Pin
                           Eco_Led_Pin */
  GPIO_InitStruct.Pin = RT_Led_Pin|Cruise_Led_Pin|User_LED_Pin|HL_Led_Pin
 8001128:	193b      	adds	r3, r7, r4
 800112a:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <MX_GPIO_Init+0x210>)
 800112c:	601a      	str	r2, [r3, #0]
                          |Eco_Led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2201      	movs	r2, #1
 8001132:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	193b      	adds	r3, r7, r4
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	193b      	adds	r3, r7, r4
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	193b      	adds	r3, r7, r4
 8001142:	4a48      	ldr	r2, [pc, #288]	; (8001264 <MX_GPIO_Init+0x214>)
 8001144:	0019      	movs	r1, r3
 8001146:	0010      	movs	r0, r2
 8001148:	f002 fca8 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reverse_Led_Pin LT_Led_Pin */
  GPIO_InitStruct.Pin = Reverse_Led_Pin|LT_Led_Pin;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	4a46      	ldr	r2, [pc, #280]	; (8001268 <MX_GPIO_Init+0x218>)
 8001150:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	2201      	movs	r2, #1
 8001156:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	193b      	adds	r3, r7, r4
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	193b      	adds	r3, r7, r4
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	193a      	adds	r2, r7, r4
 8001166:	2390      	movs	r3, #144	; 0x90
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f002 fc95 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ERROR_LED_Pin LCD_RST_Pin TP_CS_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|LCD_RST_Pin|TP_CS_Pin;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	4a3d      	ldr	r2, [pc, #244]	; (800126c <MX_GPIO_Init+0x21c>)
 8001176:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2201      	movs	r2, #1
 800117c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	193b      	adds	r3, r7, r4
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	193b      	adds	r3, r7, r4
 800118c:	4a38      	ldr	r2, [pc, #224]	; (8001270 <MX_GPIO_Init+0x220>)
 800118e:	0019      	movs	r1, r3
 8001190:	0010      	movs	r0, r2
 8001192:	f002 fc83 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Haz_Button_Pin */
  GPIO_InitStruct.Pin = Haz_Button_Pin;
 8001196:	193b      	adds	r3, r7, r4
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	0152      	lsls	r2, r2, #5
 800119c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	2288      	movs	r2, #136	; 0x88
 80011a2:	0352      	lsls	r2, r2, #13
 80011a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2202      	movs	r2, #2
 80011aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Haz_Button_GPIO_Port, &GPIO_InitStruct);
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	4a30      	ldr	r2, [pc, #192]	; (8001270 <MX_GPIO_Init+0x220>)
 80011b0:	0019      	movs	r1, r3
 80011b2:	0010      	movs	r0, r2
 80011b4:	f002 fc72 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cruise_M_Pin */
  GPIO_InitStruct.Pin = Cruise_M_Pin;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	0052      	lsls	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	2288      	movs	r2, #136	; 0x88
 80011c4:	0352      	lsls	r2, r2, #13
 80011c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c8:	193b      	adds	r3, r7, r4
 80011ca:	2202      	movs	r2, #2
 80011cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Cruise_M_GPIO_Port, &GPIO_InitStruct);
 80011ce:	193a      	adds	r2, r7, r4
 80011d0:	2390      	movs	r3, #144	; 0x90
 80011d2:	05db      	lsls	r3, r3, #23
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f002 fc60 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	2204      	movs	r2, #4
 80011e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	2201      	movs	r2, #1
 80011e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	193b      	adds	r3, r7, r4
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <MX_GPIO_Init+0x224>)
 80011f8:	0019      	movs	r1, r3
 80011fa:	0010      	movs	r0, r2
 80011fc:	f002 fc4e 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001200:	0021      	movs	r1, r4
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2210      	movs	r2, #16
 8001206:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2288      	movs	r2, #136	; 0x88
 800120c:	0352      	lsls	r2, r2, #13
 800120e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001216:	187b      	adds	r3, r7, r1
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <MX_GPIO_Init+0x220>)
 800121a:	0019      	movs	r1, r3
 800121c:	0010      	movs	r0, r2
 800121e:	f002 fc3d 	bl	8003a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2103      	movs	r1, #3
 8001226:	2005      	movs	r0, #5
 8001228:	f002 fc12 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800122c:	2005      	movs	r0, #5
 800122e:	f002 fc24 	bl	8003a7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2103      	movs	r1, #3
 8001236:	2006      	movs	r0, #6
 8001238:	f002 fc0a 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800123c:	2006      	movs	r0, #6
 800123e:	f002 fc1c 	bl	8003a7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2103      	movs	r1, #3
 8001246:	2007      	movs	r0, #7
 8001248:	f002 fc02 	bl	8003a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800124c:	2007      	movs	r0, #7
 800124e:	f002 fc14 	bl	8003a7a <HAL_NVIC_EnableIRQ>

}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b00b      	add	sp, #44	; 0x2c
 8001258:	bd90      	pop	{r4, r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	40021000 	.word	0x40021000
 8001260:	00004164 	.word	0x00004164
 8001264:	48000800 	.word	0x48000800
 8001268:	00000201 	.word	0x00000201
 800126c:	00004041 	.word	0x00004041
 8001270:	48000400 	.word	0x48000400
 8001274:	48000c00 	.word	0x48000c00
 8001278:	0000a68b 	.word	0x0000a68b

0800127c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dbb      	adds	r3, r7, #6
 8001286:	801a      	strh	r2, [r3, #0]
  // Call into C++ Domain
  CPP_HandleGPIOInterrupt(GPIO_Pin);
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	0018      	movs	r0, r3
 800128e:	f000 fd7f 	bl	8001d90 <CPP_HandleGPIOInterrupt>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <StartDefaultTask+0x20>)
 80012a6:	2120      	movs	r1, #32
 80012a8:	0018      	movs	r0, r3
 80012aa:	f002 fda9 	bl	8003e00 <HAL_GPIO_TogglePin>
    osDelay(500);
 80012ae:	23fa      	movs	r3, #250	; 0xfa
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	0018      	movs	r0, r3
 80012b4:	f008 f838 	bl	8009328 <osDelay>
    HAL_GPIO_TogglePin(User_LED_GPIO_Port, User_LED_Pin);
 80012b8:	e7f4      	b.n	80012a4 <StartDefaultTask+0x8>
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	48000800 	.word	0x48000800

080012c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012d2:	f001 fc69 	bl	8002ba8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40012c00 	.word	0x40012c00

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
  {
    HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <Error_Handler+0x20>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	0018      	movs	r0, r3
 80012f2:	f002 fd85 	bl	8003e00 <HAL_GPIO_TogglePin>
    osDelay(500);
 80012f6:	23fa      	movs	r3, #250	; 0xfa
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	0018      	movs	r0, r3
 80012fc:	f008 f814 	bl	8009328 <osDelay>
    HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 8001300:	e7f4      	b.n	80012ec <Error_Handler+0x8>
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	48000400 	.word	0x48000400

08001308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_MspInit+0x50>)
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_MspInit+0x50>)
 8001314:	2101      	movs	r1, #1
 8001316:	430a      	orrs	r2, r1
 8001318:	619a      	str	r2, [r3, #24]
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x50>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2201      	movs	r2, #1
 8001320:	4013      	ands	r3, r2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_MspInit+0x50>)
 8001328:	69da      	ldr	r2, [r3, #28]
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_MspInit+0x50>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	0549      	lsls	r1, r1, #21
 8001330:	430a      	orrs	r2, r1
 8001332:	61da      	str	r2, [r3, #28]
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_MspInit+0x50>)
 8001336:	69da      	ldr	r2, [r3, #28]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	055b      	lsls	r3, r3, #21
 800133c:	4013      	ands	r3, r2
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001342:	2302      	movs	r3, #2
 8001344:	425b      	negs	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	2103      	movs	r1, #3
 800134a:	0018      	movs	r0, r3
 800134c:	f002 fb80 	bl	8003a50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	2414      	movs	r4, #20
 8001366:	193b      	adds	r3, r7, r4
 8001368:	0018      	movs	r0, r3
 800136a:	2314      	movs	r3, #20
 800136c:	001a      	movs	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	f00b fe15 	bl	800cf9e <memset>
  if(hcan->Instance==CAN)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <HAL_CAN_MspInit+0xa0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d13a      	bne.n	80013f4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_CAN_MspInit+0xa4>)
 8001380:	69da      	ldr	r2, [r3, #28]
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_CAN_MspInit+0xa4>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0489      	lsls	r1, r1, #18
 8001388:	430a      	orrs	r2, r1
 800138a:	61da      	str	r2, [r3, #28]
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_CAN_MspInit+0xa4>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	049b      	lsls	r3, r3, #18
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_CAN_MspInit+0xa4>)
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_CAN_MspInit+0xa4>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	02c9      	lsls	r1, r1, #11
 80013a4:	430a      	orrs	r2, r1
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_CAN_MspInit+0xa4>)
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	02db      	lsls	r3, r3, #11
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	22c0      	movs	r2, #192	; 0xc0
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	0021      	movs	r1, r4
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	2202      	movs	r2, #2
 80013c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2203      	movs	r2, #3
 80013d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2204      	movs	r2, #4
 80013d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <HAL_CAN_MspInit+0xa8>)
 80013dc:	0019      	movs	r1, r3
 80013de:	0010      	movs	r0, r2
 80013e0:	f002 fb5c 	bl	8003a9c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 3, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2103      	movs	r1, #3
 80013e8:	201e      	movs	r0, #30
 80013ea:	f002 fb31 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80013ee:	201e      	movs	r0, #30
 80013f0:	f002 fb43 	bl	8003a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b00b      	add	sp, #44	; 0x2c
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	40006400 	.word	0x40006400
 8001400:	40021000 	.word	0x40021000
 8001404:	48000400 	.word	0x48000400

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b08b      	sub	sp, #44	; 0x2c
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	2414      	movs	r4, #20
 8001412:	193b      	adds	r3, r7, r4
 8001414:	0018      	movs	r0, r3
 8001416:	2314      	movs	r3, #20
 8001418:	001a      	movs	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	f00b fdbf 	bl	800cf9e <memset>
  if(hspi->Instance==SPI1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_SPI_MspInit+0x90>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d132      	bne.n	8001490 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_SPI_MspInit+0x94>)
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_SPI_MspInit+0x94>)
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0149      	lsls	r1, r1, #5
 8001434:	430a      	orrs	r2, r1
 8001436:	619a      	str	r2, [r3, #24]
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_SPI_MspInit+0x94>)
 800143a:	699a      	ldr	r2, [r3, #24]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	015b      	lsls	r3, r3, #5
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_SPI_MspInit+0x94>)
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_SPI_MspInit+0x94>)
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	0289      	lsls	r1, r1, #10
 8001450:	430a      	orrs	r2, r1
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_SPI_MspInit+0x94>)
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	029b      	lsls	r3, r3, #10
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001462:	0021      	movs	r1, r4
 8001464:	187b      	adds	r3, r7, r1
 8001466:	22e0      	movs	r2, #224	; 0xe0
 8001468:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2202      	movs	r2, #2
 800146e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2203      	movs	r2, #3
 800147a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	187a      	adds	r2, r7, r1
 8001484:	2390      	movs	r3, #144	; 0x90
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	0011      	movs	r1, r2
 800148a:	0018      	movs	r0, r3
 800148c:	f002 fb06 	bl	8003a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b00b      	add	sp, #44	; 0x2c
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	40013000 	.word	0x40013000
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <HAL_TIM_PWM_MspInit+0x34>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10b      	bne.n	80014ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_TIM_PWM_MspInit+0x38>)
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_TIM_PWM_MspInit+0x38>)
 80014b8:	2102      	movs	r1, #2
 80014ba:	430a      	orrs	r2, r1
 80014bc:	61da      	str	r2, [r3, #28]
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_TIM_PWM_MspInit+0x38>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40000400 	.word	0x40000400
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	240c      	movs	r4, #12
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	0018      	movs	r0, r3
 80014ea:	2314      	movs	r3, #20
 80014ec:	001a      	movs	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	f00b fd55 	bl	800cf9e <memset>
  if(htim->Instance==TIM3)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_TIM_MspPostInit+0x74>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d123      	bne.n	8001546 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_TIM_MspPostInit+0x78>)
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_TIM_MspPostInit+0x78>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	02c9      	lsls	r1, r1, #11
 8001508:	430a      	orrs	r2, r1
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_TIM_MspPostInit+0x78>)
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	02db      	lsls	r3, r3, #11
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800151a:	0021      	movs	r1, r4
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2220      	movs	r2, #32
 8001520:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2202      	movs	r2, #2
 8001526:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2201      	movs	r2, #1
 8001538:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	187b      	adds	r3, r7, r1
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_TIM_MspPostInit+0x7c>)
 800153e:	0019      	movs	r1, r3
 8001540:	0010      	movs	r0, r2
 8001542:	f002 faab 	bl	8003a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b009      	add	sp, #36	; 0x24
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40000400 	.word	0x40000400
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400

0800155c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_PCD_MspInit+0x38>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10d      	bne.n	800158a <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_PCD_MspInit+0x3c>)
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_PCD_MspInit+0x3c>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0409      	lsls	r1, r1, #16
 8001578:	430a      	orrs	r2, r1
 800157a:	61da      	str	r2, [r3, #28]
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_PCD_MspInit+0x3c>)
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40005c00 	.word	0x40005c00
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	0019      	movs	r1, r3
 80015b2:	200d      	movs	r0, #13
 80015b4:	f002 fa4c 	bl	8003a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80015b8:	200d      	movs	r0, #13
 80015ba:	f002 fa5e 	bl	8003a7a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_InitTick+0xa8>)
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_InitTick+0xa8>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0109      	lsls	r1, r1, #4
 80015c8:	430a      	orrs	r2, r1
 80015ca:	619a      	str	r2, [r3, #24]
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_InitTick+0xa8>)
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015da:	230c      	movs	r3, #12
 80015dc:	18fa      	adds	r2, r7, r3
 80015de:	2310      	movs	r3, #16
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f003 fa7d 	bl	8004ae4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ea:	f003 fa65 	bl	8004ab8 <HAL_RCC_GetPCLK1Freq>
 80015ee:	0003      	movs	r3, r0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	4914      	ldr	r1, [pc, #80]	; (8001648 <HAL_InitTick+0xac>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7fe fd90 	bl	800011c <__udivsi3>
 80015fc:	0003      	movs	r3, r0
 80015fe:	3b01      	subs	r3, #1
 8001600:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_InitTick+0xb0>)
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <HAL_InitTick+0xb4>)
 8001606:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_InitTick+0xb0>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <HAL_InitTick+0xb8>)
 800160c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_InitTick+0xb0>)
 8001610:	6a3a      	ldr	r2, [r7, #32]
 8001612:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_InitTick+0xb0>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_InitTick+0xb0>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_InitTick+0xb0>)
 8001622:	0018      	movs	r0, r3
 8001624:	f003 ff86 	bl	8005534 <HAL_TIM_Base_Init>
 8001628:	1e03      	subs	r3, r0, #0
 800162a:	d105      	bne.n	8001638 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <HAL_InitTick+0xb0>)
 800162e:	0018      	movs	r0, r3
 8001630:	f003 ffd8 	bl	80055e4 <HAL_TIM_Base_Start_IT>
 8001634:	0003      	movs	r3, r0
 8001636:	e000      	b.n	800163a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b00a      	add	sp, #40	; 0x28
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000
 8001648:	000f4240 	.word	0x000f4240
 800164c:	200031a4 	.word	0x200031a4
 8001650:	40012c00 	.word	0x40012c00
 8001654:	000003e7 	.word	0x000003e7

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>
	...

08001660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_SET);
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HardFault_Handler+0x14>)
 8001666:	2201      	movs	r2, #1
 8001668:	2101      	movs	r1, #1
 800166a:	0018      	movs	r0, r3
 800166c:	f002 fbab 	bl	8003dc6 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <HardFault_Handler+0x10>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	48000400 	.word	0x48000400

08001678 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Horn_Button_Pin);
 800167c:	2001      	movs	r0, #1
 800167e:	f002 fbdb 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Cruise_Button_Pin);
 8001682:	2002      	movs	r0, #2
 8001684:	f002 fbd8 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reverse_Button_Pin);
 8001692:	2008      	movs	r0, #8
 8001694:	f002 fbd0 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80016a2:	2010      	movs	r0, #16
 80016a4:	f002 fbc8 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HL_Button_Pin);
 80016a8:	2080      	movs	r0, #128	; 0x80
 80016aa:	f002 fbc5 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Eco_Led_Pin);
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	0018      	movs	r0, r3
 80016b4:	f002 fbc0 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Eco_Button_Pin);
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	0018      	movs	r0, r3
 80016be:	f002 fbbb 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LT_Button_Pin);
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	0018      	movs	r0, r3
 80016c8:	f002 fbb6 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Haz_Button_Pin);
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	015b      	lsls	r3, r3, #5
 80016d0:	0018      	movs	r0, r3
 80016d2:	f002 fbb1 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RT_Button_Pin);
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	019b      	lsls	r3, r3, #6
 80016da:	0018      	movs	r0, r3
 80016dc:	f002 fbac 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Cruise_P_Pin);
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	0018      	movs	r0, r3
 80016e6:	f002 fba7 	bl	8003e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f004 f816 	bl	8005728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	200031a4 	.word	0x200031a4

08001708 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <CEC_CAN_IRQHandler+0x18>)
 800170e:	0018      	movs	r0, r3
 8001710:	f001 fef9 	bl	8003506 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */
  CPP_HandleCANRxInterrupt();
 8001714:	f000 fb50 	bl	8001db8 <CPP_HandleCANRxInterrupt>
  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	20002b20 	.word	0x20002b20

08001724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800173a:	f00b fbc9 	bl	800ced0 <__errno>
 800173e:	0003      	movs	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
	return -1;
 8001744:	2301      	movs	r3, #1
 8001746:	425b      	negs	r3, r3
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001758:	2301      	movs	r3, #1
 800175a:	425a      	negs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffe5 	bl	8001730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001766:	e7fe      	b.n	8001766 <_exit+0x16>

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	18d3      	adds	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f00b fb9a 	bl	800ced0 <__errno>
 800179c:	0003      	movs	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	425b      	negs	r3, r3
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	18d2      	adds	r2, r2, r3
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b006      	add	sp, #24
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20004000 	.word	0x20004000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	200000b0 	.word	0x200000b0
 80017d0:	20003240 	.word	0x20003240

080017d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}

08001816 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b002      	add	sp, #8
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	4798      	blx	r3
    }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}

08001854 <CPP_UserSetup>:
{
    .name = "CAN Tx"
};

void CPP_UserSetup(void)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b0b1      	sub	sp, #196	; 0xc4
 8001858:	af00      	add	r7, sp, #0
  // Note: These binds really abuse the stack and we should figure out a way to avoid them
  //       since we are heavily constrained.
  {
    using namespace SolarGators::DataModules;
    // Left Side
    left_turn.action_ = std::bind(&SteeringController::ToggleLeftTurnSignal, &LightsState);
 800185a:	2114      	movs	r1, #20
 800185c:	187b      	adds	r3, r7, r1
 800185e:	4aa5      	ldr	r2, [pc, #660]	; (8001af4 <CPP_UserSetup+0x2a0>)
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	187b      	adds	r3, r7, r1
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	200c      	movs	r0, #12
 800186a:	183b      	adds	r3, r7, r0
 800186c:	187a      	adds	r2, r7, r1
 800186e:	ca12      	ldmia	r2!, {r1, r4}
 8001870:	c312      	stmia	r3!, {r1, r4}
 8001872:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	003b      	movs	r3, r7
 8001878:	221c      	movs	r2, #28
 800187a:	18ba      	adds	r2, r7, r2
 800187c:	1839      	adds	r1, r7, r0
 800187e:	0018      	movs	r0, r3
 8001880:	f000 faee 	bl	8001e60 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001884:	003a      	movs	r2, r7
 8001886:	4b9d      	ldr	r3, [pc, #628]	; (8001afc <CPP_UserSetup+0x2a8>)
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fb0e 	bl	8001eac <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise_minus.action_ = std::bind(&SteeringController::DecreaseCruiseSpeed, &LightsState);
 8001890:	2134      	movs	r1, #52	; 0x34
 8001892:	187b      	adds	r3, r7, r1
 8001894:	4a9a      	ldr	r2, [pc, #616]	; (8001b00 <CPP_UserSetup+0x2ac>)
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	202c      	movs	r0, #44	; 0x2c
 80018a0:	183b      	adds	r3, r7, r0
 80018a2:	187a      	adds	r2, r7, r1
 80018a4:	ca12      	ldmia	r2!, {r1, r4}
 80018a6:	c312      	stmia	r3!, {r1, r4}
 80018a8:	4b93      	ldr	r3, [pc, #588]	; (8001af8 <CPP_UserSetup+0x2a4>)
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ac:	2420      	movs	r4, #32
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	223c      	movs	r2, #60	; 0x3c
 80018b2:	18ba      	adds	r2, r7, r2
 80018b4:	1839      	adds	r1, r7, r0
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 fad2 	bl	8001e60 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80018bc:	193a      	adds	r2, r7, r4
 80018be:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <CPP_UserSetup+0x2b0>)
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 faf2 	bl	8001eac <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    eco.action_ = HandleEco;
 80018c8:	4a8f      	ldr	r2, [pc, #572]	; (8001b08 <CPP_UserSetup+0x2b4>)
 80018ca:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <CPP_UserSetup+0x2b8>)
 80018cc:	0011      	movs	r1, r2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 fb12 	bl	8001ef8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    headlights.action_ = HandleHeadLights;
 80018d4:	4a8e      	ldr	r2, [pc, #568]	; (8001b10 <CPP_UserSetup+0x2bc>)
 80018d6:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <CPP_UserSetup+0x2c0>)
 80018d8:	0011      	movs	r1, r2
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 fb0c 	bl	8001ef8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    hazards.action_ = std::bind(&SteeringController::ToggleHazards, &LightsState);
 80018e0:	2154      	movs	r1, #84	; 0x54
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	4a8c      	ldr	r2, [pc, #560]	; (8001b18 <CPP_UserSetup+0x2c4>)
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	204c      	movs	r0, #76	; 0x4c
 80018f0:	183b      	adds	r3, r7, r0
 80018f2:	187a      	adds	r2, r7, r1
 80018f4:	ca12      	ldmia	r2!, {r1, r4}
 80018f6:	c312      	stmia	r3!, {r1, r4}
 80018f8:	4b7f      	ldr	r3, [pc, #508]	; (8001af8 <CPP_UserSetup+0x2a4>)
 80018fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018fc:	2440      	movs	r4, #64	; 0x40
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	225c      	movs	r2, #92	; 0x5c
 8001902:	18ba      	adds	r2, r7, r2
 8001904:	1839      	adds	r1, r7, r0
 8001906:	0018      	movs	r0, r3
 8001908:	f000 faaa 	bl	8001e60 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 800190c:	193a      	adds	r2, r7, r4
 800190e:	4b83      	ldr	r3, [pc, #524]	; (8001b1c <CPP_UserSetup+0x2c8>)
 8001910:	0011      	movs	r1, r2
 8001912:	0018      	movs	r0, r3
 8001914:	f000 faca 	bl	8001eac <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    // Right Side
    right_turn.action_ = std::bind(&SteeringController::ToggleRightTurnSignal, &LightsState);
 8001918:	2174      	movs	r1, #116	; 0x74
 800191a:	187b      	adds	r3, r7, r1
 800191c:	4a80      	ldr	r2, [pc, #512]	; (8001b20 <CPP_UserSetup+0x2cc>)
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	206c      	movs	r0, #108	; 0x6c
 8001928:	183b      	adds	r3, r7, r0
 800192a:	187a      	adds	r2, r7, r1
 800192c:	ca12      	ldmia	r2!, {r1, r4}
 800192e:	c312      	stmia	r3!, {r1, r4}
 8001930:	4b71      	ldr	r3, [pc, #452]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001932:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001934:	2460      	movs	r4, #96	; 0x60
 8001936:	193b      	adds	r3, r7, r4
 8001938:	227c      	movs	r2, #124	; 0x7c
 800193a:	18ba      	adds	r2, r7, r2
 800193c:	1839      	adds	r1, r7, r0
 800193e:	0018      	movs	r0, r3
 8001940:	f000 fa8e 	bl	8001e60 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8001944:	193a      	adds	r2, r7, r4
 8001946:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <CPP_UserSetup+0x2d0>)
 8001948:	0011      	movs	r1, r2
 800194a:	0018      	movs	r0, r3
 800194c:	f000 faae 	bl	8001eac <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise_plus.action_ = std::bind(&SteeringController::IncreaseCruiseSpeed, &LightsState);
 8001950:	2194      	movs	r1, #148	; 0x94
 8001952:	187b      	adds	r3, r7, r1
 8001954:	4a74      	ldr	r2, [pc, #464]	; (8001b28 <CPP_UserSetup+0x2d4>)
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	208c      	movs	r0, #140	; 0x8c
 8001960:	183b      	adds	r3, r7, r0
 8001962:	187a      	adds	r2, r7, r1
 8001964:	ca12      	ldmia	r2!, {r1, r4}
 8001966:	c312      	stmia	r3!, {r1, r4}
 8001968:	4b63      	ldr	r3, [pc, #396]	; (8001af8 <CPP_UserSetup+0x2a4>)
 800196a:	229c      	movs	r2, #156	; 0x9c
 800196c:	18b9      	adds	r1, r7, r2
 800196e:	600b      	str	r3, [r1, #0]
 8001970:	2480      	movs	r4, #128	; 0x80
 8001972:	193b      	adds	r3, r7, r4
 8001974:	18ba      	adds	r2, r7, r2
 8001976:	1839      	adds	r1, r7, r0
 8001978:	0018      	movs	r0, r3
 800197a:	f000 fa71 	bl	8001e60 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 800197e:	193a      	adds	r2, r7, r4
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <CPP_UserSetup+0x2d8>)
 8001982:	0011      	movs	r1, r2
 8001984:	0018      	movs	r0, r3
 8001986:	f000 fa91 	bl	8001eac <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    horn.action_ = std::bind(&SteeringController::ToggleHorn, &LightsState);
 800198a:	21b4      	movs	r1, #180	; 0xb4
 800198c:	187b      	adds	r3, r7, r1
 800198e:	4a68      	ldr	r2, [pc, #416]	; (8001b30 <CPP_UserSetup+0x2dc>)
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	20ac      	movs	r0, #172	; 0xac
 800199a:	183b      	adds	r3, r7, r0
 800199c:	187a      	adds	r2, r7, r1
 800199e:	ca12      	ldmia	r2!, {r1, r4}
 80019a0:	c312      	stmia	r3!, {r1, r4}
 80019a2:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <CPP_UserSetup+0x2a4>)
 80019a4:	22bc      	movs	r2, #188	; 0xbc
 80019a6:	18b9      	adds	r1, r7, r2
 80019a8:	600b      	str	r3, [r1, #0]
 80019aa:	24a0      	movs	r4, #160	; 0xa0
 80019ac:	193b      	adds	r3, r7, r4
 80019ae:	18ba      	adds	r2, r7, r2
 80019b0:	1839      	adds	r1, r7, r0
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 fa54 	bl	8001e60 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80019b8:	193a      	adds	r2, r7, r4
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <CPP_UserSetup+0x2e0>)
 80019bc:	0011      	movs	r1, r2
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 fa74 	bl	8001eac <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise.action_ = HandleCruise;
 80019c4:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <CPP_UserSetup+0x2e4>)
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <CPP_UserSetup+0x2e8>)
 80019c8:	0011      	movs	r1, r2
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 fa94 	bl	8001ef8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    reverse.action_ = HandleReverse;
 80019d0:	4a5b      	ldr	r2, [pc, #364]	; (8001b40 <CPP_UserSetup+0x2ec>)
 80019d2:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <CPP_UserSetup+0x2f0>)
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 fa8e 	bl	8001ef8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
  }
  // Add to Button Group
  // Left side
  LightsState.AddButton(&left_turn);
 80019dc:	4a47      	ldr	r2, [pc, #284]	; (8001afc <CPP_UserSetup+0x2a8>)
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <CPP_UserSetup+0x2a4>)
 80019e0:	0011      	movs	r1, r2
 80019e2:	0018      	movs	r0, r3
 80019e4:	f005 fbd5 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise_minus);
 80019e8:	4a46      	ldr	r2, [pc, #280]	; (8001b04 <CPP_UserSetup+0x2b0>)
 80019ea:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <CPP_UserSetup+0x2a4>)
 80019ec:	0011      	movs	r1, r2
 80019ee:	0018      	movs	r0, r3
 80019f0:	f005 fbcf 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&eco);
 80019f4:	4a45      	ldr	r2, [pc, #276]	; (8001b0c <CPP_UserSetup+0x2b8>)
 80019f6:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <CPP_UserSetup+0x2a4>)
 80019f8:	0011      	movs	r1, r2
 80019fa:	0018      	movs	r0, r3
 80019fc:	f005 fbc9 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&headlights);
 8001a00:	4a44      	ldr	r2, [pc, #272]	; (8001b14 <CPP_UserSetup+0x2c0>)
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001a04:	0011      	movs	r1, r2
 8001a06:	0018      	movs	r0, r3
 8001a08:	f005 fbc3 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&hazards);
 8001a0c:	4a43      	ldr	r2, [pc, #268]	; (8001b1c <CPP_UserSetup+0x2c8>)
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001a10:	0011      	movs	r1, r2
 8001a12:	0018      	movs	r0, r3
 8001a14:	f005 fbbd 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  // Right side
  LightsState.AddButton(&right_turn);
 8001a18:	4a42      	ldr	r2, [pc, #264]	; (8001b24 <CPP_UserSetup+0x2d0>)
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001a1c:	0011      	movs	r1, r2
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f005 fbb7 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise_plus);
 8001a24:	4a41      	ldr	r2, [pc, #260]	; (8001b2c <CPP_UserSetup+0x2d8>)
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001a28:	0011      	movs	r1, r2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f005 fbb1 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&horn);
 8001a30:	4a40      	ldr	r2, [pc, #256]	; (8001b34 <CPP_UserSetup+0x2e0>)
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f005 fbab 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise);
 8001a3c:	4a3f      	ldr	r2, [pc, #252]	; (8001b3c <CPP_UserSetup+0x2e8>)
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f005 fba5 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&reverse);
 8001a48:	4a3e      	ldr	r2, [pc, #248]	; (8001b44 <CPP_UserSetup+0x2f0>)
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <CPP_UserSetup+0x2a4>)
 8001a4c:	0011      	movs	r1, r2
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f005 fb9f 	bl	8007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  // Load the CAN Controller
  CANController.AddRxModule(&Bms);
 8001a54:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <CPP_UserSetup+0x2f4>)
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <CPP_UserSetup+0x2f8>)
 8001a58:	0011      	movs	r1, r2
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f006 f8c7 	bl	8007bee <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  CANController.AddRxModule(&McRx0);
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <CPP_UserSetup+0x2fc>)
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <CPP_UserSetup+0x2f8>)
 8001a64:	0011      	movs	r1, r2
 8001a66:	0018      	movs	r0, r3
 8001a68:	f006 f8c1 	bl	8007bee <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  // Start Thread that Handles Turn Signal LEDs
  signal_timer_id = osTimerNew((osThreadFunc_t)UpdateSignals, osTimerPeriodic, NULL, &signal_timer_attr);
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <CPP_UserSetup+0x300>)
 8001a6e:	483a      	ldr	r0, [pc, #232]	; (8001b58 <CPP_UserSetup+0x304>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	2101      	movs	r1, #1
 8001a74:	f007 fc98 	bl	80093a8 <osTimerNew>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <CPP_UserSetup+0x308>)
 8001a7c:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <CPP_UserSetup+0x308>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <CPP_UserSetup+0x236>
  {
      Error_Handler();
 8001a86:	f7ff fc2d 	bl	80012e4 <Error_Handler>
  }
  osTimerStart(signal_timer_id, 500);
 8001a8a:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <CPP_UserSetup+0x308>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	22fa      	movs	r2, #250	; 0xfa
 8001a90:	0052      	lsls	r2, r2, #1
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f007 fd0f 	bl	80094b8 <osTimerStart>
  // Start Thread that updates screen
  ui_thread_id = osThreadNew((osThreadFunc_t)UpdateUI, NULL, &ui_thread_attributes);
 8001a9a:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <CPP_UserSetup+0x30c>)
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <CPP_UserSetup+0x310>)
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f007 fb99 	bl	80091d8 <osThreadNew>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <CPP_UserSetup+0x314>)
 8001aaa:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <CPP_UserSetup+0x308>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <CPP_UserSetup+0x264>
  {
      Error_Handler();
 8001ab4:	f7ff fc16 	bl	80012e4 <Error_Handler>
  }
  // Start Thread that sends CAN Data
  can_tx_timer_id = osTimerNew((osThreadFunc_t)SendCanMsgs, osTimerPeriodic, NULL, &can_tx_timer_attr);
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <CPP_UserSetup+0x318>)
 8001aba:	482d      	ldr	r0, [pc, #180]	; (8001b70 <CPP_UserSetup+0x31c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	2101      	movs	r1, #1
 8001ac0:	f007 fc72 	bl	80093a8 <osTimerNew>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <CPP_UserSetup+0x320>)
 8001ac8:	601a      	str	r2, [r3, #0]
  if (can_tx_timer_id == NULL)
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <CPP_UserSetup+0x320>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <CPP_UserSetup+0x282>
  {
      Error_Handler();
 8001ad2:	f7ff fc07 	bl	80012e4 <Error_Handler>
  }
  CANController.Init();
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <CPP_UserSetup+0x2f8>)
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f005 ff79 	bl	80079d0 <_ZN11SolarGators7Drivers9CANDriver4InitEv>
  osTimerStart(can_tx_timer_id, 50);
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <CPP_UserSetup+0x320>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2132      	movs	r1, #50	; 0x32
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f007 fce7 	bl	80094b8 <osTimerStart>
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b031      	add	sp, #196	; 0xc4
 8001af0:	bd90      	pop	{r4, r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	08006ded 	.word	0x08006ded
 8001af8:	200000b4 	.word	0x200000b4
 8001afc:	20000a58 	.word	0x20000a58
 8001b00:	08007041 	.word	0x08007041
 8001b04:	20000a84 	.word	0x20000a84
 8001b08:	08001dd1 	.word	0x08001dd1
 8001b0c:	20000ab0 	.word	0x20000ab0
 8001b10:	08001df5 	.word	0x08001df5
 8001b14:	20000adc 	.word	0x20000adc
 8001b18:	08006ec5 	.word	0x08006ec5
 8001b1c:	20000b08 	.word	0x20000b08
 8001b20:	08006e59 	.word	0x08006e59
 8001b24:	20000b34 	.word	0x20000b34
 8001b28:	08007015 	.word	0x08007015
 8001b2c:	20000b60 	.word	0x20000b60
 8001b30:	08006fe9 	.word	0x08006fe9
 8001b34:	20000b8c 	.word	0x20000b8c
 8001b38:	08001e19 	.word	0x08001e19
 8001b3c:	20000bb8 	.word	0x20000bb8
 8001b40:	08001e3d 	.word	0x08001e3d
 8001b44:	20000be4 	.word	0x20000be4
 8001b48:	200005f0 	.word	0x200005f0
 8001b4c:	200006f8 	.word	0x200006f8
 8001b50:	20000674 	.word	0x20000674
 8001b54:	20000004 	.word	0x20000004
 8001b58:	08001b79 	.word	0x08001b79
 8001b5c:	20000c88 	.word	0x20000c88
 8001b60:	0800dc00 	.word	0x0800dc00
 8001b64:	08001c81 	.word	0x08001c81
 8001b68:	20000c8c 	.word	0x20000c8c
 8001b6c:	20000014 	.word	0x20000014
 8001b70:	08001d59 	.word	0x08001d59
 8001b74:	2000114c 	.word	0x2000114c

08001b78 <_Z13UpdateSignalsv>:

void UpdateSignals()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  osMutexAcquire(LightsState.mutex_id_, osWaitForever);
 8001b7c:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4252      	negs	r2, r2
 8001b84:	0011      	movs	r1, r2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f007 fea2 	bl	80098d0 <osMutexAcquire>
  if(LightsState.GetHazardsStatus())
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f004 ff70 	bl	8006a74 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d008      	beq.n	8001baa <_Z13UpdateSignalsv+0x32>
  {
    lt_indicator.Toggle();
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <_Z13UpdateSignalsv+0xfc>)
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f006 ff7d 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
    rt_indicator.Toggle();
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <_Z13UpdateSignalsv+0x100>)
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f006 ff79 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
 8001ba8:	e014      	b.n	8001bd4 <_Z13UpdateSignalsv+0x5c>
  }
  else if(LightsState.GetRightTurnStatus())
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001bac:	0018      	movs	r0, r3
 8001bae:	f004 ff56 	bl	8006a5e <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 8001bb2:	1e03      	subs	r3, r0, #0
 8001bb4:	d004      	beq.n	8001bc0 <_Z13UpdateSignalsv+0x48>
    rt_indicator.Toggle();
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <_Z13UpdateSignalsv+0x100>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f006 ff6e 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
 8001bbe:	e009      	b.n	8001bd4 <_Z13UpdateSignalsv+0x5c>
  else if(LightsState.GetLeftTurnStatus())
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f004 ff40 	bl	8006a48 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d003      	beq.n	8001bd4 <_Z13UpdateSignalsv+0x5c>
    lt_indicator.Toggle();
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <_Z13UpdateSignalsv+0xfc>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f006 ff63 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
  if(!LightsState.GetHazardsStatus() && !LightsState.GetRightTurnStatus())
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f004 ff4c 	bl	8006a74 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	001a      	movs	r2, r3
 8001be0:	2301      	movs	r3, #1
 8001be2:	4053      	eors	r3, r2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <_Z13UpdateSignalsv+0x8c>
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001bec:	0018      	movs	r0, r3
 8001bee:	f004 ff36 	bl	8006a5e <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	4053      	eors	r3, r2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <_Z13UpdateSignalsv+0x8c>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <_Z13UpdateSignalsv+0x8e>
 8001c04:	2300      	movs	r3, #0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <_Z13UpdateSignalsv+0xa0>
    HAL_GPIO_WritePin(RT_Led_GPIO_Port, RT_Led_Pin, GPIO_PIN_RESET);
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	01db      	lsls	r3, r3, #7
 8001c0e:	481b      	ldr	r0, [pc, #108]	; (8001c7c <_Z13UpdateSignalsv+0x104>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	0019      	movs	r1, r3
 8001c14:	f002 f8d7 	bl	8003dc6 <HAL_GPIO_WritePin>
  if(!LightsState.GetHazardsStatus() && !LightsState.GetLeftTurnStatus())
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f004 ff2a 	bl	8006a74 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8001c20:	0003      	movs	r3, r0
 8001c22:	001a      	movs	r2, r3
 8001c24:	2301      	movs	r3, #1
 8001c26:	4053      	eors	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <_Z13UpdateSignalsv+0xd0>
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001c30:	0018      	movs	r0, r3
 8001c32:	f004 ff09 	bl	8006a48 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 8001c36:	0003      	movs	r3, r0
 8001c38:	001a      	movs	r2, r3
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4053      	eors	r3, r2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <_Z13UpdateSignalsv+0xd0>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <_Z13UpdateSignalsv+0xd2>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <_Z13UpdateSignalsv+0xe6>
      HAL_GPIO_WritePin(LT_Led_GPIO_Port, LT_Led_Pin, GPIO_PIN_RESET);
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	0099      	lsls	r1, r3, #2
 8001c52:	2390      	movs	r3, #144	; 0x90
 8001c54:	05db      	lsls	r3, r3, #23
 8001c56:	2200      	movs	r2, #0
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f002 f8b4 	bl	8003dc6 <HAL_GPIO_WritePin>
  osMutexRelease(LightsState.mutex_id_);
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <_Z13UpdateSignalsv+0xf8>)
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f007 fe90 	bl	8009988 <osMutexRelease>
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	200000b4 	.word	0x200000b4
 8001c74:	20000c10 	.word	0x20000c10
 8001c78:	20000c4c 	.word	0x20000c4c
 8001c7c:	48000800 	.word	0x48000800

08001c80 <_Z8UpdateUIv>:

void UpdateUI()
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
  HY28b lcd(&hspi1, false);
 8001c86:	4931      	ldr	r1, [pc, #196]	; (8001d4c <_Z8UpdateUIv+0xcc>)
 8001c88:	2410      	movs	r4, #16
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f006 fd18 	bl	80086c4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb>
  Drivers::UI gui(HY28b::BLACK, lcd);
 8001c94:	193a      	adds	r2, r7, r4
 8001c96:	003b      	movs	r3, r7
 8001c98:	2100      	movs	r1, #0
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f006 ff2a 	bl	8008af4 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b>
  uint8_t i = 0;
 8001ca0:	231f      	movs	r3, #31
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
  while(1)
  {
    // TODO: Remove this was for testing
    gui.UpdateSpeed(i++);
 8001ca8:	241f      	movs	r4, #31
 8001caa:	193b      	adds	r3, r7, r4
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	193a      	adds	r2, r7, r4
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	7011      	strb	r1, [r2, #0]
 8001cb4:	003a      	movs	r2, r7
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	0010      	movs	r0, r2
 8001cba:	f006 ff95 	bl	8008be8 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh>
    if(i > 99)
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b63      	cmp	r3, #99	; 0x63
 8001cc4:	d902      	bls.n	8001ccc <_Z8UpdateUIv+0x4c>
      i = 0;
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
    osMutexAcquire(McRx0.mutex_id_, osWaitForever);
 8001ccc:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <_Z8UpdateUIv+0xd0>)
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4252      	negs	r2, r2
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f007 fdfa 	bl	80098d0 <osMutexAcquire>
    // Get Speed from Mitsuba
    uint16_t rpm = McRx0.GetMotorRPM();
 8001cdc:	231c      	movs	r3, #28
 8001cde:	18fc      	adds	r4, r7, r3
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <_Z8UpdateUIv+0xd0>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f004 fbad 	bl	8006442 <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	8023      	strh	r3, [r4, #0]
    // Get Current from Mitsuba
    gui.UpdateCurrent(McRx0.GetBatteryCurrent());
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <_Z8UpdateUIv+0xd0>)
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f004 fb9c 	bl	800642c <_ZNK11SolarGators11DataModules10MitsubaRx017GetBatteryCurrentEv>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	003b      	movs	r3, r7
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f006 ffc3 	bl	8008c88 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh>
    osMutexRelease(McRx0.mutex_id_);
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_Z8UpdateUIv+0xd0>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f007 fe3e 	bl	8009988 <osMutexRelease>
    // Get SOC from BMS
    osMutexAcquire(Bms.mutex_id_, osWaitForever);
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_Z8UpdateUIv+0xd4>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4252      	negs	r2, r2
 8001d14:	0011      	movs	r1, r2
 8001d16:	0018      	movs	r0, r3
 8001d18:	f007 fdda 	bl	80098d0 <osMutexAcquire>
    gui.UpdateSOC(Bms.GetPackVoltage());
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <_Z8UpdateUIv+0xd4>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f004 fd50 	bl	80067c4 <_ZN11SolarGators11DataModules8OrionBMS14GetPackVoltageEv>
 8001d24:	1c03      	adds	r3, r0, #0
 8001d26:	1c18      	adds	r0, r3, #0
 8001d28:	f7fe fa84 	bl	8000234 <__aeabi_f2uiz>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	003b      	movs	r3, r7
 8001d32:	0011      	movs	r1, r2
 8001d34:	0018      	movs	r0, r3
 8001d36:	f006 fff7 	bl	8008d28 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh>
    osMutexRelease(Bms.mutex_id_);
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <_Z8UpdateUIv+0xd4>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f007 fe22 	bl	8009988 <osMutexRelease>
    osDelay(100);
 8001d44:	2064      	movs	r0, #100	; 0x64
 8001d46:	f007 faef 	bl	8009328 <osDelay>
  }
 8001d4a:	e7ad      	b.n	8001ca8 <_Z8UpdateUIv+0x28>
 8001d4c:	20002d90 	.word	0x20002d90
 8001d50:	20000674 	.word	0x20000674
 8001d54:	200005f0 	.word	0x200005f0

08001d58 <_Z11SendCanMsgsv>:
}

void SendCanMsgs()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  CANController.Send(&LightsState);
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <_Z11SendCanMsgsv+0x2c>)
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <_Z11SendCanMsgsv+0x30>)
 8001d60:	0011      	movs	r1, r2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f005 fef3 	bl	8007b4e <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
  McReq.SetRequestAllFrames();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_Z11SendCanMsgsv+0x34>)
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f004 fa96 	bl	800629c <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>
  CANController.Send(&McReq);
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <_Z11SendCanMsgsv+0x34>)
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <_Z11SendCanMsgsv+0x30>)
 8001d74:	0011      	movs	r1, r2
 8001d76:	0018      	movs	r0, r3
 8001d78:	f005 fee9 	bl	8007b4e <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	200000b4 	.word	0x200000b4
 8001d88:	200006f8 	.word	0x200006f8
 8001d8c:	20000578 	.word	0x20000578

08001d90 <CPP_HandleGPIOInterrupt>:

void CPP_HandleGPIOInterrupt(uint16_t GPIO_Pin)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	0002      	movs	r2, r0
 8001d98:	1dbb      	adds	r3, r7, #6
 8001d9a:	801a      	strh	r2, [r3, #0]
  LightsState.HandlePress(GPIO_Pin);
 8001d9c:	1dbb      	adds	r3, r7, #6
 8001d9e:	881a      	ldrh	r2, [r3, #0]
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <CPP_HandleGPIOInterrupt+0x24>)
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f005 f9da 	bl	800715e <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	200000b4 	.word	0x200000b4

08001db8 <CPP_HandleCANRxInterrupt>:

void CPP_HandleCANRxInterrupt()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  CANController.SetRxFlag();
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <CPP_HandleCANRxInterrupt+0x14>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f005 ff28 	bl	8007c14 <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	200006f8 	.word	0x200006f8

08001dd0 <_Z9HandleEcov>:

void HandleEco()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  LightsState.ToggleEco();
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_Z9HandleEcov+0x1c>)
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f005 f9ab 	bl	8007132 <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv>
  eco_indicator.Toggle();
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <_Z9HandleEcov+0x20>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f006 fe5b 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	200000b4 	.word	0x200000b4
 8001df0:	20000c24 	.word	0x20000c24

08001df4 <_Z16HandleHeadLightsv>:
void HandleHeadLights()
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  LightsState.ToggleHeadlights();
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <_Z16HandleHeadLightsv+0x1c>)
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f005 f8c6 	bl	8006f8c <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>
  hl_indicator.Toggle();
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <_Z16HandleHeadLightsv+0x20>)
 8001e02:	0018      	movs	r0, r3
 8001e04:	f006 fe49 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	200000b4 	.word	0x200000b4
 8001e14:	20000c38 	.word	0x20000c38

08001e18 <_Z12HandleCruisev>:
void HandleCruise()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  LightsState.ToggleCruise();
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <_Z12HandleCruisev+0x1c>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f005 f886 	bl	8006f30 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>
  cr_indicator.Toggle();
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <_Z12HandleCruisev+0x20>)
 8001e26:	0018      	movs	r0, r3
 8001e28:	f006 fe37 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	200000b4 	.word	0x200000b4
 8001e38:	20000c60 	.word	0x20000c60

08001e3c <_Z13HandleReversev>:
void HandleReverse()
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  LightsState.ToggleReverse();
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <_Z13HandleReversev+0x1c>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f005 f947 	bl	80070d6 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>
  rev_indicator.Toggle();
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <_Z13HandleReversev+0x20>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f006 fe25 	bl	8008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	200000b4 	.word	0x200000b4
 8001e5c:	20000c74 	.word	0x20000c74

08001e60 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f861 	bl	8001f36 <_ZSt7forwardIMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8001e74:	0004      	movs	r4, r0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f865 	bl	8001f48 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0021      	movs	r1, r4
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 f868 	bl	8001f5a <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1IJS5_EEEOS4_DpOT_>
    }
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b005      	add	sp, #20
 8001e90:	bd90      	pop	{r4, r7, pc}

08001e92 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff fcc6 	bl	800182e <_ZNSt14_Function_baseD1Ev>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b08b      	sub	sp, #44	; 0x2c
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 f89c 	bl	8001ff6 <_ZSt7forwardISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	241c      	movs	r4, #28
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	0011      	movs	r1, r2
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 f876 	bl	8001fb8 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>
 8001ecc:	193a      	adds	r2, r7, r4
 8001ece:	240c      	movs	r4, #12
 8001ed0:	193b      	adds	r3, r7, r4
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f000 f897 	bl	8002008 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_>
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	0011      	movs	r1, r2
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 f8b9 	bl	8002058 <_ZNSt8functionIFvvEE4swapERS1_>
 8001ee6:	193b      	adds	r3, r7, r4
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7ff ffd2 	bl	8001e92 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8001eee:	687b      	ldr	r3, [r7, #4]
	}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b00b      	add	sp, #44	; 0x2c
 8001ef6:	bd90      	pop	{r4, r7, pc}

08001ef8 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>:
	operator=(_Functor&& __f)
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f000 f8c8 	bl	800209a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	2408      	movs	r4, #8
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	0011      	movs	r1, r2
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f8ca 	bl	80020ac <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	193b      	adds	r3, r7, r4
 8001f1c:	0011      	movs	r1, r2
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 f89a 	bl	8002058 <_ZNSt8functionIFvvEE4swapERS1_>
 8001f24:	193b      	adds	r3, r7, r4
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7ff ffb3 	bl	8001e92 <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8001f2c:	687b      	ldr	r3, [r7, #4]
	}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b007      	add	sp, #28
 8001f34:	bd90      	pop	{r4, r7, pc}

08001f36 <_ZSt7forwardIMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1IJS5_EEEOS4_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 8001f5a:	b590      	push	{r4, r7, lr}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 f8c7 	bl	80020fc <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	ca03      	ldmia	r2!, {r0, r1}
 8001f74:	c303      	stmia	r3!, {r0, r1}
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7ff ffe2 	bl	8001f48 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001f84:	0003      	movs	r3, r0
 8001f86:	0019      	movs	r1, r3
 8001f88:	0020      	movs	r0, r4
 8001f8a:	f000 f8c0 	bl	800210e <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1IJS3_ELb1EEEDpOT_>
	{ }
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b005      	add	sp, #20
 8001f96:	bd90      	pop	{r4, r7, pc}

08001f98 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 f8cd 	bl	8002148 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>:
      _Bind(_Bind&& __b)
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f899 	bl	80020fc <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	ca03      	ldmia	r2!, {r0, r1}
 8001fd0:	c303      	stmia	r3!, {r0, r1}
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3308      	adds	r3, #8
 8001fd6:	001c      	movs	r4, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	3308      	adds	r3, #8
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f8aa 	bl	8002136 <_ZSt4moveIRSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	f7ff ffd6 	bl	8001f98 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>
      { }
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b003      	add	sp, #12
 8001ff4:	bd90      	pop	{r4, r7, pc}

08001ff6 <_ZSt7forwardISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b002      	add	sp, #8
 8002006:	bd80      	pop	{r7, pc}

08002008 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff fbfe 	bl	8001816 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 f8ab 	bl	8002178 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE21_M_not_empty_functionIS9_EEbRKT_>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d00f      	beq.n	8002046 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x3e>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002026:	687c      	ldr	r4, [r7, #4]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 f8ad 	bl	800218a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8002030:	0003      	movs	r3, r0
 8002032:	0019      	movs	r1, r3
 8002034:	0020      	movs	r0, r4
 8002036:	f000 f8b1 	bl	800219c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_>
	    _M_invoker = &_My_handler::_M_invoke;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x48>)
 800203e:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x4c>)
 8002044:	609a      	str	r2, [r3, #8]
	  }
      }
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b003      	add	sp, #12
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	080021c3 	.word	0x080021c3
 8002054:	080021e3 	.word	0x080021e3

08002058 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	0011      	movs	r1, r2
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f8f2 	bl	8002252 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3308      	adds	r3, #8
 8002072:	001a      	movs	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	3308      	adds	r3, #8
 8002078:	0019      	movs	r1, r3
 800207a:	0010      	movs	r0, r2
 800207c:	f000 f914 	bl	80022a8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	330c      	adds	r3, #12
 8002084:	001a      	movs	r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	330c      	adds	r3, #12
 800208a:	0019      	movs	r1, r3
 800208c:	0010      	movs	r0, r2
 800208e:	f000 f935 	bl	80022fc <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}

0800209a <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZNSt8functionIFvvEEC1IPS0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7ff fbac 	bl	8001816 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 f93c 	bl	800233e <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d00f      	beq.n	80020ea <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x3e>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80020ca:	687c      	ldr	r4, [r7, #4]
 80020cc:	003b      	movs	r3, r7
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f941 	bl	8002356 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 80020d4:	0003      	movs	r3, r0
 80020d6:	0019      	movs	r1, r3
 80020d8:	0020      	movs	r0, r4
 80020da:	f000 f945 	bl	8002368 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x48>)
 80020e2:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x4c>)
 80020e8:	609a      	str	r2, [r3, #8]
      }
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b003      	add	sp, #12
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	0800238f 	.word	0x0800238f
 80020f8:	080023ad 	.word	0x080023ad

080020fc <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1IJS3_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 800210e:	b590      	push	{r4, r7, lr}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 8002118:	687c      	ldr	r4, [r7, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff ff13 	bl	8001f48 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002122:	0003      	movs	r3, r0
 8002124:	0019      	movs	r1, r3
 8002126:	0020      	movs	r0, r4
 8002128:	f000 f96f 	bl	800240a <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1IS3_EEOT_>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b003      	add	sp, #12
 8002134:	bd90      	pop	{r4, r7, pc}

08002136 <_ZSt4moveIRSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002152:	687c      	ldr	r4, [r7, #4]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f96b 	bl	8002432 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>
 800215c:	0003      	movs	r3, r0
 800215e:	0018      	movs	r0, r3
 8002160:	f7ff fef2 	bl	8001f48 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002164:	0003      	movs	r3, r0
 8002166:	0019      	movs	r1, r3
 8002168:	0020      	movs	r0, r4
 800216a:	f000 f96f 	bl	800244c <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b003      	add	sp, #12
 8002176:	bd90      	pop	{r4, r7, pc}

08002178 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE21_M_not_empty_functionIS9_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002180:	2301      	movs	r3, #1
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff ffee 	bl	800218a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 80021ae:	0001      	movs	r1, r0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1c22      	adds	r2, r4, #0
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f95b 	bl	8002470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	b005      	add	sp, #20
 80021c0:	bd90      	pop	{r4, r7, pc}

080021c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f96e 	bl	80024ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>
 80021d2:	0003      	movs	r3, r0
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f978 	bl	80024ca <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEclIJEvEET0_DpOT_>
      }
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80021e2:	b5b0      	push	{r4, r5, r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d018      	beq.n	800222a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x48>
 80021f8:	dc1d      	bgt.n	8002236 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x22>
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d00c      	beq.n	800221c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x3a>
 8002202:	e018      	b.n	8002236 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f96f 	bl	80024ea <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 800220c:	0004      	movs	r4, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f94c 	bl	80024ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>
 8002216:	0003      	movs	r3, r0
 8002218:	6023      	str	r3, [r4, #0]
	      break;
 800221a:	e00c      	b.n	8002236 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1c2a      	adds	r2, r5, #0
 8002222:	0018      	movs	r0, r3
 8002224:	f000 f96e 	bl	8002504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>
	      break;
 8002228:	e005      	b.n	8002236 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1c21      	adds	r1, r4, #0
 800222e:	0018      	movs	r0, r3
 8002230:	f000 f988 	bl	8002544 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8002234:	46c0      	nop			; (mov r8, r8)
	  return false;
 8002236:	2300      	movs	r3, #0
	}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b006      	add	sp, #24
 800223e:	bdb0      	pop	{r4, r5, r7, pc}

08002240 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8002252:	b590      	push	{r4, r7, lr}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff ffee 	bl	8002240 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002264:	0002      	movs	r2, r0
 8002266:	2408      	movs	r4, #8
 8002268:	193b      	adds	r3, r7, r4
 800226a:	ca03      	ldmia	r2!, {r0, r1}
 800226c:	c303      	stmia	r3!, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	0018      	movs	r0, r3
 8002272:	f7ff ffe5 	bl	8002240 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002276:	0002      	movs	r2, r0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	ca03      	ldmia	r2!, {r0, r1}
 800227c:	c303      	stmia	r3!, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800227e:	193b      	adds	r3, r7, r4
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff ffdd 	bl	8002240 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002286:	0002      	movs	r2, r0
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	ca03      	ldmia	r2!, {r0, r1}
 800228c:	c303      	stmia	r3!, {r0, r1}
    }
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b005      	add	sp, #20
 8002294:	bd90      	pop	{r4, r7, pc}

08002296 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ffee 	bl	8002296 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80022ba:	0003      	movs	r3, r0
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7ff ffe7 	bl	8002296 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80022c8:	0003      	movs	r3, r0
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80022d0:	230c      	movs	r3, #12
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff ffde 	bl	8002296 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80022da:	0003      	movs	r3, r0
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	601a      	str	r2, [r3, #0]
    }
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b004      	add	sp, #16
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff ffee 	bl	80022ea <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800230e:	0003      	movs	r3, r0
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff ffe7 	bl	80022ea <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800231c:	0003      	movs	r3, r0
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002324:	230c      	movs	r3, #12
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ffde 	bl	80022ea <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800232e:	0003      	movs	r3, r0
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	601a      	str	r2, [r3, #0]
    }
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	4193      	sbcs	r3, r2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}

08002356 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ffee 	bl	8002356 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 800237a:	0001      	movs	r1, r0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1c22      	adds	r2, r4, #0
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f8f5 	bl	8002570 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b005      	add	sp, #20
 800238c:	bd90      	pop	{r4, r7, pc}

0800238e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 f905 	bl	80025a8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 800239e:	0003      	movs	r3, r0
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4798      	blx	r3
      }
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d018      	beq.n	80023f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x48>
 80023c2:	dc1d      	bgt.n	8002400 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d00c      	beq.n	80023e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3a>
 80023cc:	e018      	b.n	8002400 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 f8fd 	bl	80025d0 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 80023d6:	0004      	movs	r4, r0
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 f8e4 	bl	80025a8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80023e0:	0003      	movs	r3, r0
 80023e2:	6023      	str	r3, [r4, #0]
	      break;
 80023e4:	e00c      	b.n	8002400 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1c2a      	adds	r2, r5, #0
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f8fc 	bl	80025ea <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 80023f2:	e005      	b.n	8002400 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1c21      	adds	r1, r4, #0
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 f912 	bl	8002622 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80023fe:	46c0      	nop			; (mov r8, r8)
	  return false;
 8002400:	2300      	movs	r3, #0
	}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b006      	add	sp, #24
 8002408:	bdb0      	pop	{r4, r5, r7, pc}

0800240a <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8002414:	687c      	ldr	r4, [r7, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	0018      	movs	r0, r3
 800241a:	f7ff fd95 	bl	8001f48 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 800241e:	0003      	movs	r3, r0
 8002420:	0019      	movs	r1, r3
 8002422:	0020      	movs	r0, r4
 8002424:	f000 f812 	bl	800244c <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b003      	add	sp, #12
 8002430:	bd90      	pop	{r4, r7, pc}

08002432 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f8fe 	bl	800263e <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EE7_M_headERS4_>
 8002442:	0003      	movs	r3, r0
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff fd75 	bl	8001f48 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 800245e:	0003      	movs	r3, r0
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	701a      	strb	r2, [r3, #0]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff fe82 	bl	800218a <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8002486:	0005      	movs	r5, r0
 8002488:	200c      	movs	r0, #12
 800248a:	f00a fc8b 	bl	800cda4 <_Znwj>
 800248e:	0003      	movs	r3, r0
 8002490:	001c      	movs	r4, r3
 8002492:	0029      	movs	r1, r5
 8002494:	0020      	movs	r0, r4
 8002496:	f7ff fd8f 	bl	8001fb8 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 f824 	bl	80024ea <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 80024a2:	0003      	movs	r3, r0
 80024a4:	601c      	str	r4, [r3, #0]
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bdb0      	pop	{r4, r5, r7, pc}

080024ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 f8c9 	bl	8002650 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>
 80024be:	0003      	movs	r3, r0
 80024c0:	681b      	ldr	r3, [r3, #0]
	}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b002      	add	sp, #8
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEclIJEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 80024ca:	b590      	push	{r4, r7, lr}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 80024d2:	f000 f8ca 	bl	800266a <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	      _Bound_indexes());
 80024d6:	2308      	movs	r3, #8
 80024d8:	18f9      	adds	r1, r7, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	1c22      	adds	r2, r4, #0
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f8c8 	bl	8002674 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b005      	add	sp, #20
 80024e8:	bd90      	pop	{r4, r7, pc}

080024ea <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>:
      _M_access()
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff f97c 	bl	80017f2 <_ZNSt9_Any_data9_M_accessEv>
 80024fa:	0003      	movs	r3, r0
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	701a      	strb	r2, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f8ca 	bl	80026ae <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>
 800251a:	0003      	movs	r3, r0
	  __dest._M_access<_Functor*>() =
 800251c:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800251e:	200c      	movs	r0, #12
 8002520:	f00a fc40 	bl	800cda4 <_Znwj>
 8002524:	0003      	movs	r3, r0
 8002526:	001c      	movs	r4, r3
	  __dest._M_access<_Functor*>() =
 8002528:	0023      	movs	r3, r4
 800252a:	002a      	movs	r2, r5
 800252c:	ca23      	ldmia	r2!, {r0, r1, r5}
 800252e:	c323      	stmia	r3!, {r0, r1, r5}
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	0018      	movs	r0, r3
 8002534:	f7ff ffd9 	bl	80024ea <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 8002538:	0003      	movs	r3, r0
 800253a:	601c      	str	r4, [r3, #0]
	}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bdb0      	pop	{r4, r5, r7, pc}

08002544 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	003b      	movs	r3, r7
 800254e:	7019      	strb	r1, [r3, #0]
	  delete __victim._M_access<_Functor*>();
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f7ff ffc9 	bl	80024ea <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 8002558:	0003      	movs	r3, r0
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x24>
 8002560:	210c      	movs	r1, #12
 8002562:	0018      	movs	r0, r3
 8002564:	f00a fc1a 	bl	800cd9c <_ZdlPvj>
	}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	701a      	strb	r2, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff fee8 	bl	8002356 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8002586:	0003      	movs	r3, r0
 8002588:	681c      	ldr	r4, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0018      	movs	r0, r3
 800258e:	f7ff f930 	bl	80017f2 <_ZNSt9_Any_data9_M_accessEv>
 8002592:	0003      	movs	r3, r0
 8002594:	0019      	movs	r1, r3
 8002596:	2004      	movs	r0, #4
 8002598:	f7ff f921 	bl	80017de <_ZnwjPv>
 800259c:	0003      	movs	r3, r0
 800259e:	601c      	str	r4, [r3, #0]
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b005      	add	sp, #20
 80025a6:	bd90      	pop	{r4, r7, pc}

080025a8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 f888 	bl	80026c8 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80025b8:	0003      	movs	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f88f 	bl	80026e2 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 80025c4:	0003      	movs	r3, r0
 80025c6:	46c0      	nop			; (mov r8, r8)
	}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff f909 	bl	80017f2 <_ZNSt9_Any_data9_M_accessEv>
 80025e0:	0003      	movs	r3, r0
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	701a      	strb	r2, [r3, #0]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f864 	bl	80026c8 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8002600:	0003      	movs	r3, r0
 8002602:	681c      	ldr	r4, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff f8f3 	bl	80017f2 <_ZNSt9_Any_data9_M_accessEv>
 800260c:	0003      	movs	r3, r0
 800260e:	0019      	movs	r1, r3
 8002610:	2004      	movs	r0, #4
 8002612:	f7ff f8e4 	bl	80017de <_ZnwjPv>
 8002616:	0003      	movs	r3, r0
 8002618:	601c      	str	r4, [r3, #0]
	}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	b005      	add	sp, #20
 8002620:	bd90      	pop	{r4, r7, pc}

08002622 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	003b      	movs	r3, r7
 800262c:	7019      	strb	r1, [r3, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f85f 	bl	80026f4 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}

0800263e <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>:
      _M_access() const
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff f8d2 	bl	8001804 <_ZNKSt9_Any_data9_M_accessEv>
 8002660:	0003      	movs	r3, r0
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}

0800266a <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 800266e:	1c18      	adds	r0, r3, #0
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	701a      	strb	r2, [r3, #0]
	  return std::__invoke(_M_f,
 8002682:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3308      	adds	r3, #8
 8002688:	0018      	movs	r0, r3
 800268a:	f000 f840 	bl	800270e <_ZSt3getILj0EJPN11SolarGators11DataModules18SteeringControllerEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800268e:	0001      	movs	r1, r0
	  return std::__invoke(_M_f,
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	2314      	movs	r3, #20
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	0018      	movs	r0, r3
 8002698:	f000 f846 	bl	8002728 <_ZNVKSt3_MuIPN11SolarGators11DataModules18SteeringControllerELb0ELb0EEclIRS3_St5tupleIJEEEEOT_SA_RT0_>
 800269c:	0003      	movs	r3, r0
 800269e:	0019      	movs	r1, r3
 80026a0:	0020      	movs	r0, r4
 80026a2:	f000 f850 	bl	8002746 <_ZSt8__invokeIRMN11SolarGators11DataModules18SteeringControllerEFvvEJRPS2_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
	      );
 80026a6:	46c0      	nop			; (mov r8, r8)
	}
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b007      	add	sp, #28
 80026ac:	bd90      	pop	{r4, r7, pc}

080026ae <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>:
      _M_access() const
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff f8a3 	bl	8001804 <_ZNKSt9_Any_data9_M_accessEv>
 80026be:	0003      	movs	r3, r0
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff f896 	bl	8001804 <_ZNKSt9_Any_data9_M_accessEv>
 80026d8:	0003      	movs	r3, r0
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b002      	add	sp, #8
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff f877 	bl	80017f2 <_ZNSt9_Any_data9_M_accessEv>
 8002704:	0003      	movs	r3, r0
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZSt3getILj0EJPN11SolarGators11DataModules18SteeringControllerEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f82c 	bl	8002776 <_ZSt12__get_helperILj0EPN11SolarGators11DataModules18SteeringControllerEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800271e:	0003      	movs	r3, r0
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <_ZNVKSt3_MuIPN11SolarGators11DataModules18SteeringControllerELb0ELb0EEclIRS3_St5tupleIJEEEEOT_SA_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f82a 	bl	8002790 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 800273c:	0003      	movs	r3, r0
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZSt8__invokeIRMN11SolarGators11DataModules18SteeringControllerEFvvEJRPS2_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 8002746:	b5b0      	push	{r4, r5, r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	0018      	movs	r0, r3
 8002754:	f000 f825 	bl	80027a2 <_ZSt7forwardIRMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002758:	0004      	movs	r4, r0
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	0018      	movs	r0, r3
 800275e:	f000 f817 	bl	8002790 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 8002762:	0003      	movs	r3, r0
 8002764:	001a      	movs	r2, r3
 8002766:	0021      	movs	r1, r4
 8002768:	1c28      	adds	r0, r5, #0
 800276a:	f000 f823 	bl	80027b4 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 800276e:	46c0      	nop			; (mov r8, r8)
    }
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZSt12__get_helperILj0EPN11SolarGators11DataModules18SteeringControllerEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff fe56 	bl	8002432 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>
 8002786:	0003      	movs	r3, r0
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}

08002790 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b002      	add	sp, #8
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_ZSt7forwardIRMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	230c      	movs	r3, #12
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	7018      	strb	r0, [r3, #0]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff ffe2 	bl	8002790 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 80027cc:	0003      	movs	r3, r0
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	6852      	ldr	r2, [r2, #4]
 80027d4:	1052      	asrs	r2, r2, #1
 80027d6:	1899      	adds	r1, r3, r2
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	2001      	movs	r0, #1
 80027de:	4002      	ands	r2, r0
 80027e0:	d102      	bne.n	80027e8 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x34>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e008      	b.n	80027fa <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x46>
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	6852      	ldr	r2, [r2, #4]
 80027ec:	1052      	asrs	r2, r2, #1
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	18d3      	adds	r3, r2, r3
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0008      	movs	r0, r1
 80027fc:	4798      	blx	r3
 80027fe:	46c0      	nop			; (mov r8, r8)
    }
 8002800:	46bd      	mov	sp, r7
 8002802:	b004      	add	sp, #16
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <_Z41__static_initialization_and_destruction_0ii>:
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b085      	sub	sp, #20
 800280c:	af02      	add	r7, sp, #8
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d000      	beq.n	800281a <_Z41__static_initialization_and_destruction_0ii+0x12>
 8002818:	e0ba      	b.n	8002990 <_Z41__static_initialization_and_destruction_0ii+0x188>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	4a8c      	ldr	r2, [pc, #560]	; (8002a50 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d000      	beq.n	8002824 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 8002822:	e0b5      	b.n	8002990 <_Z41__static_initialization_and_destruction_0ii+0x188>
#include "DataModuleInfo.hpp"
#include "Button.hpp"
#include "CAN.hpp"


SolarGators::DataModules::SteeringController LightsState;
 8002824:	4b8b      	ldr	r3, [pc, #556]	; (8002a54 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8002826:	0018      	movs	r0, r3
 8002828:	f004 f9ec 	bl	8006c04 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 800282c:	4a8a      	ldr	r2, [pc, #552]	; (8002a58 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8002830:	0011      	movs	r1, r2
 8002832:	0018      	movs	r0, r3
 8002834:	f003 fcf8 	bl	8006228 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>
SolarGators::DataModules::OrionBMS Bms(SolarGators::DataModuleInfo::Orion_Id);
 8002838:	23d6      	movs	r3, #214	; 0xd6
 800283a:	00da      	lsls	r2, r3, #3
 800283c:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f003 ff85 	bl	8006750 <_ZN11SolarGators11DataModules8OrionBMSC1Em>
SolarGators::DataModules::MitsubaRx0 McRx0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID);
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8002848:	4b87      	ldr	r3, [pc, #540]	; (8002a68 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800284a:	0011      	movs	r1, r2
 800284c:	0018      	movs	r0, r3
 800284e:	f003 fd93 	bl	8006378 <_ZN11SolarGators11DataModules10MitsubaRx0C1Em>
// Forward Declares
extern SPI_HandleTypeDef hspi1;
extern CAN_HandleTypeDef hcan;
SolarGators::Drivers::CANDriver CANController(&hcan, 1);
 8002852:	4986      	ldr	r1, [pc, #536]	; (8002a6c <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8002854:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8002856:	2201      	movs	r2, #1
 8002858:	0018      	movs	r0, r3
 800285a:	f005 f86f 	bl	800793c <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>

// Buttons
// Left Side
SolarGators::Drivers::Button left_turn    ("Left Turn", LT_Button_GPIO_Port, LT_Button_Pin);
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4c84      	ldr	r4, [pc, #528]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002864:	4984      	ldr	r1, [pc, #528]	; (8002a78 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8002866:	4885      	ldr	r0, [pc, #532]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8002868:	2201      	movs	r2, #1
 800286a:	9201      	str	r2, [sp, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	9200      	str	r2, [sp, #0]
 8002870:	0022      	movs	r2, r4
 8002872:	f004 ff64 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_minus ("Cruise Minus", Cruise_M_GPIO_Port, Cruise_M_Pin);
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2290      	movs	r2, #144	; 0x90
 800287c:	05d2      	lsls	r2, r2, #23
 800287e:	4980      	ldr	r1, [pc, #512]	; (8002a80 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8002880:	4880      	ldr	r0, [pc, #512]	; (8002a84 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8002882:	2401      	movs	r4, #1
 8002884:	9401      	str	r4, [sp, #4]
 8002886:	2400      	movs	r4, #0
 8002888:	9400      	str	r4, [sp, #0]
 800288a:	f004 ff58 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button eco          ("Eco Mode", Eco_Button_GPIO_Port, Eco_Button_Pin);
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4c78      	ldr	r4, [pc, #480]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002894:	497c      	ldr	r1, [pc, #496]	; (8002a88 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8002896:	487d      	ldr	r0, [pc, #500]	; (8002a8c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8002898:	2201      	movs	r2, #1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	9200      	str	r2, [sp, #0]
 80028a0:	0022      	movs	r2, r4
 80028a2:	f004 ff4c 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button headlights   ("Headlights", HL_Button_GPIO_Port, HL_Button_Pin);
 80028a6:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80028a8:	4979      	ldr	r1, [pc, #484]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80028aa:	487a      	ldr	r0, [pc, #488]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80028ac:	2301      	movs	r3, #1
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	2300      	movs	r3, #0
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	f004 ff42 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button hazards      ("Left Turn", Haz_Button_GPIO_Port, Haz_Button_Pin);
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	4c76      	ldr	r4, [pc, #472]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80028c0:	496d      	ldr	r1, [pc, #436]	; (8002a78 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80028c2:	4876      	ldr	r0, [pc, #472]	; (8002a9c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	9201      	str	r2, [sp, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	9200      	str	r2, [sp, #0]
 80028cc:	0022      	movs	r2, r4
 80028ce:	f004 ff36 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
// Right Side
SolarGators::Drivers::Button right_turn   ("Right Turn", RT_Button_GPIO_Port, RT_Button_Pin);
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	4c67      	ldr	r4, [pc, #412]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80028d8:	4971      	ldr	r1, [pc, #452]	; (8002aa0 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80028da:	4872      	ldr	r0, [pc, #456]	; (8002aa4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80028dc:	2201      	movs	r2, #1
 80028de:	9201      	str	r2, [sp, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	9200      	str	r2, [sp, #0]
 80028e4:	0022      	movs	r2, r4
 80028e6:	f004 ff2a 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", Cruise_P_GPIO_Port, Cruise_P_Pin);
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	4c61      	ldr	r4, [pc, #388]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80028f0:	496d      	ldr	r1, [pc, #436]	; (8002aa8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80028f2:	486e      	ldr	r0, [pc, #440]	; (8002aac <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	9201      	str	r2, [sp, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	9200      	str	r2, [sp, #0]
 80028fc:	0022      	movs	r2, r4
 80028fe:	f004 ff1e 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button horn         ("Horn", Horn_Button_GPIO_Port, Horn_Button_Pin);
 8002902:	4a5c      	ldr	r2, [pc, #368]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002904:	496a      	ldr	r1, [pc, #424]	; (8002ab0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8002906:	486b      	ldr	r0, [pc, #428]	; (8002ab4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8002908:	2301      	movs	r3, #1
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2300      	movs	r3, #0
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2301      	movs	r3, #1
 8002912:	f004 ff14 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise       ("Cruise", Cruise_Button_GPIO_Port, Cruise_Button_Pin);
 8002916:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002918:	4967      	ldr	r1, [pc, #412]	; (8002ab8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800291a:	4868      	ldr	r0, [pc, #416]	; (8002abc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800291c:	2301      	movs	r3, #1
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	2300      	movs	r3, #0
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2302      	movs	r3, #2
 8002926:	f004 ff0a 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button reverse      ("Reverse", Reverse_Button_GPIO_Port, Reverse_Button_Pin, 3000);
 800292a:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800292c:	4964      	ldr	r1, [pc, #400]	; (8002ac0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800292e:	4865      	ldr	r0, [pc, #404]	; (8002ac4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8002930:	2301      	movs	r3, #1
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2308      	movs	r3, #8
 800293a:	f004 ff00 	bl	800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
// Leds
// Left Side
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_Led_GPIO_Port, LT_Led_Pin);
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	2290      	movs	r2, #144	; 0x90
 8002944:	05d2      	lsls	r2, r2, #23
 8002946:	4961      	ldr	r1, [pc, #388]	; (8002acc <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8002948:	4861      	ldr	r0, [pc, #388]	; (8002ad0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800294a:	f006 f84f 	bl	80089ec <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED eco_indicator   ("ECO Indicator", Eco_Led_GPIO_Port, Eco_Led_Pin);
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002954:	495f      	ldr	r1, [pc, #380]	; (8002ad4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8002956:	4860      	ldr	r0, [pc, #384]	; (8002ad8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002958:	f006 f848 	bl	80089ec <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED hl_indicator    ("HL Indicator", HL_Led_GPIO_Port, HL_Led_Pin);
 800295c:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800295e:	495f      	ldr	r1, [pc, #380]	; (8002adc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8002960:	485f      	ldr	r0, [pc, #380]	; (8002ae0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8002962:	2340      	movs	r3, #64	; 0x40
 8002964:	f006 f842 	bl	80089ec <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
// Right Side
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_Led_GPIO_Port, RT_Led_Pin);
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	01db      	lsls	r3, r3, #7
 800296c:	4a41      	ldr	r2, [pc, #260]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800296e:	495d      	ldr	r1, [pc, #372]	; (8002ae4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8002970:	485d      	ldr	r0, [pc, #372]	; (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8002972:	f006 f83b 	bl	80089ec <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED cr_indicator    ("CR Indicator", Cruise_Led_GPIO_Port, Cruise_Led_Pin);
 8002976:	4a3f      	ldr	r2, [pc, #252]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8002978:	495c      	ldr	r1, [pc, #368]	; (8002aec <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800297a:	485d      	ldr	r0, [pc, #372]	; (8002af0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800297c:	2304      	movs	r3, #4
 800297e:	f006 f835 	bl	80089ec <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED rev_indicator   ("Rev Indicator", Reverse_Led_GPIO_Port, Reverse_Led_Pin);
 8002982:	2390      	movs	r3, #144	; 0x90
 8002984:	05da      	lsls	r2, r3, #23
 8002986:	495b      	ldr	r1, [pc, #364]	; (8002af4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8002988:	485b      	ldr	r0, [pc, #364]	; (8002af8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800298a:	2301      	movs	r3, #1
 800298c:	f006 f82e 	bl	80089ec <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d157      	bne.n	8002a46 <_Z41__static_initialization_and_destruction_0ii+0x23e>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	4a2d      	ldr	r2, [pc, #180]	; (8002a50 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d153      	bne.n	8002a46 <_Z41__static_initialization_and_destruction_0ii+0x23e>
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80029a0:	0018      	movs	r0, r3
 80029a2:	f006 f847 	bl	8008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED cr_indicator    ("CR Indicator", Cruise_Led_GPIO_Port, Cruise_Led_Pin);
 80029a6:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80029a8:	0018      	movs	r0, r3
 80029aa:	f006 f843 	bl	8008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_Led_GPIO_Port, RT_Led_Pin);
 80029ae:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80029b0:	0018      	movs	r0, r3
 80029b2:	f006 f83f 	bl	8008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED hl_indicator    ("HL Indicator", HL_Led_GPIO_Port, HL_Led_Pin);
 80029b6:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80029b8:	0018      	movs	r0, r3
 80029ba:	f006 f83b 	bl	8008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED eco_indicator   ("ECO Indicator", Eco_Led_GPIO_Port, Eco_Led_Pin);
 80029be:	4b46      	ldr	r3, [pc, #280]	; (8002ad8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80029c0:	0018      	movs	r0, r3
 80029c2:	f006 f837 	bl	8008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_Led_GPIO_Port, LT_Led_Pin);
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80029c8:	0018      	movs	r0, r3
 80029ca:	f006 f833 	bl	8008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::Button reverse      ("Reverse", Reverse_Button_GPIO_Port, Reverse_Button_Pin, 3000);
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80029d0:	0018      	movs	r0, r3
 80029d2:	f004 feea 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise       ("Cruise", Cruise_Button_GPIO_Port, Cruise_Button_Pin);
 80029d6:	4b39      	ldr	r3, [pc, #228]	; (8002abc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f004 fee6 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button horn         ("Horn", Horn_Button_GPIO_Port, Horn_Button_Pin);
 80029de:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80029e0:	0018      	movs	r0, r3
 80029e2:	f004 fee2 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", Cruise_P_GPIO_Port, Cruise_P_Pin);
 80029e6:	4b31      	ldr	r3, [pc, #196]	; (8002aac <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80029e8:	0018      	movs	r0, r3
 80029ea:	f004 fede 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button right_turn   ("Right Turn", RT_Button_GPIO_Port, RT_Button_Pin);
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80029f0:	0018      	movs	r0, r3
 80029f2:	f004 feda 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button hazards      ("Left Turn", Haz_Button_GPIO_Port, Haz_Button_Pin);
 80029f6:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80029f8:	0018      	movs	r0, r3
 80029fa:	f004 fed6 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button headlights   ("Headlights", HL_Button_GPIO_Port, HL_Button_Pin);
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8002a00:	0018      	movs	r0, r3
 8002a02:	f004 fed2 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button eco          ("Eco Mode", Eco_Button_GPIO_Port, Eco_Button_Pin);
 8002a06:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f004 fece 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise_minus ("Cruise Minus", Cruise_M_GPIO_Port, Cruise_M_Pin);
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f004 feca 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button left_turn    ("Left Turn", LT_Button_GPIO_Port, LT_Button_Pin);
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f004 fec6 	bl	80077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::CANDriver CANController(&hcan, 1);
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8002a20:	0018      	movs	r0, r3
 8002a22:	f005 f81f 	bl	8007a64 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
SolarGators::DataModules::MitsubaRx0 McRx0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID);
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f003 fcdb 	bl	80063e4 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
SolarGators::DataModules::OrionBMS Bms(SolarGators::DataModuleInfo::Orion_Id);
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8002a30:	0018      	movs	r0, r3
 8002a32:	f003 fea3 	bl	800677c <_ZN11SolarGators11DataModules8OrionBMSD1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f003 fc0b 	bl	8006254 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
SolarGators::DataModules::SteeringController LightsState;
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8002a40:	0018      	movs	r0, r3
 8002a42:	f004 f97f 	bl	8006d44 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b003      	add	sp, #12
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	0000ffff 	.word	0x0000ffff
 8002a54:	200000b4 	.word	0x200000b4
 8002a58:	08f89540 	.word	0x08f89540
 8002a5c:	20000578 	.word	0x20000578
 8002a60:	200005f0 	.word	0x200005f0
 8002a64:	08850225 	.word	0x08850225
 8002a68:	20000674 	.word	0x20000674
 8002a6c:	20002b20 	.word	0x20002b20
 8002a70:	200006f8 	.word	0x200006f8
 8002a74:	48000800 	.word	0x48000800
 8002a78:	0800d990 	.word	0x0800d990
 8002a7c:	20000a58 	.word	0x20000a58
 8002a80:	0800d99c 	.word	0x0800d99c
 8002a84:	20000a84 	.word	0x20000a84
 8002a88:	0800d9ac 	.word	0x0800d9ac
 8002a8c:	20000ab0 	.word	0x20000ab0
 8002a90:	0800d9b8 	.word	0x0800d9b8
 8002a94:	20000adc 	.word	0x20000adc
 8002a98:	48000400 	.word	0x48000400
 8002a9c:	20000b08 	.word	0x20000b08
 8002aa0:	0800d9c4 	.word	0x0800d9c4
 8002aa4:	20000b34 	.word	0x20000b34
 8002aa8:	0800d9d0 	.word	0x0800d9d0
 8002aac:	20000b60 	.word	0x20000b60
 8002ab0:	0800d9dc 	.word	0x0800d9dc
 8002ab4:	20000b8c 	.word	0x20000b8c
 8002ab8:	0800d9e4 	.word	0x0800d9e4
 8002abc:	20000bb8 	.word	0x20000bb8
 8002ac0:	0800d9ec 	.word	0x0800d9ec
 8002ac4:	20000be4 	.word	0x20000be4
 8002ac8:	00000bb8 	.word	0x00000bb8
 8002acc:	0800d9f4 	.word	0x0800d9f4
 8002ad0:	20000c10 	.word	0x20000c10
 8002ad4:	0800da04 	.word	0x0800da04
 8002ad8:	20000c24 	.word	0x20000c24
 8002adc:	0800da14 	.word	0x0800da14
 8002ae0:	20000c38 	.word	0x20000c38
 8002ae4:	0800da24 	.word	0x0800da24
 8002ae8:	20000c4c 	.word	0x20000c4c
 8002aec:	0800da34 	.word	0x0800da34
 8002af0:	20000c60 	.word	0x20000c60
 8002af4:	0800da44 	.word	0x0800da44
 8002af8:	20000c74 	.word	0x20000c74

08002afc <_GLOBAL__sub_I_LightsState>:
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <_GLOBAL__sub_I_LightsState+0x14>)
 8002b02:	0019      	movs	r1, r3
 8002b04:	2001      	movs	r0, #1
 8002b06:	f7ff fe7f 	bl	8002808 <_Z41__static_initialization_and_destruction_0ii>
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	0000ffff 	.word	0x0000ffff

08002b14 <_GLOBAL__sub_D_LightsState>:
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <_GLOBAL__sub_D_LightsState+0x14>)
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7ff fe73 	bl	8002808 <_Z41__static_initialization_and_destruction_0ii>
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	0000ffff 	.word	0x0000ffff

08002b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b2c:	480d      	ldr	r0, [pc, #52]	; (8002b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <LoopForever+0xe>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b48:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <LoopForever+0x16>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b56:	f7fe fe3d 	bl	80017d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b5a:	f00a f9bf 	bl	800cedc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b5e:	f7fe f8ef 	bl	8000d40 <main>

08002b62 <LoopForever>:

LoopForever:
    b LoopForever
 8002b62:	e7fe      	b.n	8002b62 <LoopForever>
  ldr   r0, =_estack
 8002b64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002b70:	0800e3ec 	.word	0x0800e3ec
  ldr r2, =_sbss
 8002b74:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002b78:	20003240 	.word	0x20003240

08002b7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC1_COMP_IRQHandler>
	...

08002b80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_Init+0x24>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_Init+0x24>)
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002b90:	2003      	movs	r0, #3
 8002b92:	f7fe fd03 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b96:	f7fe fbb7 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40022000 	.word	0x40022000

08002ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_IncTick+0x1c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_IncTick+0x20>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	18d2      	adds	r2, r2, r3
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_IncTick+0x20>)
 8002bba:	601a      	str	r2, [r3, #0]
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	20000024 	.word	0x20000024
 8002bc8:	200031ec 	.word	0x200031ec

08002bcc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <HAL_GetTick+0x10>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	200031ec 	.word	0x200031ec

08002be0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0f0      	b.n	8002dd4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7fe fbab 	bl	800135c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c16:	f7ff ffd9 	bl	8002bcc <HAL_GetTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c1e:	e013      	b.n	8002c48 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c20:	f7ff ffd4 	bl	8002bcc <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b0a      	cmp	r3, #10
 8002c2c:	d90c      	bls.n	8002c48 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	0292      	lsls	r2, r2, #10
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	2105      	movs	r1, #5
 8002c42:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0c5      	b.n	8002dd4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0e5      	beq.n	8002c20 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2102      	movs	r1, #2
 8002c60:	438a      	bics	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7ff ffb2 	bl	8002bcc <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c6c:	e013      	b.n	8002c96 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c6e:	f7ff ffad 	bl	8002bcc <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b0a      	cmp	r3, #10
 8002c7a:	d90c      	bls.n	8002c96 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0292      	lsls	r2, r2, #10
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	2105      	movs	r1, #5
 8002c90:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e09e      	b.n	8002dd4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d1e5      	bne.n	8002c6e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7e1b      	ldrb	r3, [r3, #24]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	438a      	bics	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7e5b      	ldrb	r3, [r3, #25]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e007      	b.n	8002cf6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7e9b      	ldrb	r3, [r3, #26]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d108      	bne.n	8002d10 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2120      	movs	r1, #32
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e007      	b.n	8002d20 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2120      	movs	r1, #32
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7edb      	ldrb	r3, [r3, #27]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2110      	movs	r1, #16
 8002d34:	438a      	bics	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e007      	b.n	8002d4a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2110      	movs	r1, #16
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7f1b      	ldrb	r3, [r3, #28]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2108      	movs	r1, #8
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e007      	b.n	8002d74 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2108      	movs	r1, #8
 8002d70:	438a      	bics	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7f5b      	ldrb	r3, [r3, #29]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d108      	bne.n	8002d8e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2104      	movs	r1, #4
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e007      	b.n	8002d9e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2104      	movs	r1, #4
 8002d9a:	438a      	bics	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	0011      	movs	r1, r2
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	1e5a      	subs	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dec:	2013      	movs	r0, #19
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	2120      	movs	r1, #32
 8002df4:	5c52      	ldrb	r2, [r2, r1]
 8002df6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002df8:	0002      	movs	r2, r0
 8002dfa:	18bb      	adds	r3, r7, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d004      	beq.n	8002e0c <HAL_CAN_ConfigFilter+0x30>
 8002e02:	18bb      	adds	r3, r7, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d000      	beq.n	8002e0c <HAL_CAN_ConfigFilter+0x30>
 8002e0a:	e0cd      	b.n	8002fa8 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	58d3      	ldr	r3, [r2, r3]
 8002e14:	2201      	movs	r2, #1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	0011      	movs	r1, r2
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	221f      	movs	r2, #31
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	0013      	movs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	2387      	movs	r3, #135	; 0x87
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	58d3      	ldr	r3, [r2, r3]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	0011      	movs	r1, r2
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	2387      	movs	r3, #135	; 0x87
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d129      	bne.n	8002ea6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	2383      	movs	r3, #131	; 0x83
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	58d3      	ldr	r3, [r2, r3]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	43d2      	mvns	r2, r2
 8002e5e:	401a      	ands	r2, r3
 8002e60:	0011      	movs	r1, r2
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	2383      	movs	r3, #131	; 0x83
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	041b      	lsls	r3, r3, #16
 8002e76:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e7c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	3248      	adds	r2, #72	; 0x48
 8002e82:	00d2      	lsls	r2, r2, #3
 8002e84:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e9a:	6979      	ldr	r1, [r7, #20]
 8002e9c:	3348      	adds	r3, #72	; 0x48
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	18cb      	adds	r3, r1, r3
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d128      	bne.n	8002f00 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	2383      	movs	r3, #131	; 0x83
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	58d2      	ldr	r2, [r2, r3]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	0011      	movs	r1, r2
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	2383      	movs	r3, #131	; 0x83
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ed6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3248      	adds	r2, #72	; 0x48
 8002edc:	00d2      	lsls	r2, r2, #3
 8002ede:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ef2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef4:	6979      	ldr	r1, [r7, #20]
 8002ef6:	3348      	adds	r3, #72	; 0x48
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	18cb      	adds	r3, r1, r3
 8002efc:	3304      	adds	r3, #4
 8002efe:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10c      	bne.n	8002f22 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	2381      	movs	r3, #129	; 0x81
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	58d3      	ldr	r3, [r2, r3]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	43d2      	mvns	r2, r2
 8002f14:	401a      	ands	r2, r3
 8002f16:	0011      	movs	r1, r2
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	2381      	movs	r3, #129	; 0x81
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	50d1      	str	r1, [r2, r3]
 8002f20:	e00a      	b.n	8002f38 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	2381      	movs	r3, #129	; 0x81
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	58d2      	ldr	r2, [r2, r3]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	0011      	movs	r1, r2
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	2381      	movs	r3, #129	; 0x81
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10c      	bne.n	8002f5a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	2385      	movs	r3, #133	; 0x85
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	58d3      	ldr	r3, [r2, r3]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	43d2      	mvns	r2, r2
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	0011      	movs	r1, r2
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	2385      	movs	r3, #133	; 0x85
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	50d1      	str	r1, [r2, r3]
 8002f58:	e00a      	b.n	8002f70 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	2385      	movs	r3, #133	; 0x85
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	58d2      	ldr	r2, [r2, r3]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	0011      	movs	r1, r2
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	2385      	movs	r3, #133	; 0x85
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10a      	bne.n	8002f8e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	2387      	movs	r3, #135	; 0x87
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	58d2      	ldr	r2, [r2, r3]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	0011      	movs	r1, r2
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	2387      	movs	r3, #135	; 0x87
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	58d3      	ldr	r3, [r2, r3]
 8002f96:	2201      	movs	r2, #1
 8002f98:	4393      	bics	r3, r2
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e007      	b.n	8002fb8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	02d2      	lsls	r2, r2, #11
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
  }
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	5c9b      	ldrb	r3, [r3, r2]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d12f      	bne.n	8003034 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	2102      	movs	r1, #2
 8002fda:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	438a      	bics	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fec:	f7ff fdee 	bl	8002bcc <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ff4:	e013      	b.n	800301e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ff6:	f7ff fde9 	bl	8002bcc <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b0a      	cmp	r3, #10
 8003002:	d90c      	bls.n	800301e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	0292      	lsls	r2, r2, #10
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	2105      	movs	r1, #5
 8003018:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e012      	b.n	8003044 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	4013      	ands	r3, r2
 8003028:	d1e5      	bne.n	8002ff6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	e007      	b.n	8003044 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0312      	lsls	r2, r2, #12
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
  }
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b004      	add	sp, #16
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800305a:	201f      	movs	r0, #31
 800305c:	183b      	adds	r3, r7, r0
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	2120      	movs	r1, #32
 8003062:	5c52      	ldrb	r2, [r2, r1]
 8003064:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800306e:	183b      	adds	r3, r7, r0
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d004      	beq.n	8003080 <HAL_CAN_AddTxMessage+0x34>
 8003076:	183b      	adds	r3, r7, r0
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d000      	beq.n	8003080 <HAL_CAN_AddTxMessage+0x34>
 800307e:	e0b7      	b.n	80031f0 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	04db      	lsls	r3, r3, #19
 8003086:	4013      	ands	r3, r2
 8003088:	d10a      	bne.n	80030a0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	051b      	lsls	r3, r3, #20
 8003090:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003092:	d105      	bne.n	80030a0 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	055b      	lsls	r3, r3, #21
 800309a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800309c:	d100      	bne.n	80030a0 <HAL_CAN_AddTxMessage+0x54>
 800309e:	e09e      	b.n	80031de <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	0e1b      	lsrs	r3, r3, #24
 80030a4:	2203      	movs	r2, #3
 80030a6:	4013      	ands	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d908      	bls.n	80030c2 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	0412      	lsls	r2, r2, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e09e      	b.n	8003200 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030c2:	2201      	movs	r2, #1
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10c      	bne.n	80030ee <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4311      	orrs	r1, r2
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	3218      	adds	r2, #24
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	50d1      	str	r1, [r2, r3]
 80030ec:	e00f      	b.n	800310e <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030f8:	431a      	orrs	r2, r3
 80030fa:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003104:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	3218      	adds	r2, #24
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	3318      	adds	r3, #24
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	18cb      	adds	r3, r1, r3
 800311e:	3304      	adds	r3, #4
 8003120:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	7d1b      	ldrb	r3, [r3, #20]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d112      	bne.n	8003150 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	3318      	adds	r3, #24
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	18d3      	adds	r3, r2, r3
 8003136:	3304      	adds	r3, #4
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	431a      	orrs	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3318      	adds	r3, #24
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	18cb      	adds	r3, r1, r3
 800314c:	3304      	adds	r3, #4
 800314e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3307      	adds	r3, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	061a      	lsls	r2, r3, #24
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3306      	adds	r3, #6
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3305      	adds	r3, #5
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	0019      	movs	r1, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	23c6      	movs	r3, #198	; 0xc6
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	0109      	lsls	r1, r1, #4
 8003182:	1841      	adds	r1, r0, r1
 8003184:	18cb      	adds	r3, r1, r3
 8003186:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3303      	adds	r3, #3
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	061a      	lsls	r2, r3, #24
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3302      	adds	r3, #2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3301      	adds	r3, #1
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	0019      	movs	r1, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	23c4      	movs	r3, #196	; 0xc4
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	0109      	lsls	r1, r1, #4
 80031b8:	1841      	adds	r1, r0, r1
 80031ba:	18cb      	adds	r3, r1, r3
 80031bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	3218      	adds	r2, #24
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	58d2      	ldr	r2, [r2, r3]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2101      	movs	r1, #1
 80031d0:	4311      	orrs	r1, r2
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	3218      	adds	r2, #24
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e010      	b.n	8003200 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	0392      	lsls	r2, r2, #14
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e007      	b.n	8003200 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	02d2      	lsls	r2, r2, #11
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
  }
}
 8003200:	0018      	movs	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	b008      	add	sp, #32
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003214:	200b      	movs	r0, #11
 8003216:	183b      	adds	r3, r7, r0
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	2120      	movs	r1, #32
 800321c:	5c52      	ldrb	r2, [r2, r1]
 800321e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003220:	0002      	movs	r2, r0
 8003222:	18bb      	adds	r3, r7, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d003      	beq.n	8003232 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 800322a:	18bb      	adds	r3, r7, r2
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d11d      	bne.n	800326e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	04db      	lsls	r3, r3, #19
 800323c:	4013      	ands	r3, r2
 800323e:	d002      	beq.n	8003246 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3301      	adds	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	051b      	lsls	r3, r3, #20
 8003250:	4013      	ands	r3, r2
 8003252:	d002      	beq.n	800325a <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	055b      	lsls	r3, r3, #21
 8003264:	4013      	ands	r3, r2
 8003266:	d002      	beq.n	800326e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b004      	add	sp, #16
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003286:	2017      	movs	r0, #23
 8003288:	183b      	adds	r3, r7, r0
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	2120      	movs	r1, #32
 800328e:	5c52      	ldrb	r2, [r2, r1]
 8003290:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003292:	0002      	movs	r2, r0
 8003294:	18bb      	adds	r3, r7, r2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d004      	beq.n	80032a6 <HAL_CAN_GetRxMessage+0x2e>
 800329c:	18bb      	adds	r3, r7, r2
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d000      	beq.n	80032a6 <HAL_CAN_GetRxMessage+0x2e>
 80032a4:	e0f8      	b.n	8003498 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10e      	bne.n	80032ca <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2203      	movs	r2, #3
 80032b4:	4013      	ands	r3, r2
 80032b6:	d117      	bne.n	80032e8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	0392      	lsls	r2, r2, #14
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0ee      	b.n	80034a8 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2203      	movs	r2, #3
 80032d2:	4013      	ands	r3, r2
 80032d4:	d108      	bne.n	80032e8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	0392      	lsls	r2, r2, #14
 80032de:	431a      	orrs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0df      	b.n	80034a8 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	321b      	adds	r2, #27
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	58d3      	ldr	r3, [r2, r3]
 80032f4:	2204      	movs	r2, #4
 80032f6:	401a      	ands	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	321b      	adds	r2, #27
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	58d3      	ldr	r3, [r2, r3]
 8003310:	0d5b      	lsrs	r3, r3, #21
 8003312:	055b      	lsls	r3, r3, #21
 8003314:	0d5a      	lsrs	r2, r3, #21
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e00a      	b.n	8003332 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	321b      	adds	r2, #27
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	58d3      	ldr	r3, [r2, r3]
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	321b      	adds	r2, #27
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	58d3      	ldr	r3, [r2, r3]
 800333e:	2202      	movs	r2, #2
 8003340:	401a      	ands	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	331b      	adds	r3, #27
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	18d3      	adds	r3, r2, r3
 8003352:	3304      	adds	r3, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	220f      	movs	r2, #15
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	331b      	adds	r3, #27
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	18d3      	adds	r3, r2, r3
 800336a:	3304      	adds	r3, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	22ff      	movs	r2, #255	; 0xff
 8003372:	401a      	ands	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	331b      	adds	r3, #27
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	18d3      	adds	r3, r2, r3
 8003384:	3304      	adds	r3, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	0c1a      	lsrs	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	23dc      	movs	r3, #220	; 0xdc
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	188a      	adds	r2, r1, r2
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	23dc      	movs	r3, #220	; 0xdc
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	188a      	adds	r2, r1, r2
 80033b8:	18d3      	adds	r3, r2, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0a1a      	lsrs	r2, r3, #8
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	23dc      	movs	r3, #220	; 0xdc
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	188a      	adds	r2, r1, r2
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0c1a      	lsrs	r2, r3, #16
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	3302      	adds	r3, #2
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	23dc      	movs	r3, #220	; 0xdc
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	188a      	adds	r2, r1, r2
 80033f0:	18d3      	adds	r3, r2, r3
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e1a      	lsrs	r2, r3, #24
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	3303      	adds	r3, #3
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	23de      	movs	r3, #222	; 0xde
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	188a      	adds	r2, r1, r2
 800340c:	18d3      	adds	r3, r2, r3
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	3304      	adds	r3, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	23de      	movs	r3, #222	; 0xde
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	0112      	lsls	r2, r2, #4
 8003424:	188a      	adds	r2, r1, r2
 8003426:	18d3      	adds	r3, r2, r3
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0a1a      	lsrs	r2, r3, #8
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	3305      	adds	r3, #5
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	23de      	movs	r3, #222	; 0xde
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	188a      	adds	r2, r1, r2
 8003442:	18d3      	adds	r3, r2, r3
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0c1a      	lsrs	r2, r3, #16
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	3306      	adds	r3, #6
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	23de      	movs	r3, #222	; 0xde
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	0112      	lsls	r2, r2, #4
 800345c:	188a      	adds	r2, r1, r2
 800345e:	18d3      	adds	r3, r2, r3
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	0e1a      	lsrs	r2, r3, #24
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	3307      	adds	r3, #7
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2120      	movs	r1, #32
 800347e:	430a      	orrs	r2, r1
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	e007      	b.n	8003494 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2120      	movs	r1, #32
 8003490:	430a      	orrs	r2, r1
 8003492:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e007      	b.n	80034a8 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	02d2      	lsls	r2, r2, #11
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
  }
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b006      	add	sp, #24
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034be:	200b      	movs	r0, #11
 80034c0:	183b      	adds	r3, r7, r0
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	2120      	movs	r1, #32
 80034c6:	5c52      	ldrb	r2, [r2, r1]
 80034c8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034ca:	0002      	movs	r2, r0
 80034cc:	18bb      	adds	r3, r7, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d003      	beq.n	80034dc <HAL_CAN_GetRxFifoFillLevel+0x2c>
 80034d4:	18bb      	adds	r3, r7, r2
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d10f      	bne.n	80034fc <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2203      	movs	r2, #3
 80034ea:	4013      	ands	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e005      	b.n	80034fc <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2203      	movs	r2, #3
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80034fc:	68fb      	ldr	r3, [r7, #12]
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b08a      	sub	sp, #40	; 0x28
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	d100      	bne.n	800354c <HAL_CAN_IRQHandler+0x46>
 800354a:	e084      	b.n	8003656 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d024      	beq.n	800359e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f981 	bl	800386e <HAL_CAN_TxMailbox0CompleteCallback>
 800356c:	e017      	b.n	800359e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2204      	movs	r2, #4
 8003572:	4013      	ands	r3, r2
 8003574:	d005      	beq.n	8003582 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	4313      	orrs	r3, r2
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e00d      	b.n	800359e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2208      	movs	r2, #8
 8003586:	4013      	ands	r3, r2
 8003588:	d005      	beq.n	8003596 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	0152      	lsls	r2, r2, #5
 8003590:	4313      	orrs	r3, r2
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
 8003594:	e003      	b.n	800359e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 f980 	bl	800389e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4013      	ands	r3, r2
 80035a6:	d028      	beq.n	80035fa <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0052      	lsls	r2, r2, #1
 80035b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 f95d 	bl	800387e <HAL_CAN_TxMailbox1CompleteCallback>
 80035c4:	e019      	b.n	80035fa <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4013      	ands	r3, r2
 80035ce:	d005      	beq.n	80035dc <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	0192      	lsls	r2, r2, #6
 80035d6:	4313      	orrs	r3, r2
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	e00e      	b.n	80035fa <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4013      	ands	r3, r2
 80035e4:	d005      	beq.n	80035f2 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	01d2      	lsls	r2, r2, #7
 80035ec:	4313      	orrs	r3, r2
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	e003      	b.n	80035fa <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 f95a 	bl	80038ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	4013      	ands	r3, r2
 8003602:	d028      	beq.n	8003656 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	0252      	lsls	r2, r2, #9
 800360c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	4013      	ands	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	0018      	movs	r0, r3
 800361c:	f000 f937 	bl	800388e <HAL_CAN_TxMailbox2CompleteCallback>
 8003620:	e019      	b.n	8003656 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	02db      	lsls	r3, r3, #11
 8003628:	4013      	ands	r3, r2
 800362a:	d005      	beq.n	8003638 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	0212      	lsls	r2, r2, #8
 8003632:	4313      	orrs	r3, r2
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	e00e      	b.n	8003656 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	031b      	lsls	r3, r3, #12
 800363e:	4013      	ands	r3, r2
 8003640:	d005      	beq.n	800364e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	0252      	lsls	r2, r2, #9
 8003648:	4313      	orrs	r3, r2
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	e003      	b.n	8003656 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f934 	bl	80038be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2208      	movs	r2, #8
 800365a:	4013      	ands	r3, r2
 800365c:	d00c      	beq.n	8003678 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2210      	movs	r2, #16
 8003662:	4013      	ands	r3, r2
 8003664:	d008      	beq.n	8003678 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4313      	orrs	r3, r2
 800366e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2210      	movs	r2, #16
 8003676:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2204      	movs	r2, #4
 800367c:	4013      	ands	r3, r2
 800367e:	d00b      	beq.n	8003698 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2208      	movs	r2, #8
 8003684:	4013      	ands	r3, r2
 8003686:	d007      	beq.n	8003698 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2208      	movs	r2, #8
 800368e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f000 f923 	bl	80038de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2202      	movs	r2, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2203      	movs	r2, #3
 80036a8:	4013      	ands	r3, r2
 80036aa:	d003      	beq.n	80036b4 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 f90d 	bl	80038ce <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2240      	movs	r2, #64	; 0x40
 80036b8:	4013      	ands	r3, r2
 80036ba:	d00c      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2210      	movs	r2, #16
 80036c0:	4013      	ands	r3, r2
 80036c2:	d008      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	00d2      	lsls	r2, r2, #3
 80036ca:	4313      	orrs	r3, r2
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2210      	movs	r2, #16
 80036d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2220      	movs	r2, #32
 80036da:	4013      	ands	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2208      	movs	r2, #8
 80036e2:	4013      	ands	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2208      	movs	r2, #8
 80036ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 f904 	bl	80038fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	2210      	movs	r2, #16
 80036fa:	4013      	ands	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2203      	movs	r2, #3
 8003706:	4013      	ands	r3, r2
 8003708:	d003      	beq.n	8003712 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f8ee 	bl	80038ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003712:	6a3a      	ldr	r2, [r7, #32]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	d00b      	beq.n	8003734 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2210      	movs	r2, #16
 8003720:	4013      	ands	r3, r2
 8003722:	d007      	beq.n	8003734 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2210      	movs	r2, #16
 800372a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f8ed 	bl	800390e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	025b      	lsls	r3, r3, #9
 800373a:	4013      	ands	r3, r2
 800373c:	d00b      	beq.n	8003756 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2208      	movs	r2, #8
 8003742:	4013      	ands	r3, r2
 8003744:	d007      	beq.n	8003756 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2208      	movs	r2, #8
 800374c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 f8e4 	bl	800391e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	4013      	ands	r3, r2
 800375e:	d100      	bne.n	8003762 <HAL_CAN_IRQHandler+0x25c>
 8003760:	e074      	b.n	800384c <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2204      	movs	r2, #4
 8003766:	4013      	ands	r3, r2
 8003768:	d100      	bne.n	800376c <HAL_CAN_IRQHandler+0x266>
 800376a:	e06b      	b.n	8003844 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800376c:	6a3a      	ldr	r2, [r7, #32]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4013      	ands	r3, r2
 8003774:	d007      	beq.n	8003786 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800377c:	d003      	beq.n	8003786 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2201      	movs	r2, #1
 8003782:	4313      	orrs	r3, r2
 8003784:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003786:	6a3a      	ldr	r2, [r7, #32]
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4013      	ands	r3, r2
 800378e:	d007      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2202      	movs	r2, #2
 8003794:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003796:	d003      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	2202      	movs	r2, #2
 800379c:	4313      	orrs	r3, r2
 800379e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037a0:	6a3a      	ldr	r2, [r7, #32]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4013      	ands	r3, r2
 80037a8:	d007      	beq.n	80037ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2204      	movs	r2, #4
 80037ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037b0:	d003      	beq.n	80037ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	2204      	movs	r2, #4
 80037b6:	4313      	orrs	r3, r2
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	4013      	ands	r3, r2
 80037c2:	d03f      	beq.n	8003844 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2270      	movs	r2, #112	; 0x70
 80037c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037ca:	d03b      	beq.n	8003844 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2270      	movs	r2, #112	; 0x70
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b60      	cmp	r3, #96	; 0x60
 80037d4:	d027      	beq.n	8003826 <HAL_CAN_IRQHandler+0x320>
 80037d6:	d82c      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x32c>
 80037d8:	2b50      	cmp	r3, #80	; 0x50
 80037da:	d01f      	beq.n	800381c <HAL_CAN_IRQHandler+0x316>
 80037dc:	d829      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x32c>
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d017      	beq.n	8003812 <HAL_CAN_IRQHandler+0x30c>
 80037e2:	d826      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x32c>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d00f      	beq.n	8003808 <HAL_CAN_IRQHandler+0x302>
 80037e8:	d823      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x32c>
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d002      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x2ee>
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d005      	beq.n	80037fe <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037f2:	e01e      	b.n	8003832 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2208      	movs	r2, #8
 80037f8:	4313      	orrs	r3, r2
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037fc:	e01a      	b.n	8003834 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	2210      	movs	r2, #16
 8003802:	4313      	orrs	r3, r2
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003806:	e015      	b.n	8003834 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	2220      	movs	r2, #32
 800380c:	4313      	orrs	r3, r2
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003810:	e010      	b.n	8003834 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	2240      	movs	r2, #64	; 0x40
 8003816:	4313      	orrs	r3, r2
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800381a:	e00b      	b.n	8003834 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	4313      	orrs	r3, r2
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003824:	e006      	b.n	8003834 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	0052      	lsls	r2, r2, #1
 800382c:	4313      	orrs	r3, r2
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003830:	e000      	b.n	8003834 <HAL_CAN_IRQHandler+0x32e>
            break;
 8003832:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2170      	movs	r1, #112	; 0x70
 8003840:	438a      	bics	r2, r1
 8003842:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2204      	movs	r2, #4
 800384a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 f864 	bl	800392e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b00a      	add	sp, #40	; 0x28
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	46bd      	mov	sp, r7
 800388a:	b002      	add	sp, #8
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b002      	add	sp, #8
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	0002      	movs	r2, r0
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b7f      	cmp	r3, #127	; 0x7f
 8003952:	d809      	bhi.n	8003968 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	001a      	movs	r2, r3
 800395a:	231f      	movs	r3, #31
 800395c:	401a      	ands	r2, r3
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <__NVIC_EnableIRQ+0x30>)
 8003960:	2101      	movs	r1, #1
 8003962:	4091      	lsls	r1, r2
 8003964:	000a      	movs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]
  }
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	0002      	movs	r2, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	1dfb      	adds	r3, r7, #7
 8003980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b7f      	cmp	r3, #127	; 0x7f
 8003988:	d828      	bhi.n	80039dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800398a:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <__NVIC_SetPriority+0xd4>)
 800398c:	1dfb      	adds	r3, r7, #7
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b25b      	sxtb	r3, r3
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	33c0      	adds	r3, #192	; 0xc0
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	589b      	ldr	r3, [r3, r2]
 800399a:	1dfa      	adds	r2, r7, #7
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	0011      	movs	r1, r2
 80039a0:	2203      	movs	r2, #3
 80039a2:	400a      	ands	r2, r1
 80039a4:	00d2      	lsls	r2, r2, #3
 80039a6:	21ff      	movs	r1, #255	; 0xff
 80039a8:	4091      	lsls	r1, r2
 80039aa:	000a      	movs	r2, r1
 80039ac:	43d2      	mvns	r2, r2
 80039ae:	401a      	ands	r2, r3
 80039b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	019b      	lsls	r3, r3, #6
 80039b6:	22ff      	movs	r2, #255	; 0xff
 80039b8:	401a      	ands	r2, r3
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	0018      	movs	r0, r3
 80039c0:	2303      	movs	r3, #3
 80039c2:	4003      	ands	r3, r0
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039c8:	481f      	ldr	r0, [pc, #124]	; (8003a48 <__NVIC_SetPriority+0xd4>)
 80039ca:	1dfb      	adds	r3, r7, #7
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b25b      	sxtb	r3, r3
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	430a      	orrs	r2, r1
 80039d4:	33c0      	adds	r3, #192	; 0xc0
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039da:	e031      	b.n	8003a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <__NVIC_SetPriority+0xd8>)
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	0019      	movs	r1, r3
 80039e4:	230f      	movs	r3, #15
 80039e6:	400b      	ands	r3, r1
 80039e8:	3b08      	subs	r3, #8
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	3306      	adds	r3, #6
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	18d3      	adds	r3, r2, r3
 80039f2:	3304      	adds	r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1dfa      	adds	r2, r7, #7
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	0011      	movs	r1, r2
 80039fc:	2203      	movs	r2, #3
 80039fe:	400a      	ands	r2, r1
 8003a00:	00d2      	lsls	r2, r2, #3
 8003a02:	21ff      	movs	r1, #255	; 0xff
 8003a04:	4091      	lsls	r1, r2
 8003a06:	000a      	movs	r2, r1
 8003a08:	43d2      	mvns	r2, r2
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	22ff      	movs	r2, #255	; 0xff
 8003a14:	401a      	ands	r2, r3
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	4003      	ands	r3, r0
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a24:	4809      	ldr	r0, [pc, #36]	; (8003a4c <__NVIC_SetPriority+0xd8>)
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	001c      	movs	r4, r3
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	4023      	ands	r3, r4
 8003a30:	3b08      	subs	r3, #8
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	430a      	orrs	r2, r1
 8003a36:	3306      	adds	r3, #6
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	18c3      	adds	r3, r0, r3
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b003      	add	sp, #12
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	1c02      	adds	r2, r0, #0
 8003a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	b25b      	sxtb	r3, r3
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f7ff ff81 	bl	8003974 <__NVIC_SetPriority>
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b004      	add	sp, #16
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	0002      	movs	r2, r0
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b25b      	sxtb	r3, r3
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7ff ff57 	bl	8003940 <__NVIC_EnableIRQ>
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aaa:	e155      	b.n	8003d58 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4091      	lsls	r1, r2
 8003ab6:	000a      	movs	r2, r1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d100      	bne.n	8003ac4 <HAL_GPIO_Init+0x28>
 8003ac2:	e146      	b.n	8003d52 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d005      	beq.n	8003adc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d130      	bne.n	8003b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	0013      	movs	r3, r2
 8003aec:	43da      	mvns	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	0013      	movs	r3, r2
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b12:	2201      	movs	r2, #1
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	409a      	lsls	r2, r3
 8003b18:	0013      	movs	r3, r2
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	2201      	movs	r2, #1
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	0013      	movs	r3, r2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2203      	movs	r2, #3
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d017      	beq.n	8003b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d123      	bne.n	8003bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	08da      	lsrs	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3208      	adds	r2, #8
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	58d3      	ldr	r3, [r2, r3]
 8003b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2207      	movs	r2, #7
 8003b98:	4013      	ands	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	0013      	movs	r3, r2
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2107      	movs	r1, #7
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	0013      	movs	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	6939      	ldr	r1, [r7, #16]
 8003bcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	0013      	movs	r3, r2
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2203      	movs	r2, #3
 8003bec:	401a      	ands	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	0013      	movs	r3, r2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	23c0      	movs	r3, #192	; 0xc0
 8003c08:	029b      	lsls	r3, r3, #10
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d100      	bne.n	8003c10 <HAL_GPIO_Init+0x174>
 8003c0e:	e0a0      	b.n	8003d52 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c10:	4b57      	ldr	r3, [pc, #348]	; (8003d70 <HAL_GPIO_Init+0x2d4>)
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <HAL_GPIO_Init+0x2d4>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	619a      	str	r2, [r3, #24]
 8003c1c:	4b54      	ldr	r3, [pc, #336]	; (8003d70 <HAL_GPIO_Init+0x2d4>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4013      	ands	r3, r2
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c28:	4a52      	ldr	r2, [pc, #328]	; (8003d74 <HAL_GPIO_Init+0x2d8>)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	3302      	adds	r3, #2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	589b      	ldr	r3, [r3, r2]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	409a      	lsls	r2, r3
 8003c42:	0013      	movs	r3, r2
 8003c44:	43da      	mvns	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	2390      	movs	r3, #144	; 0x90
 8003c50:	05db      	lsls	r3, r3, #23
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d019      	beq.n	8003c8a <HAL_GPIO_Init+0x1ee>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a47      	ldr	r2, [pc, #284]	; (8003d78 <HAL_GPIO_Init+0x2dc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_GPIO_Init+0x1ea>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a46      	ldr	r2, [pc, #280]	; (8003d7c <HAL_GPIO_Init+0x2e0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00d      	beq.n	8003c82 <HAL_GPIO_Init+0x1e6>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a45      	ldr	r2, [pc, #276]	; (8003d80 <HAL_GPIO_Init+0x2e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <HAL_GPIO_Init+0x1e2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a44      	ldr	r2, [pc, #272]	; (8003d84 <HAL_GPIO_Init+0x2e8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_GPIO_Init+0x1de>
 8003c76:	2304      	movs	r3, #4
 8003c78:	e008      	b.n	8003c8c <HAL_GPIO_Init+0x1f0>
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	e006      	b.n	8003c8c <HAL_GPIO_Init+0x1f0>
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e004      	b.n	8003c8c <HAL_GPIO_Init+0x1f0>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e002      	b.n	8003c8c <HAL_GPIO_Init+0x1f0>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_GPIO_Init+0x1f0>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	2103      	movs	r1, #3
 8003c90:	400a      	ands	r2, r1
 8003c92:	0092      	lsls	r2, r2, #2
 8003c94:	4093      	lsls	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c9c:	4935      	ldr	r1, [pc, #212]	; (8003d74 <HAL_GPIO_Init+0x2d8>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003caa:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	025b      	lsls	r3, r3, #9
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	029b      	lsls	r3, r3, #10
 8003cec:	4013      	ands	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43da      	mvns	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	035b      	lsls	r3, r3, #13
 8003d16:	4013      	ands	r3, r2
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d22:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d28:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	039b      	lsls	r3, r3, #14
 8003d40:	4013      	ands	r3, r2
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_GPIO_Init+0x2ec>)
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3301      	adds	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	40da      	lsrs	r2, r3
 8003d60:	1e13      	subs	r3, r2, #0
 8003d62:	d000      	beq.n	8003d66 <HAL_GPIO_Init+0x2ca>
 8003d64:	e6a2      	b.n	8003aac <HAL_GPIO_Init+0x10>
  } 
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010000 	.word	0x40010000
 8003d78:	48000400 	.word	0x48000400
 8003d7c:	48000800 	.word	0x48000800
 8003d80:	48000c00 	.word	0x48000c00
 8003d84:	48001000 	.word	0x48001000
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	000a      	movs	r2, r1
 8003d96:	1cbb      	adds	r3, r7, #2
 8003d98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	1cba      	adds	r2, r7, #2
 8003da0:	8812      	ldrh	r2, [r2, #0]
 8003da2:	4013      	ands	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003da6:	230f      	movs	r3, #15
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	e003      	b.n	8003db8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003db0:	230f      	movs	r3, #15
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003db8:	230f      	movs	r3, #15
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	781b      	ldrb	r3, [r3, #0]
  }
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b004      	add	sp, #16
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	0008      	movs	r0, r1
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	1cbb      	adds	r3, r7, #2
 8003dd4:	1c02      	adds	r2, r0, #0
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	1c7b      	adds	r3, r7, #1
 8003dda:	1c0a      	adds	r2, r1, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dde:	1c7b      	adds	r3, r7, #1
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003de6:	1cbb      	adds	r3, r7, #2
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dee:	e003      	b.n	8003df8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003df0:	1cbb      	adds	r3, r7, #2
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	000a      	movs	r2, r1
 8003e0a:	1cbb      	adds	r3, r7, #2
 8003e0c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e14:	1cbb      	adds	r3, r7, #2
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	041a      	lsls	r2, r3, #16
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	1cb9      	adds	r1, r7, #2
 8003e24:	8809      	ldrh	r1, [r1, #0]
 8003e26:	400b      	ands	r3, r1
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	619a      	str	r2, [r3, #24]
}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	0002      	movs	r2, r0
 8003e40:	1dbb      	adds	r3, r7, #6
 8003e42:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	1dba      	adds	r2, r7, #6
 8003e4a:	8812      	ldrh	r2, [r2, #0]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d008      	beq.n	8003e62 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003e52:	1dba      	adds	r2, r7, #6
 8003e54:	8812      	ldrh	r2, [r2, #0]
 8003e56:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e58:	1dbb      	adds	r3, r7, #6
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fd fa0d 	bl	800127c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b002      	add	sp, #8
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	40010400 	.word	0x40010400

08003e70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b08b      	sub	sp, #44	; 0x2c
 8003e74:	af06      	add	r7, sp, #24
 8003e76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0ff      	b.n	8004082 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a81      	ldr	r2, [pc, #516]	; (800408c <HAL_PCD_Init+0x21c>)
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	23aa      	movs	r3, #170	; 0xaa
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	2100      	movs	r1, #0
 8003e96:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7fd fb5e 	bl	800155c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a7a      	ldr	r2, [pc, #488]	; (800408c <HAL_PCD_Init+0x21c>)
 8003ea4:	2103      	movs	r1, #3
 8003ea6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f002 f921 	bl	80060f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb2:	230f      	movs	r3, #15
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e058      	b.n	8003f6e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ebc:	200f      	movs	r0, #15
 8003ebe:	183b      	adds	r3, r7, r0
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	0013      	movs	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	18cb      	adds	r3, r1, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ed6:	183b      	adds	r3, r7, r0
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	0013      	movs	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	183a      	adds	r2, r7, r0
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003eec:	0004      	movs	r4, r0
 8003eee:	183b      	adds	r3, r7, r0
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b298      	uxth	r0, r3
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	0013      	movs	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	189b      	adds	r3, r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	18cb      	adds	r3, r1, r3
 8003f04:	3336      	adds	r3, #54	; 0x36
 8003f06:	1c02      	adds	r2, r0, #0
 8003f08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f0a:	193b      	adds	r3, r7, r4
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	0013      	movs	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	18cb      	adds	r3, r1, r3
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f22:	193b      	adds	r3, r7, r4
 8003f24:	781a      	ldrb	r2, [r3, #0]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	0013      	movs	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	18cb      	adds	r3, r1, r3
 8003f32:	3338      	adds	r3, #56	; 0x38
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f38:	193b      	adds	r3, r7, r4
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	0013      	movs	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	18cb      	adds	r3, r1, r3
 8003f48:	333c      	adds	r3, #60	; 0x3c
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f4e:	193b      	adds	r3, r7, r4
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	0013      	movs	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	189b      	adds	r3, r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	18cb      	adds	r3, r1, r3
 8003f5e:	3340      	adds	r3, #64	; 0x40
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	3201      	adds	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	210f      	movs	r1, #15
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d39f      	bcc.n	8003ebc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e056      	b.n	8004032 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f84:	240f      	movs	r4, #15
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	236a      	movs	r3, #106	; 0x6a
 8003f8e:	33ff      	adds	r3, #255	; 0xff
 8003f90:	0019      	movs	r1, r3
 8003f92:	0013      	movs	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	18c3      	adds	r3, r0, r3
 8003f9c:	185b      	adds	r3, r3, r1
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fa2:	193b      	adds	r3, r7, r4
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	23b4      	movs	r3, #180	; 0xb4
 8003faa:	0059      	lsls	r1, r3, #1
 8003fac:	0013      	movs	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	18c3      	adds	r3, r0, r3
 8003fb6:	185b      	adds	r3, r3, r1
 8003fb8:	193a      	adds	r2, r7, r4
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fbe:	193b      	adds	r3, r7, r4
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	236c      	movs	r3, #108	; 0x6c
 8003fc6:	33ff      	adds	r3, #255	; 0xff
 8003fc8:	0019      	movs	r1, r3
 8003fca:	0013      	movs	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	189b      	adds	r3, r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	18c3      	adds	r3, r0, r3
 8003fd4:	185b      	adds	r3, r3, r1
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fda:	193b      	adds	r3, r7, r4
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	23bc      	movs	r3, #188	; 0xbc
 8003fe2:	0059      	lsls	r1, r3, #1
 8003fe4:	0013      	movs	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	18c3      	adds	r3, r0, r3
 8003fee:	185b      	adds	r3, r3, r1
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ff4:	193b      	adds	r3, r7, r4
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	23be      	movs	r3, #190	; 0xbe
 8003ffc:	0059      	lsls	r1, r3, #1
 8003ffe:	0013      	movs	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	189b      	adds	r3, r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	18c3      	adds	r3, r0, r3
 8004008:	185b      	adds	r3, r3, r1
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800400e:	193b      	adds	r3, r7, r4
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	23c0      	movs	r3, #192	; 0xc0
 8004016:	0059      	lsls	r1, r3, #1
 8004018:	0013      	movs	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	189b      	adds	r3, r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	18c3      	adds	r3, r0, r3
 8004022:	185b      	adds	r3, r3, r1
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	193b      	adds	r3, r7, r4
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	193b      	adds	r3, r7, r4
 800402e:	3201      	adds	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	230f      	movs	r3, #15
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	781a      	ldrb	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	d3a1      	bcc.n	8003f84 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	466a      	mov	r2, sp
 8004048:	0011      	movs	r1, r2
 800404a:	001a      	movs	r2, r3
 800404c:	3210      	adds	r2, #16
 800404e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8004050:	c170      	stmia	r1!, {r4, r5, r6}
 8004052:	ca30      	ldmia	r2!, {r4, r5}
 8004054:	c130      	stmia	r1!, {r4, r5}
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f002 f864 	bl	8006128 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a08      	ldr	r2, [pc, #32]	; (800408c <HAL_PCD_Init+0x21c>)
 800406c:	2101      	movs	r1, #1
 800406e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d103      	bne.n	8004080 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0018      	movs	r0, r3
 800407c:	f000 f808 	bl	8004090 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b005      	add	sp, #20
 8004088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	000002a9 	.word	0x000002a9

08004090 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	23ba      	movs	r3, #186	; 0xba
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	2101      	movs	r1, #1
 80040a6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	23b8      	movs	r3, #184	; 0xb8
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	2100      	movs	r1, #0
 80040b0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2254      	movs	r2, #84	; 0x54
 80040b6:	5a9b      	ldrh	r3, [r3, r2]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2201      	movs	r2, #1
 80040bc:	4313      	orrs	r3, r2
 80040be:	b299      	uxth	r1, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2254      	movs	r2, #84	; 0x54
 80040c4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2254      	movs	r2, #84	; 0x54
 80040ca:	5a9b      	ldrh	r3, [r3, r2]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2202      	movs	r2, #2
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b299      	uxth	r1, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2254      	movs	r2, #84	; 0x54
 80040d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b004      	add	sp, #16
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f000 fb76 	bl	80047e4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2201      	movs	r2, #1
 80040fe:	4013      	ands	r3, r2
 8004100:	d100      	bne.n	8004104 <HAL_RCC_OscConfig+0x20>
 8004102:	e08e      	b.n	8004222 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004104:	4bc5      	ldr	r3, [pc, #788]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	220c      	movs	r2, #12
 800410a:	4013      	ands	r3, r2
 800410c:	2b04      	cmp	r3, #4
 800410e:	d00e      	beq.n	800412e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004110:	4bc2      	ldr	r3, [pc, #776]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	220c      	movs	r2, #12
 8004116:	4013      	ands	r3, r2
 8004118:	2b08      	cmp	r3, #8
 800411a:	d117      	bne.n	800414c <HAL_RCC_OscConfig+0x68>
 800411c:	4bbf      	ldr	r3, [pc, #764]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	23c0      	movs	r3, #192	; 0xc0
 8004122:	025b      	lsls	r3, r3, #9
 8004124:	401a      	ands	r2, r3
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	025b      	lsls	r3, r3, #9
 800412a:	429a      	cmp	r2, r3
 800412c:	d10e      	bne.n	800414c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412e:	4bbb      	ldr	r3, [pc, #748]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	029b      	lsls	r3, r3, #10
 8004136:	4013      	ands	r3, r2
 8004138:	d100      	bne.n	800413c <HAL_RCC_OscConfig+0x58>
 800413a:	e071      	b.n	8004220 <HAL_RCC_OscConfig+0x13c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d000      	beq.n	8004146 <HAL_RCC_OscConfig+0x62>
 8004144:	e06c      	b.n	8004220 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f000 fb4c 	bl	80047e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x80>
 8004154:	4bb1      	ldr	r3, [pc, #708]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4bb0      	ldr	r3, [pc, #704]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	0249      	lsls	r1, r1, #9
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e02f      	b.n	80041c4 <HAL_RCC_OscConfig+0xe0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10c      	bne.n	8004186 <HAL_RCC_OscConfig+0xa2>
 800416c:	4bab      	ldr	r3, [pc, #684]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4baa      	ldr	r3, [pc, #680]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004172:	49ab      	ldr	r1, [pc, #684]	; (8004420 <HAL_RCC_OscConfig+0x33c>)
 8004174:	400a      	ands	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	4ba8      	ldr	r3, [pc, #672]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4ba7      	ldr	r3, [pc, #668]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800417e:	49a9      	ldr	r1, [pc, #676]	; (8004424 <HAL_RCC_OscConfig+0x340>)
 8004180:	400a      	ands	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e01e      	b.n	80041c4 <HAL_RCC_OscConfig+0xe0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d10e      	bne.n	80041ac <HAL_RCC_OscConfig+0xc8>
 800418e:	4ba3      	ldr	r3, [pc, #652]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4ba2      	ldr	r3, [pc, #648]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	02c9      	lsls	r1, r1, #11
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	4b9f      	ldr	r3, [pc, #636]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b9e      	ldr	r3, [pc, #632]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80041a2:	2180      	movs	r1, #128	; 0x80
 80041a4:	0249      	lsls	r1, r1, #9
 80041a6:	430a      	orrs	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xe0>
 80041ac:	4b9b      	ldr	r3, [pc, #620]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b9a      	ldr	r3, [pc, #616]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80041b2:	499b      	ldr	r1, [pc, #620]	; (8004420 <HAL_RCC_OscConfig+0x33c>)
 80041b4:	400a      	ands	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	4b98      	ldr	r3, [pc, #608]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b97      	ldr	r3, [pc, #604]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80041be:	4999      	ldr	r1, [pc, #612]	; (8004424 <HAL_RCC_OscConfig+0x340>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d014      	beq.n	80041f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe fcfe 	bl	8002bcc <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d6:	f7fe fcf9 	bl	8002bcc <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b64      	cmp	r3, #100	; 0x64
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e2fd      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e8:	4b8c      	ldr	r3, [pc, #560]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4013      	ands	r3, r2
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0xf2>
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fe fce9 	bl	8002bcc <HAL_GetTick>
 80041fa:	0003      	movs	r3, r0
 80041fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe fce4 	bl	8002bcc <HAL_GetTick>
 8004204:	0002      	movs	r2, r0
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e2e8      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b82      	ldr	r3, [pc, #520]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	029b      	lsls	r3, r3, #10
 800421a:	4013      	ands	r3, r2
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x11c>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2202      	movs	r2, #2
 8004228:	4013      	ands	r3, r2
 800422a:	d100      	bne.n	800422e <HAL_RCC_OscConfig+0x14a>
 800422c:	e06c      	b.n	8004308 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800422e:	4b7b      	ldr	r3, [pc, #492]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	220c      	movs	r2, #12
 8004234:	4013      	ands	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004238:	4b78      	ldr	r3, [pc, #480]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	220c      	movs	r2, #12
 800423e:	4013      	ands	r3, r2
 8004240:	2b08      	cmp	r3, #8
 8004242:	d11f      	bne.n	8004284 <HAL_RCC_OscConfig+0x1a0>
 8004244:	4b75      	ldr	r3, [pc, #468]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	23c0      	movs	r3, #192	; 0xc0
 800424a:	025b      	lsls	r3, r3, #9
 800424c:	401a      	ands	r2, r3
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	429a      	cmp	r2, r3
 8004254:	d116      	bne.n	8004284 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	4b71      	ldr	r3, [pc, #452]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2202      	movs	r2, #2
 800425c:	4013      	ands	r3, r2
 800425e:	d005      	beq.n	800426c <HAL_RCC_OscConfig+0x188>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d001      	beq.n	800426c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e2bb      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b6b      	ldr	r3, [pc, #428]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	22f8      	movs	r2, #248	; 0xf8
 8004272:	4393      	bics	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00da      	lsls	r2, r3, #3
 800427c:	4b67      	ldr	r3, [pc, #412]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	e041      	b.n	8004308 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d024      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b63      	ldr	r3, [pc, #396]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b62      	ldr	r3, [pc, #392]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004292:	2101      	movs	r1, #1
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe fc98 	bl	8002bcc <HAL_GetTick>
 800429c:	0003      	movs	r3, r0
 800429e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042a2:	f7fe fc93 	bl	8002bcc <HAL_GetTick>
 80042a6:	0002      	movs	r2, r0
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e297      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b4:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2202      	movs	r2, #2
 80042ba:	4013      	ands	r3, r2
 80042bc:	d0f1      	beq.n	80042a2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b57      	ldr	r3, [pc, #348]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	22f8      	movs	r2, #248	; 0xf8
 80042c4:	4393      	bics	r3, r2
 80042c6:	0019      	movs	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	00da      	lsls	r2, r3, #3
 80042ce:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e018      	b.n	8004308 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d6:	4b51      	ldr	r3, [pc, #324]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80042dc:	2101      	movs	r1, #1
 80042de:	438a      	bics	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fe fc73 	bl	8002bcc <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ec:	f7fe fc6e 	bl	8002bcc <HAL_GetTick>
 80042f0:	0002      	movs	r2, r0
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e272      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2202      	movs	r2, #2
 8004304:	4013      	ands	r3, r2
 8004306:	d1f1      	bne.n	80042ec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	4013      	ands	r3, r2
 8004310:	d036      	beq.n	8004380 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d019      	beq.n	800434e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431a:	4b40      	ldr	r3, [pc, #256]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800431c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431e:	4b3f      	ldr	r3, [pc, #252]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004320:	2101      	movs	r1, #1
 8004322:	430a      	orrs	r2, r1
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fe fc51 	bl	8002bcc <HAL_GetTick>
 800432a:	0003      	movs	r3, r0
 800432c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004330:	f7fe fc4c 	bl	8002bcc <HAL_GetTick>
 8004334:	0002      	movs	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e250      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004342:	4b36      	ldr	r3, [pc, #216]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	2202      	movs	r2, #2
 8004348:	4013      	ands	r3, r2
 800434a:	d0f1      	beq.n	8004330 <HAL_RCC_OscConfig+0x24c>
 800434c:	e018      	b.n	8004380 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434e:	4b33      	ldr	r3, [pc, #204]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004352:	4b32      	ldr	r3, [pc, #200]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004354:	2101      	movs	r1, #1
 8004356:	438a      	bics	r2, r1
 8004358:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435a:	f7fe fc37 	bl	8002bcc <HAL_GetTick>
 800435e:	0003      	movs	r3, r0
 8004360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004364:	f7fe fc32 	bl	8002bcc <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e236      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2202      	movs	r2, #2
 800437c:	4013      	ands	r3, r2
 800437e:	d1f1      	bne.n	8004364 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2204      	movs	r2, #4
 8004386:	4013      	ands	r3, r2
 8004388:	d100      	bne.n	800438c <HAL_RCC_OscConfig+0x2a8>
 800438a:	e0b5      	b.n	80044f8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438c:	201f      	movs	r0, #31
 800438e:	183b      	adds	r3, r7, r0
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	055b      	lsls	r3, r3, #21
 800439c:	4013      	ands	r3, r2
 800439e:	d110      	bne.n	80043c2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	0549      	lsls	r1, r1, #21
 80043aa:	430a      	orrs	r2, r1
 80043ac:	61da      	str	r2, [r3, #28]
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCC_OscConfig+0x338>)
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	055b      	lsls	r3, r3, #21
 80043b6:	4013      	ands	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043bc:	183b      	adds	r3, r7, r0
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c2:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x344>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	d11a      	bne.n	8004404 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ce:	4b16      	ldr	r3, [pc, #88]	; (8004428 <HAL_RCC_OscConfig+0x344>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_RCC_OscConfig+0x344>)
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	0049      	lsls	r1, r1, #1
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043dc:	f7fe fbf6 	bl	8002bcc <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e6:	f7fe fbf1 	bl	8002bcc <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b64      	cmp	r3, #100	; 0x64
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1f5      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x344>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4013      	ands	r3, r2
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d10f      	bne.n	800442c <HAL_RCC_OscConfig+0x348>
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_OscConfig+0x338>)
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	4b02      	ldr	r3, [pc, #8]	; (800441c <HAL_RCC_OscConfig+0x338>)
 8004412:	2101      	movs	r1, #1
 8004414:	430a      	orrs	r2, r1
 8004416:	621a      	str	r2, [r3, #32]
 8004418:	e036      	b.n	8004488 <HAL_RCC_OscConfig+0x3a4>
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	40021000 	.word	0x40021000
 8004420:	fffeffff 	.word	0xfffeffff
 8004424:	fffbffff 	.word	0xfffbffff
 8004428:	40007000 	.word	0x40007000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <HAL_RCC_OscConfig+0x36a>
 8004434:	4bca      	ldr	r3, [pc, #808]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004436:	6a1a      	ldr	r2, [r3, #32]
 8004438:	4bc9      	ldr	r3, [pc, #804]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800443a:	2101      	movs	r1, #1
 800443c:	438a      	bics	r2, r1
 800443e:	621a      	str	r2, [r3, #32]
 8004440:	4bc7      	ldr	r3, [pc, #796]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	4bc6      	ldr	r3, [pc, #792]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004446:	2104      	movs	r1, #4
 8004448:	438a      	bics	r2, r1
 800444a:	621a      	str	r2, [r3, #32]
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x3a4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b05      	cmp	r3, #5
 8004454:	d10c      	bne.n	8004470 <HAL_RCC_OscConfig+0x38c>
 8004456:	4bc2      	ldr	r3, [pc, #776]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004458:	6a1a      	ldr	r2, [r3, #32]
 800445a:	4bc1      	ldr	r3, [pc, #772]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800445c:	2104      	movs	r1, #4
 800445e:	430a      	orrs	r2, r1
 8004460:	621a      	str	r2, [r3, #32]
 8004462:	4bbf      	ldr	r3, [pc, #764]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	4bbe      	ldr	r3, [pc, #760]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004468:	2101      	movs	r1, #1
 800446a:	430a      	orrs	r2, r1
 800446c:	621a      	str	r2, [r3, #32]
 800446e:	e00b      	b.n	8004488 <HAL_RCC_OscConfig+0x3a4>
 8004470:	4bbb      	ldr	r3, [pc, #748]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	4bba      	ldr	r3, [pc, #744]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004476:	2101      	movs	r1, #1
 8004478:	438a      	bics	r2, r1
 800447a:	621a      	str	r2, [r3, #32]
 800447c:	4bb8      	ldr	r3, [pc, #736]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	4bb7      	ldr	r3, [pc, #732]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004482:	2104      	movs	r1, #4
 8004484:	438a      	bics	r2, r1
 8004486:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d014      	beq.n	80044ba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004490:	f7fe fb9c 	bl	8002bcc <HAL_GetTick>
 8004494:	0003      	movs	r3, r0
 8004496:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004498:	e009      	b.n	80044ae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fe fb97 	bl	8002bcc <HAL_GetTick>
 800449e:	0002      	movs	r2, r0
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	4aaf      	ldr	r2, [pc, #700]	; (8004764 <HAL_RCC_OscConfig+0x680>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e19a      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	4bac      	ldr	r3, [pc, #688]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	2202      	movs	r2, #2
 80044b4:	4013      	ands	r3, r2
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x3b6>
 80044b8:	e013      	b.n	80044e2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ba:	f7fe fb87 	bl	8002bcc <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c2:	e009      	b.n	80044d8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fe fb82 	bl	8002bcc <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	4aa5      	ldr	r2, [pc, #660]	; (8004764 <HAL_RCC_OscConfig+0x680>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e185      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d8:	4ba1      	ldr	r3, [pc, #644]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	2202      	movs	r2, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044e2:	231f      	movs	r3, #31
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ec:	4b9c      	ldr	r3, [pc, #624]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	4b9b      	ldr	r3, [pc, #620]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80044f2:	499d      	ldr	r1, [pc, #628]	; (8004768 <HAL_RCC_OscConfig+0x684>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2210      	movs	r2, #16
 80044fe:	4013      	ands	r3, r2
 8004500:	d063      	beq.n	80045ca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d12a      	bne.n	8004560 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800450a:	4b95      	ldr	r3, [pc, #596]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800450c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450e:	4b94      	ldr	r3, [pc, #592]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004510:	2104      	movs	r1, #4
 8004512:	430a      	orrs	r2, r1
 8004514:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004516:	4b92      	ldr	r3, [pc, #584]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451a:	4b91      	ldr	r3, [pc, #580]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800451c:	2101      	movs	r1, #1
 800451e:	430a      	orrs	r2, r1
 8004520:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004522:	f7fe fb53 	bl	8002bcc <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800452c:	f7fe fb4e 	bl	8002bcc <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e152      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800453e:	4b88      	ldr	r3, [pc, #544]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	2202      	movs	r2, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d0f1      	beq.n	800452c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004548:	4b85      	ldr	r3, [pc, #532]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	22f8      	movs	r2, #248	; 0xf8
 800454e:	4393      	bics	r3, r2
 8004550:	0019      	movs	r1, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	00da      	lsls	r2, r3, #3
 8004558:	4b81      	ldr	r3, [pc, #516]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800455a:	430a      	orrs	r2, r1
 800455c:	635a      	str	r2, [r3, #52]	; 0x34
 800455e:	e034      	b.n	80045ca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	3305      	adds	r3, #5
 8004566:	d111      	bne.n	800458c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004568:	4b7d      	ldr	r3, [pc, #500]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800456a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456c:	4b7c      	ldr	r3, [pc, #496]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800456e:	2104      	movs	r1, #4
 8004570:	438a      	bics	r2, r1
 8004572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004574:	4b7a      	ldr	r3, [pc, #488]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	22f8      	movs	r2, #248	; 0xf8
 800457a:	4393      	bics	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	00da      	lsls	r2, r3, #3
 8004584:	4b76      	ldr	r3, [pc, #472]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004586:	430a      	orrs	r2, r1
 8004588:	635a      	str	r2, [r3, #52]	; 0x34
 800458a:	e01e      	b.n	80045ca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800458c:	4b74      	ldr	r3, [pc, #464]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	4b73      	ldr	r3, [pc, #460]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004592:	2104      	movs	r1, #4
 8004594:	430a      	orrs	r2, r1
 8004596:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004598:	4b71      	ldr	r3, [pc, #452]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800459a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459c:	4b70      	ldr	r3, [pc, #448]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800459e:	2101      	movs	r1, #1
 80045a0:	438a      	bics	r2, r1
 80045a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a4:	f7fe fb12 	bl	8002bcc <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80045ae:	f7fe fb0d 	bl	8002bcc <HAL_GetTick>
 80045b2:	0002      	movs	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e111      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80045c0:	4b67      	ldr	r3, [pc, #412]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	2202      	movs	r2, #2
 80045c6:	4013      	ands	r3, r2
 80045c8:	d1f1      	bne.n	80045ae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2220      	movs	r2, #32
 80045d0:	4013      	ands	r3, r2
 80045d2:	d05c      	beq.n	800468e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045d4:	4b62      	ldr	r3, [pc, #392]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	220c      	movs	r2, #12
 80045da:	4013      	ands	r3, r2
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d00e      	beq.n	80045fe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045e0:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	220c      	movs	r2, #12
 80045e6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d114      	bne.n	8004616 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045ec:	4b5c      	ldr	r3, [pc, #368]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	23c0      	movs	r3, #192	; 0xc0
 80045f2:	025b      	lsls	r3, r3, #9
 80045f4:	401a      	ands	r2, r3
 80045f6:	23c0      	movs	r3, #192	; 0xc0
 80045f8:	025b      	lsls	r3, r3, #9
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d10b      	bne.n	8004616 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80045fe:	4b58      	ldr	r3, [pc, #352]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	025b      	lsls	r3, r3, #9
 8004606:	4013      	ands	r3, r2
 8004608:	d040      	beq.n	800468c <HAL_RCC_OscConfig+0x5a8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d03c      	beq.n	800468c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0e6      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01b      	beq.n	8004656 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800461e:	4b50      	ldr	r3, [pc, #320]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004622:	4b4f      	ldr	r3, [pc, #316]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	0249      	lsls	r1, r1, #9
 8004628:	430a      	orrs	r2, r1
 800462a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe face 	bl	8002bcc <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004636:	f7fe fac9 	bl	8002bcc <HAL_GetTick>
 800463a:	0002      	movs	r2, r0
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0cd      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800464a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	025b      	lsls	r3, r3, #9
 8004650:	4013      	ands	r3, r2
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x552>
 8004654:	e01b      	b.n	800468e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004656:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800465a:	4b41      	ldr	r3, [pc, #260]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800465c:	4943      	ldr	r1, [pc, #268]	; (800476c <HAL_RCC_OscConfig+0x688>)
 800465e:	400a      	ands	r2, r1
 8004660:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fe fab3 	bl	8002bcc <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800466c:	f7fe faae 	bl	8002bcc <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0b2      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800467e:	4b38      	ldr	r3, [pc, #224]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	025b      	lsls	r3, r3, #9
 8004686:	4013      	ands	r3, r2
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x588>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800468c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	2b00      	cmp	r3, #0
 8004694:	d100      	bne.n	8004698 <HAL_RCC_OscConfig+0x5b4>
 8004696:	e0a4      	b.n	80047e2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	220c      	movs	r2, #12
 800469e:	4013      	ands	r3, r2
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d100      	bne.n	80046a6 <HAL_RCC_OscConfig+0x5c2>
 80046a4:	e078      	b.n	8004798 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d14c      	bne.n	8004748 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ae:	4b2c      	ldr	r3, [pc, #176]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80046b4:	492e      	ldr	r1, [pc, #184]	; (8004770 <HAL_RCC_OscConfig+0x68c>)
 80046b6:	400a      	ands	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ba:	f7fe fa87 	bl	8002bcc <HAL_GetTick>
 80046be:	0003      	movs	r3, r0
 80046c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe fa82 	bl	8002bcc <HAL_GetTick>
 80046c8:	0002      	movs	r2, r0
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e086      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d6:	4b22      	ldr	r3, [pc, #136]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	049b      	lsls	r3, r3, #18
 80046de:	4013      	ands	r3, r2
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	220f      	movs	r2, #15
 80046e8:	4393      	bics	r3, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80046f2:	430a      	orrs	r2, r1
 80046f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <HAL_RCC_OscConfig+0x690>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	431a      	orrs	r2, r3
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 8004716:	2180      	movs	r1, #128	; 0x80
 8004718:	0449      	lsls	r1, r1, #17
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fe fa55 	bl	8002bcc <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004728:	f7fe fa50 	bl	8002bcc <HAL_GetTick>
 800472c:	0002      	movs	r2, r0
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e054      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800473a:	4b09      	ldr	r3, [pc, #36]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	049b      	lsls	r3, r3, #18
 8004742:	4013      	ands	r3, r2
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x644>
 8004746:	e04c      	b.n	80047e2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b04      	ldr	r3, [pc, #16]	; (8004760 <HAL_RCC_OscConfig+0x67c>)
 800474e:	4908      	ldr	r1, [pc, #32]	; (8004770 <HAL_RCC_OscConfig+0x68c>)
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fe fa3a 	bl	8002bcc <HAL_GetTick>
 8004758:	0003      	movs	r3, r0
 800475a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475c:	e015      	b.n	800478a <HAL_RCC_OscConfig+0x6a6>
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	40021000 	.word	0x40021000
 8004764:	00001388 	.word	0x00001388
 8004768:	efffffff 	.word	0xefffffff
 800476c:	fffeffff 	.word	0xfffeffff
 8004770:	feffffff 	.word	0xfeffffff
 8004774:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7fe fa28 	bl	8002bcc <HAL_GetTick>
 800477c:	0002      	movs	r2, r0
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e02c      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_RCC_OscConfig+0x708>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	049b      	lsls	r3, r3, #18
 8004792:	4013      	ands	r3, r2
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x694>
 8004796:	e024      	b.n	80047e2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e01f      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_RCC_OscConfig+0x708>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCC_OscConfig+0x708>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	23c0      	movs	r3, #192	; 0xc0
 80047b4:	025b      	lsls	r3, r3, #9
 80047b6:	401a      	ands	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	429a      	cmp	r2, r3
 80047be:	d10e      	bne.n	80047de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	220f      	movs	r2, #15
 80047c4:	401a      	ands	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d107      	bne.n	80047de <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	23f0      	movs	r3, #240	; 0xf0
 80047d2:	039b      	lsls	r3, r3, #14
 80047d4:	401a      	ands	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b008      	add	sp, #32
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40021000 	.word	0x40021000

080047f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0bf      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	4013      	ands	r3, r2
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d911      	bls.n	8004836 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b5e      	ldr	r3, [pc, #376]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2201      	movs	r2, #1
 8004818:	4393      	bics	r3, r2
 800481a:	0019      	movs	r1, r3
 800481c:	4b5b      	ldr	r3, [pc, #364]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	4013      	ands	r3, r2
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d001      	beq.n	8004836 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e0a6      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2202      	movs	r2, #2
 800483c:	4013      	ands	r3, r2
 800483e:	d015      	beq.n	800486c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2204      	movs	r2, #4
 8004846:	4013      	ands	r3, r2
 8004848:	d006      	beq.n	8004858 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800484a:	4b51      	ldr	r3, [pc, #324]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	4b50      	ldr	r3, [pc, #320]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 8004850:	21e0      	movs	r1, #224	; 0xe0
 8004852:	00c9      	lsls	r1, r1, #3
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004858:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	22f0      	movs	r2, #240	; 0xf0
 800485e:	4393      	bics	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2201      	movs	r2, #1
 8004872:	4013      	ands	r3, r2
 8004874:	d04c      	beq.n	8004910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	4b44      	ldr	r3, [pc, #272]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	029b      	lsls	r3, r3, #10
 8004886:	4013      	ands	r3, r2
 8004888:	d120      	bne.n	80048cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e07a      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004896:	4b3e      	ldr	r3, [pc, #248]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	049b      	lsls	r3, r3, #18
 800489e:	4013      	ands	r3, r2
 80048a0:	d114      	bne.n	80048cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e06e      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048ae:	4b38      	ldr	r3, [pc, #224]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 80048b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	025b      	lsls	r3, r3, #9
 80048b6:	4013      	ands	r3, r2
 80048b8:	d108      	bne.n	80048cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e062      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048be:	4b34      	ldr	r3, [pc, #208]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2202      	movs	r2, #2
 80048c4:	4013      	ands	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e05b      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048cc:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2203      	movs	r2, #3
 80048d2:	4393      	bics	r3, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e0:	f7fe f974 	bl	8002bcc <HAL_GetTick>
 80048e4:	0003      	movs	r3, r0
 80048e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e8:	e009      	b.n	80048fe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ea:	f7fe f96f 	bl	8002bcc <HAL_GetTick>
 80048ee:	0002      	movs	r2, r0
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	4a27      	ldr	r2, [pc, #156]	; (8004994 <HAL_RCC_ClockConfig+0x1a4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e042      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	220c      	movs	r2, #12
 8004904:	401a      	ands	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	429a      	cmp	r2, r3
 800490e:	d1ec      	bne.n	80048ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	4013      	ands	r3, r2
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d211      	bcs.n	8004942 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491e:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	4393      	bics	r3, r2
 8004926:	0019      	movs	r1, r3
 8004928:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004930:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_RCC_ClockConfig+0x19c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2201      	movs	r2, #1
 8004936:	4013      	ands	r3, r2
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e020      	b.n	8004984 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2204      	movs	r2, #4
 8004948:	4013      	ands	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a11      	ldr	r2, [pc, #68]	; (8004998 <HAL_RCC_ClockConfig+0x1a8>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004960:	f000 f820 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004964:	0001      	movs	r1, r0
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x1a0>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	220f      	movs	r2, #15
 800496e:	4013      	ands	r3, r2
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <HAL_RCC_ClockConfig+0x1ac>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	000a      	movs	r2, r1
 8004976:	40da      	lsrs	r2, r3
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_ClockConfig+0x1b0>)
 800497a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800497c:	2003      	movs	r0, #3
 800497e:	f7fc fe0d 	bl	800159c <HAL_InitTick>
  
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b004      	add	sp, #16
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40022000 	.word	0x40022000
 8004990:	40021000 	.word	0x40021000
 8004994:	00001388 	.word	0x00001388
 8004998:	fffff8ff 	.word	0xfffff8ff
 800499c:	0800dbe8 	.word	0x0800dbe8
 80049a0:	20000000 	.word	0x20000000

080049a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b08f      	sub	sp, #60	; 0x3c
 80049a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80049aa:	2314      	movs	r3, #20
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	4a38      	ldr	r2, [pc, #224]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xec>)
 80049b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049b2:	c313      	stmia	r3!, {r0, r1, r4}
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80049b8:	1d3b      	adds	r3, r7, #4
 80049ba:	4a36      	ldr	r2, [pc, #216]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xf0>)
 80049bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80049be:	c313      	stmia	r3!, {r0, r1, r4}
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c8:	2300      	movs	r3, #0
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80049cc:	2300      	movs	r3, #0
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
 80049d0:	2300      	movs	r3, #0
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	220c      	movs	r2, #12
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d047      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0xd4>
 80049e8:	d849      	bhi.n	8004a7e <HAL_RCC_GetSysClockFreq+0xda>
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d002      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0x50>
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d003      	beq.n	80049fa <HAL_RCC_GetSysClockFreq+0x56>
 80049f2:	e044      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049f8:	e044      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	0c9b      	lsrs	r3, r3, #18
 80049fe:	220f      	movs	r2, #15
 8004a00:	4013      	ands	r3, r2
 8004a02:	2214      	movs	r2, #20
 8004a04:	18ba      	adds	r2, r7, r2
 8004a06:	5cd3      	ldrb	r3, [r2, r3]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	220f      	movs	r2, #15
 8004a10:	4013      	ands	r3, r2
 8004a12:	1d3a      	adds	r2, r7, #4
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	23c0      	movs	r3, #192	; 0xc0
 8004a1c:	025b      	lsls	r3, r3, #9
 8004a1e:	401a      	ands	r2, r3
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	025b      	lsls	r3, r3, #9
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d109      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2a:	481c      	ldr	r0, [pc, #112]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a2c:	f7fb fb76 	bl	800011c <__udivsi3>
 8004a30:	0003      	movs	r3, r0
 8004a32:	001a      	movs	r2, r3
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	4353      	muls	r3, r2
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3a:	e01a      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a3e:	23c0      	movs	r3, #192	; 0xc0
 8004a40:	025b      	lsls	r3, r3, #9
 8004a42:	401a      	ands	r2, r3
 8004a44:	23c0      	movs	r3, #192	; 0xc0
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d109      	bne.n	8004a60 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4e:	4814      	ldr	r0, [pc, #80]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a50:	f7fb fb64 	bl	800011c <__udivsi3>
 8004a54:	0003      	movs	r3, r0
 8004a56:	001a      	movs	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	4353      	muls	r3, r2
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a62:	480e      	ldr	r0, [pc, #56]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a64:	f7fb fb5a 	bl	800011c <__udivsi3>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	4353      	muls	r3, r2
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a76:	e005      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a7c:	e002      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a82:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004a86:	0018      	movs	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b00f      	add	sp, #60	; 0x3c
 8004a8c:	bd90      	pop	{r4, r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	0800da54 	.word	0x0800da54
 8004a94:	0800da64 	.word	0x0800da64
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	007a1200 	.word	0x007a1200
 8004aa0:	02dc6c00 	.word	0x02dc6c00

08004aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	20000000 	.word	0x20000000

08004ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004abc:	f7ff fff2 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac0:	0001      	movs	r1, r0
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	2207      	movs	r2, #7
 8004aca:	4013      	ands	r3, r2
 8004acc:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ace:	5cd3      	ldrb	r3, [r2, r3]
 8004ad0:	40d9      	lsrs	r1, r3
 8004ad2:	000b      	movs	r3, r1
}    
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	0800dbf8 	.word	0x0800dbf8

08004ae4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <HAL_RCC_GetClockConfig+0x4c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2203      	movs	r2, #3
 8004afa:	401a      	ands	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_GetClockConfig+0x4c>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	22f0      	movs	r2, #240	; 0xf0
 8004b06:	401a      	ands	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004b0c:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_RCC_GetClockConfig+0x4c>)
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	23e0      	movs	r3, #224	; 0xe0
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	401a      	ands	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_GetClockConfig+0x50>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	401a      	ands	r2, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40022000 	.word	0x40022000

08004b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	025b      	lsls	r3, r3, #9
 8004b50:	4013      	ands	r3, r2
 8004b52:	d100      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004b54:	e08e      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004b56:	2017      	movs	r0, #23
 8004b58:	183b      	adds	r3, r7, r0
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5e:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	055b      	lsls	r3, r3, #21
 8004b66:	4013      	ands	r3, r2
 8004b68:	d110      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b6a:	4b6b      	ldr	r3, [pc, #428]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b6c:	69da      	ldr	r2, [r3, #28]
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b70:	2180      	movs	r1, #128	; 0x80
 8004b72:	0549      	lsls	r1, r1, #21
 8004b74:	430a      	orrs	r2, r1
 8004b76:	61da      	str	r2, [r3, #28]
 8004b78:	4b67      	ldr	r3, [pc, #412]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	055b      	lsls	r3, r3, #21
 8004b80:	4013      	ands	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b86:	183b      	adds	r3, r7, r0
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	4b63      	ldr	r3, [pc, #396]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	4013      	ands	r3, r2
 8004b96:	d11a      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b98:	4b60      	ldr	r3, [pc, #384]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b5f      	ldr	r3, [pc, #380]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	0049      	lsls	r1, r1, #1
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba6:	f7fe f811 	bl	8002bcc <HAL_GetTick>
 8004baa:	0003      	movs	r3, r0
 8004bac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	e008      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb0:	f7fe f80c 	bl	8002bcc <HAL_GetTick>
 8004bb4:	0002      	movs	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e0a6      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b56      	ldr	r3, [pc, #344]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	2380      	movs	r3, #128	; 0x80
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bce:	4b52      	ldr	r3, [pc, #328]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	23c0      	movs	r3, #192	; 0xc0
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d034      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	23c0      	movs	r3, #192	; 0xc0
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d02c      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf0:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4a4a      	ldr	r2, [pc, #296]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004bfc:	6a1a      	ldr	r2, [r3, #32]
 8004bfe:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c00:	2180      	movs	r1, #128	; 0x80
 8004c02:	0249      	lsls	r1, r1, #9
 8004c04:	430a      	orrs	r2, r1
 8004c06:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c08:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c0a:	6a1a      	ldr	r2, [r3, #32]
 8004c0c:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c0e:	4945      	ldr	r1, [pc, #276]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004c10:	400a      	ands	r2, r1
 8004c12:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c14:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d013      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fd ffd3 	bl	8002bcc <HAL_GetTick>
 8004c26:	0003      	movs	r3, r0
 8004c28:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2a:	e009      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fd ffce 	bl	8002bcc <HAL_GetTick>
 8004c30:	0002      	movs	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a3c      	ldr	r2, [pc, #240]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e067      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c4a:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4a34      	ldr	r2, [pc, #208]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c5e:	2317      	movs	r3, #23
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d105      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c6e:	492f      	ldr	r1, [pc, #188]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004c70:	400a      	ands	r2, r1
 8004c72:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	2203      	movs	r2, #3
 8004c84:	4393      	bics	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2202      	movs	r2, #2
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	4a23      	ldr	r2, [pc, #140]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	4393      	bics	r3, r2
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d009      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	4393      	bics	r3, r2
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cea:	430a      	orrs	r2, r1
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	4393      	bics	r3, r2
 8004d02:	0019      	movs	r1, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b006      	add	sp, #24
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	fffffcff 	.word	0xfffffcff
 8004d24:	fffeffff 	.word	0xfffeffff
 8004d28:	00001388 	.word	0x00001388
 8004d2c:	efffffff 	.word	0xefffffff
 8004d30:	fffcffff 	.word	0xfffcffff

08004d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0a8      	b.n	8004e98 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	2382      	movs	r3, #130	; 0x82
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d009      	beq.n	8004d6e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	61da      	str	r2, [r3, #28]
 8004d60:	e005      	b.n	8004d6e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	225d      	movs	r2, #93	; 0x5d
 8004d78:	5c9b      	ldrb	r3, [r3, r2]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	225c      	movs	r2, #92	; 0x5c
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f7fc fb3c 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	225d      	movs	r2, #93	; 0x5d
 8004d94:	2102      	movs	r1, #2
 8004d96:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2140      	movs	r1, #64	; 0x40
 8004da4:	438a      	bics	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	23e0      	movs	r3, #224	; 0xe0
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d902      	bls.n	8004dba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e002      	b.n	8004dc0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	015b      	lsls	r3, r3, #5
 8004dbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	23f0      	movs	r3, #240	; 0xf0
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d008      	beq.n	8004dde <HAL_SPI_Init+0xaa>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	23e0      	movs	r3, #224	; 0xe0
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d002      	beq.n	8004dde <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	2382      	movs	r3, #130	; 0x82
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	401a      	ands	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6899      	ldr	r1, [r3, #8]
 8004dec:	2384      	movs	r3, #132	; 0x84
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	400b      	ands	r3, r1
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2102      	movs	r1, #2
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	2101      	movs	r1, #1
 8004e04:	400b      	ands	r3, r1
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6999      	ldr	r1, [r3, #24]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	400b      	ands	r3, r1
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	2138      	movs	r1, #56	; 0x38
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	400b      	ands	r3, r1
 8004e26:	431a      	orrs	r2, r3
 8004e28:	0011      	movs	r1, r2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	401a      	ands	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	2204      	movs	r2, #4
 8004e44:	401a      	ands	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2110      	movs	r1, #16
 8004e4c:	400b      	ands	r3, r1
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e54:	2108      	movs	r1, #8
 8004e56:	400b      	ands	r3, r1
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68d9      	ldr	r1, [r3, #12]
 8004e5e:	23f0      	movs	r3, #240	; 0xf0
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	400b      	ands	r3, r1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	0011      	movs	r1, r2
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	015b      	lsls	r3, r3, #5
 8004e6e:	401a      	ands	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4907      	ldr	r1, [pc, #28]	; (8004ea0 <HAL_SPI_Init+0x16c>)
 8004e84:	400a      	ands	r2, r1
 8004e86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	225d      	movs	r2, #93	; 0x5d
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	fffff7ff 	.word	0xfffff7ff

08004ea4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	1cbb      	adds	r3, r7, #2
 8004eb4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eba:	2323      	movs	r3, #35	; 0x23
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	225c      	movs	r2, #92	; 0x5c
 8004ec6:	5c9b      	ldrb	r3, [r3, r2]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x2c>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e1b5      	b.n	800523c <HAL_SPI_TransmitReceive+0x398>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	225c      	movs	r2, #92	; 0x5c
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed8:	f7fd fe78 	bl	8002bcc <HAL_GetTick>
 8004edc:	0003      	movs	r3, r0
 8004ede:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ee0:	201b      	movs	r0, #27
 8004ee2:	183b      	adds	r3, r7, r0
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	215d      	movs	r1, #93	; 0x5d
 8004ee8:	5c52      	ldrb	r2, [r2, r1]
 8004eea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ef2:	2312      	movs	r3, #18
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	1cba      	adds	r2, r7, #2
 8004ef8:	8812      	ldrh	r2, [r2, #0]
 8004efa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004efc:	183b      	adds	r3, r7, r0
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d011      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x84>
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	2382      	movs	r3, #130	; 0x82
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d107      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_SPI_TransmitReceive+0x7a>
 8004f16:	183b      	adds	r3, r7, r0
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d004      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004f1e:	2323      	movs	r3, #35	; 0x23
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	2202      	movs	r2, #2
 8004f24:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f26:	e17e      	b.n	8005226 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d006      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x98>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x98>
 8004f34:	1cbb      	adds	r3, r7, #2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004f3c:	2323      	movs	r3, #35	; 0x23
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f44:	e16f      	b.n	8005226 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	225d      	movs	r2, #93	; 0x5d
 8004f4a:	5c9b      	ldrb	r3, [r3, r2]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d003      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	225d      	movs	r2, #93	; 0x5d
 8004f56:	2105      	movs	r1, #5
 8004f58:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1cba      	adds	r2, r7, #2
 8004f6a:	2146      	movs	r1, #70	; 0x46
 8004f6c:	8812      	ldrh	r2, [r2, #0]
 8004f6e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1cba      	adds	r2, r7, #2
 8004f74:	2144      	movs	r1, #68	; 0x44
 8004f76:	8812      	ldrh	r2, [r2, #0]
 8004f78:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1cba      	adds	r2, r7, #2
 8004f84:	8812      	ldrh	r2, [r2, #0]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1cba      	adds	r2, r7, #2
 8004f8c:	8812      	ldrh	r2, [r2, #0]
 8004f8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	23e0      	movs	r3, #224	; 0xe0
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d908      	bls.n	8004fba <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	49a4      	ldr	r1, [pc, #656]	; (8005244 <HAL_SPI_TransmitReceive+0x3a0>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
 8004fb8:	e008      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2180      	movs	r1, #128	; 0x80
 8004fc6:	0149      	lsls	r1, r1, #5
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2240      	movs	r2, #64	; 0x40
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d007      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2140      	movs	r1, #64	; 0x40
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	23e0      	movs	r3, #224	; 0xe0
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d800      	bhi.n	8004ff8 <HAL_SPI_TransmitReceive+0x154>
 8004ff6:	e07f      	b.n	80050f8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_SPI_TransmitReceive+0x168>
 8005000:	2312      	movs	r3, #18
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d000      	beq.n	800500c <HAL_SPI_TransmitReceive+0x168>
 800500a:	e069      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005030:	e056      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2202      	movs	r2, #2
 800503a:	4013      	ands	r3, r2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d11b      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x1d4>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d016      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x1d4>
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b01      	cmp	r3, #1
 800504e:	d113      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	881a      	ldrh	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	1c9a      	adds	r2, r3, #2
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2201      	movs	r2, #1
 8005080:	4013      	ands	r3, r2
 8005082:	2b01      	cmp	r3, #1
 8005084:	d11c      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x21c>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2246      	movs	r2, #70	; 0x46
 800508a:	5a9b      	ldrh	r3, [r3, r2]
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d016      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	b292      	uxth	r2, r2
 800509e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	1c9a      	adds	r2, r3, #2
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2246      	movs	r2, #70	; 0x46
 80050ae:	5a9b      	ldrh	r3, [r3, r2]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b299      	uxth	r1, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2246      	movs	r2, #70	; 0x46
 80050ba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050bc:	2301      	movs	r3, #1
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050c0:	f7fd fd84 	bl	8002bcc <HAL_GetTick>
 80050c4:	0002      	movs	r2, r0
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d807      	bhi.n	80050e0 <HAL_SPI_TransmitReceive+0x23c>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	3301      	adds	r3, #1
 80050d4:	d004      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80050d6:	2323      	movs	r3, #35	; 0x23
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	2203      	movs	r2, #3
 80050dc:	701a      	strb	r2, [r3, #0]
        goto error;
 80050de:	e0a2      	b.n	8005226 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1a3      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x18e>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2246      	movs	r2, #70	; 0x46
 80050ee:	5a9b      	ldrh	r3, [r3, r2]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d19d      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x18e>
 80050f6:	e085      	b.n	8005204 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_SPI_TransmitReceive+0x268>
 8005100:	2312      	movs	r3, #18
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d000      	beq.n	800510c <HAL_SPI_TransmitReceive+0x268>
 800510a:	e070      	b.n	80051ee <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	7812      	ldrb	r2, [r2, #0]
 8005118:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005132:	e05c      	b.n	80051ee <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2202      	movs	r2, #2
 800513c:	4013      	ands	r3, r2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d11c      	bne.n	800517c <HAL_SPI_TransmitReceive+0x2d8>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d017      	beq.n	800517c <HAL_SPI_TransmitReceive+0x2d8>
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	2b01      	cmp	r3, #1
 8005150:	d114      	bne.n	800517c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	330c      	adds	r3, #12
 800515c:	7812      	ldrb	r2, [r2, #0]
 800515e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2201      	movs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	2b01      	cmp	r3, #1
 8005188:	d11e      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x324>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2246      	movs	r2, #70	; 0x46
 800518e:	5a9b      	ldrh	r3, [r3, r2]
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d018      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	001a      	movs	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	7812      	ldrb	r2, [r2, #0]
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2246      	movs	r2, #70	; 0x46
 80051b6:	5a9b      	ldrh	r3, [r3, r2]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b299      	uxth	r1, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2246      	movs	r2, #70	; 0x46
 80051c2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051c4:	2301      	movs	r3, #1
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051c8:	f7fd fd00 	bl	8002bcc <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d802      	bhi.n	80051de <HAL_SPI_TransmitReceive+0x33a>
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	3301      	adds	r3, #1
 80051dc:	d102      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x340>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80051e4:	2323      	movs	r3, #35	; 0x23
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	2203      	movs	r2, #3
 80051ea:	701a      	strb	r2, [r3, #0]
        goto error;
 80051ec:	e01b      	b.n	8005226 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d19d      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x290>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2246      	movs	r2, #70	; 0x46
 80051fc:	5a9b      	ldrh	r3, [r3, r2]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d197      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	0018      	movs	r0, r3
 800520c:	f000 f94c 	bl	80054a8 <SPI_EndRxTxTransaction>
 8005210:	1e03      	subs	r3, r0, #0
 8005212:	d007      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005214:	2323      	movs	r3, #35	; 0x23
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2201      	movs	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	661a      	str	r2, [r3, #96]	; 0x60
 8005222:	e000      	b.n	8005226 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005224:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	225d      	movs	r2, #93	; 0x5d
 800522a:	2101      	movs	r1, #1
 800522c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	225c      	movs	r2, #92	; 0x5c
 8005232:	2100      	movs	r1, #0
 8005234:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005236:	2323      	movs	r3, #35	; 0x23
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	781b      	ldrb	r3, [r3, #0]
}
 800523c:	0018      	movs	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	b00a      	add	sp, #40	; 0x28
 8005242:	bd80      	pop	{r7, pc}
 8005244:	ffffefff 	.word	0xffffefff

08005248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	1dfb      	adds	r3, r7, #7
 8005256:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005258:	f7fd fcb8 	bl	8002bcc <HAL_GetTick>
 800525c:	0002      	movs	r2, r0
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005268:	f7fd fcb0 	bl	8002bcc <HAL_GetTick>
 800526c:	0003      	movs	r3, r0
 800526e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005270:	4b3a      	ldr	r3, [pc, #232]	; (800535c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	015b      	lsls	r3, r3, #5
 8005276:	0d1b      	lsrs	r3, r3, #20
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	4353      	muls	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800527e:	e058      	b.n	8005332 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	d055      	beq.n	8005332 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005286:	f7fd fca1 	bl	8002bcc <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	429a      	cmp	r2, r3
 8005294:	d902      	bls.n	800529c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d142      	bne.n	8005322 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	21e0      	movs	r1, #224	; 0xe0
 80052a8:	438a      	bics	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	2382      	movs	r3, #130	; 0x82
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d113      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d005      	beq.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d107      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2140      	movs	r1, #64	; 0x40
 80052dc:	438a      	bics	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	019b      	lsls	r3, r3, #6
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d110      	bne.n	800530e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	491a      	ldr	r1, [pc, #104]	; (8005360 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80052f8:	400a      	ands	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2180      	movs	r1, #128	; 0x80
 8005308:	0189      	lsls	r1, r1, #6
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	225d      	movs	r2, #93	; 0x5d
 8005312:	2101      	movs	r1, #1
 8005314:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	225c      	movs	r2, #92	; 0x5c
 800531a:	2100      	movs	r1, #0
 800531c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e017      	b.n	8005352 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	3b01      	subs	r3, #1
 8005330:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	4013      	ands	r3, r2
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	425a      	negs	r2, r3
 8005342:	4153      	adcs	r3, r2
 8005344:	b2db      	uxtb	r3, r3
 8005346:	001a      	movs	r2, r3
 8005348:	1dfb      	adds	r3, r7, #7
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d197      	bne.n	8005280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b008      	add	sp, #32
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	20000000 	.word	0x20000000
 8005360:	ffffdfff 	.word	0xffffdfff

08005364 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005372:	2317      	movs	r3, #23
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800537a:	f7fd fc27 	bl	8002bcc <HAL_GetTick>
 800537e:	0002      	movs	r2, r0
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	18d3      	adds	r3, r2, r3
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800538a:	f7fd fc1f 	bl	8002bcc <HAL_GetTick>
 800538e:	0003      	movs	r3, r0
 8005390:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800539a:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	0013      	movs	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	00da      	lsls	r2, r3, #3
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	0d1b      	lsrs	r3, r3, #20
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	4353      	muls	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053b0:	e068      	b.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	23c0      	movs	r3, #192	; 0xc0
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d10a      	bne.n	80053d2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	2117      	movs	r1, #23
 80053ca:	187b      	adds	r3, r7, r1
 80053cc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	d055      	beq.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d8:	f7fd fbf8 	bl	8002bcc <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d902      	bls.n	80053ee <SPI_WaitFifoStateUntilTimeout+0x8a>
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d142      	bne.n	8005474 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	21e0      	movs	r1, #224	; 0xe0
 80053fa:	438a      	bics	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	2382      	movs	r3, #130	; 0x82
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	429a      	cmp	r2, r3
 8005408:	d113      	bne.n	8005432 <SPI_WaitFifoStateUntilTimeout+0xce>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	429a      	cmp	r2, r3
 8005414:	d005      	beq.n	8005422 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	429a      	cmp	r2, r3
 8005420:	d107      	bne.n	8005432 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	438a      	bics	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	429a      	cmp	r2, r3
 800543c:	d110      	bne.n	8005460 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4916      	ldr	r1, [pc, #88]	; (80054a4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800544a:	400a      	ands	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2180      	movs	r1, #128	; 0x80
 800545a:	0189      	lsls	r1, r1, #6
 800545c:	430a      	orrs	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	225d      	movs	r2, #93	; 0x5d
 8005464:	2101      	movs	r1, #1
 8005466:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	225c      	movs	r2, #92	; 0x5c
 800546c:	2100      	movs	r1, #0
 800546e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e010      	b.n	8005496 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3b01      	subs	r3, #1
 8005482:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d18e      	bne.n	80053b2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b00a      	add	sp, #40	; 0x28
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000000 	.word	0x20000000
 80054a4:	ffffdfff 	.word	0xffffdfff

080054a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	23c0      	movs	r3, #192	; 0xc0
 80054b8:	0159      	lsls	r1, r3, #5
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	0013      	movs	r3, r2
 80054c2:	2200      	movs	r2, #0
 80054c4:	f7ff ff4e 	bl	8005364 <SPI_WaitFifoStateUntilTimeout>
 80054c8:	1e03      	subs	r3, r0, #0
 80054ca:	d007      	beq.n	80054dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d0:	2220      	movs	r2, #32
 80054d2:	431a      	orrs	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e027      	b.n	800552c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	0013      	movs	r3, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	f7ff fead 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 80054ee:	1e03      	subs	r3, r0, #0
 80054f0:	d007      	beq.n	8005502 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f6:	2220      	movs	r2, #32
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e014      	b.n	800552c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	23c0      	movs	r3, #192	; 0xc0
 8005506:	00d9      	lsls	r1, r3, #3
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	0013      	movs	r3, r2
 8005510:	2200      	movs	r2, #0
 8005512:	f7ff ff27 	bl	8005364 <SPI_WaitFifoStateUntilTimeout>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d007      	beq.n	800552a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551e:	2220      	movs	r2, #32
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e000      	b.n	800552c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b004      	add	sp, #16
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e042      	b.n	80055cc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	223d      	movs	r2, #61	; 0x3d
 800554a:	5c9b      	ldrb	r3, [r3, r2]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	223c      	movs	r2, #60	; 0x3c
 8005556:	2100      	movs	r1, #0
 8005558:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	0018      	movs	r0, r3
 800555e:	f000 f839 	bl	80055d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223d      	movs	r2, #61	; 0x3d
 8005566:	2102      	movs	r1, #2
 8005568:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	0019      	movs	r1, r3
 8005574:	0010      	movs	r0, r2
 8005576:	f000 fad3 	bl	8005b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2246      	movs	r2, #70	; 0x46
 800557e:	2101      	movs	r1, #1
 8005580:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	223e      	movs	r2, #62	; 0x3e
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	223f      	movs	r2, #63	; 0x3f
 800558e:	2101      	movs	r1, #1
 8005590:	5499      	strb	r1, [r3, r2]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2241      	movs	r2, #65	; 0x41
 800559e:	2101      	movs	r1, #1
 80055a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2242      	movs	r2, #66	; 0x42
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2243      	movs	r2, #67	; 0x43
 80055ae:	2101      	movs	r1, #1
 80055b0:	5499      	strb	r1, [r3, r2]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2244      	movs	r2, #68	; 0x44
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2245      	movs	r2, #69	; 0x45
 80055be:	2101      	movs	r1, #1
 80055c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	223d      	movs	r2, #61	; 0x3d
 80055c6:	2101      	movs	r1, #1
 80055c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	0018      	movs	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	223d      	movs	r2, #61	; 0x3d
 80055f0:	5c9b      	ldrb	r3, [r3, r2]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e03b      	b.n	8005674 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	223d      	movs	r2, #61	; 0x3d
 8005600:	2102      	movs	r1, #2
 8005602:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2101      	movs	r1, #1
 8005610:	430a      	orrs	r2, r1
 8005612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_TIM_Base_Start_IT+0x98>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00f      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x5a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	05db      	lsls	r3, r3, #23
 8005626:	429a      	cmp	r2, r3
 8005628:	d009      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x5a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a14      	ldr	r2, [pc, #80]	; (8005680 <HAL_TIM_Base_Start_IT+0x9c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x5a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a12      	ldr	r2, [pc, #72]	; (8005684 <HAL_TIM_Base_Start_IT+0xa0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d111      	bne.n	8005662 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2207      	movs	r2, #7
 8005646:	4013      	ands	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b06      	cmp	r3, #6
 800564e:	d010      	beq.n	8005672 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2101      	movs	r1, #1
 800565c:	430a      	orrs	r2, r1
 800565e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005660:	e007      	b.n	8005672 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2101      	movs	r1, #1
 800566e:	430a      	orrs	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b004      	add	sp, #16
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40000400 	.word	0x40000400
 8005684:	40014000 	.word	0x40014000

08005688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e042      	b.n	8005720 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	223d      	movs	r2, #61	; 0x3d
 800569e:	5c9b      	ldrb	r3, [r3, r2]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	223c      	movs	r2, #60	; 0x3c
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fb fef5 	bl	80014a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	223d      	movs	r2, #61	; 0x3d
 80056ba:	2102      	movs	r1, #2
 80056bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3304      	adds	r3, #4
 80056c6:	0019      	movs	r1, r3
 80056c8:	0010      	movs	r0, r2
 80056ca:	f000 fa29 	bl	8005b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2246      	movs	r2, #70	; 0x46
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	223e      	movs	r2, #62	; 0x3e
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	223f      	movs	r2, #63	; 0x3f
 80056e2:	2101      	movs	r1, #1
 80056e4:	5499      	strb	r1, [r3, r2]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2241      	movs	r2, #65	; 0x41
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2242      	movs	r2, #66	; 0x42
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2243      	movs	r2, #67	; 0x43
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2244      	movs	r2, #68	; 0x44
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2245      	movs	r2, #69	; 0x45
 8005712:	2101      	movs	r1, #1
 8005714:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	223d      	movs	r2, #61	; 0x3d
 800571a:	2101      	movs	r1, #1
 800571c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2202      	movs	r2, #2
 8005738:	4013      	ands	r3, r2
 800573a:	2b02      	cmp	r3, #2
 800573c:	d124      	bne.n	8005788 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	2202      	movs	r2, #2
 8005746:	4013      	ands	r3, r2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d11d      	bne.n	8005788 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2203      	movs	r2, #3
 8005752:	4252      	negs	r2, r2
 8005754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2203      	movs	r2, #3
 8005764:	4013      	ands	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	0018      	movs	r0, r3
 800576c:	f000 f9c0 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 8005770:	e007      	b.n	8005782 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f000 f9b3 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	0018      	movs	r0, r3
 800577e:	f000 f9bf 	bl	8005b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2204      	movs	r2, #4
 8005790:	4013      	ands	r3, r2
 8005792:	2b04      	cmp	r3, #4
 8005794:	d125      	bne.n	80057e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2204      	movs	r2, #4
 800579e:	4013      	ands	r3, r2
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d11e      	bne.n	80057e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2205      	movs	r2, #5
 80057aa:	4252      	negs	r2, r2
 80057ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	23c0      	movs	r3, #192	; 0xc0
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f000 f993 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 80057ca:	e007      	b.n	80057dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0018      	movs	r0, r3
 80057d0:	f000 f986 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 f992 	bl	8005b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2208      	movs	r2, #8
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d124      	bne.n	800583a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2208      	movs	r2, #8
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d11d      	bne.n	800583a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2209      	movs	r2, #9
 8005804:	4252      	negs	r2, r2
 8005806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2204      	movs	r2, #4
 800580c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	2203      	movs	r2, #3
 8005816:	4013      	ands	r3, r2
 8005818:	d004      	beq.n	8005824 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	0018      	movs	r0, r3
 800581e:	f000 f967 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 8005822:	e007      	b.n	8005834 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f95a 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f966 	bl	8005b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2210      	movs	r2, #16
 8005842:	4013      	ands	r3, r2
 8005844:	2b10      	cmp	r3, #16
 8005846:	d125      	bne.n	8005894 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2210      	movs	r2, #16
 8005850:	4013      	ands	r3, r2
 8005852:	2b10      	cmp	r3, #16
 8005854:	d11e      	bne.n	8005894 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2211      	movs	r2, #17
 800585c:	4252      	negs	r2, r2
 800585e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2208      	movs	r2, #8
 8005864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	23c0      	movs	r3, #192	; 0xc0
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4013      	ands	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0018      	movs	r0, r3
 8005878:	f000 f93a 	bl	8005af0 <HAL_TIM_IC_CaptureCallback>
 800587c:	e007      	b.n	800588e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0018      	movs	r0, r3
 8005882:	f000 f92d 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0018      	movs	r0, r3
 800588a:	f000 f939 	bl	8005b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2201      	movs	r2, #1
 800589c:	4013      	ands	r3, r2
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d10f      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d108      	bne.n	80058c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2202      	movs	r2, #2
 80058b6:	4252      	negs	r2, r2
 80058b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0018      	movs	r0, r3
 80058be:	f7fb fcff 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d10f      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	4013      	ands	r3, r2
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	d108      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2281      	movs	r2, #129	; 0x81
 80058e4:	4252      	negs	r2, r2
 80058e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 fbfa 	bl	80060e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d10f      	bne.n	800591e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2240      	movs	r2, #64	; 0x40
 8005906:	4013      	ands	r3, r2
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d108      	bne.n	800591e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2241      	movs	r2, #65	; 0x41
 8005912:	4252      	negs	r2, r2
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	0018      	movs	r0, r3
 800591a:	f000 f8f9 	bl	8005b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	2220      	movs	r2, #32
 8005926:	4013      	ands	r3, r2
 8005928:	2b20      	cmp	r3, #32
 800592a:	d10f      	bne.n	800594c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	4013      	ands	r3, r2
 8005936:	2b20      	cmp	r3, #32
 8005938:	d108      	bne.n	800594c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2221      	movs	r2, #33	; 0x21
 8005940:	4252      	negs	r2, r2
 8005942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 fbc4 	bl	80060d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b002      	add	sp, #8
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005960:	2317      	movs	r3, #23
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	223c      	movs	r2, #60	; 0x3c
 800596c:	5c9b      	ldrb	r3, [r3, r2]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005972:	2302      	movs	r3, #2
 8005974:	e0ad      	b.n	8005ad2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	223c      	movs	r2, #60	; 0x3c
 800597a:	2101      	movs	r1, #1
 800597c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b0c      	cmp	r3, #12
 8005982:	d100      	bne.n	8005986 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005984:	e076      	b.n	8005a74 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b0c      	cmp	r3, #12
 800598a:	d900      	bls.n	800598e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800598c:	e095      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x166>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d04e      	beq.n	8005a32 <HAL_TIM_PWM_ConfigChannel+0xde>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b08      	cmp	r3, #8
 8005998:	d900      	bls.n	800599c <HAL_TIM_PWM_ConfigChannel+0x48>
 800599a:	e08e      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x166>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x56>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d021      	beq.n	80059ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80059a8:	e087      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0011      	movs	r1, r2
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 f934 	bl	8005c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2108      	movs	r1, #8
 80059c4:	430a      	orrs	r2, r1
 80059c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2104      	movs	r1, #4
 80059d4:	438a      	bics	r2, r1
 80059d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6999      	ldr	r1, [r3, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	619a      	str	r2, [r3, #24]
      break;
 80059ea:	e06b      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	0011      	movs	r1, r2
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 f99b 	bl	8005d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2180      	movs	r1, #128	; 0x80
 8005a06:	0109      	lsls	r1, r1, #4
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4931      	ldr	r1, [pc, #196]	; (8005adc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6999      	ldr	r1, [r3, #24]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	619a      	str	r2, [r3, #24]
      break;
 8005a30:	e048      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0011      	movs	r1, r2
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f000 f9fc 	bl	8005e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69da      	ldr	r2, [r3, #28]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2108      	movs	r1, #8
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	438a      	bics	r2, r1
 8005a5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69d9      	ldr	r1, [r3, #28]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	61da      	str	r2, [r3, #28]
      break;
 8005a72:	e027      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	0011      	movs	r1, r2
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f000 fa61 	bl	8005f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	0109      	lsls	r1, r1, #4
 8005a90:	430a      	orrs	r2, r1
 8005a92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	490f      	ldr	r1, [pc, #60]	; (8005adc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005aa0:	400a      	ands	r2, r1
 8005aa2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69d9      	ldr	r1, [r3, #28]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	61da      	str	r2, [r3, #28]
      break;
 8005ab8:	e004      	b.n	8005ac4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005aba:	2317      	movs	r3, #23
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
      break;
 8005ac2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	223c      	movs	r2, #60	; 0x3c
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5499      	strb	r1, [r3, r2]

  return status;
 8005acc:	2317      	movs	r3, #23
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	781b      	ldrb	r3, [r3, #0]
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b006      	add	sp, #24
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	fffffbff 	.word	0xfffffbff

08005ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ae8:	46c0      	nop			; (mov r8, r8)
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b002      	add	sp, #8
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005af8:	46c0      	nop			; (mov r8, r8)
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b002      	add	sp, #8
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b002      	add	sp, #8
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a34      	ldr	r2, [pc, #208]	; (8005c04 <TIM_Base_SetConfig+0xe4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d008      	beq.n	8005b4a <TIM_Base_SetConfig+0x2a>
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	05db      	lsls	r3, r3, #23
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d003      	beq.n	8005b4a <TIM_Base_SetConfig+0x2a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <TIM_Base_SetConfig+0xe8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2270      	movs	r2, #112	; 0x70
 8005b4e:	4393      	bics	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a29      	ldr	r2, [pc, #164]	; (8005c04 <TIM_Base_SetConfig+0xe4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <TIM_Base_SetConfig+0x76>
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	05db      	lsls	r3, r3, #23
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d013      	beq.n	8005b96 <TIM_Base_SetConfig+0x76>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <TIM_Base_SetConfig+0xe8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00f      	beq.n	8005b96 <TIM_Base_SetConfig+0x76>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a24      	ldr	r2, [pc, #144]	; (8005c0c <TIM_Base_SetConfig+0xec>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00b      	beq.n	8005b96 <TIM_Base_SetConfig+0x76>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a23      	ldr	r2, [pc, #140]	; (8005c10 <TIM_Base_SetConfig+0xf0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d007      	beq.n	8005b96 <TIM_Base_SetConfig+0x76>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a22      	ldr	r2, [pc, #136]	; (8005c14 <TIM_Base_SetConfig+0xf4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_Base_SetConfig+0x76>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a21      	ldr	r2, [pc, #132]	; (8005c18 <TIM_Base_SetConfig+0xf8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d108      	bne.n	8005ba8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a20      	ldr	r2, [pc, #128]	; (8005c1c <TIM_Base_SetConfig+0xfc>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2280      	movs	r2, #128	; 0x80
 8005bac:	4393      	bics	r3, r2
 8005bae:	001a      	movs	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <TIM_Base_SetConfig+0xe4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0xce>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <TIM_Base_SetConfig+0xf0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0xce>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <TIM_Base_SetConfig+0xf4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0xce>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <TIM_Base_SetConfig+0xf8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d103      	bne.n	8005bf6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	615a      	str	r2, [r3, #20]
}
 8005bfc:	46c0      	nop			; (mov r8, r8)
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b004      	add	sp, #16
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40002000 	.word	0x40002000
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800
 8005c1c:	fffffcff 	.word	0xfffffcff

08005c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4393      	bics	r3, r2
 8005c32:	001a      	movs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2270      	movs	r2, #112	; 0x70
 8005c4e:	4393      	bics	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2203      	movs	r2, #3
 8005c56:	4393      	bics	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2202      	movs	r2, #2
 8005c68:	4393      	bics	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <TIM_OC1_SetConfig+0xf8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <TIM_OC1_SetConfig+0x76>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <TIM_OC1_SetConfig+0xfc>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <TIM_OC1_SetConfig+0x76>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a25      	ldr	r2, [pc, #148]	; (8005d20 <TIM_OC1_SetConfig+0x100>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_OC1_SetConfig+0x76>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <TIM_OC1_SetConfig+0x104>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10c      	bne.n	8005cb0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	4393      	bics	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2204      	movs	r2, #4
 8005cac:	4393      	bics	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <TIM_OC1_SetConfig+0xf8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_OC1_SetConfig+0xb0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <TIM_OC1_SetConfig+0xfc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_OC1_SetConfig+0xb0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <TIM_OC1_SetConfig+0x100>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC1_SetConfig+0xb0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <TIM_OC1_SetConfig+0x104>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d111      	bne.n	8005cf4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <TIM_OC1_SetConfig+0x108>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <TIM_OC1_SetConfig+0x10c>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b006      	add	sp, #24
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800
 8005d28:	fffffeff 	.word	0xfffffeff
 8005d2c:	fffffdff 	.word	0xfffffdff

08005d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	2210      	movs	r2, #16
 8005d40:	4393      	bics	r3, r2
 8005d42:	001a      	movs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a2e      	ldr	r2, [pc, #184]	; (8005e18 <TIM_OC2_SetConfig+0xe8>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a2d      	ldr	r2, [pc, #180]	; (8005e1c <TIM_OC2_SetConfig+0xec>)
 8005d66:	4013      	ands	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a24      	ldr	r2, [pc, #144]	; (8005e20 <TIM_OC2_SetConfig+0xf0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10d      	bne.n	8005dae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	4393      	bics	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2240      	movs	r2, #64	; 0x40
 8005daa:	4393      	bics	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1b      	ldr	r2, [pc, #108]	; (8005e20 <TIM_OC2_SetConfig+0xf0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00b      	beq.n	8005dce <TIM_OC2_SetConfig+0x9e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <TIM_OC2_SetConfig+0xf4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <TIM_OC2_SetConfig+0x9e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <TIM_OC2_SetConfig+0xf8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_OC2_SetConfig+0x9e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <TIM_OC2_SetConfig+0xfc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d113      	bne.n	8005df6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4a17      	ldr	r2, [pc, #92]	; (8005e30 <TIM_OC2_SetConfig+0x100>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4a16      	ldr	r2, [pc, #88]	; (8005e34 <TIM_OC2_SetConfig+0x104>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b006      	add	sp, #24
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	ffff8fff 	.word	0xffff8fff
 8005e1c:	fffffcff 	.word	0xfffffcff
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40014400 	.word	0x40014400
 8005e2c:	40014800 	.word	0x40014800
 8005e30:	fffffbff 	.word	0xfffffbff
 8005e34:	fffff7ff 	.word	0xfffff7ff

08005e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <TIM_OC3_SetConfig+0xe4>)
 8005e48:	401a      	ands	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2270      	movs	r2, #112	; 0x70
 8005e64:	4393      	bics	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	4393      	bics	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <TIM_OC3_SetConfig+0xe8>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a24      	ldr	r2, [pc, #144]	; (8005f24 <TIM_OC3_SetConfig+0xec>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d10d      	bne.n	8005eb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <TIM_OC3_SetConfig+0xf0>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <TIM_OC3_SetConfig+0xf4>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <TIM_OC3_SetConfig+0xec>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00b      	beq.n	8005ed2 <TIM_OC3_SetConfig+0x9a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <TIM_OC3_SetConfig+0xf8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <TIM_OC3_SetConfig+0x9a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <TIM_OC3_SetConfig+0xfc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d003      	beq.n	8005ed2 <TIM_OC3_SetConfig+0x9a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <TIM_OC3_SetConfig+0x100>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d113      	bne.n	8005efa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <TIM_OC3_SetConfig+0x104>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <TIM_OC3_SetConfig+0x108>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b006      	add	sp, #24
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	fffffeff 	.word	0xfffffeff
 8005f20:	fffffdff 	.word	0xfffffdff
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	fffff7ff 	.word	0xfffff7ff
 8005f2c:	fffffbff 	.word	0xfffffbff
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800
 8005f3c:	ffffefff 	.word	0xffffefff
 8005f40:	ffffdfff 	.word	0xffffdfff

08005f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	4a28      	ldr	r2, [pc, #160]	; (8005ff4 <TIM_OC4_SetConfig+0xb0>)
 8005f54:	401a      	ands	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a22      	ldr	r2, [pc, #136]	; (8005ff8 <TIM_OC4_SetConfig+0xb4>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <TIM_OC4_SetConfig+0xb8>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4a1d      	ldr	r2, [pc, #116]	; (8006000 <TIM_OC4_SetConfig+0xbc>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	031b      	lsls	r3, r3, #12
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a19      	ldr	r2, [pc, #100]	; (8006004 <TIM_OC4_SetConfig+0xc0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <TIM_OC4_SetConfig+0x78>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a18      	ldr	r2, [pc, #96]	; (8006008 <TIM_OC4_SetConfig+0xc4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d007      	beq.n	8005fbc <TIM_OC4_SetConfig+0x78>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a17      	ldr	r2, [pc, #92]	; (800600c <TIM_OC4_SetConfig+0xc8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC4_SetConfig+0x78>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a16      	ldr	r2, [pc, #88]	; (8006010 <TIM_OC4_SetConfig+0xcc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d109      	bne.n	8005fd0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <TIM_OC4_SetConfig+0xd0>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	019b      	lsls	r3, r3, #6
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b006      	add	sp, #24
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	ffffefff 	.word	0xffffefff
 8005ff8:	ffff8fff 	.word	0xffff8fff
 8005ffc:	fffffcff 	.word	0xfffffcff
 8006000:	ffffdfff 	.word	0xffffdfff
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40014000 	.word	0x40014000
 800600c:	40014400 	.word	0x40014400
 8006010:	40014800 	.word	0x40014800
 8006014:	ffffbfff 	.word	0xffffbfff

08006018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	223c      	movs	r2, #60	; 0x3c
 8006026:	5c9b      	ldrb	r3, [r3, r2]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800602c:	2302      	movs	r3, #2
 800602e:	e047      	b.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	223c      	movs	r2, #60	; 0x3c
 8006034:	2101      	movs	r1, #1
 8006036:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	223d      	movs	r2, #61	; 0x3d
 800603c:	2102      	movs	r1, #2
 800603e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2270      	movs	r2, #112	; 0x70
 8006054:	4393      	bics	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a16      	ldr	r2, [pc, #88]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00f      	beq.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	05db      	lsls	r3, r3, #23
 800607c:	429a      	cmp	r2, r3
 800607e:	d009      	beq.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a11      	ldr	r2, [pc, #68]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a10      	ldr	r2, [pc, #64]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10c      	bne.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	4393      	bics	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	223d      	movs	r2, #61	; 0x3d
 80060b2:	2101      	movs	r1, #1
 80060b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	223c      	movs	r2, #60	; 0x3c
 80060ba:	2100      	movs	r1, #0
 80060bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b004      	add	sp, #16
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40014000 	.word	0x40014000

080060d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b002      	add	sp, #8
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060ec:	46c0      	nop			; (mov r8, r8)
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b002      	add	sp, #8
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <USB_DisableGlobalInt+0x30>)
 80060fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2240      	movs	r2, #64	; 0x40
 8006104:	5a9b      	ldrh	r3, [r3, r2]
 8006106:	b29b      	uxth	r3, r3
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	b292      	uxth	r2, r2
 800610c:	43d2      	mvns	r2, r2
 800610e:	b292      	uxth	r2, r2
 8006110:	4013      	ands	r3, r2
 8006112:	b299      	uxth	r1, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b004      	add	sp, #16
 8006122:	bd80      	pop	{r7, pc}
 8006124:	0000bf80 	.word	0x0000bf80

08006128 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006128:	b084      	sub	sp, #16
 800612a:	b590      	push	{r4, r7, lr}
 800612c:	46c6      	mov	lr, r8
 800612e:	b500      	push	{lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	2004      	movs	r0, #4
 8006138:	2410      	movs	r4, #16
 800613a:	46a4      	mov	ip, r4
 800613c:	2408      	movs	r4, #8
 800613e:	46a0      	mov	r8, r4
 8006140:	44b8      	add	r8, r7
 8006142:	44c4      	add	ip, r8
 8006144:	4460      	add	r0, ip
 8006146:	6001      	str	r1, [r0, #0]
 8006148:	6042      	str	r2, [r0, #4]
 800614a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2240      	movs	r2, #64	; 0x40
 8006150:	2101      	movs	r1, #1
 8006152:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2240      	movs	r2, #64	; 0x40
 8006158:	2100      	movs	r1, #0
 800615a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2244      	movs	r2, #68	; 0x44
 8006160:	2100      	movs	r1, #0
 8006162:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2250      	movs	r2, #80	; 0x50
 8006168:	2100      	movs	r1, #0
 800616a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b002      	add	sp, #8
 8006174:	bc80      	pop	{r7}
 8006176:	46b8      	mov	r8, r7
 8006178:	bc90      	pop	{r4, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	b004      	add	sp, #16
 800617e:	4718      	bx	r3

08006180 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>:
namespace SolarGators {
namespace DataModules {

class DataModule {
public:
  DataModule(uint32_t id, uint32_t size, bool is_ext_id = false):
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	001a      	movs	r2, r3
 800618e:	1cfb      	adds	r3, r7, #3
 8006190:	701a      	strb	r2, [r3, #0]
    id_(id), size_(size), is_ext_id_(false)
 8006192:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <_ZN11SolarGators11DataModules10DataModuleC1Emmb+0x60>)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	731a      	strb	r2, [r3, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a0d      	ldr	r2, [pc, #52]	; (80061e4 <_ZN11SolarGators11DataModules10DataModuleC1Emmb+0x64>)
 80061ae:	665a      	str	r2, [r3, #100]	; 0x64
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	669a      	str	r2, [r3, #104]	; 0x68
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3314      	adds	r3, #20
 80061ba:	001a      	movs	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	66da      	str	r2, [r3, #108]	; 0x6c
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2250      	movs	r2, #80	; 0x50
 80061c4:	671a      	str	r2, [r3, #112]	; 0x70
  {
    mutex_id_ = osMutexNew(&mutex_attributes_);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3364      	adds	r3, #100	; 0x64
 80061ca:	0018      	movs	r0, r3
 80061cc:	f003 fae6 	bl	800979c <osMutexNew>
 80061d0:	0002      	movs	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	611a      	str	r2, [r3, #16]
  };
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	0018      	movs	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	b004      	add	sp, #16
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	0800dc5c 	.word	0x0800dc5c
 80061e4:	0800da74 	.word	0x0800da74

080061e8 <_ZN11SolarGators11DataModules10DataModuleD1Ev>:
  virtual ~DataModule() {};
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	4a03      	ldr	r2, [pc, #12]	; (8006200 <_ZN11SolarGators11DataModules10DataModuleD1Ev+0x18>)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0018      	movs	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b002      	add	sp, #8
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	0800dc5c 	.word	0x0800dc5c

08006204 <_ZN11SolarGators11DataModules10DataModuleD0Ev>:
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0018      	movs	r0, r3
 8006210:	f7ff ffea 	bl	80061e8 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2174      	movs	r1, #116	; 0x74
 8006218:	0018      	movs	r0, r3
 800621a:	f006 fdbf 	bl	800cd9c <_ZdlPvj>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b002      	add	sp, #8
 8006226:	bd80      	pop	{r7, pc}

08006228 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>:
#include <Mitsuba.hpp>

namespace SolarGators {
namespace DataModules {

MitsubaRequest::MitsubaRequest(uint32_t id):
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
    DataModule(id, Request_Size, true)
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	2301      	movs	r3, #1
 8006238:	2201      	movs	r2, #1
 800623a:	f7ff ffa1 	bl	8006180 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 800623e:	4a04      	ldr	r2, [pc, #16]	; (8006250 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em+0x28>)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
{ }
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b002      	add	sp, #8
 800624c:	bd80      	pop	{r7, pc}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	0800dc44 	.word	0x0800dc44

08006254 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>:

MitsubaRequest::~MitsubaRequest()
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	4a05      	ldr	r2, [pc, #20]	; (8006274 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev+0x20>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	0018      	movs	r0, r3
 8006266:	f7ff ffbf 	bl	80061e8 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	0018      	movs	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	b002      	add	sp, #8
 8006272:	bd80      	pop	{r7, pc}
 8006274:	0800dc44 	.word	0x0800dc44

08006278 <_ZN11SolarGators11DataModules14MitsubaRequestD0Ev>:
MitsubaRequest::~MitsubaRequest()
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
{ }
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	0018      	movs	r0, r3
 8006284:	f7ff ffe6 	bl	8006254 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2178      	movs	r1, #120	; 0x78
 800628c:	0018      	movs	r0, r3
 800628e:	f006 fd85 	bl	800cd9c <_ZdlPvj>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0018      	movs	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	b002      	add	sp, #8
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>:
  requestFrame1 = false;
  requestFrame2 = false;
}

void MitsubaRequest::SetRequestAllFrames()
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  requestFrame0 = true;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2274      	movs	r2, #116	; 0x74
 80062a8:	2101      	movs	r1, #1
 80062aa:	5499      	strb	r1, [r3, r2]
  requestFrame1 = true;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2275      	movs	r2, #117	; 0x75
 80062b0:	2101      	movs	r1, #1
 80062b2:	5499      	strb	r1, [r3, r2]
  requestFrame2 = true;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2276      	movs	r2, #118	; 0x76
 80062b8:	2101      	movs	r1, #1
 80062ba:	5499      	strb	r1, [r3, r2]
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <_ZNK11SolarGators11DataModules14MitsubaRequest11ToByteArrayEPh>:

void MitsubaRequest::ToByteArray(uint8_t* buff) const
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  buff[0] = 0;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame0) << 0;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	2174      	movs	r1, #116	; 0x74
 80062dc:	5c52      	ldrb	r2, [r2, r1]
 80062de:	4313      	orrs	r3, r2
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame1) << 1;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	b25a      	sxtb	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2175      	movs	r1, #117	; 0x75
 80062f0:	5c5b      	ldrb	r3, [r3, r1]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame2) << 2;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b25a      	sxtb	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2176      	movs	r1, #118	; 0x76
 800630a:	5c5b      	ldrb	r3, [r3, r1]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	b25b      	sxtb	r3, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	b25b      	sxtb	r3, r3
 8006314:	b2da      	uxtb	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	701a      	strb	r2, [r3, #0]
}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	46bd      	mov	sp, r7
 800631e:	b002      	add	sp, #8
 8006320:	bd80      	pop	{r7, pc}

08006322 <_ZN11SolarGators11DataModules14MitsubaRequest13FromByteArrayEPh>:
void MitsubaRequest::FromByteArray(uint8_t* buff)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  requestFrame0 = buff[0] & (1 << 0);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	001a      	movs	r2, r3
 8006332:	2301      	movs	r3, #1
 8006334:	4013      	ands	r3, r2
 8006336:	1e5a      	subs	r2, r3, #1
 8006338:	4193      	sbcs	r3, r2
 800633a:	b2d9      	uxtb	r1, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2274      	movs	r2, #116	; 0x74
 8006340:	5499      	strb	r1, [r3, r2]
  requestFrame1 = buff[0] & (1 << 1);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	001a      	movs	r2, r3
 8006348:	2302      	movs	r3, #2
 800634a:	4013      	ands	r3, r2
 800634c:	1e5a      	subs	r2, r3, #1
 800634e:	4193      	sbcs	r3, r2
 8006350:	b2d9      	uxtb	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2275      	movs	r2, #117	; 0x75
 8006356:	5499      	strb	r1, [r3, r2]
  requestFrame2 = buff[0] & (1 << 2);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	001a      	movs	r2, r3
 800635e:	2304      	movs	r3, #4
 8006360:	4013      	ands	r3, r2
 8006362:	1e5a      	subs	r2, r3, #1
 8006364:	4193      	sbcs	r3, r2
 8006366:	b2d9      	uxtb	r1, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2276      	movs	r2, #118	; 0x76
 800636c:	5499      	strb	r1, [r3, r2]
}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	46bd      	mov	sp, r7
 8006372:	b002      	add	sp, #8
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <_ZN11SolarGators11DataModules10MitsubaRx0C1Em>:

MitsubaRx0::MitsubaRx0(uint32_t id):
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
    DataModule(id, Rx0_Size, true), battVoltage(0),battCurrent(0),
    battCurrentDir(false),motorCurrentPkAvg(0),FETtemp(0),
    motorRPM(0),PWMDuty(0),LeadAngle(0)
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	2301      	movs	r3, #1
 8006388:	2208      	movs	r2, #8
 800638a:	f7ff fef9 	bl	8006180 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 800638e:	4a14      	ldr	r2, [pc, #80]	; (80063e0 <_ZN11SolarGators11DataModules10MitsubaRx0C1Em+0x68>)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2274      	movs	r2, #116	; 0x74
 8006398:	2100      	movs	r1, #0
 800639a:	5299      	strh	r1, [r3, r2]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2276      	movs	r2, #118	; 0x76
 80063a0:	2100      	movs	r1, #0
 80063a2:	5299      	strh	r1, [r3, r2]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2278      	movs	r2, #120	; 0x78
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	227a      	movs	r2, #122	; 0x7a
 80063b0:	2100      	movs	r1, #0
 80063b2:	5299      	strh	r1, [r3, r2]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	227c      	movs	r2, #124	; 0x7c
 80063b8:	2100      	movs	r1, #0
 80063ba:	5499      	strb	r1, [r3, r2]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	227e      	movs	r2, #126	; 0x7e
 80063c0:	2100      	movs	r1, #0
 80063c2:	5299      	strh	r1, [r3, r2]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	2100      	movs	r1, #0
 80063ca:	5299      	strh	r1, [r3, r2]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2282      	movs	r2, #130	; 0x82
 80063d0:	2100      	movs	r1, #0
 80063d2:	5499      	strb	r1, [r3, r2]
{ }
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	0018      	movs	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	b002      	add	sp, #8
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	0800dc2c 	.word	0x0800dc2c

080063e4 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>:

MitsubaRx0::~MitsubaRx0()
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	4a05      	ldr	r2, [pc, #20]	; (8006404 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev+0x20>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7ff fef7 	bl	80061e8 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0018      	movs	r0, r3
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}
 8006404:	0800dc2c 	.word	0x0800dc2c

08006408 <_ZN11SolarGators11DataModules10MitsubaRx0D0Ev>:
MitsubaRx0::~MitsubaRx0()
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
{ }
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	0018      	movs	r0, r3
 8006414:	f7ff ffe6 	bl	80063e4 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2184      	movs	r1, #132	; 0x84
 800641c:	0018      	movs	r0, r3
 800641e:	f006 fcbd 	bl	800cd9c <_ZdlPvj>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	0018      	movs	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	b002      	add	sp, #8
 800642a:	bd80      	pop	{r7, pc}

0800642c <_ZNK11SolarGators11DataModules10MitsubaRx017GetBatteryCurrentEv>:
uint16_t MitsubaRx0::GetBatteryVoltage() const
{
  return battVoltage;
}
uint16_t MitsubaRx0::GetBatteryCurrent() const
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  return battCurrent;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2276      	movs	r2, #118	; 0x76
 8006438:	5a9b      	ldrh	r3, [r3, r2]
}
 800643a:	0018      	movs	r0, r3
 800643c:	46bd      	mov	sp, r7
 800643e:	b002      	add	sp, #8
 8006440:	bd80      	pop	{r7, pc}

08006442 <_ZNK11SolarGators11DataModules10MitsubaRx011GetMotorRPMEv>:
uint8_t MitsubaRx0::GetFetTemp() const
{
  return FETtemp;
}
uint16_t MitsubaRx0::GetMotorRPM() const
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  return motorRPM;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	227e      	movs	r2, #126	; 0x7e
 800644e:	5a9b      	ldrh	r3, [r3, r2]
}
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	b002      	add	sp, #8
 8006456:	bd80      	pop	{r7, pc}

08006458 <_ZNK11SolarGators11DataModules10MitsubaRx011ToByteArrayEPh>:
{
  return LeadAngle;
}
// Converter Functions
void MitsubaRx0::ToByteArray(uint8_t* buff) const
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]

  buff[0] = 0;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battVoltage);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2174      	movs	r1, #116	; 0x74
 8006470:	5a5b      	ldrh	r3, [r3, r1]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	4313      	orrs	r3, r2
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	701a      	strb	r2, [r3, #0]

  buff[1] = 0;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	3301      	adds	r3, #1
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(battVoltage >> 8);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	3301      	adds	r3, #1
 8006488:	7819      	ldrb	r1, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2274      	movs	r2, #116	; 0x74
 800648e:	5a9b      	ldrh	r3, [r3, r2]
 8006490:	121b      	asrs	r3, r3, #8
 8006492:	b2da      	uxtb	r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	430a      	orrs	r2, r1
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrent) << 2);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	7819      	ldrb	r1, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2276      	movs	r2, #118	; 0x76
 80064a8:	5a9b      	ldrh	r3, [r3, r2]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	430a      	orrs	r2, r1
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]

  buff[2] = 0;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	3302      	adds	r3, #2
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(battCurrent >> 6);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	3302      	adds	r3, #2
 80064c6:	7819      	ldrb	r1, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2276      	movs	r2, #118	; 0x76
 80064cc:	5a9b      	ldrh	r3, [r3, r2]
 80064ce:	119b      	asrs	r3, r3, #6
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	3302      	adds	r3, #2
 80064d6:	430a      	orrs	r2, r1
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrentDir) << 3);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3302      	adds	r3, #2
 80064e0:	7819      	ldrb	r1, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2278      	movs	r2, #120	; 0x78
 80064e6:	5c9b      	ldrb	r3, [r3, r2]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	3302      	adds	r3, #2
 80064f0:	430a      	orrs	r2, r1
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(motorCurrentPkAvg << 4);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	3302      	adds	r3, #2
 80064fa:	7819      	ldrb	r1, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	227a      	movs	r2, #122	; 0x7a
 8006500:	5a9b      	ldrh	r3, [r3, r2]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	b2da      	uxtb	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	3302      	adds	r3, #2
 800650c:	430a      	orrs	r2, r1
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

  buff[3] = 0;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	3303      	adds	r3, #3
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(motorCurrentPkAvg >> 4);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	3303      	adds	r3, #3
 800651e:	7819      	ldrb	r1, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	227a      	movs	r2, #122	; 0x7a
 8006524:	5a9b      	ldrh	r3, [r3, r2]
 8006526:	111b      	asrs	r3, r3, #4
 8006528:	b2da      	uxtb	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	3303      	adds	r3, #3
 800652e:	430a      	orrs	r2, r1
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(static_cast<uint32_t>(FETtemp) << 6);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	3303      	adds	r3, #3
 8006538:	7819      	ldrb	r1, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	227c      	movs	r2, #124	; 0x7c
 800653e:	5c9b      	ldrb	r3, [r3, r2]
 8006540:	019b      	lsls	r3, r3, #6
 8006542:	b2da      	uxtb	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	3303      	adds	r3, #3
 8006548:	430a      	orrs	r2, r1
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]


  uint32_t convMotorRPM = motorRPM * 1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	227e      	movs	r2, #126	; 0x7e
 8006552:	5a9b      	ldrh	r3, [r3, r2]
 8006554:	60fb      	str	r3, [r7, #12]
  buff[4] = 0;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	3304      	adds	r3, #4
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
  buff[4] |= static_cast<uint8_t>(FETtemp >> 2);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	3304      	adds	r3, #4
 8006562:	7819      	ldrb	r1, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	227c      	movs	r2, #124	; 0x7c
 8006568:	5c9b      	ldrb	r3, [r3, r2]
 800656a:	109b      	asrs	r3, r3, #2
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	3304      	adds	r3, #4
 8006572:	430a      	orrs	r2, r1
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
  buff[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	3304      	adds	r3, #4
 800657c:	7819      	ldrb	r1, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	b2da      	uxtb	r2, r3
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	3304      	adds	r3, #4
 800658a:	430a      	orrs	r2, r1
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]

  buff[5] = 0;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	3305      	adds	r3, #5
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	3305      	adds	r3, #5
 800659c:	7819      	ldrb	r1, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	227f      	movs	r2, #127	; 0x7f
 80065a6:	4013      	ands	r3, r2
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	3305      	adds	r3, #5
 80065ae:	430a      	orrs	r2, r1
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint8_t>(PWMDuty << 7));
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	3305      	adds	r3, #5
 80065b8:	7819      	ldrb	r1, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2280      	movs	r2, #128	; 0x80
 80065be:	5a9b      	ldrh	r3, [r3, r2]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	01db      	lsls	r3, r3, #7
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	3305      	adds	r3, #5
 80065ca:	430a      	orrs	r2, r1
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]

  buff[6] = 0;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	3306      	adds	r3, #6
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
  buff[6] |= static_cast<uint8_t>(PWMDuty >> 1);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	3306      	adds	r3, #6
 80065dc:	7819      	ldrb	r1, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2280      	movs	r2, #128	; 0x80
 80065e2:	5a9b      	ldrh	r3, [r3, r2]
 80065e4:	105b      	asrs	r3, r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	3306      	adds	r3, #6
 80065ec:	430a      	orrs	r2, r1
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

  buff[7] = 0;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	3307      	adds	r3, #7
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(PWMDuty >> 9);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	3307      	adds	r3, #7
 80065fe:	7819      	ldrb	r1, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2280      	movs	r2, #128	; 0x80
 8006604:	5a9b      	ldrh	r3, [r3, r2]
 8006606:	125b      	asrs	r3, r3, #9
 8006608:	b2da      	uxtb	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	3307      	adds	r3, #7
 800660e:	430a      	orrs	r2, r1
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(static_cast<uint32_t>(LeadAngle) << 1);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	3307      	adds	r3, #7
 8006618:	7819      	ldrb	r1, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2282      	movs	r2, #130	; 0x82
 800661e:	5c9b      	ldrb	r3, [r3, r2]
 8006620:	18db      	adds	r3, r3, r3
 8006622:	b2da      	uxtb	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	3307      	adds	r3, #7
 8006628:	430a      	orrs	r2, r1
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b004      	add	sp, #16
 8006634:	bd80      	pop	{r7, pc}

08006636 <_ZN11SolarGators11DataModules10MitsubaRx013FromByteArrayEPh>:

void MitsubaRx0::FromByteArray(uint8_t* buff)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b088      	sub	sp, #32
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
  uint32_t preBattVoltage = (static_cast<uint32_t>(buff[1] & 3) << 8) | (buff[0]);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	23c0      	movs	r3, #192	; 0xc0
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4013      	ands	r3, r2
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	4313      	orrs	r3, r2
 8006654:	61fb      	str	r3, [r7, #28]
  battVoltage = static_cast<uint16_t>(preBattVoltage);
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	b299      	uxth	r1, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2274      	movs	r2, #116	; 0x74
 800665e:	5299      	strh	r1, [r3, r2]

  uint32_t preBattCurrent = (static_cast<uint32_t>(buff[2] & 7) << 6) | (buff[1] >> 2);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	3302      	adds	r3, #2
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	019a      	lsls	r2, r3, #6
 8006668:	23e0      	movs	r3, #224	; 0xe0
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4013      	ands	r3, r2
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	3201      	adds	r2, #1
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	1092      	asrs	r2, r2, #2
 8006676:	4313      	orrs	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
  battCurrent = static_cast<uint16_t>(preBattCurrent);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	b299      	uxth	r1, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2276      	movs	r2, #118	; 0x76
 8006682:	5299      	strh	r1, [r3, r2]

  battCurrentDir = static_cast<bool>(buff[2] & 8);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	3302      	adds	r3, #2
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	001a      	movs	r2, r3
 800668c:	2308      	movs	r3, #8
 800668e:	4013      	ands	r3, r2
 8006690:	1e5a      	subs	r2, r3, #1
 8006692:	4193      	sbcs	r3, r2
 8006694:	b2d9      	uxtb	r1, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2278      	movs	r2, #120	; 0x78
 800669a:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorCurrent = static_cast<uint32_t>((buff[3] & 0x3F) << 4) | (buff[2] >> 4);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	3303      	adds	r3, #3
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	001a      	movs	r2, r3
 80066a6:	23fc      	movs	r3, #252	; 0xfc
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4013      	ands	r3, r2
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	3202      	adds	r2, #2
 80066b0:	7812      	ldrb	r2, [r2, #0]
 80066b2:	1112      	asrs	r2, r2, #4
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	b299      	uxth	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	227a      	movs	r2, #122	; 0x7a
 80066c0:	5299      	strh	r1, [r3, r2]

  uint32_t preFETtemp = static_cast<uint32_t>((buff[4] & 7) << 2) | (buff[3] >> 6);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	3304      	adds	r3, #4
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	001a      	movs	r2, r3
 80066cc:	231c      	movs	r3, #28
 80066ce:	4013      	ands	r3, r2
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	3203      	adds	r2, #3
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	1192      	asrs	r2, r2, #6
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
  FETtemp = static_cast<uint8_t>(preFETtemp);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	b2d9      	uxtb	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	227c      	movs	r2, #124	; 0x7c
 80066e4:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorRPM = (static_cast<uint32_t>(buff[5] & 0x7F) << 5) | (buff[4] >> 3);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	3305      	adds	r3, #5
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	23fe      	movs	r3, #254	; 0xfe
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	4013      	ands	r3, r2
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	3204      	adds	r2, #4
 80066f8:	7812      	ldrb	r2, [r2, #0]
 80066fa:	10d2      	asrs	r2, r2, #3
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]
  motorRPM = static_cast<uint16_t>(preMotorRPM);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	b299      	uxth	r1, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	227e      	movs	r2, #126	; 0x7e
 8006708:	5299      	strh	r1, [r3, r2]

  uint32_t preDuty = (static_cast<uint32_t>(buff[7] & 1) << 9) | (buff[6] << 1) | (buff[5] >> 7);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	3307      	adds	r3, #7
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	025a      	lsls	r2, r3, #9
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4013      	ands	r3, r2
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	3206      	adds	r2, #6
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	0052      	lsls	r2, r2, #1
 8006720:	4313      	orrs	r3, r2
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	3205      	adds	r2, #5
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	11d2      	asrs	r2, r2, #7
 800672a:	4313      	orrs	r3, r2
 800672c:	60bb      	str	r3, [r7, #8]
  PWMDuty = static_cast<uint16_t>(preDuty);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	b299      	uxth	r1, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2280      	movs	r2, #128	; 0x80
 8006736:	5299      	strh	r1, [r3, r2]

  LeadAngle = static_cast<uint8_t>((buff[7] >> 1));
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	3307      	adds	r3, #7
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	105b      	asrs	r3, r3, #1
 8006740:	b2d9      	uxtb	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2282      	movs	r2, #130	; 0x82
 8006746:	5499      	strb	r1, [r3, r2]
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b008      	add	sp, #32
 800674e:	bd80      	pop	{r7, pc}

08006750 <_ZN11SolarGators11DataModules8OrionBMSC1Em>:

#include "OrionBMS.hpp"

namespace SolarGators::DataModules
{
  OrionBMS::OrionBMS(uint32_t id):
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
      DataModule(id, Size)
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	2300      	movs	r3, #0
 8006760:	2208      	movs	r2, #8
 8006762:	f7ff fd0d 	bl	8006180 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 8006766:	4a04      	ldr	r2, [pc, #16]	; (8006778 <_ZN11SolarGators11DataModules8OrionBMSC1Em+0x28>)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
  { }
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	0018      	movs	r0, r3
 8006770:	46bd      	mov	sp, r7
 8006772:	b002      	add	sp, #8
 8006774:	bd80      	pop	{r7, pc}
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	0800dc74 	.word	0x0800dc74

0800677c <_ZN11SolarGators11DataModules8OrionBMSD1Ev>:

  OrionBMS::~OrionBMS()
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	4a05      	ldr	r2, [pc, #20]	; (800679c <_ZN11SolarGators11DataModules8OrionBMSD1Ev+0x20>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f7ff fd2b 	bl	80061e8 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  { }
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	b002      	add	sp, #8
 800679a:	bd80      	pop	{r7, pc}
 800679c:	0800dc74 	.word	0x0800dc74

080067a0 <_ZN11SolarGators11DataModules8OrionBMSD0Ev>:
  OrionBMS::~OrionBMS()
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  { }
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f7ff ffe6 	bl	800677c <_ZN11SolarGators11DataModules8OrionBMSD1Ev>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2184      	movs	r1, #132	; 0x84
 80067b4:	0018      	movs	r0, r3
 80067b6:	f006 faf1 	bl	800cd9c <_ZdlPvj>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	0018      	movs	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	b002      	add	sp, #8
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <_ZN11SolarGators11DataModules8OrionBMS14GetPackVoltageEv>:
  float OrionBMS::GetAvgCellVoltage()
  {
    return avgCellVoltage;
  }
  float OrionBMS::GetPackVoltage()
  {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    return packSummedVoltage;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2280      	movs	r2, #128	; 0x80
 80067d0:	589b      	ldr	r3, [r3, r2]
  }
 80067d2:	1c18      	adds	r0, r3, #0
 80067d4:	46bd      	mov	sp, r7
 80067d6:	b002      	add	sp, #8
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh>:
  {
    // TODO: Add this to BMS packet
    return 0;
  }
  void OrionBMS::ToByteArray(uint8_t* buff) const
  {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
    float convLowCellVoltage = lowCellVoltage * 10000;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ea:	4933      	ldr	r1, [pc, #204]	; (80068b8 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 80067ec:	1c18      	adds	r0, r3, #0
 80067ee:	f7f9 fe45 	bl	800047c <__aeabi_fmul>
 80067f2:	1c03      	adds	r3, r0, #0
 80067f4:	617b      	str	r3, [r7, #20]
    float convHighCellVoltage = highCellVoltage * 10000;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067fa:	492f      	ldr	r1, [pc, #188]	; (80068b8 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 80067fc:	1c18      	adds	r0, r3, #0
 80067fe:	f7f9 fe3d 	bl	800047c <__aeabi_fmul>
 8006802:	1c03      	adds	r3, r0, #0
 8006804:	613b      	str	r3, [r7, #16]
    float convAvgCellVoltage = avgCellVoltage * 10000;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800680a:	492b      	ldr	r1, [pc, #172]	; (80068b8 <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xdc>)
 800680c:	1c18      	adds	r0, r3, #0
 800680e:	f7f9 fe35 	bl	800047c <__aeabi_fmul>
 8006812:	1c03      	adds	r3, r0, #0
 8006814:	60fb      	str	r3, [r7, #12]
    float convPackSummedVoltage = packSummedVoltage * 1000;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2280      	movs	r2, #128	; 0x80
 800681a:	589b      	ldr	r3, [r3, r2]
 800681c:	4927      	ldr	r1, [pc, #156]	; (80068bc <_ZNK11SolarGators11DataModules8OrionBMS11ToByteArrayEPh+0xe0>)
 800681e:	1c18      	adds	r0, r3, #0
 8006820:	f7f9 fe2c 	bl	800047c <__aeabi_fmul>
 8006824:	1c03      	adds	r3, r0, #0
 8006826:	60bb      	str	r3, [r7, #8]

    buff[0] = static_cast<uint32_t>(convLowCellVoltage) & 0xFF;
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f7f9 fd03 	bl	8000234 <__aeabi_f2uiz>
 800682e:	0003      	movs	r3, r0
 8006830:	b2da      	uxtb	r2, r3
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	701a      	strb	r2, [r3, #0]
    buff[1] = (static_cast<uint32_t>(convLowCellVoltage) >> 8) & 0xFF;
 8006836:	6978      	ldr	r0, [r7, #20]
 8006838:	f7f9 fcfc 	bl	8000234 <__aeabi_f2uiz>
 800683c:	0003      	movs	r3, r0
 800683e:	0a1a      	lsrs	r2, r3, #8
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	3301      	adds	r3, #1
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
    buff[2] = static_cast<uint32_t>(convHighCellVoltage) & 0xFF;
 8006848:	6938      	ldr	r0, [r7, #16]
 800684a:	f7f9 fcf3 	bl	8000234 <__aeabi_f2uiz>
 800684e:	0002      	movs	r2, r0
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	3302      	adds	r3, #2
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
    buff[3] = (static_cast<uint32_t>(convHighCellVoltage) >> 8) & 0xFF;
 8006858:	6938      	ldr	r0, [r7, #16]
 800685a:	f7f9 fceb 	bl	8000234 <__aeabi_f2uiz>
 800685e:	0003      	movs	r3, r0
 8006860:	0a1a      	lsrs	r2, r3, #8
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	3303      	adds	r3, #3
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
    buff[4] = static_cast<uint32_t>(convAvgCellVoltage) & 0xFF;
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7f9 fce2 	bl	8000234 <__aeabi_f2uiz>
 8006870:	0002      	movs	r2, r0
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	3304      	adds	r3, #4
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
    buff[5] = (static_cast<uint32_t>(convAvgCellVoltage) >> 8) & 0xFF;
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7f9 fcda 	bl	8000234 <__aeabi_f2uiz>
 8006880:	0003      	movs	r3, r0
 8006882:	0a1a      	lsrs	r2, r3, #8
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	3305      	adds	r3, #5
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
    buff[6] = static_cast<uint32_t>(convPackSummedVoltage) & 0xFF;
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f7f9 fcd1 	bl	8000234 <__aeabi_f2uiz>
 8006892:	0002      	movs	r2, r0
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	3306      	adds	r3, #6
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
    buff[7] = (static_cast<uint32_t>(convPackSummedVoltage) >> 8) & 0xFF;
 800689c:	68b8      	ldr	r0, [r7, #8]
 800689e:	f7f9 fcc9 	bl	8000234 <__aeabi_f2uiz>
 80068a2:	0003      	movs	r3, r0
 80068a4:	0a1a      	lsrs	r2, r3, #8
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	3307      	adds	r3, #7
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
  }
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b006      	add	sp, #24
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	461c4000 	.word	0x461c4000
 80068bc:	447a0000 	.word	0x447a0000

080068c0 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh>:

  void OrionBMS::FromByteArray(uint8_t* buff)
  {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
    uint32_t preLCV = (static_cast<uint32_t>(buff[1]) << 8) | buff[0];
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	7812      	ldrb	r2, [r2, #0]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    uint32_t preHCV = (static_cast<uint32_t>(buff[3]) << 8) | buff[2];
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	3303      	adds	r3, #3
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	3202      	adds	r2, #2
 80068e6:	7812      	ldrb	r2, [r2, #0]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
    uint32_t preACV = (static_cast<uint32_t>(buff[5]) << 8) | buff[4];
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	3305      	adds	r3, #5
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	3204      	adds	r2, #4
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
    uint32_t prePCV = (static_cast<uint32_t>(buff[7]) << 8) | buff[6];
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	3307      	adds	r3, #7
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	3206      	adds	r2, #6
 800690a:	7812      	ldrb	r2, [r2, #0]
 800690c:	4313      	orrs	r3, r2
 800690e:	60bb      	str	r3, [r7, #8]
    lowCellVoltage = static_cast<float>(preLCV)/10000;
 8006910:	6978      	ldr	r0, [r7, #20]
 8006912:	f7fa f8b5 	bl	8000a80 <__aeabi_ui2f>
 8006916:	1c03      	adds	r3, r0, #0
 8006918:	4918      	ldr	r1, [pc, #96]	; (800697c <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 800691a:	1c18      	adds	r0, r3, #0
 800691c:	f7f9 fca2 	bl	8000264 <__aeabi_fdiv>
 8006920:	1c03      	adds	r3, r0, #0
 8006922:	1c1a      	adds	r2, r3, #0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	675a      	str	r2, [r3, #116]	; 0x74
    highCellVoltage = static_cast<float>(preHCV)/10000;
 8006928:	6938      	ldr	r0, [r7, #16]
 800692a:	f7fa f8a9 	bl	8000a80 <__aeabi_ui2f>
 800692e:	1c03      	adds	r3, r0, #0
 8006930:	4912      	ldr	r1, [pc, #72]	; (800697c <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 8006932:	1c18      	adds	r0, r3, #0
 8006934:	f7f9 fc96 	bl	8000264 <__aeabi_fdiv>
 8006938:	1c03      	adds	r3, r0, #0
 800693a:	1c1a      	adds	r2, r3, #0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	679a      	str	r2, [r3, #120]	; 0x78
    avgCellVoltage = static_cast<float>(preACV)/10000;
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f7fa f89d 	bl	8000a80 <__aeabi_ui2f>
 8006946:	1c03      	adds	r3, r0, #0
 8006948:	490c      	ldr	r1, [pc, #48]	; (800697c <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xbc>)
 800694a:	1c18      	adds	r0, r3, #0
 800694c:	f7f9 fc8a 	bl	8000264 <__aeabi_fdiv>
 8006950:	1c03      	adds	r3, r0, #0
 8006952:	1c1a      	adds	r2, r3, #0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	67da      	str	r2, [r3, #124]	; 0x7c
    //TODO: figure out whether this should be 1000 or 100
    packSummedVoltage = static_cast<float>(prePCV)/1000;
 8006958:	68b8      	ldr	r0, [r7, #8]
 800695a:	f7fa f891 	bl	8000a80 <__aeabi_ui2f>
 800695e:	1c03      	adds	r3, r0, #0
 8006960:	4907      	ldr	r1, [pc, #28]	; (8006980 <_ZN11SolarGators11DataModules8OrionBMS13FromByteArrayEPh+0xc0>)
 8006962:	1c18      	adds	r0, r3, #0
 8006964:	f7f9 fc7e 	bl	8000264 <__aeabi_fdiv>
 8006968:	1c03      	adds	r3, r0, #0
 800696a:	1c19      	adds	r1, r3, #0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2280      	movs	r2, #128	; 0x80
 8006970:	5099      	str	r1, [r3, r2]
  }
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	46bd      	mov	sp, r7
 8006976:	b006      	add	sp, #24
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	461c4000 	.word	0x461c4000
 8006980:	447a0000 	.word	0x447a0000

08006984 <_ZN11SolarGators11DataModules8SteeringC1Ev>:
  static constexpr uint32_t ID = 0x1234;
  static constexpr uint32_t SIZE = 0x2;
}
namespace SolarGators::DataModules
{
  Steering::Steering():
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
    cruise_enable_(false),
    eco_enable_(true),
    headlights_(false),
    horn_(false),
    reverse_(false),
    cruise_speed_(Min_Cruise_Speed_)
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	491a      	ldr	r1, [pc, #104]	; (80069f8 <_ZN11SolarGators11DataModules8SteeringC1Ev+0x74>)
 8006990:	2300      	movs	r3, #0
 8006992:	2202      	movs	r2, #2
 8006994:	f7ff fbf4 	bl	8006180 <_ZN11SolarGators11DataModules10DataModuleC1Emmb>
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <_ZN11SolarGators11DataModules8SteeringC1Ev+0x78>)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2274      	movs	r2, #116	; 0x74
 80069a2:	2100      	movs	r1, #0
 80069a4:	5499      	strb	r1, [r3, r2]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2275      	movs	r2, #117	; 0x75
 80069aa:	2100      	movs	r1, #0
 80069ac:	5499      	strb	r1, [r3, r2]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2276      	movs	r2, #118	; 0x76
 80069b2:	2100      	movs	r1, #0
 80069b4:	5499      	strb	r1, [r3, r2]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2277      	movs	r2, #119	; 0x77
 80069ba:	2100      	movs	r1, #0
 80069bc:	5499      	strb	r1, [r3, r2]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2278      	movs	r2, #120	; 0x78
 80069c2:	2100      	movs	r1, #0
 80069c4:	5499      	strb	r1, [r3, r2]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2279      	movs	r2, #121	; 0x79
 80069ca:	2101      	movs	r1, #1
 80069cc:	5499      	strb	r1, [r3, r2]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	227a      	movs	r2, #122	; 0x7a
 80069d2:	2100      	movs	r1, #0
 80069d4:	5499      	strb	r1, [r3, r2]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	227b      	movs	r2, #123	; 0x7b
 80069da:	2100      	movs	r1, #0
 80069dc:	5499      	strb	r1, [r3, r2]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	227c      	movs	r2, #124	; 0x7c
 80069e2:	2100      	movs	r1, #0
 80069e4:	5499      	strb	r1, [r3, r2]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	227d      	movs	r2, #125	; 0x7d
 80069ea:	2100      	movs	r1, #0
 80069ec:	5499      	strb	r1, [r3, r2]
  {}
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	0018      	movs	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b002      	add	sp, #8
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	00001234 	.word	0x00001234
 80069fc:	0800dc8c 	.word	0x0800dc8c

08006a00 <_ZN11SolarGators11DataModules8SteeringD1Ev>:
  Steering::~Steering()
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	4a05      	ldr	r2, [pc, #20]	; (8006a20 <_ZN11SolarGators11DataModules8SteeringD1Ev+0x20>)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7ff fbe9 	bl	80061e8 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  {}
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	b002      	add	sp, #8
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	0800dc8c 	.word	0x0800dc8c

08006a24 <_ZN11SolarGators11DataModules8SteeringD0Ev>:
  Steering::~Steering()
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  {}
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	0018      	movs	r0, r3
 8006a30:	f7ff ffe6 	bl	8006a00 <_ZN11SolarGators11DataModules8SteeringD1Ev>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2180      	movs	r1, #128	; 0x80
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f006 f9af 	bl	800cd9c <_ZdlPvj>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b002      	add	sp, #8
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>:
  bool Steering::GetLeftTurnStatus() const
  {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
    return left_turn_;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2274      	movs	r2, #116	; 0x74
 8006a54:	5c9b      	ldrb	r3, [r3, r2]
  }
 8006a56:	0018      	movs	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b002      	add	sp, #8
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>:
  bool Steering::GetRightTurnStatus() const
  {
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
    return right_turn_;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2275      	movs	r2, #117	; 0x75
 8006a6a:	5c9b      	ldrb	r3, [r3, r2]
  }
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b002      	add	sp, #8
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>:
  bool Steering::GetHazardsStatus() const
  {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
    return hazards_;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2276      	movs	r2, #118	; 0x76
 8006a80:	5c9b      	ldrb	r3, [r3, r2]
  }
 8006a82:	0018      	movs	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	b002      	add	sp, #8
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <_ZNK11SolarGators11DataModules8Steering11ToByteArrayEPh>:
  uint8_t Steering::GetCruiseSpeed() const
  {
    return cruise_speed_;
  }
  void Steering::ToByteArray(uint8_t* buff) const
  {
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
    buff[0] = (static_cast<uint8_t>(left_turn_)     << 0);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2274      	movs	r2, #116	; 0x74
 8006a98:	5c9b      	ldrb	r3, [r3, r2]
 8006a9a:	001a      	movs	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(right_turn_)    << 1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2275      	movs	r2, #117	; 0x75
 8006aa4:	5c9b      	ldrb	r3, [r3, r2]
 8006aa6:	18db      	adds	r3, r3, r3
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(hazards_)       << 2);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2276      	movs	r2, #118	; 0x76
 8006ab2:	5c9b      	ldrb	r3, [r3, r2]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(bps_fault_)     << 3);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2277      	movs	r2, #119	; 0x77
 8006ac0:	5c9b      	ldrb	r3, [r3, r2]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(cruise_enable_) << 4);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2278      	movs	r2, #120	; 0x78
 8006ace:	5c9b      	ldrb	r3, [r3, r2]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(eco_enable_)    << 5);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2279      	movs	r2, #121	; 0x79
 8006adc:	5c9b      	ldrb	r3, [r3, r2]
 8006ade:	015b      	lsls	r3, r3, #5
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(headlights_)    << 6);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	227a      	movs	r2, #122	; 0x7a
 8006aea:	5c9b      	ldrb	r3, [r3, r2]
 8006aec:	019b      	lsls	r3, r3, #6
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	701a      	strb	r2, [r3, #0]
    buff[0] = (static_cast<uint8_t>(horn_)          << 7);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	227b      	movs	r2, #123	; 0x7b
 8006af8:	5c9b      	ldrb	r3, [r3, r2]
 8006afa:	01db      	lsls	r3, r3, #7
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	701a      	strb	r2, [r3, #0]
    buff[1] = (static_cast<uint8_t>(reverse_)       << 0);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	227c      	movs	r2, #124	; 0x7c
 8006b06:	5c9a      	ldrb	r2, [r3, r2]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
    buff[2] = cruise_speed_;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	3302      	adds	r3, #2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	217d      	movs	r1, #125	; 0x7d
 8006b16:	5c52      	ldrb	r2, [r2, r1]
 8006b18:	701a      	strb	r2, [r3, #0]
  }
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b002      	add	sp, #8
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <_ZN11SolarGators11DataModules8Steering13FromByteArrayEPh>:
  void Steering::FromByteArray(uint8_t* buff)
  {
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
    left_turn_      = buff[0] & (1 << 0);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	001a      	movs	r2, r3
 8006b32:	2301      	movs	r3, #1
 8006b34:	4013      	ands	r3, r2
 8006b36:	1e5a      	subs	r2, r3, #1
 8006b38:	4193      	sbcs	r3, r2
 8006b3a:	b2d9      	uxtb	r1, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2274      	movs	r2, #116	; 0x74
 8006b40:	5499      	strb	r1, [r3, r2]
    right_turn_     = buff[0] & (1 << 1);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	001a      	movs	r2, r3
 8006b48:	2302      	movs	r3, #2
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	4193      	sbcs	r3, r2
 8006b50:	b2d9      	uxtb	r1, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2275      	movs	r2, #117	; 0x75
 8006b56:	5499      	strb	r1, [r3, r2]
    hazards_        = buff[0] & (1 << 2);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	001a      	movs	r2, r3
 8006b5e:	2304      	movs	r3, #4
 8006b60:	4013      	ands	r3, r2
 8006b62:	1e5a      	subs	r2, r3, #1
 8006b64:	4193      	sbcs	r3, r2
 8006b66:	b2d9      	uxtb	r1, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2276      	movs	r2, #118	; 0x76
 8006b6c:	5499      	strb	r1, [r3, r2]
    bps_fault_      = buff[0] & (1 << 3);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	001a      	movs	r2, r3
 8006b74:	2308      	movs	r3, #8
 8006b76:	4013      	ands	r3, r2
 8006b78:	1e5a      	subs	r2, r3, #1
 8006b7a:	4193      	sbcs	r3, r2
 8006b7c:	b2d9      	uxtb	r1, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2277      	movs	r2, #119	; 0x77
 8006b82:	5499      	strb	r1, [r3, r2]
    cruise_enable_  = buff[0] & (1 << 4);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	001a      	movs	r2, r3
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	4193      	sbcs	r3, r2
 8006b92:	b2d9      	uxtb	r1, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2278      	movs	r2, #120	; 0x78
 8006b98:	5499      	strb	r1, [r3, r2]
    eco_enable_     = buff[0] & (1 << 5);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	001a      	movs	r2, r3
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	1e5a      	subs	r2, r3, #1
 8006ba6:	4193      	sbcs	r3, r2
 8006ba8:	b2d9      	uxtb	r1, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2279      	movs	r2, #121	; 0x79
 8006bae:	5499      	strb	r1, [r3, r2]
    headlights_     = buff[0] & (1 << 6);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	2340      	movs	r3, #64	; 0x40
 8006bb8:	4013      	ands	r3, r2
 8006bba:	1e5a      	subs	r2, r3, #1
 8006bbc:	4193      	sbcs	r3, r2
 8006bbe:	b2d9      	uxtb	r1, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	227a      	movs	r2, #122	; 0x7a
 8006bc4:	5499      	strb	r1, [r3, r2]
    horn_           = buff[0] & (1 << 7);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b25b      	sxtb	r3, r3
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	09db      	lsrs	r3, r3, #7
 8006bd0:	b2d9      	uxtb	r1, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	227b      	movs	r2, #123	; 0x7b
 8006bd6:	5499      	strb	r1, [r3, r2]
    reverse_        = buff[1] & (1 << 0);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	001a      	movs	r2, r3
 8006be0:	2301      	movs	r3, #1
 8006be2:	4013      	ands	r3, r2
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	4193      	sbcs	r3, r2
 8006be8:	b2d9      	uxtb	r1, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	227c      	movs	r2, #124	; 0x7c
 8006bee:	5499      	strb	r1, [r3, r2]
    cruise_speed_   = buff[2];
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	7899      	ldrb	r1, [r3, #2]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	227d      	movs	r2, #125	; 0x7d
 8006bf8:	5499      	strb	r1, [r3, r2]
  }
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>:
namespace SolarGators {
namespace DataModules {

// TODO: Currently left turn and right turn are able to be true at the same time

  SteeringController::SteeringController()
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	0018      	movs	r0, r3
 8006c10:	f7ff feb8 	bl	8006984 <_ZN11SolarGators11DataModules8SteeringC1Ev>
 8006c14:	4a47      	ldr	r2, [pc, #284]	; (8006d34 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x130>)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	22f8      	movs	r2, #248	; 0xf8
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	2218      	movs	r2, #24
 8006c22:	2100      	movs	r1, #0
 8006c24:	0018      	movs	r0, r3
 8006c26:	f006 f9ba 	bl	800cf9e <memset>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	21f8      	movs	r1, #248	; 0xf8
 8006c2e:	4a42      	ldr	r2, [pc, #264]	; (8006d38 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x134>)
 8006c30:	505a      	str	r2, [r3, r1]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	33a8      	adds	r3, #168	; 0xa8
 8006c36:	0019      	movs	r1, r3
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	2380      	movs	r3, #128	; 0x80
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	50d1      	str	r1, [r2, r3]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	2382      	movs	r3, #130	; 0x82
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	2150      	movs	r1, #80	; 0x50
 8006c48:	50d1      	str	r1, [r2, r3]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3388      	adds	r3, #136	; 0x88
 8006c4e:	0019      	movs	r1, r3
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	2384      	movs	r3, #132	; 0x84
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	50d1      	str	r1, [r2, r3]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	2386      	movs	r3, #134	; 0x86
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	2120      	movs	r1, #32
 8006c60:	50d1      	str	r1, [r2, r3]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	23f4      	movs	r3, #244	; 0xf4
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	18d3      	adds	r3, r2, r3
 8006c6a:	2224      	movs	r2, #36	; 0x24
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f006 f995 	bl	800cf9e <memset>
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	23f4      	movs	r3, #244	; 0xf4
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4930      	ldr	r1, [pc, #192]	; (8006d3c <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x138>)
 8006c7c:	50d1      	str	r1, [r2, r3]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	22c5      	movs	r2, #197	; 0xc5
 8006c82:	0092      	lsls	r2, r2, #2
 8006c84:	1899      	adds	r1, r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	23f6      	movs	r3, #246	; 0xf6
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	50d1      	str	r1, [r2, r3]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	23f7      	movs	r3, #247	; 0xf7
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	21bc      	movs	r1, #188	; 0xbc
 8006c96:	50d1      	str	r1, [r2, r3]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3315      	adds	r3, #21
 8006c9c:	33ff      	adds	r3, #255	; 0xff
 8006c9e:	0019      	movs	r1, r3
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	23f8      	movs	r3, #248	; 0xf8
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	50d1      	str	r1, [r2, r3]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	23f9      	movs	r3, #249	; 0xf9
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	0089      	lsls	r1, r1, #2
 8006cb2:	50d1      	str	r1, [r2, r3]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	23fa      	movs	r3, #250	; 0xfa
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	2137      	movs	r1, #55	; 0x37
 8006cbc:	50d1      	str	r1, [r2, r3]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	22fd      	movs	r2, #253	; 0xfd
 8006cc2:	0092      	lsls	r2, r2, #2
 8006cc4:	4694      	mov	ip, r2
 8006cc6:	4463      	add	r3, ip
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f000 faab 	bl	8007224 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EEC1Ev>
  {
    button_handle_ = osThreadNew((osThreadFunc_t)&SteeringController::ButtonHandler, this, &button_attributes_);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	22f4      	movs	r2, #244	; 0xf4
 8006cd2:	0092      	lsls	r2, r2, #2
 8006cd4:	189a      	adds	r2, r3, r2
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x13c>)
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f002 fa7c 	bl	80091d8 <osThreadNew>
 8006ce0:	0001      	movs	r1, r0
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	2388      	movs	r3, #136	; 0x88
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	50d1      	str	r1, [r2, r3]
    button_event_ = osEventFlagsNew(NULL);
 8006cea:	2000      	movs	r0, #0
 8006cec:	f002 fc1e 	bl	800952c <osEventFlagsNew>
 8006cf0:	0002      	movs	r2, r0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	505a      	str	r2, [r3, r1]
    if (button_event_ == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2280      	movs	r2, #128	; 0x80
 8006cfc:	589b      	ldr	r3, [r3, r2]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x102>
    {
        Error_Handler();
 8006d02:	f7fa faef 	bl	80012e4 <Error_Handler>
    }
    button_queue_ = osMessageQueueNew(16, sizeof(uint16_t), &button_queue_attributes_);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	33f8      	adds	r3, #248	; 0xf8
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	2010      	movs	r0, #16
 8006d10:	f002 fe84 	bl	8009a1c <osMessageQueueNew>
 8006d14:	0002      	movs	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2184      	movs	r1, #132	; 0x84
 8006d1a:	505a      	str	r2, [r3, r1]
    if (button_queue_ == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2284      	movs	r2, #132	; 0x84
 8006d20:	589b      	ldr	r3, [r3, r2]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x126>
    {
        Error_Handler();
 8006d26:	f7fa fadd 	bl	80012e4 <Error_Handler>
    }
  }
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	b002      	add	sp, #8
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	0800dca4 	.word	0x0800dca4
 8006d38:	0800da78 	.word	0x0800da78
 8006d3c:	0800da88 	.word	0x0800da88
 8006d40:	080071b9 	.word	0x080071b9

08006d44 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>:

  SteeringController::~SteeringController() {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	4a0b      	ldr	r2, [pc, #44]	; (8006d7c <_ZN11SolarGators11DataModules18SteeringControllerD1Ev+0x38>)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    osEventFlagsDelete(button_event_);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2280      	movs	r2, #128	; 0x80
 8006d56:	589b      	ldr	r3, [r3, r2]
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f002 fcf1 	bl	8009740 <osEventFlagsDelete>
    osMessageQueueDelete(button_queue_);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2284      	movs	r2, #132	; 0x84
 8006d62:	589b      	ldr	r3, [r3, r2]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f002 ffe1 	bl	8009d2c <osMessageQueueDelete>
  SteeringController::~SteeringController() {
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f7ff fe47 	bl	8006a00 <_ZN11SolarGators11DataModules8SteeringD1Ev>
  }
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b002      	add	sp, #8
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	0800dca4 	.word	0x0800dca4

08006d80 <_ZN11SolarGators11DataModules18SteeringControllerD0Ev>:
  SteeringController::~SteeringController() {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  }
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7ff ffda 	bl	8006d44 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
 8006d90:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <_ZN11SolarGators11DataModules18SteeringControllerD0Ev+0x28>)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0011      	movs	r1, r2
 8006d96:	0018      	movs	r0, r3
 8006d98:	f006 f800 	bl	800cd9c <_ZdlPvj>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0018      	movs	r0, r3
 8006da0:	46bd      	mov	sp, r7
 8006da2:	b002      	add	sp, #8
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	46c0      	nop			; (mov r8, r8)
 8006da8:	000004c4 	.word	0x000004c4

08006dac <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>:

  void SteeringController::EnableLeftTurnSignal()
  {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2276      	movs	r2, #118	; 0x76
 8006db8:	5c9b      	ldrb	r3, [r3, r2]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4053      	eors	r3, r2
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv+0x20>
      left_turn_ = true;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2274      	movs	r2, #116	; 0x74
 8006dc8:	2101      	movs	r1, #1
 8006dca:	5499      	strb	r1, [r3, r2]
  }
 8006dcc:	46c0      	nop			; (mov r8, r8)
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>:

  void SteeringController::DisableLeftTurnSignal()
  {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
    left_turn_ = false;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2274      	movs	r2, #116	; 0x74
 8006de0:	2100      	movs	r1, #0
 8006de2:	5499      	strb	r1, [r3, r2]
  }
 8006de4:	46c0      	nop			; (mov r8, r8)
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b002      	add	sp, #8
 8006dea:	bd80      	pop	{r7, pc}

08006dec <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv>:

  void SteeringController::ToggleLeftTurnSignal()
  {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
    if(left_turn_)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2274      	movs	r2, #116	; 0x74
 8006df8:	5c9b      	ldrb	r3, [r3, r2]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x1c>
      DisableLeftTurnSignal();
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7ff ffe7 	bl	8006dd4 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    else
      EnableLeftTurnSignal();
  }
 8006e06:	e003      	b.n	8006e10 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x24>
      EnableLeftTurnSignal();
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7ff ffce 	bl	8006dac <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>
  }
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b002      	add	sp, #8
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>:

  void SteeringController::EnableRightTurnSignal()
  {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2276      	movs	r2, #118	; 0x76
 8006e24:	5c9b      	ldrb	r3, [r3, r2]
 8006e26:	2201      	movs	r2, #1
 8006e28:	4053      	eors	r3, r2
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv+0x20>
      right_turn_ = true;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2275      	movs	r2, #117	; 0x75
 8006e34:	2101      	movs	r1, #1
 8006e36:	5499      	strb	r1, [r3, r2]
  }
 8006e38:	46c0      	nop			; (mov r8, r8)
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>:

  void SteeringController::DisableRightTurnSignal()
  {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
    right_turn_ = false;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2275      	movs	r2, #117	; 0x75
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	5499      	strb	r1, [r3, r2]
  }
 8006e50:	46c0      	nop			; (mov r8, r8)
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b002      	add	sp, #8
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv>:

  void SteeringController::ToggleRightTurnSignal()
  {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
    if(right_turn_)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2275      	movs	r2, #117	; 0x75
 8006e64:	5c9b      	ldrb	r3, [r3, r2]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x1c>
      DisableRightTurnSignal();
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7ff ffe7 	bl	8006e40 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    else
      EnableRightTurnSignal();
  }
 8006e72:	e003      	b.n	8006e7c <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x24>
      EnableRightTurnSignal();
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7ff ffce 	bl	8006e18 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>
  }
 8006e7c:	46c0      	nop			; (mov r8, r8)
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	b002      	add	sp, #8
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>:

  void SteeringController::EnableHazards()
  {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
    DisableLeftTurnSignal();
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f7ff ffa0 	bl	8006dd4 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    DisableRightTurnSignal();
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f7ff ffd2 	bl	8006e40 <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    hazards_ = true;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2276      	movs	r2, #118	; 0x76
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	5499      	strb	r1, [r3, r2]
  }
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>:

  void SteeringController::DisableHazards()
  {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
    hazards_ = false;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2276      	movs	r2, #118	; 0x76
 8006eb8:	2100      	movs	r1, #0
 8006eba:	5499      	strb	r1, [r3, r2]
  }
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv>:

  void SteeringController::ToggleHazards()
  {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
    if(hazards_)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2276      	movs	r2, #118	; 0x76
 8006ed0:	5c9b      	ldrb	r3, [r3, r2]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x1c>
      DisableHazards();
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f7ff ffe7 	bl	8006eac <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>
    else
      EnableHazards();
  }
 8006ede:	e003      	b.n	8006ee8 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x24>
      EnableHazards();
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f7ff ffce 	bl	8006e84 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>
  }
 8006ee8:	46c0      	nop			; (mov r8, r8)
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b002      	add	sp, #8
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>:
  {
    bps_fault_ = fault;
  }

  void SteeringController::EnableCruise()
  {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
    // Don't allow cruise to be enabled in reverse
    if(!reverse_)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	227c      	movs	r2, #124	; 0x7c
 8006efc:	5c9b      	ldrb	r3, [r3, r2]
 8006efe:	2201      	movs	r2, #1
 8006f00:	4053      	eors	r3, r2
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv+0x20>
      cruise_enable_ = true;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2278      	movs	r2, #120	; 0x78
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	5499      	strb	r1, [r3, r2]
  }
 8006f10:	46c0      	nop			; (mov r8, r8)
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b002      	add	sp, #8
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>:

  void SteeringController::DisableCruise()
  {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
    cruise_enable_ = false;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2278      	movs	r2, #120	; 0x78
 8006f24:	2100      	movs	r1, #0
 8006f26:	5499      	strb	r1, [r3, r2]
  }
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b002      	add	sp, #8
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>:
  void SteeringController::ToggleCruise()
  {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
    if(cruise_enable_)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2278      	movs	r2, #120	; 0x78
 8006f3c:	5c9b      	ldrb	r3, [r3, r2]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x1c>
      DisableCruise();
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7ff ffe7 	bl	8006f18 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    else
      EnableCruise();
  }
 8006f4a:	e003      	b.n	8006f54 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x24>
      EnableCruise();
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7ff ffce 	bl	8006ef0 <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>
  }
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>:

  void SteeringController::EnableHeadlights()
  {
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
    headlights_ = true;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	227a      	movs	r2, #122	; 0x7a
 8006f68:	2101      	movs	r1, #1
 8006f6a:	5499      	strb	r1, [r3, r2]
  }
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b002      	add	sp, #8
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>:

  void SteeringController::DisableHeadlights()
  {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
    headlights_ = false;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	227a      	movs	r2, #122	; 0x7a
 8006f80:	2100      	movs	r1, #0
 8006f82:	5499      	strb	r1, [r3, r2]
  }
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b002      	add	sp, #8
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>:

  void SteeringController::ToggleHeadlights()
  {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
    if(headlights_)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	227a      	movs	r2, #122	; 0x7a
 8006f98:	5c9b      	ldrb	r3, [r3, r2]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x1c>
      DisableHeadlights();
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff ffe7 	bl	8006f74 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>
    else
      EnableHeadlights();
  }
 8006fa6:	e003      	b.n	8006fb0 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x24>
      EnableHeadlights();
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7ff ffd6 	bl	8006f5c <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>
  }
 8006fb0:	46c0      	nop			; (mov r8, r8)
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	b002      	add	sp, #8
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>:

  void SteeringController::EnableHorn()
  {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
    horn_ = true;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	227b      	movs	r2, #123	; 0x7b
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	5499      	strb	r1, [r3, r2]
  }
 8006fc8:	46c0      	nop			; (mov r8, r8)
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	b002      	add	sp, #8
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>:

  void SteeringController::DisableHorn()
  {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
    horn_ = false;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	227b      	movs	r2, #123	; 0x7b
 8006fdc:	2100      	movs	r1, #0
 8006fde:	5499      	strb	r1, [r3, r2]
  }
 8006fe0:	46c0      	nop			; (mov r8, r8)
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b002      	add	sp, #8
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv>:

  void SteeringController::ToggleHorn()
  {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
    if(horn_)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	227b      	movs	r2, #123	; 0x7b
 8006ff4:	5c9b      	ldrb	r3, [r3, r2]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv+0x1c>
      DisableHorn();
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7ff ffe7 	bl	8006fd0 <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>
    else
      EnableHorn();
  }
 8007002:	e003      	b.n	800700c <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv+0x24>
      EnableHorn();
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	0018      	movs	r0, r3
 8007008:	f7ff ffd6 	bl	8006fb8 <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>
  }
 800700c:	46c0      	nop			; (mov r8, r8)
 800700e:	46bd      	mov	sp, r7
 8007010:	b002      	add	sp, #8
 8007012:	bd80      	pop	{r7, pc}

08007014 <_ZN11SolarGators11DataModules18SteeringController19IncreaseCruiseSpeedEv>:

  void SteeringController::IncreaseCruiseSpeed()
  {
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
    SetCruiseSpeed(cruise_speed_++);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	227d      	movs	r2, #125	; 0x7d
 8007020:	5c9b      	ldrb	r3, [r3, r2]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	b2d0      	uxtb	r0, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	217d      	movs	r1, #125	; 0x7d
 800702a:	5450      	strb	r0, [r2, r1]
 800702c:	b29a      	uxth	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	0011      	movs	r1, r2
 8007032:	0018      	movs	r0, r3
 8007034:	f000 f81a 	bl	800706c <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>
  }
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	46bd      	mov	sp, r7
 800703c:	b002      	add	sp, #8
 800703e:	bd80      	pop	{r7, pc}

08007040 <_ZN11SolarGators11DataModules18SteeringController19DecreaseCruiseSpeedEv>:

  void SteeringController::DecreaseCruiseSpeed()
  {
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
    SetCruiseSpeed(cruise_speed_--);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	227d      	movs	r2, #125	; 0x7d
 800704c:	5c9b      	ldrb	r3, [r3, r2]
 800704e:	1e5a      	subs	r2, r3, #1
 8007050:	b2d0      	uxtb	r0, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	217d      	movs	r1, #125	; 0x7d
 8007056:	5450      	strb	r0, [r2, r1]
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	0011      	movs	r1, r2
 800705e:	0018      	movs	r0, r3
 8007060:	f000 f804 	bl	800706c <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>
  }
 8007064:	46c0      	nop			; (mov r8, r8)
 8007066:	46bd      	mov	sp, r7
 8007068:	b002      	add	sp, #8
 800706a:	bd80      	pop	{r7, pc}

0800706c <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>:

  void SteeringController::SetCruiseSpeed(uint16_t speed)
  {
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	000a      	movs	r2, r1
 8007076:	1cbb      	adds	r3, r7, #2
 8007078:	801a      	strh	r2, [r3, #0]
    // Make sure the the requested cruise speed is acceptable
    if(speed < Max_Cruise_Speed_ && speed > Min_Cruise_Speed_)
 800707a:	1cbb      	adds	r3, r7, #2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	2b3b      	cmp	r3, #59	; 0x3b
 8007080:	d809      	bhi.n	8007096 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt+0x2a>
 8007082:	1cbb      	adds	r3, r7, #2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt+0x2a>
      cruise_speed_ = speed;
 800708a:	1cbb      	adds	r3, r7, #2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b2d9      	uxtb	r1, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	227d      	movs	r2, #125	; 0x7d
 8007094:	5499      	strb	r1, [r3, r2]
  }
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	46bd      	mov	sp, r7
 800709a:	b002      	add	sp, #8
 800709c:	bd80      	pop	{r7, pc}

0800709e <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>:

  void SteeringController::EnableReverse()
  {
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
    // Disable cruise if switching into reverse (should never need to happen but just in case)
    DisableCruise();
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7ff ff35 	bl	8006f18 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    reverse_ = true;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	227c      	movs	r2, #124	; 0x7c
 80070b2:	2101      	movs	r1, #1
 80070b4:	5499      	strb	r1, [r3, r2]
  }
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b002      	add	sp, #8
 80070bc:	bd80      	pop	{r7, pc}

080070be <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>:

  void SteeringController::DisableReverse()
  {
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
    reverse_ = false;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	227c      	movs	r2, #124	; 0x7c
 80070ca:	2100      	movs	r1, #0
 80070cc:	5499      	strb	r1, [r3, r2]
  }
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b002      	add	sp, #8
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>:

  void SteeringController::ToggleReverse()
  {
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
    if(reverse_)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	227c      	movs	r2, #124	; 0x7c
 80070e2:	5c9b      	ldrb	r3, [r3, r2]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d004      	beq.n	80070f2 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x1c>
      DisableReverse();
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	0018      	movs	r0, r3
 80070ec:	f7ff ffe7 	bl	80070be <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>
    else
      EnableReverse();
  }
 80070f0:	e003      	b.n	80070fa <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x24>
      EnableReverse();
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f7ff ffd2 	bl	800709e <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>
  }
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b002      	add	sp, #8
 8007100:	bd80      	pop	{r7, pc}

08007102 <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>:

  void SteeringController::EnableEco()
  {
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
    eco_enable_ = true;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2279      	movs	r2, #121	; 0x79
 800710e:	2101      	movs	r1, #1
 8007110:	5499      	strb	r1, [r3, r2]
  }
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	46bd      	mov	sp, r7
 8007116:	b002      	add	sp, #8
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZN11SolarGators11DataModules18SteeringController10DisableEcoEv>:

  void SteeringController::DisableEco()
  {
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
    eco_enable_ = false;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2279      	movs	r2, #121	; 0x79
 8007126:	2100      	movs	r1, #0
 8007128:	5499      	strb	r1, [r3, r2]
  }
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	46bd      	mov	sp, r7
 800712e:	b002      	add	sp, #8
 8007130:	bd80      	pop	{r7, pc}

08007132 <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv>:
  void SteeringController::ToggleEco()
  {
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
    if(eco_enable_)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2279      	movs	r2, #121	; 0x79
 800713e:	5c9b      	ldrb	r3, [r3, r2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv+0x1c>
      DisableEco();
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	0018      	movs	r0, r3
 8007148:	f7ff ffe7 	bl	800711a <_ZN11SolarGators11DataModules18SteeringController10DisableEcoEv>
    else
      EnableEco();
  }
 800714c:	e003      	b.n	8007156 <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv+0x24>
      EnableEco();
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0018      	movs	r0, r3
 8007152:	f7ff ffd6 	bl	8007102 <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>
  }
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	46bd      	mov	sp, r7
 800715a:	b002      	add	sp, #8
 800715c:	bd80      	pop	{r7, pc}

0800715e <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>:

  void SteeringController::HandlePress(uint16_t pin)
  {
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	000a      	movs	r2, r1
 8007168:	1cbb      	adds	r3, r7, #2
 800716a:	801a      	strh	r2, [r3, #0]
    // Handles calling the action debouncing
    osEventFlagsSet(button_event_, 0x1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2280      	movs	r2, #128	; 0x80
 8007170:	589b      	ldr	r3, [r3, r2]
 8007172:	2101      	movs	r1, #1
 8007174:	0018      	movs	r0, r3
 8007176:	f002 fa27 	bl	80095c8 <osEventFlagsSet>
    osMessageQueuePut(button_queue_, &pin, 0, 0);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2284      	movs	r2, #132	; 0x84
 800717e:	5898      	ldr	r0, [r3, r2]
 8007180:	1cb9      	adds	r1, r7, #2
 8007182:	2300      	movs	r3, #0
 8007184:	2200      	movs	r2, #0
 8007186:	f002 fccf 	bl	8009b28 <osMessageQueuePut>
  }
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	46bd      	mov	sp, r7
 800718e:	b002      	add	sp, #8
 8007190:	bd80      	pop	{r7, pc}

08007192 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>:

  void SteeringController::AddButton(Drivers::Button* button)
  {
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
    buttons_.Insert(button->pin_, button);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	22fd      	movs	r2, #253	; 0xfd
 80071a0:	0092      	lsls	r2, r2, #2
 80071a2:	1898      	adds	r0, r3, r2
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	8b1b      	ldrh	r3, [r3, #24]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	0019      	movs	r1, r3
 80071ac:	f000 f84b 	bl	8007246 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_>
  }
 80071b0:	46c0      	nop			; (mov r8, r8)
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b002      	add	sp, #8
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv>:

  void SteeringController::ButtonHandler()
  {
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
    while(1)
    {
      // Wait for event to be set, no timeout
      osEventFlagsWait(button_event_, 0x1, osFlagsWaitAny, osWaitForever);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2280      	movs	r2, #128	; 0x80
 80071c4:	5898      	ldr	r0, [r3, r2]
 80071c6:	2301      	movs	r3, #1
 80071c8:	425b      	negs	r3, r3
 80071ca:	2200      	movs	r2, #0
 80071cc:	2101      	movs	r1, #1
 80071ce:	f002 fa49 	bl	8009664 <osEventFlagsWait>
      while(osMessageQueueGetCount(button_queue_) > 0)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2284      	movs	r2, #132	; 0x84
 80071d6:	589b      	ldr	r3, [r3, r2]
 80071d8:	0018      	movs	r0, r3
 80071da:	f002 fd77 	bl	8009ccc <osMessageQueueGetCount>
 80071de:	0003      	movs	r3, r0
 80071e0:	1e5a      	subs	r2, r3, #1
 80071e2:	4193      	sbcs	r3, r2
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0ea      	beq.n	80071c0 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x8>
      {
        uint16_t pin;
        osMessageQueueGet(button_queue_, &pin, NULL, 0);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2284      	movs	r2, #132	; 0x84
 80071ee:	5898      	ldr	r0, [r3, r2]
 80071f0:	240a      	movs	r4, #10
 80071f2:	1939      	adds	r1, r7, r4
 80071f4:	2300      	movs	r3, #0
 80071f6:	2200      	movs	r2, #0
 80071f8:	f002 fd00 	bl	8009bfc <osMessageQueueGet>
        Drivers::Button* button = buttons_.Find(pin);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	22fd      	movs	r2, #253	; 0xfd
 8007200:	0092      	lsls	r2, r2, #2
 8007202:	189a      	adds	r2, r3, r2
 8007204:	193b      	adds	r3, r7, r4
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	0019      	movs	r1, r3
 800720a:	0010      	movs	r0, r2
 800720c:	f000 f847 	bl	800729e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt>
 8007210:	0003      	movs	r3, r0
 8007212:	60fb      	str	r3, [r7, #12]
        if(button != nullptr)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0db      	beq.n	80071d2 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>
          button->HandlePress();
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	0018      	movs	r0, r3
 800721e:	f000 fae2 	bl	80077e6 <_ZN11SolarGators7Drivers6Button11HandlePressEv>
      while(osMessageQueueGetCount(button_queue_) > 0)
 8007222:	e7d6      	b.n	80071d2 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>

08007224 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EEC1Ev>:
    Node* FindNode(Node* node, KEY_T key);
    uint32_t Max(uint32_t a, uint32_t b);
  };

  template<typename KEY_T, typename DATA_T, int SIZE>
  Map<KEY_T, DATA_T, SIZE>::Map():current_size_(0)
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	22cc      	movs	r2, #204	; 0xcc
 8007230:	2100      	movs	r1, #0
 8007232:	5099      	str	r1, [r3, r2]
  {
    root_ = nullptr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	22c8      	movs	r2, #200	; 0xc8
 8007238:	2100      	movs	r1, #0
 800723a:	5099      	str	r1, [r3, r2]
  }
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	0018      	movs	r0, r3
 8007240:	46bd      	mov	sp, r7
 8007242:	b002      	add	sp, #8
 8007244:	bd80      	pop	{r7, pc}

08007246 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_>:

  template<typename KEY_T, typename DATA_T, int SIZE>
  bool Map<KEY_T, DATA_T, SIZE>::Insert(KEY_T key, DATA_T* new_element)
 8007246:	b590      	push	{r4, r7, lr}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	200a      	movs	r0, #10
 8007252:	183b      	adds	r3, r7, r0
 8007254:	1c0a      	adds	r2, r1, #0
 8007256:	801a      	strh	r2, [r3, #0]
  {
    //Only insert a node if there is room
    if(current_size_ < MAX_NODES && new_element != nullptr)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	22cc      	movs	r2, #204	; 0xcc
 800725c:	589b      	ldr	r3, [r3, r2]
 800725e:	2b09      	cmp	r3, #9
 8007260:	d818      	bhi.n	8007294 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_+0x4e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_+0x4e>
    {
      root_ = AddNode(root_, NewNode(key, new_element));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	22c8      	movs	r2, #200	; 0xc8
 800726c:	589c      	ldr	r4, [r3, r2]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	183b      	adds	r3, r7, r0
 8007272:	8819      	ldrh	r1, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	0018      	movs	r0, r3
 8007278:	f000 f8df 	bl	800743a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7NewNodeEtPS3_>
 800727c:	0002      	movs	r2, r0
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	0021      	movs	r1, r4
 8007282:	0018      	movs	r0, r3
 8007284:	f000 f828 	bl	80072d8 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>
 8007288:	0002      	movs	r2, r0
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	21c8      	movs	r1, #200	; 0xc8
 800728e:	505a      	str	r2, [r3, r1]
      return true;
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6InsertEtPS3_+0x50>
    }
    return false;
 8007294:	2300      	movs	r3, #0
  }
 8007296:	0018      	movs	r0, r3
 8007298:	46bd      	mov	sp, r7
 800729a:	b005      	add	sp, #20
 800729c:	bd90      	pop	{r4, r7, pc}

0800729e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt>:
    // Return new root
    return x;
  }

  template<typename KEY_T, typename DATA_T, int SIZE>
  DATA_T* Map<KEY_T, DATA_T, SIZE>::Find(KEY_T key)
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	000a      	movs	r2, r1
 80072a8:	1cbb      	adds	r3, r7, #2
 80072aa:	801a      	strh	r2, [r3, #0]
  {
    Node* foundNode = FindNode(root_, key);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	22c8      	movs	r2, #200	; 0xc8
 80072b0:	5899      	ldr	r1, [r3, r2]
 80072b2:	1cbb      	adds	r3, r7, #2
 80072b4:	881a      	ldrh	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f000 f8e7 	bl	800748c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>
 80072be:	0003      	movs	r3, r0
 80072c0:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt+0x2e>
    {
      return nullptr;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e001      	b.n	80072d0 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE4FindEt+0x32>
    }
    else
    {
      return foundNode->data;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
    }
  }
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b004      	add	sp, #16
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::AddNode(Node* node, Node* new_node)
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
    if (node == nullptr)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x16>
      return new_node;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	e0a1      	b.n	8007432 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (new_node->key < node->key)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d20a      	bcs.n	8007310 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x38>
        node->left = AddNode(node->left, new_node);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6899      	ldr	r1, [r3, #8]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	0018      	movs	r0, r3
 8007304:	f7ff ffe8 	bl	80072d8 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>
 8007308:	0002      	movs	r2, r0
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	609a      	str	r2, [r3, #8]
 800730e:	e012      	b.n	8007336 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x5e>
    else if (new_node->key > node->key)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	881a      	ldrh	r2, [r3, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d90a      	bls.n	8007332 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x5a>
        node->right = AddNode(node->right, new_node);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	68d9      	ldr	r1, [r3, #12]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	0018      	movs	r0, r3
 8007326:	f7ff ffd7 	bl	80072d8 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_>
 800732a:	0002      	movs	r2, r0
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	60da      	str	r2, [r3, #12]
 8007330:	e001      	b.n	8007336 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x5e>
        return node;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	e07d      	b.n	8007432 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    node->height = 1 + Max(Height(node->left),
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	0011      	movs	r1, r2
 800733e:	0018      	movs	r0, r3
 8007340:	f000 f8e6 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8007344:	0004      	movs	r4, r0
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	0011      	movs	r1, r2
 800734e:	0018      	movs	r0, r3
 8007350:	f000 f8de 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8007354:	0002      	movs	r2, r0
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	0021      	movs	r1, r4
 800735a:	0018      	movs	r0, r3
 800735c:	f000 f8c7 	bl	80074ee <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 8007360:	0003      	movs	r3, r0
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	611a      	str	r2, [r3, #16]
    int balance = GetBalance(node);
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	0011      	movs	r1, r2
 800736e:	0018      	movs	r0, r3
 8007370:	f000 f8de 	bl	8007530 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE>
 8007374:	0003      	movs	r3, r0
 8007376:	617b      	str	r3, [r7, #20]
    if (balance > 1 && new_node->key < node->left->key)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b01      	cmp	r3, #1
 800737c:	dd0e      	ble.n	800739c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xc4>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	881a      	ldrh	r2, [r3, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d207      	bcs.n	800739c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xc4>
        return RightRotate(node);
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	0011      	movs	r1, r2
 8007392:	0018      	movs	r0, r3
 8007394:	f000 f8eb 	bl	800756e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>
 8007398:	0003      	movs	r3, r0
 800739a:	e04a      	b.n	8007432 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key > node->right->key)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3301      	adds	r3, #1
 80073a0:	da0e      	bge.n	80073c0 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xe8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	881a      	ldrh	r2, [r3, #0]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d907      	bls.n	80073c0 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0xe8>
        return LeftRotate(node);
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	0011      	movs	r1, r2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 f921 	bl	80075fe <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>
 80073bc:	0003      	movs	r3, r0
 80073be:	e038      	b.n	8007432 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance > 1 && new_node->key > node->left->key)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	dd18      	ble.n	80073f8 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x120>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	881a      	ldrh	r2, [r3, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d911      	bls.n	80073f8 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x120>
        node->left = LeftRotate(node->left);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	0011      	movs	r1, r2
 80073dc:	0018      	movs	r0, r3
 80073de:	f000 f90e 	bl	80075fe <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>
 80073e2:	0002      	movs	r2, r0
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	609a      	str	r2, [r3, #8]
        return RightRotate(node);
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	0011      	movs	r1, r2
 80073ee:	0018      	movs	r0, r3
 80073f0:	f000 f8bd 	bl	800756e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>
 80073f4:	0003      	movs	r3, r0
 80073f6:	e01c      	b.n	8007432 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key < node->right->key)
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	3301      	adds	r3, #1
 80073fc:	da18      	bge.n	8007430 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x158>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	881a      	ldrh	r2, [r3, #0]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d211      	bcs.n	8007430 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x158>
        node->right = RightRotate(node->right);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	0011      	movs	r1, r2
 8007414:	0018      	movs	r0, r3
 8007416:	f000 f8aa 	bl	800756e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>
 800741a:	0002      	movs	r2, r0
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	60da      	str	r2, [r3, #12]
        return LeftRotate(node);
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	0011      	movs	r1, r2
 8007426:	0018      	movs	r0, r3
 8007428:	f000 f8e9 	bl	80075fe <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>
 800742c:	0003      	movs	r3, r0
 800742e:	e000      	b.n	8007432 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7AddNodeEPNS4_4NodeES6_+0x15a>
    return node;
 8007430:	68bb      	ldr	r3, [r7, #8]
  }
 8007432:	0018      	movs	r0, r3
 8007434:	46bd      	mov	sp, r7
 8007436:	b007      	add	sp, #28
 8007438:	bd90      	pop	{r4, r7, pc}

0800743a <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE7NewNodeEtPS3_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::NewNode(KEY_T key, DATA_T* new_element)
 800743a:	b590      	push	{r4, r7, lr}
 800743c:	b087      	sub	sp, #28
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	240a      	movs	r4, #10
 8007446:	193b      	adds	r3, r7, r4
 8007448:	1c0a      	adds	r2, r1, #0
 800744a:	801a      	strh	r2, [r3, #0]
      Node* node = &array[current_size_++];
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	22cc      	movs	r2, #204	; 0xcc
 8007450:	589a      	ldr	r2, [r3, r2]
 8007452:	1c51      	adds	r1, r2, #1
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	20cc      	movs	r0, #204	; 0xcc
 8007458:	5019      	str	r1, [r3, r0]
 800745a:	0013      	movs	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	189b      	adds	r3, r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	18d3      	adds	r3, r2, r3
 8007466:	617b      	str	r3, [r7, #20]
      node->data = new_element;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	605a      	str	r2, [r3, #4]
      node->key = key;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	193a      	adds	r2, r7, r4
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	801a      	strh	r2, [r3, #0]
      node->left = nullptr;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2200      	movs	r2, #0
 800747a:	609a      	str	r2, [r3, #8]
      node->right = nullptr;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2200      	movs	r2, #0
 8007480:	60da      	str	r2, [r3, #12]
      return node;
 8007482:	697b      	ldr	r3, [r7, #20]
  }
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b007      	add	sp, #28
 800748a:	bd90      	pop	{r4, r7, pc}

0800748c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>:

  template<typename KEY_T, typename DATA_T, int SIZE>
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::FindNode(Node* node, KEY_T key)
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	1dbb      	adds	r3, r7, #6
 8007498:	801a      	strh	r2, [r3, #0]
  {
    //Can't find node return nullptr
    if(node == nullptr)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x18>
    {
      return node;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	e020      	b.n	80074e6 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x5a>
    }

    if(key < node->key)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	1dba      	adds	r2, r7, #6
 80074aa:	8812      	ldrh	r2, [r2, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d209      	bcs.n	80074c4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x38>
    {
      return FindNode(node->left, key);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6899      	ldr	r1, [r3, #8]
 80074b4:	1dbb      	adds	r3, r7, #6
 80074b6:	881a      	ldrh	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	0018      	movs	r0, r3
 80074bc:	f7ff ffe6 	bl	800748c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>
 80074c0:	0003      	movs	r3, r0
 80074c2:	e010      	b.n	80074e6 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x5a>
    }
    else if(key > node->key)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	1dba      	adds	r2, r7, #6
 80074ca:	8812      	ldrh	r2, [r2, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d909      	bls.n	80074e4 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x58>
    {
      return FindNode(node->right, key);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	68d9      	ldr	r1, [r3, #12]
 80074d4:	1dbb      	adds	r3, r7, #6
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	0018      	movs	r0, r3
 80074dc:	f7ff ffd6 	bl	800748c <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt>
 80074e0:	0003      	movs	r3, r0
 80074e2:	e000      	b.n	80074e6 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE8FindNodeEPNS4_4NodeEt+0x5a>
    }
    else
    {
      //If key == node_key then return the node
      return node;
 80074e4:	68bb      	ldr	r3, [r7, #8]
    }
  }
 80074e6:	0018      	movs	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b004      	add	sp, #16
 80074ec:	bd80      	pop	{r7, pc}

080074ee <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>:

  template<typename KEY_T, typename DATA_T, int SIZE>
  uint32_t Map<KEY_T, DATA_T, SIZE>::Max(uint32_t a, uint32_t b)
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  {
      return (a > b)? a : b;
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d901      	bls.n	8007506 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm+0x18>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	e000      	b.n	8007508 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm+0x1a>
 8007506:	687b      	ldr	r3, [r7, #4]
  }
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b004      	add	sp, #16
 800750e:	bd80      	pop	{r7, pc}

08007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::Height(Node *N)
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE+0x14>
      return 0;
 8007520:	2300      	movs	r3, #0
 8007522:	e001      	b.n	8007528 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE+0x18>
    return N->height;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
  }
 8007528:	0018      	movs	r0, r3
 800752a:	46bd      	mov	sp, r7
 800752c:	b002      	add	sp, #8
 800752e:	bd80      	pop	{r7, pc}

08007530 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::GetBalance(Node *N)
 8007530:	b590      	push	{r4, r7, lr}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d101      	bne.n	8007544 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE+0x14>
      return 0;
 8007540:	2300      	movs	r3, #0
 8007542:	e010      	b.n	8007566 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10GetBalanceEPNS4_4NodeE+0x36>
    return Height(N->left) - Height(N->right);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	0011      	movs	r1, r2
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff ffdf 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8007552:	0004      	movs	r4, r0
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	0011      	movs	r1, r2
 800755c:	0018      	movs	r0, r3
 800755e:	f7ff ffd7 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8007562:	0003      	movs	r3, r0
 8007564:	1ae3      	subs	r3, r4, r3
  }
 8007566:	0018      	movs	r0, r3
 8007568:	46bd      	mov	sp, r7
 800756a:	b003      	add	sp, #12
 800756c:	bd90      	pop	{r4, r7, pc}

0800756e <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE11RightRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::RightRotate(Node *y)
 800756e:	b590      	push	{r4, r7, lr}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
    Node *x = y->left;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	60bb      	str	r3, [r7, #8]
    x->right = y;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	60da      	str	r2, [r3, #12]
    y->left = T2;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]
        Height(y->right)) + 1;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	0011      	movs	r1, r2
 8007598:	0018      	movs	r0, r3
 800759a:	f7ff ffb9 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800759e:	0004      	movs	r4, r0
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	0011      	movs	r1, r2
 80075a8:	0018      	movs	r0, r3
 80075aa:	f7ff ffb1 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 80075ae:	0002      	movs	r2, r0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	0021      	movs	r1, r4
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7ff ff9a 	bl	80074ee <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 80075ba:	0003      	movs	r3, r0
 80075bc:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	611a      	str	r2, [r3, #16]
        Height(x->right)) + 1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	0011      	movs	r1, r2
 80075ca:	0018      	movs	r0, r3
 80075cc:	f7ff ffa0 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 80075d0:	0004      	movs	r4, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	0011      	movs	r1, r2
 80075da:	0018      	movs	r0, r3
 80075dc:	f7ff ff98 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 80075e0:	0002      	movs	r2, r0
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	0021      	movs	r1, r4
 80075e6:	0018      	movs	r0, r3
 80075e8:	f7ff ff81 	bl	80074ee <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 80075ec:	0003      	movs	r3, r0
 80075ee:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	611a      	str	r2, [r3, #16]
    return x;
 80075f4:	68fb      	ldr	r3, [r7, #12]
  }
 80075f6:	0018      	movs	r0, r3
 80075f8:	46bd      	mov	sp, r7
 80075fa:	b005      	add	sp, #20
 80075fc:	bd90      	pop	{r4, r7, pc}

080075fe <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE10LeftRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::LeftRotate(Node *x)
 80075fe:	b590      	push	{r4, r7, lr}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
    Node *y = x->right;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	60bb      	str	r3, [r7, #8]
    y->left = x;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	609a      	str	r2, [r3, #8]
    x->right = T2;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	60da      	str	r2, [r3, #12]
        Height(x->right)) + 1;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	0011      	movs	r1, r2
 8007628:	0018      	movs	r0, r3
 800762a:	f7ff ff71 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800762e:	0004      	movs	r4, r0
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	0011      	movs	r1, r2
 8007638:	0018      	movs	r0, r3
 800763a:	f7ff ff69 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 800763e:	0002      	movs	r2, r0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	0021      	movs	r1, r4
 8007644:	0018      	movs	r0, r3
 8007646:	f7ff ff52 	bl	80074ee <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 800764a:	0003      	movs	r3, r0
 800764c:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	611a      	str	r2, [r3, #16]
        Height(y->right)) + 1;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	0011      	movs	r1, r2
 800765a:	0018      	movs	r0, r3
 800765c:	f7ff ff58 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8007660:	0004      	movs	r4, r0
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	0011      	movs	r1, r2
 800766a:	0018      	movs	r0, r3
 800766c:	f7ff ff50 	bl	8007510 <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE6HeightEPNS4_4NodeE>
 8007670:	0002      	movs	r2, r0
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	0021      	movs	r1, r4
 8007676:	0018      	movs	r0, r3
 8007678:	f7ff ff39 	bl	80074ee <_ZN11SolarGators10Containers3MapItNS_7Drivers6ButtonELi10EE3MaxEmm>
 800767c:	0003      	movs	r3, r0
 800767e:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	611a      	str	r2, [r3, #16]
    return y;
 8007684:	68fb      	ldr	r3, [r7, #12]
  }
 8007686:	0018      	movs	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	b005      	add	sp, #20
 800768c:	bd90      	pop	{r4, r7, pc}
	...

08007690 <_Z12GetASCIICodePhh>:
* Output         : - *pBuffer: Store data pointer
* Return         : None
* Attention		 : None
*******************************************************************************/
void GetASCIICode(unsigned char* pBuffer,unsigned char ASCII)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	000a      	movs	r2, r1
 800769a:	1cfb      	adds	r3, r7, #3
 800769c:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 16; i++)
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b0f      	cmp	r3, #15
 80076a6:	dc11      	bgt.n	80076cc <_Z12GetASCIICodePhh+0x3c>
   {
       pBuffer[i] = AsciiLib[(ASCII - 32)][i];
 80076a8:	1cfb      	adds	r3, r7, #3
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	3b20      	subs	r3, #32
 80076ae:	001a      	movs	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	18cb      	adds	r3, r1, r3
 80076b6:	4907      	ldr	r1, [pc, #28]	; (80076d4 <_Z12GetASCIICodePhh+0x44>)
 80076b8:	0112      	lsls	r2, r2, #4
 80076ba:	1889      	adds	r1, r1, r2
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	188a      	adds	r2, r1, r2
 80076c0:	7812      	ldrb	r2, [r2, #0]
 80076c2:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 16; i++)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e7ea      	b.n	80076a2 <_Z12GetASCIICodePhh+0x12>
   }
}
 80076cc:	46c0      	nop			; (mov r8, r8)
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b004      	add	sp, #16
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	0800dcb4 	.word	0x0800dcb4

080076d8 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	0002      	movs	r2, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	1dfb      	adds	r3, r7, #7
 80076e4:	701a      	strb	r2, [r3, #0]
    return memory_order(int(__m) & int(__mod));
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	b25b      	sxtb	r3, r3
 80076ea:	1dfa      	adds	r2, r7, #7
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	b252      	sxtb	r2, r2
 80076f0:	4013      	ands	r3, r2
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	b2db      	uxtb	r3, r3
  }
 80076f6:	0018      	movs	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b002      	add	sp, #8
 80076fc:	bd80      	pop	{r7, pc}

080076fe <_ZNSt6atomicIbEaSEb>:
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	000a      	movs	r2, r1
 8007708:	1cfb      	adds	r3, r7, #3
 800770a:	701a      	strb	r2, [r3, #0]
    { return _M_base.operator=(__i); }
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	1cfb      	adds	r3, r7, #3
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	0019      	movs	r1, r3
 8007714:	0010      	movs	r0, r2
 8007716:	f000 f8af 	bl	8007878 <_ZNSt13__atomic_baseIbEaSEb>
 800771a:	0003      	movs	r3, r0
 800771c:	0018      	movs	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	b002      	add	sp, #8
 8007722:	bd80      	pop	{r7, pc}

08007724 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	425a      	negs	r2, r3
 8007732:	4153      	adcs	r3, r2
 8007734:	b2db      	uxtb	r3, r3
 8007736:	0018      	movs	r0, r3
 8007738:	46bd      	mov	sp, r7
 800773a:	b002      	add	sp, #8
 800773c:	bd80      	pop	{r7, pc}

0800773e <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>:
#include "Button.hpp"

#include "map"
namespace SolarGators::Drivers {

Button::Button(const char* name, GPIO_TypeDef* port, uint16_t pin, uint16_t press_time, GPIO_PinState active_state):
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	001a      	movs	r2, r3
 800774c:	1cbb      	adds	r3, r7, #2
 800774e:	801a      	strh	r2, [r3, #0]
    name_(name),port_(port),pin_(pin),press_time_(press_time), active_state_(active_state), press_count_(0), last_valid_press_time_(0)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	0018      	movs	r0, r3
 8007754:	f000 f8be 	bl	80078d4 <_ZNSt8functionIFvvEEC1Ev>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	611a      	str	r2, [r3, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	615a      	str	r2, [r3, #20]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	1cba      	adds	r2, r7, #2
 8007768:	8812      	ldrh	r2, [r2, #0]
 800776a:	831a      	strh	r2, [r3, #24]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	61da      	str	r2, [r3, #28]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	621a      	str	r2, [r3, #32]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	2318      	movs	r3, #24
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	8493      	strh	r3, [r2, #36]	; 0x24
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	221c      	movs	r2, #28
 8007786:	18ba      	adds	r2, r7, r2
 8007788:	2126      	movs	r1, #38	; 0x26
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	545a      	strb	r2, [r3, r1]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2232      	movs	r2, #50	; 0x32
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
{
  disabled_ = false;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	332a      	adds	r3, #42	; 0x2a
 8007798:	2100      	movs	r1, #0
 800779a:	0018      	movs	r0, r3
 800779c:	f7ff ffaf 	bl	80076fe <_ZNSt6atomicIbEaSEb>
}
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	0018      	movs	r0, r3
 80077a4:	46bd      	mov	sp, r7
 80077a6:	b004      	add	sp, #16
 80077a8:	bd80      	pop	{r7, pc}

080077aa <_ZN11SolarGators7Drivers6ButtonD1Ev>:

Button::~Button()
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f7fa fb6c 	bl	8001e92 <_ZNSt8functionIFvvEED1Ev>
{
}
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b002      	add	sp, #8
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <_ZN11SolarGators7Drivers6Button7ReadPinEv>:

GPIO_PinState Button::ReadPin()
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port_, pin_);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695a      	ldr	r2, [r3, #20]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8b1b      	ldrh	r3, [r3, #24]
 80077d4:	0019      	movs	r1, r3
 80077d6:	0010      	movs	r0, r2
 80077d8:	f7fc fad8 	bl	8003d8c <HAL_GPIO_ReadPin>
 80077dc:	0003      	movs	r3, r0
}
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b002      	add	sp, #8
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <_ZN11SolarGators7Drivers6Button11HandlePressEv>:

void Button::HandlePress()
{
 80077e6:	b590      	push	{r4, r7, lr}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  if(last_valid_press_time_ + debounce_time_ < osKernelGetTickCount())
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80077f6:	189c      	adds	r4, r3, r2
 80077f8:	f001 fcca 	bl	8009190 <osKernelGetTickCount>
 80077fc:	0003      	movs	r3, r0
 80077fe:	429c      	cmp	r4, r3
 8007800:	419b      	sbcs	r3, r3
 8007802:	425b      	negs	r3, r3
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d033      	beq.n	8007872 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8c>
  {
    press_count_++;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	621a      	str	r2, [r3, #32]
    last_valid_press_time_ = osKernelGetTickCount();
 8007814:	f001 fcbc 	bl	8009190 <osKernelGetTickCount>
 8007818:	0002      	movs	r2, r0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	61da      	str	r2, [r3, #28]
    // Sleep until we should call action
    osDelay(debounce_time_ + press_time_);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007822:	001a      	movs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007828:	18d3      	adds	r3, r2, r3
 800782a:	0018      	movs	r0, r3
 800782c:	f001 fd7c 	bl	8009328 <osDelay>
    if(ReadPin() != active_state_)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	0018      	movs	r0, r3
 8007834:	f7ff ffc6 	bl	80077c4 <_ZN11SolarGators7Drivers6Button7ReadPinEv>
 8007838:	0003      	movs	r3, r0
 800783a:	0019      	movs	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2226      	movs	r2, #38	; 0x26
 8007840:	5c9b      	ldrb	r3, [r3, r2]
 8007842:	1acb      	subs	r3, r1, r3
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	4193      	sbcs	r3, r2
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d110      	bne.n	8007870 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8a>
      return;
    // Make sure button is still pressed
    // and there is an action assigned to it
    if(action_)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	0018      	movs	r0, r3
 8007852:	f000 f84c 	bl	80078ee <_ZNKSt8functionIFvvEEcvbEv>
 8007856:	1e03      	subs	r3, r0, #0
 8007858:	d00b      	beq.n	8007872 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8c>
    {
      action_();
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	0018      	movs	r0, r3
 800785e:	f000 f857 	bl	8007910 <_ZNKSt8functionIFvvEEclEv>
      action_called_time_++;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7e9b      	ldrb	r3, [r3, #26]
 8007866:	3301      	adds	r3, #1
 8007868:	b2da      	uxtb	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	769a      	strb	r2, [r3, #26]
 800786e:	e000      	b.n	8007872 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8c>
      return;
 8007870:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007872:	46bd      	mov	sp, r7
 8007874:	b003      	add	sp, #12
 8007876:	bd90      	pop	{r4, r7, pc}

08007878 <_ZNSt13__atomic_baseIbEaSEb>:

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	000a      	movs	r2, r1
 8007882:	1cfb      	adds	r3, r7, #3
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	250b      	movs	r5, #11
 800788c:	197b      	adds	r3, r7, r5
 800788e:	1cfa      	adds	r2, r7, #3
 8007890:	7812      	ldrb	r2, [r2, #0]
 8007892:	701a      	strb	r2, [r3, #0]
 8007894:	210a      	movs	r1, #10
 8007896:	187b      	adds	r3, r7, r1
 8007898:	2205      	movs	r2, #5
 800789a:	701a      	strb	r2, [r3, #0]
      }

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b = __m & __memory_order_mask;
 800789c:	2309      	movs	r3, #9
 800789e:	18fc      	adds	r4, r7, r3
 80078a0:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <_ZNSt13__atomic_baseIbEaSEb+0x58>)
 80078a2:	187b      	adds	r3, r7, r1
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	0011      	movs	r1, r2
 80078a8:	0018      	movs	r0, r3
 80078aa:	f7ff ff15 	bl	80076d8 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80078ae:	0003      	movs	r3, r0
 80078b0:	7023      	strb	r3, [r4, #0]
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, int(__m));
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	197a      	adds	r2, r7, r5
 80078b6:	7812      	ldrb	r2, [r2, #0]
 80078b8:	f3bf 8f5b 	dmb	ish
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	f3bf 8f5b 	dmb	ish
      }
 80078c2:	46c0      	nop			; (mov r8, r8)
	return __i;
 80078c4:	1cfb      	adds	r3, r7, #3
 80078c6:	781b      	ldrb	r3, [r3, #0]
      }
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b004      	add	sp, #16
 80078ce:	bdb0      	pop	{r4, r5, r7, pc}
 80078d0:	0000ffff 	.word	0x0000ffff

080078d4 <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	0018      	movs	r0, r3
 80078e0:	f7f9 ff99 	bl	8001816 <_ZNSt14_Function_baseC1Ev>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	0018      	movs	r0, r3
 80078e8:	46bd      	mov	sp, r7
 80078ea:	b002      	add	sp, #8
 80078ec:	bd80      	pop	{r7, pc}

080078ee <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f7ff ff13 	bl	8007724 <_ZNKSt14_Function_base8_M_emptyEv>
 80078fe:	0003      	movs	r3, r0
 8007900:	001a      	movs	r2, r3
 8007902:	2301      	movs	r3, #1
 8007904:	4053      	eors	r3, r2
 8007906:	b2db      	uxtb	r3, r3
 8007908:	0018      	movs	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	0018      	movs	r0, r3
 800791c:	f7ff ff02 	bl	8007724 <_ZNKSt14_Function_base8_M_emptyEv>
 8007920:	1e03      	subs	r3, r0, #0
 8007922:	d001      	beq.n	8007928 <_ZNKSt8functionIFvvEEclEv+0x18>
	__throw_bad_function_call();
 8007924:	f005 fa5e 	bl	800cde4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	0010      	movs	r0, r2
 8007930:	4798      	blx	r3
 8007932:	46c0      	nop			; (mov r8, r8)
    }
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>:
#include <CAN.hpp>

namespace SolarGators {
namespace Drivers {

CANDriver::CANDriver(CAN_HandleTypeDef* hcan, uint32_t rx_fifo_num_):hcan_(hcan),rx_fifo_num_(rx_fifo_num_)
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x8c>)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	0018      	movs	r0, r3
 8007954:	f000 f96c 	bl	8007c30 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EEC1Ev>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	671a      	str	r2, [r3, #112]	; 0x70
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	675a      	str	r2, [r3, #116]	; 0x74
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	23cf      	movs	r3, #207	; 0xcf
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	18d3      	adds	r3, r2, r3
 800796c:	2224      	movs	r2, #36	; 0x24
 800796e:	2100      	movs	r1, #0
 8007970:	0018      	movs	r0, r3
 8007972:	f005 fb14 	bl	800cf9e <memset>
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	23cf      	movs	r3, #207	; 0xcf
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4913      	ldr	r1, [pc, #76]	; (80079cc <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x90>)
 800797e:	50d1      	str	r1, [r2, r3]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	22a0      	movs	r2, #160	; 0xa0
 8007984:	0092      	lsls	r2, r2, #2
 8007986:	1899      	adds	r1, r3, r2
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	23d1      	movs	r3, #209	; 0xd1
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	50d1      	str	r1, [r2, r3]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	23d2      	movs	r3, #210	; 0xd2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	21bc      	movs	r1, #188	; 0xbc
 8007998:	50d1      	str	r1, [r2, r3]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3380      	adds	r3, #128	; 0x80
 800799e:	0019      	movs	r1, r3
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	23d3      	movs	r3, #211	; 0xd3
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	50d1      	str	r1, [r2, r3]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	23d4      	movs	r3, #212	; 0xd4
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	2180      	movs	r1, #128	; 0x80
 80079b0:	0089      	lsls	r1, r1, #2
 80079b2:	50d1      	str	r1, [r2, r3]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	23d5      	movs	r3, #213	; 0xd5
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	2108      	movs	r1, #8
 80079bc:	50d1      	str	r1, [r2, r3]
{

}
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b004      	add	sp, #16
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	0800e2ac 	.word	0x0800e2ac
 80079cc:	0800da98 	.word	0x0800da98

080079d0 <_ZN11SolarGators7Drivers9CANDriver4InitEv>:

void CANDriver::Init()
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08c      	sub	sp, #48	; 0x30
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  // Configure Filter
  //Initialize a hardware filter that passes everything
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 80079d8:	2108      	movs	r1, #8
 80079da:	187b      	adds	r3, r7, r1
 80079dc:	2201      	movs	r2, #1
 80079de:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;   /*Mask mode*/
 80079e0:	187b      	adds	r3, r7, r1
 80079e2:	2200      	movs	r2, #0
 80079e4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterMaskIdHigh = 0;
 80079e6:	187b      	adds	r3, r7, r1
 80079e8:	2200      	movs	r2, #0
 80079ea:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;                  /*Accept everything*/
 80079ec:	187b      	adds	r3, r7, r1
 80079ee:	2200      	movs	r2, #0
 80079f0:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  /*One 32-bit filter*/
 80079f2:	187b      	adds	r3, r7, r1
 80079f4:	2201      	movs	r2, #1
 80079f6:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterBank = 0;                       /*Init bank 0*/
 80079f8:	187b      	adds	r3, r7, r1
 80079fa:	2200      	movs	r2, #0
 80079fc:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = 0;             /*Assign to FIFO 0*/
 80079fe:	187b      	adds	r3, r7, r1
 8007a00:	2200      	movs	r2, #0
 8007a02:	611a      	str	r2, [r3, #16]
  HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a08:	187a      	adds	r2, r7, r1
 8007a0a:	0011      	movs	r1, r2
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f7fb f9e5 	bl	8002ddc <HAL_CAN_ConfigFilter>

  can_rx_event_ = osEventFlagsNew(NULL);
 8007a12:	2000      	movs	r0, #0
 8007a14:	f001 fd8a 	bl	800952c <osEventFlagsNew>
 8007a18:	0002      	movs	r2, r0
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	679a      	str	r2, [r3, #120]	; 0x78
  if (can_rx_event_ == NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x5a>
  {
      Error_Handler();
 8007a26:	f7f9 fc5d 	bl	80012e4 <Error_Handler>
  }

  rx_task_handle_ = osThreadNew((osThreadFunc_t)&CANDriver::HandleReceive, this, &rx_task_attributes_);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	22cf      	movs	r2, #207	; 0xcf
 8007a2e:	0092      	lsls	r2, r2, #2
 8007a30:	189a      	adds	r2, r3, r2
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x90>)
 8007a36:	0018      	movs	r0, r3
 8007a38:	f001 fbce 	bl	80091d8 <osThreadNew>
 8007a3c:	0002      	movs	r2, r0
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	67da      	str	r2, [r3, #124]	; 0x7c
  if (rx_task_handle_ == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x7e>
  {
      Error_Handler();
 8007a4a:	f7f9 fc4b 	bl	80012e4 <Error_Handler>
  }
  HAL_CAN_Start(hcan_);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	0018      	movs	r0, r3
 8007a54:	f7fb fab4 	bl	8002fc0 <HAL_CAN_Start>
}
 8007a58:	46c0      	nop			; (mov r8, r8)
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b00c      	add	sp, #48	; 0x30
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	08007aa9 	.word	0x08007aa9

08007a64 <_ZN11SolarGators7Drivers9CANDriverD1Ev>:

CANDriver::~CANDriver()
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	4a03      	ldr	r2, [pc, #12]	; (8007a7c <_ZN11SolarGators7Drivers9CANDriverD1Ev+0x18>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
{ }
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	0018      	movs	r0, r3
 8007a76:	46bd      	mov	sp, r7
 8007a78:	b002      	add	sp, #8
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	0800e2ac 	.word	0x0800e2ac

08007a80 <_ZN11SolarGators7Drivers9CANDriverD0Ev>:
CANDriver::~CANDriver()
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
{ }
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f7ff ffea 	bl	8007a64 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
 8007a90:	23d8      	movs	r3, #216	; 0xd8
 8007a92:	009a      	lsls	r2, r3, #2
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	0011      	movs	r1, r2
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f005 f97f 	bl	800cd9c <_ZdlPvj>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b002      	add	sp, #8
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv>:

void CANDriver::HandleReceive()
{
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b08f      	sub	sp, #60	; 0x3c
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  while(1)
  {
    osEventFlagsWait(can_rx_event_, 0x1, osFlagsWaitAny, osWaitForever);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	425b      	negs	r3, r3
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2101      	movs	r1, #1
 8007abc:	f001 fdd2 	bl	8009664 <osEventFlagsWait>
    CAN_RxHeaderTypeDef pHeader;
    uint8_t aData[MAX_DATA_SIZE];

    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac8:	0019      	movs	r1, r3
 8007aca:	0010      	movs	r0, r2
 8007acc:	f7fb fcf0 	bl	80034b0 <HAL_CAN_GetRxFifoFillLevel>
 8007ad0:	0003      	movs	r3, r0
 8007ad2:	1e5a      	subs	r2, r3, #1
 8007ad4:	4193      	sbcs	r3, r2
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0e9      	beq.n	8007ab0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>
    {
      HAL_CAN_GetRxMessage(hcan_, rx_fifo_num_, &pHeader, aData);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	18fb      	adds	r3, r7, r3
 8007ae8:	2418      	movs	r4, #24
 8007aea:	193a      	adds	r2, r7, r4
 8007aec:	f7fb fbc4 	bl	8003278 <HAL_CAN_GetRxMessage>
      DataModules::DataModule* rx_module = modules_.Find(pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	1d1a      	adds	r2, r3, #4
 8007af4:	0021      	movs	r1, r4
 8007af6:	187b      	adds	r3, r7, r1
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x5e>
 8007afe:	187b      	adds	r3, r7, r1
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	e003      	b.n	8007b0e <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x66>
 8007b06:	2318      	movs	r3, #24
 8007b08:	18fb      	adds	r3, r7, r3
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	0019      	movs	r1, r3
 8007b10:	0010      	movs	r0, r2
 8007b12:	f000 f89c 	bl	8007c4e <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt>
 8007b16:	0003      	movs	r3, r0
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
      if(rx_module != nullptr)
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0cf      	beq.n	8007ac0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x18>
      {
        osMutexAcquire(rx_module->mutex_id_, osWaitForever);
 8007b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2201      	movs	r2, #1
 8007b26:	4252      	negs	r2, r2
 8007b28:	0011      	movs	r1, r2
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f001 fed0 	bl	80098d0 <osMutexAcquire>
        rx_module->FromByteArray(aData);
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2208      	movs	r2, #8
 8007b3a:	18b9      	adds	r1, r7, r2
 8007b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b3e:	0010      	movs	r0, r2
 8007b40:	4798      	blx	r3
        osMutexRelease(rx_module->mutex_id_);
 8007b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	0018      	movs	r0, r3
 8007b48:	f001 ff1e 	bl	8009988 <osMutexRelease>
    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 8007b4c:	e7b8      	b.n	8007ac0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x18>

08007b4e <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>:
    }
  }
}

void CANDriver::Send(SolarGators::DataModules::DataModule* data)
{
 8007b4e:	b590      	push	{r4, r7, lr}
 8007b50:	b08f      	sub	sp, #60	; 0x3c
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
  //Spinlock until a tx mailbox is empty
  while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan_));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f7fb fb53 	bl	8003208 <HAL_CAN_GetTxMailboxesFreeLevel>
 8007b62:	0003      	movs	r3, r0
 8007b64:	425a      	negs	r2, r3
 8007b66:	4153      	adcs	r3, r2
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d000      	beq.n	8007b70 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x22>
 8007b6e:	e7f3      	b.n	8007b58 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0xa>

  //Initialize Header
  uint32_t pTxMailbox;
  CAN_TxHeaderTypeDef pHeader;
  pHeader.RTR = CAN_RTR_DATA;
 8007b70:	211c      	movs	r1, #28
 8007b72:	187b      	adds	r3, r7, r1
 8007b74:	2200      	movs	r2, #0
 8007b76:	60da      	str	r2, [r3, #12]
  pHeader.DLC = data->size_;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	187b      	adds	r3, r7, r1
 8007b7e:	611a      	str	r2, [r3, #16]
  if(data->is_ext_id_)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	7b1b      	ldrb	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x4a>
  {
    pHeader.ExtId = data->id_;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	605a      	str	r2, [r3, #4]
    pHeader.IDE = CAN_ID_EXT;
 8007b90:	187b      	adds	r3, r7, r1
 8007b92:	2204      	movs	r2, #4
 8007b94:	609a      	str	r2, [r3, #8]
 8007b96:	e007      	b.n	8007ba8 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x5a>
  }
  else
  {
    pHeader.StdId = data->id_;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	211c      	movs	r1, #28
 8007b9e:	187b      	adds	r3, r7, r1
 8007ba0:	601a      	str	r2, [r3, #0]
    pHeader.IDE = CAN_ID_STD;
 8007ba2:	187b      	adds	r3, r7, r1
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	609a      	str	r2, [r3, #8]
  }
  //Put CAN message in tx mailbox
  uint8_t aData[MAX_DATA_SIZE];
  osMutexAcquire(data->mutex_id_, osWaitForever);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2201      	movs	r2, #1
 8007bae:	4252      	negs	r2, r2
 8007bb0:	0011      	movs	r1, r2
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f001 fe8c 	bl	80098d0 <osMutexAcquire>
  data->ToByteArray(aData);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	240c      	movs	r4, #12
 8007bc2:	1939      	adds	r1, r7, r4
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	0010      	movs	r0, r2
 8007bc8:	4798      	blx	r3
  osMutexRelease(data->mutex_id_);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	0018      	movs	r0, r3
 8007bd0:	f001 feda 	bl	8009988 <osMutexRelease>
  HAL_CAN_AddTxMessage(hcan_, &pHeader, aData, &pTxMailbox);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007bd8:	2334      	movs	r3, #52	; 0x34
 8007bda:	18fb      	adds	r3, r7, r3
 8007bdc:	193a      	adds	r2, r7, r4
 8007bde:	211c      	movs	r1, #28
 8007be0:	1879      	adds	r1, r7, r1
 8007be2:	f7fb fa33 	bl	800304c <HAL_CAN_AddTxMessage>
}
 8007be6:	46c0      	nop			; (mov r8, r8)
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b00f      	add	sp, #60	; 0x3c
 8007bec:	bd90      	pop	{r4, r7, pc}

08007bee <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>:

bool CANDriver::AddRxModule(DataModules::DataModule* module)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
  return modules_.Insert(module->id_, module);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	1d18      	adds	r0, r3, #4
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	0019      	movs	r1, r3
 8007c06:	f000 f83e 	bl	8007c86 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_>
 8007c0a:	0003      	movs	r3, r0
}
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b002      	add	sp, #8
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>:
  // TODO: Implement (Remove needs to be added to tree container)
  return false;
}

void CANDriver::SetRxFlag()
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  osEventFlagsSet(can_rx_event_, 0x1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c20:	2101      	movs	r1, #1
 8007c22:	0018      	movs	r0, r3
 8007c24:	f001 fcd0 	bl	80095c8 <osEventFlagsSet>
}
 8007c28:	46c0      	nop			; (mov r8, r8)
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	b002      	add	sp, #8
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EEC1Ev>:
  Map<KEY_T, DATA_T, SIZE>::Map():current_size_(0)
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	669a      	str	r2, [r3, #104]	; 0x68
    root_ = nullptr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	665a      	str	r2, [r3, #100]	; 0x64
  }
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	0018      	movs	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b002      	add	sp, #8
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt>:
  DATA_T* Map<KEY_T, DATA_T, SIZE>::Find(KEY_T key)
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	000a      	movs	r2, r1
 8007c58:	1cbb      	adds	r3, r7, #2
 8007c5a:	801a      	strh	r2, [r3, #0]
    Node* foundNode = FindNode(root_, key);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007c60:	1cbb      	adds	r3, r7, #2
 8007c62:	881a      	ldrh	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	0018      	movs	r0, r3
 8007c68:	f000 f836 	bl	8007cd8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	60fb      	str	r3, [r7, #12]
    if(foundNode == nullptr)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt+0x2c>
      return nullptr;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e001      	b.n	8007c7e <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE4FindEt+0x30>
      return foundNode->data;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
  }
 8007c7e:	0018      	movs	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	b004      	add	sp, #16
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_>:
  bool Map<KEY_T, DATA_T, SIZE>::Insert(KEY_T key, DATA_T* new_element)
 8007c86:	b590      	push	{r4, r7, lr}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	200a      	movs	r0, #10
 8007c92:	183b      	adds	r3, r7, r0
 8007c94:	1c0a      	adds	r2, r1, #0
 8007c96:	801a      	strh	r2, [r3, #0]
    if(current_size_ < MAX_NODES && new_element != nullptr)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d816      	bhi.n	8007cce <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_+0x48>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d013      	beq.n	8007cce <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_+0x48>
      root_ = AddNode(root_, NewNode(key, new_element));
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	183b      	adds	r3, r7, r0
 8007cae:	8819      	ldrh	r1, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f000 f8f2 	bl	8007e9c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7NewNodeEtPS3_>
 8007cb8:	0002      	movs	r2, r0
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	0021      	movs	r1, r4
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f000 f83b 	bl	8007d3a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>
 8007cc4:	0002      	movs	r2, r0
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	665a      	str	r2, [r3, #100]	; 0x64
      return true;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6InsertEtPS3_+0x4a>
    return false;
 8007cce:	2300      	movs	r3, #0
  }
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b005      	add	sp, #20
 8007cd6:	bd90      	pop	{r4, r7, pc}

08007cd8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::FindNode(Node* node, KEY_T key)
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	1dbb      	adds	r3, r7, #6
 8007ce4:	801a      	strh	r2, [r3, #0]
    if(node == nullptr)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x18>
      return node;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	e020      	b.n	8007d32 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x5a>
    if(key < node->key)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	1dba      	adds	r2, r7, #6
 8007cf6:	8812      	ldrh	r2, [r2, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d209      	bcs.n	8007d10 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x38>
      return FindNode(node->left, key);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6899      	ldr	r1, [r3, #8]
 8007d00:	1dbb      	adds	r3, r7, #6
 8007d02:	881a      	ldrh	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	0018      	movs	r0, r3
 8007d08:	f7ff ffe6 	bl	8007cd8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>
 8007d0c:	0003      	movs	r3, r0
 8007d0e:	e010      	b.n	8007d32 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x5a>
    else if(key > node->key)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	1dba      	adds	r2, r7, #6
 8007d16:	8812      	ldrh	r2, [r2, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d909      	bls.n	8007d30 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x58>
      return FindNode(node->right, key);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	68d9      	ldr	r1, [r3, #12]
 8007d20:	1dbb      	adds	r3, r7, #6
 8007d22:	881a      	ldrh	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7ff ffd6 	bl	8007cd8 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt>
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	e000      	b.n	8007d32 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE8FindNodeEPNS4_4NodeEt+0x5a>
      return node;
 8007d30:	68bb      	ldr	r3, [r7, #8]
  }
 8007d32:	0018      	movs	r0, r3
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b004      	add	sp, #16
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::AddNode(Node* node, Node* new_node)
 8007d3a:	b590      	push	{r4, r7, lr}
 8007d3c:	b087      	sub	sp, #28
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
    if (node == nullptr)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x16>
      return new_node;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	e0a1      	b.n	8007e94 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (new_node->key < node->key)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	881a      	ldrh	r2, [r3, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d20a      	bcs.n	8007d72 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x38>
        node->left = AddNode(node->left, new_node);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	6899      	ldr	r1, [r3, #8]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	0018      	movs	r0, r3
 8007d66:	f7ff ffe8 	bl	8007d3a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>
 8007d6a:	0002      	movs	r2, r0
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	609a      	str	r2, [r3, #8]
 8007d70:	e012      	b.n	8007d98 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x5e>
    else if (new_node->key > node->key)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	881a      	ldrh	r2, [r3, #0]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d90a      	bls.n	8007d94 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x5a>
        node->right = AddNode(node->right, new_node);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	68d9      	ldr	r1, [r3, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	0018      	movs	r0, r3
 8007d88:	f7ff ffd7 	bl	8007d3a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_>
 8007d8c:	0002      	movs	r2, r0
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	60da      	str	r2, [r3, #12]
 8007d92:	e001      	b.n	8007d98 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x5e>
        return node;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	e07d      	b.n	8007e94 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    node->height = 1 + Max(Height(node->left),
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	0011      	movs	r1, r2
 8007da0:	0018      	movs	r0, r3
 8007da2:	f000 f8b3 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007da6:	0004      	movs	r4, r0
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	0011      	movs	r1, r2
 8007db0:	0018      	movs	r0, r3
 8007db2:	f000 f8ab 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007db6:	0002      	movs	r2, r0
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	0021      	movs	r1, r4
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f000 f894 	bl	8007eea <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	611a      	str	r2, [r3, #16]
    int balance = GetBalance(node);
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	0011      	movs	r1, r2
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f000 f8ab 	bl	8007f2c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE>
 8007dd6:	0003      	movs	r3, r0
 8007dd8:	617b      	str	r3, [r7, #20]
    if (balance > 1 && new_node->key < node->left->key)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	dd0e      	ble.n	8007dfe <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xc4>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	881a      	ldrh	r2, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d207      	bcs.n	8007dfe <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xc4>
        return RightRotate(node);
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	0011      	movs	r1, r2
 8007df4:	0018      	movs	r0, r3
 8007df6:	f000 f8b8 	bl	8007f6a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>
 8007dfa:	0003      	movs	r3, r0
 8007dfc:	e04a      	b.n	8007e94 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key > node->right->key)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	3301      	adds	r3, #1
 8007e02:	da0e      	bge.n	8007e22 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xe8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	881a      	ldrh	r2, [r3, #0]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d907      	bls.n	8007e22 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0xe8>
        return LeftRotate(node);
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	0011      	movs	r1, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f000 f8ee 	bl	8007ffa <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>
 8007e1e:	0003      	movs	r3, r0
 8007e20:	e038      	b.n	8007e94 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance > 1 && new_node->key > node->left->key)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	dd18      	ble.n	8007e5a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x120>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	881a      	ldrh	r2, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d911      	bls.n	8007e5a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x120>
        node->left = LeftRotate(node->left);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	0011      	movs	r1, r2
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f000 f8db 	bl	8007ffa <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>
 8007e44:	0002      	movs	r2, r0
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	609a      	str	r2, [r3, #8]
        return RightRotate(node);
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	0011      	movs	r1, r2
 8007e50:	0018      	movs	r0, r3
 8007e52:	f000 f88a 	bl	8007f6a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>
 8007e56:	0003      	movs	r3, r0
 8007e58:	e01c      	b.n	8007e94 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    if (balance < -1 && new_node->key < node->right->key)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	da18      	bge.n	8007e92 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x158>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	881a      	ldrh	r2, [r3, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d211      	bcs.n	8007e92 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x158>
        node->right = RightRotate(node->right);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	0011      	movs	r1, r2
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 f877 	bl	8007f6a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>
 8007e7c:	0002      	movs	r2, r0
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	60da      	str	r2, [r3, #12]
        return LeftRotate(node);
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	0011      	movs	r1, r2
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f000 f8b6 	bl	8007ffa <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>
 8007e8e:	0003      	movs	r3, r0
 8007e90:	e000      	b.n	8007e94 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7AddNodeEPNS4_4NodeES6_+0x15a>
    return node;
 8007e92:	68bb      	ldr	r3, [r7, #8]
  }
 8007e94:	0018      	movs	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b007      	add	sp, #28
 8007e9a:	bd90      	pop	{r4, r7, pc}

08007e9c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE7NewNodeEtPS3_>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::NewNode(KEY_T key, DATA_T* new_element)
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	200a      	movs	r0, #10
 8007ea8:	183b      	adds	r3, r7, r0
 8007eaa:	1c0a      	adds	r2, r1, #0
 8007eac:	801a      	strh	r2, [r3, #0]
      Node* node = &array[current_size_++];
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007eb2:	1c51      	adds	r1, r2, #1
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6699      	str	r1, [r3, #104]	; 0x68
 8007eb8:	0013      	movs	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	18d3      	adds	r3, r2, r3
 8007ec4:	617b      	str	r3, [r7, #20]
      node->data = new_element;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
      node->key = key;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	183a      	adds	r2, r7, r0
 8007ed0:	8812      	ldrh	r2, [r2, #0]
 8007ed2:	801a      	strh	r2, [r3, #0]
      node->left = nullptr;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	609a      	str	r2, [r3, #8]
      node->right = nullptr;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	60da      	str	r2, [r3, #12]
      return node;
 8007ee0:	697b      	ldr	r3, [r7, #20]
  }
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	b006      	add	sp, #24
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::Max(uint32_t a, uint32_t b)
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
      return (a > b)? a : b;
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d901      	bls.n	8007f02 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm+0x18>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	e000      	b.n	8007f04 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm+0x1a>
 8007f02:	687b      	ldr	r3, [r7, #4]
  }
 8007f04:	0018      	movs	r0, r3
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b004      	add	sp, #16
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::Height(Node *N)
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE+0x14>
      return 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e001      	b.n	8007f24 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE+0x18>
    return N->height;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
  }
 8007f24:	0018      	movs	r0, r3
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE>:
  uint32_t Map<KEY_T, DATA_T, SIZE>::GetBalance(Node *N)
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
    if (N == nullptr)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE+0x14>
      return 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e010      	b.n	8007f62 <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10GetBalanceEPNS4_4NodeE+0x36>
    return Height(N->left) - Height(N->right);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	0011      	movs	r1, r2
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f7ff ffdf 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007f4e:	0004      	movs	r4, r0
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	0011      	movs	r1, r2
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f7ff ffd7 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007f5e:	0003      	movs	r3, r0
 8007f60:	1ae3      	subs	r3, r4, r3
  }
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b003      	add	sp, #12
 8007f68:	bd90      	pop	{r4, r7, pc}

08007f6a <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE11RightRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::RightRotate(Node *y)
 8007f6a:	b590      	push	{r4, r7, lr}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
    Node *x = y->left;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60fb      	str	r3, [r7, #12]
    Node *T2 = x->right;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	60bb      	str	r3, [r7, #8]
    x->right = y;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	60da      	str	r2, [r3, #12]
    y->left = T2;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	609a      	str	r2, [r3, #8]
        Height(y->right)) + 1;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	0011      	movs	r1, r2
 8007f94:	0018      	movs	r0, r3
 8007f96:	f7ff ffb9 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007f9a:	0004      	movs	r4, r0
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	0011      	movs	r1, r2
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f7ff ffb1 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007faa:	0002      	movs	r2, r0
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	0021      	movs	r1, r4
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f7ff ff9a 	bl	8007eea <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8007fb6:	0003      	movs	r3, r0
 8007fb8:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	611a      	str	r2, [r3, #16]
        Height(x->right)) + 1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	0011      	movs	r1, r2
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f7ff ffa0 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007fcc:	0004      	movs	r4, r0
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	0011      	movs	r1, r2
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f7ff ff98 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 8007fdc:	0002      	movs	r2, r0
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	0021      	movs	r1, r4
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f7ff ff81 	bl	8007eea <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	611a      	str	r2, [r3, #16]
    return x;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
  }
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b005      	add	sp, #20
 8007ff8:	bd90      	pop	{r4, r7, pc}

08007ffa <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE10LeftRotateEPNS4_4NodeE>:
  typename Map<KEY_T, DATA_T, SIZE>::Node* Map<KEY_T, DATA_T, SIZE>::LeftRotate(Node *x)
 8007ffa:	b590      	push	{r4, r7, lr}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
    Node *y = x->right;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	60fb      	str	r3, [r7, #12]
    Node *T2 = y->left;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	60bb      	str	r3, [r7, #8]
    y->left = x;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	609a      	str	r2, [r3, #8]
    x->right = T2;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	60da      	str	r2, [r3, #12]
        Height(x->right)) + 1;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	0011      	movs	r1, r2
 8008024:	0018      	movs	r0, r3
 8008026:	f7ff ff71 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800802a:	0004      	movs	r4, r0
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	0011      	movs	r1, r2
 8008034:	0018      	movs	r0, r3
 8008036:	f7ff ff69 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800803a:	0002      	movs	r2, r0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	0021      	movs	r1, r4
 8008040:	0018      	movs	r0, r3
 8008042:	f7ff ff52 	bl	8007eea <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8008046:	0003      	movs	r3, r0
 8008048:	1c5a      	adds	r2, r3, #1
    x->height = Max(Height(x->left),
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	611a      	str	r2, [r3, #16]
        Height(y->right)) + 1;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	0011      	movs	r1, r2
 8008056:	0018      	movs	r0, r3
 8008058:	f7ff ff58 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800805c:	0004      	movs	r4, r0
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	0011      	movs	r1, r2
 8008066:	0018      	movs	r0, r3
 8008068:	f7ff ff50 	bl	8007f0c <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE6HeightEPNS4_4NodeE>
 800806c:	0002      	movs	r2, r0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	0021      	movs	r1, r4
 8008072:	0018      	movs	r0, r3
 8008074:	f7ff ff39 	bl	8007eea <_ZN11SolarGators10Containers3MapItNS_11DataModules10DataModuleELi5EE3MaxEmm>
 8008078:	0003      	movs	r3, r0
 800807a:	1c5a      	adds	r2, r3, #1
    y->height = Max(Height(y->left),
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	611a      	str	r2, [r3, #16]
    return y;
 8008080:	68fb      	ldr	r3, [r7, #12]
  }
 8008082:	0018      	movs	r0, r3
 8008084:	46bd      	mov	sp, r7
 8008086:	b005      	add	sp, #20
 8008088:	bd90      	pop	{r4, r7, pc}

0800808a <_ZL5Delaym>:

/*
 * Delay x ms
 */
static void Delay(unsigned long interval)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  osDelay(interval);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0018      	movs	r0, r3
 8008096:	f001 f947 	bl	8009328 <osDelay>
}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	46bd      	mov	sp, r7
 800809e:	b002      	add	sp, #8
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <_ZN5HY28bD1Ev>:
HY28b::~HY28b() {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	4a03      	ldr	r2, [pc, #12]	; (80080bc <_ZN5HY28bD1Ev+0x18>)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	601a      	str	r2, [r3, #0]
}
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	0018      	movs	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	b002      	add	sp, #8
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	0800e2bc 	.word	0x0800e2bc

080080c0 <_ZN5HY28bD0Ev>:
HY28b::~HY28b() {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
}
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	0018      	movs	r0, r3
 80080cc:	f7ff ffea 	bl	80080a4 <_ZN5HY28bD1Ev>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	210c      	movs	r1, #12
 80080d4:	0018      	movs	r0, r3
 80080d6:	f004 fe61 	bl	800cd9c <_ZdlPvj>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	0018      	movs	r0, r3
 80080de:	46bd      	mov	sp, r7
 80080e0:	b002      	add	sp, #8
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <_ZL9LCD_resetv>:
 * Output         : None
 * Return         : None
 * Attention      : Uses P10.0 for reset
 *******************************************************************************/
static void LCD_reset()
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80080e8:	2380      	movs	r3, #128	; 0x80
 80080ea:	01db      	lsls	r3, r3, #7
 80080ec:	480d      	ldr	r0, [pc, #52]	; (8008124 <_ZL9LCD_resetv+0x40>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	0019      	movs	r1, r3
 80080f2:	f7fb fe68 	bl	8003dc6 <HAL_GPIO_WritePin>
    Delay(100);
 80080f6:	2064      	movs	r0, #100	; 0x64
 80080f8:	f7ff ffc7 	bl	800808a <_ZL5Delaym>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	01db      	lsls	r3, r3, #7
 8008100:	4808      	ldr	r0, [pc, #32]	; (8008124 <_ZL9LCD_resetv+0x40>)
 8008102:	2200      	movs	r2, #0
 8008104:	0019      	movs	r1, r3
 8008106:	f7fb fe5e 	bl	8003dc6 <HAL_GPIO_WritePin>
    Delay(100);
 800810a:	2064      	movs	r0, #100	; 0x64
 800810c:	f7ff ffbd 	bl	800808a <_ZL5Delaym>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	01db      	lsls	r3, r3, #7
 8008114:	4803      	ldr	r0, [pc, #12]	; (8008124 <_ZL9LCD_resetv+0x40>)
 8008116:	2201      	movs	r2, #1
 8008118:	0019      	movs	r1, r3
 800811a:	f7fb fe54 	bl	8003dc6 <HAL_GPIO_WritePin>
}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	48000400 	.word	0x48000400

08008128 <_ZN5HY28b13DrawRectangleEsssst>:
 * Output         : None
 * Return         : None
 * Attention      : Must draw from left to right, top to bottom!
 *******************************************************************************/
inline void HY28b::DrawRectangle(int16_t xStart, int16_t xEnd, int16_t yStart, int16_t yEnd, uint16_t Color)
{
 8008128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	000c      	movs	r4, r1
 8008132:	0010      	movs	r0, r2
 8008134:	0019      	movs	r1, r3
 8008136:	250a      	movs	r5, #10
 8008138:	197b      	adds	r3, r7, r5
 800813a:	1c22      	adds	r2, r4, #0
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	2408      	movs	r4, #8
 8008140:	193b      	adds	r3, r7, r4
 8008142:	1c02      	adds	r2, r0, #0
 8008144:	801a      	strh	r2, [r3, #0]
 8008146:	1dbb      	adds	r3, r7, #6
 8008148:	1c0a      	adds	r2, r1, #0
 800814a:	801a      	strh	r2, [r3, #0]
    WriteReg(HOR_ADDR_START_POS, yStart);
 800814c:	1dbb      	adds	r3, r7, #6
 800814e:	881a      	ldrh	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2150      	movs	r1, #80	; 0x50
 8008154:	0018      	movs	r0, r3
 8008156:	f000 fa78 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(HOR_ADDR_END_POS, yEnd);
 800815a:	2628      	movs	r6, #40	; 0x28
 800815c:	2308      	movs	r3, #8
 800815e:	18fa      	adds	r2, r7, r3
 8008160:	1993      	adds	r3, r2, r6
 8008162:	881a      	ldrh	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2151      	movs	r1, #81	; 0x51
 8008168:	0018      	movs	r0, r3
 800816a:	f000 fa6e 	bl	800864a <_ZN5HY28b8WriteRegEtt>
	WriteReg(VERT_ADDR_START_POS, xStart);
 800816e:	197b      	adds	r3, r7, r5
 8008170:	881a      	ldrh	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2152      	movs	r1, #82	; 0x52
 8008176:	0018      	movs	r0, r3
 8008178:	f000 fa67 	bl	800864a <_ZN5HY28b8WriteRegEtt>
	WriteReg(VERT_ADDR_END_POS, xEnd);
 800817c:	193b      	adds	r3, r7, r4
 800817e:	881a      	ldrh	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2153      	movs	r1, #83	; 0x53
 8008184:	0018      	movs	r0, r3
 8008186:	f000 fa60 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    SetCursor(xStart, yStart);
 800818a:	197b      	adds	r3, r7, r5
 800818c:	8819      	ldrh	r1, [r3, #0]
 800818e:	1dbb      	adds	r3, r7, #6
 8008190:	881a      	ldrh	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	0018      	movs	r0, r3
 8008196:	f000 fa76 	bl	8008686 <_ZN5HY28b9SetCursorEtt>
    WriteIndex(GRAM);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2122      	movs	r1, #34	; 0x22
 800819e:	0018      	movs	r0, r3
 80081a0:	f000 f9fe 	bl	80085a0 <_ZN5HY28b10WriteIndexEt>
    SPI_CS_LOW;
 80081a4:	4b1e      	ldr	r3, [pc, #120]	; (8008220 <_ZN5HY28b13DrawRectangleEsssst+0xf8>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	2104      	movs	r1, #4
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7fb fe0b 	bl	8003dc6 <HAL_GPIO_WritePin>
    WriteDataStart();
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	0018      	movs	r0, r3
 80081b4:	f000 fa3c 	bl	8008630 <_ZN5HY28b14WriteDataStartEv>
    int total = (xEnd - xStart + 1)*(yEnd - yStart + 1);
 80081b8:	193b      	adds	r3, r7, r4
 80081ba:	2200      	movs	r2, #0
 80081bc:	5e9a      	ldrsh	r2, [r3, r2]
 80081be:	197b      	adds	r3, r7, r5
 80081c0:	2100      	movs	r1, #0
 80081c2:	5e5b      	ldrsh	r3, [r3, r1]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	2308      	movs	r3, #8
 80081ca:	18fb      	adds	r3, r7, r3
 80081cc:	199b      	adds	r3, r3, r6
 80081ce:	2100      	movs	r1, #0
 80081d0:	5e59      	ldrsh	r1, [r3, r1]
 80081d2:	1dbb      	adds	r3, r7, #6
 80081d4:	2000      	movs	r0, #0
 80081d6:	5e1b      	ldrsh	r3, [r3, r0]
 80081d8:	1acb      	subs	r3, r1, r3
 80081da:	3301      	adds	r3, #1
 80081dc:	4353      	muls	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < total; ++i)
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	da0e      	bge.n	800820a <_ZN5HY28b13DrawRectangleEsssst+0xe2>
    {
        WriteDataOnly(Color);
 80081ec:	232c      	movs	r3, #44	; 0x2c
 80081ee:	2208      	movs	r2, #8
 80081f0:	4694      	mov	ip, r2
 80081f2:	44bc      	add	ip, r7
 80081f4:	4463      	add	r3, ip
 80081f6:	881a      	ldrh	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	0011      	movs	r1, r2
 80081fc:	0018      	movs	r0, r3
 80081fe:	f000 f982 	bl	8008506 <_ZN5HY28b13WriteDataOnlyEt>
    for (int i = 0; i < total; ++i)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	3301      	adds	r3, #1
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	e7ec      	b.n	80081e4 <_ZN5HY28b13DrawRectangleEsssst+0xbc>
    }
    SPI_CS_HIGH;
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <_ZN5HY28b13DrawRectangleEsssst+0xf8>)
 800820c:	2201      	movs	r2, #1
 800820e:	2104      	movs	r1, #4
 8008210:	0018      	movs	r0, r3
 8008212:	f7fb fdd8 	bl	8003dc6 <HAL_GPIO_WritePin>
}
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	b007      	add	sp, #28
 800821c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	48000c00 	.word	0x48000c00

08008224 <_ZN5HY28b7PutCharEttht>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::PutChar( uint16_t Xpos, uint16_t Ypos, uint8_t ASCI, uint16_t charColor)
{
 8008224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008226:	b08d      	sub	sp, #52	; 0x34
 8008228:	af02      	add	r7, sp, #8
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	000c      	movs	r4, r1
 800822e:	0010      	movs	r0, r2
 8008230:	0019      	movs	r1, r3
 8008232:	230a      	movs	r3, #10
 8008234:	18fb      	adds	r3, r7, r3
 8008236:	1c22      	adds	r2, r4, #0
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	2308      	movs	r3, #8
 800823c:	18fb      	adds	r3, r7, r3
 800823e:	1c02      	adds	r2, r0, #0
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	1dfb      	adds	r3, r7, #7
 8008244:	1c0a      	adds	r2, r1, #0
 8008246:	701a      	strb	r2, [r3, #0]
    uint16_t i, j;
    uint8_t buffer[16], tmp_char;
    GetASCIICode(buffer,ASCI);  /* get font data */
 8008248:	1dfb      	adds	r3, r7, #7
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	2310      	movs	r3, #16
 800824e:	18fb      	adds	r3, r7, r3
 8008250:	0011      	movs	r1, r2
 8008252:	0018      	movs	r0, r3
 8008254:	f7ff fa1c 	bl	8007690 <_Z12GetASCIICodePhh>
    for( i=0; i<16; i++ )
 8008258:	2326      	movs	r3, #38	; 0x26
 800825a:	18fb      	adds	r3, r7, r3
 800825c:	2200      	movs	r2, #0
 800825e:	801a      	strh	r2, [r3, #0]
 8008260:	2226      	movs	r2, #38	; 0x26
 8008262:	18bb      	adds	r3, r7, r2
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d900      	bls.n	800826c <_ZN5HY28b7PutCharEttht+0x48>
 800826a:	e093      	b.n	8008394 <_ZN5HY28b7PutCharEttht+0x170>
    {
        tmp_char = buffer[i];
 800826c:	18bb      	adds	r3, r7, r2
 800826e:	881a      	ldrh	r2, [r3, #0]
 8008270:	2323      	movs	r3, #35	; 0x23
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	2110      	movs	r1, #16
 8008276:	1879      	adds	r1, r7, r1
 8008278:	5c8a      	ldrb	r2, [r1, r2]
 800827a:	701a      	strb	r2, [r3, #0]
        for( j=0; j<8; j++ )
 800827c:	2324      	movs	r3, #36	; 0x24
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	2200      	movs	r2, #0
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	2024      	movs	r0, #36	; 0x24
 8008286:	183b      	adds	r3, r7, r0
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	2b07      	cmp	r3, #7
 800828c:	d900      	bls.n	8008290 <_ZN5HY28b7PutCharEttht+0x6c>
 800828e:	e07a      	b.n	8008386 <_ZN5HY28b7PutCharEttht+0x162>
        {
            if( ((tmp_char >> (7 - j)) & 0x01) == 0x01 )
 8008290:	2323      	movs	r3, #35	; 0x23
 8008292:	18fb      	adds	r3, r7, r3
 8008294:	781a      	ldrb	r2, [r3, #0]
 8008296:	183b      	adds	r3, r7, r0
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	2107      	movs	r1, #7
 800829c:	1acb      	subs	r3, r1, r3
 800829e:	411a      	asrs	r2, r3
 80082a0:	0013      	movs	r3, r2
 80082a2:	2201      	movs	r2, #1
 80082a4:	4013      	ands	r3, r2
 80082a6:	d067      	beq.n	8008378 <_ZN5HY28b7PutCharEttht+0x154>
            {
              if(size_ == 1)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	7a1b      	ldrb	r3, [r3, #8]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d118      	bne.n	80082e2 <_ZN5HY28b7PutCharEttht+0xbe>
                SetPoint( Xpos + j, Ypos + i, charColor );  /* Character color */
 80082b0:	230a      	movs	r3, #10
 80082b2:	18fa      	adds	r2, r7, r3
 80082b4:	183b      	adds	r3, r7, r0
 80082b6:	8812      	ldrh	r2, [r2, #0]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	18d3      	adds	r3, r2, r3
 80082bc:	b299      	uxth	r1, r3
 80082be:	2308      	movs	r3, #8
 80082c0:	18fa      	adds	r2, r7, r3
 80082c2:	2326      	movs	r3, #38	; 0x26
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	8812      	ldrh	r2, [r2, #0]
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	18d3      	adds	r3, r2, r3
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	2338      	movs	r3, #56	; 0x38
 80082d0:	2008      	movs	r0, #8
 80082d2:	4684      	mov	ip, r0
 80082d4:	44bc      	add	ip, r7
 80082d6:	4463      	add	r3, ip
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f8ee 	bl	80084bc <_ZN5HY28b8SetPointEttt>
 80082e0:	e04a      	b.n	8008378 <_ZN5HY28b7PutCharEttht+0x154>
              else
              {
                DrawRectangle(Xpos + j * size_, Xpos + j * size_ + size_, Ypos + i * size_, Ypos + i * size_ + size_, charColor);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	7a1b      	ldrb	r3, [r3, #8]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2024      	movs	r0, #36	; 0x24
 80082ea:	183a      	adds	r2, r7, r0
 80082ec:	8812      	ldrh	r2, [r2, #0]
 80082ee:	4353      	muls	r3, r2
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	240a      	movs	r4, #10
 80082f4:	193b      	adds	r3, r7, r4
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	18d3      	adds	r3, r2, r3
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	b219      	sxth	r1, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	7a1b      	ldrb	r3, [r3, #8]
 8008302:	b29b      	uxth	r3, r3
 8008304:	183a      	adds	r2, r7, r0
 8008306:	8812      	ldrh	r2, [r2, #0]
 8008308:	4353      	muls	r3, r2
 800830a:	b29a      	uxth	r2, r3
 800830c:	193b      	adds	r3, r7, r4
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	18d3      	adds	r3, r2, r3
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	7a1b      	ldrb	r3, [r3, #8]
 8008318:	b29b      	uxth	r3, r3
 800831a:	18d3      	adds	r3, r2, r3
 800831c:	b29b      	uxth	r3, r3
 800831e:	b21c      	sxth	r4, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	7a1b      	ldrb	r3, [r3, #8]
 8008324:	b29b      	uxth	r3, r3
 8008326:	2026      	movs	r0, #38	; 0x26
 8008328:	183a      	adds	r2, r7, r0
 800832a:	8812      	ldrh	r2, [r2, #0]
 800832c:	4353      	muls	r3, r2
 800832e:	b29a      	uxth	r2, r3
 8008330:	2608      	movs	r6, #8
 8008332:	19bb      	adds	r3, r7, r6
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	18d3      	adds	r3, r2, r3
 8008338:	b29b      	uxth	r3, r3
 800833a:	b21d      	sxth	r5, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	7a1b      	ldrb	r3, [r3, #8]
 8008340:	b29b      	uxth	r3, r3
 8008342:	183a      	adds	r2, r7, r0
 8008344:	8812      	ldrh	r2, [r2, #0]
 8008346:	4353      	muls	r3, r2
 8008348:	b29a      	uxth	r2, r3
 800834a:	19bb      	adds	r3, r7, r6
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	18d3      	adds	r3, r2, r3
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	7a1b      	ldrb	r3, [r3, #8]
 8008356:	b29b      	uxth	r3, r3
 8008358:	18d3      	adds	r3, r2, r3
 800835a:	b29b      	uxth	r3, r3
 800835c:	b21a      	sxth	r2, r3
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	2338      	movs	r3, #56	; 0x38
 8008362:	2608      	movs	r6, #8
 8008364:	46b4      	mov	ip, r6
 8008366:	44bc      	add	ip, r7
 8008368:	4463      	add	r3, ip
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	9200      	str	r2, [sp, #0]
 8008370:	002b      	movs	r3, r5
 8008372:	0022      	movs	r2, r4
 8008374:	f7ff fed8 	bl	8008128 <_ZN5HY28b13DrawRectangleEsssst>
        for( j=0; j<8; j++ )
 8008378:	2124      	movs	r1, #36	; 0x24
 800837a:	187b      	adds	r3, r7, r1
 800837c:	881a      	ldrh	r2, [r3, #0]
 800837e:	187b      	adds	r3, r7, r1
 8008380:	3201      	adds	r2, #1
 8008382:	801a      	strh	r2, [r3, #0]
 8008384:	e77e      	b.n	8008284 <_ZN5HY28b7PutCharEttht+0x60>
    for( i=0; i<16; i++ )
 8008386:	2126      	movs	r1, #38	; 0x26
 8008388:	187b      	adds	r3, r7, r1
 800838a:	881a      	ldrh	r2, [r3, #0]
 800838c:	187b      	adds	r3, r7, r1
 800838e:	3201      	adds	r2, #1
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e765      	b.n	8008260 <_ZN5HY28b7PutCharEttht+0x3c>
              }
            }
        }
    }
}
 8008394:	46c0      	nop			; (mov r8, r8)
 8008396:	46bd      	mov	sp, r7
 8008398:	b00b      	add	sp, #44	; 0x2c
 800839a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800839c <_ZN5HY28b8DrawTextEttPht>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
void HY28b::DrawText(uint16_t Xpos, uint16_t Ypos, uint8_t *str, uint16_t Color)
{
 800839c:	b5b0      	push	{r4, r5, r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	0008      	movs	r0, r1
 80083a6:	0011      	movs	r1, r2
 80083a8:	607b      	str	r3, [r7, #4]
 80083aa:	230a      	movs	r3, #10
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	1c02      	adds	r2, r0, #0
 80083b0:	801a      	strh	r2, [r3, #0]
 80083b2:	2308      	movs	r3, #8
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	1c0a      	adds	r2, r1, #0
 80083b8:	801a      	strh	r2, [r3, #0]
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    WriteReg(HOR_ADDR_START_POS, 0x0000);     /* Horizontal GRAM Start Address */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	2150      	movs	r1, #80	; 0x50
 80083c0:	0018      	movs	r0, r3
 80083c2:	f000 f942 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(HOR_ADDR_END_POS, (MAX_SCREEN_Y - 1));  /* Horizontal GRAM End Address */
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	22ef      	movs	r2, #239	; 0xef
 80083ca:	2151      	movs	r1, #81	; 0x51
 80083cc:	0018      	movs	r0, r3
 80083ce:	f000 f93c 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_START_POS, 0x0000);    /* Vertical GRAM Start Address */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	2152      	movs	r1, #82	; 0x52
 80083d8:	0018      	movs	r0, r3
 80083da:	f000 f936 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_END_POS, (MAX_SCREEN_X - 1)); /* Vertical GRAM Start Address */
 80083de:	2340      	movs	r3, #64	; 0x40
 80083e0:	33ff      	adds	r3, #255	; 0xff
 80083e2:	001a      	movs	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2153      	movs	r1, #83	; 0x53
 80083e8:	0018      	movs	r0, r3
 80083ea:	f000 f92e 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    do
    {
        TempChar = *str++;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	2117      	movs	r1, #23
 80083f6:	187a      	adds	r2, r7, r1
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	7013      	strb	r3, [r2, #0]
        PutChar( Xpos, Ypos, TempChar, Color);
 80083fc:	187b      	adds	r3, r7, r1
 80083fe:	781c      	ldrb	r4, [r3, #0]
 8008400:	2308      	movs	r3, #8
 8008402:	18fb      	adds	r3, r7, r3
 8008404:	881a      	ldrh	r2, [r3, #0]
 8008406:	250a      	movs	r5, #10
 8008408:	197b      	adds	r3, r7, r5
 800840a:	8819      	ldrh	r1, [r3, #0]
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	2328      	movs	r3, #40	; 0x28
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	0023      	movs	r3, r4
 8008418:	f7ff ff04 	bl	8008224 <_ZN5HY28b7PutCharEttht>
        if( Xpos < MAX_SCREEN_X - 8)
 800841c:	0028      	movs	r0, r5
 800841e:	183b      	adds	r3, r7, r0
 8008420:	881a      	ldrh	r2, [r3, #0]
 8008422:	239c      	movs	r3, #156	; 0x9c
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	429a      	cmp	r2, r3
 8008428:	d20a      	bcs.n	8008440 <_ZN5HY28b8DrawTextEttPht+0xa4>
        {
            Xpos += (8 * size_);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	7a1b      	ldrb	r3, [r3, #8]
 800842e:	b29b      	uxth	r3, r3
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	b299      	uxth	r1, r3
 8008434:	183b      	adds	r3, r7, r0
 8008436:	183a      	adds	r2, r7, r0
 8008438:	8812      	ldrh	r2, [r2, #0]
 800843a:	188a      	adds	r2, r1, r2
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	e01d      	b.n	800847c <_ZN5HY28b8DrawTextEttPht+0xe0>
        }
        else if ( Ypos < MAX_SCREEN_X - 16)
 8008440:	2008      	movs	r0, #8
 8008442:	183b      	adds	r3, r7, r0
 8008444:	881a      	ldrh	r2, [r3, #0]
 8008446:	2398      	movs	r3, #152	; 0x98
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	429a      	cmp	r2, r3
 800844c:	d20e      	bcs.n	800846c <_ZN5HY28b8DrawTextEttPht+0xd0>
        {
            Xpos = 0;
 800844e:	230a      	movs	r3, #10
 8008450:	18fb      	adds	r3, r7, r3
 8008452:	2200      	movs	r2, #0
 8008454:	801a      	strh	r2, [r3, #0]
            Ypos += (16 * size_);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	7a1b      	ldrb	r3, [r3, #8]
 800845a:	b29b      	uxth	r3, r3
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	b299      	uxth	r1, r3
 8008460:	183b      	adds	r3, r7, r0
 8008462:	183a      	adds	r2, r7, r0
 8008464:	8812      	ldrh	r2, [r2, #0]
 8008466:	188a      	adds	r2, r1, r2
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	e007      	b.n	800847c <_ZN5HY28b8DrawTextEttPht+0xe0>
        }
        else
        {
            Xpos = 0;
 800846c:	230a      	movs	r3, #10
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	2200      	movs	r2, #0
 8008472:	801a      	strh	r2, [r3, #0]
            Ypos = 0;
 8008474:	2308      	movs	r3, #8
 8008476:	18fb      	adds	r3, r7, r3
 8008478:	2200      	movs	r2, #0
 800847a:	801a      	strh	r2, [r3, #0]
        }
    }
    while ( *str != 0 );
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d000      	beq.n	8008486 <_ZN5HY28b8DrawTextEttPht+0xea>
    do
 8008484:	e7b3      	b.n	80083ee <_ZN5HY28b8DrawTextEttPht+0x52>
}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	b006      	add	sp, #24
 800848c:	bdb0      	pop	{r4, r5, r7, pc}

0800848e <_ZN5HY28b5ClearEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::Clear(uint16_t Color)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af02      	add	r7, sp, #8
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	000a      	movs	r2, r1
 8008498:	1cbb      	adds	r3, r7, #2
 800849a:	801a      	strh	r2, [r3, #0]
    DrawRectangle(0, MAX_SCREEN_X, 0, MAX_SCREEN_Y, Color);
 800849c:	23a0      	movs	r3, #160	; 0xa0
 800849e:	005a      	lsls	r2, r3, #1
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	1cbb      	adds	r3, r7, #2
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	23f0      	movs	r3, #240	; 0xf0
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	2300      	movs	r3, #0
 80084ae:	2100      	movs	r1, #0
 80084b0:	f7ff fe3a 	bl	8008128 <_ZN5HY28b13DrawRectangleEsssst>
}
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b002      	add	sp, #8
 80084ba:	bd80      	pop	{r7, pc}

080084bc <_ZN5HY28b8SetPointEttt>:
 * Output         : None
 * Return         : None
 * Attention      : 18N Bytes Written
 *******************************************************************************/
void HY28b::SetPoint(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 80084bc:	b5b0      	push	{r4, r5, r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	000c      	movs	r4, r1
 80084c6:	0010      	movs	r0, r2
 80084c8:	0019      	movs	r1, r3
 80084ca:	250a      	movs	r5, #10
 80084cc:	197b      	adds	r3, r7, r5
 80084ce:	1c22      	adds	r2, r4, #0
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	2408      	movs	r4, #8
 80084d4:	193b      	adds	r3, r7, r4
 80084d6:	1c02      	adds	r2, r0, #0
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	1dbb      	adds	r3, r7, #6
 80084dc:	1c0a      	adds	r2, r1, #0
 80084de:	801a      	strh	r2, [r3, #0]
    SetCursor(Xpos, Ypos);
 80084e0:	193b      	adds	r3, r7, r4
 80084e2:	881a      	ldrh	r2, [r3, #0]
 80084e4:	197b      	adds	r3, r7, r5
 80084e6:	8819      	ldrh	r1, [r3, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 f8cb 	bl	8008686 <_ZN5HY28b9SetCursorEtt>
    WriteReg(GRAM, color);
 80084f0:	1dbb      	adds	r3, r7, #6
 80084f2:	881a      	ldrh	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2122      	movs	r1, #34	; 0x22
 80084f8:	0018      	movs	r0, r3
 80084fa:	f000 f8a6 	bl	800864a <_ZN5HY28b8WriteRegEtt>
}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b004      	add	sp, #16
 8008504:	bdb0      	pop	{r4, r5, r7, pc}

08008506 <_ZN5HY28b13WriteDataOnlyEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteDataOnly(uint16_t data)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	000a      	movs	r2, r1
 8008510:	1cbb      	adds	r3, r7, #2
 8008512:	801a      	strh	r2, [r3, #0]
    SPISendRecvByte((data >>   8));                    /* Write D8..D15                */
 8008514:	1cbb      	adds	r3, r7, #2
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	121b      	asrs	r3, r3, #8
 800851a:	b2da      	uxtb	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	0011      	movs	r1, r2
 8008520:	0018      	movs	r0, r3
 8008522:	f000 f869 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte((data & 0xFF));                    /* Write D0..D7                 */
 8008526:	1cbb      	adds	r3, r7, #2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	0011      	movs	r1, r2
 8008530:	0018      	movs	r0, r3
 8008532:	f000 f861 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>
}
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	46bd      	mov	sp, r7
 800853a:	b002      	add	sp, #8
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <_ZN5HY28b9WriteDataEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteData(uint16_t data)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	000a      	movs	r2, r1
 800854a:	1cbb      	adds	r3, r7, #2
 800854c:	801a      	strh	r2, [r3, #0]
    SPI_CS_LOW;
 800854e:	4b13      	ldr	r3, [pc, #76]	; (800859c <_ZN5HY28b9WriteDataEt+0x5c>)
 8008550:	2200      	movs	r2, #0
 8008552:	2104      	movs	r1, #4
 8008554:	0018      	movs	r0, r3
 8008556:	f7fb fc36 	bl	8003dc6 <HAL_GPIO_WritePin>

    SPISendRecvByte(SPI_START | SPI_WR | SPI_DATA);    /* Write : RS = 1, RW = 0       */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2172      	movs	r1, #114	; 0x72
 800855e:	0018      	movs	r0, r3
 8008560:	f000 f84a 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte((data >>   8));                    /* Write D8..D15                */
 8008564:	1cbb      	adds	r3, r7, #2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	121b      	asrs	r3, r3, #8
 800856a:	b2da      	uxtb	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	0011      	movs	r1, r2
 8008570:	0018      	movs	r0, r3
 8008572:	f000 f841 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte((data & 0xFF));                    /* Write D0..D7                 */
 8008576:	1cbb      	adds	r3, r7, #2
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	0011      	movs	r1, r2
 8008580:	0018      	movs	r0, r3
 8008582:	f000 f839 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>

    SPI_CS_HIGH;
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <_ZN5HY28b9WriteDataEt+0x5c>)
 8008588:	2201      	movs	r2, #1
 800858a:	2104      	movs	r1, #4
 800858c:	0018      	movs	r0, r3
 800858e:	f7fb fc1a 	bl	8003dc6 <HAL_GPIO_WritePin>
}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	46bd      	mov	sp, r7
 8008596:	b002      	add	sp, #8
 8008598:	bd80      	pop	{r7, pc}
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	48000c00 	.word	0x48000c00

080085a0 <_ZN5HY28b10WriteIndexEt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteIndex(uint16_t index)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	000a      	movs	r2, r1
 80085aa:	1cbb      	adds	r3, r7, #2
 80085ac:	801a      	strh	r2, [r3, #0]
    SPI_CS_LOW;
 80085ae:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <_ZN5HY28b10WriteIndexEt+0x54>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	2104      	movs	r1, #4
 80085b4:	0018      	movs	r0, r3
 80085b6:	f7fb fc06 	bl	8003dc6 <HAL_GPIO_WritePin>

    /* SPI write data */
    SPISendRecvByte(SPI_START | SPI_WR | SPI_INDEX);   /* Write : RS = 0, RW = 0  */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2170      	movs	r1, #112	; 0x70
 80085be:	0018      	movs	r0, r3
 80085c0:	f000 f81a 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte(0);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2100      	movs	r1, #0
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 f815 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>
    SPISendRecvByte(index);
 80085ce:	1cbb      	adds	r3, r7, #2
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	0011      	movs	r1, r2
 80085d8:	0018      	movs	r0, r3
 80085da:	f000 f80d 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>

    SPI_CS_HIGH;
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <_ZN5HY28b10WriteIndexEt+0x54>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	2104      	movs	r1, #4
 80085e4:	0018      	movs	r0, r3
 80085e6:	f7fb fbee 	bl	8003dc6 <HAL_GPIO_WritePin>
}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	46bd      	mov	sp, r7
 80085ee:	b002      	add	sp, #8
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	48000c00 	.word	0x48000c00

080085f8 <_ZN5HY28b15SPISendRecvByteEh>:
 * Output         : None
 * Return         : Recieved value
 * Attention      : None
 *******************************************************************************/
inline uint8_t HY28b::SPISendRecvByte (uint8_t byte)
{
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	000a      	movs	r2, r1
 8008602:	1cfb      	adds	r3, r7, #3
 8008604:	701a      	strb	r2, [r3, #0]
	uint8_t rxData = 0;
 8008606:	210f      	movs	r1, #15
 8008608:	187b      	adds	r3, r7, r1
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(this->spi, &byte, &rxData, 1, HAL_MAX_DELAY);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6858      	ldr	r0, [r3, #4]
 8008612:	000c      	movs	r4, r1
 8008614:	187a      	adds	r2, r7, r1
 8008616:	1cf9      	adds	r1, r7, #3
 8008618:	2301      	movs	r3, #1
 800861a:	425b      	negs	r3, r3
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	2301      	movs	r3, #1
 8008620:	f7fc fc40 	bl	8004ea4 <HAL_SPI_TransmitReceive>
    return rxData;
 8008624:	193b      	adds	r3, r7, r4
 8008626:	781b      	ldrb	r3, [r3, #0]
}
 8008628:	0018      	movs	r0, r3
 800862a:	46bd      	mov	sp, r7
 800862c:	b005      	add	sp, #20
 800862e:	bd90      	pop	{r4, r7, pc}

08008630 <_ZN5HY28b14WriteDataStartEv>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteDataStart(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
    SPISendRecvByte(SPI_START | SPI_WR | SPI_DATA);    /* Write : RS = 1, RW = 0 */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2172      	movs	r1, #114	; 0x72
 800863c:	0018      	movs	r0, r3
 800863e:	f7ff ffdb 	bl	80085f8 <_ZN5HY28b15SPISendRecvByteEh>
}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	46bd      	mov	sp, r7
 8008646:	b002      	add	sp, #8
 8008648:	bd80      	pop	{r7, pc}

0800864a <_ZN5HY28b8WriteRegEtt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	0008      	movs	r0, r1
 8008654:	0011      	movs	r1, r2
 8008656:	1cbb      	adds	r3, r7, #2
 8008658:	1c02      	adds	r2, r0, #0
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	003b      	movs	r3, r7
 800865e:	1c0a      	adds	r2, r1, #0
 8008660:	801a      	strh	r2, [r3, #0]
    WriteIndex(LCD_Reg);
 8008662:	1cbb      	adds	r3, r7, #2
 8008664:	881a      	ldrh	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	0011      	movs	r1, r2
 800866a:	0018      	movs	r0, r3
 800866c:	f7ff ff98 	bl	80085a0 <_ZN5HY28b10WriteIndexEt>
    WriteData(LCD_RegValue);
 8008670:	003b      	movs	r3, r7
 8008672:	881a      	ldrh	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	0011      	movs	r1, r2
 8008678:	0018      	movs	r0, r3
 800867a:	f7ff ff61 	bl	8008540 <_ZN5HY28b9WriteDataEt>
}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	46bd      	mov	sp, r7
 8008682:	b002      	add	sp, #8
 8008684:	bd80      	pop	{r7, pc}

08008686 <_ZN5HY28b9SetCursorEtt>:
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
inline void HY28b::SetCursor(uint16_t Xpos, uint16_t Ypos )
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	0008      	movs	r0, r1
 8008690:	0011      	movs	r1, r2
 8008692:	1cbb      	adds	r3, r7, #2
 8008694:	1c02      	adds	r2, r0, #0
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	003b      	movs	r3, r7
 800869a:	1c0a      	adds	r2, r1, #0
 800869c:	801a      	strh	r2, [r3, #0]
    WriteReg(GRAM_HORIZONTAL_ADDRESS_SET, Ypos);
 800869e:	003b      	movs	r3, r7
 80086a0:	881a      	ldrh	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2120      	movs	r1, #32
 80086a6:	0018      	movs	r0, r3
 80086a8:	f7ff ffcf 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GRAM_VERTICAL_ADDRESS_SET, Xpos);
 80086ac:	1cbb      	adds	r3, r7, #2
 80086ae:	881a      	ldrh	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2121      	movs	r1, #33	; 0x21
 80086b4:	0018      	movs	r0, r3
 80086b6:	f7ff ffc8 	bl	800864a <_ZN5HY28b8WriteRegEtt>
}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	46bd      	mov	sp, r7
 80086be:	b002      	add	sp, #8
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb>:
 * Input          : bool usingTP: determines whether or not to enable TP interrupt
 * Output         : None
 * Return         : None
 * Attention      : None
 *******************************************************************************/
HY28b::HY28b(SPI_HandleTypeDef* hspi, bool usingTP):spi{hspi}
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	1dfb      	adds	r3, r7, #7
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	4ab3      	ldr	r2, [pc, #716]	; (80089a0 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2dc>)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	605a      	str	r2, [r3, #4]
{
  size_ = 1;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2201      	movs	r2, #1
 80086e2:	721a      	strb	r2, [r3, #8]
	SPI_CS_HIGH;
 80086e4:	4baf      	ldr	r3, [pc, #700]	; (80089a4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2e0>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	2104      	movs	r1, #4
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7fb fb6b 	bl	8003dc6 <HAL_GPIO_WritePin>
	SPI_CS_TP_HIGH;
 80086f0:	4bad      	ldr	r3, [pc, #692]	; (80089a8 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2e4>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	2140      	movs	r1, #64	; 0x40
 80086f6:	0018      	movs	r0, r3
 80086f8:	f7fb fb65 	bl	8003dc6 <HAL_GPIO_WritePin>
//        P4->IFG &= ~BIT0;
//        P4->IE |= BIT0;
//        P4->IES |= BIT0;
    }

    LCD_reset();
 80086fc:	f7ff fcf2 	bl	80080e4 <_ZL9LCD_resetv>

    WriteReg(0xE5, 0x78F0);                             /* set SRAM internal timing */
 8008700:	4aaa      	ldr	r2, [pc, #680]	; (80089ac <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2e8>)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	21e5      	movs	r1, #229	; 0xe5
 8008706:	0018      	movs	r0, r3
 8008708:	f7ff ff9f 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DRIVER_OUTPUT_CONTROL, 0x0100);            /* set Driver Output Control */
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	005a      	lsls	r2, r3, #1
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2101      	movs	r1, #1
 8008714:	0018      	movs	r0, r3
 8008716:	f7ff ff98 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DRIVING_WAVE_CONTROL, 0x0700);             /* set 1 line inversion */
 800871a:	23e0      	movs	r3, #224	; 0xe0
 800871c:	00da      	lsls	r2, r3, #3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2102      	movs	r1, #2
 8008722:	0018      	movs	r0, r3
 8008724:	f7ff ff91 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(ENTRY_MODE, 0x1038);                       /* set GRAM write direction and BGR=1 */
 8008728:	4aa1      	ldr	r2, [pc, #644]	; (80089b0 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2ec>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2103      	movs	r1, #3
 800872e:	0018      	movs	r0, r3
 8008730:	f7ff ff8b 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(RESIZING_CONTROL, 0x0000);                 /* Resize register */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	2104      	movs	r1, #4
 800873a:	0018      	movs	r0, r3
 800873c:	f7ff ff85 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_2, 0x0207);                /* set the back porch and front porch */
 8008740:	4a9c      	ldr	r2, [pc, #624]	; (80089b4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2f0>)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2108      	movs	r1, #8
 8008746:	0018      	movs	r0, r3
 8008748:	f7ff ff7f 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_3, 0x0000);                /* set non-display area refresh cycle ISC[3:0] */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	2109      	movs	r1, #9
 8008752:	0018      	movs	r0, r3
 8008754:	f7ff ff79 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_4, 0x0000);                /* FMARK function */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	210a      	movs	r1, #10
 800875e:	0018      	movs	r0, r3
 8008760:	f7ff ff73 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(RGB_DISPLAY_INTERFACE_CONTROL_1, 0x0000);  /* RGB interface setting */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	210c      	movs	r1, #12
 800876a:	0018      	movs	r0, r3
 800876c:	f7ff ff6d 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(FRAME_MARKER_POSITION, 0x0000);            /* Frame marker Position */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	210d      	movs	r1, #13
 8008776:	0018      	movs	r0, r3
 8008778:	f7ff ff67 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(RGB_DISPLAY_INTERFACE_CONTROL_2, 0x0000);  /* RGB interface polarity */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	210f      	movs	r1, #15
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff ff61 	bl	800864a <_ZN5HY28b8WriteRegEtt>

    /* Power On sequence */
    WriteReg(POWER_CONTROL_1, 0x0000);        /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	2110      	movs	r1, #16
 800878e:	0018      	movs	r0, r3
 8008790:	f7ff ff5b 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_2, 0x0007);        /* DC1[2:0], DC0[2:0], VC[2:0] */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2207      	movs	r2, #7
 8008798:	2111      	movs	r1, #17
 800879a:	0018      	movs	r0, r3
 800879c:	f7ff ff55 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_3, 0x0000);        /* VREG1OUT voltage */
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	2112      	movs	r1, #18
 80087a6:	0018      	movs	r0, r3
 80087a8:	f7ff ff4f 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_4, 0x0000);        /* VDV[4:0] for VCOM amplitude */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	2113      	movs	r1, #19
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7ff ff49 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_1, 0x0001);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	2107      	movs	r1, #7
 80087be:	0018      	movs	r0, r3
 80087c0:	f7ff ff43 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    Delay(200);
 80087c4:	20c8      	movs	r0, #200	; 0xc8
 80087c6:	f7ff fc60 	bl	800808a <_ZL5Delaym>

    /* Dis-charge capacitor power voltage */
    WriteReg(POWER_CONTROL_1, 0x1090);              /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80087ca:	4a7b      	ldr	r2, [pc, #492]	; (80089b8 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2f4>)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2110      	movs	r1, #16
 80087d0:	0018      	movs	r0, r3
 80087d2:	f7ff ff3a 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_2, 0x0227);              /* Set DC1[2:0], DC0[2:0], VC[2:0] */
 80087d6:	4a79      	ldr	r2, [pc, #484]	; (80089bc <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2f8>)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2111      	movs	r1, #17
 80087dc:	0018      	movs	r0, r3
 80087de:	f7ff ff34 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    Delay(50);                                      /* Delay 50ms */
 80087e2:	2032      	movs	r0, #50	; 0x32
 80087e4:	f7ff fc51 	bl	800808a <_ZL5Delaym>
    WriteReg(POWER_CONTROL_3, 0x001F);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	221f      	movs	r2, #31
 80087ec:	2112      	movs	r1, #18
 80087ee:	0018      	movs	r0, r3
 80087f0:	f7ff ff2b 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    Delay(50);                                      /* Delay 50ms */
 80087f4:	2032      	movs	r0, #50	; 0x32
 80087f6:	f7ff fc48 	bl	800808a <_ZL5Delaym>
    WriteReg(POWER_CONTROL_4, 0x1500);              /* VDV[4:0] for VCOM amplitude */
 80087fa:	23a8      	movs	r3, #168	; 0xa8
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2113      	movs	r1, #19
 8008802:	0018      	movs	r0, r3
 8008804:	f7ff ff21 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(POWER_CONTROL_7, 0x0027);              /* 04 VCM[5:0] for VCOMH */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2227      	movs	r2, #39	; 0x27
 800880c:	2129      	movs	r1, #41	; 0x29
 800880e:	0018      	movs	r0, r3
 8008810:	f7ff ff1b 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(FRAME_RATE_AND_COLOR_CONTROL, 0x000D); /* Set Frame Rate */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	220d      	movs	r2, #13
 8008818:	212b      	movs	r1, #43	; 0x2b
 800881a:	0018      	movs	r0, r3
 800881c:	f7ff ff15 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    Delay(50);                                      /* Delay 50ms */
 8008820:	2032      	movs	r0, #50	; 0x32
 8008822:	f7ff fc32 	bl	800808a <_ZL5Delaym>
    WriteReg(GRAM_HORIZONTAL_ADDRESS_SET, 0x0000);  /* GRAM horizontal Address */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	2120      	movs	r1, #32
 800882c:	0018      	movs	r0, r3
 800882e:	f7ff ff0c 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GRAM_VERTICAL_ADDRESS_SET, 0x0000);    /* GRAM Vertical Address */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	2121      	movs	r1, #33	; 0x21
 8008838:	0018      	movs	r0, r3
 800883a:	f7ff ff06 	bl	800864a <_ZN5HY28b8WriteRegEtt>

    /* Adjust the Gamma Curve */
    WriteReg(GAMMA_CONTROL_1,    0x0000);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	2130      	movs	r1, #48	; 0x30
 8008844:	0018      	movs	r0, r3
 8008846:	f7ff ff00 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_2,    0x0707);
 800884a:	4a5d      	ldr	r2, [pc, #372]	; (80089c0 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2fc>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2131      	movs	r1, #49	; 0x31
 8008850:	0018      	movs	r0, r3
 8008852:	f7ff fefa 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_3,    0x0307);
 8008856:	4a5b      	ldr	r2, [pc, #364]	; (80089c4 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x300>)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2132      	movs	r1, #50	; 0x32
 800885c:	0018      	movs	r0, r3
 800885e:	f7ff fef4 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_4,    0x0200);
 8008862:	2380      	movs	r3, #128	; 0x80
 8008864:	009a      	lsls	r2, r3, #2
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2135      	movs	r1, #53	; 0x35
 800886a:	0018      	movs	r0, r3
 800886c:	f7ff feed 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_5,    0x0008);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2208      	movs	r2, #8
 8008874:	2136      	movs	r1, #54	; 0x36
 8008876:	0018      	movs	r0, r3
 8008878:	f7ff fee7 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_6,    0x0004);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2204      	movs	r2, #4
 8008880:	2137      	movs	r1, #55	; 0x37
 8008882:	0018      	movs	r0, r3
 8008884:	f7ff fee1 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_7,    0x0000);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	2138      	movs	r1, #56	; 0x38
 800888e:	0018      	movs	r0, r3
 8008890:	f7ff fedb 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_8,    0x0707);
 8008894:	4a4a      	ldr	r2, [pc, #296]	; (80089c0 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x2fc>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2139      	movs	r1, #57	; 0x39
 800889a:	0018      	movs	r0, r3
 800889c:	f7ff fed5 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_9,    0x0002);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2202      	movs	r2, #2
 80088a4:	213c      	movs	r1, #60	; 0x3c
 80088a6:	0018      	movs	r0, r3
 80088a8:	f7ff fecf 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GAMMA_CONTROL_10,   0x1D04);
 80088ac:	4a46      	ldr	r2, [pc, #280]	; (80089c8 <_ZN5HY28bC1EP19__SPI_HandleTypeDefb+0x304>)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	213d      	movs	r1, #61	; 0x3d
 80088b2:	0018      	movs	r0, r3
 80088b4:	f7ff fec9 	bl	800864a <_ZN5HY28b8WriteRegEtt>

    /* Set GRAM area */
    WriteReg(HOR_ADDR_START_POS, 0x0000);             /* Horizontal GRAM Start Address */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	2150      	movs	r1, #80	; 0x50
 80088be:	0018      	movs	r0, r3
 80088c0:	f7ff fec3 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(HOR_ADDR_END_POS, (MAX_SCREEN_Y - 1));   /* Horizontal GRAM End Address */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	22ef      	movs	r2, #239	; 0xef
 80088c8:	2151      	movs	r1, #81	; 0x51
 80088ca:	0018      	movs	r0, r3
 80088cc:	f7ff febd 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_START_POS, 0x0000);            /* Vertical GRAM Start Address */
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	2152      	movs	r1, #82	; 0x52
 80088d6:	0018      	movs	r0, r3
 80088d8:	f7ff feb7 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(VERT_ADDR_END_POS, (MAX_SCREEN_X - 1));  /* Vertical GRAM Start Address */
 80088dc:	2340      	movs	r3, #64	; 0x40
 80088de:	33ff      	adds	r3, #255	; 0xff
 80088e0:	001a      	movs	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2153      	movs	r1, #83	; 0x53
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7ff feaf 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GATE_SCAN_CONTROL_0X60, 0x2700);         /* Gate Scan Line */
 80088ec:	239c      	movs	r3, #156	; 0x9c
 80088ee:	019a      	lsls	r2, r3, #6
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2160      	movs	r1, #96	; 0x60
 80088f4:	0018      	movs	r0, r3
 80088f6:	f7ff fea8 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GATE_SCAN_CONTROL_0X61, 0x0001);         /* NDL,VLE, REV */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	2161      	movs	r1, #97	; 0x61
 8008900:	0018      	movs	r0, r3
 8008902:	f7ff fea2 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(GATE_SCAN_CONTROL_0X6A, 0x0000);         /* set scrolling line */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	216a      	movs	r1, #106	; 0x6a
 800890c:	0018      	movs	r0, r3
 800890e:	f7ff fe9c 	bl	800864a <_ZN5HY28b8WriteRegEtt>

    /* Partial Display Control */
    WriteReg(PART_IMAGE_1_DISPLAY_POS, 0x0000);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	2180      	movs	r1, #128	; 0x80
 8008918:	0018      	movs	r0, r3
 800891a:	f7ff fe96 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_1_START_END_ADDR_0x81, 0x0000);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	2181      	movs	r1, #129	; 0x81
 8008924:	0018      	movs	r0, r3
 8008926:	f7ff fe90 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_1_START_END_ADDR_0x82, 0x0000);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	2181      	movs	r1, #129	; 0x81
 8008930:	0018      	movs	r0, r3
 8008932:	f7ff fe8a 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMAGE_2_DISPLAY_POS, 0x0000);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	2183      	movs	r1, #131	; 0x83
 800893c:	0018      	movs	r0, r3
 800893e:	f7ff fe84 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_2_START_END_ADDR_0x84, 0x0000);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	2184      	movs	r1, #132	; 0x84
 8008948:	0018      	movs	r0, r3
 800894a:	f7ff fe7e 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PART_IMG_2_START_END_ADDR_0x85, 0x0000);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	2185      	movs	r1, #133	; 0x85
 8008954:	0018      	movs	r0, r3
 8008956:	f7ff fe78 	bl	800864a <_ZN5HY28b8WriteRegEtt>

    /* Panel Control */
    WriteReg(PANEL_ITERFACE_CONTROL_1, 0x0010);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2210      	movs	r2, #16
 800895e:	2190      	movs	r1, #144	; 0x90
 8008960:	0018      	movs	r0, r3
 8008962:	f7ff fe72 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(PANEL_ITERFACE_CONTROL_2, 0x0600);
 8008966:	23c0      	movs	r3, #192	; 0xc0
 8008968:	00da      	lsls	r2, r3, #3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2192      	movs	r1, #146	; 0x92
 800896e:	0018      	movs	r0, r3
 8008970:	f7ff fe6b 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    WriteReg(DISPLAY_CONTROL_1, 0x0133); /* 262K color and display ON */
 8008974:	2334      	movs	r3, #52	; 0x34
 8008976:	33ff      	adds	r3, #255	; 0xff
 8008978:	001a      	movs	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2107      	movs	r1, #7
 800897e:	0018      	movs	r0, r3
 8008980:	f7ff fe63 	bl	800864a <_ZN5HY28b8WriteRegEtt>
    Delay(50); /* delay 50 ms */
 8008984:	2032      	movs	r0, #50	; 0x32
 8008986:	f7ff fb80 	bl	800808a <_ZL5Delaym>

    Clear(HY28b::BLACK);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2100      	movs	r1, #0
 800898e:	0018      	movs	r0, r3
 8008990:	f7ff fd7d 	bl	800848e <_ZN5HY28b5ClearEt>
}
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	0018      	movs	r0, r3
 8008998:	46bd      	mov	sp, r7
 800899a:	b004      	add	sp, #16
 800899c:	bd80      	pop	{r7, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	0800e2bc 	.word	0x0800e2bc
 80089a4:	48000c00 	.word	0x48000c00
 80089a8:	48000400 	.word	0x48000400
 80089ac:	000078f0 	.word	0x000078f0
 80089b0:	00001038 	.word	0x00001038
 80089b4:	00000207 	.word	0x00000207
 80089b8:	00001090 	.word	0x00001090
 80089bc:	00000227 	.word	0x00000227
 80089c0:	00000707 	.word	0x00000707
 80089c4:	00000307 	.word	0x00000307
 80089c8:	00001d04 	.word	0x00001d04

080089cc <_ZN5HY28b7SetSizeEh>:
//    touchPoint.y = ((float)TP_ReadReg(CHY)/0xFFF)*(MAX_SCREEN_Y - 1);
    return touchPoint;
}

void HY28b::SetSize(uint8_t size)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	000a      	movs	r2, r1
 80089d6:	1cfb      	adds	r3, r7, #3
 80089d8:	701a      	strb	r2, [r3, #0]
  size_ = size;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	1cfa      	adds	r2, r7, #3
 80089de:	7812      	ldrb	r2, [r2, #0]
 80089e0:	721a      	strb	r2, [r3, #8]
}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b002      	add	sp, #8
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>:

#include <LED.hpp>

namespace SolarGators::Drivers {

LED::LED(const char* name, GPIO_TypeDef* port, uint16_t pin):on_(false), name_(name), port_(port), pin_(pin)
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	001a      	movs	r2, r3
 80089fa:	1cbb      	adds	r3, r7, #2
 80089fc:	801a      	strh	r2, [r3, #0]
 80089fe:	4a0c      	ldr	r2, [pc, #48]	; (8008a30 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft+0x44>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	711a      	strb	r2, [r3, #4]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	609a      	str	r2, [r3, #8]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	60da      	str	r2, [r3, #12]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1cba      	adds	r2, r7, #2
 8008a1a:	8812      	ldrh	r2, [r2, #0]
 8008a1c:	821a      	strh	r2, [r3, #16]
{
  TurnOff();
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	0018      	movs	r0, r3
 8008a22:	f000 f827 	bl	8008a74 <_ZN11SolarGators7Drivers3LED7TurnOffEv>
}
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	0018      	movs	r0, r3
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	b004      	add	sp, #16
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	0800e2cc 	.word	0x0800e2cc

08008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>:

LED::~LED()
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	4a03      	ldr	r2, [pc, #12]	; (8008a4c <_ZN11SolarGators7Drivers3LEDD1Ev+0x18>)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	601a      	str	r2, [r3, #0]
{

}
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	0018      	movs	r0, r3
 8008a46:	46bd      	mov	sp, r7
 8008a48:	b002      	add	sp, #8
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	0800e2cc 	.word	0x0800e2cc

08008a50 <_ZN11SolarGators7Drivers3LEDD0Ev>:
LED::~LED()
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
}
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f7ff ffea 	bl	8008a34 <_ZN11SolarGators7Drivers3LEDD1Ev>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2114      	movs	r1, #20
 8008a64:	0018      	movs	r0, r3
 8008a66:	f004 f999 	bl	800cd9c <_ZdlPvj>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	b002      	add	sp, #8
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <_ZN11SolarGators7Drivers3LED7TurnOffEv>:
{
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_SET);
  on_ = true;
}
void LED::TurnOff()
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_RESET);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68d8      	ldr	r0, [r3, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8a1b      	ldrh	r3, [r3, #16]
 8008a84:	2200      	movs	r2, #0
 8008a86:	0019      	movs	r1, r3
 8008a88:	f7fb f99d 	bl	8003dc6 <HAL_GPIO_WritePin>
  on_ = false;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	711a      	strb	r2, [r3, #4]
}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	46bd      	mov	sp, r7
 8008a96:	b002      	add	sp, #8
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <_ZN11SolarGators7Drivers3LED6ToggleEv>:
void LED::Toggle()
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(port_, pin_);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	8a1b      	ldrh	r3, [r3, #16]
 8008aaa:	0019      	movs	r1, r3
 8008aac:	0010      	movs	r0, r2
 8008aae:	f7fb f9a7 	bl	8003e00 <HAL_GPIO_TogglePin>
  on_ = !on_;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	791b      	ldrb	r3, [r3, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4053      	eors	r3, r2
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	711a      	strb	r2, [r3, #4]
}
 8008ac0:	46c0      	nop			; (mov r8, r8)
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b002      	add	sp, #8
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	4a05      	ldr	r2, [pc, #20]	; (8008aec <_ZNSt7__cxx119to_stringEi+0x24>)
 8008ad6:	4906      	ldr	r1, [pc, #24]	; (8008af0 <_ZNSt7__cxx119to_stringEi+0x28>)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	0013      	movs	r3, r2
 8008ade:	2210      	movs	r2, #16
 8008ae0:	f000 f9fc 	bl	8008edc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	b002      	add	sp, #8
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	0800daa8 	.word	0x0800daa8
 8008af0:	0800d2f9 	.word	0x0800d2f9

08008af4 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b>:
#include <string>

namespace SolarGators {
namespace Drivers {

UI::UI(uint16_t background_color, HY28b& display):background_color_(background_color),display_(display)
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	200a      	movs	r0, #10
 8008b00:	183b      	adds	r3, r7, r0
 8008b02:	1c0a      	adds	r2, r1, #0
 8008b04:	801a      	strh	r2, [r3, #0]
 8008b06:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0x98>)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	183a      	adds	r2, r7, r0
 8008b10:	8812      	ldrh	r2, [r2, #0]
 8008b12:	809a      	strh	r2, [r3, #4]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	4252      	negs	r2, r2
 8008b1a:	80da      	strh	r2, [r3, #6]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	609a      	str	r2, [r3, #8]
{
  speed_ = 0;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	731a      	strb	r2, [r3, #12]
  current_ = 0;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	735a      	strb	r2, [r3, #13]
  state_of_charge_ = 0;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	739a      	strb	r2, [r3, #14]
  DrawTitle(Speed_Title_Pos, "Speed");
 8008b34:	4916      	ldr	r1, [pc, #88]	; (8008b90 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0x9c>)
 8008b36:	4b17      	ldr	r3, [pc, #92]	; (8008b94 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xa0>)
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	881a      	ldrh	r2, [r3, #0]
 8008b3c:	885b      	ldrh	r3, [r3, #2]
 8008b3e:	041b      	lsls	r3, r3, #16
 8008b40:	431a      	orrs	r2, r3
 8008b42:	2300      	movs	r3, #0
 8008b44:	0013      	movs	r3, r2
 8008b46:	000a      	movs	r2, r1
 8008b48:	0019      	movs	r1, r3
 8008b4a:	f000 f9a8 	bl	8008e9e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>
  DrawTitle(SOC_Title_Pos, "SOC");
 8008b4e:	4912      	ldr	r1, [pc, #72]	; (8008b98 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xa4>)
 8008b50:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xa8>)
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	881a      	ldrh	r2, [r3, #0]
 8008b56:	885b      	ldrh	r3, [r3, #2]
 8008b58:	041b      	lsls	r3, r3, #16
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	0013      	movs	r3, r2
 8008b60:	000a      	movs	r2, r1
 8008b62:	0019      	movs	r1, r3
 8008b64:	f000 f99b 	bl	8008e9e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>
  DrawTitle(Current_Title_Pos, "Current");
 8008b68:	490d      	ldr	r1, [pc, #52]	; (8008ba0 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xac>)
 8008b6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <_ZN11SolarGators7Drivers2UIC1EtR5HY28b+0xb0>)
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	881a      	ldrh	r2, [r3, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	041b      	lsls	r3, r3, #16
 8008b74:	431a      	orrs	r2, r3
 8008b76:	2300      	movs	r3, #0
 8008b78:	0013      	movs	r3, r2
 8008b7a:	000a      	movs	r2, r1
 8008b7c:	0019      	movs	r1, r3
 8008b7e:	f000 f98e 	bl	8008e9e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>
}
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	0018      	movs	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b004      	add	sp, #16
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	0800e300 	.word	0x0800e300
 8008b90:	0800daac 	.word	0x0800daac
 8008b94:	0800e2ec 	.word	0x0800e2ec
 8008b98:	0800dab4 	.word	0x0800dab4
 8008b9c:	0800e2f4 	.word	0x0800e2f4
 8008ba0:	0800dab8 	.word	0x0800dab8
 8008ba4:	0800e2f0 	.word	0x0800e2f0

08008ba8 <_ZN11SolarGators7Drivers2UID1Ev>:

UI::~UI()
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	4a03      	ldr	r2, [pc, #12]	; (8008bc0 <_ZN11SolarGators7Drivers2UID1Ev+0x18>)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	601a      	str	r2, [r3, #0]
{

}
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	0018      	movs	r0, r3
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b002      	add	sp, #8
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	0800e300 	.word	0x0800e300

08008bc4 <_ZN11SolarGators7Drivers2UID0Ev>:
UI::~UI()
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
}
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7ff ffea 	bl	8008ba8 <_ZN11SolarGators7Drivers2UID1Ev>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2110      	movs	r1, #16
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f004 f8df 	bl	800cd9c <_ZdlPvj>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b002      	add	sp, #8
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh>:

void UI::UpdateSpeed(uint8_t new_speed)
{
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	b091      	sub	sp, #68	; 0x44
 8008bec:	af02      	add	r7, sp, #8
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	000a      	movs	r2, r1
 8008bf2:	1cfb      	adds	r3, r7, #3
 8008bf4:	701a      	strb	r2, [r3, #0]
  std::string new_speed_s = std::to_string(new_speed);
 8008bf6:	1cfb      	adds	r3, r7, #3
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	2620      	movs	r6, #32
 8008bfc:	19bb      	adds	r3, r7, r6
 8008bfe:	0011      	movs	r1, r2
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7ff ff61 	bl	8008ac8 <_ZNSt7__cxx119to_stringEi>
  std::string old_speed_s = std::to_string(speed_);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7b1b      	ldrb	r3, [r3, #12]
 8008c0a:	001a      	movs	r2, r3
 8008c0c:	2408      	movs	r4, #8
 8008c0e:	193b      	adds	r3, r7, r4
 8008c10:	0011      	movs	r1, r2
 8008c12:	0018      	movs	r0, r3
 8008c14:	f7ff ff58 	bl	8008ac8 <_ZNSt7__cxx119to_stringEi>
  display_.SetSize(Speed_Size);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2105      	movs	r1, #5
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff fed4 	bl	80089cc <_ZN5HY28b7SetSizeEh>
  UpdateDisplayValue(Speed_Position, Speed_Char_Size, old_speed_s.c_str(), new_speed_s.c_str());
 8008c24:	193b      	adds	r3, r7, r4
 8008c26:	0018      	movs	r0, r3
 8008c28:	f004 f92f 	bl	800ce8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008c2c:	0005      	movs	r5, r0
 8008c2e:	19bb      	adds	r3, r7, r6
 8008c30:	0018      	movs	r0, r3
 8008c32:	f004 f92a 	bl	800ce8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008c36:	0001      	movs	r1, r0
 8008c38:	4a11      	ldr	r2, [pc, #68]	; (8008c80 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh+0x98>)
 8008c3a:	4b12      	ldr	r3, [pc, #72]	; (8008c84 <_ZN11SolarGators7Drivers2UI11UpdateSpeedEh+0x9c>)
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	9100      	str	r1, [sp, #0]
 8008c40:	8811      	ldrh	r1, [r2, #0]
 8008c42:	8852      	ldrh	r2, [r2, #2]
 8008c44:	0412      	lsls	r2, r2, #16
 8008c46:	430a      	orrs	r2, r1
 8008c48:	0014      	movs	r4, r2
 8008c4a:	881a      	ldrh	r2, [r3, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	041b      	lsls	r3, r3, #16
 8008c50:	4313      	orrs	r3, r2
 8008c52:	0019      	movs	r1, r3
 8008c54:	002b      	movs	r3, r5
 8008c56:	0022      	movs	r2, r4
 8008c58:	f000 f8b6 	bl	8008dc8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>
  speed_ = new_speed;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	1cfa      	adds	r2, r7, #3
 8008c60:	7812      	ldrb	r2, [r2, #0]
 8008c62:	731a      	strb	r2, [r3, #12]
  std::string old_speed_s = std::to_string(speed_);
 8008c64:	2408      	movs	r4, #8
 8008c66:	193b      	adds	r3, r7, r4
 8008c68:	0018      	movs	r0, r3
 8008c6a:	f004 f908 	bl	800ce7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string new_speed_s = std::to_string(new_speed);
 8008c6e:	19bb      	adds	r3, r7, r6
 8008c70:	0018      	movs	r0, r3
 8008c72:	f004 f904 	bl	800ce7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b00f      	add	sp, #60	; 0x3c
 8008c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	0800e2d8 	.word	0x0800e2d8
 8008c84:	0800e2e0 	.word	0x0800e2e0

08008c88 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh>:
void UI::UpdateCurrent(uint8_t new_current)
{
 8008c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8a:	b091      	sub	sp, #68	; 0x44
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	000a      	movs	r2, r1
 8008c92:	1cfb      	adds	r3, r7, #3
 8008c94:	701a      	strb	r2, [r3, #0]
  std::string new_s = std::to_string(new_current);
 8008c96:	1cfb      	adds	r3, r7, #3
 8008c98:	781a      	ldrb	r2, [r3, #0]
 8008c9a:	2620      	movs	r6, #32
 8008c9c:	19bb      	adds	r3, r7, r6
 8008c9e:	0011      	movs	r1, r2
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	f7ff ff11 	bl	8008ac8 <_ZNSt7__cxx119to_stringEi>
  std::string old_s = std::to_string(current_);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	7b5b      	ldrb	r3, [r3, #13]
 8008caa:	001a      	movs	r2, r3
 8008cac:	2408      	movs	r4, #8
 8008cae:	193b      	adds	r3, r7, r4
 8008cb0:	0011      	movs	r1, r2
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f7ff ff08 	bl	8008ac8 <_ZNSt7__cxx119to_stringEi>
  display_.SetSize(Current_Size);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	2104      	movs	r1, #4
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f7ff fe84 	bl	80089cc <_ZN5HY28b7SetSizeEh>
  UpdateDisplayValue(Current_Position, Current_Char_Size, old_s.c_str(), new_s.c_str());
 8008cc4:	193b      	adds	r3, r7, r4
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f004 f8df 	bl	800ce8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008ccc:	0005      	movs	r5, r0
 8008cce:	19bb      	adds	r3, r7, r6
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f004 f8da 	bl	800ce8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008cd6:	0001      	movs	r1, r0
 8008cd8:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh+0x98>)
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <_ZN11SolarGators7Drivers2UI13UpdateCurrentEh+0x9c>)
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	9100      	str	r1, [sp, #0]
 8008ce0:	8811      	ldrh	r1, [r2, #0]
 8008ce2:	8852      	ldrh	r2, [r2, #2]
 8008ce4:	0412      	lsls	r2, r2, #16
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	0014      	movs	r4, r2
 8008cea:	881a      	ldrh	r2, [r3, #0]
 8008cec:	885b      	ldrh	r3, [r3, #2]
 8008cee:	041b      	lsls	r3, r3, #16
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	0019      	movs	r1, r3
 8008cf4:	002b      	movs	r3, r5
 8008cf6:	0022      	movs	r2, r4
 8008cf8:	f000 f866 	bl	8008dc8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>
  current_ = new_current;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	1cfa      	adds	r2, r7, #3
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	735a      	strb	r2, [r3, #13]
  std::string old_s = std::to_string(current_);
 8008d04:	2408      	movs	r4, #8
 8008d06:	193b      	adds	r3, r7, r4
 8008d08:	0018      	movs	r0, r3
 8008d0a:	f004 f8b8 	bl	800ce7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string new_s = std::to_string(new_current);
 8008d0e:	19bb      	adds	r3, r7, r6
 8008d10:	0018      	movs	r0, r3
 8008d12:	f004 f8b4 	bl	800ce7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b00f      	add	sp, #60	; 0x3c
 8008d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	0800e2d4 	.word	0x0800e2d4
 8008d24:	0800e2e4 	.word	0x0800e2e4

08008d28 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh>:
void UI::UpdateSOC(uint8_t new_soc)
{
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	b091      	sub	sp, #68	; 0x44
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	000a      	movs	r2, r1
 8008d32:	1cfb      	adds	r3, r7, #3
 8008d34:	701a      	strb	r2, [r3, #0]
  std::string new_s = std::to_string(new_soc);
 8008d36:	1cfb      	adds	r3, r7, #3
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	2620      	movs	r6, #32
 8008d3c:	19bb      	adds	r3, r7, r6
 8008d3e:	0011      	movs	r1, r2
 8008d40:	0018      	movs	r0, r3
 8008d42:	f7ff fec1 	bl	8008ac8 <_ZNSt7__cxx119to_stringEi>
  std::string old_s = std::to_string(state_of_charge_);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	7b9b      	ldrb	r3, [r3, #14]
 8008d4a:	001a      	movs	r2, r3
 8008d4c:	2408      	movs	r4, #8
 8008d4e:	193b      	adds	r3, r7, r4
 8008d50:	0011      	movs	r1, r2
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7ff feb8 	bl	8008ac8 <_ZNSt7__cxx119to_stringEi>
  display_.SetSize(SOC_Size);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	2104      	movs	r1, #4
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f7ff fe34 	bl	80089cc <_ZN5HY28b7SetSizeEh>
  UpdateDisplayValue(SOC_Position, SOC_Char_Size, old_s.c_str(), new_s.c_str());
 8008d64:	193b      	adds	r3, r7, r4
 8008d66:	0018      	movs	r0, r3
 8008d68:	f004 f88f 	bl	800ce8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008d6c:	0005      	movs	r5, r0
 8008d6e:	19bb      	adds	r3, r7, r6
 8008d70:	0018      	movs	r0, r3
 8008d72:	f004 f88a 	bl	800ce8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8008d76:	0001      	movs	r1, r0
 8008d78:	4a11      	ldr	r2, [pc, #68]	; (8008dc0 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh+0x98>)
 8008d7a:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <_ZN11SolarGators7Drivers2UI9UpdateSOCEh+0x9c>)
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	9100      	str	r1, [sp, #0]
 8008d80:	8811      	ldrh	r1, [r2, #0]
 8008d82:	8852      	ldrh	r2, [r2, #2]
 8008d84:	0412      	lsls	r2, r2, #16
 8008d86:	430a      	orrs	r2, r1
 8008d88:	0014      	movs	r4, r2
 8008d8a:	881a      	ldrh	r2, [r3, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	041b      	lsls	r3, r3, #16
 8008d90:	4313      	orrs	r3, r2
 8008d92:	0019      	movs	r1, r3
 8008d94:	002b      	movs	r3, r5
 8008d96:	0022      	movs	r2, r4
 8008d98:	f000 f816 	bl	8008dc8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>
  state_of_charge_ = new_soc;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	1cfa      	adds	r2, r7, #3
 8008da0:	7812      	ldrb	r2, [r2, #0]
 8008da2:	739a      	strb	r2, [r3, #14]
  std::string old_s = std::to_string(state_of_charge_);
 8008da4:	2408      	movs	r4, #8
 8008da6:	193b      	adds	r3, r7, r4
 8008da8:	0018      	movs	r0, r3
 8008daa:	f004 f868 	bl	800ce7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  std::string new_s = std::to_string(new_soc);
 8008dae:	19bb      	adds	r3, r7, r6
 8008db0:	0018      	movs	r0, r3
 8008db2:	f004 f864 	bl	800ce7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b00f      	add	sp, #60	; 0x3c
 8008dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dbe:	46c0      	nop			; (mov r8, r8)
 8008dc0:	0800e2dc 	.word	0x0800e2dc
 8008dc4:	0800e2e8 	.word	0x0800e2e8

08008dc8 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_>:

void UI::UpdateDisplayValue(point_t pos, dimension_t char_size, const char* old_value, const char* new_value)
{
 8008dc8:	b5b0      	push	{r4, r5, r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	2008      	movs	r0, #8
 8008dd2:	1838      	adds	r0, r7, r0
 8008dd4:	6001      	str	r1, [r0, #0]
 8008dd6:	1d39      	adds	r1, r7, #4
 8008dd8:	600a      	str	r2, [r1, #0]
 8008dda:	603b      	str	r3, [r7, #0]
  // See if strings are the same
  uint8_t i = 0;
 8008ddc:	2317      	movs	r3, #23
 8008dde:	18fb      	adds	r3, r7, r3
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]
  while (*old_value && (*old_value == *new_value))
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d012      	beq.n	8008e12 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x4a>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d10c      	bne.n	8008e12 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x4a>
  {
    ++i;
 8008df8:	2217      	movs	r2, #23
 8008dfa:	18bb      	adds	r3, r7, r2
 8008dfc:	18ba      	adds	r2, r7, r2
 8008dfe:	7812      	ldrb	r2, [r2, #0]
 8008e00:	3201      	adds	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
    ++old_value;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	603b      	str	r3, [r7, #0]
    ++new_value;
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  while (*old_value && (*old_value == *new_value))
 8008e10:	e7e8      	b.n	8008de4 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x1c>
  }
  if(*old_value == '\0')
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d03d      	beq.n	8008e96 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0xce>
    return;
  display_.DrawText(pos.x + i * char_size.x, pos.y, (uint8_t*)old_value, background_color_);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6898      	ldr	r0, [r3, #8]
 8008e1e:	2408      	movs	r4, #8
 8008e20:	193b      	adds	r3, r7, r4
 8008e22:	881a      	ldrh	r2, [r3, #0]
 8008e24:	2517      	movs	r5, #23
 8008e26:	197b      	adds	r3, r7, r5
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	1d39      	adds	r1, r7, #4
 8008e2e:	8809      	ldrh	r1, [r1, #0]
 8008e30:	434b      	muls	r3, r1
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	18d3      	adds	r3, r2, r3
 8008e36:	b299      	uxth	r1, r3
 8008e38:	193b      	adds	r3, r7, r4
 8008e3a:	885a      	ldrh	r2, [r3, #2]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	889b      	ldrh	r3, [r3, #4]
 8008e40:	683c      	ldr	r4, [r7, #0]
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	0023      	movs	r3, r4
 8008e46:	f7ff faa9 	bl	800839c <_ZN5HY28b8DrawTextEttPht>
  if(*new_value == '\0')
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d108      	bne.n	8008e64 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0x9c>
  {
    new_value -= i;
 8008e52:	197b      	adds	r3, r7, r5
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	425b      	negs	r3, r3
 8008e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e5a:	18d3      	adds	r3, r2, r3
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    i = 0;
 8008e5e:	197b      	adds	r3, r7, r5
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
  }
  display_.DrawText(pos.x + i * char_size.x, pos.y, (uint8_t*)new_value, display_.RED);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6898      	ldr	r0, [r3, #8]
 8008e68:	2408      	movs	r4, #8
 8008e6a:	193b      	adds	r3, r7, r4
 8008e6c:	881a      	ldrh	r2, [r3, #0]
 8008e6e:	2317      	movs	r3, #23
 8008e70:	18fb      	adds	r3, r7, r3
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	1d39      	adds	r1, r7, #4
 8008e78:	8809      	ldrh	r1, [r1, #0]
 8008e7a:	434b      	muls	r3, r1
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	18d3      	adds	r3, r2, r3
 8008e80:	b299      	uxth	r1, r3
 8008e82:	193b      	adds	r3, r7, r4
 8008e84:	885a      	ldrh	r2, [r3, #2]
 8008e86:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8008e88:	23f8      	movs	r3, #248	; 0xf8
 8008e8a:	021b      	lsls	r3, r3, #8
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	0023      	movs	r3, r4
 8008e90:	f7ff fa84 	bl	800839c <_ZN5HY28b8DrawTextEttPht>
 8008e94:	e000      	b.n	8008e98 <_ZN11SolarGators7Drivers2UI18UpdateDisplayValueE7point_tS2_PKcS4_+0xd0>
    return;
 8008e96:	46c0      	nop			; (mov r8, r8)
}
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b006      	add	sp, #24
 8008e9c:	bdb0      	pop	{r4, r5, r7, pc}

08008e9e <_ZN11SolarGators7Drivers2UI9DrawTitleE7point_tPKc>:

void UI::DrawTitle(point_t pos, const char* title)
{
 8008e9e:	b590      	push	{r4, r7, lr}
 8008ea0:	b087      	sub	sp, #28
 8008ea2:	af02      	add	r7, sp, #8
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	2408      	movs	r4, #8
 8008ea8:	193b      	adds	r3, r7, r4
 8008eaa:	6019      	str	r1, [r3, #0]
 8008eac:	607a      	str	r2, [r7, #4]
  display_.SetSize(Title_Size);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f7ff fd89 	bl	80089cc <_ZN5HY28b7SetSizeEh>
  display_.DrawText(pos.x, pos.y, (uint8_t*)title, title_color_);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6898      	ldr	r0, [r3, #8]
 8008ebe:	193b      	adds	r3, r7, r4
 8008ec0:	8819      	ldrh	r1, [r3, #0]
 8008ec2:	193b      	adds	r3, r7, r4
 8008ec4:	885a      	ldrh	r2, [r3, #2]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	88db      	ldrh	r3, [r3, #6]
 8008eca:	687c      	ldr	r4, [r7, #4]
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	0023      	movs	r3, r4
 8008ed0:	f7ff fa64 	bl	800839c <_ZN5HY28b8DrawTextEttPht>
}
 8008ed4:	46c0      	nop			; (mov r8, r8)
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	b005      	add	sp, #20
 8008eda:	bd90      	pop	{r4, r7, pc}

08008edc <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8008edc:	b408      	push	{r3}
 8008ede:	b5b0      	push	{r4, r5, r7, lr}
 8008ee0:	b089      	sub	sp, #36	; 0x24
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	60b9      	str	r1, [r7, #8]
 8008ee8:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3307      	adds	r3, #7
 8008eee:	08db      	lsrs	r3, r3, #3
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	466a      	mov	r2, sp
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	469d      	mov	sp, r3
 8008ef8:	466b      	mov	r3, sp
 8008efa:	3307      	adds	r3, #7
 8008efc:	08db      	lsrs	r3, r3, #3
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8008f02:	2330      	movs	r3, #48	; 0x30
 8008f04:	2208      	movs	r2, #8
 8008f06:	4694      	mov	ip, r2
 8008f08:	44bc      	add	ip, r7
 8008f0a:	4463      	add	r3, ip
 8008f0c:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	69f8      	ldr	r0, [r7, #28]
 8008f16:	68bc      	ldr	r4, [r7, #8]
 8008f18:	47a0      	blx	r4
 8008f1a:	0003      	movs	r3, r0
 8008f1c:	61bb      	str	r3, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	18d4      	adds	r4, r2, r3
 8008f24:	2514      	movs	r5, #20
 8008f26:	197b      	adds	r3, r7, r5
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f003 ff50 	bl	800cdce <_ZNSaIcEC1Ev>
 8008f2e:	197b      	adds	r3, r7, r5
 8008f30:	69f9      	ldr	r1, [r7, #28]
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	0022      	movs	r2, r4
 8008f36:	f000 f80c 	bl	8008f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8008f3a:	197b      	adds	r3, r7, r5
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f003 ff47 	bl	800cdd0 <_ZNSaIcED1Ev>
 8008f42:	46c0      	nop			; (mov r8, r8)
    }
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	46bd      	mov	sp, r7
 8008f48:	b009      	add	sp, #36	; 0x24
 8008f4a:	bcb0      	pop	{r4, r5, r7}
 8008f4c:	bc08      	pop	{r3}
 8008f4e:	b001      	add	sp, #4
 8008f50:	4718      	bx	r3

08008f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8008f52:	b590      	push	{r4, r7, lr}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8008f60:	68fc      	ldr	r4, [r7, #12]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	0018      	movs	r0, r3
 8008f66:	f003 ff4a 	bl	800cdfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8008f6a:	0001      	movs	r1, r0
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	001a      	movs	r2, r3
 8008f70:	0020      	movs	r0, r4
 8008f72:	f003 ff8c 	bl	800ce8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	68b9      	ldr	r1, [r7, #8]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	f000 f805 	bl	8008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	0018      	movs	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b005      	add	sp, #20
 8008f8a:	bd90      	pop	{r4, r7, pc}

08008f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f804 	bl	8008faa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	b006      	add	sp, #24
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8008faa:	b590      	push	{r4, r7, lr}
 8008fac:	b087      	sub	sp, #28
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	003a      	movs	r2, r7
 8008fb8:	7013      	strb	r3, [r2, #0]
          _M_construct(__beg, __end, _Tag());
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	1c23      	adds	r3, r4, #0
 8008fc2:	f000 f805 	bl	8008fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	b007      	add	sp, #28
 8008fcc:	bd90      	pop	{r4, r7, pc}
	...

08008fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	003a      	movs	r2, r7
 8008fde:	7013      	strb	r3, [r2, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f000 f842 	bl	800906c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8008fe8:	1e03      	subs	r3, r0, #0
 8008fea:	d005      	beq.n	8008ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d001      	beq.n	8008ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e000      	b.n	8008ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x36>
	  std::__throw_logic_error(__N("basic_string::"
 8008ffe:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x98>)
 8009000:	0018      	movs	r0, r3
 8009002:	f003 fee9 	bl	800cdd8 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	0011      	movs	r1, r2
 800900c:	0018      	movs	r0, r3
 800900e:	f000 f839 	bl	8009084 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8009012:	0003      	movs	r3, r0
 8009014:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d912      	bls.n	8009042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x72>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 800901c:	2314      	movs	r3, #20
 800901e:	18f9      	adds	r1, r7, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	0018      	movs	r0, r3
 8009026:	f003 fef3 	bl	800ce10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800902a:	0002      	movs	r2, r0
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	0011      	movs	r1, r2
 8009030:	0018      	movs	r0, r3
 8009032:	f003 fee0 	bl	800cdf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	0011      	movs	r1, r2
 800903c:	0018      	movs	r0, r3
 800903e:	f003 fee0 	bl	800ce02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	0018      	movs	r0, r3
 8009046:	f003 fed8 	bl	800cdfa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	0019      	movs	r1, r3
 8009050:	f003 ff10 	bl	800ce74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	0011      	movs	r1, r2
 800905a:	0018      	movs	r0, r3
 800905c:	f003 fed3 	bl	800ce06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8009060:	46c0      	nop			; (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b006      	add	sp, #24
 8009066:	bd80      	pop	{r7, pc}
 8009068:	0800dac0 	.word	0x0800dac0

0800906c <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	425a      	negs	r2, r3
 8009078:	4153      	adcs	r3, r2
 800907a:	b2db      	uxtb	r3, r3
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b002      	add	sp, #8
 8009082:	bd80      	pop	{r7, pc}

08009084 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8009084:	b5b0      	push	{r4, r5, r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800908e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8009090:	1d3b      	adds	r3, r7, #4
 8009092:	0018      	movs	r0, r3
 8009094:	f000 f80b 	bl	80090ae <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	1c2a      	adds	r2, r5, #0
 800909c:	0019      	movs	r1, r3
 800909e:	0020      	movs	r0, r4
 80090a0:	f000 f80d 	bl	80090be <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80090a4:	0003      	movs	r3, r0
    }
 80090a6:	0018      	movs	r0, r3
 80090a8:	46bd      	mov	sp, r7
 80090aa:	b004      	add	sp, #16
 80090ac:	bdb0      	pop	{r4, r5, r7, pc}

080090ae <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80090b6:	1c18      	adds	r0, r3, #0
 80090b8:	46bd      	mov	sp, r7
 80090ba:	b002      	add	sp, #8
 80090bc:	bd80      	pop	{r7, pc}

080090be <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	1d3b      	adds	r3, r7, #4
 80090ca:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1ad3      	subs	r3, r2, r3
    }
 80090d2:	0018      	movs	r0, r3
 80090d4:	46bd      	mov	sp, r7
 80090d6:	b004      	add	sp, #16
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e2:	f3ef 8305 	mrs	r3, IPSR
 80090e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80090e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d109      	bne.n	8009102 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ee:	f3ef 8310 	mrs	r3, PRIMASK
 80090f2:	607b      	str	r3, [r7, #4]
  return(result);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d007      	beq.n	800910a <osKernelInitialize+0x2e>
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <osKernelInitialize+0x54>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d103      	bne.n	800910a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8009102:	2306      	movs	r3, #6
 8009104:	425b      	negs	r3, r3
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e00c      	b.n	8009124 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <osKernelInitialize+0x54>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <osKernelInitialize+0x54>)
 8009114:	2201      	movs	r2, #1
 8009116:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	e002      	b.n	8009124 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800911e:	2301      	movs	r3, #1
 8009120:	425b      	negs	r3, r3
 8009122:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009124:	68fb      	ldr	r3, [r7, #12]
}
 8009126:	0018      	movs	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	b004      	add	sp, #16
 800912c:	bd80      	pop	{r7, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	20001150 	.word	0x20001150

08009134 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800913a:	f3ef 8305 	mrs	r3, IPSR
 800913e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009140:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009142:	2b00      	cmp	r3, #0
 8009144:	d109      	bne.n	800915a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009146:	f3ef 8310 	mrs	r3, PRIMASK
 800914a:	607b      	str	r3, [r7, #4]
  return(result);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d007      	beq.n	8009162 <osKernelStart+0x2e>
 8009152:	4b0e      	ldr	r3, [pc, #56]	; (800918c <osKernelStart+0x58>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d103      	bne.n	8009162 <osKernelStart+0x2e>
    stat = osErrorISR;
 800915a:	2306      	movs	r3, #6
 800915c:	425b      	negs	r3, r3
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	e00e      	b.n	8009180 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009162:	4b0a      	ldr	r3, [pc, #40]	; (800918c <osKernelStart+0x58>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d107      	bne.n	800917a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800916a:	4b08      	ldr	r3, [pc, #32]	; (800918c <osKernelStart+0x58>)
 800916c:	2202      	movs	r2, #2
 800916e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009170:	f002 f93c 	bl	800b3ec <vTaskStartScheduler>
      stat = osOK;
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e002      	b.n	8009180 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800917a:	2301      	movs	r3, #1
 800917c:	425b      	negs	r3, r3
 800917e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009180:	68fb      	ldr	r3, [r7, #12]
}
 8009182:	0018      	movs	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	b004      	add	sp, #16
 8009188:	bd80      	pop	{r7, pc}
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	20001150 	.word	0x20001150

08009190 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009196:	f3ef 8305 	mrs	r3, IPSR
 800919a:	60bb      	str	r3, [r7, #8]
  return(result);
 800919c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <osKernelGetTickCount+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091a2:	f3ef 8310 	mrs	r3, PRIMASK
 80091a6:	607b      	str	r3, [r7, #4]
  return(result);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d008      	beq.n	80091c0 <osKernelGetTickCount+0x30>
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <osKernelGetTickCount+0x44>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d104      	bne.n	80091c0 <osKernelGetTickCount+0x30>
    ticks = xTaskGetTickCountFromISR();
 80091b6:	f002 fa1d 	bl	800b5f4 <xTaskGetTickCountFromISR>
 80091ba:	0003      	movs	r3, r0
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	e003      	b.n	80091c8 <osKernelGetTickCount+0x38>
  } else {
    ticks = xTaskGetTickCount();
 80091c0:	f002 fa0a 	bl	800b5d8 <xTaskGetTickCount>
 80091c4:	0003      	movs	r3, r0
 80091c6:	60fb      	str	r3, [r7, #12]
  }

  return (ticks);
 80091c8:	68fb      	ldr	r3, [r7, #12]
}
 80091ca:	0018      	movs	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b004      	add	sp, #16
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	20001150 	.word	0x20001150

080091d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091d8:	b5b0      	push	{r4, r5, r7, lr}
 80091da:	b090      	sub	sp, #64	; 0x40
 80091dc:	af04      	add	r7, sp, #16
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e8:	f3ef 8305 	mrs	r3, IPSR
 80091ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80091ee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d000      	beq.n	80091f6 <osThreadNew+0x1e>
 80091f4:	e090      	b.n	8009318 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f6:	f3ef 8310 	mrs	r3, PRIMASK
 80091fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d004      	beq.n	800920c <osThreadNew+0x34>
 8009202:	4b48      	ldr	r3, [pc, #288]	; (8009324 <osThreadNew+0x14c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d100      	bne.n	800920c <osThreadNew+0x34>
 800920a:	e085      	b.n	8009318 <osThreadNew+0x140>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d100      	bne.n	8009214 <osThreadNew+0x3c>
 8009212:	e081      	b.n	8009318 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8009214:	2380      	movs	r3, #128	; 0x80
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009218:	2318      	movs	r3, #24
 800921a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800921c:	2117      	movs	r1, #23
 800921e:	187b      	adds	r3, r7, r1
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8009224:	187b      	adds	r3, r7, r1
 8009226:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8009228:	2301      	movs	r3, #1
 800922a:	425b      	negs	r3, r3
 800922c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d044      	beq.n	80092be <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <osThreadNew+0x6a>
        name = attr->name;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <osThreadNew+0x8e>
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	2b38      	cmp	r3, #56	; 0x38
 800925a:	d804      	bhi.n	8009266 <osThreadNew+0x8e>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	4013      	ands	r3, r2
 8009264:	d001      	beq.n	800926a <osThreadNew+0x92>
        return (NULL);
 8009266:	2300      	movs	r3, #0
 8009268:	e057      	b.n	800931a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	089b      	lsrs	r3, r3, #2
 8009278:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00e      	beq.n	80092a0 <osThreadNew+0xc8>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2bbb      	cmp	r3, #187	; 0xbb
 8009288:	d90a      	bls.n	80092a0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800928e:	2b00      	cmp	r3, #0
 8009290:	d006      	beq.n	80092a0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <osThreadNew+0xc8>
        mem = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	623b      	str	r3, [r7, #32]
 800929e:	e010      	b.n	80092c2 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10c      	bne.n	80092c2 <osThreadNew+0xea>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d108      	bne.n	80092c2 <osThreadNew+0xea>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <osThreadNew+0xea>
          mem = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	623b      	str	r3, [r7, #32]
 80092bc:	e001      	b.n	80092c2 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d112      	bne.n	80092ee <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092d0:	68bd      	ldr	r5, [r7, #8]
 80092d2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80092d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	9302      	str	r3, [sp, #8]
 80092da:	9201      	str	r2, [sp, #4]
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	002b      	movs	r3, r5
 80092e2:	0022      	movs	r2, r4
 80092e4:	f001 fecd 	bl	800b082 <xTaskCreateStatic>
 80092e8:	0003      	movs	r3, r0
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	e014      	b.n	8009318 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d111      	bne.n	8009318 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68bc      	ldr	r4, [r7, #8]
 80092fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	2310      	movs	r3, #16
 8009300:	18fb      	adds	r3, r7, r3
 8009302:	9301      	str	r3, [sp, #4]
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	0023      	movs	r3, r4
 800930a:	f001 fefd 	bl	800b108 <xTaskCreate>
 800930e:	0003      	movs	r3, r0
 8009310:	2b01      	cmp	r3, #1
 8009312:	d001      	beq.n	8009318 <osThreadNew+0x140>
          hTask = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009318:	693b      	ldr	r3, [r7, #16]
}
 800931a:	0018      	movs	r0, r3
 800931c:	46bd      	mov	sp, r7
 800931e:	b00c      	add	sp, #48	; 0x30
 8009320:	bdb0      	pop	{r4, r5, r7, pc}
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	20001150 	.word	0x20001150

08009328 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009330:	f3ef 8305 	mrs	r3, IPSR
 8009334:	613b      	str	r3, [r7, #16]
  return(result);
 8009336:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800933c:	f3ef 8310 	mrs	r3, PRIMASK
 8009340:	60fb      	str	r3, [r7, #12]
  return(result);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <osDelay+0x30>
 8009348:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <osDelay+0x4c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d103      	bne.n	8009358 <osDelay+0x30>
    stat = osErrorISR;
 8009350:	2306      	movs	r3, #6
 8009352:	425b      	negs	r3, r3
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e008      	b.n	800936a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8009358:	2300      	movs	r3, #0
 800935a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <osDelay+0x42>
      vTaskDelay(ticks);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	0018      	movs	r0, r3
 8009366:	f002 f81b 	bl	800b3a0 <vTaskDelay>
    }
  }

  return (stat);
 800936a:	697b      	ldr	r3, [r7, #20]
}
 800936c:	0018      	movs	r0, r3
 800936e:	46bd      	mov	sp, r7
 8009370:	b006      	add	sp, #24
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20001150 	.word	0x20001150

08009378 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	0018      	movs	r0, r3
 8009384:	f003 f9f2 	bl	800c76c <pvTimerGetTimerID>
 8009388:	0003      	movs	r3, r0
 800938a:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <TimerCallback+0x26>
    callb->func (callb->arg);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	0018      	movs	r0, r3
 800939c:	4790      	blx	r2
  }
}
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	46bd      	mov	sp, r7
 80093a2:	b004      	add	sp, #16
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08e      	sub	sp, #56	; 0x38
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	607a      	str	r2, [r7, #4]
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	230b      	movs	r3, #11
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	1c0a      	adds	r2, r1, #0
 80093ba:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093c0:	f3ef 8305 	mrs	r3, IPSR
 80093c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80093c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d000      	beq.n	80093ce <osTimerNew+0x26>
 80093cc:	e06b      	b.n	80094a6 <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ce:	f3ef 8310 	mrs	r3, PRIMASK
 80093d2:	617b      	str	r3, [r7, #20]
  return(result);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <osTimerNew+0x3a>
 80093da:	4b35      	ldr	r3, [pc, #212]	; (80094b0 <osTimerNew+0x108>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d061      	beq.n	80094a6 <osTimerNew+0xfe>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d05e      	beq.n	80094a6 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80093e8:	2008      	movs	r0, #8
 80093ea:	f003 fb31 	bl	800ca50 <pvPortMalloc>
 80093ee:	0003      	movs	r3, r0
 80093f0:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d056      	beq.n	80094a6 <osTimerNew+0xfe>
      callb->func = func;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009404:	230b      	movs	r3, #11
 8009406:	18fb      	adds	r3, r7, r3
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d102      	bne.n	8009414 <osTimerNew+0x6c>
        reload = pdFALSE;
 800940e:	2300      	movs	r3, #0
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
 8009412:	e001      	b.n	8009418 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8009418:	2301      	movs	r3, #1
 800941a:	425b      	negs	r3, r3
 800941c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01c      	beq.n	8009462 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <osTimerNew+0x8e>
          name = attr->name;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d006      	beq.n	800944c <osTimerNew+0xa4>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b2f      	cmp	r3, #47	; 0x2f
 8009444:	d902      	bls.n	800944c <osTimerNew+0xa4>
          mem = 1;
 8009446:	2301      	movs	r3, #1
 8009448:	623b      	str	r3, [r7, #32]
 800944a:	e00c      	b.n	8009466 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d108      	bne.n	8009466 <osTimerNew+0xbe>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <osTimerNew+0xbe>
            mem = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	623b      	str	r3, [r7, #32]
 8009460:	e001      	b.n	8009466 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d10e      	bne.n	800948a <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	69f9      	ldr	r1, [r7, #28]
 8009472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	4b0e      	ldr	r3, [pc, #56]	; (80094b4 <osTimerNew+0x10c>)
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	000b      	movs	r3, r1
 800947e:	2101      	movs	r1, #1
 8009480:	f002 fe8d 	bl	800c19e <xTimerCreateStatic>
 8009484:	0003      	movs	r3, r0
 8009486:	62bb      	str	r3, [r7, #40]	; 0x28
 8009488:	e00d      	b.n	80094a6 <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009490:	69f9      	ldr	r1, [r7, #28]
 8009492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009496:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <osTimerNew+0x10c>)
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	000b      	movs	r3, r1
 800949c:	2101      	movs	r1, #1
 800949e:	f002 fe5b 	bl	800c158 <xTimerCreate>
 80094a2:	0003      	movs	r3, r0
 80094a4:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80094a8:	0018      	movs	r0, r3
 80094aa:	46bd      	mov	sp, r7
 80094ac:	b00c      	add	sp, #48	; 0x30
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	20001150 	.word	0x20001150
 80094b4:	08009379 	.word	0x08009379

080094b8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af02      	add	r7, sp, #8
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094c6:	f3ef 8305 	mrs	r3, IPSR
 80094ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80094cc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <osTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d2:	f3ef 8310 	mrs	r3, PRIMASK
 80094d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <osTimerStart+0x36>
 80094de:	4b12      	ldr	r3, [pc, #72]	; (8009528 <osTimerStart+0x70>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d103      	bne.n	80094ee <osTimerStart+0x36>
    stat = osErrorISR;
 80094e6:	2306      	movs	r3, #6
 80094e8:	425b      	negs	r3, r3
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	e017      	b.n	800951e <osTimerStart+0x66>
  }
  else if (hTimer == NULL) {
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <osTimerStart+0x44>
    stat = osErrorParameter;
 80094f4:	2304      	movs	r3, #4
 80094f6:	425b      	negs	r3, r3
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e010      	b.n	800951e <osTimerStart+0x66>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	6938      	ldr	r0, [r7, #16]
 8009500:	2300      	movs	r3, #0
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	2300      	movs	r3, #0
 8009506:	2104      	movs	r1, #4
 8009508:	f002 fe9e 	bl	800c248 <xTimerGenericCommand>
 800950c:	0003      	movs	r3, r0
 800950e:	2b01      	cmp	r3, #1
 8009510:	d102      	bne.n	8009518 <osTimerStart+0x60>
      stat = osOK;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	e002      	b.n	800951e <osTimerStart+0x66>
    } else {
      stat = osErrorResource;
 8009518:	2303      	movs	r3, #3
 800951a:	425b      	negs	r3, r3
 800951c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800951e:	697b      	ldr	r3, [r7, #20]
}
 8009520:	0018      	movs	r0, r3
 8009522:	46bd      	mov	sp, r7
 8009524:	b006      	add	sp, #24
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20001150 	.word	0x20001150

0800952c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009534:	2300      	movs	r3, #0
 8009536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009538:	f3ef 8305 	mrs	r3, IPSR
 800953c:	60fb      	str	r3, [r7, #12]
  return(result);
 800953e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009540:	2b00      	cmp	r3, #0
 8009542:	d139      	bne.n	80095b8 <osEventFlagsNew+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009544:	f3ef 8310 	mrs	r3, PRIMASK
 8009548:	60bb      	str	r3, [r7, #8]
  return(result);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <osEventFlagsNew+0x2c>
 8009550:	4b1c      	ldr	r3, [pc, #112]	; (80095c4 <osEventFlagsNew+0x98>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d02f      	beq.n	80095b8 <osEventFlagsNew+0x8c>
    mem = -1;
 8009558:	2301      	movs	r3, #1
 800955a:	425b      	negs	r3, r3
 800955c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d015      	beq.n	8009590 <osEventFlagsNew+0x64>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d006      	beq.n	800957a <osEventFlagsNew+0x4e>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	2b1f      	cmp	r3, #31
 8009572:	d902      	bls.n	800957a <osEventFlagsNew+0x4e>
        mem = 1;
 8009574:	2301      	movs	r3, #1
 8009576:	613b      	str	r3, [r7, #16]
 8009578:	e00c      	b.n	8009594 <osEventFlagsNew+0x68>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d108      	bne.n	8009594 <osEventFlagsNew+0x68>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d104      	bne.n	8009594 <osEventFlagsNew+0x68>
          mem = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	613b      	str	r3, [r7, #16]
 800958e:	e001      	b.n	8009594 <osEventFlagsNew+0x68>
        }
      }
    }
    else {
      mem = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d107      	bne.n	80095aa <osEventFlagsNew+0x7e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	0018      	movs	r0, r3
 80095a0:	f000 fc26 	bl	8009df0 <xEventGroupCreateStatic>
 80095a4:	0003      	movs	r3, r0
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e006      	b.n	80095b8 <osEventFlagsNew+0x8c>
    }
    else {
      if (mem == 0) {
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d103      	bne.n	80095b8 <osEventFlagsNew+0x8c>
        hEventGroup = xEventGroupCreate();
 80095b0:	f000 fc43 	bl	8009e3a <xEventGroupCreate>
 80095b4:	0003      	movs	r3, r0
 80095b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80095b8:	697b      	ldr	r3, [r7, #20]
}
 80095ba:	0018      	movs	r0, r3
 80095bc:	46bd      	mov	sp, r7
 80095be:	b006      	add	sp, #24
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	46c0      	nop			; (mov r8, r8)
 80095c4:	20001150 	.word	0x20001150

080095c8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <osEventFlagsSet+0x1c>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	0e1b      	lsrs	r3, r3, #24
 80095e0:	061b      	lsls	r3, r3, #24
 80095e2:	d003      	beq.n	80095ec <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 80095e4:	2304      	movs	r3, #4
 80095e6:	425b      	negs	r3, r3
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	e032      	b.n	8009652 <osEventFlagsSet+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ec:	f3ef 8305 	mrs	r3, IPSR
 80095f0:	617b      	str	r3, [r7, #20]
  return(result);
 80095f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <osEventFlagsSet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095f8:	f3ef 8310 	mrs	r3, PRIMASK
 80095fc:	613b      	str	r3, [r7, #16]
  return(result);
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d01c      	beq.n	800963e <osEventFlagsSet+0x76>
 8009604:	4b15      	ldr	r3, [pc, #84]	; (800965c <osEventFlagsSet+0x94>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d118      	bne.n	800963e <osEventFlagsSet+0x76>
    yield = pdFALSE;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009610:	230c      	movs	r3, #12
 8009612:	18fa      	adds	r2, r7, r3
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	0018      	movs	r0, r3
 800961a:	f000 fda5 	bl	800a168 <xEventGroupSetBitsFromISR>
 800961e:	1e03      	subs	r3, r0, #0
 8009620:	d003      	beq.n	800962a <osEventFlagsSet+0x62>
      rflags = (uint32_t)osErrorResource;
 8009622:	2303      	movs	r3, #3
 8009624:	425b      	negs	r3, r3
 8009626:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009628:	e012      	b.n	8009650 <osEventFlagsSet+0x88>
    } else {
      rflags = flags;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00d      	beq.n	8009650 <osEventFlagsSet+0x88>
 8009634:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <osEventFlagsSet+0x98>)
 8009636:	2280      	movs	r2, #128	; 0x80
 8009638:	0552      	lsls	r2, r2, #21
 800963a:	601a      	str	r2, [r3, #0]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800963c:	e008      	b.n	8009650 <osEventFlagsSet+0x88>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	0011      	movs	r1, r2
 8009644:	0018      	movs	r0, r3
 8009646:	f000 fcb9 	bl	8009fbc <xEventGroupSetBits>
 800964a:	0003      	movs	r3, r0
 800964c:	61fb      	str	r3, [r7, #28]
 800964e:	e000      	b.n	8009652 <osEventFlagsSet+0x8a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009650:	46c0      	nop			; (mov r8, r8)
  }

  return (rflags);
 8009652:	69fb      	ldr	r3, [r7, #28]
}
 8009654:	0018      	movs	r0, r3
 8009656:	46bd      	mov	sp, r7
 8009658:	b008      	add	sp, #32
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20001150 	.word	0x20001150
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009664:	b590      	push	{r4, r7, lr}
 8009666:	b08d      	sub	sp, #52	; 0x34
 8009668:	af02      	add	r7, sp, #8
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <osEventFlagsWait+0x20>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	0e1b      	lsrs	r3, r3, #24
 8009680:	061b      	lsls	r3, r3, #24
 8009682:	d003      	beq.n	800968c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8009684:	2304      	movs	r3, #4
 8009686:	425b      	negs	r3, r3
 8009688:	61fb      	str	r3, [r7, #28]
 800968a:	e051      	b.n	8009730 <osEventFlagsWait+0xcc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800968c:	f3ef 8305 	mrs	r3, IPSR
 8009690:	617b      	str	r3, [r7, #20]
  return(result);
 8009692:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009694:	2b00      	cmp	r3, #0
 8009696:	d109      	bne.n	80096ac <osEventFlagsWait+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009698:	f3ef 8310 	mrs	r3, PRIMASK
 800969c:	613b      	str	r3, [r7, #16]
  return(result);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d007      	beq.n	80096b4 <osEventFlagsWait+0x50>
 80096a4:	4b25      	ldr	r3, [pc, #148]	; (800973c <osEventFlagsWait+0xd8>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d103      	bne.n	80096b4 <osEventFlagsWait+0x50>
    rflags = (uint32_t)osErrorISR;
 80096ac:	2306      	movs	r3, #6
 80096ae:	425b      	negs	r3, r3
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	e03d      	b.n	8009730 <osEventFlagsWait+0xcc>
  }
  else {
    if (options & osFlagsWaitAll) {
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	4013      	ands	r3, r2
 80096ba:	d002      	beq.n	80096c2 <osEventFlagsWait+0x5e>
      wait_all = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
 80096c0:	e001      	b.n	80096c6 <osEventFlagsWait+0x62>
    } else {
      wait_all = pdFAIL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2202      	movs	r2, #2
 80096ca:	4013      	ands	r3, r2
 80096cc:	d002      	beq.n	80096d4 <osEventFlagsWait+0x70>
      exit_clr = pdFAIL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	623b      	str	r3, [r7, #32]
 80096d2:	e001      	b.n	80096d8 <osEventFlagsWait+0x74>
    } else {
      exit_clr = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80096d8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80096da:	6a3a      	ldr	r2, [r7, #32]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	69b8      	ldr	r0, [r7, #24]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	0023      	movs	r3, r4
 80096e6:	f000 fbc3 	bl	8009e70 <xEventGroupWaitBits>
 80096ea:	0003      	movs	r3, r0
 80096ec:	61fb      	str	r3, [r7, #28]

    if (options & osFlagsWaitAll) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	4013      	ands	r3, r2
 80096f4:	d00e      	beq.n	8009714 <osEventFlagsWait+0xb0>
      if (flags != rflags) {
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d018      	beq.n	8009730 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d003      	beq.n	800970c <osEventFlagsWait+0xa8>
          rflags = (uint32_t)osErrorTimeout;
 8009704:	2302      	movs	r3, #2
 8009706:	425b      	negs	r3, r3
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	e011      	b.n	8009730 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800970c:	2303      	movs	r3, #3
 800970e:	425b      	negs	r3, r3
 8009710:	61fb      	str	r3, [r7, #28]
 8009712:	e00d      	b.n	8009730 <osEventFlagsWait+0xcc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	4013      	ands	r3, r2
 800971a:	d109      	bne.n	8009730 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <osEventFlagsWait+0xc6>
          rflags = (uint32_t)osErrorTimeout;
 8009722:	2302      	movs	r3, #2
 8009724:	425b      	negs	r3, r3
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	e002      	b.n	8009730 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800972a:	2303      	movs	r3, #3
 800972c:	425b      	negs	r3, r3
 800972e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009730:	69fb      	ldr	r3, [r7, #28]
}
 8009732:	0018      	movs	r0, r3
 8009734:	46bd      	mov	sp, r7
 8009736:	b00b      	add	sp, #44	; 0x2c
 8009738:	bd90      	pop	{r4, r7, pc}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	20001150 	.word	0x20001150

08009740 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800974c:	f3ef 8305 	mrs	r3, IPSR
 8009750:	60fb      	str	r3, [r7, #12]
  return(result);
 8009752:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009754:	2b00      	cmp	r3, #0
 8009756:	d109      	bne.n	800976c <osEventFlagsDelete+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009758:	f3ef 8310 	mrs	r3, PRIMASK
 800975c:	60bb      	str	r3, [r7, #8]
  return(result);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d007      	beq.n	8009774 <osEventFlagsDelete+0x34>
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <osEventFlagsDelete+0x58>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d103      	bne.n	8009774 <osEventFlagsDelete+0x34>
    stat = osErrorISR;
 800976c:	2306      	movs	r3, #6
 800976e:	425b      	negs	r3, r3
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	e00c      	b.n	800978e <osEventFlagsDelete+0x4e>
  }
  else if (hEventGroup == NULL) {
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <osEventFlagsDelete+0x42>
    stat = osErrorParameter;
 800977a:	2304      	movs	r3, #4
 800977c:	425b      	negs	r3, r3
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	e005      	b.n	800978e <osEventFlagsDelete+0x4e>
  }
  else {
    stat = osOK;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	0018      	movs	r0, r3
 800978a:	f000 fc90 	bl	800a0ae <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800978e:	697b      	ldr	r3, [r7, #20]
}
 8009790:	0018      	movs	r0, r3
 8009792:	46bd      	mov	sp, r7
 8009794:	b006      	add	sp, #24
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20001150 	.word	0x20001150

0800979c <osMutexNew>:

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	; 0x28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a8:	f3ef 8305 	mrs	r3, IPSR
 80097ac:	613b      	str	r3, [r7, #16]
  return(result);
 80097ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d000      	beq.n	80097b6 <osMutexNew+0x1a>
 80097b4:	e084      	b.n	80098c0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097b6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d004      	beq.n	80097cc <osMutexNew+0x30>
 80097c2:	4b42      	ldr	r3, [pc, #264]	; (80098cc <osMutexNew+0x130>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d100      	bne.n	80097cc <osMutexNew+0x30>
 80097ca:	e079      	b.n	80098c0 <osMutexNew+0x124>
    if (attr != NULL) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <osMutexNew+0x3e>
      type = attr->attr_bits;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	623b      	str	r3, [r7, #32]
 80097d8:	e001      	b.n	80097de <osMutexNew+0x42>
    } else {
      type = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	2201      	movs	r2, #1
 80097e2:	4013      	ands	r3, r2
 80097e4:	d002      	beq.n	80097ec <osMutexNew+0x50>
      rmtx = 1U;
 80097e6:	2301      	movs	r3, #1
 80097e8:	61fb      	str	r3, [r7, #28]
 80097ea:	e001      	b.n	80097f0 <osMutexNew+0x54>
    } else {
      rmtx = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	2208      	movs	r2, #8
 80097f4:	4013      	ands	r3, r2
 80097f6:	d000      	beq.n	80097fa <osMutexNew+0x5e>
 80097f8:	e062      	b.n	80098c0 <osMutexNew+0x124>
      mem = -1;
 80097fa:	2301      	movs	r3, #1
 80097fc:	425b      	negs	r3, r3
 80097fe:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d015      	beq.n	8009832 <osMutexNew+0x96>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d006      	beq.n	800981c <osMutexNew+0x80>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	2b4f      	cmp	r3, #79	; 0x4f
 8009814:	d902      	bls.n	800981c <osMutexNew+0x80>
          mem = 1;
 8009816:	2301      	movs	r3, #1
 8009818:	61bb      	str	r3, [r7, #24]
 800981a:	e00c      	b.n	8009836 <osMutexNew+0x9a>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d108      	bne.n	8009836 <osMutexNew+0x9a>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d104      	bne.n	8009836 <osMutexNew+0x9a>
            mem = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	e001      	b.n	8009836 <osMutexNew+0x9a>
          }
        }
      }
      else {
        mem = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d114      	bne.n	8009866 <osMutexNew+0xca>
        if (rmtx != 0U) {
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d008      	beq.n	8009854 <osMutexNew+0xb8>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	0019      	movs	r1, r3
 8009848:	2004      	movs	r0, #4
 800984a:	f000 fe7e 	bl	800a54a <xQueueCreateMutexStatic>
 800984e:	0003      	movs	r3, r0
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
 8009852:	e019      	b.n	8009888 <osMutexNew+0xec>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	0019      	movs	r1, r3
 800985a:	2001      	movs	r0, #1
 800985c:	f000 fe75 	bl	800a54a <xQueueCreateMutexStatic>
 8009860:	0003      	movs	r3, r0
 8009862:	627b      	str	r3, [r7, #36]	; 0x24
 8009864:	e010      	b.n	8009888 <osMutexNew+0xec>
        }
      }
      else {
        if (mem == 0) {
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10d      	bne.n	8009888 <osMutexNew+0xec>
          if (rmtx != 0U) {
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d005      	beq.n	800987e <osMutexNew+0xe2>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009872:	2004      	movs	r0, #4
 8009874:	f000 fe4d 	bl	800a512 <xQueueCreateMutex>
 8009878:	0003      	movs	r3, r0
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
 800987c:	e004      	b.n	8009888 <osMutexNew+0xec>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800987e:	2001      	movs	r0, #1
 8009880:	f000 fe47 	bl	800a512 <xQueueCreateMutex>
 8009884:	0003      	movs	r3, r0
 8009886:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00e      	beq.n	80098ac <osMutexNew+0x110>
        if (attr != NULL) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <osMutexNew+0x100>
          name = attr->name;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	617b      	str	r3, [r7, #20]
 800989a:	e001      	b.n	80098a0 <osMutexNew+0x104>
        } else {
          name = NULL;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	0011      	movs	r1, r2
 80098a6:	0018      	movs	r0, r3
 80098a8:	f001 fb66 	bl	800af78 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d006      	beq.n	80098c0 <osMutexNew+0x124>
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d003      	beq.n	80098c0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	2201      	movs	r2, #1
 80098bc:	4313      	orrs	r3, r2
 80098be:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098c2:	0018      	movs	r0, r3
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b00a      	add	sp, #40	; 0x28
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	46c0      	nop			; (mov r8, r8)
 80098cc:	20001150 	.word	0x20001150

080098d0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	4393      	bics	r3, r2
 80098e0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	4013      	ands	r3, r2
 80098e8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098ee:	f3ef 8305 	mrs	r3, IPSR
 80098f2:	613b      	str	r3, [r7, #16]
  return(result);
 80098f4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <osMutexAcquire+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098fa:	f3ef 8310 	mrs	r3, PRIMASK
 80098fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d007      	beq.n	8009916 <osMutexAcquire+0x46>
 8009906:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <osMutexAcquire+0xb4>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b02      	cmp	r3, #2
 800990c:	d103      	bne.n	8009916 <osMutexAcquire+0x46>
    stat = osErrorISR;
 800990e:	2306      	movs	r3, #6
 8009910:	425b      	negs	r3, r3
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	e030      	b.n	8009978 <osMutexAcquire+0xa8>
  }
  else if (hMutex == NULL) {
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d103      	bne.n	8009924 <osMutexAcquire+0x54>
    stat = osErrorParameter;
 800991c:	2304      	movs	r3, #4
 800991e:	425b      	negs	r3, r3
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	e029      	b.n	8009978 <osMutexAcquire+0xa8>
  }
  else {
    if (rmtx != 0U) {
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d013      	beq.n	8009952 <osMutexAcquire+0x82>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	0011      	movs	r1, r2
 8009930:	0018      	movs	r0, r3
 8009932:	f000 fe55 	bl	800a5e0 <xQueueTakeMutexRecursive>
 8009936:	0003      	movs	r3, r0
 8009938:	2b01      	cmp	r3, #1
 800993a:	d01d      	beq.n	8009978 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <osMutexAcquire+0x7a>
          stat = osErrorTimeout;
 8009942:	2302      	movs	r3, #2
 8009944:	425b      	negs	r3, r3
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	e016      	b.n	8009978 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800994a:	2303      	movs	r3, #3
 800994c:	425b      	negs	r3, r3
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	e012      	b.n	8009978 <osMutexAcquire+0xa8>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	0011      	movs	r1, r2
 8009958:	0018      	movs	r0, r3
 800995a:	f001 f85b 	bl	800aa14 <xQueueSemaphoreTake>
 800995e:	0003      	movs	r3, r0
 8009960:	2b01      	cmp	r3, #1
 8009962:	d009      	beq.n	8009978 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <osMutexAcquire+0xa2>
          stat = osErrorTimeout;
 800996a:	2302      	movs	r3, #2
 800996c:	425b      	negs	r3, r3
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	e002      	b.n	8009978 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 8009972:	2303      	movs	r3, #3
 8009974:	425b      	negs	r3, r3
 8009976:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009978:	69fb      	ldr	r3, [r7, #28]
}
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	b008      	add	sp, #32
 8009980:	bd80      	pop	{r7, pc}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	20001150 	.word	0x20001150

08009988 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	4393      	bics	r3, r2
 8009996:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	4013      	ands	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099a4:	f3ef 8305 	mrs	r3, IPSR
 80099a8:	613b      	str	r3, [r7, #16]
  return(result);
 80099aa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d109      	bne.n	80099c4 <osMutexRelease+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099b0:	f3ef 8310 	mrs	r3, PRIMASK
 80099b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d007      	beq.n	80099cc <osMutexRelease+0x44>
 80099bc:	4b16      	ldr	r3, [pc, #88]	; (8009a18 <osMutexRelease+0x90>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d103      	bne.n	80099cc <osMutexRelease+0x44>
    stat = osErrorISR;
 80099c4:	2306      	movs	r3, #6
 80099c6:	425b      	negs	r3, r3
 80099c8:	61fb      	str	r3, [r7, #28]
 80099ca:	e020      	b.n	8009a0e <osMutexRelease+0x86>
  }
  else if (hMutex == NULL) {
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d103      	bne.n	80099da <osMutexRelease+0x52>
    stat = osErrorParameter;
 80099d2:	2304      	movs	r3, #4
 80099d4:	425b      	negs	r3, r3
 80099d6:	61fb      	str	r3, [r7, #28]
 80099d8:	e019      	b.n	8009a0e <osMutexRelease+0x86>
  }
  else {
    if (rmtx != 0U) {
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00a      	beq.n	80099f6 <osMutexRelease+0x6e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	0018      	movs	r0, r3
 80099e4:	f000 fdd1 	bl	800a58a <xQueueGiveMutexRecursive>
 80099e8:	0003      	movs	r3, r0
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d00f      	beq.n	8009a0e <osMutexRelease+0x86>
        stat = osErrorResource;
 80099ee:	2303      	movs	r3, #3
 80099f0:	425b      	negs	r3, r3
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	e00b      	b.n	8009a0e <osMutexRelease+0x86>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80099f6:	69b8      	ldr	r0, [r7, #24]
 80099f8:	2300      	movs	r3, #0
 80099fa:	2200      	movs	r2, #0
 80099fc:	2100      	movs	r1, #0
 80099fe:	f000 fe1f 	bl	800a640 <xQueueGenericSend>
 8009a02:	0003      	movs	r3, r0
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d002      	beq.n	8009a0e <osMutexRelease+0x86>
        stat = osErrorResource;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	425b      	negs	r3, r3
 8009a0c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009a0e:	69fb      	ldr	r3, [r7, #28]
}
 8009a10:	0018      	movs	r0, r3
 8009a12:	46bd      	mov	sp, r7
 8009a14:	b008      	add	sp, #32
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20001150 	.word	0x20001150

08009a1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b08d      	sub	sp, #52	; 0x34
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a2c:	f3ef 8305 	mrs	r3, IPSR
 8009a30:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d000      	beq.n	8009a3a <osMessageQueueNew+0x1e>
 8009a38:	e06f      	b.n	8009b1a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8009a3e:	617b      	str	r3, [r7, #20]
  return(result);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d004      	beq.n	8009a50 <osMessageQueueNew+0x34>
 8009a46:	4b37      	ldr	r3, [pc, #220]	; (8009b24 <osMessageQueueNew+0x108>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d100      	bne.n	8009a50 <osMessageQueueNew+0x34>
 8009a4e:	e064      	b.n	8009b1a <osMessageQueueNew+0xfe>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d100      	bne.n	8009a58 <osMessageQueueNew+0x3c>
 8009a56:	e060      	b.n	8009b1a <osMessageQueueNew+0xfe>
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d05d      	beq.n	8009b1a <osMessageQueueNew+0xfe>
    mem = -1;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	425b      	negs	r3, r3
 8009a62:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d028      	beq.n	8009abc <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d011      	beq.n	8009a96 <osMessageQueueNew+0x7a>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	2b4f      	cmp	r3, #79	; 0x4f
 8009a78:	d90d      	bls.n	8009a96 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d009      	beq.n	8009a96 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695a      	ldr	r2, [r3, #20]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	68b9      	ldr	r1, [r7, #8]
 8009a8a:	434b      	muls	r3, r1
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d302      	bcc.n	8009a96 <osMessageQueueNew+0x7a>
        mem = 1;
 8009a90:	2301      	movs	r3, #1
 8009a92:	623b      	str	r3, [r7, #32]
 8009a94:	e014      	b.n	8009ac0 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d110      	bne.n	8009ac0 <osMessageQueueNew+0xa4>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10c      	bne.n	8009ac0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <osMessageQueueNew+0xa4>
          mem = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	623b      	str	r3, [r7, #32]
 8009aba:	e001      	b.n	8009ac0 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d10c      	bne.n	8009ae0 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691a      	ldr	r2, [r3, #16]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	2400      	movs	r4, #0
 8009ad4:	9400      	str	r4, [sp, #0]
 8009ad6:	f000 fc5a 	bl	800a38e <xQueueGenericCreateStatic>
 8009ada:	0003      	movs	r3, r0
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ade:	e00a      	b.n	8009af6 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d107      	bne.n	8009af6 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	0018      	movs	r0, r3
 8009aee:	f000 fc99 	bl	800a424 <xQueueGenericCreate>
 8009af2:	0003      	movs	r3, r0
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00e      	beq.n	8009b1a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <osMessageQueueNew+0xee>
        name = attr->name;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	61fb      	str	r3, [r7, #28]
 8009b08:	e001      	b.n	8009b0e <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	0011      	movs	r1, r2
 8009b14:	0018      	movs	r0, r3
 8009b16:	f001 fa2f 	bl	800af78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	b00b      	add	sp, #44	; 0x2c
 8009b22:	bd90      	pop	{r4, r7, pc}
 8009b24:	20001150 	.word	0x20001150

08009b28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08a      	sub	sp, #40	; 0x28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	1dfb      	adds	r3, r7, #7
 8009b36:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b40:	f3ef 8305 	mrs	r3, IPSR
 8009b44:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b46:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b50:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d028      	beq.n	8009baa <osMessageQueuePut+0x82>
 8009b58:	4b26      	ldr	r3, [pc, #152]	; (8009bf4 <osMessageQueuePut+0xcc>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d124      	bne.n	8009baa <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d005      	beq.n	8009b72 <osMessageQueuePut+0x4a>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <osMessageQueuePut+0x4a>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 8009b72:	2304      	movs	r3, #4
 8009b74:	425b      	negs	r3, r3
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b78:	e035      	b.n	8009be6 <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b7e:	2314      	movs	r3, #20
 8009b80:	18fa      	adds	r2, r7, r3
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	6a38      	ldr	r0, [r7, #32]
 8009b86:	2300      	movs	r3, #0
 8009b88:	f000 fe1e 	bl	800a7c8 <xQueueGenericSendFromISR>
 8009b8c:	0003      	movs	r3, r0
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d003      	beq.n	8009b9a <osMessageQueuePut+0x72>
        stat = osErrorResource;
 8009b92:	2303      	movs	r3, #3
 8009b94:	425b      	negs	r3, r3
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b98:	e025      	b.n	8009be6 <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d022      	beq.n	8009be6 <osMessageQueuePut+0xbe>
 8009ba0:	4b15      	ldr	r3, [pc, #84]	; (8009bf8 <osMessageQueuePut+0xd0>)
 8009ba2:	2280      	movs	r2, #128	; 0x80
 8009ba4:	0552      	lsls	r2, r2, #21
 8009ba6:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009ba8:	e01d      	b.n	8009be6 <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <osMessageQueuePut+0x8e>
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d103      	bne.n	8009bbe <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 8009bb6:	2304      	movs	r3, #4
 8009bb8:	425b      	negs	r3, r3
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
 8009bbc:	e014      	b.n	8009be8 <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	6a38      	ldr	r0, [r7, #32]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f000 fd3b 	bl	800a640 <xQueueGenericSend>
 8009bca:	0003      	movs	r3, r0
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d00b      	beq.n	8009be8 <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	425b      	negs	r3, r3
 8009bda:	627b      	str	r3, [r7, #36]	; 0x24
 8009bdc:	e004      	b.n	8009be8 <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 8009bde:	2303      	movs	r3, #3
 8009be0:	425b      	negs	r3, r3
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
 8009be4:	e000      	b.n	8009be8 <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009be6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bea:	0018      	movs	r0, r3
 8009bec:	46bd      	mov	sp, r7
 8009bee:	b00a      	add	sp, #40	; 0x28
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	20001150 	.word	0x20001150
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08a      	sub	sp, #40	; 0x28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c12:	f3ef 8305 	mrs	r3, IPSR
 8009c16:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c18:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d109      	bne.n	8009c32 <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c22:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d028      	beq.n	8009c7c <osMessageQueueGet+0x80>
 8009c2a:	4b26      	ldr	r3, [pc, #152]	; (8009cc4 <osMessageQueueGet+0xc8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d124      	bne.n	8009c7c <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <osMessageQueueGet+0x48>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <osMessageQueueGet+0x48>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 8009c44:	2304      	movs	r3, #4
 8009c46:	425b      	negs	r3, r3
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c4a:	e035      	b.n	8009cb8 <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c50:	2314      	movs	r3, #20
 8009c52:	18fa      	adds	r2, r7, r3
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	0018      	movs	r0, r3
 8009c5a:	f000 ffb5 	bl	800abc8 <xQueueReceiveFromISR>
 8009c5e:	0003      	movs	r3, r0
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d003      	beq.n	8009c6c <osMessageQueueGet+0x70>
        stat = osErrorResource;
 8009c64:	2303      	movs	r3, #3
 8009c66:	425b      	negs	r3, r3
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c6a:	e025      	b.n	8009cb8 <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d022      	beq.n	8009cb8 <osMessageQueueGet+0xbc>
 8009c72:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <osMessageQueueGet+0xcc>)
 8009c74:	2280      	movs	r2, #128	; 0x80
 8009c76:	0552      	lsls	r2, r2, #21
 8009c78:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c7a:	e01d      	b.n	8009cb8 <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <osMessageQueueGet+0x8c>
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 8009c88:	2304      	movs	r3, #4
 8009c8a:	425b      	negs	r3, r3
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8e:	e014      	b.n	8009cba <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	68b9      	ldr	r1, [r7, #8]
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	0018      	movs	r0, r3
 8009c98:	f000 fe07 	bl	800a8aa <xQueueReceive>
 8009c9c:	0003      	movs	r3, r0
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d00b      	beq.n	8009cba <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 8009ca8:	2302      	movs	r3, #2
 8009caa:	425b      	negs	r3, r3
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
 8009cae:	e004      	b.n	8009cba <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	425b      	negs	r3, r3
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb6:	e000      	b.n	8009cba <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	b00a      	add	sp, #40	; 0x28
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20001150 	.word	0x20001150
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d102      	bne.n	8009ce4 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	e01c      	b.n	8009d1e <osMessageQueueGetCount+0x52>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce4:	f3ef 8305 	mrs	r3, IPSR
 8009ce8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d109      	bne.n	8009d04 <osMessageQueueGetCount+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <osMessageQueueGetCount+0x46>
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <osMessageQueueGetCount+0x5c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d106      	bne.n	8009d12 <osMessageQueueGetCount+0x46>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	0018      	movs	r0, r3
 8009d08:	f000 ffd6 	bl	800acb8 <uxQueueMessagesWaitingFromISR>
 8009d0c:	0003      	movs	r3, r0
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	e005      	b.n	8009d1e <osMessageQueueGetCount+0x52>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	0018      	movs	r0, r3
 8009d16:	f000 ffba 	bl	800ac8e <uxQueueMessagesWaiting>
 8009d1a:	0003      	movs	r3, r0
 8009d1c:	617b      	str	r3, [r7, #20]
  }

  return ((uint32_t)count);
 8009d1e:	697b      	ldr	r3, [r7, #20]
}
 8009d20:	0018      	movs	r0, r3
 8009d22:	46bd      	mov	sp, r7
 8009d24:	b006      	add	sp, #24
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20001150 	.word	0x20001150

08009d2c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d38:	f3ef 8305 	mrs	r3, IPSR
 8009d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d109      	bne.n	8009d58 <osMessageQueueDelete+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d44:	f3ef 8310 	mrs	r3, PRIMASK
 8009d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d007      	beq.n	8009d60 <osMessageQueueDelete+0x34>
 8009d50:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <osMessageQueueDelete+0x60>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d103      	bne.n	8009d60 <osMessageQueueDelete+0x34>
    stat = osErrorISR;
 8009d58:	2306      	movs	r3, #6
 8009d5a:	425b      	negs	r3, r3
 8009d5c:	617b      	str	r3, [r7, #20]
 8009d5e:	e010      	b.n	8009d82 <osMessageQueueDelete+0x56>
  }
  else if (hQueue == NULL) {
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d103      	bne.n	8009d6e <osMessageQueueDelete+0x42>
    stat = osErrorParameter;
 8009d66:	2304      	movs	r3, #4
 8009d68:	425b      	negs	r3, r3
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e009      	b.n	8009d82 <osMessageQueueDelete+0x56>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	0018      	movs	r0, r3
 8009d72:	f001 f929 	bl	800afc8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f000 ffac 	bl	800acda <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009d82:	697b      	ldr	r3, [r7, #20]
}
 8009d84:	0018      	movs	r0, r3
 8009d86:	46bd      	mov	sp, r7
 8009d88:	b006      	add	sp, #24
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20001150 	.word	0x20001150

08009d90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4a06      	ldr	r2, [pc, #24]	; (8009db8 <vApplicationGetIdleTaskMemory+0x28>)
 8009da0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	4a05      	ldr	r2, [pc, #20]	; (8009dbc <vApplicationGetIdleTaskMemory+0x2c>)
 8009da6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2280      	movs	r2, #128	; 0x80
 8009dac:	601a      	str	r2, [r3, #0]
}
 8009dae:	46c0      	nop			; (mov r8, r8)
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b004      	add	sp, #16
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	20001154 	.word	0x20001154
 8009dbc:	20001210 	.word	0x20001210

08009dc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4a06      	ldr	r2, [pc, #24]	; (8009de8 <vApplicationGetTimerTaskMemory+0x28>)
 8009dd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4a05      	ldr	r2, [pc, #20]	; (8009dec <vApplicationGetTimerTaskMemory+0x2c>)
 8009dd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2280      	movs	r2, #128	; 0x80
 8009ddc:	0052      	lsls	r2, r2, #1
 8009dde:	601a      	str	r2, [r3, #0]
}
 8009de0:	46c0      	nop			; (mov r8, r8)
 8009de2:	46bd      	mov	sp, r7
 8009de4:	b004      	add	sp, #16
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20001410 	.word	0x20001410
 8009dec:	200014cc 	.word	0x200014cc

08009df0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <xEventGroupCreateStatic+0x12>
 8009dfe:	b672      	cpsid	i
 8009e00:	e7fe      	b.n	8009e00 <xEventGroupCreateStatic+0x10>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009e02:	2320      	movs	r3, #32
 8009e04:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	2b20      	cmp	r3, #32
 8009e0a:	d001      	beq.n	8009e10 <xEventGroupCreateStatic+0x20>
 8009e0c:	b672      	cpsid	i
 8009e0e:	e7fe      	b.n	8009e0e <xEventGroupCreateStatic+0x1e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60fb      	str	r3, [r7, #12]

		if( pxEventBits != NULL )
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <xEventGroupCreateStatic+0x40>
		{
			pxEventBits->uxEventBits = 0;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3304      	adds	r3, #4
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 f9b5 	bl	800a194 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8009e30:	68fb      	ldr	r3, [r7, #12]
	}
 8009e32:	0018      	movs	r0, r3
 8009e34:	46bd      	mov	sp, r7
 8009e36:	b004      	add	sp, #16
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8009e40:	2020      	movs	r0, #32
 8009e42:	f002 fe05 	bl	800ca50 <pvPortMalloc>
 8009e46:	0003      	movs	r3, r0
 8009e48:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00a      	beq.n	8009e66 <xEventGroupCreate+0x2c>
		{
			pxEventBits->uxEventBits = 0;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	0018      	movs	r0, r3
 8009e5c:	f000 f99a 	bl	800a194 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8009e66:	687b      	ldr	r3, [r7, #4]
	}
 8009e68:	0018      	movs	r0, r3
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b002      	add	sp, #8
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08c      	sub	sp, #48	; 0x30
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009e86:	2300      	movs	r3, #0
 8009e88:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <xEventGroupWaitBits+0x24>
 8009e90:	b672      	cpsid	i
 8009e92:	e7fe      	b.n	8009e92 <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	0e1b      	lsrs	r3, r3, #24
 8009e98:	061b      	lsls	r3, r3, #24
 8009e9a:	d001      	beq.n	8009ea0 <xEventGroupWaitBits+0x30>
 8009e9c:	b672      	cpsid	i
 8009e9e:	e7fe      	b.n	8009e9e <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <xEventGroupWaitBits+0x3a>
 8009ea6:	b672      	cpsid	i
 8009ea8:	e7fe      	b.n	8009ea8 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009eaa:	f001 ff41 	bl	800bd30 <xTaskGetSchedulerState>
 8009eae:	1e03      	subs	r3, r0, #0
 8009eb0:	d102      	bne.n	8009eb8 <xEventGroupWaitBits+0x48>
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <xEventGroupWaitBits+0x4c>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e000      	b.n	8009ebe <xEventGroupWaitBits+0x4e>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <xEventGroupWaitBits+0x56>
 8009ec2:	b672      	cpsid	i
 8009ec4:	e7fe      	b.n	8009ec4 <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 8009ec6:	f001 faef 	bl	800b4a8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f000 f926 	bl	800a128 <prvTestWaitCondition>
 8009edc:	0003      	movs	r3, r0
 8009ede:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00e      	beq.n	8009f04 <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d02a      	beq.n	8009f4a <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	43d2      	mvns	r2, r2
 8009efc:	401a      	ands	r2, r3
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	e022      	b.n	8009f4a <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	623b      	str	r3, [r7, #32]
 8009f12:	e01a      	b.n	8009f4a <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d004      	beq.n	8009f24 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	2280      	movs	r2, #128	; 0x80
 8009f1e:	0452      	lsls	r2, r2, #17
 8009f20:	4313      	orrs	r3, r2
 8009f22:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d004      	beq.n	8009f34 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	2280      	movs	r2, #128	; 0x80
 8009f2e:	04d2      	lsls	r2, r2, #19
 8009f30:	4313      	orrs	r3, r2
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	1d18      	adds	r0, r3, #4
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f40:	0019      	movs	r1, r3
 8009f42:	f001 fca3 	bl	800b88c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009f4a:	f001 fab9 	bl	800b4c0 <xTaskResumeAll>
 8009f4e:	0003      	movs	r3, r0
 8009f50:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d02c      	beq.n	8009fb2 <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 8009f5e:	f002 fccf 	bl	800c900 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009f62:	f002 f83f 	bl	800bfe4 <uxTaskResetEventItemValue>
 8009f66:	0003      	movs	r3, r0
 8009f68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f6c:	2380      	movs	r3, #128	; 0x80
 8009f6e:	049b      	lsls	r3, r3, #18
 8009f70:	4013      	ands	r3, r2
 8009f72:	d11a      	bne.n	8009faa <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 8009f74:	f002 fcd4 	bl	800c920 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	0018      	movs	r0, r3
 8009f86:	f000 f8cf 	bl	800a128 <prvTestWaitCondition>
 8009f8a:	1e03      	subs	r3, r0, #0
 8009f8c:	d009      	beq.n	8009fa2 <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d006      	beq.n	8009fa2 <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	43d2      	mvns	r2, r2
 8009f9c:	401a      	ands	r2, r3
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 8009fa6:	f002 fccd 	bl	800c944 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	b00c      	add	sp, #48	; 0x30
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08c      	sub	sp, #48	; 0x30
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <xEventGroupSetBits+0x20>
 8009fd8:	b672      	cpsid	i
 8009fda:	e7fe      	b.n	8009fda <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	0e1b      	lsrs	r3, r3, #24
 8009fe0:	061b      	lsls	r3, r3, #24
 8009fe2:	d001      	beq.n	8009fe8 <xEventGroupSetBits+0x2c>
 8009fe4:	b672      	cpsid	i
 8009fe6:	e7fe      	b.n	8009fe6 <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	3304      	adds	r3, #4
 8009fec:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 8009ff4:	f001 fa58 	bl	800b4a8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	431a      	orrs	r2, r3
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a00a:	e03d      	b.n	800a088 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 800a018:	2300      	movs	r3, #0
 800a01a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	0e1b      	lsrs	r3, r3, #24
 800a020:	061b      	lsls	r3, r3, #24
 800a022:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	021b      	lsls	r3, r3, #8
 800a028:	0a1b      	lsrs	r3, r3, #8
 800a02a:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	2380      	movs	r3, #128	; 0x80
 800a030:	04db      	lsls	r3, r3, #19
 800a032:	4013      	ands	r3, r2
 800a034:	d107      	bne.n	800a046 <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4013      	ands	r3, r2
 800a03e:	d00b      	beq.n	800a058 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 800a040:	2301      	movs	r3, #1
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
 800a044:	e008      	b.n	800a058 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4013      	ands	r3, r2
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	d101      	bne.n	800a058 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d012      	beq.n	800a084 <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	2380      	movs	r3, #128	; 0x80
 800a062:	045b      	lsls	r3, r3, #17
 800a064:	4013      	ands	r3, r2
 800a066:	d003      	beq.n	800a070 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2280      	movs	r2, #128	; 0x80
 800a076:	0492      	lsls	r2, r2, #18
 800a078:	431a      	orrs	r2, r3
 800a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07c:	0011      	movs	r1, r2
 800a07e:	0018      	movs	r0, r3
 800a080:	f001 fcb4 	bl	800b9ec <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 800a088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d1bd      	bne.n	800a00c <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a096:	43d2      	mvns	r2, r2
 800a098:	401a      	ands	r2, r3
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a09e:	f001 fa0f 	bl	800b4c0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	681b      	ldr	r3, [r3, #0]
}
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b00c      	add	sp, #48	; 0x30
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60fb      	str	r3, [r7, #12]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800a0c0:	f001 f9f2 	bl	800b4a8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800a0c4:	e00f      	b.n	800a0e6 <vEventGroupDelete+0x38>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d101      	bne.n	800a0d6 <vEventGroupDelete+0x28>
 800a0d2:	b672      	cpsid	i
 800a0d4:	e7fe      	b.n	800a0d4 <vEventGroupDelete+0x26>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	2280      	movs	r2, #128	; 0x80
 800a0dc:	0492      	lsls	r2, r2, #18
 800a0de:	0011      	movs	r1, r2
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f001 fc83 	bl	800b9ec <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1eb      	bne.n	800a0c6 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	7f1b      	ldrb	r3, [r3, #28]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d103      	bne.n	800a0fe <vEventGroupDelete+0x50>
			{
				vPortFree( pxEventBits );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	f002 fd4f 	bl	800cb9c <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 800a0fe:	f001 f9df 	bl	800b4c0 <xTaskResumeAll>
}
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	46bd      	mov	sp, r7
 800a106:	b004      	add	sp, #16
 800a108:	bd80      	pop	{r7, pc}

0800a10a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	0011      	movs	r1, r2
 800a11a:	0018      	movs	r0, r3
 800a11c:	f7ff ff4e 	bl	8009fbc <xEventGroupSetBits>
}
 800a120:	46c0      	nop			; (mov r8, r8)
 800a122:	46bd      	mov	sp, r7
 800a124:	b002      	add	sp, #8
 800a126:	bd80      	pop	{r7, pc}

0800a128 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a134:	2300      	movs	r3, #0
 800a136:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d106      	bne.n	800a14c <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	4013      	ands	r3, r2
 800a144:	d00a      	beq.n	800a15c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800a146:	2301      	movs	r3, #1
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	e007      	b.n	800a15c <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	4013      	ands	r3, r2
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	429a      	cmp	r2, r3
 800a156:	d101      	bne.n	800a15c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a15c:	697b      	ldr	r3, [r7, #20]
}
 800a15e:	0018      	movs	r0, r3
 800a160:	46bd      	mov	sp, r7
 800a162:	b006      	add	sp, #24
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	68f9      	ldr	r1, [r7, #12]
 800a17a:	4805      	ldr	r0, [pc, #20]	; (800a190 <xEventGroupSetBitsFromISR+0x28>)
 800a17c:	f002 fb0e 	bl	800c79c <xTimerPendFunctionCallFromISR>
 800a180:	0003      	movs	r3, r0
 800a182:	617b      	str	r3, [r7, #20]

		return xReturn;
 800a184:	697b      	ldr	r3, [r7, #20]
	}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	b006      	add	sp, #24
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	46c0      	nop			; (mov r8, r8)
 800a190:	0800a10b 	.word	0x0800a10b

0800a194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	001a      	movs	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	4252      	negs	r2, r2
 800a1ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	001a      	movs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	001a      	movs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1c8:	46c0      	nop			; (mov r8, r8)
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	b002      	add	sp, #8
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	b002      	add	sp, #8
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
}
 800a222:	46c0      	nop			; (mov r8, r8)
 800a224:	46bd      	mov	sp, r7
 800a226:	b004      	add	sp, #16
 800a228:	bd80      	pop	{r7, pc}

0800a22a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	3301      	adds	r3, #1
 800a23e:	d103      	bne.n	800a248 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	60fb      	str	r3, [r7, #12]
 800a246:	e00c      	b.n	800a262 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3308      	adds	r3, #8
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	e002      	b.n	800a256 <vListInsert+0x2c>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d2f6      	bcs.n	800a250 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
}
 800a28e:	46c0      	nop			; (mov r8, r8)
 800a290:	46bd      	mov	sp, r7
 800a292:	b004      	add	sp, #16
 800a294:	bd80      	pop	{r7, pc}

0800a296 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6892      	ldr	r2, [r2, #8]
 800a2ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	6852      	ldr	r2, [r2, #4]
 800a2b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d103      	bne.n	800a2ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689a      	ldr	r2, [r3, #8]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	1e5a      	subs	r2, r3, #1
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
}
 800a2de:	0018      	movs	r0, r3
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b004      	add	sp, #16
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <xQueueGenericReset+0x18>
 800a2fa:	b672      	cpsid	i
 800a2fc:	e7fe      	b.n	800a2fc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800a2fe:	f002 fb0f 	bl	800c920 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	434b      	muls	r3, r1
 800a310:	18d2      	adds	r2, r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	1e59      	subs	r1, r3, #1
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	434b      	muls	r3, r1
 800a334:	18d2      	adds	r2, r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2244      	movs	r2, #68	; 0x44
 800a33e:	21ff      	movs	r1, #255	; 0xff
 800a340:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2245      	movs	r2, #69	; 0x45
 800a346:	21ff      	movs	r1, #255	; 0xff
 800a348:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10d      	bne.n	800a36c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d013      	beq.n	800a380 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3310      	adds	r3, #16
 800a35c:	0018      	movs	r0, r3
 800a35e:	f001 fae9 	bl	800b934 <xTaskRemoveFromEventList>
 800a362:	1e03      	subs	r3, r0, #0
 800a364:	d00c      	beq.n	800a380 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a366:	f002 facb 	bl	800c900 <vPortYield>
 800a36a:	e009      	b.n	800a380 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3310      	adds	r3, #16
 800a370:	0018      	movs	r0, r3
 800a372:	f7ff ff0f 	bl	800a194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3324      	adds	r3, #36	; 0x24
 800a37a:	0018      	movs	r0, r3
 800a37c:	f7ff ff0a 	bl	800a194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a380:	f002 fae0 	bl	800c944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a384:	2301      	movs	r3, #1
}
 800a386:	0018      	movs	r0, r3
 800a388:	46bd      	mov	sp, r7
 800a38a:	b004      	add	sp, #16
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a38e:	b590      	push	{r4, r7, lr}
 800a390:	b089      	sub	sp, #36	; 0x24
 800a392:	af02      	add	r7, sp, #8
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <xQueueGenericCreateStatic+0x18>
 800a3a2:	b672      	cpsid	i
 800a3a4:	e7fe      	b.n	800a3a4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <xQueueGenericCreateStatic+0x22>
 800a3ac:	b672      	cpsid	i
 800a3ae:	e7fe      	b.n	800a3ae <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d002      	beq.n	800a3bc <xQueueGenericCreateStatic+0x2e>
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <xQueueGenericCreateStatic+0x32>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e000      	b.n	800a3c2 <xQueueGenericCreateStatic+0x34>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <xQueueGenericCreateStatic+0x3c>
 800a3c6:	b672      	cpsid	i
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <xQueueGenericCreateStatic+0x48>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <xQueueGenericCreateStatic+0x4c>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e000      	b.n	800a3dc <xQueueGenericCreateStatic+0x4e>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <xQueueGenericCreateStatic+0x56>
 800a3e0:	b672      	cpsid	i
 800a3e2:	e7fe      	b.n	800a3e2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3e4:	2350      	movs	r3, #80	; 0x50
 800a3e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2b50      	cmp	r3, #80	; 0x50
 800a3ec:	d001      	beq.n	800a3f2 <xQueueGenericCreateStatic+0x64>
 800a3ee:	b672      	cpsid	i
 800a3f0:	e7fe      	b.n	800a3f0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00e      	beq.n	800a41a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2246      	movs	r2, #70	; 0x46
 800a400:	2101      	movs	r1, #1
 800a402:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a404:	2328      	movs	r3, #40	; 0x28
 800a406:	18fb      	adds	r3, r7, r3
 800a408:	781c      	ldrb	r4, [r3, #0]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	68b9      	ldr	r1, [r7, #8]
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	0023      	movs	r3, r4
 800a416:	f000 f83b 	bl	800a490 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a41a:	697b      	ldr	r3, [r7, #20]
	}
 800a41c:	0018      	movs	r0, r3
 800a41e:	46bd      	mov	sp, r7
 800a420:	b007      	add	sp, #28
 800a422:	bd90      	pop	{r4, r7, pc}

0800a424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b08b      	sub	sp, #44	; 0x2c
 800a428:	af02      	add	r7, sp, #8
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	1dfb      	adds	r3, r7, #7
 800a430:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <xQueueGenericCreate+0x18>
 800a438:	b672      	cpsid	i
 800a43a:	e7fe      	b.n	800a43a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d102      	bne.n	800a448 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a442:	2300      	movs	r3, #0
 800a444:	61fb      	str	r3, [r7, #28]
 800a446:	e003      	b.n	800a450 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	4353      	muls	r3, r2
 800a44e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	3350      	adds	r3, #80	; 0x50
 800a454:	0018      	movs	r0, r3
 800a456:	f002 fafb 	bl	800ca50 <pvPortMalloc>
 800a45a:	0003      	movs	r3, r0
 800a45c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d010      	beq.n	800a486 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	3350      	adds	r3, #80	; 0x50
 800a468:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2246      	movs	r2, #70	; 0x46
 800a46e:	2100      	movs	r1, #0
 800a470:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a472:	1dfb      	adds	r3, r7, #7
 800a474:	781c      	ldrb	r4, [r3, #0]
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	0023      	movs	r3, r4
 800a482:	f000 f805 	bl	800a490 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a486:	69bb      	ldr	r3, [r7, #24]
	}
 800a488:	0018      	movs	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b009      	add	sp, #36	; 0x24
 800a48e:	bd90      	pop	{r4, r7, pc}

0800a490 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	001a      	movs	r2, r3
 800a49e:	1cfb      	adds	r3, r7, #3
 800a4a0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	69ba      	ldr	r2, [r7, #24]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	e002      	b.n	800a4b6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f7ff ff0d 	bl	800a2e6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	1cfa      	adds	r2, r7, #3
 800a4d0:	214c      	movs	r1, #76	; 0x4c
 800a4d2:	7812      	ldrb	r2, [r2, #0]
 800a4d4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	b004      	add	sp, #16
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00e      	beq.n	800a50a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	2300      	movs	r3, #0
 800a502:	2200      	movs	r2, #0
 800a504:	2100      	movs	r1, #0
 800a506:	f000 f89b 	bl	800a640 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	46bd      	mov	sp, r7
 800a50e:	b002      	add	sp, #8
 800a510:	bd80      	pop	{r7, pc}

0800a512 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af00      	add	r7, sp, #0
 800a518:	0002      	movs	r2, r0
 800a51a:	1dfb      	adds	r3, r7, #7
 800a51c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a51e:	2301      	movs	r3, #1
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	2300      	movs	r3, #0
 800a524:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a526:	1dfb      	adds	r3, r7, #7
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	6939      	ldr	r1, [r7, #16]
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	0018      	movs	r0, r3
 800a530:	f7ff ff78 	bl	800a424 <xQueueGenericCreate>
 800a534:	0003      	movs	r3, r0
 800a536:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	0018      	movs	r0, r3
 800a53c:	f7ff ffcf 	bl	800a4de <prvInitialiseMutex>

		return pxNewQueue;
 800a540:	68fb      	ldr	r3, [r7, #12]
	}
 800a542:	0018      	movs	r0, r3
 800a544:	46bd      	mov	sp, r7
 800a546:	b006      	add	sp, #24
 800a548:	bd80      	pop	{r7, pc}

0800a54a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b088      	sub	sp, #32
 800a54e:	af02      	add	r7, sp, #8
 800a550:	0002      	movs	r2, r0
 800a552:	6039      	str	r1, [r7, #0]
 800a554:	1dfb      	adds	r3, r7, #7
 800a556:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a558:	2301      	movs	r3, #1
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	2300      	movs	r3, #0
 800a55e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	6939      	ldr	r1, [r7, #16]
 800a564:	6978      	ldr	r0, [r7, #20]
 800a566:	1dfb      	adds	r3, r7, #7
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	0013      	movs	r3, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	f7ff ff0d 	bl	800a38e <xQueueGenericCreateStatic>
 800a574:	0003      	movs	r3, r0
 800a576:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	0018      	movs	r0, r3
 800a57c:	f7ff ffaf 	bl	800a4de <prvInitialiseMutex>

		return pxNewQueue;
 800a580:	68fb      	ldr	r3, [r7, #12]
	}
 800a582:	0018      	movs	r0, r3
 800a584:	46bd      	mov	sp, r7
 800a586:	b006      	add	sp, #24
 800a588:	bd80      	pop	{r7, pc}

0800a58a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a58a:	b590      	push	{r4, r7, lr}
 800a58c:	b085      	sub	sp, #20
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <xQueueGiveMutexRecursive+0x16>
 800a59c:	b672      	cpsid	i
 800a59e:	e7fe      	b.n	800a59e <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	685c      	ldr	r4, [r3, #4]
 800a5a4:	f001 fbb6 	bl	800bd14 <xTaskGetCurrentTaskHandle>
 800a5a8:	0003      	movs	r3, r0
 800a5aa:	429c      	cmp	r4, r3
 800a5ac:	d111      	bne.n	800a5d2 <xQueueGiveMutexRecursive+0x48>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	1e5a      	subs	r2, r3, #1
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d105      	bne.n	800a5cc <xQueueGiveMutexRecursive+0x42>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a5c0:	68b8      	ldr	r0, [r7, #8]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	f000 f83a 	bl	800a640 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e001      	b.n	800a5d6 <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
	}
 800a5d8:	0018      	movs	r0, r3
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	b005      	add	sp, #20
 800a5de:	bd90      	pop	{r4, r7, pc}

0800a5e0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <xQueueTakeMutexRecursive+0x18>
 800a5f4:	b672      	cpsid	i
 800a5f6:	e7fe      	b.n	800a5f6 <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	685c      	ldr	r4, [r3, #4]
 800a5fc:	f001 fb8a 	bl	800bd14 <xTaskGetCurrentTaskHandle>
 800a600:	0003      	movs	r3, r0
 800a602:	429c      	cmp	r4, r3
 800a604:	d107      	bne.n	800a616 <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a610:	2301      	movs	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e00f      	b.n	800a636 <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	0011      	movs	r1, r2
 800a61c:	0018      	movs	r0, r3
 800a61e:	f000 f9f9 	bl	800aa14 <xQueueSemaphoreTake>
 800a622:	0003      	movs	r3, r0
 800a624:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d004      	beq.n	800a636 <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a636:	68fb      	ldr	r3, [r7, #12]
	}
 800a638:	0018      	movs	r0, r3
 800a63a:	46bd      	mov	sp, r7
 800a63c:	b005      	add	sp, #20
 800a63e:	bd90      	pop	{r4, r7, pc}

0800a640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08a      	sub	sp, #40	; 0x28
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a64e:	2300      	movs	r3, #0
 800a650:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <xQueueGenericSend+0x20>
 800a65c:	b672      	cpsid	i
 800a65e:	e7fe      	b.n	800a65e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <xQueueGenericSend+0x2e>
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <xQueueGenericSend+0x32>
 800a66e:	2301      	movs	r3, #1
 800a670:	e000      	b.n	800a674 <xQueueGenericSend+0x34>
 800a672:	2300      	movs	r3, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <xQueueGenericSend+0x3c>
 800a678:	b672      	cpsid	i
 800a67a:	e7fe      	b.n	800a67a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d103      	bne.n	800a68a <xQueueGenericSend+0x4a>
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a686:	2b01      	cmp	r3, #1
 800a688:	d101      	bne.n	800a68e <xQueueGenericSend+0x4e>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e000      	b.n	800a690 <xQueueGenericSend+0x50>
 800a68e:	2300      	movs	r3, #0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <xQueueGenericSend+0x58>
 800a694:	b672      	cpsid	i
 800a696:	e7fe      	b.n	800a696 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a698:	f001 fb4a 	bl	800bd30 <xTaskGetSchedulerState>
 800a69c:	1e03      	subs	r3, r0, #0
 800a69e:	d102      	bne.n	800a6a6 <xQueueGenericSend+0x66>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <xQueueGenericSend+0x6a>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e000      	b.n	800a6ac <xQueueGenericSend+0x6c>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <xQueueGenericSend+0x74>
 800a6b0:	b672      	cpsid	i
 800a6b2:	e7fe      	b.n	800a6b2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6b4:	f002 f934 	bl	800c920 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d302      	bcc.n	800a6ca <xQueueGenericSend+0x8a>
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d11e      	bne.n	800a708 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	68b9      	ldr	r1, [r7, #8]
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f000 fb34 	bl	800ad3e <prvCopyDataToQueue>
 800a6d6:	0003      	movs	r3, r0
 800a6d8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	3324      	adds	r3, #36	; 0x24
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f001 f924 	bl	800b934 <xTaskRemoveFromEventList>
 800a6ec:	1e03      	subs	r3, r0, #0
 800a6ee:	d007      	beq.n	800a700 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6f0:	f002 f906 	bl	800c900 <vPortYield>
 800a6f4:	e004      	b.n	800a700 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6fc:	f002 f900 	bl	800c900 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a700:	f002 f920 	bl	800c944 <vPortExitCritical>
				return pdPASS;
 800a704:	2301      	movs	r3, #1
 800a706:	e05b      	b.n	800a7c0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d103      	bne.n	800a716 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a70e:	f002 f919 	bl	800c944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a712:	2300      	movs	r3, #0
 800a714:	e054      	b.n	800a7c0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a71c:	2314      	movs	r3, #20
 800a71e:	18fb      	adds	r3, r7, r3
 800a720:	0018      	movs	r0, r3
 800a722:	f001 f9b5 	bl	800ba90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a726:	2301      	movs	r3, #1
 800a728:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a72a:	f002 f90b 	bl	800c944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a72e:	f000 febb 	bl	800b4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a732:	f002 f8f5 	bl	800c920 <vPortEnterCritical>
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	2244      	movs	r2, #68	; 0x44
 800a73a:	5c9b      	ldrb	r3, [r3, r2]
 800a73c:	b25b      	sxtb	r3, r3
 800a73e:	3301      	adds	r3, #1
 800a740:	d103      	bne.n	800a74a <xQueueGenericSend+0x10a>
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	2244      	movs	r2, #68	; 0x44
 800a746:	2100      	movs	r1, #0
 800a748:	5499      	strb	r1, [r3, r2]
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	2245      	movs	r2, #69	; 0x45
 800a74e:	5c9b      	ldrb	r3, [r3, r2]
 800a750:	b25b      	sxtb	r3, r3
 800a752:	3301      	adds	r3, #1
 800a754:	d103      	bne.n	800a75e <xQueueGenericSend+0x11e>
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	2245      	movs	r2, #69	; 0x45
 800a75a:	2100      	movs	r1, #0
 800a75c:	5499      	strb	r1, [r3, r2]
 800a75e:	f002 f8f1 	bl	800c944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a762:	1d3a      	adds	r2, r7, #4
 800a764:	2314      	movs	r3, #20
 800a766:	18fb      	adds	r3, r7, r3
 800a768:	0011      	movs	r1, r2
 800a76a:	0018      	movs	r0, r3
 800a76c:	f001 f9a4 	bl	800bab8 <xTaskCheckForTimeOut>
 800a770:	1e03      	subs	r3, r0, #0
 800a772:	d11e      	bne.n	800a7b2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	0018      	movs	r0, r3
 800a778:	f000 fbe6 	bl	800af48 <prvIsQueueFull>
 800a77c:	1e03      	subs	r3, r0, #0
 800a77e:	d011      	beq.n	800a7a4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	3310      	adds	r3, #16
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	0011      	movs	r1, r2
 800a788:	0018      	movs	r0, r3
 800a78a:	f001 f861 	bl	800b850 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	0018      	movs	r0, r3
 800a792:	f000 fb65 	bl	800ae60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a796:	f000 fe93 	bl	800b4c0 <xTaskResumeAll>
 800a79a:	1e03      	subs	r3, r0, #0
 800a79c:	d18a      	bne.n	800a6b4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800a79e:	f002 f8af 	bl	800c900 <vPortYield>
 800a7a2:	e787      	b.n	800a6b4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	f000 fb5a 	bl	800ae60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ac:	f000 fe88 	bl	800b4c0 <xTaskResumeAll>
 800a7b0:	e780      	b.n	800a6b4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f000 fb53 	bl	800ae60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ba:	f000 fe81 	bl	800b4c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7be:	2300      	movs	r3, #0
		}
	}
}
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	b00a      	add	sp, #40	; 0x28
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7c8:	b590      	push	{r4, r7, lr}
 800a7ca:	b089      	sub	sp, #36	; 0x24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <xQueueGenericSendFromISR+0x1c>
 800a7e0:	b672      	cpsid	i
 800a7e2:	e7fe      	b.n	800a7e2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d103      	bne.n	800a7f2 <xQueueGenericSendFromISR+0x2a>
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <xQueueGenericSendFromISR+0x2e>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <xQueueGenericSendFromISR+0x30>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <xQueueGenericSendFromISR+0x38>
 800a7fc:	b672      	cpsid	i
 800a7fe:	e7fe      	b.n	800a7fe <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d103      	bne.n	800a80e <xQueueGenericSendFromISR+0x46>
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d101      	bne.n	800a812 <xQueueGenericSendFromISR+0x4a>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <xQueueGenericSendFromISR+0x4c>
 800a812:	2300      	movs	r3, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <xQueueGenericSendFromISR+0x54>
 800a818:	b672      	cpsid	i
 800a81a:	e7fe      	b.n	800a81a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a81c:	f002 f8aa 	bl	800c974 <ulSetInterruptMaskFromISR>
 800a820:	0003      	movs	r3, r0
 800a822:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d302      	bcc.n	800a836 <xQueueGenericSendFromISR+0x6e>
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d12e      	bne.n	800a894 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a836:	2413      	movs	r4, #19
 800a838:	193b      	adds	r3, r7, r4
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	2145      	movs	r1, #69	; 0x45
 800a83e:	5c52      	ldrb	r2, [r2, r1]
 800a840:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	68b9      	ldr	r1, [r7, #8]
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	0018      	movs	r0, r3
 800a84a:	f000 fa78 	bl	800ad3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a84e:	193b      	adds	r3, r7, r4
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b25b      	sxtb	r3, r3
 800a854:	3301      	adds	r3, #1
 800a856:	d111      	bne.n	800a87c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d016      	beq.n	800a88e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	3324      	adds	r3, #36	; 0x24
 800a864:	0018      	movs	r0, r3
 800a866:	f001 f865 	bl	800b934 <xTaskRemoveFromEventList>
 800a86a:	1e03      	subs	r3, r0, #0
 800a86c:	d00f      	beq.n	800a88e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00c      	beq.n	800a88e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	e008      	b.n	800a88e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a87c:	2313      	movs	r3, #19
 800a87e:	18fb      	adds	r3, r7, r3
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	3301      	adds	r3, #1
 800a884:	b2db      	uxtb	r3, r3
 800a886:	b259      	sxtb	r1, r3
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	2245      	movs	r2, #69	; 0x45
 800a88c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a88e:	2301      	movs	r3, #1
 800a890:	61fb      	str	r3, [r7, #28]
		{
 800a892:	e001      	b.n	800a898 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a894:	2300      	movs	r3, #0
 800a896:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	0018      	movs	r0, r3
 800a89c:	f002 f870 	bl	800c980 <vClearInterruptMaskFromISR>

	return xReturn;
 800a8a0:	69fb      	ldr	r3, [r7, #28]
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b009      	add	sp, #36	; 0x24
 800a8a8:	bd90      	pop	{r4, r7, pc}

0800a8aa <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b08a      	sub	sp, #40	; 0x28
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <xQueueReceive+0x1e>
 800a8c4:	b672      	cpsid	i
 800a8c6:	e7fe      	b.n	800a8c6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d103      	bne.n	800a8d6 <xQueueReceive+0x2c>
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <xQueueReceive+0x30>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <xQueueReceive+0x32>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d101      	bne.n	800a8e4 <xQueueReceive+0x3a>
 800a8e0:	b672      	cpsid	i
 800a8e2:	e7fe      	b.n	800a8e2 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8e4:	f001 fa24 	bl	800bd30 <xTaskGetSchedulerState>
 800a8e8:	1e03      	subs	r3, r0, #0
 800a8ea:	d102      	bne.n	800a8f2 <xQueueReceive+0x48>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <xQueueReceive+0x4c>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <xQueueReceive+0x4e>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <xQueueReceive+0x56>
 800a8fc:	b672      	cpsid	i
 800a8fe:	e7fe      	b.n	800a8fe <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a900:	f002 f80e 	bl	800c920 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01a      	beq.n	800a946 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	0011      	movs	r1, r2
 800a916:	0018      	movs	r0, r3
 800a918:	f000 fa7c 	bl	800ae14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	1e5a      	subs	r2, r3, #1
 800a920:	6a3b      	ldr	r3, [r7, #32]
 800a922:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d008      	beq.n	800a93e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	3310      	adds	r3, #16
 800a930:	0018      	movs	r0, r3
 800a932:	f000 ffff 	bl	800b934 <xTaskRemoveFromEventList>
 800a936:	1e03      	subs	r3, r0, #0
 800a938:	d001      	beq.n	800a93e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a93a:	f001 ffe1 	bl	800c900 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a93e:	f002 f801 	bl	800c944 <vPortExitCritical>
				return pdPASS;
 800a942:	2301      	movs	r3, #1
 800a944:	e062      	b.n	800aa0c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a94c:	f001 fffa 	bl	800c944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a950:	2300      	movs	r3, #0
 800a952:	e05b      	b.n	800aa0c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	2b00      	cmp	r3, #0
 800a958:	d106      	bne.n	800a968 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a95a:	2314      	movs	r3, #20
 800a95c:	18fb      	adds	r3, r7, r3
 800a95e:	0018      	movs	r0, r3
 800a960:	f001 f896 	bl	800ba90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a964:	2301      	movs	r3, #1
 800a966:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a968:	f001 ffec 	bl	800c944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a96c:	f000 fd9c 	bl	800b4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a970:	f001 ffd6 	bl	800c920 <vPortEnterCritical>
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	2244      	movs	r2, #68	; 0x44
 800a978:	5c9b      	ldrb	r3, [r3, r2]
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	3301      	adds	r3, #1
 800a97e:	d103      	bne.n	800a988 <xQueueReceive+0xde>
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	2244      	movs	r2, #68	; 0x44
 800a984:	2100      	movs	r1, #0
 800a986:	5499      	strb	r1, [r3, r2]
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	2245      	movs	r2, #69	; 0x45
 800a98c:	5c9b      	ldrb	r3, [r3, r2]
 800a98e:	b25b      	sxtb	r3, r3
 800a990:	3301      	adds	r3, #1
 800a992:	d103      	bne.n	800a99c <xQueueReceive+0xf2>
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	2245      	movs	r2, #69	; 0x45
 800a998:	2100      	movs	r1, #0
 800a99a:	5499      	strb	r1, [r3, r2]
 800a99c:	f001 ffd2 	bl	800c944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9a0:	1d3a      	adds	r2, r7, #4
 800a9a2:	2314      	movs	r3, #20
 800a9a4:	18fb      	adds	r3, r7, r3
 800a9a6:	0011      	movs	r1, r2
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f001 f885 	bl	800bab8 <xTaskCheckForTimeOut>
 800a9ae:	1e03      	subs	r3, r0, #0
 800a9b0:	d11e      	bne.n	800a9f0 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	0018      	movs	r0, r3
 800a9b6:	f000 fab1 	bl	800af1c <prvIsQueueEmpty>
 800a9ba:	1e03      	subs	r3, r0, #0
 800a9bc:	d011      	beq.n	800a9e2 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	3324      	adds	r3, #36	; 0x24
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	0011      	movs	r1, r2
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f000 ff42 	bl	800b850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	f000 fa46 	bl	800ae60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9d4:	f000 fd74 	bl	800b4c0 <xTaskResumeAll>
 800a9d8:	1e03      	subs	r3, r0, #0
 800a9da:	d191      	bne.n	800a900 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800a9dc:	f001 ff90 	bl	800c900 <vPortYield>
 800a9e0:	e78e      	b.n	800a900 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	f000 fa3b 	bl	800ae60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ea:	f000 fd69 	bl	800b4c0 <xTaskResumeAll>
 800a9ee:	e787      	b.n	800a900 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f000 fa34 	bl	800ae60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9f8:	f000 fd62 	bl	800b4c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	0018      	movs	r0, r3
 800aa00:	f000 fa8c 	bl	800af1c <prvIsQueueEmpty>
 800aa04:	1e03      	subs	r3, r0, #0
 800aa06:	d100      	bne.n	800aa0a <xQueueReceive+0x160>
 800aa08:	e77a      	b.n	800a900 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	b00a      	add	sp, #40	; 0x28
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08a      	sub	sp, #40	; 0x28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa26:	2300      	movs	r3, #0
 800aa28:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <xQueueSemaphoreTake+0x20>
 800aa30:	b672      	cpsid	i
 800aa32:	e7fe      	b.n	800aa32 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <xQueueSemaphoreTake+0x2c>
 800aa3c:	b672      	cpsid	i
 800aa3e:	e7fe      	b.n	800aa3e <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa40:	f001 f976 	bl	800bd30 <xTaskGetSchedulerState>
 800aa44:	1e03      	subs	r3, r0, #0
 800aa46:	d102      	bne.n	800aa4e <xQueueSemaphoreTake+0x3a>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <xQueueSemaphoreTake+0x3e>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <xQueueSemaphoreTake+0x40>
 800aa52:	2300      	movs	r3, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <xQueueSemaphoreTake+0x48>
 800aa58:	b672      	cpsid	i
 800aa5a:	e7fe      	b.n	800aa5a <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa5c:	f001 ff60 	bl	800c920 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01d      	beq.n	800aaa8 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	1e5a      	subs	r2, r3, #1
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d104      	bne.n	800aa86 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800aa7c:	f001 fac8 	bl	800c010 <pvTaskIncrementMutexHeldCount>
 800aa80:	0002      	movs	r2, r0
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d008      	beq.n	800aaa0 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	3310      	adds	r3, #16
 800aa92:	0018      	movs	r0, r3
 800aa94:	f000 ff4e 	bl	800b934 <xTaskRemoveFromEventList>
 800aa98:	1e03      	subs	r3, r0, #0
 800aa9a:	d001      	beq.n	800aaa0 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa9c:	f001 ff30 	bl	800c900 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aaa0:	f001 ff50 	bl	800c944 <vPortExitCritical>
				return pdPASS;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e08b      	b.n	800abc0 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d108      	bne.n	800aac0 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <xQueueSemaphoreTake+0xa4>
 800aab4:	b672      	cpsid	i
 800aab6:	e7fe      	b.n	800aab6 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aab8:	f001 ff44 	bl	800c944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aabc:	2300      	movs	r3, #0
 800aabe:	e07f      	b.n	800abc0 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aac6:	230c      	movs	r3, #12
 800aac8:	18fb      	adds	r3, r7, r3
 800aaca:	0018      	movs	r0, r3
 800aacc:	f000 ffe0 	bl	800ba90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aad0:	2301      	movs	r3, #1
 800aad2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aad4:	f001 ff36 	bl	800c944 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aad8:	f000 fce6 	bl	800b4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aadc:	f001 ff20 	bl	800c920 <vPortEnterCritical>
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	2244      	movs	r2, #68	; 0x44
 800aae4:	5c9b      	ldrb	r3, [r3, r2]
 800aae6:	b25b      	sxtb	r3, r3
 800aae8:	3301      	adds	r3, #1
 800aaea:	d103      	bne.n	800aaf4 <xQueueSemaphoreTake+0xe0>
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	2244      	movs	r2, #68	; 0x44
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	5499      	strb	r1, [r3, r2]
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	2245      	movs	r2, #69	; 0x45
 800aaf8:	5c9b      	ldrb	r3, [r3, r2]
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	3301      	adds	r3, #1
 800aafe:	d103      	bne.n	800ab08 <xQueueSemaphoreTake+0xf4>
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	2245      	movs	r2, #69	; 0x45
 800ab04:	2100      	movs	r1, #0
 800ab06:	5499      	strb	r1, [r3, r2]
 800ab08:	f001 ff1c 	bl	800c944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab0c:	003a      	movs	r2, r7
 800ab0e:	230c      	movs	r3, #12
 800ab10:	18fb      	adds	r3, r7, r3
 800ab12:	0011      	movs	r1, r2
 800ab14:	0018      	movs	r0, r3
 800ab16:	f000 ffcf 	bl	800bab8 <xTaskCheckForTimeOut>
 800ab1a:	1e03      	subs	r3, r0, #0
 800ab1c:	d12e      	bne.n	800ab7c <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	0018      	movs	r0, r3
 800ab22:	f000 f9fb 	bl	800af1c <prvIsQueueEmpty>
 800ab26:	1e03      	subs	r3, r0, #0
 800ab28:	d021      	beq.n	800ab6e <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10a      	bne.n	800ab48 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800ab32:	f001 fef5 	bl	800c920 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	f001 f914 	bl	800bd68 <xTaskPriorityInherit>
 800ab40:	0003      	movs	r3, r0
 800ab42:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800ab44:	f001 fefe 	bl	800c944 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	3324      	adds	r3, #36	; 0x24
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	0011      	movs	r1, r2
 800ab50:	0018      	movs	r0, r3
 800ab52:	f000 fe7d 	bl	800b850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	0018      	movs	r0, r3
 800ab5a:	f000 f981 	bl	800ae60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab5e:	f000 fcaf 	bl	800b4c0 <xTaskResumeAll>
 800ab62:	1e03      	subs	r3, r0, #0
 800ab64:	d000      	beq.n	800ab68 <xQueueSemaphoreTake+0x154>
 800ab66:	e779      	b.n	800aa5c <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800ab68:	f001 feca 	bl	800c900 <vPortYield>
 800ab6c:	e776      	b.n	800aa5c <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	0018      	movs	r0, r3
 800ab72:	f000 f975 	bl	800ae60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab76:	f000 fca3 	bl	800b4c0 <xTaskResumeAll>
 800ab7a:	e76f      	b.n	800aa5c <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	0018      	movs	r0, r3
 800ab80:	f000 f96e 	bl	800ae60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab84:	f000 fc9c 	bl	800b4c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f000 f9c6 	bl	800af1c <prvIsQueueEmpty>
 800ab90:	1e03      	subs	r3, r0, #0
 800ab92:	d100      	bne.n	800ab96 <xQueueSemaphoreTake+0x182>
 800ab94:	e762      	b.n	800aa5c <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d010      	beq.n	800abbe <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800ab9c:	f001 fec0 	bl	800c920 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	0018      	movs	r0, r3
 800aba4:	f000 f8b5 	bl	800ad12 <prvGetDisinheritPriorityAfterTimeout>
 800aba8:	0003      	movs	r3, r0
 800abaa:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	0011      	movs	r1, r2
 800abb4:	0018      	movs	r0, r3
 800abb6:	f001 f9a1 	bl	800befc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800abba:	f001 fec3 	bl	800c944 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800abc0:	0018      	movs	r0, r3
 800abc2:	46bd      	mov	sp, r7
 800abc4:	b00a      	add	sp, #40	; 0x28
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abc8:	b590      	push	{r4, r7, lr}
 800abca:	b08b      	sub	sp, #44	; 0x2c
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <xQueueReceiveFromISR+0x1a>
 800abde:	b672      	cpsid	i
 800abe0:	e7fe      	b.n	800abe0 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d103      	bne.n	800abf0 <xQueueReceiveFromISR+0x28>
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <xQueueReceiveFromISR+0x2c>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e000      	b.n	800abf6 <xQueueReceiveFromISR+0x2e>
 800abf4:	2300      	movs	r3, #0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <xQueueReceiveFromISR+0x36>
 800abfa:	b672      	cpsid	i
 800abfc:	e7fe      	b.n	800abfc <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abfe:	f001 feb9 	bl	800c974 <ulSetInterruptMaskFromISR>
 800ac02:	0003      	movs	r3, r0
 800ac04:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0a:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d032      	beq.n	800ac78 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac12:	2417      	movs	r4, #23
 800ac14:	193b      	adds	r3, r7, r4
 800ac16:	6a3a      	ldr	r2, [r7, #32]
 800ac18:	2144      	movs	r1, #68	; 0x44
 800ac1a:	5c52      	ldrb	r2, [r2, r1]
 800ac1c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	6a3b      	ldr	r3, [r7, #32]
 800ac22:	0011      	movs	r1, r2
 800ac24:	0018      	movs	r0, r3
 800ac26:	f000 f8f5 	bl	800ae14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	1e5a      	subs	r2, r3, #1
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac32:	193b      	adds	r3, r7, r4
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	b25b      	sxtb	r3, r3
 800ac38:	3301      	adds	r3, #1
 800ac3a:	d111      	bne.n	800ac60 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d016      	beq.n	800ac72 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	3310      	adds	r3, #16
 800ac48:	0018      	movs	r0, r3
 800ac4a:	f000 fe73 	bl	800b934 <xTaskRemoveFromEventList>
 800ac4e:	1e03      	subs	r3, r0, #0
 800ac50:	d00f      	beq.n	800ac72 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00c      	beq.n	800ac72 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	e008      	b.n	800ac72 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac60:	2317      	movs	r3, #23
 800ac62:	18fb      	adds	r3, r7, r3
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	3301      	adds	r3, #1
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	b259      	sxtb	r1, r3
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	2244      	movs	r2, #68	; 0x44
 800ac70:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ac72:	2301      	movs	r3, #1
 800ac74:	627b      	str	r3, [r7, #36]	; 0x24
 800ac76:	e001      	b.n	800ac7c <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	0018      	movs	r0, r3
 800ac80:	f001 fe7e 	bl	800c980 <vClearInterruptMaskFromISR>

	return xReturn;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac86:	0018      	movs	r0, r3
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	b00b      	add	sp, #44	; 0x2c
 800ac8c:	bd90      	pop	{r4, r7, pc}

0800ac8e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <uxQueueMessagesWaiting+0x12>
 800ac9c:	b672      	cpsid	i
 800ac9e:	e7fe      	b.n	800ac9e <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 800aca0:	f001 fe3e 	bl	800c920 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800acaa:	f001 fe4b 	bl	800c944 <vPortExitCritical>

	return uxReturn;
 800acae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800acb0:	0018      	movs	r0, r3
 800acb2:	46bd      	mov	sp, r7
 800acb4:	b004      	add	sp, #16
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <uxQueueMessagesWaitingFromISR+0x12>
 800acc6:	b672      	cpsid	i
 800acc8:	e7fe      	b.n	800acc8 <uxQueueMessagesWaitingFromISR+0x10>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800acd0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800acd2:	0018      	movs	r0, r3
 800acd4:	46bd      	mov	sp, r7
 800acd6:	b004      	add	sp, #16
 800acd8:	bd80      	pop	{r7, pc}

0800acda <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <vQueueDelete+0x16>
 800acec:	b672      	cpsid	i
 800acee:	e7fe      	b.n	800acee <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	0018      	movs	r0, r3
 800acf4:	f000 f968 	bl	800afc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2246      	movs	r2, #70	; 0x46
 800acfc:	5c9b      	ldrb	r3, [r3, r2]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d103      	bne.n	800ad0a <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	0018      	movs	r0, r3
 800ad06:	f001 ff49 	bl	800cb9c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad0a:	46c0      	nop			; (mov r8, r8)
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	b004      	add	sp, #16
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d006      	beq.n	800ad30 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2238      	movs	r2, #56	; 0x38
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	e001      	b.n	800ad34 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad34:	68fb      	ldr	r3, [r7, #12]
	}
 800ad36:	0018      	movs	r0, r3
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	b004      	add	sp, #16
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b086      	sub	sp, #24
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10e      	bne.n	800ad7a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d14e      	bne.n	800ae02 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	0018      	movs	r0, r3
 800ad6a:	f001 f86b 	bl	800be44 <xTaskPriorityDisinherit>
 800ad6e:	0003      	movs	r3, r0
 800ad70:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	605a      	str	r2, [r3, #4]
 800ad78:	e043      	b.n	800ae02 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d119      	bne.n	800adb4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6898      	ldr	r0, [r3, #8]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	0019      	movs	r1, r3
 800ad8c:	f002 f8eb 	bl	800cf66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	689a      	ldr	r2, [r3, #8]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	18d2      	adds	r2, r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	689a      	ldr	r2, [r3, #8]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d32b      	bcc.n	800ae02 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	609a      	str	r2, [r3, #8]
 800adb2:	e026      	b.n	800ae02 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	68d8      	ldr	r0, [r3, #12]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	0019      	movs	r1, r3
 800adc0:	f002 f8d1 	bl	800cf66 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adcc:	425b      	negs	r3, r3
 800adce:	18d2      	adds	r2, r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d207      	bcs.n	800adf0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade8:	425b      	negs	r3, r3
 800adea:	18d2      	adds	r2, r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d105      	bne.n	800ae02 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d002      	beq.n	800ae02 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	1c5a      	adds	r2, r3, #1
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae0a:	697b      	ldr	r3, [r7, #20]
}
 800ae0c:	0018      	movs	r0, r3
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	b006      	add	sp, #24
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d018      	beq.n	800ae58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	68da      	ldr	r2, [r3, #12]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	18d2      	adds	r2, r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68da      	ldr	r2, [r3, #12]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d303      	bcc.n	800ae48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68d9      	ldr	r1, [r3, #12]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	0018      	movs	r0, r3
 800ae54:	f002 f887 	bl	800cf66 <memcpy>
	}
}
 800ae58:	46c0      	nop			; (mov r8, r8)
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b002      	add	sp, #8
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae68:	f001 fd5a 	bl	800c920 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae6c:	230f      	movs	r3, #15
 800ae6e:	18fb      	adds	r3, r7, r3
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	2145      	movs	r1, #69	; 0x45
 800ae74:	5c52      	ldrb	r2, [r2, r1]
 800ae76:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae78:	e013      	b.n	800aea2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d016      	beq.n	800aeb0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3324      	adds	r3, #36	; 0x24
 800ae86:	0018      	movs	r0, r3
 800ae88:	f000 fd54 	bl	800b934 <xTaskRemoveFromEventList>
 800ae8c:	1e03      	subs	r3, r0, #0
 800ae8e:	d001      	beq.n	800ae94 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae90:	f000 fe62 	bl	800bb58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae94:	210f      	movs	r1, #15
 800ae96:	187b      	adds	r3, r7, r1
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	187b      	adds	r3, r7, r1
 800aea0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aea2:	230f      	movs	r3, #15
 800aea4:	18fb      	adds	r3, r7, r3
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	b25b      	sxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dce5      	bgt.n	800ae7a <prvUnlockQueue+0x1a>
 800aeae:	e000      	b.n	800aeb2 <prvUnlockQueue+0x52>
					break;
 800aeb0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2245      	movs	r2, #69	; 0x45
 800aeb6:	21ff      	movs	r1, #255	; 0xff
 800aeb8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800aeba:	f001 fd43 	bl	800c944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aebe:	f001 fd2f 	bl	800c920 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aec2:	230e      	movs	r3, #14
 800aec4:	18fb      	adds	r3, r7, r3
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	2144      	movs	r1, #68	; 0x44
 800aeca:	5c52      	ldrb	r2, [r2, r1]
 800aecc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aece:	e013      	b.n	800aef8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d016      	beq.n	800af06 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3310      	adds	r3, #16
 800aedc:	0018      	movs	r0, r3
 800aede:	f000 fd29 	bl	800b934 <xTaskRemoveFromEventList>
 800aee2:	1e03      	subs	r3, r0, #0
 800aee4:	d001      	beq.n	800aeea <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800aee6:	f000 fe37 	bl	800bb58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aeea:	210e      	movs	r1, #14
 800aeec:	187b      	adds	r3, r7, r1
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	187b      	adds	r3, r7, r1
 800aef6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aef8:	230e      	movs	r3, #14
 800aefa:	18fb      	adds	r3, r7, r3
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	b25b      	sxtb	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	dce5      	bgt.n	800aed0 <prvUnlockQueue+0x70>
 800af04:	e000      	b.n	800af08 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800af06:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2244      	movs	r2, #68	; 0x44
 800af0c:	21ff      	movs	r1, #255	; 0xff
 800af0e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800af10:	f001 fd18 	bl	800c944 <vPortExitCritical>
}
 800af14:	46c0      	nop			; (mov r8, r8)
 800af16:	46bd      	mov	sp, r7
 800af18:	b004      	add	sp, #16
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af24:	f001 fcfc 	bl	800c920 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d102      	bne.n	800af36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af30:	2301      	movs	r3, #1
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	e001      	b.n	800af3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af3a:	f001 fd03 	bl	800c944 <vPortExitCritical>

	return xReturn;
 800af3e:	68fb      	ldr	r3, [r7, #12]
}
 800af40:	0018      	movs	r0, r3
 800af42:	46bd      	mov	sp, r7
 800af44:	b004      	add	sp, #16
 800af46:	bd80      	pop	{r7, pc}

0800af48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af50:	f001 fce6 	bl	800c920 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d102      	bne.n	800af66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	e001      	b.n	800af6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af6a:	f001 fceb 	bl	800c944 <vPortExitCritical>

	return xReturn;
 800af6e:	68fb      	ldr	r3, [r7, #12]
}
 800af70:	0018      	movs	r0, r3
 800af72:	46bd      	mov	sp, r7
 800af74:	b004      	add	sp, #16
 800af76:	bd80      	pop	{r7, pc}

0800af78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	e015      	b.n	800afb4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af88:	4b0e      	ldr	r3, [pc, #56]	; (800afc4 <vQueueAddToRegistry+0x4c>)
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	00d2      	lsls	r2, r2, #3
 800af8e:	58d3      	ldr	r3, [r2, r3]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10c      	bne.n	800afae <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af94:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <vQueueAddToRegistry+0x4c>)
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	00d2      	lsls	r2, r2, #3
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af9e:	4a09      	ldr	r2, [pc, #36]	; (800afc4 <vQueueAddToRegistry+0x4c>)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	18d3      	adds	r3, r2, r3
 800afa6:	3304      	adds	r3, #4
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800afac:	e006      	b.n	800afbc <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3301      	adds	r3, #1
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b07      	cmp	r3, #7
 800afb8:	d9e6      	bls.n	800af88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afba:	46c0      	nop			; (mov r8, r8)
 800afbc:	46c0      	nop			; (mov r8, r8)
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b004      	add	sp, #16
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	200031f0 	.word	0x200031f0

0800afc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e018      	b.n	800b008 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800afd6:	4a10      	ldr	r2, [pc, #64]	; (800b018 <vQueueUnregisterQueue+0x50>)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	18d3      	adds	r3, r2, r3
 800afde:	3304      	adds	r3, #4
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d10c      	bne.n	800b002 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800afe8:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <vQueueUnregisterQueue+0x50>)
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	00d2      	lsls	r2, r2, #3
 800afee:	2100      	movs	r1, #0
 800aff0:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aff2:	4a09      	ldr	r2, [pc, #36]	; (800b018 <vQueueUnregisterQueue+0x50>)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	18d3      	adds	r3, r2, r3
 800affa:	3304      	adds	r3, #4
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]
				break;
 800b000:	e006      	b.n	800b010 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3301      	adds	r3, #1
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b07      	cmp	r3, #7
 800b00c:	d9e3      	bls.n	800afd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b00e:	46c0      	nop			; (mov r8, r8)
 800b010:	46c0      	nop			; (mov r8, r8)
 800b012:	46bd      	mov	sp, r7
 800b014:	b004      	add	sp, #16
 800b016:	bd80      	pop	{r7, pc}
 800b018:	200031f0 	.word	0x200031f0

0800b01c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b02c:	f001 fc78 	bl	800c920 <vPortEnterCritical>
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2244      	movs	r2, #68	; 0x44
 800b034:	5c9b      	ldrb	r3, [r3, r2]
 800b036:	b25b      	sxtb	r3, r3
 800b038:	3301      	adds	r3, #1
 800b03a:	d103      	bne.n	800b044 <vQueueWaitForMessageRestricted+0x28>
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2244      	movs	r2, #68	; 0x44
 800b040:	2100      	movs	r1, #0
 800b042:	5499      	strb	r1, [r3, r2]
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2245      	movs	r2, #69	; 0x45
 800b048:	5c9b      	ldrb	r3, [r3, r2]
 800b04a:	b25b      	sxtb	r3, r3
 800b04c:	3301      	adds	r3, #1
 800b04e:	d103      	bne.n	800b058 <vQueueWaitForMessageRestricted+0x3c>
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2245      	movs	r2, #69	; 0x45
 800b054:	2100      	movs	r1, #0
 800b056:	5499      	strb	r1, [r3, r2]
 800b058:	f001 fc74 	bl	800c944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b060:	2b00      	cmp	r3, #0
 800b062:	d106      	bne.n	800b072 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3324      	adds	r3, #36	; 0x24
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	0018      	movs	r0, r3
 800b06e:	f000 fc3b 	bl	800b8e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	0018      	movs	r0, r3
 800b076:	f7ff fef3 	bl	800ae60 <prvUnlockQueue>
	}
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	46bd      	mov	sp, r7
 800b07e:	b006      	add	sp, #24
 800b080:	bd80      	pop	{r7, pc}

0800b082 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b082:	b590      	push	{r4, r7, lr}
 800b084:	b08d      	sub	sp, #52	; 0x34
 800b086:	af04      	add	r7, sp, #16
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
 800b08e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <xTaskCreateStatic+0x18>
 800b096:	b672      	cpsid	i
 800b098:	e7fe      	b.n	800b098 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <xTaskCreateStatic+0x22>
 800b0a0:	b672      	cpsid	i
 800b0a2:	e7fe      	b.n	800b0a2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0a4:	23bc      	movs	r3, #188	; 0xbc
 800b0a6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	2bbc      	cmp	r3, #188	; 0xbc
 800b0ac:	d001      	beq.n	800b0b2 <xTaskCreateStatic+0x30>
 800b0ae:	b672      	cpsid	i
 800b0b0:	e7fe      	b.n	800b0b0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d020      	beq.n	800b0fa <xTaskCreateStatic+0x78>
 800b0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d01d      	beq.n	800b0fa <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	22b9      	movs	r2, #185	; 0xb9
 800b0cc:	2102      	movs	r1, #2
 800b0ce:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0d0:	683c      	ldr	r4, [r7, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	9303      	str	r3, [sp, #12]
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	9302      	str	r3, [sp, #8]
 800b0e0:	2318      	movs	r3, #24
 800b0e2:	18fb      	adds	r3, r7, r3
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	0023      	movs	r3, r4
 800b0ec:	f000 f858 	bl	800b1a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	0018      	movs	r0, r3
 800b0f4:	f000 f8ec 	bl	800b2d0 <prvAddNewTaskToReadyList>
 800b0f8:	e001      	b.n	800b0fe <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b0fe:	69bb      	ldr	r3, [r7, #24]
	}
 800b100:	0018      	movs	r0, r3
 800b102:	46bd      	mov	sp, r7
 800b104:	b009      	add	sp, #36	; 0x24
 800b106:	bd90      	pop	{r4, r7, pc}

0800b108 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b108:	b590      	push	{r4, r7, lr}
 800b10a:	b08d      	sub	sp, #52	; 0x34
 800b10c:	af04      	add	r7, sp, #16
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	603b      	str	r3, [r7, #0]
 800b114:	1dbb      	adds	r3, r7, #6
 800b116:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b118:	1dbb      	adds	r3, r7, #6
 800b11a:	881b      	ldrh	r3, [r3, #0]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	0018      	movs	r0, r3
 800b120:	f001 fc96 	bl	800ca50 <pvPortMalloc>
 800b124:	0003      	movs	r3, r0
 800b126:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d010      	beq.n	800b150 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b12e:	20bc      	movs	r0, #188	; 0xbc
 800b130:	f001 fc8e 	bl	800ca50 <pvPortMalloc>
 800b134:	0003      	movs	r3, r0
 800b136:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	631a      	str	r2, [r3, #48]	; 0x30
 800b144:	e006      	b.n	800b154 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	0018      	movs	r0, r3
 800b14a:	f001 fd27 	bl	800cb9c <vPortFree>
 800b14e:	e001      	b.n	800b154 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b150:	2300      	movs	r3, #0
 800b152:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d01a      	beq.n	800b190 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	22b9      	movs	r2, #185	; 0xb9
 800b15e:	2100      	movs	r1, #0
 800b160:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b162:	1dbb      	adds	r3, r7, #6
 800b164:	881a      	ldrh	r2, [r3, #0]
 800b166:	683c      	ldr	r4, [r7, #0]
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	2300      	movs	r3, #0
 800b16e:	9303      	str	r3, [sp, #12]
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	9302      	str	r3, [sp, #8]
 800b174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	0023      	movs	r3, r4
 800b17e:	f000 f80f 	bl	800b1a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	0018      	movs	r0, r3
 800b186:	f000 f8a3 	bl	800b2d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b18a:	2301      	movs	r3, #1
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	e002      	b.n	800b196 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b190:	2301      	movs	r3, #1
 800b192:	425b      	negs	r3, r3
 800b194:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b196:	69bb      	ldr	r3, [r7, #24]
	}
 800b198:	0018      	movs	r0, r3
 800b19a:	46bd      	mov	sp, r7
 800b19c:	b009      	add	sp, #36	; 0x24
 800b19e:	bd90      	pop	{r4, r7, pc}

0800b1a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	001a      	movs	r2, r3
 800b1b8:	21a5      	movs	r1, #165	; 0xa5
 800b1ba:	f001 fef0 	bl	800cf9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	493e      	ldr	r1, [pc, #248]	; (800b2c0 <prvInitialiseNewTask+0x120>)
 800b1c6:	468c      	mov	ip, r1
 800b1c8:	4463      	add	r3, ip
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	18d3      	adds	r3, r2, r3
 800b1ce:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2207      	movs	r2, #7
 800b1d4:	4393      	bics	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2207      	movs	r2, #7
 800b1dc:	4013      	ands	r3, r2
 800b1de:	d001      	beq.n	800b1e4 <prvInitialiseNewTask+0x44>
 800b1e0:	b672      	cpsid	i
 800b1e2:	e7fe      	b.n	800b1e2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	e013      	b.n	800b212 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	18d3      	adds	r3, r2, r3
 800b1f0:	7818      	ldrb	r0, [r3, #0]
 800b1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1f4:	2134      	movs	r1, #52	; 0x34
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	18d3      	adds	r3, r2, r3
 800b1fa:	185b      	adds	r3, r3, r1
 800b1fc:	1c02      	adds	r2, r0, #0
 800b1fe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	18d3      	adds	r3, r2, r3
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d006      	beq.n	800b21a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	3301      	adds	r3, #1
 800b210:	617b      	str	r3, [r7, #20]
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b0f      	cmp	r3, #15
 800b216:	d9e8      	bls.n	800b1ea <prvInitialiseNewTask+0x4a>
 800b218:	e000      	b.n	800b21c <prvInitialiseNewTask+0x7c>
		{
			break;
 800b21a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	2243      	movs	r2, #67	; 0x43
 800b220:	2100      	movs	r1, #0
 800b222:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	2b37      	cmp	r3, #55	; 0x37
 800b228:	d901      	bls.n	800b22e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b22a:	2337      	movs	r3, #55	; 0x37
 800b22c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	6a3a      	ldr	r2, [r7, #32]
 800b232:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	6a3a      	ldr	r2, [r7, #32]
 800b238:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	2200      	movs	r2, #0
 800b23e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b242:	3304      	adds	r3, #4
 800b244:	0018      	movs	r0, r3
 800b246:	f7fe ffc3 	bl	800a1d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	3318      	adds	r3, #24
 800b24e:	0018      	movs	r0, r3
 800b250:	f7fe ffbe 	bl	800a1d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b258:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	2238      	movs	r2, #56	; 0x38
 800b25e:	1ad2      	subs	r2, r2, r3
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b268:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26c:	22b4      	movs	r2, #180	; 0xb4
 800b26e:	2100      	movs	r1, #0
 800b270:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	22b8      	movs	r2, #184	; 0xb8
 800b276:	2100      	movs	r1, #0
 800b278:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	3354      	adds	r3, #84	; 0x54
 800b27e:	2260      	movs	r2, #96	; 0x60
 800b280:	2100      	movs	r1, #0
 800b282:	0018      	movs	r0, r3
 800b284:	f001 fe8b 	bl	800cf9e <memset>
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	4a0e      	ldr	r2, [pc, #56]	; (800b2c4 <prvInitialiseNewTask+0x124>)
 800b28c:	659a      	str	r2, [r3, #88]	; 0x58
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	4a0d      	ldr	r2, [pc, #52]	; (800b2c8 <prvInitialiseNewTask+0x128>)
 800b292:	65da      	str	r2, [r3, #92]	; 0x5c
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	4a0d      	ldr	r2, [pc, #52]	; (800b2cc <prvInitialiseNewTask+0x12c>)
 800b298:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	68f9      	ldr	r1, [r7, #12]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	f001 faa1 	bl	800c7e8 <pxPortInitialiseStack>
 800b2a6:	0002      	movs	r2, r0
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2b8:	46c0      	nop			; (mov r8, r8)
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	b006      	add	sp, #24
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	3fffffff 	.word	0x3fffffff
 800b2c4:	0800e368 	.word	0x0800e368
 800b2c8:	0800e388 	.word	0x0800e388
 800b2cc:	0800e348 	.word	0x0800e348

0800b2d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2d8:	f001 fb22 	bl	800c920 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2dc:	4b2a      	ldr	r3, [pc, #168]	; (800b388 <prvAddNewTaskToReadyList+0xb8>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	4b29      	ldr	r3, [pc, #164]	; (800b388 <prvAddNewTaskToReadyList+0xb8>)
 800b2e4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b2e6:	4b29      	ldr	r3, [pc, #164]	; (800b38c <prvAddNewTaskToReadyList+0xbc>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d109      	bne.n	800b302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2ee:	4b27      	ldr	r3, [pc, #156]	; (800b38c <prvAddNewTaskToReadyList+0xbc>)
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2f4:	4b24      	ldr	r3, [pc, #144]	; (800b388 <prvAddNewTaskToReadyList+0xb8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d110      	bne.n	800b31e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2fc:	f000 fc46 	bl	800bb8c <prvInitialiseTaskLists>
 800b300:	e00d      	b.n	800b31e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b302:	4b23      	ldr	r3, [pc, #140]	; (800b390 <prvAddNewTaskToReadyList+0xc0>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d109      	bne.n	800b31e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b30a:	4b20      	ldr	r3, [pc, #128]	; (800b38c <prvAddNewTaskToReadyList+0xbc>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	429a      	cmp	r2, r3
 800b316:	d802      	bhi.n	800b31e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b318:	4b1c      	ldr	r3, [pc, #112]	; (800b38c <prvAddNewTaskToReadyList+0xbc>)
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b31e:	4b1d      	ldr	r3, [pc, #116]	; (800b394 <prvAddNewTaskToReadyList+0xc4>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	4b1b      	ldr	r3, [pc, #108]	; (800b394 <prvAddNewTaskToReadyList+0xc4>)
 800b326:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b328:	4b1a      	ldr	r3, [pc, #104]	; (800b394 <prvAddNewTaskToReadyList+0xc4>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b334:	4b18      	ldr	r3, [pc, #96]	; (800b398 <prvAddNewTaskToReadyList+0xc8>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d903      	bls.n	800b344 <prvAddNewTaskToReadyList+0x74>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b340:	4b15      	ldr	r3, [pc, #84]	; (800b398 <prvAddNewTaskToReadyList+0xc8>)
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b348:	0013      	movs	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	189b      	adds	r3, r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4a12      	ldr	r2, [pc, #72]	; (800b39c <prvAddNewTaskToReadyList+0xcc>)
 800b352:	189a      	adds	r2, r3, r2
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3304      	adds	r3, #4
 800b358:	0019      	movs	r1, r3
 800b35a:	0010      	movs	r0, r2
 800b35c:	f7fe ff43 	bl	800a1e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b360:	f001 faf0 	bl	800c944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b364:	4b0a      	ldr	r3, [pc, #40]	; (800b390 <prvAddNewTaskToReadyList+0xc0>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d008      	beq.n	800b37e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b36c:	4b07      	ldr	r3, [pc, #28]	; (800b38c <prvAddNewTaskToReadyList+0xbc>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b376:	429a      	cmp	r2, r3
 800b378:	d201      	bcs.n	800b37e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b37a:	f001 fac1 	bl	800c900 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	46bd      	mov	sp, r7
 800b382:	b002      	add	sp, #8
 800b384:	bd80      	pop	{r7, pc}
 800b386:	46c0      	nop			; (mov r8, r8)
 800b388:	20001da0 	.word	0x20001da0
 800b38c:	200018cc 	.word	0x200018cc
 800b390:	20001dac 	.word	0x20001dac
 800b394:	20001dbc 	.word	0x20001dbc
 800b398:	20001da8 	.word	0x20001da8
 800b39c:	200018d0 	.word	0x200018d0

0800b3a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d010      	beq.n	800b3d4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	; (800b3e8 <vTaskDelay+0x48>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <vTaskDelay+0x1e>
 800b3ba:	b672      	cpsid	i
 800b3bc:	e7fe      	b.n	800b3bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b3be:	f000 f873 	bl	800b4a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f000 fe34 	bl	800c034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3cc:	f000 f878 	bl	800b4c0 <xTaskResumeAll>
 800b3d0:	0003      	movs	r3, r0
 800b3d2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800b3da:	f001 fa91 	bl	800c900 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3de:	46c0      	nop			; (mov r8, r8)
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	b004      	add	sp, #16
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	46c0      	nop			; (mov r8, r8)
 800b3e8:	20001dc8 	.word	0x20001dc8

0800b3ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3ec:	b590      	push	{r4, r7, lr}
 800b3ee:	b089      	sub	sp, #36	; 0x24
 800b3f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3fa:	003a      	movs	r2, r7
 800b3fc:	1d39      	adds	r1, r7, #4
 800b3fe:	2308      	movs	r3, #8
 800b400:	18fb      	adds	r3, r7, r3
 800b402:	0018      	movs	r0, r3
 800b404:	f7fe fcc4 	bl	8009d90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b408:	683c      	ldr	r4, [r7, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	491e      	ldr	r1, [pc, #120]	; (800b488 <vTaskStartScheduler+0x9c>)
 800b410:	481e      	ldr	r0, [pc, #120]	; (800b48c <vTaskStartScheduler+0xa0>)
 800b412:	9202      	str	r2, [sp, #8]
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	2300      	movs	r3, #0
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	2300      	movs	r3, #0
 800b41c:	0022      	movs	r2, r4
 800b41e:	f7ff fe30 	bl	800b082 <xTaskCreateStatic>
 800b422:	0002      	movs	r2, r0
 800b424:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <vTaskStartScheduler+0xa4>)
 800b426:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b428:	4b19      	ldr	r3, [pc, #100]	; (800b490 <vTaskStartScheduler+0xa4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b430:	2301      	movs	r3, #1
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	e001      	b.n	800b43a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d103      	bne.n	800b448 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800b440:	f000 fe4c 	bl	800c0dc <xTimerCreateTimerTask>
 800b444:	0003      	movs	r3, r0
 800b446:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d113      	bne.n	800b476 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b44e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b450:	4b10      	ldr	r3, [pc, #64]	; (800b494 <vTaskStartScheduler+0xa8>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	3354      	adds	r3, #84	; 0x54
 800b456:	001a      	movs	r2, r3
 800b458:	4b0f      	ldr	r3, [pc, #60]	; (800b498 <vTaskStartScheduler+0xac>)
 800b45a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b45c:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <vTaskStartScheduler+0xb0>)
 800b45e:	2201      	movs	r2, #1
 800b460:	4252      	negs	r2, r2
 800b462:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b464:	4b0e      	ldr	r3, [pc, #56]	; (800b4a0 <vTaskStartScheduler+0xb4>)
 800b466:	2201      	movs	r2, #1
 800b468:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b46a:	4b0e      	ldr	r3, [pc, #56]	; (800b4a4 <vTaskStartScheduler+0xb8>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b470:	f001 fa22 	bl	800c8b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b474:	e004      	b.n	800b480 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	d101      	bne.n	800b480 <vTaskStartScheduler+0x94>
 800b47c:	b672      	cpsid	i
 800b47e:	e7fe      	b.n	800b47e <vTaskStartScheduler+0x92>
}
 800b480:	46c0      	nop			; (mov r8, r8)
 800b482:	46bd      	mov	sp, r7
 800b484:	b005      	add	sp, #20
 800b486:	bd90      	pop	{r4, r7, pc}
 800b488:	0800daec 	.word	0x0800daec
 800b48c:	0800bb6d 	.word	0x0800bb6d
 800b490:	20001dc4 	.word	0x20001dc4
 800b494:	200018cc 	.word	0x200018cc
 800b498:	20000030 	.word	0x20000030
 800b49c:	20001dc0 	.word	0x20001dc0
 800b4a0:	20001dac 	.word	0x20001dac
 800b4a4:	20001da4 	.word	0x20001da4

0800b4a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b4ac:	4b03      	ldr	r3, [pc, #12]	; (800b4bc <vTaskSuspendAll+0x14>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	4b02      	ldr	r3, [pc, #8]	; (800b4bc <vTaskSuspendAll+0x14>)
 800b4b4:	601a      	str	r2, [r3, #0]
}
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20001dc8 	.word	0x20001dc8

0800b4c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4ce:	4b3a      	ldr	r3, [pc, #232]	; (800b5b8 <xTaskResumeAll+0xf8>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <xTaskResumeAll+0x1a>
 800b4d6:	b672      	cpsid	i
 800b4d8:	e7fe      	b.n	800b4d8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4da:	f001 fa21 	bl	800c920 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4de:	4b36      	ldr	r3, [pc, #216]	; (800b5b8 <xTaskResumeAll+0xf8>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	1e5a      	subs	r2, r3, #1
 800b4e4:	4b34      	ldr	r3, [pc, #208]	; (800b5b8 <xTaskResumeAll+0xf8>)
 800b4e6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4e8:	4b33      	ldr	r3, [pc, #204]	; (800b5b8 <xTaskResumeAll+0xf8>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d15b      	bne.n	800b5a8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4f0:	4b32      	ldr	r3, [pc, #200]	; (800b5bc <xTaskResumeAll+0xfc>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d057      	beq.n	800b5a8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4f8:	e02f      	b.n	800b55a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b4fa:	4b31      	ldr	r3, [pc, #196]	; (800b5c0 <xTaskResumeAll+0x100>)
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3318      	adds	r3, #24
 800b506:	0018      	movs	r0, r3
 800b508:	f7fe fec5 	bl	800a296 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3304      	adds	r3, #4
 800b510:	0018      	movs	r0, r3
 800b512:	f7fe fec0 	bl	800a296 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51a:	4b2a      	ldr	r3, [pc, #168]	; (800b5c4 <xTaskResumeAll+0x104>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d903      	bls.n	800b52a <xTaskResumeAll+0x6a>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <xTaskResumeAll+0x104>)
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	0013      	movs	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	189b      	adds	r3, r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4a24      	ldr	r2, [pc, #144]	; (800b5c8 <xTaskResumeAll+0x108>)
 800b538:	189a      	adds	r2, r3, r2
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3304      	adds	r3, #4
 800b53e:	0019      	movs	r1, r3
 800b540:	0010      	movs	r0, r2
 800b542:	f7fe fe50 	bl	800a1e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	4b20      	ldr	r3, [pc, #128]	; (800b5cc <xTaskResumeAll+0x10c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b550:	429a      	cmp	r2, r3
 800b552:	d302      	bcc.n	800b55a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800b554:	4b1e      	ldr	r3, [pc, #120]	; (800b5d0 <xTaskResumeAll+0x110>)
 800b556:	2201      	movs	r2, #1
 800b558:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b55a:	4b19      	ldr	r3, [pc, #100]	; (800b5c0 <xTaskResumeAll+0x100>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1cb      	bne.n	800b4fa <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b568:	f000 fbb0 	bl	800bccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b56c:	4b19      	ldr	r3, [pc, #100]	; (800b5d4 <xTaskResumeAll+0x114>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00f      	beq.n	800b598 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b578:	f000 f84c 	bl	800b614 <xTaskIncrementTick>
 800b57c:	1e03      	subs	r3, r0, #0
 800b57e:	d002      	beq.n	800b586 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800b580:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <xTaskResumeAll+0x110>)
 800b582:	2201      	movs	r2, #1
 800b584:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3b01      	subs	r3, #1
 800b58a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1f2      	bne.n	800b578 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800b592:	4b10      	ldr	r3, [pc, #64]	; (800b5d4 <xTaskResumeAll+0x114>)
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b598:	4b0d      	ldr	r3, [pc, #52]	; (800b5d0 <xTaskResumeAll+0x110>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5a4:	f001 f9ac 	bl	800c900 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5a8:	f001 f9cc 	bl	800c944 <vPortExitCritical>

	return xAlreadyYielded;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
}
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	b004      	add	sp, #16
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	46c0      	nop			; (mov r8, r8)
 800b5b8:	20001dc8 	.word	0x20001dc8
 800b5bc:	20001da0 	.word	0x20001da0
 800b5c0:	20001d60 	.word	0x20001d60
 800b5c4:	20001da8 	.word	0x20001da8
 800b5c8:	200018d0 	.word	0x200018d0
 800b5cc:	200018cc 	.word	0x200018cc
 800b5d0:	20001db4 	.word	0x20001db4
 800b5d4:	20001db0 	.word	0x20001db0

0800b5d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5de:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <xTaskGetTickCount+0x18>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b5e4:	687b      	ldr	r3, [r7, #4]
}
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	b002      	add	sp, #8
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	20001da4 	.word	0x20001da4

0800b5f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b5fe:	4b04      	ldr	r3, [pc, #16]	; (800b610 <xTaskGetTickCountFromISR+0x1c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b604:	683b      	ldr	r3, [r7, #0]
}
 800b606:	0018      	movs	r0, r3
 800b608:	46bd      	mov	sp, r7
 800b60a:	b002      	add	sp, #8
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	46c0      	nop			; (mov r8, r8)
 800b610:	20001da4 	.word	0x20001da4

0800b614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b61e:	4b4c      	ldr	r3, [pc, #304]	; (800b750 <xTaskIncrementTick+0x13c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d000      	beq.n	800b628 <xTaskIncrementTick+0x14>
 800b626:	e083      	b.n	800b730 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b628:	4b4a      	ldr	r3, [pc, #296]	; (800b754 <xTaskIncrementTick+0x140>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3301      	adds	r3, #1
 800b62e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b630:	4b48      	ldr	r3, [pc, #288]	; (800b754 <xTaskIncrementTick+0x140>)
 800b632:	693a      	ldr	r2, [r7, #16]
 800b634:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d117      	bne.n	800b66c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800b63c:	4b46      	ldr	r3, [pc, #280]	; (800b758 <xTaskIncrementTick+0x144>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <xTaskIncrementTick+0x36>
 800b646:	b672      	cpsid	i
 800b648:	e7fe      	b.n	800b648 <xTaskIncrementTick+0x34>
 800b64a:	4b43      	ldr	r3, [pc, #268]	; (800b758 <xTaskIncrementTick+0x144>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	4b42      	ldr	r3, [pc, #264]	; (800b75c <xTaskIncrementTick+0x148>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	4b40      	ldr	r3, [pc, #256]	; (800b758 <xTaskIncrementTick+0x144>)
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	4b40      	ldr	r3, [pc, #256]	; (800b75c <xTaskIncrementTick+0x148>)
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	4b40      	ldr	r3, [pc, #256]	; (800b760 <xTaskIncrementTick+0x14c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	1c5a      	adds	r2, r3, #1
 800b664:	4b3e      	ldr	r3, [pc, #248]	; (800b760 <xTaskIncrementTick+0x14c>)
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	f000 fb30 	bl	800bccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b66c:	4b3d      	ldr	r3, [pc, #244]	; (800b764 <xTaskIncrementTick+0x150>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	429a      	cmp	r2, r3
 800b674:	d34e      	bcc.n	800b714 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b676:	4b38      	ldr	r3, [pc, #224]	; (800b758 <xTaskIncrementTick+0x144>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <xTaskIncrementTick+0x70>
 800b680:	2301      	movs	r3, #1
 800b682:	e000      	b.n	800b686 <xTaskIncrementTick+0x72>
 800b684:	2300      	movs	r3, #0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b68a:	4b36      	ldr	r3, [pc, #216]	; (800b764 <xTaskIncrementTick+0x150>)
 800b68c:	2201      	movs	r2, #1
 800b68e:	4252      	negs	r2, r2
 800b690:	601a      	str	r2, [r3, #0]
					break;
 800b692:	e03f      	b.n	800b714 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b694:	4b30      	ldr	r3, [pc, #192]	; (800b758 <xTaskIncrementTick+0x144>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6a4:	693a      	ldr	r2, [r7, #16]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d203      	bcs.n	800b6b4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6ac:	4b2d      	ldr	r3, [pc, #180]	; (800b764 <xTaskIncrementTick+0x150>)
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	601a      	str	r2, [r3, #0]
						break;
 800b6b2:	e02f      	b.n	800b714 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	0018      	movs	r0, r3
 800b6ba:	f7fe fdec 	bl	800a296 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d004      	beq.n	800b6d0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	3318      	adds	r3, #24
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	f7fe fde3 	bl	800a296 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d4:	4b24      	ldr	r3, [pc, #144]	; (800b768 <xTaskIncrementTick+0x154>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d903      	bls.n	800b6e4 <xTaskIncrementTick+0xd0>
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e0:	4b21      	ldr	r3, [pc, #132]	; (800b768 <xTaskIncrementTick+0x154>)
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e8:	0013      	movs	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	189b      	adds	r3, r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4a1e      	ldr	r2, [pc, #120]	; (800b76c <xTaskIncrementTick+0x158>)
 800b6f2:	189a      	adds	r2, r3, r2
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	0019      	movs	r1, r3
 800b6fa:	0010      	movs	r0, r2
 800b6fc:	f7fe fd73 	bl	800a1e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b704:	4b1a      	ldr	r3, [pc, #104]	; (800b770 <xTaskIncrementTick+0x15c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d3b3      	bcc.n	800b676 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800b70e:	2301      	movs	r3, #1
 800b710:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b712:	e7b0      	b.n	800b676 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b714:	4b16      	ldr	r3, [pc, #88]	; (800b770 <xTaskIncrementTick+0x15c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71a:	4914      	ldr	r1, [pc, #80]	; (800b76c <xTaskIncrementTick+0x158>)
 800b71c:	0013      	movs	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	189b      	adds	r3, r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	585b      	ldr	r3, [r3, r1]
 800b726:	2b01      	cmp	r3, #1
 800b728:	d907      	bls.n	800b73a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b72a:	2301      	movs	r3, #1
 800b72c:	617b      	str	r3, [r7, #20]
 800b72e:	e004      	b.n	800b73a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b730:	4b10      	ldr	r3, [pc, #64]	; (800b774 <xTaskIncrementTick+0x160>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	4b0f      	ldr	r3, [pc, #60]	; (800b774 <xTaskIncrementTick+0x160>)
 800b738:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b73a:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <xTaskIncrementTick+0x164>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800b742:	2301      	movs	r3, #1
 800b744:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b746:	697b      	ldr	r3, [r7, #20]
}
 800b748:	0018      	movs	r0, r3
 800b74a:	46bd      	mov	sp, r7
 800b74c:	b006      	add	sp, #24
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	20001dc8 	.word	0x20001dc8
 800b754:	20001da4 	.word	0x20001da4
 800b758:	20001d58 	.word	0x20001d58
 800b75c:	20001d5c 	.word	0x20001d5c
 800b760:	20001db8 	.word	0x20001db8
 800b764:	20001dc0 	.word	0x20001dc0
 800b768:	20001da8 	.word	0x20001da8
 800b76c:	200018d0 	.word	0x200018d0
 800b770:	200018cc 	.word	0x200018cc
 800b774:	20001db0 	.word	0x20001db0
 800b778:	20001db4 	.word	0x20001db4

0800b77c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b782:	4b2d      	ldr	r3, [pc, #180]	; (800b838 <vTaskSwitchContext+0xbc>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b78a:	4b2c      	ldr	r3, [pc, #176]	; (800b83c <vTaskSwitchContext+0xc0>)
 800b78c:	2201      	movs	r2, #1
 800b78e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b790:	e04e      	b.n	800b830 <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 800b792:	4b2a      	ldr	r3, [pc, #168]	; (800b83c <vTaskSwitchContext+0xc0>)
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b798:	4b29      	ldr	r3, [pc, #164]	; (800b840 <vTaskSwitchContext+0xc4>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	4b28      	ldr	r3, [pc, #160]	; (800b840 <vTaskSwitchContext+0xc4>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d808      	bhi.n	800b7ba <vTaskSwitchContext+0x3e>
 800b7a8:	4b25      	ldr	r3, [pc, #148]	; (800b840 <vTaskSwitchContext+0xc4>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	4b24      	ldr	r3, [pc, #144]	; (800b840 <vTaskSwitchContext+0xc4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3334      	adds	r3, #52	; 0x34
 800b7b2:	0019      	movs	r1, r3
 800b7b4:	0010      	movs	r0, r2
 800b7b6:	f7f5 fab5 	bl	8000d24 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b7ba:	4b22      	ldr	r3, [pc, #136]	; (800b844 <vTaskSwitchContext+0xc8>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	607b      	str	r3, [r7, #4]
 800b7c0:	e007      	b.n	800b7d2 <vTaskSwitchContext+0x56>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <vTaskSwitchContext+0x50>
 800b7c8:	b672      	cpsid	i
 800b7ca:	e7fe      	b.n	800b7ca <vTaskSwitchContext+0x4e>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	607b      	str	r3, [r7, #4]
 800b7d2:	491d      	ldr	r1, [pc, #116]	; (800b848 <vTaskSwitchContext+0xcc>)
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	0013      	movs	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	189b      	adds	r3, r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	585b      	ldr	r3, [r3, r1]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0ee      	beq.n	800b7c2 <vTaskSwitchContext+0x46>
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	0013      	movs	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	189b      	adds	r3, r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4a16      	ldr	r2, [pc, #88]	; (800b848 <vTaskSwitchContext+0xcc>)
 800b7f0:	189b      	adds	r3, r3, r2
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	605a      	str	r2, [r3, #4]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	3308      	adds	r3, #8
 800b806:	429a      	cmp	r2, r3
 800b808:	d104      	bne.n	800b814 <vTaskSwitchContext+0x98>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	605a      	str	r2, [r3, #4]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	68da      	ldr	r2, [r3, #12]
 800b81a:	4b09      	ldr	r3, [pc, #36]	; (800b840 <vTaskSwitchContext+0xc4>)
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	4b09      	ldr	r3, [pc, #36]	; (800b844 <vTaskSwitchContext+0xc8>)
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b824:	4b06      	ldr	r3, [pc, #24]	; (800b840 <vTaskSwitchContext+0xc4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3354      	adds	r3, #84	; 0x54
 800b82a:	001a      	movs	r2, r3
 800b82c:	4b07      	ldr	r3, [pc, #28]	; (800b84c <vTaskSwitchContext+0xd0>)
 800b82e:	601a      	str	r2, [r3, #0]
}
 800b830:	46c0      	nop			; (mov r8, r8)
 800b832:	46bd      	mov	sp, r7
 800b834:	b002      	add	sp, #8
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20001dc8 	.word	0x20001dc8
 800b83c:	20001db4 	.word	0x20001db4
 800b840:	200018cc 	.word	0x200018cc
 800b844:	20001da8 	.word	0x20001da8
 800b848:	200018d0 	.word	0x200018d0
 800b84c:	20000030 	.word	0x20000030

0800b850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <vTaskPlaceOnEventList+0x14>
 800b860:	b672      	cpsid	i
 800b862:	e7fe      	b.n	800b862 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b864:	4b08      	ldr	r3, [pc, #32]	; (800b888 <vTaskPlaceOnEventList+0x38>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3318      	adds	r3, #24
 800b86a:	001a      	movs	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	0011      	movs	r1, r2
 800b870:	0018      	movs	r0, r3
 800b872:	f7fe fcda 	bl	800a22a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2101      	movs	r1, #1
 800b87a:	0018      	movs	r0, r3
 800b87c:	f000 fbda 	bl	800c034 <prvAddCurrentTaskToDelayedList>
}
 800b880:	46c0      	nop			; (mov r8, r8)
 800b882:	46bd      	mov	sp, r7
 800b884:	b002      	add	sp, #8
 800b886:	bd80      	pop	{r7, pc}
 800b888:	200018cc 	.word	0x200018cc

0800b88c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <vTaskPlaceOnUnorderedEventList+0x16>
 800b89e:	b672      	cpsid	i
 800b8a0:	e7fe      	b.n	800b8a0 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b8a2:	4b0f      	ldr	r3, [pc, #60]	; (800b8e0 <vTaskPlaceOnUnorderedEventList+0x54>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <vTaskPlaceOnUnorderedEventList+0x22>
 800b8aa:	b672      	cpsid	i
 800b8ac:	e7fe      	b.n	800b8ac <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b8ae:	4b0d      	ldr	r3, [pc, #52]	; (800b8e4 <vTaskPlaceOnUnorderedEventList+0x58>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	2180      	movs	r1, #128	; 0x80
 800b8b6:	0609      	lsls	r1, r1, #24
 800b8b8:	430a      	orrs	r2, r1
 800b8ba:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8bc:	4b09      	ldr	r3, [pc, #36]	; (800b8e4 <vTaskPlaceOnUnorderedEventList+0x58>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3318      	adds	r3, #24
 800b8c2:	001a      	movs	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	0011      	movs	r1, r2
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f7fe fc8c 	bl	800a1e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	f000 fbae 	bl	800c034 <prvAddCurrentTaskToDelayedList>
}
 800b8d8:	46c0      	nop			; (mov r8, r8)
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b004      	add	sp, #16
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	20001dc8 	.word	0x20001dc8
 800b8e4:	200018cc 	.word	0x200018cc

0800b8e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <vTaskPlaceOnEventListRestricted+0x16>
 800b8fa:	b672      	cpsid	i
 800b8fc:	e7fe      	b.n	800b8fc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <vTaskPlaceOnEventListRestricted+0x48>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3318      	adds	r3, #24
 800b904:	001a      	movs	r2, r3
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	0011      	movs	r1, r2
 800b90a:	0018      	movs	r0, r3
 800b90c:	f7fe fc6b 	bl	800a1e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d002      	beq.n	800b91c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800b916:	2301      	movs	r3, #1
 800b918:	425b      	negs	r3, r3
 800b91a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	0011      	movs	r1, r2
 800b922:	0018      	movs	r0, r3
 800b924:	f000 fb86 	bl	800c034 <prvAddCurrentTaskToDelayedList>
	}
 800b928:	46c0      	nop			; (mov r8, r8)
 800b92a:	46bd      	mov	sp, r7
 800b92c:	b004      	add	sp, #16
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	200018cc 	.word	0x200018cc

0800b934 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <xTaskRemoveFromEventList+0x1a>
 800b94a:	b672      	cpsid	i
 800b94c:	e7fe      	b.n	800b94c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	3318      	adds	r3, #24
 800b952:	0018      	movs	r0, r3
 800b954:	f7fe fc9f 	bl	800a296 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b958:	4b1e      	ldr	r3, [pc, #120]	; (800b9d4 <xTaskRemoveFromEventList+0xa0>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d11d      	bne.n	800b99c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	3304      	adds	r3, #4
 800b964:	0018      	movs	r0, r3
 800b966:	f7fe fc96 	bl	800a296 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	4b1a      	ldr	r3, [pc, #104]	; (800b9d8 <xTaskRemoveFromEventList+0xa4>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	429a      	cmp	r2, r3
 800b974:	d903      	bls.n	800b97e <xTaskRemoveFromEventList+0x4a>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	4b17      	ldr	r3, [pc, #92]	; (800b9d8 <xTaskRemoveFromEventList+0xa4>)
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b982:	0013      	movs	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	189b      	adds	r3, r3, r2
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	4a14      	ldr	r2, [pc, #80]	; (800b9dc <xTaskRemoveFromEventList+0xa8>)
 800b98c:	189a      	adds	r2, r3, r2
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	3304      	adds	r3, #4
 800b992:	0019      	movs	r1, r3
 800b994:	0010      	movs	r0, r2
 800b996:	f7fe fc26 	bl	800a1e6 <vListInsertEnd>
 800b99a:	e007      	b.n	800b9ac <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3318      	adds	r3, #24
 800b9a0:	001a      	movs	r2, r3
 800b9a2:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <xTaskRemoveFromEventList+0xac>)
 800b9a4:	0011      	movs	r1, r2
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	f7fe fc1d 	bl	800a1e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b0:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <xTaskRemoveFromEventList+0xb0>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d905      	bls.n	800b9c6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9be:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <xTaskRemoveFromEventList+0xb4>)
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	e001      	b.n	800b9ca <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
}
 800b9cc:	0018      	movs	r0, r3
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b004      	add	sp, #16
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	20001dc8 	.word	0x20001dc8
 800b9d8:	20001da8 	.word	0x20001da8
 800b9dc:	200018d0 	.word	0x200018d0
 800b9e0:	20001d60 	.word	0x20001d60
 800b9e4:	200018cc 	.word	0x200018cc
 800b9e8:	20001db4 	.word	0x20001db4

0800b9ec <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b9f6:	4b21      	ldr	r3, [pc, #132]	; (800ba7c <vTaskRemoveFromUnorderedEventList+0x90>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <vTaskRemoveFromUnorderedEventList+0x16>
 800b9fe:	b672      	cpsid	i
 800ba00:	e7fe      	b.n	800ba00 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2280      	movs	r2, #128	; 0x80
 800ba06:	0612      	lsls	r2, r2, #24
 800ba08:	431a      	orrs	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d101      	bne.n	800ba1e <vTaskRemoveFromUnorderedEventList+0x32>
 800ba1a:	b672      	cpsid	i
 800ba1c:	e7fe      	b.n	800ba1c <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	0018      	movs	r0, r3
 800ba22:	f7fe fc38 	bl	800a296 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	f7fe fc33 	bl	800a296 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba34:	4b12      	ldr	r3, [pc, #72]	; (800ba80 <vTaskRemoveFromUnorderedEventList+0x94>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d903      	bls.n	800ba44 <vTaskRemoveFromUnorderedEventList+0x58>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba40:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <vTaskRemoveFromUnorderedEventList+0x94>)
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba48:	0013      	movs	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	189b      	adds	r3, r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4a0c      	ldr	r2, [pc, #48]	; (800ba84 <vTaskRemoveFromUnorderedEventList+0x98>)
 800ba52:	189a      	adds	r2, r3, r2
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	3304      	adds	r3, #4
 800ba58:	0019      	movs	r1, r3
 800ba5a:	0010      	movs	r0, r2
 800ba5c:	f7fe fbc3 	bl	800a1e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <vTaskRemoveFromUnorderedEventList+0x9c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d902      	bls.n	800ba74 <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ba6e:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <vTaskRemoveFromUnorderedEventList+0xa0>)
 800ba70:	2201      	movs	r2, #1
 800ba72:	601a      	str	r2, [r3, #0]
	}
}
 800ba74:	46c0      	nop			; (mov r8, r8)
 800ba76:	46bd      	mov	sp, r7
 800ba78:	b004      	add	sp, #16
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20001dc8 	.word	0x20001dc8
 800ba80:	20001da8 	.word	0x20001da8
 800ba84:	200018d0 	.word	0x200018d0
 800ba88:	200018cc 	.word	0x200018cc
 800ba8c:	20001db4 	.word	0x20001db4

0800ba90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <vTaskInternalSetTimeOutState+0x20>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800baa0:	4b04      	ldr	r3, [pc, #16]	; (800bab4 <vTaskInternalSetTimeOutState+0x24>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	605a      	str	r2, [r3, #4]
}
 800baa8:	46c0      	nop			; (mov r8, r8)
 800baaa:	46bd      	mov	sp, r7
 800baac:	b002      	add	sp, #8
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20001db8 	.word	0x20001db8
 800bab4:	20001da4 	.word	0x20001da4

0800bab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <xTaskCheckForTimeOut+0x14>
 800bac8:	b672      	cpsid	i
 800baca:	e7fe      	b.n	800baca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <xTaskCheckForTimeOut+0x1e>
 800bad2:	b672      	cpsid	i
 800bad4:	e7fe      	b.n	800bad4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800bad6:	f000 ff23 	bl	800c920 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bada:	4b1d      	ldr	r3, [pc, #116]	; (800bb50 <xTaskCheckForTimeOut+0x98>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	d102      	bne.n	800baf8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	e024      	b.n	800bb42 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <xTaskCheckForTimeOut+0x9c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d007      	beq.n	800bb14 <xTaskCheckForTimeOut+0x5c>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d302      	bcc.n	800bb14 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	617b      	str	r3, [r7, #20]
 800bb12:	e016      	b.n	800bb42 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d20c      	bcs.n	800bb38 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	1ad2      	subs	r2, r2, r3
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	0018      	movs	r0, r3
 800bb2e:	f7ff ffaf 	bl	800ba90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	e004      	b.n	800bb42 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800bb42:	f000 feff 	bl	800c944 <vPortExitCritical>

	return xReturn;
 800bb46:	697b      	ldr	r3, [r7, #20]
}
 800bb48:	0018      	movs	r0, r3
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	b006      	add	sp, #24
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20001da4 	.word	0x20001da4
 800bb54:	20001db8 	.word	0x20001db8

0800bb58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb5c:	4b02      	ldr	r3, [pc, #8]	; (800bb68 <vTaskMissedYield+0x10>)
 800bb5e:	2201      	movs	r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
}
 800bb62:	46c0      	nop			; (mov r8, r8)
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20001db4 	.word	0x20001db4

0800bb6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb74:	f000 f84e 	bl	800bc14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb78:	4b03      	ldr	r3, [pc, #12]	; (800bb88 <prvIdleTask+0x1c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d9f9      	bls.n	800bb74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb80:	f000 febe 	bl	800c900 <vPortYield>
		prvCheckTasksWaitingTermination();
 800bb84:	e7f6      	b.n	800bb74 <prvIdleTask+0x8>
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	200018d0 	.word	0x200018d0

0800bb8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb92:	2300      	movs	r3, #0
 800bb94:	607b      	str	r3, [r7, #4]
 800bb96:	e00c      	b.n	800bbb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	0013      	movs	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	189b      	adds	r3, r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4a14      	ldr	r2, [pc, #80]	; (800bbf4 <prvInitialiseTaskLists+0x68>)
 800bba4:	189b      	adds	r3, r3, r2
 800bba6:	0018      	movs	r0, r3
 800bba8:	f7fe faf4 	bl	800a194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	607b      	str	r3, [r7, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b37      	cmp	r3, #55	; 0x37
 800bbb6:	d9ef      	bls.n	800bb98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbb8:	4b0f      	ldr	r3, [pc, #60]	; (800bbf8 <prvInitialiseTaskLists+0x6c>)
 800bbba:	0018      	movs	r0, r3
 800bbbc:	f7fe faea 	bl	800a194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbc0:	4b0e      	ldr	r3, [pc, #56]	; (800bbfc <prvInitialiseTaskLists+0x70>)
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	f7fe fae6 	bl	800a194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbc8:	4b0d      	ldr	r3, [pc, #52]	; (800bc00 <prvInitialiseTaskLists+0x74>)
 800bbca:	0018      	movs	r0, r3
 800bbcc:	f7fe fae2 	bl	800a194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <prvInitialiseTaskLists+0x78>)
 800bbd2:	0018      	movs	r0, r3
 800bbd4:	f7fe fade 	bl	800a194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <prvInitialiseTaskLists+0x7c>)
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f7fe fada 	bl	800a194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <prvInitialiseTaskLists+0x80>)
 800bbe2:	4a05      	ldr	r2, [pc, #20]	; (800bbf8 <prvInitialiseTaskLists+0x6c>)
 800bbe4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <prvInitialiseTaskLists+0x84>)
 800bbe8:	4a04      	ldr	r2, [pc, #16]	; (800bbfc <prvInitialiseTaskLists+0x70>)
 800bbea:	601a      	str	r2, [r3, #0]
}
 800bbec:	46c0      	nop			; (mov r8, r8)
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	b002      	add	sp, #8
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	200018d0 	.word	0x200018d0
 800bbf8:	20001d30 	.word	0x20001d30
 800bbfc:	20001d44 	.word	0x20001d44
 800bc00:	20001d60 	.word	0x20001d60
 800bc04:	20001d74 	.word	0x20001d74
 800bc08:	20001d8c 	.word	0x20001d8c
 800bc0c:	20001d58 	.word	0x20001d58
 800bc10:	20001d5c 	.word	0x20001d5c

0800bc14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc1a:	e01a      	b.n	800bc52 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800bc1c:	f000 fe80 	bl	800c920 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bc20:	4b10      	ldr	r3, [pc, #64]	; (800bc64 <prvCheckTasksWaitingTermination+0x50>)
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f7fe fb32 	bl	800a296 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc32:	4b0d      	ldr	r3, [pc, #52]	; (800bc68 <prvCheckTasksWaitingTermination+0x54>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	1e5a      	subs	r2, r3, #1
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <prvCheckTasksWaitingTermination+0x54>)
 800bc3a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc3c:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <prvCheckTasksWaitingTermination+0x58>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	1e5a      	subs	r2, r3, #1
 800bc42:	4b0a      	ldr	r3, [pc, #40]	; (800bc6c <prvCheckTasksWaitingTermination+0x58>)
 800bc44:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800bc46:	f000 fe7d 	bl	800c944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	f000 f80f 	bl	800bc70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc52:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <prvCheckTasksWaitingTermination+0x58>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1e0      	bne.n	800bc1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc5a:	46c0      	nop			; (mov r8, r8)
 800bc5c:	46c0      	nop			; (mov r8, r8)
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	b002      	add	sp, #8
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	20001d74 	.word	0x20001d74
 800bc68:	20001da0 	.word	0x20001da0
 800bc6c:	20001d88 	.word	0x20001d88

0800bc70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3354      	adds	r3, #84	; 0x54
 800bc7c:	0018      	movs	r0, r3
 800bc7e:	f001 fa4d 	bl	800d11c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	22b9      	movs	r2, #185	; 0xb9
 800bc86:	5c9b      	ldrb	r3, [r3, r2]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d109      	bne.n	800bca0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc90:	0018      	movs	r0, r3
 800bc92:	f000 ff83 	bl	800cb9c <vPortFree>
				vPortFree( pxTCB );
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	0018      	movs	r0, r3
 800bc9a:	f000 ff7f 	bl	800cb9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc9e:	e010      	b.n	800bcc2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	22b9      	movs	r2, #185	; 0xb9
 800bca4:	5c9b      	ldrb	r3, [r3, r2]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d104      	bne.n	800bcb4 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	0018      	movs	r0, r3
 800bcae:	f000 ff75 	bl	800cb9c <vPortFree>
	}
 800bcb2:	e006      	b.n	800bcc2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	22b9      	movs	r2, #185	; 0xb9
 800bcb8:	5c9b      	ldrb	r3, [r3, r2]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d001      	beq.n	800bcc2 <prvDeleteTCB+0x52>
 800bcbe:	b672      	cpsid	i
 800bcc0:	e7fe      	b.n	800bcc0 <prvDeleteTCB+0x50>
	}
 800bcc2:	46c0      	nop			; (mov r8, r8)
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	b002      	add	sp, #8
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd2:	4b0e      	ldr	r3, [pc, #56]	; (800bd0c <prvResetNextTaskUnblockTime+0x40>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <prvResetNextTaskUnblockTime+0x14>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e000      	b.n	800bce2 <prvResetNextTaskUnblockTime+0x16>
 800bce0:	2300      	movs	r3, #0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d004      	beq.n	800bcf0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bce6:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <prvResetNextTaskUnblockTime+0x44>)
 800bce8:	2201      	movs	r2, #1
 800bcea:	4252      	negs	r2, r2
 800bcec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcee:	e008      	b.n	800bd02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bcf0:	4b06      	ldr	r3, [pc, #24]	; (800bd0c <prvResetNextTaskUnblockTime+0x40>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <prvResetNextTaskUnblockTime+0x44>)
 800bd00:	601a      	str	r2, [r3, #0]
}
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	46bd      	mov	sp, r7
 800bd06:	b002      	add	sp, #8
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	20001d58 	.word	0x20001d58
 800bd10:	20001dc0 	.word	0x20001dc0

0800bd14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bd1a:	4b04      	ldr	r3, [pc, #16]	; (800bd2c <xTaskGetCurrentTaskHandle+0x18>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bd20:	687b      	ldr	r3, [r7, #4]
	}
 800bd22:	0018      	movs	r0, r3
 800bd24:	46bd      	mov	sp, r7
 800bd26:	b002      	add	sp, #8
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	46c0      	nop			; (mov r8, r8)
 800bd2c:	200018cc 	.word	0x200018cc

0800bd30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd36:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <xTaskGetSchedulerState+0x30>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d102      	bne.n	800bd44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	607b      	str	r3, [r7, #4]
 800bd42:	e008      	b.n	800bd56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd44:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <xTaskGetSchedulerState+0x34>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	607b      	str	r3, [r7, #4]
 800bd50:	e001      	b.n	800bd56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd52:	2300      	movs	r3, #0
 800bd54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd56:	687b      	ldr	r3, [r7, #4]
	}
 800bd58:	0018      	movs	r0, r3
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	b002      	add	sp, #8
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20001dac 	.word	0x20001dac
 800bd64:	20001dc8 	.word	0x20001dc8

0800bd68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd74:	2300      	movs	r3, #0
 800bd76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d056      	beq.n	800be2c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd82:	4b2d      	ldr	r3, [pc, #180]	; (800be38 <xTaskPriorityInherit+0xd0>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d246      	bcs.n	800be1a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	db06      	blt.n	800bda2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd94:	4b28      	ldr	r3, [pc, #160]	; (800be38 <xTaskPriorityInherit+0xd0>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9a:	2238      	movs	r2, #56	; 0x38
 800bd9c:	1ad2      	subs	r2, r2, r3
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6959      	ldr	r1, [r3, #20]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdaa:	0013      	movs	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	189b      	adds	r3, r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4a22      	ldr	r2, [pc, #136]	; (800be3c <xTaskPriorityInherit+0xd4>)
 800bdb4:	189b      	adds	r3, r3, r2
 800bdb6:	4299      	cmp	r1, r3
 800bdb8:	d101      	bne.n	800bdbe <xTaskPriorityInherit+0x56>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <xTaskPriorityInherit+0x58>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d022      	beq.n	800be0a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f7fe fa64 	bl	800a296 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdce:	4b1a      	ldr	r3, [pc, #104]	; (800be38 <xTaskPriorityInherit+0xd0>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bddc:	4b18      	ldr	r3, [pc, #96]	; (800be40 <xTaskPriorityInherit+0xd8>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d903      	bls.n	800bdec <xTaskPriorityInherit+0x84>
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde8:	4b15      	ldr	r3, [pc, #84]	; (800be40 <xTaskPriorityInherit+0xd8>)
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf0:	0013      	movs	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	189b      	adds	r3, r3, r2
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4a10      	ldr	r2, [pc, #64]	; (800be3c <xTaskPriorityInherit+0xd4>)
 800bdfa:	189a      	adds	r2, r3, r2
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	3304      	adds	r3, #4
 800be00:	0019      	movs	r1, r3
 800be02:	0010      	movs	r0, r2
 800be04:	f7fe f9ef 	bl	800a1e6 <vListInsertEnd>
 800be08:	e004      	b.n	800be14 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be0a:	4b0b      	ldr	r3, [pc, #44]	; (800be38 <xTaskPriorityInherit+0xd0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be14:	2301      	movs	r3, #1
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	e008      	b.n	800be2c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be1e:	4b06      	ldr	r3, [pc, #24]	; (800be38 <xTaskPriorityInherit+0xd0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be24:	429a      	cmp	r2, r3
 800be26:	d201      	bcs.n	800be2c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be28:	2301      	movs	r3, #1
 800be2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be2c:	68fb      	ldr	r3, [r7, #12]
	}
 800be2e:	0018      	movs	r0, r3
 800be30:	46bd      	mov	sp, r7
 800be32:	b004      	add	sp, #16
 800be34:	bd80      	pop	{r7, pc}
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	200018cc 	.word	0x200018cc
 800be3c:	200018d0 	.word	0x200018d0
 800be40:	20001da8 	.word	0x20001da8

0800be44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800be50:	2300      	movs	r3, #0
 800be52:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d044      	beq.n	800bee4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be5a:	4b25      	ldr	r3, [pc, #148]	; (800bef0 <xTaskPriorityDisinherit+0xac>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	429a      	cmp	r2, r3
 800be62:	d001      	beq.n	800be68 <xTaskPriorityDisinherit+0x24>
 800be64:	b672      	cpsid	i
 800be66:	e7fe      	b.n	800be66 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <xTaskPriorityDisinherit+0x30>
 800be70:	b672      	cpsid	i
 800be72:	e7fe      	b.n	800be72 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be78:	1e5a      	subs	r2, r3, #1
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be86:	429a      	cmp	r2, r3
 800be88:	d02c      	beq.n	800bee4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d128      	bne.n	800bee4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	3304      	adds	r3, #4
 800be96:	0018      	movs	r0, r3
 800be98:	f7fe f9fd 	bl	800a296 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea8:	2238      	movs	r2, #56	; 0x38
 800beaa:	1ad2      	subs	r2, r2, r3
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb4:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <xTaskPriorityDisinherit+0xb0>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d903      	bls.n	800bec4 <xTaskPriorityDisinherit+0x80>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <xTaskPriorityDisinherit+0xb0>)
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec8:	0013      	movs	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	189b      	adds	r3, r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4a09      	ldr	r2, [pc, #36]	; (800bef8 <xTaskPriorityDisinherit+0xb4>)
 800bed2:	189a      	adds	r2, r3, r2
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	3304      	adds	r3, #4
 800bed8:	0019      	movs	r1, r3
 800beda:	0010      	movs	r0, r2
 800bedc:	f7fe f983 	bl	800a1e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bee0:	2301      	movs	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bee4:	68fb      	ldr	r3, [r7, #12]
	}
 800bee6:	0018      	movs	r0, r3
 800bee8:	46bd      	mov	sp, r7
 800beea:	b004      	add	sp, #16
 800beec:	bd80      	pop	{r7, pc}
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	200018cc 	.word	0x200018cc
 800bef4:	20001da8 	.word	0x20001da8
 800bef8:	200018d0 	.word	0x200018d0

0800befc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800befc:	b580      	push	{r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d05d      	beq.n	800bfd0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800bf1c:	b672      	cpsid	i
 800bf1e:	e7fe      	b.n	800bf1e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d902      	bls.n	800bf30 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	e002      	b.n	800bf36 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf34:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d047      	beq.n	800bfd0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d142      	bne.n	800bfd0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf4a:	4b23      	ldr	r3, [pc, #140]	; (800bfd8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d101      	bne.n	800bf58 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800bf54:	b672      	cpsid	i
 800bf56:	e7fe      	b.n	800bf56 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	697a      	ldr	r2, [r7, #20]
 800bf62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	db04      	blt.n	800bf76 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2238      	movs	r2, #56	; 0x38
 800bf70:	1ad2      	subs	r2, r2, r3
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	6959      	ldr	r1, [r3, #20]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	0013      	movs	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	189b      	adds	r3, r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4a15      	ldr	r2, [pc, #84]	; (800bfdc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bf86:	189b      	adds	r3, r3, r2
 800bf88:	4299      	cmp	r1, r3
 800bf8a:	d101      	bne.n	800bf90 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e000      	b.n	800bf92 <vTaskPriorityDisinheritAfterTimeout+0x96>
 800bf90:	2300      	movs	r3, #0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d01c      	beq.n	800bfd0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	3304      	adds	r3, #4
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	f7fe f97b 	bl	800a296 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa4:	4b0e      	ldr	r3, [pc, #56]	; (800bfe0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d903      	bls.n	800bfb4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb8:	0013      	movs	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	189b      	adds	r3, r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4a06      	ldr	r2, [pc, #24]	; (800bfdc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bfc2:	189a      	adds	r2, r3, r2
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	0019      	movs	r1, r3
 800bfca:	0010      	movs	r0, r2
 800bfcc:	f7fe f90b 	bl	800a1e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfd0:	46c0      	nop			; (mov r8, r8)
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	b006      	add	sp, #24
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	200018cc 	.word	0x200018cc
 800bfdc:	200018d0 	.word	0x200018d0
 800bfe0:	20001da8 	.word	0x20001da8

0800bfe4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bfea:	4b08      	ldr	r3, [pc, #32]	; (800c00c <uxTaskResetEventItemValue+0x28>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bff2:	4b06      	ldr	r3, [pc, #24]	; (800c00c <uxTaskResetEventItemValue+0x28>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff8:	4b04      	ldr	r3, [pc, #16]	; (800c00c <uxTaskResetEventItemValue+0x28>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2138      	movs	r1, #56	; 0x38
 800bffe:	1a8a      	subs	r2, r1, r2
 800c000:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c002:	687b      	ldr	r3, [r7, #4]
}
 800c004:	0018      	movs	r0, r3
 800c006:	46bd      	mov	sp, r7
 800c008:	b002      	add	sp, #8
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	200018cc 	.word	0x200018cc

0800c010 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c010:	b580      	push	{r7, lr}
 800c012:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c014:	4b06      	ldr	r3, [pc, #24]	; (800c030 <pvTaskIncrementMutexHeldCount+0x20>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d004      	beq.n	800c026 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c01c:	4b04      	ldr	r3, [pc, #16]	; (800c030 <pvTaskIncrementMutexHeldCount+0x20>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c022:	3201      	adds	r2, #1
 800c024:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c026:	4b02      	ldr	r3, [pc, #8]	; (800c030 <pvTaskIncrementMutexHeldCount+0x20>)
 800c028:	681b      	ldr	r3, [r3, #0]
	}
 800c02a:	0018      	movs	r0, r3
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	200018cc 	.word	0x200018cc

0800c034 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c03e:	4b21      	ldr	r3, [pc, #132]	; (800c0c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c044:	4b20      	ldr	r3, [pc, #128]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3304      	adds	r3, #4
 800c04a:	0018      	movs	r0, r3
 800c04c:	f7fe f923 	bl	800a296 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	3301      	adds	r3, #1
 800c054:	d10b      	bne.n	800c06e <prvAddCurrentTaskToDelayedList+0x3a>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d008      	beq.n	800c06e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c05c:	4b1a      	ldr	r3, [pc, #104]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	1d1a      	adds	r2, r3, #4
 800c062:	4b1a      	ldr	r3, [pc, #104]	; (800c0cc <prvAddCurrentTaskToDelayedList+0x98>)
 800c064:	0011      	movs	r1, r2
 800c066:	0018      	movs	r0, r3
 800c068:	f7fe f8bd 	bl	800a1e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c06c:	e026      	b.n	800c0bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	18d3      	adds	r3, r2, r3
 800c074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c076:	4b14      	ldr	r3, [pc, #80]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	429a      	cmp	r2, r3
 800c084:	d209      	bcs.n	800c09a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c086:	4b12      	ldr	r3, [pc, #72]	; (800c0d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3304      	adds	r3, #4
 800c090:	0019      	movs	r1, r3
 800c092:	0010      	movs	r0, r2
 800c094:	f7fe f8c9 	bl	800a22a <vListInsert>
}
 800c098:	e010      	b.n	800c0bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c09a:	4b0e      	ldr	r3, [pc, #56]	; (800c0d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	0019      	movs	r1, r3
 800c0a6:	0010      	movs	r0, r2
 800c0a8:	f7fe f8bf 	bl	800a22a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c0ac:	4b0a      	ldr	r3, [pc, #40]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d202      	bcs.n	800c0bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c0b6:	4b08      	ldr	r3, [pc, #32]	; (800c0d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	601a      	str	r2, [r3, #0]
}
 800c0bc:	46c0      	nop			; (mov r8, r8)
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	b004      	add	sp, #16
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	20001da4 	.word	0x20001da4
 800c0c8:	200018cc 	.word	0x200018cc
 800c0cc:	20001d8c 	.word	0x20001d8c
 800c0d0:	20001d5c 	.word	0x20001d5c
 800c0d4:	20001d58 	.word	0x20001d58
 800c0d8:	20001dc0 	.word	0x20001dc0

0800c0dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0dc:	b590      	push	{r4, r7, lr}
 800c0de:	b089      	sub	sp, #36	; 0x24
 800c0e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0e6:	f000 faff 	bl	800c6e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0ea:	4b17      	ldr	r3, [pc, #92]	; (800c148 <xTimerCreateTimerTask+0x6c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d020      	beq.n	800c134 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0fa:	003a      	movs	r2, r7
 800c0fc:	1d39      	adds	r1, r7, #4
 800c0fe:	2308      	movs	r3, #8
 800c100:	18fb      	adds	r3, r7, r3
 800c102:	0018      	movs	r0, r3
 800c104:	f7fd fe5c 	bl	8009dc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c108:	683c      	ldr	r4, [r7, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	490f      	ldr	r1, [pc, #60]	; (800c14c <xTimerCreateTimerTask+0x70>)
 800c110:	480f      	ldr	r0, [pc, #60]	; (800c150 <xTimerCreateTimerTask+0x74>)
 800c112:	9202      	str	r2, [sp, #8]
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	2302      	movs	r3, #2
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	2300      	movs	r3, #0
 800c11c:	0022      	movs	r2, r4
 800c11e:	f7fe ffb0 	bl	800b082 <xTaskCreateStatic>
 800c122:	0002      	movs	r2, r0
 800c124:	4b0b      	ldr	r3, [pc, #44]	; (800c154 <xTimerCreateTimerTask+0x78>)
 800c126:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c128:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <xTimerCreateTimerTask+0x78>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d001      	beq.n	800c134 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800c130:	2301      	movs	r3, #1
 800c132:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <xTimerCreateTimerTask+0x62>
 800c13a:	b672      	cpsid	i
 800c13c:	e7fe      	b.n	800c13c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800c13e:	68fb      	ldr	r3, [r7, #12]
}
 800c140:	0018      	movs	r0, r3
 800c142:	46bd      	mov	sp, r7
 800c144:	b005      	add	sp, #20
 800c146:	bd90      	pop	{r4, r7, pc}
 800c148:	20001dfc 	.word	0x20001dfc
 800c14c:	0800daf4 	.word	0x0800daf4
 800c150:	0800c34d 	.word	0x0800c34d
 800c154:	20001e00 	.word	0x20001e00

0800c158 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c158:	b590      	push	{r4, r7, lr}
 800c15a:	b089      	sub	sp, #36	; 0x24
 800c15c:	af02      	add	r7, sp, #8
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c166:	2030      	movs	r0, #48	; 0x30
 800c168:	f000 fc72 	bl	800ca50 <pvPortMalloc>
 800c16c:	0003      	movs	r3, r0
 800c16e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00e      	beq.n	800c194 <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c176:	683c      	ldr	r4, [r7, #0]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	0023      	movs	r3, r4
 800c188:	f000 f835 	bl	800c1f6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	222c      	movs	r2, #44	; 0x2c
 800c190:	2100      	movs	r1, #0
 800c192:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c194:	697b      	ldr	r3, [r7, #20]
	}
 800c196:	0018      	movs	r0, r3
 800c198:	46bd      	mov	sp, r7
 800c19a:	b007      	add	sp, #28
 800c19c:	bd90      	pop	{r4, r7, pc}

0800c19e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c19e:	b590      	push	{r4, r7, lr}
 800c1a0:	b089      	sub	sp, #36	; 0x24
 800c1a2:	af02      	add	r7, sp, #8
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
 800c1aa:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c1ac:	2330      	movs	r3, #48	; 0x30
 800c1ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b30      	cmp	r3, #48	; 0x30
 800c1b4:	d001      	beq.n	800c1ba <xTimerCreateStatic+0x1c>
 800c1b6:	b672      	cpsid	i
 800c1b8:	e7fe      	b.n	800c1b8 <xTimerCreateStatic+0x1a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <xTimerCreateStatic+0x26>
 800c1c0:	b672      	cpsid	i
 800c1c2:	e7fe      	b.n	800c1c2 <xTimerCreateStatic+0x24>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00e      	beq.n	800c1ec <xTimerCreateStatic+0x4e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c1ce:	683c      	ldr	r4, [r7, #0]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	0023      	movs	r3, r4
 800c1e0:	f000 f809 	bl	800c1f6 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	222c      	movs	r2, #44	; 0x2c
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c1ec:	697b      	ldr	r3, [r7, #20]
	}
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	b007      	add	sp, #28
 800c1f4:	bd90      	pop	{r4, r7, pc}

0800c1f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	607a      	str	r2, [r7, #4]
 800c202:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <prvInitialiseNewTimer+0x18>
 800c20a:	b672      	cpsid	i
 800c20c:	e7fe      	b.n	800c20c <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d015      	beq.n	800c240 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c214:	f000 fa68 	bl	800c6e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	683a      	ldr	r2, [r7, #0]
 800c22e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	3304      	adds	r3, #4
 800c23a:	0018      	movs	r0, r3
 800c23c:	f7fd ffc8 	bl	800a1d0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c240:	46c0      	nop			; (mov r8, r8)
 800c242:	46bd      	mov	sp, r7
 800c244:	b004      	add	sp, #16
 800c246:	bd80      	pop	{r7, pc}

0800c248 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c248:	b590      	push	{r4, r7, lr}
 800c24a:	b08b      	sub	sp, #44	; 0x2c
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
 800c254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c256:	2300      	movs	r3, #0
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <xTimerGenericCommand+0x1c>
 800c260:	b672      	cpsid	i
 800c262:	e7fe      	b.n	800c262 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c264:	4b1c      	ldr	r3, [pc, #112]	; (800c2d8 <xTimerGenericCommand+0x90>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d030      	beq.n	800c2ce <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c26c:	2414      	movs	r4, #20
 800c26e:	193b      	adds	r3, r7, r4
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c274:	193b      	adds	r3, r7, r4
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c27a:	193b      	adds	r3, r7, r4
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2b05      	cmp	r3, #5
 800c284:	dc19      	bgt.n	800c2ba <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c286:	f7ff fd53 	bl	800bd30 <xTaskGetSchedulerState>
 800c28a:	0003      	movs	r3, r0
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d109      	bne.n	800c2a4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c290:	4b11      	ldr	r3, [pc, #68]	; (800c2d8 <xTimerGenericCommand+0x90>)
 800c292:	6818      	ldr	r0, [r3, #0]
 800c294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c296:	1939      	adds	r1, r7, r4
 800c298:	2300      	movs	r3, #0
 800c29a:	f7fe f9d1 	bl	800a640 <xQueueGenericSend>
 800c29e:	0003      	movs	r3, r0
 800c2a0:	627b      	str	r3, [r7, #36]	; 0x24
 800c2a2:	e014      	b.n	800c2ce <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c2a4:	4b0c      	ldr	r3, [pc, #48]	; (800c2d8 <xTimerGenericCommand+0x90>)
 800c2a6:	6818      	ldr	r0, [r3, #0]
 800c2a8:	2314      	movs	r3, #20
 800c2aa:	18f9      	adds	r1, r7, r3
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f7fe f9c6 	bl	800a640 <xQueueGenericSend>
 800c2b4:	0003      	movs	r3, r0
 800c2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b8:	e009      	b.n	800c2ce <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2ba:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <xTimerGenericCommand+0x90>)
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	2314      	movs	r3, #20
 800c2c2:	18f9      	adds	r1, r7, r3
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f7fe fa7f 	bl	800a7c8 <xQueueGenericSendFromISR>
 800c2ca:	0003      	movs	r3, r0
 800c2cc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2d0:	0018      	movs	r0, r3
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	b00b      	add	sp, #44	; 0x2c
 800c2d6:	bd90      	pop	{r4, r7, pc}
 800c2d8:	20001dfc 	.word	0x20001dfc

0800c2dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2e6:	4b18      	ldr	r3, [pc, #96]	; (800c348 <prvProcessExpiredTimer+0x6c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	f7fd ffce 	bl	800a296 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d119      	bne.n	800c336 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	699a      	ldr	r2, [r3, #24]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	18d1      	adds	r1, r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f000 f8b6 	bl	800c480 <prvInsertTimerInActiveList>
 800c314:	1e03      	subs	r3, r0, #0
 800c316:	d00e      	beq.n	800c336 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	2300      	movs	r3, #0
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	2300      	movs	r3, #0
 800c322:	2100      	movs	r1, #0
 800c324:	f7ff ff90 	bl	800c248 <xTimerGenericCommand>
 800c328:	0003      	movs	r3, r0
 800c32a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <prvProcessExpiredTimer+0x5a>
 800c332:	b672      	cpsid	i
 800c334:	e7fe      	b.n	800c334 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	0010      	movs	r0, r2
 800c33e:	4798      	blx	r3
}
 800c340:	46c0      	nop			; (mov r8, r8)
 800c342:	46bd      	mov	sp, r7
 800c344:	b004      	add	sp, #16
 800c346:	bd80      	pop	{r7, pc}
 800c348:	20001df4 	.word	0x20001df4

0800c34c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c354:	2308      	movs	r3, #8
 800c356:	18fb      	adds	r3, r7, r3
 800c358:	0018      	movs	r0, r3
 800c35a:	f000 f851 	bl	800c400 <prvGetNextExpireTime>
 800c35e:	0003      	movs	r3, r0
 800c360:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	0011      	movs	r1, r2
 800c368:	0018      	movs	r0, r3
 800c36a:	f000 f803 	bl	800c374 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c36e:	f000 f8c9 	bl	800c504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c372:	e7ef      	b.n	800c354 <prvTimerTask+0x8>

0800c374 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c37e:	f7ff f893 	bl	800b4a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c382:	2308      	movs	r3, #8
 800c384:	18fb      	adds	r3, r7, r3
 800c386:	0018      	movs	r0, r3
 800c388:	f000 f85a 	bl	800c440 <prvSampleTimeNow>
 800c38c:	0003      	movs	r3, r0
 800c38e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d129      	bne.n	800c3ea <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10c      	bne.n	800c3b6 <prvProcessTimerOrBlockTask+0x42>
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d808      	bhi.n	800c3b6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800c3a4:	f7ff f88c 	bl	800b4c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	0011      	movs	r1, r2
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	f7ff ff94 	bl	800c2dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c3b4:	e01b      	b.n	800c3ee <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d006      	beq.n	800c3ca <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c3bc:	4b0e      	ldr	r3, [pc, #56]	; (800c3f8 <prvProcessTimerOrBlockTask+0x84>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	425a      	negs	r2, r3
 800c3c4:	4153      	adcs	r3, r2
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	; (800c3fc <prvProcessTimerOrBlockTask+0x88>)
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	0019      	movs	r1, r3
 800c3d8:	f7fe fe20 	bl	800b01c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c3dc:	f7ff f870 	bl	800b4c0 <xTaskResumeAll>
 800c3e0:	1e03      	subs	r3, r0, #0
 800c3e2:	d104      	bne.n	800c3ee <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800c3e4:	f000 fa8c 	bl	800c900 <vPortYield>
}
 800c3e8:	e001      	b.n	800c3ee <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800c3ea:	f7ff f869 	bl	800b4c0 <xTaskResumeAll>
}
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	b004      	add	sp, #16
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	46c0      	nop			; (mov r8, r8)
 800c3f8:	20001df8 	.word	0x20001df8
 800c3fc:	20001dfc 	.word	0x20001dfc

0800c400 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c408:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <prvGetNextExpireTime+0x3c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	425a      	negs	r2, r3
 800c410:	4153      	adcs	r3, r2
 800c412:	b2db      	uxtb	r3, r3
 800c414:	001a      	movs	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d105      	bne.n	800c42e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c422:	4b06      	ldr	r3, [pc, #24]	; (800c43c <prvGetNextExpireTime+0x3c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e001      	b.n	800c432 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c432:	68fb      	ldr	r3, [r7, #12]
}
 800c434:	0018      	movs	r0, r3
 800c436:	46bd      	mov	sp, r7
 800c438:	b004      	add	sp, #16
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20001df4 	.word	0x20001df4

0800c440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c448:	f7ff f8c6 	bl	800b5d8 <xTaskGetTickCount>
 800c44c:	0003      	movs	r3, r0
 800c44e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <prvSampleTimeNow+0x3c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	429a      	cmp	r2, r3
 800c458:	d205      	bcs.n	800c466 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800c45a:	f000 f8eb 	bl	800c634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	e002      	b.n	800c46c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c46c:	4b03      	ldr	r3, [pc, #12]	; (800c47c <prvSampleTimeNow+0x3c>)
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800c472:	68fb      	ldr	r3, [r7, #12]
}
 800c474:	0018      	movs	r0, r3
 800c476:	46bd      	mov	sp, r7
 800c478:	b004      	add	sp, #16
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	20001e04 	.word	0x20001e04

0800c480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c48e:	2300      	movs	r3, #0
 800c490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d812      	bhi.n	800c4cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	1ad2      	subs	r2, r2, r3
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d302      	bcc.n	800c4ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	e01b      	b.n	800c4f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c4ba:	4b10      	ldr	r3, [pc, #64]	; (800c4fc <prvInsertTimerInActiveList+0x7c>)
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	0019      	movs	r1, r3
 800c4c4:	0010      	movs	r0, r2
 800c4c6:	f7fd feb0 	bl	800a22a <vListInsert>
 800c4ca:	e012      	b.n	800c4f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d206      	bcs.n	800c4e2 <prvInsertTimerInActiveList+0x62>
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d302      	bcc.n	800c4e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	617b      	str	r3, [r7, #20]
 800c4e0:	e007      	b.n	800c4f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <prvInsertTimerInActiveList+0x80>)
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	0019      	movs	r1, r3
 800c4ec:	0010      	movs	r0, r2
 800c4ee:	f7fd fe9c 	bl	800a22a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4f2:	697b      	ldr	r3, [r7, #20]
}
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	b006      	add	sp, #24
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20001df8 	.word	0x20001df8
 800c500:	20001df4 	.word	0x20001df4

0800c504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c504:	b590      	push	{r4, r7, lr}
 800c506:	b08d      	sub	sp, #52	; 0x34
 800c508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c50a:	e07f      	b.n	800c60c <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c50c:	2208      	movs	r2, #8
 800c50e:	18bb      	adds	r3, r7, r2
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	da0f      	bge.n	800c536 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c516:	18bb      	adds	r3, r7, r2
 800c518:	3304      	adds	r3, #4
 800c51a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <prvProcessReceivedCommands+0x22>
 800c522:	b672      	cpsid	i
 800c524:	e7fe      	b.n	800c524 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	6858      	ldr	r0, [r3, #4]
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	0019      	movs	r1, r3
 800c534:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c536:	2208      	movs	r2, #8
 800c538:	18bb      	adds	r3, r7, r2
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	db64      	blt.n	800c60a <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c540:	18bb      	adds	r3, r7, r2
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d004      	beq.n	800c558 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c54e:	6a3b      	ldr	r3, [r7, #32]
 800c550:	3304      	adds	r3, #4
 800c552:	0018      	movs	r0, r3
 800c554:	f7fd fe9f 	bl	800a296 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c558:	1d3b      	adds	r3, r7, #4
 800c55a:	0018      	movs	r0, r3
 800c55c:	f7ff ff70 	bl	800c440 <prvSampleTimeNow>
 800c560:	0003      	movs	r3, r0
 800c562:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800c564:	2308      	movs	r3, #8
 800c566:	18fb      	adds	r3, r7, r3
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b09      	cmp	r3, #9
 800c56c:	d84e      	bhi.n	800c60c <prvProcessReceivedCommands+0x108>
 800c56e:	009a      	lsls	r2, r3, #2
 800c570:	4b2e      	ldr	r3, [pc, #184]	; (800c62c <prvProcessReceivedCommands+0x128>)
 800c572:	18d3      	adds	r3, r2, r3
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c578:	2408      	movs	r4, #8
 800c57a:	193b      	adds	r3, r7, r4
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	18d1      	adds	r1, r2, r3
 800c584:	193b      	adds	r3, r7, r4
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	6a38      	ldr	r0, [r7, #32]
 800c58c:	f7ff ff78 	bl	800c480 <prvInsertTimerInActiveList>
 800c590:	1e03      	subs	r3, r0, #0
 800c592:	d03b      	beq.n	800c60c <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c598:	6a3a      	ldr	r2, [r7, #32]
 800c59a:	0010      	movs	r0, r2
 800c59c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d132      	bne.n	800c60c <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5a6:	193b      	adds	r3, r7, r4
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	6a3b      	ldr	r3, [r7, #32]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	18d2      	adds	r2, r2, r3
 800c5b0:	6a38      	ldr	r0, [r7, #32]
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	f7ff fe45 	bl	800c248 <xTimerGenericCommand>
 800c5be:	0003      	movs	r3, r0
 800c5c0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d121      	bne.n	800c60c <prvProcessReceivedCommands+0x108>
 800c5c8:	b672      	cpsid	i
 800c5ca:	e7fe      	b.n	800c5ca <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c5cc:	2308      	movs	r3, #8
 800c5ce:	18fb      	adds	r3, r7, r3
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <prvProcessReceivedCommands+0xde>
 800c5de:	b672      	cpsid	i
 800c5e0:	e7fe      	b.n	800c5e0 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	699a      	ldr	r2, [r3, #24]
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	18d1      	adds	r1, r2, r3
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	69fa      	ldr	r2, [r7, #28]
 800c5ee:	6a38      	ldr	r0, [r7, #32]
 800c5f0:	f7ff ff46 	bl	800c480 <prvInsertTimerInActiveList>
					break;
 800c5f4:	e00a      	b.n	800c60c <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	222c      	movs	r2, #44	; 0x2c
 800c5fa:	5c9b      	ldrb	r3, [r3, r2]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d105      	bne.n	800c60c <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800c600:	6a3b      	ldr	r3, [r7, #32]
 800c602:	0018      	movs	r0, r3
 800c604:	f000 faca 	bl	800cb9c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c608:	e000      	b.n	800c60c <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c60a:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c60c:	4b08      	ldr	r3, [pc, #32]	; (800c630 <prvProcessReceivedCommands+0x12c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2208      	movs	r2, #8
 800c612:	18b9      	adds	r1, r7, r2
 800c614:	2200      	movs	r2, #0
 800c616:	0018      	movs	r0, r3
 800c618:	f7fe f947 	bl	800a8aa <xQueueReceive>
 800c61c:	1e03      	subs	r3, r0, #0
 800c61e:	d000      	beq.n	800c622 <prvProcessReceivedCommands+0x11e>
 800c620:	e774      	b.n	800c50c <prvProcessReceivedCommands+0x8>
	}
}
 800c622:	46c0      	nop			; (mov r8, r8)
 800c624:	46c0      	nop			; (mov r8, r8)
 800c626:	46bd      	mov	sp, r7
 800c628:	b00b      	add	sp, #44	; 0x2c
 800c62a:	bd90      	pop	{r4, r7, pc}
 800c62c:	0800e308 	.word	0x0800e308
 800c630:	20001dfc 	.word	0x20001dfc

0800c634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b088      	sub	sp, #32
 800c638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c63a:	e03e      	b.n	800c6ba <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c63c:	4b28      	ldr	r3, [pc, #160]	; (800c6e0 <prvSwitchTimerLists+0xac>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c646:	4b26      	ldr	r3, [pc, #152]	; (800c6e0 <prvSwitchTimerLists+0xac>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3304      	adds	r3, #4
 800c654:	0018      	movs	r0, r3
 800c656:	f7fd fe1e 	bl	800a296 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	0010      	movs	r0, r2
 800c662:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d126      	bne.n	800c6ba <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	18d3      	adds	r3, r2, r3
 800c674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d90e      	bls.n	800c69c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c68a:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <prvSwitchTimerLists+0xac>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3304      	adds	r3, #4
 800c692:	0019      	movs	r1, r3
 800c694:	0010      	movs	r0, r2
 800c696:	f7fd fdc8 	bl	800a22a <vListInsert>
 800c69a:	e00e      	b.n	800c6ba <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	f7ff fdce 	bl	800c248 <xTimerGenericCommand>
 800c6ac:	0003      	movs	r3, r0
 800c6ae:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <prvSwitchTimerLists+0x86>
 800c6b6:	b672      	cpsid	i
 800c6b8:	e7fe      	b.n	800c6b8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6ba:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <prvSwitchTimerLists+0xac>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1bb      	bne.n	800c63c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6c4:	4b06      	ldr	r3, [pc, #24]	; (800c6e0 <prvSwitchTimerLists+0xac>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6ca:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <prvSwitchTimerLists+0xb0>)
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	4b04      	ldr	r3, [pc, #16]	; (800c6e0 <prvSwitchTimerLists+0xac>)
 800c6d0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800c6d2:	4b04      	ldr	r3, [pc, #16]	; (800c6e4 <prvSwitchTimerLists+0xb0>)
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	601a      	str	r2, [r3, #0]
}
 800c6d8:	46c0      	nop			; (mov r8, r8)
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	b006      	add	sp, #24
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20001df4 	.word	0x20001df4
 800c6e4:	20001df8 	.word	0x20001df8

0800c6e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6ee:	f000 f917 	bl	800c920 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6f2:	4b16      	ldr	r3, [pc, #88]	; (800c74c <prvCheckForValidListAndQueue+0x64>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d123      	bne.n	800c742 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <prvCheckForValidListAndQueue+0x68>)
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f7fd fd49 	bl	800a194 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c702:	4b14      	ldr	r3, [pc, #80]	; (800c754 <prvCheckForValidListAndQueue+0x6c>)
 800c704:	0018      	movs	r0, r3
 800c706:	f7fd fd45 	bl	800a194 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c70a:	4b13      	ldr	r3, [pc, #76]	; (800c758 <prvCheckForValidListAndQueue+0x70>)
 800c70c:	4a10      	ldr	r2, [pc, #64]	; (800c750 <prvCheckForValidListAndQueue+0x68>)
 800c70e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c710:	4b12      	ldr	r3, [pc, #72]	; (800c75c <prvCheckForValidListAndQueue+0x74>)
 800c712:	4a10      	ldr	r2, [pc, #64]	; (800c754 <prvCheckForValidListAndQueue+0x6c>)
 800c714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c716:	4b12      	ldr	r3, [pc, #72]	; (800c760 <prvCheckForValidListAndQueue+0x78>)
 800c718:	4a12      	ldr	r2, [pc, #72]	; (800c764 <prvCheckForValidListAndQueue+0x7c>)
 800c71a:	2100      	movs	r1, #0
 800c71c:	9100      	str	r1, [sp, #0]
 800c71e:	2110      	movs	r1, #16
 800c720:	200a      	movs	r0, #10
 800c722:	f7fd fe34 	bl	800a38e <xQueueGenericCreateStatic>
 800c726:	0002      	movs	r2, r0
 800c728:	4b08      	ldr	r3, [pc, #32]	; (800c74c <prvCheckForValidListAndQueue+0x64>)
 800c72a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c72c:	4b07      	ldr	r3, [pc, #28]	; (800c74c <prvCheckForValidListAndQueue+0x64>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d006      	beq.n	800c742 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c734:	4b05      	ldr	r3, [pc, #20]	; (800c74c <prvCheckForValidListAndQueue+0x64>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a0b      	ldr	r2, [pc, #44]	; (800c768 <prvCheckForValidListAndQueue+0x80>)
 800c73a:	0011      	movs	r1, r2
 800c73c:	0018      	movs	r0, r3
 800c73e:	f7fe fc1b 	bl	800af78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c742:	f000 f8ff 	bl	800c944 <vPortExitCritical>
}
 800c746:	46c0      	nop			; (mov r8, r8)
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	20001dfc 	.word	0x20001dfc
 800c750:	20001dcc 	.word	0x20001dcc
 800c754:	20001de0 	.word	0x20001de0
 800c758:	20001df4 	.word	0x20001df4
 800c75c:	20001df8 	.word	0x20001df8
 800c760:	20001ea8 	.word	0x20001ea8
 800c764:	20001e08 	.word	0x20001e08
 800c768:	0800dafc 	.word	0x0800dafc

0800c76c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <pvTimerGetTimerID+0x16>
 800c77e:	b672      	cpsid	i
 800c780:	e7fe      	b.n	800c780 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 800c782:	f000 f8cd 	bl	800c920 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6a1b      	ldr	r3, [r3, #32]
 800c78a:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 800c78c:	f000 f8da 	bl	800c944 <vPortExitCritical>

	return pvReturn;
 800c790:	68bb      	ldr	r3, [r7, #8]
}
 800c792:	0018      	movs	r0, r3
 800c794:	46bd      	mov	sp, r7
 800c796:	b004      	add	sp, #16
 800c798:	bd80      	pop	{r7, pc}
	...

0800c79c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	; 0x28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c7aa:	2114      	movs	r1, #20
 800c7ac:	187b      	adds	r3, r7, r1
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	4252      	negs	r2, r2
 800c7b2:	601a      	str	r2, [r3, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c7b4:	187b      	adds	r3, r7, r1
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	605a      	str	r2, [r3, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c7ba:	187b      	adds	r3, r7, r1
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	609a      	str	r2, [r3, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c7c0:	187b      	adds	r3, r7, r1
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	60da      	str	r2, [r3, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7c6:	4b07      	ldr	r3, [pc, #28]	; (800c7e4 <xTimerPendFunctionCallFromISR+0x48>)
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	683a      	ldr	r2, [r7, #0]
 800c7cc:	1879      	adds	r1, r7, r1
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f7fd fffa 	bl	800a7c8 <xQueueGenericSendFromISR>
 800c7d4:	0003      	movs	r3, r0
 800c7d6:	627b      	str	r3, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c7da:	0018      	movs	r0, r3
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	b00a      	add	sp, #40	; 0x28
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	46c0      	nop			; (mov r8, r8)
 800c7e4:	20001dfc 	.word	0x20001dfc

0800c7e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3b04      	subs	r3, #4
 800c7f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2280      	movs	r2, #128	; 0x80
 800c7fe:	0452      	lsls	r2, r2, #17
 800c800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3b04      	subs	r3, #4
 800c806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3b04      	subs	r3, #4
 800c812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c814:	4a08      	ldr	r2, [pc, #32]	; (800c838 <pxPortInitialiseStack+0x50>)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3b14      	subs	r3, #20
 800c81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	3b20      	subs	r3, #32
 800c82a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c82c:	68fb      	ldr	r3, [r7, #12]
}
 800c82e:	0018      	movs	r0, r3
 800c830:	46bd      	mov	sp, r7
 800c832:	b004      	add	sp, #16
 800c834:	bd80      	pop	{r7, pc}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	0800c83d 	.word	0x0800c83d

0800c83c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c842:	2300      	movs	r3, #0
 800c844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c846:	4b08      	ldr	r3, [pc, #32]	; (800c868 <prvTaskExitError+0x2c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3301      	adds	r3, #1
 800c84c:	d001      	beq.n	800c852 <prvTaskExitError+0x16>
 800c84e:	b672      	cpsid	i
 800c850:	e7fe      	b.n	800c850 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800c852:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c854:	46c0      	nop			; (mov r8, r8)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d0fc      	beq.n	800c856 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c85c:	46c0      	nop			; (mov r8, r8)
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	46bd      	mov	sp, r7
 800c862:	b002      	add	sp, #8
 800c864:	bd80      	pop	{r7, pc}
 800c866:	46c0      	nop			; (mov r8, r8)
 800c868:	20000028 	.word	0x20000028

0800c86c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800c870:	46c0      	nop			; (mov r8, r8)
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
	...

0800c880 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c880:	4a0b      	ldr	r2, [pc, #44]	; (800c8b0 <pxCurrentTCBConst2>)
 800c882:	6813      	ldr	r3, [r2, #0]
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	3020      	adds	r0, #32
 800c888:	f380 8809 	msr	PSP, r0
 800c88c:	2002      	movs	r0, #2
 800c88e:	f380 8814 	msr	CONTROL, r0
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c898:	46ae      	mov	lr, r5
 800c89a:	bc08      	pop	{r3}
 800c89c:	bc04      	pop	{r2}
 800c89e:	b662      	cpsie	i
 800c8a0:	4718      	bx	r3
 800c8a2:	46c0      	nop			; (mov r8, r8)
 800c8a4:	46c0      	nop			; (mov r8, r8)
 800c8a6:	46c0      	nop			; (mov r8, r8)
 800c8a8:	46c0      	nop			; (mov r8, r8)
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	46c0      	nop			; (mov r8, r8)
 800c8ae:	46c0      	nop			; (mov r8, r8)

0800c8b0 <pxCurrentTCBConst2>:
 800c8b0:	200018cc 	.word	0x200018cc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800c8b4:	46c0      	nop			; (mov r8, r8)
 800c8b6:	46c0      	nop			; (mov r8, r8)

0800c8b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800c8bc:	4b0e      	ldr	r3, [pc, #56]	; (800c8f8 <xPortStartScheduler+0x40>)
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	4b0d      	ldr	r3, [pc, #52]	; (800c8f8 <xPortStartScheduler+0x40>)
 800c8c2:	21ff      	movs	r1, #255	; 0xff
 800c8c4:	0409      	lsls	r1, r1, #16
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800c8ca:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <xPortStartScheduler+0x40>)
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <xPortStartScheduler+0x40>)
 800c8d0:	21ff      	movs	r1, #255	; 0xff
 800c8d2:	0609      	lsls	r1, r1, #24
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800c8d8:	f000 f898 	bl	800ca0c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8dc:	4b07      	ldr	r3, [pc, #28]	; (800c8fc <xPortStartScheduler+0x44>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800c8e2:	f7ff ffcd 	bl	800c880 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8e6:	f7fe ff49 	bl	800b77c <vTaskSwitchContext>
	prvTaskExitError();
 800c8ea:	f7ff ffa7 	bl	800c83c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	46c0      	nop			; (mov r8, r8)
 800c8f8:	e000ed20 	.word	0xe000ed20
 800c8fc:	20000028 	.word	0x20000028

0800c900 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800c904:	4b05      	ldr	r3, [pc, #20]	; (800c91c <vPortYield+0x1c>)
 800c906:	2280      	movs	r2, #128	; 0x80
 800c908:	0552      	lsls	r2, r2, #21
 800c90a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c90c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c910:	f3bf 8f6f 	isb	sy
}
 800c914:	46c0      	nop			; (mov r8, r8)
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	46c0      	nop			; (mov r8, r8)
 800c91c:	e000ed04 	.word	0xe000ed04

0800c920 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800c924:	b672      	cpsid	i
    uxCriticalNesting++;
 800c926:	4b06      	ldr	r3, [pc, #24]	; (800c940 <vPortEnterCritical+0x20>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	4b04      	ldr	r3, [pc, #16]	; (800c940 <vPortEnterCritical+0x20>)
 800c92e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c930:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c934:	f3bf 8f6f 	isb	sy
}
 800c938:	46c0      	nop			; (mov r8, r8)
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	46c0      	nop			; (mov r8, r8)
 800c940:	20000028 	.word	0x20000028

0800c944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c948:	4b09      	ldr	r3, [pc, #36]	; (800c970 <vPortExitCritical+0x2c>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <vPortExitCritical+0x10>
 800c950:	b672      	cpsid	i
 800c952:	e7fe      	b.n	800c952 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800c954:	4b06      	ldr	r3, [pc, #24]	; (800c970 <vPortExitCritical+0x2c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	1e5a      	subs	r2, r3, #1
 800c95a:	4b05      	ldr	r3, [pc, #20]	; (800c970 <vPortExitCritical+0x2c>)
 800c95c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800c95e:	4b04      	ldr	r3, [pc, #16]	; (800c970 <vPortExitCritical+0x2c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d100      	bne.n	800c968 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800c966:	b662      	cpsie	i
    }
}
 800c968:	46c0      	nop			; (mov r8, r8)
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	20000028 	.word	0x20000028

0800c974 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c974:	f3ef 8010 	mrs	r0, PRIMASK
 800c978:	b672      	cpsid	i
 800c97a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800c97c:	46c0      	nop			; (mov r8, r8)
 800c97e:	0018      	movs	r0, r3

0800c980 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c980:	f380 8810 	msr	PRIMASK, r0
 800c984:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800c986:	46c0      	nop			; (mov r8, r8)
	...

0800c990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c990:	f3ef 8009 	mrs	r0, PSP
 800c994:	4b0e      	ldr	r3, [pc, #56]	; (800c9d0 <pxCurrentTCBConst>)
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	3820      	subs	r0, #32
 800c99a:	6010      	str	r0, [r2, #0]
 800c99c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c99e:	4644      	mov	r4, r8
 800c9a0:	464d      	mov	r5, r9
 800c9a2:	4656      	mov	r6, sl
 800c9a4:	465f      	mov	r7, fp
 800c9a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c9a8:	b508      	push	{r3, lr}
 800c9aa:	b672      	cpsid	i
 800c9ac:	f7fe fee6 	bl	800b77c <vTaskSwitchContext>
 800c9b0:	b662      	cpsie	i
 800c9b2:	bc0c      	pop	{r2, r3}
 800c9b4:	6811      	ldr	r1, [r2, #0]
 800c9b6:	6808      	ldr	r0, [r1, #0]
 800c9b8:	3010      	adds	r0, #16
 800c9ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c9bc:	46a0      	mov	r8, r4
 800c9be:	46a9      	mov	r9, r5
 800c9c0:	46b2      	mov	sl, r6
 800c9c2:	46bb      	mov	fp, r7
 800c9c4:	f380 8809 	msr	PSP, r0
 800c9c8:	3820      	subs	r0, #32
 800c9ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c9cc:	4718      	bx	r3
 800c9ce:	46c0      	nop			; (mov r8, r8)

0800c9d0 <pxCurrentTCBConst>:
 800c9d0:	200018cc 	.word	0x200018cc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800c9d4:	46c0      	nop			; (mov r8, r8)
 800c9d6:	46c0      	nop			; (mov r8, r8)

0800c9d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9de:	f7ff ffc9 	bl	800c974 <ulSetInterruptMaskFromISR>
 800c9e2:	0003      	movs	r3, r0
 800c9e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9e6:	f7fe fe15 	bl	800b614 <xTaskIncrementTick>
 800c9ea:	1e03      	subs	r3, r0, #0
 800c9ec:	d003      	beq.n	800c9f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800c9ee:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <SysTick_Handler+0x30>)
 800c9f0:	2280      	movs	r2, #128	; 0x80
 800c9f2:	0552      	lsls	r2, r2, #21
 800c9f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	0018      	movs	r0, r3
 800c9fa:	f7ff ffc1 	bl	800c980 <vClearInterruptMaskFromISR>
}
 800c9fe:	46c0      	nop			; (mov r8, r8)
 800ca00:	46bd      	mov	sp, r7
 800ca02:	b002      	add	sp, #8
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	46c0      	nop			; (mov r8, r8)
 800ca08:	e000ed04 	.word	0xe000ed04

0800ca0c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800ca10:	4b0b      	ldr	r3, [pc, #44]	; (800ca40 <prvSetupTimerInterrupt+0x34>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800ca16:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <prvSetupTimerInterrupt+0x38>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca1c:	4b0a      	ldr	r3, [pc, #40]	; (800ca48 <prvSetupTimerInterrupt+0x3c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	22fa      	movs	r2, #250	; 0xfa
 800ca22:	0091      	lsls	r1, r2, #2
 800ca24:	0018      	movs	r0, r3
 800ca26:	f7f3 fb79 	bl	800011c <__udivsi3>
 800ca2a:	0003      	movs	r3, r0
 800ca2c:	001a      	movs	r2, r3
 800ca2e:	4b07      	ldr	r3, [pc, #28]	; (800ca4c <prvSetupTimerInterrupt+0x40>)
 800ca30:	3a01      	subs	r2, #1
 800ca32:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800ca34:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <prvSetupTimerInterrupt+0x34>)
 800ca36:	2207      	movs	r2, #7
 800ca38:	601a      	str	r2, [r3, #0]
}
 800ca3a:	46c0      	nop			; (mov r8, r8)
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	e000e010 	.word	0xe000e010
 800ca44:	e000e018 	.word	0xe000e018
 800ca48:	20000000 	.word	0x20000000
 800ca4c:	e000e014 	.word	0xe000e014

0800ca50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800ca5c:	f7fe fd24 	bl	800b4a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca60:	4b49      	ldr	r3, [pc, #292]	; (800cb88 <pvPortMalloc+0x138>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca68:	f000 f8e0 	bl	800cc2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca6c:	4b47      	ldr	r3, [pc, #284]	; (800cb8c <pvPortMalloc+0x13c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	4013      	ands	r3, r2
 800ca74:	d000      	beq.n	800ca78 <pvPortMalloc+0x28>
 800ca76:	e079      	b.n	800cb6c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d012      	beq.n	800caa4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800ca7e:	2208      	movs	r2, #8
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	189b      	adds	r3, r3, r2
 800ca84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2207      	movs	r2, #7
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	d00a      	beq.n	800caa4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2207      	movs	r2, #7
 800ca92:	4393      	bics	r3, r2
 800ca94:	3308      	adds	r3, #8
 800ca96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2207      	movs	r2, #7
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	d001      	beq.n	800caa4 <pvPortMalloc+0x54>
 800caa0:	b672      	cpsid	i
 800caa2:	e7fe      	b.n	800caa2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d060      	beq.n	800cb6c <pvPortMalloc+0x11c>
 800caaa:	4b39      	ldr	r3, [pc, #228]	; (800cb90 <pvPortMalloc+0x140>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d85b      	bhi.n	800cb6c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cab4:	4b37      	ldr	r3, [pc, #220]	; (800cb94 <pvPortMalloc+0x144>)
 800cab6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800cab8:	4b36      	ldr	r3, [pc, #216]	; (800cb94 <pvPortMalloc+0x144>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cabe:	e004      	b.n	800caca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d903      	bls.n	800cadc <pvPortMalloc+0x8c>
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f1      	bne.n	800cac0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cadc:	4b2a      	ldr	r3, [pc, #168]	; (800cb88 <pvPortMalloc+0x138>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d042      	beq.n	800cb6c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2208      	movs	r2, #8
 800caec:	189b      	adds	r3, r3, r2
 800caee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	2308      	movs	r3, #8
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d916      	bls.n	800cb36 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	18d3      	adds	r3, r2, r3
 800cb0e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2207      	movs	r2, #7
 800cb14:	4013      	ands	r3, r2
 800cb16:	d001      	beq.n	800cb1c <pvPortMalloc+0xcc>
 800cb18:	b672      	cpsid	i
 800cb1a:	e7fe      	b.n	800cb1a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	1ad2      	subs	r2, r2, r3
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	0018      	movs	r0, r3
 800cb32:	f000 f8db 	bl	800ccec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb36:	4b16      	ldr	r3, [pc, #88]	; (800cb90 <pvPortMalloc+0x140>)
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	4b13      	ldr	r3, [pc, #76]	; (800cb90 <pvPortMalloc+0x140>)
 800cb42:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb44:	4b12      	ldr	r3, [pc, #72]	; (800cb90 <pvPortMalloc+0x140>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <pvPortMalloc+0x148>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d203      	bcs.n	800cb58 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb50:	4b0f      	ldr	r3, [pc, #60]	; (800cb90 <pvPortMalloc+0x140>)
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <pvPortMalloc+0x148>)
 800cb56:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	4b0b      	ldr	r3, [pc, #44]	; (800cb8c <pvPortMalloc+0x13c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	431a      	orrs	r2, r3
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb6c:	f7fe fca8 	bl	800b4c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2207      	movs	r2, #7
 800cb74:	4013      	ands	r3, r2
 800cb76:	d001      	beq.n	800cb7c <pvPortMalloc+0x12c>
 800cb78:	b672      	cpsid	i
 800cb7a:	e7fe      	b.n	800cb7a <pvPortMalloc+0x12a>
	return pvReturn;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
}
 800cb7e:	0018      	movs	r0, r3
 800cb80:	46bd      	mov	sp, r7
 800cb82:	b006      	add	sp, #24
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	46c0      	nop			; (mov r8, r8)
 800cb88:	20002b00 	.word	0x20002b00
 800cb8c:	20002b0c 	.word	0x20002b0c
 800cb90:	20002b04 	.word	0x20002b04
 800cb94:	20002af8 	.word	0x20002af8
 800cb98:	20002b08 	.word	0x20002b08

0800cb9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d035      	beq.n	800cc1a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbae:	2308      	movs	r3, #8
 800cbb0:	425b      	negs	r3, r3
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	18d3      	adds	r3, r2, r3
 800cbb6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	4b18      	ldr	r3, [pc, #96]	; (800cc24 <vPortFree+0x88>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	d101      	bne.n	800cbcc <vPortFree+0x30>
 800cbc8:	b672      	cpsid	i
 800cbca:	e7fe      	b.n	800cbca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <vPortFree+0x3c>
 800cbd4:	b672      	cpsid	i
 800cbd6:	e7fe      	b.n	800cbd6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	4b11      	ldr	r3, [pc, #68]	; (800cc24 <vPortFree+0x88>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	d01a      	beq.n	800cc1a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d116      	bne.n	800cc1a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	685a      	ldr	r2, [r3, #4]
 800cbf0:	4b0c      	ldr	r3, [pc, #48]	; (800cc24 <vPortFree+0x88>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	43db      	mvns	r3, r3
 800cbf6:	401a      	ands	r2, r3
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cbfc:	f7fe fc54 	bl	800b4a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	685a      	ldr	r2, [r3, #4]
 800cc04:	4b08      	ldr	r3, [pc, #32]	; (800cc28 <vPortFree+0x8c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	18d2      	adds	r2, r2, r3
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <vPortFree+0x8c>)
 800cc0c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	0018      	movs	r0, r3
 800cc12:	f000 f86b 	bl	800ccec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cc16:	f7fe fc53 	bl	800b4c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc1a:	46c0      	nop			; (mov r8, r8)
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	b004      	add	sp, #16
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	46c0      	nop			; (mov r8, r8)
 800cc24:	20002b0c 	.word	0x20002b0c
 800cc28:	20002b04 	.word	0x20002b04

0800cc2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc32:	23c0      	movs	r3, #192	; 0xc0
 800cc34:	011b      	lsls	r3, r3, #4
 800cc36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc38:	4b26      	ldr	r3, [pc, #152]	; (800ccd4 <prvHeapInit+0xa8>)
 800cc3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2207      	movs	r2, #7
 800cc40:	4013      	ands	r3, r2
 800cc42:	d00c      	beq.n	800cc5e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3307      	adds	r3, #7
 800cc48:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2207      	movs	r2, #7
 800cc4e:	4393      	bics	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	1ad2      	subs	r2, r2, r3
 800cc58:	4b1e      	ldr	r3, [pc, #120]	; (800ccd4 <prvHeapInit+0xa8>)
 800cc5a:	18d3      	adds	r3, r2, r3
 800cc5c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc62:	4b1d      	ldr	r3, [pc, #116]	; (800ccd8 <prvHeapInit+0xac>)
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc68:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <prvHeapInit+0xac>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	18d3      	adds	r3, r2, r3
 800cc74:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc76:	2208      	movs	r2, #8
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	1a9b      	subs	r3, r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2207      	movs	r2, #7
 800cc82:	4393      	bics	r3, r2
 800cc84:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	4b14      	ldr	r3, [pc, #80]	; (800ccdc <prvHeapInit+0xb0>)
 800cc8a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800cc8c:	4b13      	ldr	r3, [pc, #76]	; (800ccdc <prvHeapInit+0xb0>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2200      	movs	r2, #0
 800cc92:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc94:	4b11      	ldr	r3, [pc, #68]	; (800ccdc <prvHeapInit+0xb0>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	1ad2      	subs	r2, r2, r3
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccaa:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <prvHeapInit+0xb0>)
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <prvHeapInit+0xb4>)
 800ccb8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	4b09      	ldr	r3, [pc, #36]	; (800cce4 <prvHeapInit+0xb8>)
 800ccc0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccc2:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <prvHeapInit+0xbc>)
 800ccc4:	2280      	movs	r2, #128	; 0x80
 800ccc6:	0612      	lsls	r2, r2, #24
 800ccc8:	601a      	str	r2, [r3, #0]
}
 800ccca:	46c0      	nop			; (mov r8, r8)
 800cccc:	46bd      	mov	sp, r7
 800ccce:	b004      	add	sp, #16
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	46c0      	nop			; (mov r8, r8)
 800ccd4:	20001ef8 	.word	0x20001ef8
 800ccd8:	20002af8 	.word	0x20002af8
 800ccdc:	20002b00 	.word	0x20002b00
 800cce0:	20002b08 	.word	0x20002b08
 800cce4:	20002b04 	.word	0x20002b04
 800cce8:	20002b0c 	.word	0x20002b0c

0800ccec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccf4:	4b27      	ldr	r3, [pc, #156]	; (800cd94 <prvInsertBlockIntoFreeList+0xa8>)
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	e002      	b.n	800cd00 <prvInsertBlockIntoFreeList+0x14>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d8f7      	bhi.n	800ccfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	18d3      	adds	r3, r2, r3
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d108      	bne.n	800cd2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	18d2      	adds	r2, r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	18d2      	adds	r2, r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d118      	bne.n	800cd74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <prvInsertBlockIntoFreeList+0xac>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d00d      	beq.n	800cd6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	18d2      	adds	r2, r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	e008      	b.n	800cd7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd6a:	4b0b      	ldr	r3, [pc, #44]	; (800cd98 <prvInsertBlockIntoFreeList+0xac>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	e003      	b.n	800cd7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d002      	beq.n	800cd8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd8a:	46c0      	nop			; (mov r8, r8)
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	b004      	add	sp, #16
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	46c0      	nop			; (mov r8, r8)
 800cd94:	20002af8 	.word	0x20002af8
 800cd98:	20002b00 	.word	0x20002b00

0800cd9c <_ZdlPvj>:
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	f000 f878 	bl	800ce92 <_ZdlPv>
 800cda2:	bd10      	pop	{r4, pc}

0800cda4 <_Znwj>:
 800cda4:	b510      	push	{r4, lr}
 800cda6:	1e04      	subs	r4, r0, #0
 800cda8:	d100      	bne.n	800cdac <_Znwj+0x8>
 800cdaa:	3401      	adds	r4, #1
 800cdac:	0020      	movs	r0, r4
 800cdae:	f000 f8bb 	bl	800cf28 <malloc>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d107      	bne.n	800cdc6 <_Znwj+0x22>
 800cdb6:	f000 f87d 	bl	800ceb4 <_ZSt15get_new_handlerv>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d101      	bne.n	800cdc2 <_Znwj+0x1e>
 800cdbe:	f000 f87f 	bl	800cec0 <abort>
 800cdc2:	4780      	blx	r0
 800cdc4:	e7f2      	b.n	800cdac <_Znwj+0x8>
 800cdc6:	bd10      	pop	{r4, pc}

0800cdc8 <__cxa_pure_virtual>:
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	f000 f86b 	bl	800cea4 <_ZSt9terminatev>

0800cdce <_ZNSaIcEC1Ev>:
 800cdce:	4770      	bx	lr

0800cdd0 <_ZNSaIcED1Ev>:
 800cdd0:	4770      	bx	lr

0800cdd2 <_ZSt17__throw_bad_allocv>:
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	f000 f874 	bl	800cec0 <abort>

0800cdd8 <_ZSt19__throw_logic_errorPKc>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	f000 f871 	bl	800cec0 <abort>

0800cdde <_ZSt20__throw_length_errorPKc>:
 800cdde:	b510      	push	{r4, lr}
 800cde0:	f000 f86e 	bl	800cec0 <abort>

0800cde4 <_ZSt25__throw_bad_function_callv>:
 800cde4:	b510      	push	{r4, lr}
 800cde6:	f000 f86b 	bl	800cec0 <abort>

0800cdea <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800cdea:	b510      	push	{r4, lr}
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	d001      	beq.n	800cdf4 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 800cdf0:	f000 f8b9 	bl	800cf66 <memcpy>
 800cdf4:	bd10      	pop	{r4, pc}

0800cdf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800cdf6:	6001      	str	r1, [r0, #0]
 800cdf8:	4770      	bx	lr

0800cdfa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800cdfa:	6800      	ldr	r0, [r0, #0]
 800cdfc:	4770      	bx	lr

0800cdfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800cdfe:	3008      	adds	r0, #8
 800ce00:	4770      	bx	lr

0800ce02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800ce02:	6081      	str	r1, [r0, #8]
 800ce04:	4770      	bx	lr

0800ce06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800ce06:	2200      	movs	r2, #0
 800ce08:	6803      	ldr	r3, [r0, #0]
 800ce0a:	6041      	str	r1, [r0, #4]
 800ce0c:	545a      	strb	r2, [r3, r1]
 800ce0e:	4770      	bx	lr

0800ce10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800ce10:	2080      	movs	r0, #128	; 0x80
 800ce12:	680b      	ldr	r3, [r1, #0]
 800ce14:	b510      	push	{r4, lr}
 800ce16:	05c0      	lsls	r0, r0, #23
 800ce18:	4283      	cmp	r3, r0
 800ce1a:	d302      	bcc.n	800ce22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 800ce1c:	480a      	ldr	r0, [pc, #40]	; (800ce48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 800ce1e:	f7ff ffde 	bl	800cdde <_ZSt20__throw_length_errorPKc>
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d905      	bls.n	800ce32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800ce26:	0052      	lsls	r2, r2, #1
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d202      	bcs.n	800ce32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800ce2c:	4282      	cmp	r2, r0
 800ce2e:	d205      	bcs.n	800ce3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800ce30:	600a      	str	r2, [r1, #0]
 800ce32:	6808      	ldr	r0, [r1, #0]
 800ce34:	3001      	adds	r0, #1
 800ce36:	d504      	bpl.n	800ce42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x32>
 800ce38:	f7ff ffcb 	bl	800cdd2 <_ZSt17__throw_bad_allocv>
 800ce3c:	4b03      	ldr	r3, [pc, #12]	; (800ce4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3c>)
 800ce3e:	600b      	str	r3, [r1, #0]
 800ce40:	e7f7      	b.n	800ce32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 800ce42:	f7ff ffaf 	bl	800cda4 <_Znwj>
 800ce46:	bd10      	pop	{r4, pc}
 800ce48:	0800e330 	.word	0x0800e330
 800ce4c:	3fffffff 	.word	0x3fffffff

0800ce50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ce50:	0003      	movs	r3, r0
 800ce52:	6800      	ldr	r0, [r0, #0]
 800ce54:	3308      	adds	r3, #8
 800ce56:	b510      	push	{r4, lr}
 800ce58:	4298      	cmp	r0, r3
 800ce5a:	d001      	beq.n	800ce60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 800ce5c:	f000 f819 	bl	800ce92 <_ZdlPv>
 800ce60:	bd10      	pop	{r4, pc}

0800ce62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800ce62:	b510      	push	{r4, lr}
 800ce64:	2a01      	cmp	r2, #1
 800ce66:	d102      	bne.n	800ce6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800ce68:	780b      	ldrb	r3, [r1, #0]
 800ce6a:	7003      	strb	r3, [r0, #0]
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	f7ff ffbc 	bl	800cdea <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800ce72:	e7fb      	b.n	800ce6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800ce74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800ce74:	b510      	push	{r4, lr}
 800ce76:	1a52      	subs	r2, r2, r1
 800ce78:	f7ff fff3 	bl	800ce62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ce7c:	bd10      	pop	{r4, pc}

0800ce7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800ce7e:	b510      	push	{r4, lr}
 800ce80:	0004      	movs	r4, r0
 800ce82:	f7ff ffe5 	bl	800ce50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ce86:	0020      	movs	r0, r4
 800ce88:	bd10      	pop	{r4, pc}

0800ce8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800ce8a:	6800      	ldr	r0, [r0, #0]
 800ce8c:	4770      	bx	lr

0800ce8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800ce8e:	6001      	str	r1, [r0, #0]
 800ce90:	4770      	bx	lr

0800ce92 <_ZdlPv>:
 800ce92:	b510      	push	{r4, lr}
 800ce94:	f000 f852 	bl	800cf3c <free>
 800ce98:	bd10      	pop	{r4, pc}

0800ce9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ce9a:	b510      	push	{r4, lr}
 800ce9c:	4780      	blx	r0
 800ce9e:	f000 f80f 	bl	800cec0 <abort>
	...

0800cea4 <_ZSt9terminatev>:
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <_ZSt9terminatev+0xc>)
 800cea6:	b510      	push	{r4, lr}
 800cea8:	6818      	ldr	r0, [r3, #0]
 800ceaa:	f7ff fff6 	bl	800ce9a <_ZN10__cxxabiv111__terminateEPFvvE>
 800ceae:	46c0      	nop			; (mov r8, r8)
 800ceb0:	2000002c 	.word	0x2000002c

0800ceb4 <_ZSt15get_new_handlerv>:
 800ceb4:	4b01      	ldr	r3, [pc, #4]	; (800cebc <_ZSt15get_new_handlerv+0x8>)
 800ceb6:	6818      	ldr	r0, [r3, #0]
 800ceb8:	4770      	bx	lr
 800ceba:	46c0      	nop			; (mov r8, r8)
 800cebc:	20002b10 	.word	0x20002b10

0800cec0 <abort>:
 800cec0:	2006      	movs	r0, #6
 800cec2:	b510      	push	{r4, lr}
 800cec4:	f000 f9cc 	bl	800d260 <raise>
 800cec8:	2001      	movs	r0, #1
 800ceca:	f7f4 fc41 	bl	8001750 <_exit>
	...

0800ced0 <__errno>:
 800ced0:	4b01      	ldr	r3, [pc, #4]	; (800ced8 <__errno+0x8>)
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	4770      	bx	lr
 800ced6:	46c0      	nop			; (mov r8, r8)
 800ced8:	20000030 	.word	0x20000030

0800cedc <__libc_init_array>:
 800cedc:	b570      	push	{r4, r5, r6, lr}
 800cede:	2600      	movs	r6, #0
 800cee0:	4d0c      	ldr	r5, [pc, #48]	; (800cf14 <__libc_init_array+0x38>)
 800cee2:	4c0d      	ldr	r4, [pc, #52]	; (800cf18 <__libc_init_array+0x3c>)
 800cee4:	1b64      	subs	r4, r4, r5
 800cee6:	10a4      	asrs	r4, r4, #2
 800cee8:	42a6      	cmp	r6, r4
 800ceea:	d109      	bne.n	800cf00 <__libc_init_array+0x24>
 800ceec:	2600      	movs	r6, #0
 800ceee:	f000 fd31 	bl	800d954 <_init>
 800cef2:	4d0a      	ldr	r5, [pc, #40]	; (800cf1c <__libc_init_array+0x40>)
 800cef4:	4c0a      	ldr	r4, [pc, #40]	; (800cf20 <__libc_init_array+0x44>)
 800cef6:	1b64      	subs	r4, r4, r5
 800cef8:	10a4      	asrs	r4, r4, #2
 800cefa:	42a6      	cmp	r6, r4
 800cefc:	d105      	bne.n	800cf0a <__libc_init_array+0x2e>
 800cefe:	bd70      	pop	{r4, r5, r6, pc}
 800cf00:	00b3      	lsls	r3, r6, #2
 800cf02:	58eb      	ldr	r3, [r5, r3]
 800cf04:	4798      	blx	r3
 800cf06:	3601      	adds	r6, #1
 800cf08:	e7ee      	b.n	800cee8 <__libc_init_array+0xc>
 800cf0a:	00b3      	lsls	r3, r6, #2
 800cf0c:	58eb      	ldr	r3, [r5, r3]
 800cf0e:	4798      	blx	r3
 800cf10:	3601      	adds	r6, #1
 800cf12:	e7f2      	b.n	800cefa <__libc_init_array+0x1e>
 800cf14:	0800e3dc 	.word	0x0800e3dc
 800cf18:	0800e3dc 	.word	0x0800e3dc
 800cf1c:	0800e3dc 	.word	0x0800e3dc
 800cf20:	0800e3e4 	.word	0x0800e3e4

0800cf24 <__retarget_lock_acquire_recursive>:
 800cf24:	4770      	bx	lr

0800cf26 <__retarget_lock_release_recursive>:
 800cf26:	4770      	bx	lr

0800cf28 <malloc>:
 800cf28:	b510      	push	{r4, lr}
 800cf2a:	4b03      	ldr	r3, [pc, #12]	; (800cf38 <malloc+0x10>)
 800cf2c:	0001      	movs	r1, r0
 800cf2e:	6818      	ldr	r0, [r3, #0]
 800cf30:	f000 f888 	bl	800d044 <_malloc_r>
 800cf34:	bd10      	pop	{r4, pc}
 800cf36:	46c0      	nop			; (mov r8, r8)
 800cf38:	20000030 	.word	0x20000030

0800cf3c <free>:
 800cf3c:	b510      	push	{r4, lr}
 800cf3e:	4b03      	ldr	r3, [pc, #12]	; (800cf4c <free+0x10>)
 800cf40:	0001      	movs	r1, r0
 800cf42:	6818      	ldr	r0, [r3, #0]
 800cf44:	f000 f834 	bl	800cfb0 <_free_r>
 800cf48:	bd10      	pop	{r4, pc}
 800cf4a:	46c0      	nop			; (mov r8, r8)
 800cf4c:	20000030 	.word	0x20000030

0800cf50 <memchr>:
 800cf50:	b2c9      	uxtb	r1, r1
 800cf52:	1882      	adds	r2, r0, r2
 800cf54:	4290      	cmp	r0, r2
 800cf56:	d101      	bne.n	800cf5c <memchr+0xc>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	4770      	bx	lr
 800cf5c:	7803      	ldrb	r3, [r0, #0]
 800cf5e:	428b      	cmp	r3, r1
 800cf60:	d0fb      	beq.n	800cf5a <memchr+0xa>
 800cf62:	3001      	adds	r0, #1
 800cf64:	e7f6      	b.n	800cf54 <memchr+0x4>

0800cf66 <memcpy>:
 800cf66:	2300      	movs	r3, #0
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d100      	bne.n	800cf70 <memcpy+0xa>
 800cf6e:	bd10      	pop	{r4, pc}
 800cf70:	5ccc      	ldrb	r4, [r1, r3]
 800cf72:	54c4      	strb	r4, [r0, r3]
 800cf74:	3301      	adds	r3, #1
 800cf76:	e7f8      	b.n	800cf6a <memcpy+0x4>

0800cf78 <memmove>:
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	4288      	cmp	r0, r1
 800cf7c:	d902      	bls.n	800cf84 <memmove+0xc>
 800cf7e:	188b      	adds	r3, r1, r2
 800cf80:	4298      	cmp	r0, r3
 800cf82:	d303      	bcc.n	800cf8c <memmove+0x14>
 800cf84:	2300      	movs	r3, #0
 800cf86:	e007      	b.n	800cf98 <memmove+0x20>
 800cf88:	5c8b      	ldrb	r3, [r1, r2]
 800cf8a:	5483      	strb	r3, [r0, r2]
 800cf8c:	3a01      	subs	r2, #1
 800cf8e:	d2fb      	bcs.n	800cf88 <memmove+0x10>
 800cf90:	bd10      	pop	{r4, pc}
 800cf92:	5ccc      	ldrb	r4, [r1, r3]
 800cf94:	54c4      	strb	r4, [r0, r3]
 800cf96:	3301      	adds	r3, #1
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d1fa      	bne.n	800cf92 <memmove+0x1a>
 800cf9c:	e7f8      	b.n	800cf90 <memmove+0x18>

0800cf9e <memset>:
 800cf9e:	0003      	movs	r3, r0
 800cfa0:	1882      	adds	r2, r0, r2
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d100      	bne.n	800cfa8 <memset+0xa>
 800cfa6:	4770      	bx	lr
 800cfa8:	7019      	strb	r1, [r3, #0]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	e7f9      	b.n	800cfa2 <memset+0x4>
	...

0800cfb0 <_free_r>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	0005      	movs	r5, r0
 800cfb4:	2900      	cmp	r1, #0
 800cfb6:	d010      	beq.n	800cfda <_free_r+0x2a>
 800cfb8:	1f0c      	subs	r4, r1, #4
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	da00      	bge.n	800cfc2 <_free_r+0x12>
 800cfc0:	18e4      	adds	r4, r4, r3
 800cfc2:	0028      	movs	r0, r5
 800cfc4:	f000 f9a4 	bl	800d310 <__malloc_lock>
 800cfc8:	4a1d      	ldr	r2, [pc, #116]	; (800d040 <_free_r+0x90>)
 800cfca:	6813      	ldr	r3, [r2, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d105      	bne.n	800cfdc <_free_r+0x2c>
 800cfd0:	6063      	str	r3, [r4, #4]
 800cfd2:	6014      	str	r4, [r2, #0]
 800cfd4:	0028      	movs	r0, r5
 800cfd6:	f000 f9a3 	bl	800d320 <__malloc_unlock>
 800cfda:	bd70      	pop	{r4, r5, r6, pc}
 800cfdc:	42a3      	cmp	r3, r4
 800cfde:	d908      	bls.n	800cff2 <_free_r+0x42>
 800cfe0:	6821      	ldr	r1, [r4, #0]
 800cfe2:	1860      	adds	r0, r4, r1
 800cfe4:	4283      	cmp	r3, r0
 800cfe6:	d1f3      	bne.n	800cfd0 <_free_r+0x20>
 800cfe8:	6818      	ldr	r0, [r3, #0]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	1841      	adds	r1, r0, r1
 800cfee:	6021      	str	r1, [r4, #0]
 800cff0:	e7ee      	b.n	800cfd0 <_free_r+0x20>
 800cff2:	001a      	movs	r2, r3
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <_free_r+0x4e>
 800cffa:	42a3      	cmp	r3, r4
 800cffc:	d9f9      	bls.n	800cff2 <_free_r+0x42>
 800cffe:	6811      	ldr	r1, [r2, #0]
 800d000:	1850      	adds	r0, r2, r1
 800d002:	42a0      	cmp	r0, r4
 800d004:	d10b      	bne.n	800d01e <_free_r+0x6e>
 800d006:	6820      	ldr	r0, [r4, #0]
 800d008:	1809      	adds	r1, r1, r0
 800d00a:	1850      	adds	r0, r2, r1
 800d00c:	6011      	str	r1, [r2, #0]
 800d00e:	4283      	cmp	r3, r0
 800d010:	d1e0      	bne.n	800cfd4 <_free_r+0x24>
 800d012:	6818      	ldr	r0, [r3, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	1841      	adds	r1, r0, r1
 800d018:	6011      	str	r1, [r2, #0]
 800d01a:	6053      	str	r3, [r2, #4]
 800d01c:	e7da      	b.n	800cfd4 <_free_r+0x24>
 800d01e:	42a0      	cmp	r0, r4
 800d020:	d902      	bls.n	800d028 <_free_r+0x78>
 800d022:	230c      	movs	r3, #12
 800d024:	602b      	str	r3, [r5, #0]
 800d026:	e7d5      	b.n	800cfd4 <_free_r+0x24>
 800d028:	6821      	ldr	r1, [r4, #0]
 800d02a:	1860      	adds	r0, r4, r1
 800d02c:	4283      	cmp	r3, r0
 800d02e:	d103      	bne.n	800d038 <_free_r+0x88>
 800d030:	6818      	ldr	r0, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	1841      	adds	r1, r0, r1
 800d036:	6021      	str	r1, [r4, #0]
 800d038:	6063      	str	r3, [r4, #4]
 800d03a:	6054      	str	r4, [r2, #4]
 800d03c:	e7ca      	b.n	800cfd4 <_free_r+0x24>
 800d03e:	46c0      	nop			; (mov r8, r8)
 800d040:	20002b14 	.word	0x20002b14

0800d044 <_malloc_r>:
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	2303      	movs	r3, #3
 800d048:	1ccd      	adds	r5, r1, #3
 800d04a:	439d      	bics	r5, r3
 800d04c:	3508      	adds	r5, #8
 800d04e:	0006      	movs	r6, r0
 800d050:	2d0c      	cmp	r5, #12
 800d052:	d21f      	bcs.n	800d094 <_malloc_r+0x50>
 800d054:	250c      	movs	r5, #12
 800d056:	42a9      	cmp	r1, r5
 800d058:	d81e      	bhi.n	800d098 <_malloc_r+0x54>
 800d05a:	0030      	movs	r0, r6
 800d05c:	f000 f958 	bl	800d310 <__malloc_lock>
 800d060:	4925      	ldr	r1, [pc, #148]	; (800d0f8 <_malloc_r+0xb4>)
 800d062:	680a      	ldr	r2, [r1, #0]
 800d064:	0014      	movs	r4, r2
 800d066:	2c00      	cmp	r4, #0
 800d068:	d11a      	bne.n	800d0a0 <_malloc_r+0x5c>
 800d06a:	4f24      	ldr	r7, [pc, #144]	; (800d0fc <_malloc_r+0xb8>)
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d104      	bne.n	800d07c <_malloc_r+0x38>
 800d072:	0021      	movs	r1, r4
 800d074:	0030      	movs	r0, r6
 800d076:	f000 f8b7 	bl	800d1e8 <_sbrk_r>
 800d07a:	6038      	str	r0, [r7, #0]
 800d07c:	0029      	movs	r1, r5
 800d07e:	0030      	movs	r0, r6
 800d080:	f000 f8b2 	bl	800d1e8 <_sbrk_r>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d12b      	bne.n	800d0e0 <_malloc_r+0x9c>
 800d088:	230c      	movs	r3, #12
 800d08a:	0030      	movs	r0, r6
 800d08c:	6033      	str	r3, [r6, #0]
 800d08e:	f000 f947 	bl	800d320 <__malloc_unlock>
 800d092:	e003      	b.n	800d09c <_malloc_r+0x58>
 800d094:	2d00      	cmp	r5, #0
 800d096:	dade      	bge.n	800d056 <_malloc_r+0x12>
 800d098:	230c      	movs	r3, #12
 800d09a:	6033      	str	r3, [r6, #0]
 800d09c:	2000      	movs	r0, #0
 800d09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	1b5b      	subs	r3, r3, r5
 800d0a4:	d419      	bmi.n	800d0da <_malloc_r+0x96>
 800d0a6:	2b0b      	cmp	r3, #11
 800d0a8:	d903      	bls.n	800d0b2 <_malloc_r+0x6e>
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	18e4      	adds	r4, r4, r3
 800d0ae:	6025      	str	r5, [r4, #0]
 800d0b0:	e003      	b.n	800d0ba <_malloc_r+0x76>
 800d0b2:	6863      	ldr	r3, [r4, #4]
 800d0b4:	42a2      	cmp	r2, r4
 800d0b6:	d10e      	bne.n	800d0d6 <_malloc_r+0x92>
 800d0b8:	600b      	str	r3, [r1, #0]
 800d0ba:	0030      	movs	r0, r6
 800d0bc:	f000 f930 	bl	800d320 <__malloc_unlock>
 800d0c0:	0020      	movs	r0, r4
 800d0c2:	2207      	movs	r2, #7
 800d0c4:	300b      	adds	r0, #11
 800d0c6:	1d23      	adds	r3, r4, #4
 800d0c8:	4390      	bics	r0, r2
 800d0ca:	1ac2      	subs	r2, r0, r3
 800d0cc:	4298      	cmp	r0, r3
 800d0ce:	d0e6      	beq.n	800d09e <_malloc_r+0x5a>
 800d0d0:	1a1b      	subs	r3, r3, r0
 800d0d2:	50a3      	str	r3, [r4, r2]
 800d0d4:	e7e3      	b.n	800d09e <_malloc_r+0x5a>
 800d0d6:	6053      	str	r3, [r2, #4]
 800d0d8:	e7ef      	b.n	800d0ba <_malloc_r+0x76>
 800d0da:	0022      	movs	r2, r4
 800d0dc:	6864      	ldr	r4, [r4, #4]
 800d0de:	e7c2      	b.n	800d066 <_malloc_r+0x22>
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	1cc4      	adds	r4, r0, #3
 800d0e4:	439c      	bics	r4, r3
 800d0e6:	42a0      	cmp	r0, r4
 800d0e8:	d0e1      	beq.n	800d0ae <_malloc_r+0x6a>
 800d0ea:	1a21      	subs	r1, r4, r0
 800d0ec:	0030      	movs	r0, r6
 800d0ee:	f000 f87b 	bl	800d1e8 <_sbrk_r>
 800d0f2:	1c43      	adds	r3, r0, #1
 800d0f4:	d1db      	bne.n	800d0ae <_malloc_r+0x6a>
 800d0f6:	e7c7      	b.n	800d088 <_malloc_r+0x44>
 800d0f8:	20002b14 	.word	0x20002b14
 800d0fc:	20002b18 	.word	0x20002b18

0800d100 <cleanup_glue>:
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	000d      	movs	r5, r1
 800d104:	6809      	ldr	r1, [r1, #0]
 800d106:	0004      	movs	r4, r0
 800d108:	2900      	cmp	r1, #0
 800d10a:	d001      	beq.n	800d110 <cleanup_glue+0x10>
 800d10c:	f7ff fff8 	bl	800d100 <cleanup_glue>
 800d110:	0029      	movs	r1, r5
 800d112:	0020      	movs	r0, r4
 800d114:	f7ff ff4c 	bl	800cfb0 <_free_r>
 800d118:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d11c <_reclaim_reent>:
 800d11c:	4b31      	ldr	r3, [pc, #196]	; (800d1e4 <_reclaim_reent+0xc8>)
 800d11e:	b570      	push	{r4, r5, r6, lr}
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	0004      	movs	r4, r0
 800d124:	4283      	cmp	r3, r0
 800d126:	d049      	beq.n	800d1bc <_reclaim_reent+0xa0>
 800d128:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <_reclaim_reent+0x28>
 800d12e:	2500      	movs	r5, #0
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	42ab      	cmp	r3, r5
 800d134:	d147      	bne.n	800d1c6 <_reclaim_reent+0xaa>
 800d136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d138:	6819      	ldr	r1, [r3, #0]
 800d13a:	2900      	cmp	r1, #0
 800d13c:	d002      	beq.n	800d144 <_reclaim_reent+0x28>
 800d13e:	0020      	movs	r0, r4
 800d140:	f7ff ff36 	bl	800cfb0 <_free_r>
 800d144:	6961      	ldr	r1, [r4, #20]
 800d146:	2900      	cmp	r1, #0
 800d148:	d002      	beq.n	800d150 <_reclaim_reent+0x34>
 800d14a:	0020      	movs	r0, r4
 800d14c:	f7ff ff30 	bl	800cfb0 <_free_r>
 800d150:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d152:	2900      	cmp	r1, #0
 800d154:	d002      	beq.n	800d15c <_reclaim_reent+0x40>
 800d156:	0020      	movs	r0, r4
 800d158:	f7ff ff2a 	bl	800cfb0 <_free_r>
 800d15c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d15e:	2900      	cmp	r1, #0
 800d160:	d002      	beq.n	800d168 <_reclaim_reent+0x4c>
 800d162:	0020      	movs	r0, r4
 800d164:	f7ff ff24 	bl	800cfb0 <_free_r>
 800d168:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d16a:	2900      	cmp	r1, #0
 800d16c:	d002      	beq.n	800d174 <_reclaim_reent+0x58>
 800d16e:	0020      	movs	r0, r4
 800d170:	f7ff ff1e 	bl	800cfb0 <_free_r>
 800d174:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d176:	2900      	cmp	r1, #0
 800d178:	d002      	beq.n	800d180 <_reclaim_reent+0x64>
 800d17a:	0020      	movs	r0, r4
 800d17c:	f7ff ff18 	bl	800cfb0 <_free_r>
 800d180:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d182:	2900      	cmp	r1, #0
 800d184:	d002      	beq.n	800d18c <_reclaim_reent+0x70>
 800d186:	0020      	movs	r0, r4
 800d188:	f7ff ff12 	bl	800cfb0 <_free_r>
 800d18c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d18e:	2900      	cmp	r1, #0
 800d190:	d002      	beq.n	800d198 <_reclaim_reent+0x7c>
 800d192:	0020      	movs	r0, r4
 800d194:	f7ff ff0c 	bl	800cfb0 <_free_r>
 800d198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d19a:	2900      	cmp	r1, #0
 800d19c:	d002      	beq.n	800d1a4 <_reclaim_reent+0x88>
 800d19e:	0020      	movs	r0, r4
 800d1a0:	f7ff ff06 	bl	800cfb0 <_free_r>
 800d1a4:	69a3      	ldr	r3, [r4, #24]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d008      	beq.n	800d1bc <_reclaim_reent+0xa0>
 800d1aa:	0020      	movs	r0, r4
 800d1ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d1ae:	4798      	blx	r3
 800d1b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d1b2:	2900      	cmp	r1, #0
 800d1b4:	d002      	beq.n	800d1bc <_reclaim_reent+0xa0>
 800d1b6:	0020      	movs	r0, r4
 800d1b8:	f7ff ffa2 	bl	800d100 <cleanup_glue>
 800d1bc:	bd70      	pop	{r4, r5, r6, pc}
 800d1be:	5949      	ldr	r1, [r1, r5]
 800d1c0:	2900      	cmp	r1, #0
 800d1c2:	d108      	bne.n	800d1d6 <_reclaim_reent+0xba>
 800d1c4:	3504      	adds	r5, #4
 800d1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1c8:	68d9      	ldr	r1, [r3, #12]
 800d1ca:	2d80      	cmp	r5, #128	; 0x80
 800d1cc:	d1f7      	bne.n	800d1be <_reclaim_reent+0xa2>
 800d1ce:	0020      	movs	r0, r4
 800d1d0:	f7ff feee 	bl	800cfb0 <_free_r>
 800d1d4:	e7af      	b.n	800d136 <_reclaim_reent+0x1a>
 800d1d6:	680e      	ldr	r6, [r1, #0]
 800d1d8:	0020      	movs	r0, r4
 800d1da:	f7ff fee9 	bl	800cfb0 <_free_r>
 800d1de:	0031      	movs	r1, r6
 800d1e0:	e7ee      	b.n	800d1c0 <_reclaim_reent+0xa4>
 800d1e2:	46c0      	nop			; (mov r8, r8)
 800d1e4:	20000030 	.word	0x20000030

0800d1e8 <_sbrk_r>:
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	b570      	push	{r4, r5, r6, lr}
 800d1ec:	4d06      	ldr	r5, [pc, #24]	; (800d208 <_sbrk_r+0x20>)
 800d1ee:	0004      	movs	r4, r0
 800d1f0:	0008      	movs	r0, r1
 800d1f2:	602b      	str	r3, [r5, #0]
 800d1f4:	f7f4 fab8 	bl	8001768 <_sbrk>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	d103      	bne.n	800d204 <_sbrk_r+0x1c>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d000      	beq.n	800d204 <_sbrk_r+0x1c>
 800d202:	6023      	str	r3, [r4, #0]
 800d204:	bd70      	pop	{r4, r5, r6, pc}
 800d206:	46c0      	nop			; (mov r8, r8)
 800d208:	2000323c 	.word	0x2000323c

0800d20c <_raise_r>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	0004      	movs	r4, r0
 800d210:	000d      	movs	r5, r1
 800d212:	291f      	cmp	r1, #31
 800d214:	d904      	bls.n	800d220 <_raise_r+0x14>
 800d216:	2316      	movs	r3, #22
 800d218:	6003      	str	r3, [r0, #0]
 800d21a:	2001      	movs	r0, #1
 800d21c:	4240      	negs	r0, r0
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
 800d220:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d222:	2b00      	cmp	r3, #0
 800d224:	d004      	beq.n	800d230 <_raise_r+0x24>
 800d226:	008a      	lsls	r2, r1, #2
 800d228:	189b      	adds	r3, r3, r2
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	2a00      	cmp	r2, #0
 800d22e:	d108      	bne.n	800d242 <_raise_r+0x36>
 800d230:	0020      	movs	r0, r4
 800d232:	f000 f831 	bl	800d298 <_getpid_r>
 800d236:	002a      	movs	r2, r5
 800d238:	0001      	movs	r1, r0
 800d23a:	0020      	movs	r0, r4
 800d23c:	f000 f81a 	bl	800d274 <_kill_r>
 800d240:	e7ed      	b.n	800d21e <_raise_r+0x12>
 800d242:	2000      	movs	r0, #0
 800d244:	2a01      	cmp	r2, #1
 800d246:	d0ea      	beq.n	800d21e <_raise_r+0x12>
 800d248:	1c51      	adds	r1, r2, #1
 800d24a:	d103      	bne.n	800d254 <_raise_r+0x48>
 800d24c:	2316      	movs	r3, #22
 800d24e:	3001      	adds	r0, #1
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	e7e4      	b.n	800d21e <_raise_r+0x12>
 800d254:	2400      	movs	r4, #0
 800d256:	0028      	movs	r0, r5
 800d258:	601c      	str	r4, [r3, #0]
 800d25a:	4790      	blx	r2
 800d25c:	0020      	movs	r0, r4
 800d25e:	e7de      	b.n	800d21e <_raise_r+0x12>

0800d260 <raise>:
 800d260:	b510      	push	{r4, lr}
 800d262:	4b03      	ldr	r3, [pc, #12]	; (800d270 <raise+0x10>)
 800d264:	0001      	movs	r1, r0
 800d266:	6818      	ldr	r0, [r3, #0]
 800d268:	f7ff ffd0 	bl	800d20c <_raise_r>
 800d26c:	bd10      	pop	{r4, pc}
 800d26e:	46c0      	nop			; (mov r8, r8)
 800d270:	20000030 	.word	0x20000030

0800d274 <_kill_r>:
 800d274:	2300      	movs	r3, #0
 800d276:	b570      	push	{r4, r5, r6, lr}
 800d278:	4d06      	ldr	r5, [pc, #24]	; (800d294 <_kill_r+0x20>)
 800d27a:	0004      	movs	r4, r0
 800d27c:	0008      	movs	r0, r1
 800d27e:	0011      	movs	r1, r2
 800d280:	602b      	str	r3, [r5, #0]
 800d282:	f7f4 fa55 	bl	8001730 <_kill>
 800d286:	1c43      	adds	r3, r0, #1
 800d288:	d103      	bne.n	800d292 <_kill_r+0x1e>
 800d28a:	682b      	ldr	r3, [r5, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d000      	beq.n	800d292 <_kill_r+0x1e>
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	2000323c 	.word	0x2000323c

0800d298 <_getpid_r>:
 800d298:	b510      	push	{r4, lr}
 800d29a:	f7f4 fa43 	bl	8001724 <_getpid>
 800d29e:	bd10      	pop	{r4, pc}

0800d2a0 <_vsniprintf_r>:
 800d2a0:	b530      	push	{r4, r5, lr}
 800d2a2:	0014      	movs	r4, r2
 800d2a4:	0005      	movs	r5, r0
 800d2a6:	001a      	movs	r2, r3
 800d2a8:	b09b      	sub	sp, #108	; 0x6c
 800d2aa:	2c00      	cmp	r4, #0
 800d2ac:	da05      	bge.n	800d2ba <_vsniprintf_r+0x1a>
 800d2ae:	238b      	movs	r3, #139	; 0x8b
 800d2b0:	6003      	str	r3, [r0, #0]
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	4240      	negs	r0, r0
 800d2b6:	b01b      	add	sp, #108	; 0x6c
 800d2b8:	bd30      	pop	{r4, r5, pc}
 800d2ba:	2382      	movs	r3, #130	; 0x82
 800d2bc:	4668      	mov	r0, sp
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	8183      	strh	r3, [r0, #12]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9100      	str	r1, [sp, #0]
 800d2c6:	9104      	str	r1, [sp, #16]
 800d2c8:	429c      	cmp	r4, r3
 800d2ca:	d000      	beq.n	800d2ce <_vsniprintf_r+0x2e>
 800d2cc:	1e63      	subs	r3, r4, #1
 800d2ce:	9302      	str	r3, [sp, #8]
 800d2d0:	9305      	str	r3, [sp, #20]
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4669      	mov	r1, sp
 800d2d6:	425b      	negs	r3, r3
 800d2d8:	81cb      	strh	r3, [r1, #14]
 800d2da:	0028      	movs	r0, r5
 800d2dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2de:	f000 f889 	bl	800d3f4 <_svfiprintf_r>
 800d2e2:	1c43      	adds	r3, r0, #1
 800d2e4:	da01      	bge.n	800d2ea <_vsniprintf_r+0x4a>
 800d2e6:	238b      	movs	r3, #139	; 0x8b
 800d2e8:	602b      	str	r3, [r5, #0]
 800d2ea:	2c00      	cmp	r4, #0
 800d2ec:	d0e3      	beq.n	800d2b6 <_vsniprintf_r+0x16>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	9a00      	ldr	r2, [sp, #0]
 800d2f2:	7013      	strb	r3, [r2, #0]
 800d2f4:	e7df      	b.n	800d2b6 <_vsniprintf_r+0x16>
	...

0800d2f8 <vsniprintf>:
 800d2f8:	b507      	push	{r0, r1, r2, lr}
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	0013      	movs	r3, r2
 800d2fe:	000a      	movs	r2, r1
 800d300:	0001      	movs	r1, r0
 800d302:	4802      	ldr	r0, [pc, #8]	; (800d30c <vsniprintf+0x14>)
 800d304:	6800      	ldr	r0, [r0, #0]
 800d306:	f7ff ffcb 	bl	800d2a0 <_vsniprintf_r>
 800d30a:	bd0e      	pop	{r1, r2, r3, pc}
 800d30c:	20000030 	.word	0x20000030

0800d310 <__malloc_lock>:
 800d310:	b510      	push	{r4, lr}
 800d312:	4802      	ldr	r0, [pc, #8]	; (800d31c <__malloc_lock+0xc>)
 800d314:	f7ff fe06 	bl	800cf24 <__retarget_lock_acquire_recursive>
 800d318:	bd10      	pop	{r4, pc}
 800d31a:	46c0      	nop			; (mov r8, r8)
 800d31c:	20003234 	.word	0x20003234

0800d320 <__malloc_unlock>:
 800d320:	b510      	push	{r4, lr}
 800d322:	4802      	ldr	r0, [pc, #8]	; (800d32c <__malloc_unlock+0xc>)
 800d324:	f7ff fdff 	bl	800cf26 <__retarget_lock_release_recursive>
 800d328:	bd10      	pop	{r4, pc}
 800d32a:	46c0      	nop			; (mov r8, r8)
 800d32c:	20003234 	.word	0x20003234

0800d330 <__ssputs_r>:
 800d330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d332:	688e      	ldr	r6, [r1, #8]
 800d334:	b085      	sub	sp, #20
 800d336:	0007      	movs	r7, r0
 800d338:	000c      	movs	r4, r1
 800d33a:	9203      	str	r2, [sp, #12]
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	429e      	cmp	r6, r3
 800d340:	d83c      	bhi.n	800d3bc <__ssputs_r+0x8c>
 800d342:	2390      	movs	r3, #144	; 0x90
 800d344:	898a      	ldrh	r2, [r1, #12]
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	421a      	tst	r2, r3
 800d34a:	d034      	beq.n	800d3b6 <__ssputs_r+0x86>
 800d34c:	2503      	movs	r5, #3
 800d34e:	6909      	ldr	r1, [r1, #16]
 800d350:	6823      	ldr	r3, [r4, #0]
 800d352:	1a5b      	subs	r3, r3, r1
 800d354:	9302      	str	r3, [sp, #8]
 800d356:	6963      	ldr	r3, [r4, #20]
 800d358:	9802      	ldr	r0, [sp, #8]
 800d35a:	435d      	muls	r5, r3
 800d35c:	0feb      	lsrs	r3, r5, #31
 800d35e:	195d      	adds	r5, r3, r5
 800d360:	9b01      	ldr	r3, [sp, #4]
 800d362:	106d      	asrs	r5, r5, #1
 800d364:	3301      	adds	r3, #1
 800d366:	181b      	adds	r3, r3, r0
 800d368:	42ab      	cmp	r3, r5
 800d36a:	d900      	bls.n	800d36e <__ssputs_r+0x3e>
 800d36c:	001d      	movs	r5, r3
 800d36e:	0553      	lsls	r3, r2, #21
 800d370:	d532      	bpl.n	800d3d8 <__ssputs_r+0xa8>
 800d372:	0029      	movs	r1, r5
 800d374:	0038      	movs	r0, r7
 800d376:	f7ff fe65 	bl	800d044 <_malloc_r>
 800d37a:	1e06      	subs	r6, r0, #0
 800d37c:	d109      	bne.n	800d392 <__ssputs_r+0x62>
 800d37e:	230c      	movs	r3, #12
 800d380:	603b      	str	r3, [r7, #0]
 800d382:	2340      	movs	r3, #64	; 0x40
 800d384:	2001      	movs	r0, #1
 800d386:	89a2      	ldrh	r2, [r4, #12]
 800d388:	4240      	negs	r0, r0
 800d38a:	4313      	orrs	r3, r2
 800d38c:	81a3      	strh	r3, [r4, #12]
 800d38e:	b005      	add	sp, #20
 800d390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d392:	9a02      	ldr	r2, [sp, #8]
 800d394:	6921      	ldr	r1, [r4, #16]
 800d396:	f7ff fde6 	bl	800cf66 <memcpy>
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	4a14      	ldr	r2, [pc, #80]	; (800d3f0 <__ssputs_r+0xc0>)
 800d39e:	401a      	ands	r2, r3
 800d3a0:	2380      	movs	r3, #128	; 0x80
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	9b02      	ldr	r3, [sp, #8]
 800d3a8:	6126      	str	r6, [r4, #16]
 800d3aa:	18f6      	adds	r6, r6, r3
 800d3ac:	6026      	str	r6, [r4, #0]
 800d3ae:	6165      	str	r5, [r4, #20]
 800d3b0:	9e01      	ldr	r6, [sp, #4]
 800d3b2:	1aed      	subs	r5, r5, r3
 800d3b4:	60a5      	str	r5, [r4, #8]
 800d3b6:	9b01      	ldr	r3, [sp, #4]
 800d3b8:	429e      	cmp	r6, r3
 800d3ba:	d900      	bls.n	800d3be <__ssputs_r+0x8e>
 800d3bc:	9e01      	ldr	r6, [sp, #4]
 800d3be:	0032      	movs	r2, r6
 800d3c0:	9903      	ldr	r1, [sp, #12]
 800d3c2:	6820      	ldr	r0, [r4, #0]
 800d3c4:	f7ff fdd8 	bl	800cf78 <memmove>
 800d3c8:	68a3      	ldr	r3, [r4, #8]
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	1b9b      	subs	r3, r3, r6
 800d3ce:	60a3      	str	r3, [r4, #8]
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	199e      	adds	r6, r3, r6
 800d3d4:	6026      	str	r6, [r4, #0]
 800d3d6:	e7da      	b.n	800d38e <__ssputs_r+0x5e>
 800d3d8:	002a      	movs	r2, r5
 800d3da:	0038      	movs	r0, r7
 800d3dc:	f000 fa8c 	bl	800d8f8 <_realloc_r>
 800d3e0:	1e06      	subs	r6, r0, #0
 800d3e2:	d1e0      	bne.n	800d3a6 <__ssputs_r+0x76>
 800d3e4:	0038      	movs	r0, r7
 800d3e6:	6921      	ldr	r1, [r4, #16]
 800d3e8:	f7ff fde2 	bl	800cfb0 <_free_r>
 800d3ec:	e7c7      	b.n	800d37e <__ssputs_r+0x4e>
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	fffffb7f 	.word	0xfffffb7f

0800d3f4 <_svfiprintf_r>:
 800d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3f6:	b0a1      	sub	sp, #132	; 0x84
 800d3f8:	9003      	str	r0, [sp, #12]
 800d3fa:	001d      	movs	r5, r3
 800d3fc:	898b      	ldrh	r3, [r1, #12]
 800d3fe:	000f      	movs	r7, r1
 800d400:	0016      	movs	r6, r2
 800d402:	061b      	lsls	r3, r3, #24
 800d404:	d511      	bpl.n	800d42a <_svfiprintf_r+0x36>
 800d406:	690b      	ldr	r3, [r1, #16]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10e      	bne.n	800d42a <_svfiprintf_r+0x36>
 800d40c:	2140      	movs	r1, #64	; 0x40
 800d40e:	f7ff fe19 	bl	800d044 <_malloc_r>
 800d412:	6038      	str	r0, [r7, #0]
 800d414:	6138      	str	r0, [r7, #16]
 800d416:	2800      	cmp	r0, #0
 800d418:	d105      	bne.n	800d426 <_svfiprintf_r+0x32>
 800d41a:	230c      	movs	r3, #12
 800d41c:	9a03      	ldr	r2, [sp, #12]
 800d41e:	3801      	subs	r0, #1
 800d420:	6013      	str	r3, [r2, #0]
 800d422:	b021      	add	sp, #132	; 0x84
 800d424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d426:	2340      	movs	r3, #64	; 0x40
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	2300      	movs	r3, #0
 800d42c:	ac08      	add	r4, sp, #32
 800d42e:	6163      	str	r3, [r4, #20]
 800d430:	3320      	adds	r3, #32
 800d432:	7663      	strb	r3, [r4, #25]
 800d434:	3310      	adds	r3, #16
 800d436:	76a3      	strb	r3, [r4, #26]
 800d438:	9507      	str	r5, [sp, #28]
 800d43a:	0035      	movs	r5, r6
 800d43c:	782b      	ldrb	r3, [r5, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d001      	beq.n	800d446 <_svfiprintf_r+0x52>
 800d442:	2b25      	cmp	r3, #37	; 0x25
 800d444:	d147      	bne.n	800d4d6 <_svfiprintf_r+0xe2>
 800d446:	1bab      	subs	r3, r5, r6
 800d448:	9305      	str	r3, [sp, #20]
 800d44a:	42b5      	cmp	r5, r6
 800d44c:	d00c      	beq.n	800d468 <_svfiprintf_r+0x74>
 800d44e:	0032      	movs	r2, r6
 800d450:	0039      	movs	r1, r7
 800d452:	9803      	ldr	r0, [sp, #12]
 800d454:	f7ff ff6c 	bl	800d330 <__ssputs_r>
 800d458:	1c43      	adds	r3, r0, #1
 800d45a:	d100      	bne.n	800d45e <_svfiprintf_r+0x6a>
 800d45c:	e0ae      	b.n	800d5bc <_svfiprintf_r+0x1c8>
 800d45e:	6962      	ldr	r2, [r4, #20]
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	4694      	mov	ip, r2
 800d464:	4463      	add	r3, ip
 800d466:	6163      	str	r3, [r4, #20]
 800d468:	782b      	ldrb	r3, [r5, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d100      	bne.n	800d470 <_svfiprintf_r+0x7c>
 800d46e:	e0a5      	b.n	800d5bc <_svfiprintf_r+0x1c8>
 800d470:	2201      	movs	r2, #1
 800d472:	2300      	movs	r3, #0
 800d474:	4252      	negs	r2, r2
 800d476:	6062      	str	r2, [r4, #4]
 800d478:	a904      	add	r1, sp, #16
 800d47a:	3254      	adds	r2, #84	; 0x54
 800d47c:	1852      	adds	r2, r2, r1
 800d47e:	1c6e      	adds	r6, r5, #1
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	60e3      	str	r3, [r4, #12]
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	7013      	strb	r3, [r2, #0]
 800d488:	65a3      	str	r3, [r4, #88]	; 0x58
 800d48a:	2205      	movs	r2, #5
 800d48c:	7831      	ldrb	r1, [r6, #0]
 800d48e:	4854      	ldr	r0, [pc, #336]	; (800d5e0 <_svfiprintf_r+0x1ec>)
 800d490:	f7ff fd5e 	bl	800cf50 <memchr>
 800d494:	1c75      	adds	r5, r6, #1
 800d496:	2800      	cmp	r0, #0
 800d498:	d11f      	bne.n	800d4da <_svfiprintf_r+0xe6>
 800d49a:	6822      	ldr	r2, [r4, #0]
 800d49c:	06d3      	lsls	r3, r2, #27
 800d49e:	d504      	bpl.n	800d4aa <_svfiprintf_r+0xb6>
 800d4a0:	2353      	movs	r3, #83	; 0x53
 800d4a2:	a904      	add	r1, sp, #16
 800d4a4:	185b      	adds	r3, r3, r1
 800d4a6:	2120      	movs	r1, #32
 800d4a8:	7019      	strb	r1, [r3, #0]
 800d4aa:	0713      	lsls	r3, r2, #28
 800d4ac:	d504      	bpl.n	800d4b8 <_svfiprintf_r+0xc4>
 800d4ae:	2353      	movs	r3, #83	; 0x53
 800d4b0:	a904      	add	r1, sp, #16
 800d4b2:	185b      	adds	r3, r3, r1
 800d4b4:	212b      	movs	r1, #43	; 0x2b
 800d4b6:	7019      	strb	r1, [r3, #0]
 800d4b8:	7833      	ldrb	r3, [r6, #0]
 800d4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d4bc:	d016      	beq.n	800d4ec <_svfiprintf_r+0xf8>
 800d4be:	0035      	movs	r5, r6
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	200a      	movs	r0, #10
 800d4c4:	68e3      	ldr	r3, [r4, #12]
 800d4c6:	782a      	ldrb	r2, [r5, #0]
 800d4c8:	1c6e      	adds	r6, r5, #1
 800d4ca:	3a30      	subs	r2, #48	; 0x30
 800d4cc:	2a09      	cmp	r2, #9
 800d4ce:	d94e      	bls.n	800d56e <_svfiprintf_r+0x17a>
 800d4d0:	2900      	cmp	r1, #0
 800d4d2:	d111      	bne.n	800d4f8 <_svfiprintf_r+0x104>
 800d4d4:	e017      	b.n	800d506 <_svfiprintf_r+0x112>
 800d4d6:	3501      	adds	r5, #1
 800d4d8:	e7b0      	b.n	800d43c <_svfiprintf_r+0x48>
 800d4da:	4b41      	ldr	r3, [pc, #260]	; (800d5e0 <_svfiprintf_r+0x1ec>)
 800d4dc:	6822      	ldr	r2, [r4, #0]
 800d4de:	1ac0      	subs	r0, r0, r3
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	4083      	lsls	r3, r0
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	002e      	movs	r6, r5
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	e7ce      	b.n	800d48a <_svfiprintf_r+0x96>
 800d4ec:	9b07      	ldr	r3, [sp, #28]
 800d4ee:	1d19      	adds	r1, r3, #4
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	9107      	str	r1, [sp, #28]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	db01      	blt.n	800d4fc <_svfiprintf_r+0x108>
 800d4f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4fa:	e004      	b.n	800d506 <_svfiprintf_r+0x112>
 800d4fc:	425b      	negs	r3, r3
 800d4fe:	60e3      	str	r3, [r4, #12]
 800d500:	2302      	movs	r3, #2
 800d502:	4313      	orrs	r3, r2
 800d504:	6023      	str	r3, [r4, #0]
 800d506:	782b      	ldrb	r3, [r5, #0]
 800d508:	2b2e      	cmp	r3, #46	; 0x2e
 800d50a:	d10a      	bne.n	800d522 <_svfiprintf_r+0x12e>
 800d50c:	786b      	ldrb	r3, [r5, #1]
 800d50e:	2b2a      	cmp	r3, #42	; 0x2a
 800d510:	d135      	bne.n	800d57e <_svfiprintf_r+0x18a>
 800d512:	9b07      	ldr	r3, [sp, #28]
 800d514:	3502      	adds	r5, #2
 800d516:	1d1a      	adds	r2, r3, #4
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	9207      	str	r2, [sp, #28]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	db2b      	blt.n	800d578 <_svfiprintf_r+0x184>
 800d520:	9309      	str	r3, [sp, #36]	; 0x24
 800d522:	4e30      	ldr	r6, [pc, #192]	; (800d5e4 <_svfiprintf_r+0x1f0>)
 800d524:	2203      	movs	r2, #3
 800d526:	0030      	movs	r0, r6
 800d528:	7829      	ldrb	r1, [r5, #0]
 800d52a:	f7ff fd11 	bl	800cf50 <memchr>
 800d52e:	2800      	cmp	r0, #0
 800d530:	d006      	beq.n	800d540 <_svfiprintf_r+0x14c>
 800d532:	2340      	movs	r3, #64	; 0x40
 800d534:	1b80      	subs	r0, r0, r6
 800d536:	4083      	lsls	r3, r0
 800d538:	6822      	ldr	r2, [r4, #0]
 800d53a:	3501      	adds	r5, #1
 800d53c:	4313      	orrs	r3, r2
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	7829      	ldrb	r1, [r5, #0]
 800d542:	2206      	movs	r2, #6
 800d544:	4828      	ldr	r0, [pc, #160]	; (800d5e8 <_svfiprintf_r+0x1f4>)
 800d546:	1c6e      	adds	r6, r5, #1
 800d548:	7621      	strb	r1, [r4, #24]
 800d54a:	f7ff fd01 	bl	800cf50 <memchr>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d03c      	beq.n	800d5cc <_svfiprintf_r+0x1d8>
 800d552:	4b26      	ldr	r3, [pc, #152]	; (800d5ec <_svfiprintf_r+0x1f8>)
 800d554:	2b00      	cmp	r3, #0
 800d556:	d125      	bne.n	800d5a4 <_svfiprintf_r+0x1b0>
 800d558:	2207      	movs	r2, #7
 800d55a:	9b07      	ldr	r3, [sp, #28]
 800d55c:	3307      	adds	r3, #7
 800d55e:	4393      	bics	r3, r2
 800d560:	3308      	adds	r3, #8
 800d562:	9307      	str	r3, [sp, #28]
 800d564:	6963      	ldr	r3, [r4, #20]
 800d566:	9a04      	ldr	r2, [sp, #16]
 800d568:	189b      	adds	r3, r3, r2
 800d56a:	6163      	str	r3, [r4, #20]
 800d56c:	e765      	b.n	800d43a <_svfiprintf_r+0x46>
 800d56e:	4343      	muls	r3, r0
 800d570:	0035      	movs	r5, r6
 800d572:	2101      	movs	r1, #1
 800d574:	189b      	adds	r3, r3, r2
 800d576:	e7a6      	b.n	800d4c6 <_svfiprintf_r+0xd2>
 800d578:	2301      	movs	r3, #1
 800d57a:	425b      	negs	r3, r3
 800d57c:	e7d0      	b.n	800d520 <_svfiprintf_r+0x12c>
 800d57e:	2300      	movs	r3, #0
 800d580:	200a      	movs	r0, #10
 800d582:	001a      	movs	r2, r3
 800d584:	3501      	adds	r5, #1
 800d586:	6063      	str	r3, [r4, #4]
 800d588:	7829      	ldrb	r1, [r5, #0]
 800d58a:	1c6e      	adds	r6, r5, #1
 800d58c:	3930      	subs	r1, #48	; 0x30
 800d58e:	2909      	cmp	r1, #9
 800d590:	d903      	bls.n	800d59a <_svfiprintf_r+0x1a6>
 800d592:	2b00      	cmp	r3, #0
 800d594:	d0c5      	beq.n	800d522 <_svfiprintf_r+0x12e>
 800d596:	9209      	str	r2, [sp, #36]	; 0x24
 800d598:	e7c3      	b.n	800d522 <_svfiprintf_r+0x12e>
 800d59a:	4342      	muls	r2, r0
 800d59c:	0035      	movs	r5, r6
 800d59e:	2301      	movs	r3, #1
 800d5a0:	1852      	adds	r2, r2, r1
 800d5a2:	e7f1      	b.n	800d588 <_svfiprintf_r+0x194>
 800d5a4:	ab07      	add	r3, sp, #28
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	003a      	movs	r2, r7
 800d5aa:	0021      	movs	r1, r4
 800d5ac:	4b10      	ldr	r3, [pc, #64]	; (800d5f0 <_svfiprintf_r+0x1fc>)
 800d5ae:	9803      	ldr	r0, [sp, #12]
 800d5b0:	e000      	b.n	800d5b4 <_svfiprintf_r+0x1c0>
 800d5b2:	bf00      	nop
 800d5b4:	9004      	str	r0, [sp, #16]
 800d5b6:	9b04      	ldr	r3, [sp, #16]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	d1d3      	bne.n	800d564 <_svfiprintf_r+0x170>
 800d5bc:	89bb      	ldrh	r3, [r7, #12]
 800d5be:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d5c0:	065b      	lsls	r3, r3, #25
 800d5c2:	d400      	bmi.n	800d5c6 <_svfiprintf_r+0x1d2>
 800d5c4:	e72d      	b.n	800d422 <_svfiprintf_r+0x2e>
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	4240      	negs	r0, r0
 800d5ca:	e72a      	b.n	800d422 <_svfiprintf_r+0x2e>
 800d5cc:	ab07      	add	r3, sp, #28
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	003a      	movs	r2, r7
 800d5d2:	0021      	movs	r1, r4
 800d5d4:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <_svfiprintf_r+0x1fc>)
 800d5d6:	9803      	ldr	r0, [sp, #12]
 800d5d8:	f000 f87c 	bl	800d6d4 <_printf_i>
 800d5dc:	e7ea      	b.n	800d5b4 <_svfiprintf_r+0x1c0>
 800d5de:	46c0      	nop			; (mov r8, r8)
 800d5e0:	0800e3a8 	.word	0x0800e3a8
 800d5e4:	0800e3ae 	.word	0x0800e3ae
 800d5e8:	0800e3b2 	.word	0x0800e3b2
 800d5ec:	00000000 	.word	0x00000000
 800d5f0:	0800d331 	.word	0x0800d331

0800d5f4 <_printf_common>:
 800d5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5f6:	0015      	movs	r5, r2
 800d5f8:	9301      	str	r3, [sp, #4]
 800d5fa:	688a      	ldr	r2, [r1, #8]
 800d5fc:	690b      	ldr	r3, [r1, #16]
 800d5fe:	000c      	movs	r4, r1
 800d600:	9000      	str	r0, [sp, #0]
 800d602:	4293      	cmp	r3, r2
 800d604:	da00      	bge.n	800d608 <_printf_common+0x14>
 800d606:	0013      	movs	r3, r2
 800d608:	0022      	movs	r2, r4
 800d60a:	602b      	str	r3, [r5, #0]
 800d60c:	3243      	adds	r2, #67	; 0x43
 800d60e:	7812      	ldrb	r2, [r2, #0]
 800d610:	2a00      	cmp	r2, #0
 800d612:	d001      	beq.n	800d618 <_printf_common+0x24>
 800d614:	3301      	adds	r3, #1
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	069b      	lsls	r3, r3, #26
 800d61c:	d502      	bpl.n	800d624 <_printf_common+0x30>
 800d61e:	682b      	ldr	r3, [r5, #0]
 800d620:	3302      	adds	r3, #2
 800d622:	602b      	str	r3, [r5, #0]
 800d624:	6822      	ldr	r2, [r4, #0]
 800d626:	2306      	movs	r3, #6
 800d628:	0017      	movs	r7, r2
 800d62a:	401f      	ands	r7, r3
 800d62c:	421a      	tst	r2, r3
 800d62e:	d027      	beq.n	800d680 <_printf_common+0x8c>
 800d630:	0023      	movs	r3, r4
 800d632:	3343      	adds	r3, #67	; 0x43
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	1e5a      	subs	r2, r3, #1
 800d638:	4193      	sbcs	r3, r2
 800d63a:	6822      	ldr	r2, [r4, #0]
 800d63c:	0692      	lsls	r2, r2, #26
 800d63e:	d430      	bmi.n	800d6a2 <_printf_common+0xae>
 800d640:	0022      	movs	r2, r4
 800d642:	9901      	ldr	r1, [sp, #4]
 800d644:	9800      	ldr	r0, [sp, #0]
 800d646:	9e08      	ldr	r6, [sp, #32]
 800d648:	3243      	adds	r2, #67	; 0x43
 800d64a:	47b0      	blx	r6
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d025      	beq.n	800d69c <_printf_common+0xa8>
 800d650:	2306      	movs	r3, #6
 800d652:	6820      	ldr	r0, [r4, #0]
 800d654:	682a      	ldr	r2, [r5, #0]
 800d656:	68e1      	ldr	r1, [r4, #12]
 800d658:	2500      	movs	r5, #0
 800d65a:	4003      	ands	r3, r0
 800d65c:	2b04      	cmp	r3, #4
 800d65e:	d103      	bne.n	800d668 <_printf_common+0x74>
 800d660:	1a8d      	subs	r5, r1, r2
 800d662:	43eb      	mvns	r3, r5
 800d664:	17db      	asrs	r3, r3, #31
 800d666:	401d      	ands	r5, r3
 800d668:	68a3      	ldr	r3, [r4, #8]
 800d66a:	6922      	ldr	r2, [r4, #16]
 800d66c:	4293      	cmp	r3, r2
 800d66e:	dd01      	ble.n	800d674 <_printf_common+0x80>
 800d670:	1a9b      	subs	r3, r3, r2
 800d672:	18ed      	adds	r5, r5, r3
 800d674:	2700      	movs	r7, #0
 800d676:	42bd      	cmp	r5, r7
 800d678:	d120      	bne.n	800d6bc <_printf_common+0xc8>
 800d67a:	2000      	movs	r0, #0
 800d67c:	e010      	b.n	800d6a0 <_printf_common+0xac>
 800d67e:	3701      	adds	r7, #1
 800d680:	68e3      	ldr	r3, [r4, #12]
 800d682:	682a      	ldr	r2, [r5, #0]
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	42bb      	cmp	r3, r7
 800d688:	ddd2      	ble.n	800d630 <_printf_common+0x3c>
 800d68a:	0022      	movs	r2, r4
 800d68c:	2301      	movs	r3, #1
 800d68e:	9901      	ldr	r1, [sp, #4]
 800d690:	9800      	ldr	r0, [sp, #0]
 800d692:	9e08      	ldr	r6, [sp, #32]
 800d694:	3219      	adds	r2, #25
 800d696:	47b0      	blx	r6
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d1f0      	bne.n	800d67e <_printf_common+0x8a>
 800d69c:	2001      	movs	r0, #1
 800d69e:	4240      	negs	r0, r0
 800d6a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6a2:	2030      	movs	r0, #48	; 0x30
 800d6a4:	18e1      	adds	r1, r4, r3
 800d6a6:	3143      	adds	r1, #67	; 0x43
 800d6a8:	7008      	strb	r0, [r1, #0]
 800d6aa:	0021      	movs	r1, r4
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	3145      	adds	r1, #69	; 0x45
 800d6b0:	7809      	ldrb	r1, [r1, #0]
 800d6b2:	18a2      	adds	r2, r4, r2
 800d6b4:	3243      	adds	r2, #67	; 0x43
 800d6b6:	3302      	adds	r3, #2
 800d6b8:	7011      	strb	r1, [r2, #0]
 800d6ba:	e7c1      	b.n	800d640 <_printf_common+0x4c>
 800d6bc:	0022      	movs	r2, r4
 800d6be:	2301      	movs	r3, #1
 800d6c0:	9901      	ldr	r1, [sp, #4]
 800d6c2:	9800      	ldr	r0, [sp, #0]
 800d6c4:	9e08      	ldr	r6, [sp, #32]
 800d6c6:	321a      	adds	r2, #26
 800d6c8:	47b0      	blx	r6
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	d0e6      	beq.n	800d69c <_printf_common+0xa8>
 800d6ce:	3701      	adds	r7, #1
 800d6d0:	e7d1      	b.n	800d676 <_printf_common+0x82>
	...

0800d6d4 <_printf_i>:
 800d6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6d6:	b08b      	sub	sp, #44	; 0x2c
 800d6d8:	9206      	str	r2, [sp, #24]
 800d6da:	000a      	movs	r2, r1
 800d6dc:	3243      	adds	r2, #67	; 0x43
 800d6de:	9307      	str	r3, [sp, #28]
 800d6e0:	9005      	str	r0, [sp, #20]
 800d6e2:	9204      	str	r2, [sp, #16]
 800d6e4:	7e0a      	ldrb	r2, [r1, #24]
 800d6e6:	000c      	movs	r4, r1
 800d6e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ea:	2a78      	cmp	r2, #120	; 0x78
 800d6ec:	d806      	bhi.n	800d6fc <_printf_i+0x28>
 800d6ee:	2a62      	cmp	r2, #98	; 0x62
 800d6f0:	d808      	bhi.n	800d704 <_printf_i+0x30>
 800d6f2:	2a00      	cmp	r2, #0
 800d6f4:	d100      	bne.n	800d6f8 <_printf_i+0x24>
 800d6f6:	e0c0      	b.n	800d87a <_printf_i+0x1a6>
 800d6f8:	2a58      	cmp	r2, #88	; 0x58
 800d6fa:	d052      	beq.n	800d7a2 <_printf_i+0xce>
 800d6fc:	0026      	movs	r6, r4
 800d6fe:	3642      	adds	r6, #66	; 0x42
 800d700:	7032      	strb	r2, [r6, #0]
 800d702:	e022      	b.n	800d74a <_printf_i+0x76>
 800d704:	0010      	movs	r0, r2
 800d706:	3863      	subs	r0, #99	; 0x63
 800d708:	2815      	cmp	r0, #21
 800d70a:	d8f7      	bhi.n	800d6fc <_printf_i+0x28>
 800d70c:	f7f2 fcfc 	bl	8000108 <__gnu_thumb1_case_shi>
 800d710:	001f0016 	.word	0x001f0016
 800d714:	fff6fff6 	.word	0xfff6fff6
 800d718:	fff6fff6 	.word	0xfff6fff6
 800d71c:	fff6001f 	.word	0xfff6001f
 800d720:	fff6fff6 	.word	0xfff6fff6
 800d724:	00a8fff6 	.word	0x00a8fff6
 800d728:	009a0036 	.word	0x009a0036
 800d72c:	fff6fff6 	.word	0xfff6fff6
 800d730:	fff600b9 	.word	0xfff600b9
 800d734:	fff60036 	.word	0xfff60036
 800d738:	009efff6 	.word	0x009efff6
 800d73c:	0026      	movs	r6, r4
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	3642      	adds	r6, #66	; 0x42
 800d742:	1d11      	adds	r1, r2, #4
 800d744:	6019      	str	r1, [r3, #0]
 800d746:	6813      	ldr	r3, [r2, #0]
 800d748:	7033      	strb	r3, [r6, #0]
 800d74a:	2301      	movs	r3, #1
 800d74c:	e0a7      	b.n	800d89e <_printf_i+0x1ca>
 800d74e:	6808      	ldr	r0, [r1, #0]
 800d750:	6819      	ldr	r1, [r3, #0]
 800d752:	1d0a      	adds	r2, r1, #4
 800d754:	0605      	lsls	r5, r0, #24
 800d756:	d50b      	bpl.n	800d770 <_printf_i+0x9c>
 800d758:	680d      	ldr	r5, [r1, #0]
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	2d00      	cmp	r5, #0
 800d75e:	da03      	bge.n	800d768 <_printf_i+0x94>
 800d760:	232d      	movs	r3, #45	; 0x2d
 800d762:	9a04      	ldr	r2, [sp, #16]
 800d764:	426d      	negs	r5, r5
 800d766:	7013      	strb	r3, [r2, #0]
 800d768:	4b61      	ldr	r3, [pc, #388]	; (800d8f0 <_printf_i+0x21c>)
 800d76a:	270a      	movs	r7, #10
 800d76c:	9303      	str	r3, [sp, #12]
 800d76e:	e032      	b.n	800d7d6 <_printf_i+0x102>
 800d770:	680d      	ldr	r5, [r1, #0]
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	0641      	lsls	r1, r0, #25
 800d776:	d5f1      	bpl.n	800d75c <_printf_i+0x88>
 800d778:	b22d      	sxth	r5, r5
 800d77a:	e7ef      	b.n	800d75c <_printf_i+0x88>
 800d77c:	680d      	ldr	r5, [r1, #0]
 800d77e:	6819      	ldr	r1, [r3, #0]
 800d780:	1d08      	adds	r0, r1, #4
 800d782:	6018      	str	r0, [r3, #0]
 800d784:	062e      	lsls	r6, r5, #24
 800d786:	d501      	bpl.n	800d78c <_printf_i+0xb8>
 800d788:	680d      	ldr	r5, [r1, #0]
 800d78a:	e003      	b.n	800d794 <_printf_i+0xc0>
 800d78c:	066d      	lsls	r5, r5, #25
 800d78e:	d5fb      	bpl.n	800d788 <_printf_i+0xb4>
 800d790:	680d      	ldr	r5, [r1, #0]
 800d792:	b2ad      	uxth	r5, r5
 800d794:	4b56      	ldr	r3, [pc, #344]	; (800d8f0 <_printf_i+0x21c>)
 800d796:	270a      	movs	r7, #10
 800d798:	9303      	str	r3, [sp, #12]
 800d79a:	2a6f      	cmp	r2, #111	; 0x6f
 800d79c:	d117      	bne.n	800d7ce <_printf_i+0xfa>
 800d79e:	2708      	movs	r7, #8
 800d7a0:	e015      	b.n	800d7ce <_printf_i+0xfa>
 800d7a2:	3145      	adds	r1, #69	; 0x45
 800d7a4:	700a      	strb	r2, [r1, #0]
 800d7a6:	4a52      	ldr	r2, [pc, #328]	; (800d8f0 <_printf_i+0x21c>)
 800d7a8:	9203      	str	r2, [sp, #12]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	6821      	ldr	r1, [r4, #0]
 800d7ae:	ca20      	ldmia	r2!, {r5}
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	0608      	lsls	r0, r1, #24
 800d7b4:	d550      	bpl.n	800d858 <_printf_i+0x184>
 800d7b6:	07cb      	lsls	r3, r1, #31
 800d7b8:	d502      	bpl.n	800d7c0 <_printf_i+0xec>
 800d7ba:	2320      	movs	r3, #32
 800d7bc:	4319      	orrs	r1, r3
 800d7be:	6021      	str	r1, [r4, #0]
 800d7c0:	2710      	movs	r7, #16
 800d7c2:	2d00      	cmp	r5, #0
 800d7c4:	d103      	bne.n	800d7ce <_printf_i+0xfa>
 800d7c6:	2320      	movs	r3, #32
 800d7c8:	6822      	ldr	r2, [r4, #0]
 800d7ca:	439a      	bics	r2, r3
 800d7cc:	6022      	str	r2, [r4, #0]
 800d7ce:	0023      	movs	r3, r4
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	3343      	adds	r3, #67	; 0x43
 800d7d4:	701a      	strb	r2, [r3, #0]
 800d7d6:	6863      	ldr	r3, [r4, #4]
 800d7d8:	60a3      	str	r3, [r4, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	db03      	blt.n	800d7e6 <_printf_i+0x112>
 800d7de:	2204      	movs	r2, #4
 800d7e0:	6821      	ldr	r1, [r4, #0]
 800d7e2:	4391      	bics	r1, r2
 800d7e4:	6021      	str	r1, [r4, #0]
 800d7e6:	2d00      	cmp	r5, #0
 800d7e8:	d102      	bne.n	800d7f0 <_printf_i+0x11c>
 800d7ea:	9e04      	ldr	r6, [sp, #16]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00c      	beq.n	800d80a <_printf_i+0x136>
 800d7f0:	9e04      	ldr	r6, [sp, #16]
 800d7f2:	0028      	movs	r0, r5
 800d7f4:	0039      	movs	r1, r7
 800d7f6:	f7f2 fd17 	bl	8000228 <__aeabi_uidivmod>
 800d7fa:	9b03      	ldr	r3, [sp, #12]
 800d7fc:	3e01      	subs	r6, #1
 800d7fe:	5c5b      	ldrb	r3, [r3, r1]
 800d800:	7033      	strb	r3, [r6, #0]
 800d802:	002b      	movs	r3, r5
 800d804:	0005      	movs	r5, r0
 800d806:	429f      	cmp	r7, r3
 800d808:	d9f3      	bls.n	800d7f2 <_printf_i+0x11e>
 800d80a:	2f08      	cmp	r7, #8
 800d80c:	d109      	bne.n	800d822 <_printf_i+0x14e>
 800d80e:	6823      	ldr	r3, [r4, #0]
 800d810:	07db      	lsls	r3, r3, #31
 800d812:	d506      	bpl.n	800d822 <_printf_i+0x14e>
 800d814:	6863      	ldr	r3, [r4, #4]
 800d816:	6922      	ldr	r2, [r4, #16]
 800d818:	4293      	cmp	r3, r2
 800d81a:	dc02      	bgt.n	800d822 <_printf_i+0x14e>
 800d81c:	2330      	movs	r3, #48	; 0x30
 800d81e:	3e01      	subs	r6, #1
 800d820:	7033      	strb	r3, [r6, #0]
 800d822:	9b04      	ldr	r3, [sp, #16]
 800d824:	1b9b      	subs	r3, r3, r6
 800d826:	6123      	str	r3, [r4, #16]
 800d828:	9b07      	ldr	r3, [sp, #28]
 800d82a:	0021      	movs	r1, r4
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	9805      	ldr	r0, [sp, #20]
 800d830:	9b06      	ldr	r3, [sp, #24]
 800d832:	aa09      	add	r2, sp, #36	; 0x24
 800d834:	f7ff fede 	bl	800d5f4 <_printf_common>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d135      	bne.n	800d8a8 <_printf_i+0x1d4>
 800d83c:	2001      	movs	r0, #1
 800d83e:	4240      	negs	r0, r0
 800d840:	b00b      	add	sp, #44	; 0x2c
 800d842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d844:	2220      	movs	r2, #32
 800d846:	6809      	ldr	r1, [r1, #0]
 800d848:	430a      	orrs	r2, r1
 800d84a:	6022      	str	r2, [r4, #0]
 800d84c:	0022      	movs	r2, r4
 800d84e:	2178      	movs	r1, #120	; 0x78
 800d850:	3245      	adds	r2, #69	; 0x45
 800d852:	7011      	strb	r1, [r2, #0]
 800d854:	4a27      	ldr	r2, [pc, #156]	; (800d8f4 <_printf_i+0x220>)
 800d856:	e7a7      	b.n	800d7a8 <_printf_i+0xd4>
 800d858:	0648      	lsls	r0, r1, #25
 800d85a:	d5ac      	bpl.n	800d7b6 <_printf_i+0xe2>
 800d85c:	b2ad      	uxth	r5, r5
 800d85e:	e7aa      	b.n	800d7b6 <_printf_i+0xe2>
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	680d      	ldr	r5, [r1, #0]
 800d864:	1d10      	adds	r0, r2, #4
 800d866:	6949      	ldr	r1, [r1, #20]
 800d868:	6018      	str	r0, [r3, #0]
 800d86a:	6813      	ldr	r3, [r2, #0]
 800d86c:	062e      	lsls	r6, r5, #24
 800d86e:	d501      	bpl.n	800d874 <_printf_i+0x1a0>
 800d870:	6019      	str	r1, [r3, #0]
 800d872:	e002      	b.n	800d87a <_printf_i+0x1a6>
 800d874:	066d      	lsls	r5, r5, #25
 800d876:	d5fb      	bpl.n	800d870 <_printf_i+0x19c>
 800d878:	8019      	strh	r1, [r3, #0]
 800d87a:	2300      	movs	r3, #0
 800d87c:	9e04      	ldr	r6, [sp, #16]
 800d87e:	6123      	str	r3, [r4, #16]
 800d880:	e7d2      	b.n	800d828 <_printf_i+0x154>
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	1d11      	adds	r1, r2, #4
 800d886:	6019      	str	r1, [r3, #0]
 800d888:	6816      	ldr	r6, [r2, #0]
 800d88a:	2100      	movs	r1, #0
 800d88c:	0030      	movs	r0, r6
 800d88e:	6862      	ldr	r2, [r4, #4]
 800d890:	f7ff fb5e 	bl	800cf50 <memchr>
 800d894:	2800      	cmp	r0, #0
 800d896:	d001      	beq.n	800d89c <_printf_i+0x1c8>
 800d898:	1b80      	subs	r0, r0, r6
 800d89a:	6060      	str	r0, [r4, #4]
 800d89c:	6863      	ldr	r3, [r4, #4]
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	9a04      	ldr	r2, [sp, #16]
 800d8a4:	7013      	strb	r3, [r2, #0]
 800d8a6:	e7bf      	b.n	800d828 <_printf_i+0x154>
 800d8a8:	6923      	ldr	r3, [r4, #16]
 800d8aa:	0032      	movs	r2, r6
 800d8ac:	9906      	ldr	r1, [sp, #24]
 800d8ae:	9805      	ldr	r0, [sp, #20]
 800d8b0:	9d07      	ldr	r5, [sp, #28]
 800d8b2:	47a8      	blx	r5
 800d8b4:	1c43      	adds	r3, r0, #1
 800d8b6:	d0c1      	beq.n	800d83c <_printf_i+0x168>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	079b      	lsls	r3, r3, #30
 800d8bc:	d415      	bmi.n	800d8ea <_printf_i+0x216>
 800d8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c0:	68e0      	ldr	r0, [r4, #12]
 800d8c2:	4298      	cmp	r0, r3
 800d8c4:	dabc      	bge.n	800d840 <_printf_i+0x16c>
 800d8c6:	0018      	movs	r0, r3
 800d8c8:	e7ba      	b.n	800d840 <_printf_i+0x16c>
 800d8ca:	0022      	movs	r2, r4
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	9906      	ldr	r1, [sp, #24]
 800d8d0:	9805      	ldr	r0, [sp, #20]
 800d8d2:	9e07      	ldr	r6, [sp, #28]
 800d8d4:	3219      	adds	r2, #25
 800d8d6:	47b0      	blx	r6
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	d0af      	beq.n	800d83c <_printf_i+0x168>
 800d8dc:	3501      	adds	r5, #1
 800d8de:	68e3      	ldr	r3, [r4, #12]
 800d8e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8e2:	1a9b      	subs	r3, r3, r2
 800d8e4:	42ab      	cmp	r3, r5
 800d8e6:	dcf0      	bgt.n	800d8ca <_printf_i+0x1f6>
 800d8e8:	e7e9      	b.n	800d8be <_printf_i+0x1ea>
 800d8ea:	2500      	movs	r5, #0
 800d8ec:	e7f7      	b.n	800d8de <_printf_i+0x20a>
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	0800e3b9 	.word	0x0800e3b9
 800d8f4:	0800e3ca 	.word	0x0800e3ca

0800d8f8 <_realloc_r>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	0007      	movs	r7, r0
 800d8fc:	000d      	movs	r5, r1
 800d8fe:	0016      	movs	r6, r2
 800d900:	2900      	cmp	r1, #0
 800d902:	d105      	bne.n	800d910 <_realloc_r+0x18>
 800d904:	0011      	movs	r1, r2
 800d906:	f7ff fb9d 	bl	800d044 <_malloc_r>
 800d90a:	0004      	movs	r4, r0
 800d90c:	0020      	movs	r0, r4
 800d90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d910:	2a00      	cmp	r2, #0
 800d912:	d103      	bne.n	800d91c <_realloc_r+0x24>
 800d914:	f7ff fb4c 	bl	800cfb0 <_free_r>
 800d918:	0034      	movs	r4, r6
 800d91a:	e7f7      	b.n	800d90c <_realloc_r+0x14>
 800d91c:	f000 f812 	bl	800d944 <_malloc_usable_size_r>
 800d920:	002c      	movs	r4, r5
 800d922:	42b0      	cmp	r0, r6
 800d924:	d2f2      	bcs.n	800d90c <_realloc_r+0x14>
 800d926:	0031      	movs	r1, r6
 800d928:	0038      	movs	r0, r7
 800d92a:	f7ff fb8b 	bl	800d044 <_malloc_r>
 800d92e:	1e04      	subs	r4, r0, #0
 800d930:	d0ec      	beq.n	800d90c <_realloc_r+0x14>
 800d932:	0029      	movs	r1, r5
 800d934:	0032      	movs	r2, r6
 800d936:	f7ff fb16 	bl	800cf66 <memcpy>
 800d93a:	0029      	movs	r1, r5
 800d93c:	0038      	movs	r0, r7
 800d93e:	f7ff fb37 	bl	800cfb0 <_free_r>
 800d942:	e7e3      	b.n	800d90c <_realloc_r+0x14>

0800d944 <_malloc_usable_size_r>:
 800d944:	1f0b      	subs	r3, r1, #4
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	1f18      	subs	r0, r3, #4
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	da01      	bge.n	800d952 <_malloc_usable_size_r+0xe>
 800d94e:	580b      	ldr	r3, [r1, r0]
 800d950:	18c0      	adds	r0, r0, r3
 800d952:	4770      	bx	lr

0800d954 <_init>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	46c0      	nop			; (mov r8, r8)
 800d958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95a:	bc08      	pop	{r3}
 800d95c:	469e      	mov	lr, r3
 800d95e:	4770      	bx	lr

0800d960 <_fini>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	46c0      	nop			; (mov r8, r8)
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr
