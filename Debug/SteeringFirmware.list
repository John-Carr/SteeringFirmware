
SteeringFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130bc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001694  0801317c  0801317c  0002317c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014810  08014810  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08014810  08014810  00024810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014818  08014818  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014818  08014818  00024818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014820  08014820  00024820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08014828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003438  20000094  080148bc  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034cc  080148bc  000334cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000607a5  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000954e  00000000  00000000  00090861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab8  00000000  00000000  00099db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028f8  00000000  00000000  0009c868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ace  00000000  00000000  0009f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c470  00000000  00000000  000c5c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfe18  00000000  00000000  000f209e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c1eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae8c  00000000  00000000  001c1f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08013164 	.word	0x08013164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	08013164 	.word	0x08013164

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fb73 	bl	8000928 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 faf7 	bl	8000840 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb65 	bl	8000928 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb5b 	bl	8000928 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb05 	bl	8000890 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fafb 	bl	8000890 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	1c08      	adds	r0, r1, #0
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f84a 	bl	8000370 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_f2ulz>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	f001 ffed 	bl	80022c8 <__aeabi_f2d>
 80002ee:	2200      	movs	r2, #0
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <__aeabi_f2ulz+0x38>)
 80002f2:	000d      	movs	r5, r1
 80002f4:	0004      	movs	r4, r0
 80002f6:	f001 f9c3 	bl	8001680 <__aeabi_dmul>
 80002fa:	f002 f8df 	bl	80024bc <__aeabi_d2uiz>
 80002fe:	0006      	movs	r6, r0
 8000300:	f001 ffbc 	bl	800227c <__aeabi_ui2d>
 8000304:	2200      	movs	r2, #0
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <__aeabi_f2ulz+0x3c>)
 8000308:	f001 f9ba 	bl	8001680 <__aeabi_dmul>
 800030c:	0002      	movs	r2, r0
 800030e:	000b      	movs	r3, r1
 8000310:	0020      	movs	r0, r4
 8000312:	0029      	movs	r1, r5
 8000314:	f001 fc20 	bl	8001b58 <__aeabi_dsub>
 8000318:	f002 f8d0 	bl	80024bc <__aeabi_d2uiz>
 800031c:	0031      	movs	r1, r6
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	3df00000 	.word	0x3df00000
 8000324:	41f00000 	.word	0x41f00000

08000328 <__aeabi_ul2f>:
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	b5d0      	push	{r4, r6, r7, lr}
 800032c:	039b      	lsls	r3, r3, #14
 800032e:	0004      	movs	r4, r0
 8000330:	0008      	movs	r0, r1
 8000332:	4299      	cmp	r1, r3
 8000334:	d301      	bcc.n	800033a <__aeabi_ul2f+0x12>
 8000336:	0563      	lsls	r3, r4, #21
 8000338:	d111      	bne.n	800035e <__aeabi_ul2f+0x36>
 800033a:	f001 ff9f 	bl	800227c <__aeabi_ui2d>
 800033e:	2200      	movs	r2, #0
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <__aeabi_ul2f+0x44>)
 8000342:	f001 f99d 	bl	8001680 <__aeabi_dmul>
 8000346:	0006      	movs	r6, r0
 8000348:	000f      	movs	r7, r1
 800034a:	0020      	movs	r0, r4
 800034c:	f001 ff96 	bl	800227c <__aeabi_ui2d>
 8000350:	0032      	movs	r2, r6
 8000352:	003b      	movs	r3, r7
 8000354:	f000 fe2a 	bl	8000fac <__aeabi_dadd>
 8000358:	f001 fffe 	bl	8002358 <__aeabi_d2f>
 800035c:	bdd0      	pop	{r4, r6, r7, pc}
 800035e:	2380      	movs	r3, #128	; 0x80
 8000360:	0ae4      	lsrs	r4, r4, #11
 8000362:	02e4      	lsls	r4, r4, #11
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	431c      	orrs	r4, r3
 8000368:	e7e7      	b.n	800033a <__aeabi_ul2f+0x12>
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	41f00000 	.word	0x41f00000

08000370 <__udivmoddi4>:
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	4657      	mov	r7, sl
 8000374:	464e      	mov	r6, r9
 8000376:	4645      	mov	r5, r8
 8000378:	46de      	mov	lr, fp
 800037a:	b5e0      	push	{r5, r6, r7, lr}
 800037c:	0004      	movs	r4, r0
 800037e:	000d      	movs	r5, r1
 8000380:	4692      	mov	sl, r2
 8000382:	4699      	mov	r9, r3
 8000384:	b083      	sub	sp, #12
 8000386:	428b      	cmp	r3, r1
 8000388:	d830      	bhi.n	80003ec <__udivmoddi4+0x7c>
 800038a:	d02d      	beq.n	80003e8 <__udivmoddi4+0x78>
 800038c:	4649      	mov	r1, r9
 800038e:	4650      	mov	r0, sl
 8000390:	f002 f888 	bl	80024a4 <__clzdi2>
 8000394:	0029      	movs	r1, r5
 8000396:	0006      	movs	r6, r0
 8000398:	0020      	movs	r0, r4
 800039a:	f002 f883 	bl	80024a4 <__clzdi2>
 800039e:	1a33      	subs	r3, r6, r0
 80003a0:	4698      	mov	r8, r3
 80003a2:	3b20      	subs	r3, #32
 80003a4:	469b      	mov	fp, r3
 80003a6:	d433      	bmi.n	8000410 <__udivmoddi4+0xa0>
 80003a8:	465a      	mov	r2, fp
 80003aa:	4653      	mov	r3, sl
 80003ac:	4093      	lsls	r3, r2
 80003ae:	4642      	mov	r2, r8
 80003b0:	001f      	movs	r7, r3
 80003b2:	4653      	mov	r3, sl
 80003b4:	4093      	lsls	r3, r2
 80003b6:	001e      	movs	r6, r3
 80003b8:	42af      	cmp	r7, r5
 80003ba:	d83a      	bhi.n	8000432 <__udivmoddi4+0xc2>
 80003bc:	42af      	cmp	r7, r5
 80003be:	d100      	bne.n	80003c2 <__udivmoddi4+0x52>
 80003c0:	e078      	b.n	80004b4 <__udivmoddi4+0x144>
 80003c2:	465b      	mov	r3, fp
 80003c4:	1ba4      	subs	r4, r4, r6
 80003c6:	41bd      	sbcs	r5, r7
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	da00      	bge.n	80003ce <__udivmoddi4+0x5e>
 80003cc:	e075      	b.n	80004ba <__udivmoddi4+0x14a>
 80003ce:	2200      	movs	r2, #0
 80003d0:	2300      	movs	r3, #0
 80003d2:	9200      	str	r2, [sp, #0]
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2301      	movs	r3, #1
 80003d8:	465a      	mov	r2, fp
 80003da:	4093      	lsls	r3, r2
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	2301      	movs	r3, #1
 80003e0:	4642      	mov	r2, r8
 80003e2:	4093      	lsls	r3, r2
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	e028      	b.n	800043a <__udivmoddi4+0xca>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	d9cf      	bls.n	800038c <__udivmoddi4+0x1c>
 80003ec:	2200      	movs	r2, #0
 80003ee:	2300      	movs	r3, #0
 80003f0:	9200      	str	r2, [sp, #0]
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <__udivmoddi4+0x8e>
 80003fa:	601c      	str	r4, [r3, #0]
 80003fc:	605d      	str	r5, [r3, #4]
 80003fe:	9800      	ldr	r0, [sp, #0]
 8000400:	9901      	ldr	r1, [sp, #4]
 8000402:	b003      	add	sp, #12
 8000404:	bcf0      	pop	{r4, r5, r6, r7}
 8000406:	46bb      	mov	fp, r7
 8000408:	46b2      	mov	sl, r6
 800040a:	46a9      	mov	r9, r5
 800040c:	46a0      	mov	r8, r4
 800040e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	4652      	mov	r2, sl
 8000418:	40da      	lsrs	r2, r3
 800041a:	4641      	mov	r1, r8
 800041c:	0013      	movs	r3, r2
 800041e:	464a      	mov	r2, r9
 8000420:	408a      	lsls	r2, r1
 8000422:	0017      	movs	r7, r2
 8000424:	4642      	mov	r2, r8
 8000426:	431f      	orrs	r7, r3
 8000428:	4653      	mov	r3, sl
 800042a:	4093      	lsls	r3, r2
 800042c:	001e      	movs	r6, r3
 800042e:	42af      	cmp	r7, r5
 8000430:	d9c4      	bls.n	80003bc <__udivmoddi4+0x4c>
 8000432:	2200      	movs	r2, #0
 8000434:	2300      	movs	r3, #0
 8000436:	9200      	str	r2, [sp, #0]
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	4643      	mov	r3, r8
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0d9      	beq.n	80003f4 <__udivmoddi4+0x84>
 8000440:	07fb      	lsls	r3, r7, #31
 8000442:	0872      	lsrs	r2, r6, #1
 8000444:	431a      	orrs	r2, r3
 8000446:	4646      	mov	r6, r8
 8000448:	087b      	lsrs	r3, r7, #1
 800044a:	e00e      	b.n	800046a <__udivmoddi4+0xfa>
 800044c:	42ab      	cmp	r3, r5
 800044e:	d101      	bne.n	8000454 <__udivmoddi4+0xe4>
 8000450:	42a2      	cmp	r2, r4
 8000452:	d80c      	bhi.n	800046e <__udivmoddi4+0xfe>
 8000454:	1aa4      	subs	r4, r4, r2
 8000456:	419d      	sbcs	r5, r3
 8000458:	2001      	movs	r0, #1
 800045a:	1924      	adds	r4, r4, r4
 800045c:	416d      	adcs	r5, r5
 800045e:	2100      	movs	r1, #0
 8000460:	3e01      	subs	r6, #1
 8000462:	1824      	adds	r4, r4, r0
 8000464:	414d      	adcs	r5, r1
 8000466:	2e00      	cmp	r6, #0
 8000468:	d006      	beq.n	8000478 <__udivmoddi4+0x108>
 800046a:	42ab      	cmp	r3, r5
 800046c:	d9ee      	bls.n	800044c <__udivmoddi4+0xdc>
 800046e:	3e01      	subs	r6, #1
 8000470:	1924      	adds	r4, r4, r4
 8000472:	416d      	adcs	r5, r5
 8000474:	2e00      	cmp	r6, #0
 8000476:	d1f8      	bne.n	800046a <__udivmoddi4+0xfa>
 8000478:	9800      	ldr	r0, [sp, #0]
 800047a:	9901      	ldr	r1, [sp, #4]
 800047c:	465b      	mov	r3, fp
 800047e:	1900      	adds	r0, r0, r4
 8000480:	4169      	adcs	r1, r5
 8000482:	2b00      	cmp	r3, #0
 8000484:	db24      	blt.n	80004d0 <__udivmoddi4+0x160>
 8000486:	002b      	movs	r3, r5
 8000488:	465a      	mov	r2, fp
 800048a:	4644      	mov	r4, r8
 800048c:	40d3      	lsrs	r3, r2
 800048e:	002a      	movs	r2, r5
 8000490:	40e2      	lsrs	r2, r4
 8000492:	001c      	movs	r4, r3
 8000494:	465b      	mov	r3, fp
 8000496:	0015      	movs	r5, r2
 8000498:	2b00      	cmp	r3, #0
 800049a:	db2a      	blt.n	80004f2 <__udivmoddi4+0x182>
 800049c:	0026      	movs	r6, r4
 800049e:	409e      	lsls	r6, r3
 80004a0:	0033      	movs	r3, r6
 80004a2:	0026      	movs	r6, r4
 80004a4:	4647      	mov	r7, r8
 80004a6:	40be      	lsls	r6, r7
 80004a8:	0032      	movs	r2, r6
 80004aa:	1a80      	subs	r0, r0, r2
 80004ac:	4199      	sbcs	r1, r3
 80004ae:	9000      	str	r0, [sp, #0]
 80004b0:	9101      	str	r1, [sp, #4]
 80004b2:	e79f      	b.n	80003f4 <__udivmoddi4+0x84>
 80004b4:	42a3      	cmp	r3, r4
 80004b6:	d8bc      	bhi.n	8000432 <__udivmoddi4+0xc2>
 80004b8:	e783      	b.n	80003c2 <__udivmoddi4+0x52>
 80004ba:	4642      	mov	r2, r8
 80004bc:	2320      	movs	r3, #32
 80004be:	2100      	movs	r1, #0
 80004c0:	1a9b      	subs	r3, r3, r2
 80004c2:	2200      	movs	r2, #0
 80004c4:	9100      	str	r1, [sp, #0]
 80004c6:	9201      	str	r2, [sp, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	40da      	lsrs	r2, r3
 80004cc:	9201      	str	r2, [sp, #4]
 80004ce:	e786      	b.n	80003de <__udivmoddi4+0x6e>
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	002a      	movs	r2, r5
 80004d8:	4646      	mov	r6, r8
 80004da:	409a      	lsls	r2, r3
 80004dc:	0023      	movs	r3, r4
 80004de:	40f3      	lsrs	r3, r6
 80004e0:	4644      	mov	r4, r8
 80004e2:	4313      	orrs	r3, r2
 80004e4:	002a      	movs	r2, r5
 80004e6:	40e2      	lsrs	r2, r4
 80004e8:	001c      	movs	r4, r3
 80004ea:	465b      	mov	r3, fp
 80004ec:	0015      	movs	r5, r2
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	dad4      	bge.n	800049c <__udivmoddi4+0x12c>
 80004f2:	4642      	mov	r2, r8
 80004f4:	002f      	movs	r7, r5
 80004f6:	2320      	movs	r3, #32
 80004f8:	0026      	movs	r6, r4
 80004fa:	4097      	lsls	r7, r2
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	40de      	lsrs	r6, r3
 8000500:	003b      	movs	r3, r7
 8000502:	4333      	orrs	r3, r6
 8000504:	e7cd      	b.n	80004a2 <__udivmoddi4+0x132>
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fadd>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	4646      	mov	r6, r8
 800050c:	46d6      	mov	lr, sl
 800050e:	464f      	mov	r7, r9
 8000510:	024d      	lsls	r5, r1, #9
 8000512:	0242      	lsls	r2, r0, #9
 8000514:	b5c0      	push	{r6, r7, lr}
 8000516:	0a52      	lsrs	r2, r2, #9
 8000518:	0a6e      	lsrs	r6, r5, #9
 800051a:	0047      	lsls	r7, r0, #1
 800051c:	46b0      	mov	r8, r6
 800051e:	0e3f      	lsrs	r7, r7, #24
 8000520:	004e      	lsls	r6, r1, #1
 8000522:	0fc4      	lsrs	r4, r0, #31
 8000524:	00d0      	lsls	r0, r2, #3
 8000526:	4694      	mov	ip, r2
 8000528:	003b      	movs	r3, r7
 800052a:	4682      	mov	sl, r0
 800052c:	0e36      	lsrs	r6, r6, #24
 800052e:	0fc9      	lsrs	r1, r1, #31
 8000530:	09ad      	lsrs	r5, r5, #6
 8000532:	428c      	cmp	r4, r1
 8000534:	d06d      	beq.n	8000612 <__aeabi_fadd+0x10a>
 8000536:	1bb8      	subs	r0, r7, r6
 8000538:	4681      	mov	r9, r0
 800053a:	2800      	cmp	r0, #0
 800053c:	dd4d      	ble.n	80005da <__aeabi_fadd+0xd2>
 800053e:	2e00      	cmp	r6, #0
 8000540:	d100      	bne.n	8000544 <__aeabi_fadd+0x3c>
 8000542:	e088      	b.n	8000656 <__aeabi_fadd+0x14e>
 8000544:	2fff      	cmp	r7, #255	; 0xff
 8000546:	d05a      	beq.n	80005fe <__aeabi_fadd+0xf6>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	04db      	lsls	r3, r3, #19
 800054c:	431d      	orrs	r5, r3
 800054e:	464b      	mov	r3, r9
 8000550:	2201      	movs	r2, #1
 8000552:	2b1b      	cmp	r3, #27
 8000554:	dc0a      	bgt.n	800056c <__aeabi_fadd+0x64>
 8000556:	002b      	movs	r3, r5
 8000558:	464a      	mov	r2, r9
 800055a:	4649      	mov	r1, r9
 800055c:	40d3      	lsrs	r3, r2
 800055e:	2220      	movs	r2, #32
 8000560:	1a52      	subs	r2, r2, r1
 8000562:	4095      	lsls	r5, r2
 8000564:	002a      	movs	r2, r5
 8000566:	1e55      	subs	r5, r2, #1
 8000568:	41aa      	sbcs	r2, r5
 800056a:	431a      	orrs	r2, r3
 800056c:	4653      	mov	r3, sl
 800056e:	1a9a      	subs	r2, r3, r2
 8000570:	0153      	lsls	r3, r2, #5
 8000572:	d400      	bmi.n	8000576 <__aeabi_fadd+0x6e>
 8000574:	e0b9      	b.n	80006ea <__aeabi_fadd+0x1e2>
 8000576:	0192      	lsls	r2, r2, #6
 8000578:	0996      	lsrs	r6, r2, #6
 800057a:	0030      	movs	r0, r6
 800057c:	f001 ff74 	bl	8002468 <__clzsi2>
 8000580:	3805      	subs	r0, #5
 8000582:	4086      	lsls	r6, r0
 8000584:	4287      	cmp	r7, r0
 8000586:	dd00      	ble.n	800058a <__aeabi_fadd+0x82>
 8000588:	e0d4      	b.n	8000734 <__aeabi_fadd+0x22c>
 800058a:	0033      	movs	r3, r6
 800058c:	1bc7      	subs	r7, r0, r7
 800058e:	2020      	movs	r0, #32
 8000590:	3701      	adds	r7, #1
 8000592:	40fb      	lsrs	r3, r7
 8000594:	1bc7      	subs	r7, r0, r7
 8000596:	40be      	lsls	r6, r7
 8000598:	0032      	movs	r2, r6
 800059a:	1e56      	subs	r6, r2, #1
 800059c:	41b2      	sbcs	r2, r6
 800059e:	2700      	movs	r7, #0
 80005a0:	431a      	orrs	r2, r3
 80005a2:	0753      	lsls	r3, r2, #29
 80005a4:	d004      	beq.n	80005b0 <__aeabi_fadd+0xa8>
 80005a6:	230f      	movs	r3, #15
 80005a8:	4013      	ands	r3, r2
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fadd+0xa8>
 80005ae:	3204      	adds	r2, #4
 80005b0:	0153      	lsls	r3, r2, #5
 80005b2:	d400      	bmi.n	80005b6 <__aeabi_fadd+0xae>
 80005b4:	e09c      	b.n	80006f0 <__aeabi_fadd+0x1e8>
 80005b6:	1c7b      	adds	r3, r7, #1
 80005b8:	2ffe      	cmp	r7, #254	; 0xfe
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0xb6>
 80005bc:	e09a      	b.n	80006f4 <__aeabi_fadd+0x1ec>
 80005be:	0192      	lsls	r2, r2, #6
 80005c0:	0a52      	lsrs	r2, r2, #9
 80005c2:	4694      	mov	ip, r2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	05d8      	lsls	r0, r3, #23
 80005c8:	4663      	mov	r3, ip
 80005ca:	07e4      	lsls	r4, r4, #31
 80005cc:	4318      	orrs	r0, r3
 80005ce:	4320      	orrs	r0, r4
 80005d0:	bce0      	pop	{r5, r6, r7}
 80005d2:	46ba      	mov	sl, r7
 80005d4:	46b1      	mov	r9, r6
 80005d6:	46a8      	mov	r8, r5
 80005d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005da:	2800      	cmp	r0, #0
 80005dc:	d049      	beq.n	8000672 <__aeabi_fadd+0x16a>
 80005de:	1bf3      	subs	r3, r6, r7
 80005e0:	2f00      	cmp	r7, #0
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fadd+0xde>
 80005e4:	e0b6      	b.n	8000754 <__aeabi_fadd+0x24c>
 80005e6:	4652      	mov	r2, sl
 80005e8:	2a00      	cmp	r2, #0
 80005ea:	d060      	beq.n	80006ae <__aeabi_fadd+0x1a6>
 80005ec:	3b01      	subs	r3, #1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fadd+0xec>
 80005f2:	e0fc      	b.n	80007ee <__aeabi_fadd+0x2e6>
 80005f4:	2eff      	cmp	r6, #255	; 0xff
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0xf2>
 80005f8:	e0b4      	b.n	8000764 <__aeabi_fadd+0x25c>
 80005fa:	000c      	movs	r4, r1
 80005fc:	4642      	mov	r2, r8
 80005fe:	2a00      	cmp	r2, #0
 8000600:	d078      	beq.n	80006f4 <__aeabi_fadd+0x1ec>
 8000602:	2080      	movs	r0, #128	; 0x80
 8000604:	03c0      	lsls	r0, r0, #15
 8000606:	4310      	orrs	r0, r2
 8000608:	0242      	lsls	r2, r0, #9
 800060a:	0a53      	lsrs	r3, r2, #9
 800060c:	469c      	mov	ip, r3
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	e7d9      	b.n	80005c6 <__aeabi_fadd+0xbe>
 8000612:	1bb9      	subs	r1, r7, r6
 8000614:	2900      	cmp	r1, #0
 8000616:	dd71      	ble.n	80006fc <__aeabi_fadd+0x1f4>
 8000618:	2e00      	cmp	r6, #0
 800061a:	d03f      	beq.n	800069c <__aeabi_fadd+0x194>
 800061c:	2fff      	cmp	r7, #255	; 0xff
 800061e:	d0ee      	beq.n	80005fe <__aeabi_fadd+0xf6>
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	04db      	lsls	r3, r3, #19
 8000624:	431d      	orrs	r5, r3
 8000626:	2201      	movs	r2, #1
 8000628:	291b      	cmp	r1, #27
 800062a:	dc07      	bgt.n	800063c <__aeabi_fadd+0x134>
 800062c:	002a      	movs	r2, r5
 800062e:	2320      	movs	r3, #32
 8000630:	40ca      	lsrs	r2, r1
 8000632:	1a59      	subs	r1, r3, r1
 8000634:	408d      	lsls	r5, r1
 8000636:	1e6b      	subs	r3, r5, #1
 8000638:	419d      	sbcs	r5, r3
 800063a:	432a      	orrs	r2, r5
 800063c:	4452      	add	r2, sl
 800063e:	0153      	lsls	r3, r2, #5
 8000640:	d553      	bpl.n	80006ea <__aeabi_fadd+0x1e2>
 8000642:	3701      	adds	r7, #1
 8000644:	2fff      	cmp	r7, #255	; 0xff
 8000646:	d055      	beq.n	80006f4 <__aeabi_fadd+0x1ec>
 8000648:	2301      	movs	r3, #1
 800064a:	497b      	ldr	r1, [pc, #492]	; (8000838 <__aeabi_fadd+0x330>)
 800064c:	4013      	ands	r3, r2
 800064e:	0852      	lsrs	r2, r2, #1
 8000650:	400a      	ands	r2, r1
 8000652:	431a      	orrs	r2, r3
 8000654:	e7a5      	b.n	80005a2 <__aeabi_fadd+0x9a>
 8000656:	2d00      	cmp	r5, #0
 8000658:	d02c      	beq.n	80006b4 <__aeabi_fadd+0x1ac>
 800065a:	2301      	movs	r3, #1
 800065c:	425b      	negs	r3, r3
 800065e:	469c      	mov	ip, r3
 8000660:	44e1      	add	r9, ip
 8000662:	464b      	mov	r3, r9
 8000664:	2b00      	cmp	r3, #0
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x162>
 8000668:	e0ad      	b.n	80007c6 <__aeabi_fadd+0x2be>
 800066a:	2fff      	cmp	r7, #255	; 0xff
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x168>
 800066e:	e76e      	b.n	800054e <__aeabi_fadd+0x46>
 8000670:	e7c5      	b.n	80005fe <__aeabi_fadd+0xf6>
 8000672:	20fe      	movs	r0, #254	; 0xfe
 8000674:	1c7e      	adds	r6, r7, #1
 8000676:	4230      	tst	r0, r6
 8000678:	d160      	bne.n	800073c <__aeabi_fadd+0x234>
 800067a:	2f00      	cmp	r7, #0
 800067c:	d000      	beq.n	8000680 <__aeabi_fadd+0x178>
 800067e:	e093      	b.n	80007a8 <__aeabi_fadd+0x2a0>
 8000680:	4652      	mov	r2, sl
 8000682:	2a00      	cmp	r2, #0
 8000684:	d100      	bne.n	8000688 <__aeabi_fadd+0x180>
 8000686:	e0b6      	b.n	80007f6 <__aeabi_fadd+0x2ee>
 8000688:	2d00      	cmp	r5, #0
 800068a:	d09c      	beq.n	80005c6 <__aeabi_fadd+0xbe>
 800068c:	1b52      	subs	r2, r2, r5
 800068e:	0150      	lsls	r0, r2, #5
 8000690:	d400      	bmi.n	8000694 <__aeabi_fadd+0x18c>
 8000692:	e0c3      	b.n	800081c <__aeabi_fadd+0x314>
 8000694:	4653      	mov	r3, sl
 8000696:	000c      	movs	r4, r1
 8000698:	1aea      	subs	r2, r5, r3
 800069a:	e782      	b.n	80005a2 <__aeabi_fadd+0x9a>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d009      	beq.n	80006b4 <__aeabi_fadd+0x1ac>
 80006a0:	3901      	subs	r1, #1
 80006a2:	2900      	cmp	r1, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x1a0>
 80006a6:	e08b      	b.n	80007c0 <__aeabi_fadd+0x2b8>
 80006a8:	2fff      	cmp	r7, #255	; 0xff
 80006aa:	d1bc      	bne.n	8000626 <__aeabi_fadd+0x11e>
 80006ac:	e7a7      	b.n	80005fe <__aeabi_fadd+0xf6>
 80006ae:	000c      	movs	r4, r1
 80006b0:	4642      	mov	r2, r8
 80006b2:	0037      	movs	r7, r6
 80006b4:	2fff      	cmp	r7, #255	; 0xff
 80006b6:	d0a2      	beq.n	80005fe <__aeabi_fadd+0xf6>
 80006b8:	0252      	lsls	r2, r2, #9
 80006ba:	0a53      	lsrs	r3, r2, #9
 80006bc:	469c      	mov	ip, r3
 80006be:	b2fb      	uxtb	r3, r7
 80006c0:	e781      	b.n	80005c6 <__aeabi_fadd+0xbe>
 80006c2:	21fe      	movs	r1, #254	; 0xfe
 80006c4:	3701      	adds	r7, #1
 80006c6:	4239      	tst	r1, r7
 80006c8:	d165      	bne.n	8000796 <__aeabi_fadd+0x28e>
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d17e      	bne.n	80007cc <__aeabi_fadd+0x2c4>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fadd+0x1cc>
 80006d2:	e0aa      	b.n	800082a <__aeabi_fadd+0x322>
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x1d2>
 80006d8:	e775      	b.n	80005c6 <__aeabi_fadd+0xbe>
 80006da:	002a      	movs	r2, r5
 80006dc:	4452      	add	r2, sl
 80006de:	2700      	movs	r7, #0
 80006e0:	0153      	lsls	r3, r2, #5
 80006e2:	d502      	bpl.n	80006ea <__aeabi_fadd+0x1e2>
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <__aeabi_fadd+0x334>)
 80006e6:	3701      	adds	r7, #1
 80006e8:	401a      	ands	r2, r3
 80006ea:	0753      	lsls	r3, r2, #29
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fadd+0x1e8>
 80006ee:	e75a      	b.n	80005a6 <__aeabi_fadd+0x9e>
 80006f0:	08d2      	lsrs	r2, r2, #3
 80006f2:	e7df      	b.n	80006b4 <__aeabi_fadd+0x1ac>
 80006f4:	2200      	movs	r2, #0
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	4694      	mov	ip, r2
 80006fa:	e764      	b.n	80005c6 <__aeabi_fadd+0xbe>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	d0e0      	beq.n	80006c2 <__aeabi_fadd+0x1ba>
 8000700:	1bf3      	subs	r3, r6, r7
 8000702:	2f00      	cmp	r7, #0
 8000704:	d03e      	beq.n	8000784 <__aeabi_fadd+0x27c>
 8000706:	2eff      	cmp	r6, #255	; 0xff
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x204>
 800070a:	e777      	b.n	80005fc <__aeabi_fadd+0xf4>
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0001      	movs	r1, r0
 8000710:	04d2      	lsls	r2, r2, #19
 8000712:	4311      	orrs	r1, r2
 8000714:	468a      	mov	sl, r1
 8000716:	2201      	movs	r2, #1
 8000718:	2b1b      	cmp	r3, #27
 800071a:	dc08      	bgt.n	800072e <__aeabi_fadd+0x226>
 800071c:	4652      	mov	r2, sl
 800071e:	2120      	movs	r1, #32
 8000720:	4650      	mov	r0, sl
 8000722:	40da      	lsrs	r2, r3
 8000724:	1acb      	subs	r3, r1, r3
 8000726:	4098      	lsls	r0, r3
 8000728:	1e43      	subs	r3, r0, #1
 800072a:	4198      	sbcs	r0, r3
 800072c:	4302      	orrs	r2, r0
 800072e:	0037      	movs	r7, r6
 8000730:	1952      	adds	r2, r2, r5
 8000732:	e784      	b.n	800063e <__aeabi_fadd+0x136>
 8000734:	4a41      	ldr	r2, [pc, #260]	; (800083c <__aeabi_fadd+0x334>)
 8000736:	1a3f      	subs	r7, r7, r0
 8000738:	4032      	ands	r2, r6
 800073a:	e732      	b.n	80005a2 <__aeabi_fadd+0x9a>
 800073c:	4653      	mov	r3, sl
 800073e:	1b5e      	subs	r6, r3, r5
 8000740:	0173      	lsls	r3, r6, #5
 8000742:	d42d      	bmi.n	80007a0 <__aeabi_fadd+0x298>
 8000744:	2e00      	cmp	r6, #0
 8000746:	d000      	beq.n	800074a <__aeabi_fadd+0x242>
 8000748:	e717      	b.n	800057a <__aeabi_fadd+0x72>
 800074a:	2200      	movs	r2, #0
 800074c:	2400      	movs	r4, #0
 800074e:	2300      	movs	r3, #0
 8000750:	4694      	mov	ip, r2
 8000752:	e738      	b.n	80005c6 <__aeabi_fadd+0xbe>
 8000754:	2eff      	cmp	r6, #255	; 0xff
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x252>
 8000758:	e74f      	b.n	80005fa <__aeabi_fadd+0xf2>
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	4650      	mov	r0, sl
 800075e:	04d2      	lsls	r2, r2, #19
 8000760:	4310      	orrs	r0, r2
 8000762:	4682      	mov	sl, r0
 8000764:	2201      	movs	r2, #1
 8000766:	2b1b      	cmp	r3, #27
 8000768:	dc08      	bgt.n	800077c <__aeabi_fadd+0x274>
 800076a:	4652      	mov	r2, sl
 800076c:	2420      	movs	r4, #32
 800076e:	4650      	mov	r0, sl
 8000770:	40da      	lsrs	r2, r3
 8000772:	1ae3      	subs	r3, r4, r3
 8000774:	4098      	lsls	r0, r3
 8000776:	1e43      	subs	r3, r0, #1
 8000778:	4198      	sbcs	r0, r3
 800077a:	4302      	orrs	r2, r0
 800077c:	000c      	movs	r4, r1
 800077e:	0037      	movs	r7, r6
 8000780:	1aaa      	subs	r2, r5, r2
 8000782:	e6f5      	b.n	8000570 <__aeabi_fadd+0x68>
 8000784:	2800      	cmp	r0, #0
 8000786:	d093      	beq.n	80006b0 <__aeabi_fadd+0x1a8>
 8000788:	3b01      	subs	r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	d04f      	beq.n	800082e <__aeabi_fadd+0x326>
 800078e:	2eff      	cmp	r6, #255	; 0xff
 8000790:	d1c1      	bne.n	8000716 <__aeabi_fadd+0x20e>
 8000792:	4642      	mov	r2, r8
 8000794:	e733      	b.n	80005fe <__aeabi_fadd+0xf6>
 8000796:	2fff      	cmp	r7, #255	; 0xff
 8000798:	d0ac      	beq.n	80006f4 <__aeabi_fadd+0x1ec>
 800079a:	4455      	add	r5, sl
 800079c:	086a      	lsrs	r2, r5, #1
 800079e:	e7a4      	b.n	80006ea <__aeabi_fadd+0x1e2>
 80007a0:	4653      	mov	r3, sl
 80007a2:	000c      	movs	r4, r1
 80007a4:	1aee      	subs	r6, r5, r3
 80007a6:	e6e8      	b.n	800057a <__aeabi_fadd+0x72>
 80007a8:	4653      	mov	r3, sl
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d128      	bne.n	8000800 <__aeabi_fadd+0x2f8>
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x2ac>
 80007b2:	e722      	b.n	80005fa <__aeabi_fadd+0xf2>
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	03db      	lsls	r3, r3, #15
 80007b8:	469c      	mov	ip, r3
 80007ba:	2400      	movs	r4, #0
 80007bc:	23ff      	movs	r3, #255	; 0xff
 80007be:	e702      	b.n	80005c6 <__aeabi_fadd+0xbe>
 80007c0:	002a      	movs	r2, r5
 80007c2:	4452      	add	r2, sl
 80007c4:	e73b      	b.n	800063e <__aeabi_fadd+0x136>
 80007c6:	4653      	mov	r3, sl
 80007c8:	1b5a      	subs	r2, r3, r5
 80007ca:	e6d1      	b.n	8000570 <__aeabi_fadd+0x68>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fadd+0x2ca>
 80007d0:	e714      	b.n	80005fc <__aeabi_fadd+0xf4>
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x2d0>
 80007d6:	e712      	b.n	80005fe <__aeabi_fadd+0xf6>
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	03db      	lsls	r3, r3, #15
 80007dc:	421a      	tst	r2, r3
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x2da>
 80007e0:	e70d      	b.n	80005fe <__aeabi_fadd+0xf6>
 80007e2:	4641      	mov	r1, r8
 80007e4:	4219      	tst	r1, r3
 80007e6:	d000      	beq.n	80007ea <__aeabi_fadd+0x2e2>
 80007e8:	e709      	b.n	80005fe <__aeabi_fadd+0xf6>
 80007ea:	4642      	mov	r2, r8
 80007ec:	e707      	b.n	80005fe <__aeabi_fadd+0xf6>
 80007ee:	000c      	movs	r4, r1
 80007f0:	0037      	movs	r7, r6
 80007f2:	1aaa      	subs	r2, r5, r2
 80007f4:	e6bc      	b.n	8000570 <__aeabi_fadd+0x68>
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	d013      	beq.n	8000822 <__aeabi_fadd+0x31a>
 80007fa:	000c      	movs	r4, r1
 80007fc:	46c4      	mov	ip, r8
 80007fe:	e6e2      	b.n	80005c6 <__aeabi_fadd+0xbe>
 8000800:	2d00      	cmp	r5, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0x2fe>
 8000804:	e6fb      	b.n	80005fe <__aeabi_fadd+0xf6>
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	03db      	lsls	r3, r3, #15
 800080a:	421a      	tst	r2, r3
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x308>
 800080e:	e6f6      	b.n	80005fe <__aeabi_fadd+0xf6>
 8000810:	4640      	mov	r0, r8
 8000812:	4218      	tst	r0, r3
 8000814:	d000      	beq.n	8000818 <__aeabi_fadd+0x310>
 8000816:	e6f2      	b.n	80005fe <__aeabi_fadd+0xf6>
 8000818:	000c      	movs	r4, r1
 800081a:	e6ef      	b.n	80005fc <__aeabi_fadd+0xf4>
 800081c:	2a00      	cmp	r2, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0x31a>
 8000820:	e763      	b.n	80006ea <__aeabi_fadd+0x1e2>
 8000822:	2200      	movs	r2, #0
 8000824:	2400      	movs	r4, #0
 8000826:	4694      	mov	ip, r2
 8000828:	e6cd      	b.n	80005c6 <__aeabi_fadd+0xbe>
 800082a:	46c4      	mov	ip, r8
 800082c:	e6cb      	b.n	80005c6 <__aeabi_fadd+0xbe>
 800082e:	002a      	movs	r2, r5
 8000830:	0037      	movs	r7, r6
 8000832:	4452      	add	r2, sl
 8000834:	e703      	b.n	800063e <__aeabi_fadd+0x136>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	7dffffff 	.word	0x7dffffff
 800083c:	fbffffff 	.word	0xfbffffff

08000840 <__eqsf2>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	0042      	lsls	r2, r0, #1
 8000844:	024e      	lsls	r6, r1, #9
 8000846:	004c      	lsls	r4, r1, #1
 8000848:	0245      	lsls	r5, r0, #9
 800084a:	0a6d      	lsrs	r5, r5, #9
 800084c:	0e12      	lsrs	r2, r2, #24
 800084e:	0fc3      	lsrs	r3, r0, #31
 8000850:	0a76      	lsrs	r6, r6, #9
 8000852:	0e24      	lsrs	r4, r4, #24
 8000854:	0fc9      	lsrs	r1, r1, #31
 8000856:	2aff      	cmp	r2, #255	; 0xff
 8000858:	d00f      	beq.n	800087a <__eqsf2+0x3a>
 800085a:	2cff      	cmp	r4, #255	; 0xff
 800085c:	d011      	beq.n	8000882 <__eqsf2+0x42>
 800085e:	2001      	movs	r0, #1
 8000860:	42a2      	cmp	r2, r4
 8000862:	d000      	beq.n	8000866 <__eqsf2+0x26>
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	42b5      	cmp	r5, r6
 8000868:	d1fc      	bne.n	8000864 <__eqsf2+0x24>
 800086a:	428b      	cmp	r3, r1
 800086c:	d00d      	beq.n	800088a <__eqsf2+0x4a>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d1f8      	bne.n	8000864 <__eqsf2+0x24>
 8000872:	0028      	movs	r0, r5
 8000874:	1e45      	subs	r5, r0, #1
 8000876:	41a8      	sbcs	r0, r5
 8000878:	e7f4      	b.n	8000864 <__eqsf2+0x24>
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d1f1      	bne.n	8000864 <__eqsf2+0x24>
 8000880:	e7eb      	b.n	800085a <__eqsf2+0x1a>
 8000882:	2001      	movs	r0, #1
 8000884:	2e00      	cmp	r6, #0
 8000886:	d1ed      	bne.n	8000864 <__eqsf2+0x24>
 8000888:	e7e9      	b.n	800085e <__eqsf2+0x1e>
 800088a:	2000      	movs	r0, #0
 800088c:	e7ea      	b.n	8000864 <__eqsf2+0x24>
 800088e:	46c0      	nop			; (mov r8, r8)

08000890 <__gesf2>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	0042      	lsls	r2, r0, #1
 8000894:	0246      	lsls	r6, r0, #9
 8000896:	024d      	lsls	r5, r1, #9
 8000898:	004c      	lsls	r4, r1, #1
 800089a:	0fc3      	lsrs	r3, r0, #31
 800089c:	0a76      	lsrs	r6, r6, #9
 800089e:	0e12      	lsrs	r2, r2, #24
 80008a0:	0a6d      	lsrs	r5, r5, #9
 80008a2:	0e24      	lsrs	r4, r4, #24
 80008a4:	0fc8      	lsrs	r0, r1, #31
 80008a6:	2aff      	cmp	r2, #255	; 0xff
 80008a8:	d01f      	beq.n	80008ea <__gesf2+0x5a>
 80008aa:	2cff      	cmp	r4, #255	; 0xff
 80008ac:	d010      	beq.n	80008d0 <__gesf2+0x40>
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d11f      	bne.n	80008f2 <__gesf2+0x62>
 80008b2:	4271      	negs	r1, r6
 80008b4:	4171      	adcs	r1, r6
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d101      	bne.n	80008be <__gesf2+0x2e>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d01e      	beq.n	80008fc <__gesf2+0x6c>
 80008be:	2900      	cmp	r1, #0
 80008c0:	d10e      	bne.n	80008e0 <__gesf2+0x50>
 80008c2:	4283      	cmp	r3, r0
 80008c4:	d01e      	beq.n	8000904 <__gesf2+0x74>
 80008c6:	2102      	movs	r1, #2
 80008c8:	1e58      	subs	r0, r3, #1
 80008ca:	4008      	ands	r0, r1
 80008cc:	3801      	subs	r0, #1
 80008ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d126      	bne.n	8000922 <__gesf2+0x92>
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	d1f4      	bne.n	80008c2 <__gesf2+0x32>
 80008d8:	4271      	negs	r1, r6
 80008da:	4171      	adcs	r1, r6
 80008dc:	2900      	cmp	r1, #0
 80008de:	d0f0      	beq.n	80008c2 <__gesf2+0x32>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d1f4      	bne.n	80008ce <__gesf2+0x3e>
 80008e4:	2001      	movs	r0, #1
 80008e6:	4240      	negs	r0, r0
 80008e8:	e7f1      	b.n	80008ce <__gesf2+0x3e>
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d119      	bne.n	8000922 <__gesf2+0x92>
 80008ee:	2cff      	cmp	r4, #255	; 0xff
 80008f0:	d0ee      	beq.n	80008d0 <__gesf2+0x40>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d1e5      	bne.n	80008c2 <__gesf2+0x32>
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d1e3      	bne.n	80008c2 <__gesf2+0x32>
 80008fa:	e7e4      	b.n	80008c6 <__gesf2+0x36>
 80008fc:	2000      	movs	r0, #0
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d0e5      	beq.n	80008ce <__gesf2+0x3e>
 8000902:	e7e0      	b.n	80008c6 <__gesf2+0x36>
 8000904:	42a2      	cmp	r2, r4
 8000906:	dc05      	bgt.n	8000914 <__gesf2+0x84>
 8000908:	dbea      	blt.n	80008e0 <__gesf2+0x50>
 800090a:	42ae      	cmp	r6, r5
 800090c:	d802      	bhi.n	8000914 <__gesf2+0x84>
 800090e:	d3e7      	bcc.n	80008e0 <__gesf2+0x50>
 8000910:	2000      	movs	r0, #0
 8000912:	e7dc      	b.n	80008ce <__gesf2+0x3e>
 8000914:	4241      	negs	r1, r0
 8000916:	4141      	adcs	r1, r0
 8000918:	4248      	negs	r0, r1
 800091a:	2102      	movs	r1, #2
 800091c:	4008      	ands	r0, r1
 800091e:	3801      	subs	r0, #1
 8000920:	e7d5      	b.n	80008ce <__gesf2+0x3e>
 8000922:	2002      	movs	r0, #2
 8000924:	4240      	negs	r0, r0
 8000926:	e7d2      	b.n	80008ce <__gesf2+0x3e>

08000928 <__lesf2>:
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092a:	0042      	lsls	r2, r0, #1
 800092c:	0246      	lsls	r6, r0, #9
 800092e:	024d      	lsls	r5, r1, #9
 8000930:	004c      	lsls	r4, r1, #1
 8000932:	0fc3      	lsrs	r3, r0, #31
 8000934:	0a76      	lsrs	r6, r6, #9
 8000936:	0e12      	lsrs	r2, r2, #24
 8000938:	0a6d      	lsrs	r5, r5, #9
 800093a:	0e24      	lsrs	r4, r4, #24
 800093c:	0fc8      	lsrs	r0, r1, #31
 800093e:	2aff      	cmp	r2, #255	; 0xff
 8000940:	d00d      	beq.n	800095e <__lesf2+0x36>
 8000942:	2cff      	cmp	r4, #255	; 0xff
 8000944:	d00f      	beq.n	8000966 <__lesf2+0x3e>
 8000946:	2a00      	cmp	r2, #0
 8000948:	d123      	bne.n	8000992 <__lesf2+0x6a>
 800094a:	4271      	negs	r1, r6
 800094c:	4171      	adcs	r1, r6
 800094e:	2c00      	cmp	r4, #0
 8000950:	d10f      	bne.n	8000972 <__lesf2+0x4a>
 8000952:	2d00      	cmp	r5, #0
 8000954:	d10d      	bne.n	8000972 <__lesf2+0x4a>
 8000956:	2000      	movs	r0, #0
 8000958:	2e00      	cmp	r6, #0
 800095a:	d014      	beq.n	8000986 <__lesf2+0x5e>
 800095c:	e00d      	b.n	800097a <__lesf2+0x52>
 800095e:	2e00      	cmp	r6, #0
 8000960:	d110      	bne.n	8000984 <__lesf2+0x5c>
 8000962:	2cff      	cmp	r4, #255	; 0xff
 8000964:	d115      	bne.n	8000992 <__lesf2+0x6a>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d10c      	bne.n	8000984 <__lesf2+0x5c>
 800096a:	2a00      	cmp	r2, #0
 800096c:	d103      	bne.n	8000976 <__lesf2+0x4e>
 800096e:	4271      	negs	r1, r6
 8000970:	4171      	adcs	r1, r6
 8000972:	2900      	cmp	r1, #0
 8000974:	d108      	bne.n	8000988 <__lesf2+0x60>
 8000976:	4283      	cmp	r3, r0
 8000978:	d010      	beq.n	800099c <__lesf2+0x74>
 800097a:	2102      	movs	r1, #2
 800097c:	1e58      	subs	r0, r3, #1
 800097e:	4008      	ands	r0, r1
 8000980:	3801      	subs	r0, #1
 8000982:	e000      	b.n	8000986 <__lesf2+0x5e>
 8000984:	2002      	movs	r0, #2
 8000986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000988:	2800      	cmp	r0, #0
 800098a:	d1fc      	bne.n	8000986 <__lesf2+0x5e>
 800098c:	2001      	movs	r0, #1
 800098e:	4240      	negs	r0, r0
 8000990:	e7f9      	b.n	8000986 <__lesf2+0x5e>
 8000992:	2c00      	cmp	r4, #0
 8000994:	d1ef      	bne.n	8000976 <__lesf2+0x4e>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d1ed      	bne.n	8000976 <__lesf2+0x4e>
 800099a:	e7ee      	b.n	800097a <__lesf2+0x52>
 800099c:	42a2      	cmp	r2, r4
 800099e:	dc05      	bgt.n	80009ac <__lesf2+0x84>
 80009a0:	dbf2      	blt.n	8000988 <__lesf2+0x60>
 80009a2:	42ae      	cmp	r6, r5
 80009a4:	d802      	bhi.n	80009ac <__lesf2+0x84>
 80009a6:	d3ef      	bcc.n	8000988 <__lesf2+0x60>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7ec      	b.n	8000986 <__lesf2+0x5e>
 80009ac:	4241      	negs	r1, r0
 80009ae:	4141      	adcs	r1, r0
 80009b0:	4248      	negs	r0, r1
 80009b2:	2102      	movs	r1, #2
 80009b4:	4008      	ands	r0, r1
 80009b6:	3801      	subs	r0, #1
 80009b8:	e7e5      	b.n	8000986 <__lesf2+0x5e>
 80009ba:	46c0      	nop			; (mov r8, r8)

080009bc <__aeabi_fmul>:
 80009bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009be:	4657      	mov	r7, sl
 80009c0:	464e      	mov	r6, r9
 80009c2:	4645      	mov	r5, r8
 80009c4:	46de      	mov	lr, fp
 80009c6:	0244      	lsls	r4, r0, #9
 80009c8:	b5e0      	push	{r5, r6, r7, lr}
 80009ca:	0045      	lsls	r5, r0, #1
 80009cc:	1c0f      	adds	r7, r1, #0
 80009ce:	0a64      	lsrs	r4, r4, #9
 80009d0:	0e2d      	lsrs	r5, r5, #24
 80009d2:	0fc6      	lsrs	r6, r0, #31
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d047      	beq.n	8000a68 <__aeabi_fmul+0xac>
 80009d8:	2dff      	cmp	r5, #255	; 0xff
 80009da:	d04d      	beq.n	8000a78 <__aeabi_fmul+0xbc>
 80009dc:	2300      	movs	r3, #0
 80009de:	2080      	movs	r0, #128	; 0x80
 80009e0:	469a      	mov	sl, r3
 80009e2:	469b      	mov	fp, r3
 80009e4:	00e4      	lsls	r4, r4, #3
 80009e6:	04c0      	lsls	r0, r0, #19
 80009e8:	4304      	orrs	r4, r0
 80009ea:	3d7f      	subs	r5, #127	; 0x7f
 80009ec:	0278      	lsls	r0, r7, #9
 80009ee:	0a43      	lsrs	r3, r0, #9
 80009f0:	4699      	mov	r9, r3
 80009f2:	007a      	lsls	r2, r7, #1
 80009f4:	0ffb      	lsrs	r3, r7, #31
 80009f6:	4698      	mov	r8, r3
 80009f8:	0e12      	lsrs	r2, r2, #24
 80009fa:	464b      	mov	r3, r9
 80009fc:	d044      	beq.n	8000a88 <__aeabi_fmul+0xcc>
 80009fe:	2aff      	cmp	r2, #255	; 0xff
 8000a00:	d011      	beq.n	8000a26 <__aeabi_fmul+0x6a>
 8000a02:	00d8      	lsls	r0, r3, #3
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	04db      	lsls	r3, r3, #19
 8000a08:	4303      	orrs	r3, r0
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	3a7f      	subs	r2, #127	; 0x7f
 8000a10:	18ad      	adds	r5, r5, r2
 8000a12:	4647      	mov	r7, r8
 8000a14:	4653      	mov	r3, sl
 8000a16:	4077      	eors	r7, r6
 8000a18:	1c69      	adds	r1, r5, #1
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d83f      	bhi.n	8000a9e <__aeabi_fmul+0xe2>
 8000a1e:	4a72      	ldr	r2, [pc, #456]	; (8000be8 <__aeabi_fmul+0x22c>)
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	58d3      	ldr	r3, [r2, r3]
 8000a24:	469f      	mov	pc, r3
 8000a26:	35ff      	adds	r5, #255	; 0xff
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fmul+0x72>
 8000a2c:	e079      	b.n	8000b22 <__aeabi_fmul+0x166>
 8000a2e:	4652      	mov	r2, sl
 8000a30:	2302      	movs	r3, #2
 8000a32:	431a      	orrs	r2, r3
 8000a34:	4692      	mov	sl, r2
 8000a36:	2002      	movs	r0, #2
 8000a38:	e7eb      	b.n	8000a12 <__aeabi_fmul+0x56>
 8000a3a:	4647      	mov	r7, r8
 8000a3c:	464c      	mov	r4, r9
 8000a3e:	4683      	mov	fp, r0
 8000a40:	465b      	mov	r3, fp
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d028      	beq.n	8000a98 <__aeabi_fmul+0xdc>
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d100      	bne.n	8000a4c <__aeabi_fmul+0x90>
 8000a4a:	e0c6      	b.n	8000bda <__aeabi_fmul+0x21e>
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d14f      	bne.n	8000af0 <__aeabi_fmul+0x134>
 8000a50:	2000      	movs	r0, #0
 8000a52:	2400      	movs	r4, #0
 8000a54:	05c0      	lsls	r0, r0, #23
 8000a56:	07ff      	lsls	r7, r7, #31
 8000a58:	4320      	orrs	r0, r4
 8000a5a:	4338      	orrs	r0, r7
 8000a5c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a5e:	46bb      	mov	fp, r7
 8000a60:	46b2      	mov	sl, r6
 8000a62:	46a9      	mov	r9, r5
 8000a64:	46a0      	mov	r8, r4
 8000a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a68:	2c00      	cmp	r4, #0
 8000a6a:	d171      	bne.n	8000b50 <__aeabi_fmul+0x194>
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	469a      	mov	sl, r3
 8000a70:	3b03      	subs	r3, #3
 8000a72:	2500      	movs	r5, #0
 8000a74:	469b      	mov	fp, r3
 8000a76:	e7b9      	b.n	80009ec <__aeabi_fmul+0x30>
 8000a78:	2c00      	cmp	r4, #0
 8000a7a:	d163      	bne.n	8000b44 <__aeabi_fmul+0x188>
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	469a      	mov	sl, r3
 8000a80:	3b06      	subs	r3, #6
 8000a82:	25ff      	movs	r5, #255	; 0xff
 8000a84:	469b      	mov	fp, r3
 8000a86:	e7b1      	b.n	80009ec <__aeabi_fmul+0x30>
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d150      	bne.n	8000b2e <__aeabi_fmul+0x172>
 8000a8c:	4652      	mov	r2, sl
 8000a8e:	3301      	adds	r3, #1
 8000a90:	431a      	orrs	r2, r3
 8000a92:	4692      	mov	sl, r2
 8000a94:	2001      	movs	r0, #1
 8000a96:	e7bc      	b.n	8000a12 <__aeabi_fmul+0x56>
 8000a98:	20ff      	movs	r0, #255	; 0xff
 8000a9a:	2400      	movs	r4, #0
 8000a9c:	e7da      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000a9e:	4648      	mov	r0, r9
 8000aa0:	0c26      	lsrs	r6, r4, #16
 8000aa2:	0424      	lsls	r4, r4, #16
 8000aa4:	0c22      	lsrs	r2, r4, #16
 8000aa6:	0404      	lsls	r4, r0, #16
 8000aa8:	0c24      	lsrs	r4, r4, #16
 8000aaa:	464b      	mov	r3, r9
 8000aac:	0020      	movs	r0, r4
 8000aae:	0c1b      	lsrs	r3, r3, #16
 8000ab0:	4350      	muls	r0, r2
 8000ab2:	4374      	muls	r4, r6
 8000ab4:	435a      	muls	r2, r3
 8000ab6:	435e      	muls	r6, r3
 8000ab8:	1912      	adds	r2, r2, r4
 8000aba:	0c03      	lsrs	r3, r0, #16
 8000abc:	189b      	adds	r3, r3, r2
 8000abe:	429c      	cmp	r4, r3
 8000ac0:	d903      	bls.n	8000aca <__aeabi_fmul+0x10e>
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	0252      	lsls	r2, r2, #9
 8000ac6:	4694      	mov	ip, r2
 8000ac8:	4466      	add	r6, ip
 8000aca:	0400      	lsls	r0, r0, #16
 8000acc:	041a      	lsls	r2, r3, #16
 8000ace:	0c00      	lsrs	r0, r0, #16
 8000ad0:	1812      	adds	r2, r2, r0
 8000ad2:	0194      	lsls	r4, r2, #6
 8000ad4:	1e60      	subs	r0, r4, #1
 8000ad6:	4184      	sbcs	r4, r0
 8000ad8:	0c1b      	lsrs	r3, r3, #16
 8000ada:	0e92      	lsrs	r2, r2, #26
 8000adc:	199b      	adds	r3, r3, r6
 8000ade:	4314      	orrs	r4, r2
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	d572      	bpl.n	8000bce <__aeabi_fmul+0x212>
 8000ae8:	2001      	movs	r0, #1
 8000aea:	0863      	lsrs	r3, r4, #1
 8000aec:	4004      	ands	r4, r0
 8000aee:	431c      	orrs	r4, r3
 8000af0:	0008      	movs	r0, r1
 8000af2:	307f      	adds	r0, #127	; 0x7f
 8000af4:	2800      	cmp	r0, #0
 8000af6:	dd3c      	ble.n	8000b72 <__aeabi_fmul+0x1b6>
 8000af8:	0763      	lsls	r3, r4, #29
 8000afa:	d004      	beq.n	8000b06 <__aeabi_fmul+0x14a>
 8000afc:	230f      	movs	r3, #15
 8000afe:	4023      	ands	r3, r4
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fmul+0x14a>
 8000b04:	3404      	adds	r4, #4
 8000b06:	0123      	lsls	r3, r4, #4
 8000b08:	d503      	bpl.n	8000b12 <__aeabi_fmul+0x156>
 8000b0a:	3180      	adds	r1, #128	; 0x80
 8000b0c:	0008      	movs	r0, r1
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <__aeabi_fmul+0x230>)
 8000b10:	401c      	ands	r4, r3
 8000b12:	28fe      	cmp	r0, #254	; 0xfe
 8000b14:	dcc0      	bgt.n	8000a98 <__aeabi_fmul+0xdc>
 8000b16:	01a4      	lsls	r4, r4, #6
 8000b18:	0a64      	lsrs	r4, r4, #9
 8000b1a:	b2c0      	uxtb	r0, r0
 8000b1c:	e79a      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000b1e:	0037      	movs	r7, r6
 8000b20:	e78e      	b.n	8000a40 <__aeabi_fmul+0x84>
 8000b22:	4652      	mov	r2, sl
 8000b24:	2303      	movs	r3, #3
 8000b26:	431a      	orrs	r2, r3
 8000b28:	4692      	mov	sl, r2
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	e771      	b.n	8000a12 <__aeabi_fmul+0x56>
 8000b2e:	4648      	mov	r0, r9
 8000b30:	f001 fc9a 	bl	8002468 <__clzsi2>
 8000b34:	464a      	mov	r2, r9
 8000b36:	1f43      	subs	r3, r0, #5
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	1a2d      	subs	r5, r5, r0
 8000b3c:	4691      	mov	r9, r2
 8000b3e:	2000      	movs	r0, #0
 8000b40:	3d76      	subs	r5, #118	; 0x76
 8000b42:	e766      	b.n	8000a12 <__aeabi_fmul+0x56>
 8000b44:	230c      	movs	r3, #12
 8000b46:	469a      	mov	sl, r3
 8000b48:	3b09      	subs	r3, #9
 8000b4a:	25ff      	movs	r5, #255	; 0xff
 8000b4c:	469b      	mov	fp, r3
 8000b4e:	e74d      	b.n	80009ec <__aeabi_fmul+0x30>
 8000b50:	0020      	movs	r0, r4
 8000b52:	f001 fc89 	bl	8002468 <__clzsi2>
 8000b56:	2576      	movs	r5, #118	; 0x76
 8000b58:	1f43      	subs	r3, r0, #5
 8000b5a:	409c      	lsls	r4, r3
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	426d      	negs	r5, r5
 8000b60:	469a      	mov	sl, r3
 8000b62:	469b      	mov	fp, r3
 8000b64:	1a2d      	subs	r5, r5, r0
 8000b66:	e741      	b.n	80009ec <__aeabi_fmul+0x30>
 8000b68:	2480      	movs	r4, #128	; 0x80
 8000b6a:	2700      	movs	r7, #0
 8000b6c:	20ff      	movs	r0, #255	; 0xff
 8000b6e:	03e4      	lsls	r4, r4, #15
 8000b70:	e770      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000b72:	2301      	movs	r3, #1
 8000b74:	1a1b      	subs	r3, r3, r0
 8000b76:	2b1b      	cmp	r3, #27
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_fmul+0x1c0>
 8000b7a:	e769      	b.n	8000a50 <__aeabi_fmul+0x94>
 8000b7c:	319e      	adds	r1, #158	; 0x9e
 8000b7e:	0020      	movs	r0, r4
 8000b80:	408c      	lsls	r4, r1
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	1e63      	subs	r3, r4, #1
 8000b86:	419c      	sbcs	r4, r3
 8000b88:	4304      	orrs	r4, r0
 8000b8a:	0763      	lsls	r3, r4, #29
 8000b8c:	d004      	beq.n	8000b98 <__aeabi_fmul+0x1dc>
 8000b8e:	230f      	movs	r3, #15
 8000b90:	4023      	ands	r3, r4
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d000      	beq.n	8000b98 <__aeabi_fmul+0x1dc>
 8000b96:	3404      	adds	r4, #4
 8000b98:	0163      	lsls	r3, r4, #5
 8000b9a:	d51a      	bpl.n	8000bd2 <__aeabi_fmul+0x216>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	2400      	movs	r4, #0
 8000ba0:	e758      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000ba2:	2080      	movs	r0, #128	; 0x80
 8000ba4:	03c0      	lsls	r0, r0, #15
 8000ba6:	4204      	tst	r4, r0
 8000ba8:	d009      	beq.n	8000bbe <__aeabi_fmul+0x202>
 8000baa:	464b      	mov	r3, r9
 8000bac:	4203      	tst	r3, r0
 8000bae:	d106      	bne.n	8000bbe <__aeabi_fmul+0x202>
 8000bb0:	464c      	mov	r4, r9
 8000bb2:	4304      	orrs	r4, r0
 8000bb4:	0264      	lsls	r4, r4, #9
 8000bb6:	4647      	mov	r7, r8
 8000bb8:	20ff      	movs	r0, #255	; 0xff
 8000bba:	0a64      	lsrs	r4, r4, #9
 8000bbc:	e74a      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000bbe:	2080      	movs	r0, #128	; 0x80
 8000bc0:	03c0      	lsls	r0, r0, #15
 8000bc2:	4304      	orrs	r4, r0
 8000bc4:	0264      	lsls	r4, r4, #9
 8000bc6:	0037      	movs	r7, r6
 8000bc8:	20ff      	movs	r0, #255	; 0xff
 8000bca:	0a64      	lsrs	r4, r4, #9
 8000bcc:	e742      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000bce:	0029      	movs	r1, r5
 8000bd0:	e78e      	b.n	8000af0 <__aeabi_fmul+0x134>
 8000bd2:	01a4      	lsls	r4, r4, #6
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	0a64      	lsrs	r4, r4, #9
 8000bd8:	e73c      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	03c0      	lsls	r0, r0, #15
 8000bde:	4304      	orrs	r4, r0
 8000be0:	0264      	lsls	r4, r4, #9
 8000be2:	20ff      	movs	r0, #255	; 0xff
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	e735      	b.n	8000a54 <__aeabi_fmul+0x98>
 8000be8:	08014048 	.word	0x08014048
 8000bec:	f7ffffff 	.word	0xf7ffffff

08000bf0 <__aeabi_fsub>:
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	4646      	mov	r6, r8
 8000bf4:	46d6      	mov	lr, sl
 8000bf6:	464f      	mov	r7, r9
 8000bf8:	0243      	lsls	r3, r0, #9
 8000bfa:	0a5b      	lsrs	r3, r3, #9
 8000bfc:	00da      	lsls	r2, r3, #3
 8000bfe:	4694      	mov	ip, r2
 8000c00:	024a      	lsls	r2, r1, #9
 8000c02:	b5c0      	push	{r6, r7, lr}
 8000c04:	0044      	lsls	r4, r0, #1
 8000c06:	0a56      	lsrs	r6, r2, #9
 8000c08:	1c05      	adds	r5, r0, #0
 8000c0a:	46b0      	mov	r8, r6
 8000c0c:	0e24      	lsrs	r4, r4, #24
 8000c0e:	004e      	lsls	r6, r1, #1
 8000c10:	0992      	lsrs	r2, r2, #6
 8000c12:	001f      	movs	r7, r3
 8000c14:	0020      	movs	r0, r4
 8000c16:	4692      	mov	sl, r2
 8000c18:	0fed      	lsrs	r5, r5, #31
 8000c1a:	0e36      	lsrs	r6, r6, #24
 8000c1c:	0fc9      	lsrs	r1, r1, #31
 8000c1e:	2eff      	cmp	r6, #255	; 0xff
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x34>
 8000c22:	e07f      	b.n	8000d24 <__aeabi_fsub+0x134>
 8000c24:	2201      	movs	r2, #1
 8000c26:	4051      	eors	r1, r2
 8000c28:	428d      	cmp	r5, r1
 8000c2a:	d051      	beq.n	8000cd0 <__aeabi_fsub+0xe0>
 8000c2c:	1ba2      	subs	r2, r4, r6
 8000c2e:	4691      	mov	r9, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	dc00      	bgt.n	8000c36 <__aeabi_fsub+0x46>
 8000c34:	e07e      	b.n	8000d34 <__aeabi_fsub+0x144>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x4c>
 8000c3a:	e099      	b.n	8000d70 <__aeabi_fsub+0x180>
 8000c3c:	2cff      	cmp	r4, #255	; 0xff
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_fsub+0x52>
 8000c40:	e08c      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	4652      	mov	r2, sl
 8000c46:	04db      	lsls	r3, r3, #19
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	4692      	mov	sl, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2a1b      	cmp	r2, #27
 8000c52:	dc08      	bgt.n	8000c66 <__aeabi_fsub+0x76>
 8000c54:	4653      	mov	r3, sl
 8000c56:	2120      	movs	r1, #32
 8000c58:	40d3      	lsrs	r3, r2
 8000c5a:	1a89      	subs	r1, r1, r2
 8000c5c:	4652      	mov	r2, sl
 8000c5e:	408a      	lsls	r2, r1
 8000c60:	1e51      	subs	r1, r2, #1
 8000c62:	418a      	sbcs	r2, r1
 8000c64:	4313      	orrs	r3, r2
 8000c66:	4662      	mov	r2, ip
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	015a      	lsls	r2, r3, #5
 8000c6c:	d400      	bmi.n	8000c70 <__aeabi_fsub+0x80>
 8000c6e:	e0f3      	b.n	8000e58 <__aeabi_fsub+0x268>
 8000c70:	019b      	lsls	r3, r3, #6
 8000c72:	099e      	lsrs	r6, r3, #6
 8000c74:	0030      	movs	r0, r6
 8000c76:	f001 fbf7 	bl	8002468 <__clzsi2>
 8000c7a:	3805      	subs	r0, #5
 8000c7c:	4086      	lsls	r6, r0
 8000c7e:	4284      	cmp	r4, r0
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_fsub+0x94>
 8000c82:	e0f7      	b.n	8000e74 <__aeabi_fsub+0x284>
 8000c84:	0032      	movs	r2, r6
 8000c86:	1b04      	subs	r4, r0, r4
 8000c88:	2020      	movs	r0, #32
 8000c8a:	3401      	adds	r4, #1
 8000c8c:	40e2      	lsrs	r2, r4
 8000c8e:	1b04      	subs	r4, r0, r4
 8000c90:	40a6      	lsls	r6, r4
 8000c92:	0033      	movs	r3, r6
 8000c94:	1e5e      	subs	r6, r3, #1
 8000c96:	41b3      	sbcs	r3, r6
 8000c98:	2400      	movs	r4, #0
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	075a      	lsls	r2, r3, #29
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fsub+0xba>
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	2a04      	cmp	r2, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0xba>
 8000ca8:	3304      	adds	r3, #4
 8000caa:	015a      	lsls	r2, r3, #5
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_fsub+0xc0>
 8000cae:	e0d6      	b.n	8000e5e <__aeabi_fsub+0x26e>
 8000cb0:	1c62      	adds	r2, r4, #1
 8000cb2:	2cfe      	cmp	r4, #254	; 0xfe
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0xc8>
 8000cb6:	e0da      	b.n	8000e6e <__aeabi_fsub+0x27e>
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	0a5f      	lsrs	r7, r3, #9
 8000cbc:	b2d0      	uxtb	r0, r2
 8000cbe:	05c0      	lsls	r0, r0, #23
 8000cc0:	4338      	orrs	r0, r7
 8000cc2:	07ed      	lsls	r5, r5, #31
 8000cc4:	4328      	orrs	r0, r5
 8000cc6:	bce0      	pop	{r5, r6, r7}
 8000cc8:	46ba      	mov	sl, r7
 8000cca:	46b1      	mov	r9, r6
 8000ccc:	46a8      	mov	r8, r5
 8000cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd0:	1ba2      	subs	r2, r4, r6
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	dd63      	ble.n	8000da0 <__aeabi_fsub+0x1b0>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d100      	bne.n	8000cde <__aeabi_fsub+0xee>
 8000cdc:	e099      	b.n	8000e12 <__aeabi_fsub+0x222>
 8000cde:	2cff      	cmp	r4, #255	; 0xff
 8000ce0:	d03c      	beq.n	8000d5c <__aeabi_fsub+0x16c>
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	04db      	lsls	r3, r3, #19
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4692      	mov	sl, r2
 8000cec:	464a      	mov	r2, r9
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2a1b      	cmp	r2, #27
 8000cf2:	dc08      	bgt.n	8000d06 <__aeabi_fsub+0x116>
 8000cf4:	4653      	mov	r3, sl
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	40d3      	lsrs	r3, r2
 8000cfa:	1a89      	subs	r1, r1, r2
 8000cfc:	4652      	mov	r2, sl
 8000cfe:	408a      	lsls	r2, r1
 8000d00:	1e51      	subs	r1, r2, #1
 8000d02:	418a      	sbcs	r2, r1
 8000d04:	4313      	orrs	r3, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	015a      	lsls	r2, r3, #5
 8000d0a:	d400      	bmi.n	8000d0e <__aeabi_fsub+0x11e>
 8000d0c:	e0a4      	b.n	8000e58 <__aeabi_fsub+0x268>
 8000d0e:	3401      	adds	r4, #1
 8000d10:	2cff      	cmp	r4, #255	; 0xff
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x126>
 8000d14:	e0ab      	b.n	8000e6e <__aeabi_fsub+0x27e>
 8000d16:	2201      	movs	r2, #1
 8000d18:	4997      	ldr	r1, [pc, #604]	; (8000f78 <__aeabi_fsub+0x388>)
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	085b      	lsrs	r3, r3, #1
 8000d1e:	400b      	ands	r3, r1
 8000d20:	4313      	orrs	r3, r2
 8000d22:	e7bb      	b.n	8000c9c <__aeabi_fsub+0xac>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d032      	beq.n	8000d8e <__aeabi_fsub+0x19e>
 8000d28:	428d      	cmp	r5, r1
 8000d2a:	d035      	beq.n	8000d98 <__aeabi_fsub+0x1a8>
 8000d2c:	22ff      	movs	r2, #255	; 0xff
 8000d2e:	4252      	negs	r2, r2
 8000d30:	4691      	mov	r9, r2
 8000d32:	44a1      	add	r9, r4
 8000d34:	464a      	mov	r2, r9
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d051      	beq.n	8000dde <__aeabi_fsub+0x1ee>
 8000d3a:	1b30      	subs	r0, r6, r4
 8000d3c:	2c00      	cmp	r4, #0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_fsub+0x152>
 8000d40:	e09c      	b.n	8000e7c <__aeabi_fsub+0x28c>
 8000d42:	4663      	mov	r3, ip
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x15a>
 8000d48:	e0df      	b.n	8000f0a <__aeabi_fsub+0x31a>
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_fsub+0x162>
 8000d50:	e0f7      	b.n	8000f42 <__aeabi_fsub+0x352>
 8000d52:	2eff      	cmp	r6, #255	; 0xff
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fsub+0x168>
 8000d56:	e099      	b.n	8000e8c <__aeabi_fsub+0x29c>
 8000d58:	000d      	movs	r5, r1
 8000d5a:	4643      	mov	r3, r8
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fsub+0x172>
 8000d60:	e085      	b.n	8000e6e <__aeabi_fsub+0x27e>
 8000d62:	2780      	movs	r7, #128	; 0x80
 8000d64:	03ff      	lsls	r7, r7, #15
 8000d66:	431f      	orrs	r7, r3
 8000d68:	027f      	lsls	r7, r7, #9
 8000d6a:	20ff      	movs	r0, #255	; 0xff
 8000d6c:	0a7f      	lsrs	r7, r7, #9
 8000d6e:	e7a6      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000d70:	4652      	mov	r2, sl
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	d074      	beq.n	8000e60 <__aeabi_fsub+0x270>
 8000d76:	2201      	movs	r2, #1
 8000d78:	4252      	negs	r2, r2
 8000d7a:	4690      	mov	r8, r2
 8000d7c:	44c1      	add	r9, r8
 8000d7e:	464a      	mov	r2, r9
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_fsub+0x196>
 8000d84:	e0c8      	b.n	8000f18 <__aeabi_fsub+0x328>
 8000d86:	2cff      	cmp	r4, #255	; 0xff
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x19c>
 8000d8a:	e75f      	b.n	8000c4c <__aeabi_fsub+0x5c>
 8000d8c:	e7e6      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4051      	eors	r1, r2
 8000d92:	42a9      	cmp	r1, r5
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fsub+0x1a8>
 8000d96:	e749      	b.n	8000c2c <__aeabi_fsub+0x3c>
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	4252      	negs	r2, r2
 8000d9c:	4691      	mov	r9, r2
 8000d9e:	44a1      	add	r9, r4
 8000da0:	464a      	mov	r2, r9
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d043      	beq.n	8000e2e <__aeabi_fsub+0x23e>
 8000da6:	1b31      	subs	r1, r6, r4
 8000da8:	2c00      	cmp	r4, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x1be>
 8000dac:	e08c      	b.n	8000ec8 <__aeabi_fsub+0x2d8>
 8000dae:	2eff      	cmp	r6, #255	; 0xff
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x1c4>
 8000db2:	e092      	b.n	8000eda <__aeabi_fsub+0x2ea>
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	4662      	mov	r2, ip
 8000db8:	04db      	lsls	r3, r3, #19
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	4694      	mov	ip, r2
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	291b      	cmp	r1, #27
 8000dc2:	dc09      	bgt.n	8000dd8 <__aeabi_fsub+0x1e8>
 8000dc4:	2020      	movs	r0, #32
 8000dc6:	4663      	mov	r3, ip
 8000dc8:	4662      	mov	r2, ip
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	1a41      	subs	r1, r0, r1
 8000dce:	408a      	lsls	r2, r1
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	1e48      	subs	r0, r1, #1
 8000dd4:	4181      	sbcs	r1, r0
 8000dd6:	430b      	orrs	r3, r1
 8000dd8:	0034      	movs	r4, r6
 8000dda:	4453      	add	r3, sl
 8000ddc:	e794      	b.n	8000d08 <__aeabi_fsub+0x118>
 8000dde:	22fe      	movs	r2, #254	; 0xfe
 8000de0:	1c66      	adds	r6, r4, #1
 8000de2:	4232      	tst	r2, r6
 8000de4:	d164      	bne.n	8000eb0 <__aeabi_fsub+0x2c0>
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d000      	beq.n	8000dec <__aeabi_fsub+0x1fc>
 8000dea:	e082      	b.n	8000ef2 <__aeabi_fsub+0x302>
 8000dec:	4663      	mov	r3, ip
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <__aeabi_fsub+0x204>
 8000df2:	e0ab      	b.n	8000f4c <__aeabi_fsub+0x35c>
 8000df4:	4653      	mov	r3, sl
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d100      	bne.n	8000dfc <__aeabi_fsub+0x20c>
 8000dfa:	e760      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	4652      	mov	r2, sl
 8000e00:	1a9b      	subs	r3, r3, r2
 8000e02:	015a      	lsls	r2, r3, #5
 8000e04:	d400      	bmi.n	8000e08 <__aeabi_fsub+0x218>
 8000e06:	e0aa      	b.n	8000f5e <__aeabi_fsub+0x36e>
 8000e08:	4663      	mov	r3, ip
 8000e0a:	4652      	mov	r2, sl
 8000e0c:	000d      	movs	r5, r1
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	e744      	b.n	8000c9c <__aeabi_fsub+0xac>
 8000e12:	4652      	mov	r2, sl
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	d023      	beq.n	8000e60 <__aeabi_fsub+0x270>
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4252      	negs	r2, r2
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	44c1      	add	r9, r8
 8000e20:	464a      	mov	r2, r9
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d075      	beq.n	8000f12 <__aeabi_fsub+0x322>
 8000e26:	2cff      	cmp	r4, #255	; 0xff
 8000e28:	d000      	beq.n	8000e2c <__aeabi_fsub+0x23c>
 8000e2a:	e75f      	b.n	8000cec <__aeabi_fsub+0xfc>
 8000e2c:	e796      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000e2e:	26fe      	movs	r6, #254	; 0xfe
 8000e30:	3401      	adds	r4, #1
 8000e32:	4226      	tst	r6, r4
 8000e34:	d153      	bne.n	8000ede <__aeabi_fsub+0x2ee>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d172      	bne.n	8000f20 <__aeabi_fsub+0x330>
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_fsub+0x252>
 8000e40:	e093      	b.n	8000f6a <__aeabi_fsub+0x37a>
 8000e42:	4653      	mov	r3, sl
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d100      	bne.n	8000e4a <__aeabi_fsub+0x25a>
 8000e48:	e739      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000e4a:	4463      	add	r3, ip
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	015a      	lsls	r2, r3, #5
 8000e50:	d502      	bpl.n	8000e58 <__aeabi_fsub+0x268>
 8000e52:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <__aeabi_fsub+0x38c>)
 8000e54:	3401      	adds	r4, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	075a      	lsls	r2, r3, #29
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_fsub+0x26e>
 8000e5c:	e720      	b.n	8000ca0 <__aeabi_fsub+0xb0>
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	2cff      	cmp	r4, #255	; 0xff
 8000e62:	d100      	bne.n	8000e66 <__aeabi_fsub+0x276>
 8000e64:	e77a      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	0a5f      	lsrs	r7, r3, #9
 8000e6a:	b2e0      	uxtb	r0, r4
 8000e6c:	e727      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000e6e:	20ff      	movs	r0, #255	; 0xff
 8000e70:	2700      	movs	r7, #0
 8000e72:	e724      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <__aeabi_fsub+0x38c>)
 8000e76:	1a24      	subs	r4, r4, r0
 8000e78:	4033      	ands	r3, r6
 8000e7a:	e70f      	b.n	8000c9c <__aeabi_fsub+0xac>
 8000e7c:	2eff      	cmp	r6, #255	; 0xff
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_fsub+0x292>
 8000e80:	e76a      	b.n	8000d58 <__aeabi_fsub+0x168>
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	4662      	mov	r2, ip
 8000e86:	04db      	lsls	r3, r3, #19
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	4694      	mov	ip, r2
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	281b      	cmp	r0, #27
 8000e90:	dc09      	bgt.n	8000ea6 <__aeabi_fsub+0x2b6>
 8000e92:	2420      	movs	r4, #32
 8000e94:	4663      	mov	r3, ip
 8000e96:	4662      	mov	r2, ip
 8000e98:	40c3      	lsrs	r3, r0
 8000e9a:	1a20      	subs	r0, r4, r0
 8000e9c:	4082      	lsls	r2, r0
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	1e44      	subs	r4, r0, #1
 8000ea2:	41a0      	sbcs	r0, r4
 8000ea4:	4303      	orrs	r3, r0
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	000d      	movs	r5, r1
 8000eaa:	0034      	movs	r4, r6
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	e6dc      	b.n	8000c6a <__aeabi_fsub+0x7a>
 8000eb0:	4663      	mov	r3, ip
 8000eb2:	4652      	mov	r2, sl
 8000eb4:	1a9e      	subs	r6, r3, r2
 8000eb6:	0173      	lsls	r3, r6, #5
 8000eb8:	d417      	bmi.n	8000eea <__aeabi_fsub+0x2fa>
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_fsub+0x2d0>
 8000ebe:	e6d9      	b.n	8000c74 <__aeabi_fsub+0x84>
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e6fa      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000ec8:	4663      	mov	r3, ip
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d044      	beq.n	8000f58 <__aeabi_fsub+0x368>
 8000ece:	3901      	subs	r1, #1
 8000ed0:	2900      	cmp	r1, #0
 8000ed2:	d04c      	beq.n	8000f6e <__aeabi_fsub+0x37e>
 8000ed4:	2eff      	cmp	r6, #255	; 0xff
 8000ed6:	d000      	beq.n	8000eda <__aeabi_fsub+0x2ea>
 8000ed8:	e771      	b.n	8000dbe <__aeabi_fsub+0x1ce>
 8000eda:	4643      	mov	r3, r8
 8000edc:	e73e      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000ede:	2cff      	cmp	r4, #255	; 0xff
 8000ee0:	d0c5      	beq.n	8000e6e <__aeabi_fsub+0x27e>
 8000ee2:	4652      	mov	r2, sl
 8000ee4:	4462      	add	r2, ip
 8000ee6:	0853      	lsrs	r3, r2, #1
 8000ee8:	e7b6      	b.n	8000e58 <__aeabi_fsub+0x268>
 8000eea:	4663      	mov	r3, ip
 8000eec:	000d      	movs	r5, r1
 8000eee:	1ad6      	subs	r6, r2, r3
 8000ef0:	e6c0      	b.n	8000c74 <__aeabi_fsub+0x84>
 8000ef2:	4662      	mov	r2, ip
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	d116      	bne.n	8000f26 <__aeabi_fsub+0x336>
 8000ef8:	4653      	mov	r3, sl
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d000      	beq.n	8000f00 <__aeabi_fsub+0x310>
 8000efe:	e72b      	b.n	8000d58 <__aeabi_fsub+0x168>
 8000f00:	2780      	movs	r7, #128	; 0x80
 8000f02:	2500      	movs	r5, #0
 8000f04:	20ff      	movs	r0, #255	; 0xff
 8000f06:	03ff      	lsls	r7, r7, #15
 8000f08:	e6d9      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000f0a:	000d      	movs	r5, r1
 8000f0c:	4643      	mov	r3, r8
 8000f0e:	0034      	movs	r4, r6
 8000f10:	e7a6      	b.n	8000e60 <__aeabi_fsub+0x270>
 8000f12:	4653      	mov	r3, sl
 8000f14:	4463      	add	r3, ip
 8000f16:	e6f7      	b.n	8000d08 <__aeabi_fsub+0x118>
 8000f18:	4663      	mov	r3, ip
 8000f1a:	4652      	mov	r2, sl
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	e6a4      	b.n	8000c6a <__aeabi_fsub+0x7a>
 8000f20:	4662      	mov	r2, ip
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d0d9      	beq.n	8000eda <__aeabi_fsub+0x2ea>
 8000f26:	4652      	mov	r2, sl
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_fsub+0x33e>
 8000f2c:	e716      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	03d2      	lsls	r2, r2, #15
 8000f32:	4213      	tst	r3, r2
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x348>
 8000f36:	e711      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	4210      	tst	r0, r2
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x350>
 8000f3e:	e70d      	b.n	8000d5c <__aeabi_fsub+0x16c>
 8000f40:	e70a      	b.n	8000d58 <__aeabi_fsub+0x168>
 8000f42:	4652      	mov	r2, sl
 8000f44:	000d      	movs	r5, r1
 8000f46:	0034      	movs	r4, r6
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	e68e      	b.n	8000c6a <__aeabi_fsub+0x7a>
 8000f4c:	4653      	mov	r3, sl
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <__aeabi_fsub+0x374>
 8000f52:	000d      	movs	r5, r1
 8000f54:	4647      	mov	r7, r8
 8000f56:	e6b2      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000f58:	4643      	mov	r3, r8
 8000f5a:	0034      	movs	r4, r6
 8000f5c:	e780      	b.n	8000e60 <__aeabi_fsub+0x270>
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x374>
 8000f62:	e779      	b.n	8000e58 <__aeabi_fsub+0x268>
 8000f64:	2500      	movs	r5, #0
 8000f66:	2700      	movs	r7, #0
 8000f68:	e6a9      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000f6a:	4647      	mov	r7, r8
 8000f6c:	e6a7      	b.n	8000cbe <__aeabi_fsub+0xce>
 8000f6e:	4653      	mov	r3, sl
 8000f70:	0034      	movs	r4, r6
 8000f72:	4463      	add	r3, ip
 8000f74:	e6c8      	b.n	8000d08 <__aeabi_fsub+0x118>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	7dffffff 	.word	0x7dffffff
 8000f7c:	fbffffff 	.word	0xfbffffff

08000f80 <__aeabi_fcmpun>:
 8000f80:	0242      	lsls	r2, r0, #9
 8000f82:	024b      	lsls	r3, r1, #9
 8000f84:	0040      	lsls	r0, r0, #1
 8000f86:	0049      	lsls	r1, r1, #1
 8000f88:	0a52      	lsrs	r2, r2, #9
 8000f8a:	0a5b      	lsrs	r3, r3, #9
 8000f8c:	0e09      	lsrs	r1, r1, #24
 8000f8e:	0e00      	lsrs	r0, r0, #24
 8000f90:	28ff      	cmp	r0, #255	; 0xff
 8000f92:	d006      	beq.n	8000fa2 <__aeabi_fcmpun+0x22>
 8000f94:	2000      	movs	r0, #0
 8000f96:	29ff      	cmp	r1, #255	; 0xff
 8000f98:	d102      	bne.n	8000fa0 <__aeabi_fcmpun+0x20>
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	1e43      	subs	r3, r0, #1
 8000f9e:	4198      	sbcs	r0, r3
 8000fa0:	4770      	bx	lr
 8000fa2:	38fe      	subs	r0, #254	; 0xfe
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	d1fb      	bne.n	8000fa0 <__aeabi_fcmpun+0x20>
 8000fa8:	e7f4      	b.n	8000f94 <__aeabi_fcmpun+0x14>
 8000faa:	46c0      	nop			; (mov r8, r8)

08000fac <__aeabi_dadd>:
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fae:	464f      	mov	r7, r9
 8000fb0:	46d6      	mov	lr, sl
 8000fb2:	4646      	mov	r6, r8
 8000fb4:	000d      	movs	r5, r1
 8000fb6:	0001      	movs	r1, r0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	b5c0      	push	{r6, r7, lr}
 8000fbc:	0017      	movs	r7, r2
 8000fbe:	032b      	lsls	r3, r5, #12
 8000fc0:	0a5a      	lsrs	r2, r3, #9
 8000fc2:	0f4b      	lsrs	r3, r1, #29
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	00ca      	lsls	r2, r1, #3
 8000fc8:	4691      	mov	r9, r2
 8000fca:	0302      	lsls	r2, r0, #12
 8000fcc:	006e      	lsls	r6, r5, #1
 8000fce:	0041      	lsls	r1, r0, #1
 8000fd0:	0a52      	lsrs	r2, r2, #9
 8000fd2:	0fec      	lsrs	r4, r5, #31
 8000fd4:	0f7d      	lsrs	r5, r7, #29
 8000fd6:	4315      	orrs	r5, r2
 8000fd8:	0d76      	lsrs	r6, r6, #21
 8000fda:	0d49      	lsrs	r1, r1, #21
 8000fdc:	0fc0      	lsrs	r0, r0, #31
 8000fde:	4682      	mov	sl, r0
 8000fe0:	46ac      	mov	ip, r5
 8000fe2:	00ff      	lsls	r7, r7, #3
 8000fe4:	1a72      	subs	r2, r6, r1
 8000fe6:	4284      	cmp	r4, r0
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dadd+0x40>
 8000fea:	e098      	b.n	800111e <__aeabi_dadd+0x172>
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	dc00      	bgt.n	8000ff2 <__aeabi_dadd+0x46>
 8000ff0:	e081      	b.n	80010f6 <__aeabi_dadd+0x14a>
 8000ff2:	2900      	cmp	r1, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dadd+0x4c>
 8000ff6:	e0b6      	b.n	8001166 <__aeabi_dadd+0x1ba>
 8000ff8:	49c9      	ldr	r1, [pc, #804]	; (8001320 <__aeabi_dadd+0x374>)
 8000ffa:	428e      	cmp	r6, r1
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dadd+0x54>
 8000ffe:	e172      	b.n	80012e6 <__aeabi_dadd+0x33a>
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0028      	movs	r0, r5
 8001004:	0409      	lsls	r1, r1, #16
 8001006:	4308      	orrs	r0, r1
 8001008:	4684      	mov	ip, r0
 800100a:	2a38      	cmp	r2, #56	; 0x38
 800100c:	dd00      	ble.n	8001010 <__aeabi_dadd+0x64>
 800100e:	e15e      	b.n	80012ce <__aeabi_dadd+0x322>
 8001010:	2a1f      	cmp	r2, #31
 8001012:	dd00      	ble.n	8001016 <__aeabi_dadd+0x6a>
 8001014:	e1ee      	b.n	80013f4 <__aeabi_dadd+0x448>
 8001016:	2020      	movs	r0, #32
 8001018:	0039      	movs	r1, r7
 800101a:	4665      	mov	r5, ip
 800101c:	1a80      	subs	r0, r0, r2
 800101e:	4087      	lsls	r7, r0
 8001020:	40d1      	lsrs	r1, r2
 8001022:	4085      	lsls	r5, r0
 8001024:	430d      	orrs	r5, r1
 8001026:	0039      	movs	r1, r7
 8001028:	1e4f      	subs	r7, r1, #1
 800102a:	41b9      	sbcs	r1, r7
 800102c:	4667      	mov	r7, ip
 800102e:	40d7      	lsrs	r7, r2
 8001030:	4329      	orrs	r1, r5
 8001032:	1bdb      	subs	r3, r3, r7
 8001034:	464a      	mov	r2, r9
 8001036:	1a55      	subs	r5, r2, r1
 8001038:	45a9      	cmp	r9, r5
 800103a:	4189      	sbcs	r1, r1
 800103c:	4249      	negs	r1, r1
 800103e:	1a5b      	subs	r3, r3, r1
 8001040:	4698      	mov	r8, r3
 8001042:	4643      	mov	r3, r8
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	d400      	bmi.n	800104a <__aeabi_dadd+0x9e>
 8001048:	e0cc      	b.n	80011e4 <__aeabi_dadd+0x238>
 800104a:	4643      	mov	r3, r8
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	0a5b      	lsrs	r3, r3, #9
 8001050:	4698      	mov	r8, r3
 8001052:	4643      	mov	r3, r8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0xae>
 8001058:	e12c      	b.n	80012b4 <__aeabi_dadd+0x308>
 800105a:	4640      	mov	r0, r8
 800105c:	f001 fa04 	bl	8002468 <__clzsi2>
 8001060:	0001      	movs	r1, r0
 8001062:	3908      	subs	r1, #8
 8001064:	2220      	movs	r2, #32
 8001066:	0028      	movs	r0, r5
 8001068:	4643      	mov	r3, r8
 800106a:	1a52      	subs	r2, r2, r1
 800106c:	408b      	lsls	r3, r1
 800106e:	40d0      	lsrs	r0, r2
 8001070:	408d      	lsls	r5, r1
 8001072:	4303      	orrs	r3, r0
 8001074:	428e      	cmp	r6, r1
 8001076:	dd00      	ble.n	800107a <__aeabi_dadd+0xce>
 8001078:	e117      	b.n	80012aa <__aeabi_dadd+0x2fe>
 800107a:	1b8e      	subs	r6, r1, r6
 800107c:	1c72      	adds	r2, r6, #1
 800107e:	2a1f      	cmp	r2, #31
 8001080:	dd00      	ble.n	8001084 <__aeabi_dadd+0xd8>
 8001082:	e1a7      	b.n	80013d4 <__aeabi_dadd+0x428>
 8001084:	2120      	movs	r1, #32
 8001086:	0018      	movs	r0, r3
 8001088:	002e      	movs	r6, r5
 800108a:	1a89      	subs	r1, r1, r2
 800108c:	408d      	lsls	r5, r1
 800108e:	4088      	lsls	r0, r1
 8001090:	40d6      	lsrs	r6, r2
 8001092:	40d3      	lsrs	r3, r2
 8001094:	1e69      	subs	r1, r5, #1
 8001096:	418d      	sbcs	r5, r1
 8001098:	4330      	orrs	r0, r6
 800109a:	4698      	mov	r8, r3
 800109c:	2600      	movs	r6, #0
 800109e:	4305      	orrs	r5, r0
 80010a0:	076b      	lsls	r3, r5, #29
 80010a2:	d009      	beq.n	80010b8 <__aeabi_dadd+0x10c>
 80010a4:	230f      	movs	r3, #15
 80010a6:	402b      	ands	r3, r5
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d005      	beq.n	80010b8 <__aeabi_dadd+0x10c>
 80010ac:	1d2b      	adds	r3, r5, #4
 80010ae:	42ab      	cmp	r3, r5
 80010b0:	41ad      	sbcs	r5, r5
 80010b2:	426d      	negs	r5, r5
 80010b4:	44a8      	add	r8, r5
 80010b6:	001d      	movs	r5, r3
 80010b8:	4643      	mov	r3, r8
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_dadd+0x114>
 80010be:	e094      	b.n	80011ea <__aeabi_dadd+0x23e>
 80010c0:	4b97      	ldr	r3, [pc, #604]	; (8001320 <__aeabi_dadd+0x374>)
 80010c2:	1c72      	adds	r2, r6, #1
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d100      	bne.n	80010ca <__aeabi_dadd+0x11e>
 80010c8:	e09d      	b.n	8001206 <__aeabi_dadd+0x25a>
 80010ca:	4641      	mov	r1, r8
 80010cc:	4b95      	ldr	r3, [pc, #596]	; (8001324 <__aeabi_dadd+0x378>)
 80010ce:	08ed      	lsrs	r5, r5, #3
 80010d0:	4019      	ands	r1, r3
 80010d2:	000b      	movs	r3, r1
 80010d4:	0552      	lsls	r2, r2, #21
 80010d6:	0749      	lsls	r1, r1, #29
 80010d8:	025b      	lsls	r3, r3, #9
 80010da:	4329      	orrs	r1, r5
 80010dc:	0b1b      	lsrs	r3, r3, #12
 80010de:	0d52      	lsrs	r2, r2, #21
 80010e0:	0512      	lsls	r2, r2, #20
 80010e2:	4313      	orrs	r3, r2
 80010e4:	07e4      	lsls	r4, r4, #31
 80010e6:	4323      	orrs	r3, r4
 80010e8:	0008      	movs	r0, r1
 80010ea:	0019      	movs	r1, r3
 80010ec:	bce0      	pop	{r5, r6, r7}
 80010ee:	46ba      	mov	sl, r7
 80010f0:	46b1      	mov	r9, r6
 80010f2:	46a8      	mov	r8, r5
 80010f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f6:	2a00      	cmp	r2, #0
 80010f8:	d043      	beq.n	8001182 <__aeabi_dadd+0x1d6>
 80010fa:	1b8a      	subs	r2, r1, r6
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d000      	beq.n	8001102 <__aeabi_dadd+0x156>
 8001100:	e12a      	b.n	8001358 <__aeabi_dadd+0x3ac>
 8001102:	464c      	mov	r4, r9
 8001104:	431c      	orrs	r4, r3
 8001106:	d100      	bne.n	800110a <__aeabi_dadd+0x15e>
 8001108:	e1d1      	b.n	80014ae <__aeabi_dadd+0x502>
 800110a:	1e54      	subs	r4, r2, #1
 800110c:	2a01      	cmp	r2, #1
 800110e:	d100      	bne.n	8001112 <__aeabi_dadd+0x166>
 8001110:	e21f      	b.n	8001552 <__aeabi_dadd+0x5a6>
 8001112:	4d83      	ldr	r5, [pc, #524]	; (8001320 <__aeabi_dadd+0x374>)
 8001114:	42aa      	cmp	r2, r5
 8001116:	d100      	bne.n	800111a <__aeabi_dadd+0x16e>
 8001118:	e272      	b.n	8001600 <__aeabi_dadd+0x654>
 800111a:	0022      	movs	r2, r4
 800111c:	e123      	b.n	8001366 <__aeabi_dadd+0x3ba>
 800111e:	2a00      	cmp	r2, #0
 8001120:	dc00      	bgt.n	8001124 <__aeabi_dadd+0x178>
 8001122:	e098      	b.n	8001256 <__aeabi_dadd+0x2aa>
 8001124:	2900      	cmp	r1, #0
 8001126:	d042      	beq.n	80011ae <__aeabi_dadd+0x202>
 8001128:	497d      	ldr	r1, [pc, #500]	; (8001320 <__aeabi_dadd+0x374>)
 800112a:	428e      	cmp	r6, r1
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x184>
 800112e:	e0da      	b.n	80012e6 <__aeabi_dadd+0x33a>
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0028      	movs	r0, r5
 8001134:	0409      	lsls	r1, r1, #16
 8001136:	4308      	orrs	r0, r1
 8001138:	4684      	mov	ip, r0
 800113a:	2a38      	cmp	r2, #56	; 0x38
 800113c:	dd00      	ble.n	8001140 <__aeabi_dadd+0x194>
 800113e:	e129      	b.n	8001394 <__aeabi_dadd+0x3e8>
 8001140:	2a1f      	cmp	r2, #31
 8001142:	dc00      	bgt.n	8001146 <__aeabi_dadd+0x19a>
 8001144:	e187      	b.n	8001456 <__aeabi_dadd+0x4aa>
 8001146:	0011      	movs	r1, r2
 8001148:	4665      	mov	r5, ip
 800114a:	3920      	subs	r1, #32
 800114c:	40cd      	lsrs	r5, r1
 800114e:	2a20      	cmp	r2, #32
 8001150:	d004      	beq.n	800115c <__aeabi_dadd+0x1b0>
 8001152:	2040      	movs	r0, #64	; 0x40
 8001154:	4661      	mov	r1, ip
 8001156:	1a82      	subs	r2, r0, r2
 8001158:	4091      	lsls	r1, r2
 800115a:	430f      	orrs	r7, r1
 800115c:	0039      	movs	r1, r7
 800115e:	1e4f      	subs	r7, r1, #1
 8001160:	41b9      	sbcs	r1, r7
 8001162:	430d      	orrs	r5, r1
 8001164:	e11b      	b.n	800139e <__aeabi_dadd+0x3f2>
 8001166:	0029      	movs	r1, r5
 8001168:	4339      	orrs	r1, r7
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x1c2>
 800116c:	e0b5      	b.n	80012da <__aeabi_dadd+0x32e>
 800116e:	1e51      	subs	r1, r2, #1
 8001170:	2a01      	cmp	r2, #1
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x1ca>
 8001174:	e1ab      	b.n	80014ce <__aeabi_dadd+0x522>
 8001176:	486a      	ldr	r0, [pc, #424]	; (8001320 <__aeabi_dadd+0x374>)
 8001178:	4282      	cmp	r2, r0
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x1d2>
 800117c:	e1b2      	b.n	80014e4 <__aeabi_dadd+0x538>
 800117e:	000a      	movs	r2, r1
 8001180:	e743      	b.n	800100a <__aeabi_dadd+0x5e>
 8001182:	4969      	ldr	r1, [pc, #420]	; (8001328 <__aeabi_dadd+0x37c>)
 8001184:	1c75      	adds	r5, r6, #1
 8001186:	420d      	tst	r5, r1
 8001188:	d000      	beq.n	800118c <__aeabi_dadd+0x1e0>
 800118a:	e0cf      	b.n	800132c <__aeabi_dadd+0x380>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x1e6>
 8001190:	e193      	b.n	80014ba <__aeabi_dadd+0x50e>
 8001192:	4649      	mov	r1, r9
 8001194:	4319      	orrs	r1, r3
 8001196:	d100      	bne.n	800119a <__aeabi_dadd+0x1ee>
 8001198:	e1d1      	b.n	800153e <__aeabi_dadd+0x592>
 800119a:	4661      	mov	r1, ip
 800119c:	4339      	orrs	r1, r7
 800119e:	d000      	beq.n	80011a2 <__aeabi_dadd+0x1f6>
 80011a0:	e1e3      	b.n	800156a <__aeabi_dadd+0x5be>
 80011a2:	4649      	mov	r1, r9
 80011a4:	0758      	lsls	r0, r3, #29
 80011a6:	08c9      	lsrs	r1, r1, #3
 80011a8:	4301      	orrs	r1, r0
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	e026      	b.n	80011fc <__aeabi_dadd+0x250>
 80011ae:	0029      	movs	r1, r5
 80011b0:	4339      	orrs	r1, r7
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dadd+0x20a>
 80011b4:	e091      	b.n	80012da <__aeabi_dadd+0x32e>
 80011b6:	1e51      	subs	r1, r2, #1
 80011b8:	2a01      	cmp	r2, #1
 80011ba:	d005      	beq.n	80011c8 <__aeabi_dadd+0x21c>
 80011bc:	4858      	ldr	r0, [pc, #352]	; (8001320 <__aeabi_dadd+0x374>)
 80011be:	4282      	cmp	r2, r0
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dadd+0x218>
 80011c2:	e18f      	b.n	80014e4 <__aeabi_dadd+0x538>
 80011c4:	000a      	movs	r2, r1
 80011c6:	e7b8      	b.n	800113a <__aeabi_dadd+0x18e>
 80011c8:	003d      	movs	r5, r7
 80011ca:	444d      	add	r5, r9
 80011cc:	454d      	cmp	r5, r9
 80011ce:	4189      	sbcs	r1, r1
 80011d0:	4463      	add	r3, ip
 80011d2:	4698      	mov	r8, r3
 80011d4:	4249      	negs	r1, r1
 80011d6:	4488      	add	r8, r1
 80011d8:	4643      	mov	r3, r8
 80011da:	2602      	movs	r6, #2
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	d500      	bpl.n	80011e2 <__aeabi_dadd+0x236>
 80011e0:	e0eb      	b.n	80013ba <__aeabi_dadd+0x40e>
 80011e2:	3e01      	subs	r6, #1
 80011e4:	076b      	lsls	r3, r5, #29
 80011e6:	d000      	beq.n	80011ea <__aeabi_dadd+0x23e>
 80011e8:	e75c      	b.n	80010a4 <__aeabi_dadd+0xf8>
 80011ea:	4643      	mov	r3, r8
 80011ec:	08e9      	lsrs	r1, r5, #3
 80011ee:	075a      	lsls	r2, r3, #29
 80011f0:	4311      	orrs	r1, r2
 80011f2:	0032      	movs	r2, r6
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	484a      	ldr	r0, [pc, #296]	; (8001320 <__aeabi_dadd+0x374>)
 80011f8:	4282      	cmp	r2, r0
 80011fa:	d021      	beq.n	8001240 <__aeabi_dadd+0x294>
 80011fc:	031b      	lsls	r3, r3, #12
 80011fe:	0552      	lsls	r2, r2, #21
 8001200:	0b1b      	lsrs	r3, r3, #12
 8001202:	0d52      	lsrs	r2, r2, #21
 8001204:	e76c      	b.n	80010e0 <__aeabi_dadd+0x134>
 8001206:	2300      	movs	r3, #0
 8001208:	2100      	movs	r1, #0
 800120a:	e769      	b.n	80010e0 <__aeabi_dadd+0x134>
 800120c:	002a      	movs	r2, r5
 800120e:	433a      	orrs	r2, r7
 8001210:	d069      	beq.n	80012e6 <__aeabi_dadd+0x33a>
 8001212:	464a      	mov	r2, r9
 8001214:	0758      	lsls	r0, r3, #29
 8001216:	08d1      	lsrs	r1, r2, #3
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	031b      	lsls	r3, r3, #12
 800121e:	4308      	orrs	r0, r1
 8001220:	421a      	tst	r2, r3
 8001222:	d007      	beq.n	8001234 <__aeabi_dadd+0x288>
 8001224:	0029      	movs	r1, r5
 8001226:	08ed      	lsrs	r5, r5, #3
 8001228:	421d      	tst	r5, r3
 800122a:	d103      	bne.n	8001234 <__aeabi_dadd+0x288>
 800122c:	002a      	movs	r2, r5
 800122e:	08ff      	lsrs	r7, r7, #3
 8001230:	0748      	lsls	r0, r1, #29
 8001232:	4338      	orrs	r0, r7
 8001234:	0f43      	lsrs	r3, r0, #29
 8001236:	00c1      	lsls	r1, r0, #3
 8001238:	075b      	lsls	r3, r3, #29
 800123a:	08c9      	lsrs	r1, r1, #3
 800123c:	4319      	orrs	r1, r3
 800123e:	0013      	movs	r3, r2
 8001240:	000a      	movs	r2, r1
 8001242:	431a      	orrs	r2, r3
 8001244:	d100      	bne.n	8001248 <__aeabi_dadd+0x29c>
 8001246:	e213      	b.n	8001670 <__aeabi_dadd+0x6c4>
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0312      	lsls	r2, r2, #12
 800124c:	4313      	orrs	r3, r2
 800124e:	031b      	lsls	r3, r3, #12
 8001250:	4a33      	ldr	r2, [pc, #204]	; (8001320 <__aeabi_dadd+0x374>)
 8001252:	0b1b      	lsrs	r3, r3, #12
 8001254:	e744      	b.n	80010e0 <__aeabi_dadd+0x134>
 8001256:	2a00      	cmp	r2, #0
 8001258:	d04b      	beq.n	80012f2 <__aeabi_dadd+0x346>
 800125a:	1b8a      	subs	r2, r1, r6
 800125c:	2e00      	cmp	r6, #0
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x2b6>
 8001260:	e0e7      	b.n	8001432 <__aeabi_dadd+0x486>
 8001262:	482f      	ldr	r0, [pc, #188]	; (8001320 <__aeabi_dadd+0x374>)
 8001264:	4281      	cmp	r1, r0
 8001266:	d100      	bne.n	800126a <__aeabi_dadd+0x2be>
 8001268:	e195      	b.n	8001596 <__aeabi_dadd+0x5ea>
 800126a:	2080      	movs	r0, #128	; 0x80
 800126c:	0400      	lsls	r0, r0, #16
 800126e:	4303      	orrs	r3, r0
 8001270:	2a38      	cmp	r2, #56	; 0x38
 8001272:	dd00      	ble.n	8001276 <__aeabi_dadd+0x2ca>
 8001274:	e143      	b.n	80014fe <__aeabi_dadd+0x552>
 8001276:	2a1f      	cmp	r2, #31
 8001278:	dd00      	ble.n	800127c <__aeabi_dadd+0x2d0>
 800127a:	e1db      	b.n	8001634 <__aeabi_dadd+0x688>
 800127c:	2020      	movs	r0, #32
 800127e:	001d      	movs	r5, r3
 8001280:	464e      	mov	r6, r9
 8001282:	1a80      	subs	r0, r0, r2
 8001284:	4085      	lsls	r5, r0
 8001286:	40d6      	lsrs	r6, r2
 8001288:	4335      	orrs	r5, r6
 800128a:	464e      	mov	r6, r9
 800128c:	4086      	lsls	r6, r0
 800128e:	0030      	movs	r0, r6
 8001290:	40d3      	lsrs	r3, r2
 8001292:	1e46      	subs	r6, r0, #1
 8001294:	41b0      	sbcs	r0, r6
 8001296:	449c      	add	ip, r3
 8001298:	4305      	orrs	r5, r0
 800129a:	19ed      	adds	r5, r5, r7
 800129c:	42bd      	cmp	r5, r7
 800129e:	419b      	sbcs	r3, r3
 80012a0:	425b      	negs	r3, r3
 80012a2:	4463      	add	r3, ip
 80012a4:	4698      	mov	r8, r3
 80012a6:	000e      	movs	r6, r1
 80012a8:	e07f      	b.n	80013aa <__aeabi_dadd+0x3fe>
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <__aeabi_dadd+0x378>)
 80012ac:	1a76      	subs	r6, r6, r1
 80012ae:	4013      	ands	r3, r2
 80012b0:	4698      	mov	r8, r3
 80012b2:	e6f5      	b.n	80010a0 <__aeabi_dadd+0xf4>
 80012b4:	0028      	movs	r0, r5
 80012b6:	f001 f8d7 	bl	8002468 <__clzsi2>
 80012ba:	0001      	movs	r1, r0
 80012bc:	3118      	adds	r1, #24
 80012be:	291f      	cmp	r1, #31
 80012c0:	dc00      	bgt.n	80012c4 <__aeabi_dadd+0x318>
 80012c2:	e6cf      	b.n	8001064 <__aeabi_dadd+0xb8>
 80012c4:	002b      	movs	r3, r5
 80012c6:	3808      	subs	r0, #8
 80012c8:	4083      	lsls	r3, r0
 80012ca:	2500      	movs	r5, #0
 80012cc:	e6d2      	b.n	8001074 <__aeabi_dadd+0xc8>
 80012ce:	4662      	mov	r2, ip
 80012d0:	433a      	orrs	r2, r7
 80012d2:	0011      	movs	r1, r2
 80012d4:	1e4f      	subs	r7, r1, #1
 80012d6:	41b9      	sbcs	r1, r7
 80012d8:	e6ac      	b.n	8001034 <__aeabi_dadd+0x88>
 80012da:	4649      	mov	r1, r9
 80012dc:	0758      	lsls	r0, r3, #29
 80012de:	08c9      	lsrs	r1, r1, #3
 80012e0:	4301      	orrs	r1, r0
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	e787      	b.n	80011f6 <__aeabi_dadd+0x24a>
 80012e6:	4649      	mov	r1, r9
 80012e8:	075a      	lsls	r2, r3, #29
 80012ea:	08c9      	lsrs	r1, r1, #3
 80012ec:	4311      	orrs	r1, r2
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	e7a6      	b.n	8001240 <__aeabi_dadd+0x294>
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <__aeabi_dadd+0x37c>)
 80012f4:	1c70      	adds	r0, r6, #1
 80012f6:	4208      	tst	r0, r1
 80012f8:	d000      	beq.n	80012fc <__aeabi_dadd+0x350>
 80012fa:	e0bb      	b.n	8001474 <__aeabi_dadd+0x4c8>
 80012fc:	2e00      	cmp	r6, #0
 80012fe:	d000      	beq.n	8001302 <__aeabi_dadd+0x356>
 8001300:	e114      	b.n	800152c <__aeabi_dadd+0x580>
 8001302:	4649      	mov	r1, r9
 8001304:	4319      	orrs	r1, r3
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x35e>
 8001308:	e175      	b.n	80015f6 <__aeabi_dadd+0x64a>
 800130a:	0029      	movs	r1, r5
 800130c:	4339      	orrs	r1, r7
 800130e:	d000      	beq.n	8001312 <__aeabi_dadd+0x366>
 8001310:	e17e      	b.n	8001610 <__aeabi_dadd+0x664>
 8001312:	4649      	mov	r1, r9
 8001314:	0758      	lsls	r0, r3, #29
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	4301      	orrs	r1, r0
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	e76e      	b.n	80011fc <__aeabi_dadd+0x250>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	000007ff 	.word	0x000007ff
 8001324:	ff7fffff 	.word	0xff7fffff
 8001328:	000007fe 	.word	0x000007fe
 800132c:	4649      	mov	r1, r9
 800132e:	1bcd      	subs	r5, r1, r7
 8001330:	4661      	mov	r1, ip
 8001332:	1a58      	subs	r0, r3, r1
 8001334:	45a9      	cmp	r9, r5
 8001336:	4189      	sbcs	r1, r1
 8001338:	4249      	negs	r1, r1
 800133a:	4688      	mov	r8, r1
 800133c:	0001      	movs	r1, r0
 800133e:	4640      	mov	r0, r8
 8001340:	1a09      	subs	r1, r1, r0
 8001342:	4688      	mov	r8, r1
 8001344:	0209      	lsls	r1, r1, #8
 8001346:	d500      	bpl.n	800134a <__aeabi_dadd+0x39e>
 8001348:	e0a6      	b.n	8001498 <__aeabi_dadd+0x4ec>
 800134a:	4641      	mov	r1, r8
 800134c:	4329      	orrs	r1, r5
 800134e:	d000      	beq.n	8001352 <__aeabi_dadd+0x3a6>
 8001350:	e67f      	b.n	8001052 <__aeabi_dadd+0xa6>
 8001352:	2300      	movs	r3, #0
 8001354:	2400      	movs	r4, #0
 8001356:	e751      	b.n	80011fc <__aeabi_dadd+0x250>
 8001358:	4cc7      	ldr	r4, [pc, #796]	; (8001678 <__aeabi_dadd+0x6cc>)
 800135a:	42a1      	cmp	r1, r4
 800135c:	d100      	bne.n	8001360 <__aeabi_dadd+0x3b4>
 800135e:	e0c7      	b.n	80014f0 <__aeabi_dadd+0x544>
 8001360:	2480      	movs	r4, #128	; 0x80
 8001362:	0424      	lsls	r4, r4, #16
 8001364:	4323      	orrs	r3, r4
 8001366:	2a38      	cmp	r2, #56	; 0x38
 8001368:	dc54      	bgt.n	8001414 <__aeabi_dadd+0x468>
 800136a:	2a1f      	cmp	r2, #31
 800136c:	dd00      	ble.n	8001370 <__aeabi_dadd+0x3c4>
 800136e:	e0cc      	b.n	800150a <__aeabi_dadd+0x55e>
 8001370:	2420      	movs	r4, #32
 8001372:	4648      	mov	r0, r9
 8001374:	1aa4      	subs	r4, r4, r2
 8001376:	001d      	movs	r5, r3
 8001378:	464e      	mov	r6, r9
 800137a:	40a0      	lsls	r0, r4
 800137c:	40d6      	lsrs	r6, r2
 800137e:	40a5      	lsls	r5, r4
 8001380:	0004      	movs	r4, r0
 8001382:	40d3      	lsrs	r3, r2
 8001384:	4662      	mov	r2, ip
 8001386:	4335      	orrs	r5, r6
 8001388:	1e66      	subs	r6, r4, #1
 800138a:	41b4      	sbcs	r4, r6
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	469c      	mov	ip, r3
 8001390:	4325      	orrs	r5, r4
 8001392:	e044      	b.n	800141e <__aeabi_dadd+0x472>
 8001394:	4662      	mov	r2, ip
 8001396:	433a      	orrs	r2, r7
 8001398:	0015      	movs	r5, r2
 800139a:	1e6f      	subs	r7, r5, #1
 800139c:	41bd      	sbcs	r5, r7
 800139e:	444d      	add	r5, r9
 80013a0:	454d      	cmp	r5, r9
 80013a2:	4189      	sbcs	r1, r1
 80013a4:	4249      	negs	r1, r1
 80013a6:	4688      	mov	r8, r1
 80013a8:	4498      	add	r8, r3
 80013aa:	4643      	mov	r3, r8
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	d400      	bmi.n	80013b2 <__aeabi_dadd+0x406>
 80013b0:	e718      	b.n	80011e4 <__aeabi_dadd+0x238>
 80013b2:	4bb1      	ldr	r3, [pc, #708]	; (8001678 <__aeabi_dadd+0x6cc>)
 80013b4:	3601      	adds	r6, #1
 80013b6:	429e      	cmp	r6, r3
 80013b8:	d049      	beq.n	800144e <__aeabi_dadd+0x4a2>
 80013ba:	4642      	mov	r2, r8
 80013bc:	4baf      	ldr	r3, [pc, #700]	; (800167c <__aeabi_dadd+0x6d0>)
 80013be:	2101      	movs	r1, #1
 80013c0:	401a      	ands	r2, r3
 80013c2:	0013      	movs	r3, r2
 80013c4:	086a      	lsrs	r2, r5, #1
 80013c6:	400d      	ands	r5, r1
 80013c8:	4315      	orrs	r5, r2
 80013ca:	07d9      	lsls	r1, r3, #31
 80013cc:	085b      	lsrs	r3, r3, #1
 80013ce:	4698      	mov	r8, r3
 80013d0:	430d      	orrs	r5, r1
 80013d2:	e665      	b.n	80010a0 <__aeabi_dadd+0xf4>
 80013d4:	0018      	movs	r0, r3
 80013d6:	3e1f      	subs	r6, #31
 80013d8:	40f0      	lsrs	r0, r6
 80013da:	2a20      	cmp	r2, #32
 80013dc:	d003      	beq.n	80013e6 <__aeabi_dadd+0x43a>
 80013de:	2140      	movs	r1, #64	; 0x40
 80013e0:	1a8a      	subs	r2, r1, r2
 80013e2:	4093      	lsls	r3, r2
 80013e4:	431d      	orrs	r5, r3
 80013e6:	1e69      	subs	r1, r5, #1
 80013e8:	418d      	sbcs	r5, r1
 80013ea:	2300      	movs	r3, #0
 80013ec:	2600      	movs	r6, #0
 80013ee:	4698      	mov	r8, r3
 80013f0:	4305      	orrs	r5, r0
 80013f2:	e6f7      	b.n	80011e4 <__aeabi_dadd+0x238>
 80013f4:	0011      	movs	r1, r2
 80013f6:	4665      	mov	r5, ip
 80013f8:	3920      	subs	r1, #32
 80013fa:	40cd      	lsrs	r5, r1
 80013fc:	2a20      	cmp	r2, #32
 80013fe:	d004      	beq.n	800140a <__aeabi_dadd+0x45e>
 8001400:	2040      	movs	r0, #64	; 0x40
 8001402:	4661      	mov	r1, ip
 8001404:	1a82      	subs	r2, r0, r2
 8001406:	4091      	lsls	r1, r2
 8001408:	430f      	orrs	r7, r1
 800140a:	0039      	movs	r1, r7
 800140c:	1e4f      	subs	r7, r1, #1
 800140e:	41b9      	sbcs	r1, r7
 8001410:	4329      	orrs	r1, r5
 8001412:	e60f      	b.n	8001034 <__aeabi_dadd+0x88>
 8001414:	464a      	mov	r2, r9
 8001416:	4313      	orrs	r3, r2
 8001418:	001d      	movs	r5, r3
 800141a:	1e6b      	subs	r3, r5, #1
 800141c:	419d      	sbcs	r5, r3
 800141e:	1b7d      	subs	r5, r7, r5
 8001420:	42af      	cmp	r7, r5
 8001422:	419b      	sbcs	r3, r3
 8001424:	4662      	mov	r2, ip
 8001426:	425b      	negs	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	4698      	mov	r8, r3
 800142c:	4654      	mov	r4, sl
 800142e:	000e      	movs	r6, r1
 8001430:	e607      	b.n	8001042 <__aeabi_dadd+0x96>
 8001432:	4648      	mov	r0, r9
 8001434:	4318      	orrs	r0, r3
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x48e>
 8001438:	e0b3      	b.n	80015a2 <__aeabi_dadd+0x5f6>
 800143a:	1e50      	subs	r0, r2, #1
 800143c:	2a01      	cmp	r2, #1
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0x496>
 8001440:	e10d      	b.n	800165e <__aeabi_dadd+0x6b2>
 8001442:	4d8d      	ldr	r5, [pc, #564]	; (8001678 <__aeabi_dadd+0x6cc>)
 8001444:	42aa      	cmp	r2, r5
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x49e>
 8001448:	e0a5      	b.n	8001596 <__aeabi_dadd+0x5ea>
 800144a:	0002      	movs	r2, r0
 800144c:	e710      	b.n	8001270 <__aeabi_dadd+0x2c4>
 800144e:	0032      	movs	r2, r6
 8001450:	2300      	movs	r3, #0
 8001452:	2100      	movs	r1, #0
 8001454:	e644      	b.n	80010e0 <__aeabi_dadd+0x134>
 8001456:	2120      	movs	r1, #32
 8001458:	0038      	movs	r0, r7
 800145a:	1a89      	subs	r1, r1, r2
 800145c:	4665      	mov	r5, ip
 800145e:	408f      	lsls	r7, r1
 8001460:	408d      	lsls	r5, r1
 8001462:	40d0      	lsrs	r0, r2
 8001464:	1e79      	subs	r1, r7, #1
 8001466:	418f      	sbcs	r7, r1
 8001468:	4305      	orrs	r5, r0
 800146a:	433d      	orrs	r5, r7
 800146c:	4667      	mov	r7, ip
 800146e:	40d7      	lsrs	r7, r2
 8001470:	19db      	adds	r3, r3, r7
 8001472:	e794      	b.n	800139e <__aeabi_dadd+0x3f2>
 8001474:	4a80      	ldr	r2, [pc, #512]	; (8001678 <__aeabi_dadd+0x6cc>)
 8001476:	4290      	cmp	r0, r2
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x4d0>
 800147a:	e0ec      	b.n	8001656 <__aeabi_dadd+0x6aa>
 800147c:	0039      	movs	r1, r7
 800147e:	4449      	add	r1, r9
 8001480:	4549      	cmp	r1, r9
 8001482:	4192      	sbcs	r2, r2
 8001484:	4463      	add	r3, ip
 8001486:	4252      	negs	r2, r2
 8001488:	189b      	adds	r3, r3, r2
 800148a:	07dd      	lsls	r5, r3, #31
 800148c:	0849      	lsrs	r1, r1, #1
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	4698      	mov	r8, r3
 8001492:	0006      	movs	r6, r0
 8001494:	430d      	orrs	r5, r1
 8001496:	e6a5      	b.n	80011e4 <__aeabi_dadd+0x238>
 8001498:	464a      	mov	r2, r9
 800149a:	1abd      	subs	r5, r7, r2
 800149c:	42af      	cmp	r7, r5
 800149e:	4189      	sbcs	r1, r1
 80014a0:	4662      	mov	r2, ip
 80014a2:	4249      	negs	r1, r1
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	1a5b      	subs	r3, r3, r1
 80014a8:	4698      	mov	r8, r3
 80014aa:	4654      	mov	r4, sl
 80014ac:	e5d1      	b.n	8001052 <__aeabi_dadd+0xa6>
 80014ae:	076c      	lsls	r4, r5, #29
 80014b0:	08f9      	lsrs	r1, r7, #3
 80014b2:	4321      	orrs	r1, r4
 80014b4:	08eb      	lsrs	r3, r5, #3
 80014b6:	0004      	movs	r4, r0
 80014b8:	e69d      	b.n	80011f6 <__aeabi_dadd+0x24a>
 80014ba:	464a      	mov	r2, r9
 80014bc:	431a      	orrs	r2, r3
 80014be:	d175      	bne.n	80015ac <__aeabi_dadd+0x600>
 80014c0:	4661      	mov	r1, ip
 80014c2:	4339      	orrs	r1, r7
 80014c4:	d114      	bne.n	80014f0 <__aeabi_dadd+0x544>
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	2400      	movs	r4, #0
 80014ca:	031b      	lsls	r3, r3, #12
 80014cc:	e6bc      	b.n	8001248 <__aeabi_dadd+0x29c>
 80014ce:	464a      	mov	r2, r9
 80014d0:	1bd5      	subs	r5, r2, r7
 80014d2:	45a9      	cmp	r9, r5
 80014d4:	4189      	sbcs	r1, r1
 80014d6:	4662      	mov	r2, ip
 80014d8:	4249      	negs	r1, r1
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	1a5b      	subs	r3, r3, r1
 80014de:	4698      	mov	r8, r3
 80014e0:	2601      	movs	r6, #1
 80014e2:	e5ae      	b.n	8001042 <__aeabi_dadd+0x96>
 80014e4:	464a      	mov	r2, r9
 80014e6:	08d1      	lsrs	r1, r2, #3
 80014e8:	075a      	lsls	r2, r3, #29
 80014ea:	4311      	orrs	r1, r2
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	e6a7      	b.n	8001240 <__aeabi_dadd+0x294>
 80014f0:	4663      	mov	r3, ip
 80014f2:	08f9      	lsrs	r1, r7, #3
 80014f4:	075a      	lsls	r2, r3, #29
 80014f6:	4654      	mov	r4, sl
 80014f8:	4311      	orrs	r1, r2
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	e6a0      	b.n	8001240 <__aeabi_dadd+0x294>
 80014fe:	464a      	mov	r2, r9
 8001500:	4313      	orrs	r3, r2
 8001502:	001d      	movs	r5, r3
 8001504:	1e6b      	subs	r3, r5, #1
 8001506:	419d      	sbcs	r5, r3
 8001508:	e6c7      	b.n	800129a <__aeabi_dadd+0x2ee>
 800150a:	0014      	movs	r4, r2
 800150c:	001e      	movs	r6, r3
 800150e:	3c20      	subs	r4, #32
 8001510:	40e6      	lsrs	r6, r4
 8001512:	2a20      	cmp	r2, #32
 8001514:	d005      	beq.n	8001522 <__aeabi_dadd+0x576>
 8001516:	2440      	movs	r4, #64	; 0x40
 8001518:	1aa2      	subs	r2, r4, r2
 800151a:	4093      	lsls	r3, r2
 800151c:	464a      	mov	r2, r9
 800151e:	431a      	orrs	r2, r3
 8001520:	4691      	mov	r9, r2
 8001522:	464d      	mov	r5, r9
 8001524:	1e6b      	subs	r3, r5, #1
 8001526:	419d      	sbcs	r5, r3
 8001528:	4335      	orrs	r5, r6
 800152a:	e778      	b.n	800141e <__aeabi_dadd+0x472>
 800152c:	464a      	mov	r2, r9
 800152e:	431a      	orrs	r2, r3
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x588>
 8001532:	e66b      	b.n	800120c <__aeabi_dadd+0x260>
 8001534:	076b      	lsls	r3, r5, #29
 8001536:	08f9      	lsrs	r1, r7, #3
 8001538:	4319      	orrs	r1, r3
 800153a:	08eb      	lsrs	r3, r5, #3
 800153c:	e680      	b.n	8001240 <__aeabi_dadd+0x294>
 800153e:	4661      	mov	r1, ip
 8001540:	4339      	orrs	r1, r7
 8001542:	d054      	beq.n	80015ee <__aeabi_dadd+0x642>
 8001544:	4663      	mov	r3, ip
 8001546:	08f9      	lsrs	r1, r7, #3
 8001548:	075c      	lsls	r4, r3, #29
 800154a:	4321      	orrs	r1, r4
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	0004      	movs	r4, r0
 8001550:	e654      	b.n	80011fc <__aeabi_dadd+0x250>
 8001552:	464a      	mov	r2, r9
 8001554:	1abd      	subs	r5, r7, r2
 8001556:	42af      	cmp	r7, r5
 8001558:	4189      	sbcs	r1, r1
 800155a:	4662      	mov	r2, ip
 800155c:	4249      	negs	r1, r1
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	1a5b      	subs	r3, r3, r1
 8001562:	4698      	mov	r8, r3
 8001564:	0004      	movs	r4, r0
 8001566:	2601      	movs	r6, #1
 8001568:	e56b      	b.n	8001042 <__aeabi_dadd+0x96>
 800156a:	464a      	mov	r2, r9
 800156c:	1bd5      	subs	r5, r2, r7
 800156e:	45a9      	cmp	r9, r5
 8001570:	4189      	sbcs	r1, r1
 8001572:	4662      	mov	r2, ip
 8001574:	4249      	negs	r1, r1
 8001576:	1a9a      	subs	r2, r3, r2
 8001578:	1a52      	subs	r2, r2, r1
 800157a:	4690      	mov	r8, r2
 800157c:	0212      	lsls	r2, r2, #8
 800157e:	d532      	bpl.n	80015e6 <__aeabi_dadd+0x63a>
 8001580:	464a      	mov	r2, r9
 8001582:	1abd      	subs	r5, r7, r2
 8001584:	42af      	cmp	r7, r5
 8001586:	4189      	sbcs	r1, r1
 8001588:	4662      	mov	r2, ip
 800158a:	4249      	negs	r1, r1
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	1a5b      	subs	r3, r3, r1
 8001590:	4698      	mov	r8, r3
 8001592:	0004      	movs	r4, r0
 8001594:	e584      	b.n	80010a0 <__aeabi_dadd+0xf4>
 8001596:	4663      	mov	r3, ip
 8001598:	08f9      	lsrs	r1, r7, #3
 800159a:	075a      	lsls	r2, r3, #29
 800159c:	4311      	orrs	r1, r2
 800159e:	08db      	lsrs	r3, r3, #3
 80015a0:	e64e      	b.n	8001240 <__aeabi_dadd+0x294>
 80015a2:	08f9      	lsrs	r1, r7, #3
 80015a4:	0768      	lsls	r0, r5, #29
 80015a6:	4301      	orrs	r1, r0
 80015a8:	08eb      	lsrs	r3, r5, #3
 80015aa:	e624      	b.n	80011f6 <__aeabi_dadd+0x24a>
 80015ac:	4662      	mov	r2, ip
 80015ae:	433a      	orrs	r2, r7
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dadd+0x608>
 80015b2:	e698      	b.n	80012e6 <__aeabi_dadd+0x33a>
 80015b4:	464a      	mov	r2, r9
 80015b6:	08d1      	lsrs	r1, r2, #3
 80015b8:	075a      	lsls	r2, r3, #29
 80015ba:	4311      	orrs	r1, r2
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	031b      	lsls	r3, r3, #12
 80015c2:	421a      	tst	r2, r3
 80015c4:	d008      	beq.n	80015d8 <__aeabi_dadd+0x62c>
 80015c6:	4660      	mov	r0, ip
 80015c8:	08c5      	lsrs	r5, r0, #3
 80015ca:	421d      	tst	r5, r3
 80015cc:	d104      	bne.n	80015d8 <__aeabi_dadd+0x62c>
 80015ce:	4654      	mov	r4, sl
 80015d0:	002a      	movs	r2, r5
 80015d2:	08f9      	lsrs	r1, r7, #3
 80015d4:	0743      	lsls	r3, r0, #29
 80015d6:	4319      	orrs	r1, r3
 80015d8:	0f4b      	lsrs	r3, r1, #29
 80015da:	00c9      	lsls	r1, r1, #3
 80015dc:	075b      	lsls	r3, r3, #29
 80015de:	08c9      	lsrs	r1, r1, #3
 80015e0:	4319      	orrs	r1, r3
 80015e2:	0013      	movs	r3, r2
 80015e4:	e62c      	b.n	8001240 <__aeabi_dadd+0x294>
 80015e6:	4641      	mov	r1, r8
 80015e8:	4329      	orrs	r1, r5
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x642>
 80015ec:	e5fa      	b.n	80011e4 <__aeabi_dadd+0x238>
 80015ee:	2300      	movs	r3, #0
 80015f0:	000a      	movs	r2, r1
 80015f2:	2400      	movs	r4, #0
 80015f4:	e602      	b.n	80011fc <__aeabi_dadd+0x250>
 80015f6:	076b      	lsls	r3, r5, #29
 80015f8:	08f9      	lsrs	r1, r7, #3
 80015fa:	4319      	orrs	r1, r3
 80015fc:	08eb      	lsrs	r3, r5, #3
 80015fe:	e5fd      	b.n	80011fc <__aeabi_dadd+0x250>
 8001600:	4663      	mov	r3, ip
 8001602:	08f9      	lsrs	r1, r7, #3
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	4319      	orrs	r1, r3
 8001608:	4663      	mov	r3, ip
 800160a:	0004      	movs	r4, r0
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	e617      	b.n	8001240 <__aeabi_dadd+0x294>
 8001610:	003d      	movs	r5, r7
 8001612:	444d      	add	r5, r9
 8001614:	4463      	add	r3, ip
 8001616:	454d      	cmp	r5, r9
 8001618:	4189      	sbcs	r1, r1
 800161a:	4698      	mov	r8, r3
 800161c:	4249      	negs	r1, r1
 800161e:	4488      	add	r8, r1
 8001620:	4643      	mov	r3, r8
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_dadd+0x67c>
 8001626:	e5dd      	b.n	80011e4 <__aeabi_dadd+0x238>
 8001628:	4642      	mov	r2, r8
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <__aeabi_dadd+0x6d0>)
 800162c:	2601      	movs	r6, #1
 800162e:	401a      	ands	r2, r3
 8001630:	4690      	mov	r8, r2
 8001632:	e5d7      	b.n	80011e4 <__aeabi_dadd+0x238>
 8001634:	0010      	movs	r0, r2
 8001636:	001e      	movs	r6, r3
 8001638:	3820      	subs	r0, #32
 800163a:	40c6      	lsrs	r6, r0
 800163c:	2a20      	cmp	r2, #32
 800163e:	d005      	beq.n	800164c <__aeabi_dadd+0x6a0>
 8001640:	2040      	movs	r0, #64	; 0x40
 8001642:	1a82      	subs	r2, r0, r2
 8001644:	4093      	lsls	r3, r2
 8001646:	464a      	mov	r2, r9
 8001648:	431a      	orrs	r2, r3
 800164a:	4691      	mov	r9, r2
 800164c:	464d      	mov	r5, r9
 800164e:	1e6b      	subs	r3, r5, #1
 8001650:	419d      	sbcs	r5, r3
 8001652:	4335      	orrs	r5, r6
 8001654:	e621      	b.n	800129a <__aeabi_dadd+0x2ee>
 8001656:	0002      	movs	r2, r0
 8001658:	2300      	movs	r3, #0
 800165a:	2100      	movs	r1, #0
 800165c:	e540      	b.n	80010e0 <__aeabi_dadd+0x134>
 800165e:	464a      	mov	r2, r9
 8001660:	19d5      	adds	r5, r2, r7
 8001662:	42bd      	cmp	r5, r7
 8001664:	4189      	sbcs	r1, r1
 8001666:	4463      	add	r3, ip
 8001668:	4698      	mov	r8, r3
 800166a:	4249      	negs	r1, r1
 800166c:	4488      	add	r8, r1
 800166e:	e5b3      	b.n	80011d8 <__aeabi_dadd+0x22c>
 8001670:	2100      	movs	r1, #0
 8001672:	4a01      	ldr	r2, [pc, #4]	; (8001678 <__aeabi_dadd+0x6cc>)
 8001674:	000b      	movs	r3, r1
 8001676:	e533      	b.n	80010e0 <__aeabi_dadd+0x134>
 8001678:	000007ff 	.word	0x000007ff
 800167c:	ff7fffff 	.word	0xff7fffff

08001680 <__aeabi_dmul>:
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	4657      	mov	r7, sl
 8001684:	464e      	mov	r6, r9
 8001686:	4645      	mov	r5, r8
 8001688:	46de      	mov	lr, fp
 800168a:	b5e0      	push	{r5, r6, r7, lr}
 800168c:	4698      	mov	r8, r3
 800168e:	030c      	lsls	r4, r1, #12
 8001690:	004b      	lsls	r3, r1, #1
 8001692:	0006      	movs	r6, r0
 8001694:	4692      	mov	sl, r2
 8001696:	b087      	sub	sp, #28
 8001698:	0b24      	lsrs	r4, r4, #12
 800169a:	0d5b      	lsrs	r3, r3, #21
 800169c:	0fcf      	lsrs	r7, r1, #31
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d06c      	beq.n	800177c <__aeabi_dmul+0xfc>
 80016a2:	4add      	ldr	r2, [pc, #884]	; (8001a18 <__aeabi_dmul+0x398>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d100      	bne.n	80016aa <__aeabi_dmul+0x2a>
 80016a8:	e086      	b.n	80017b8 <__aeabi_dmul+0x138>
 80016aa:	0f42      	lsrs	r2, r0, #29
 80016ac:	00e4      	lsls	r4, r4, #3
 80016ae:	4314      	orrs	r4, r2
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	0412      	lsls	r2, r2, #16
 80016b4:	4314      	orrs	r4, r2
 80016b6:	4ad9      	ldr	r2, [pc, #868]	; (8001a1c <__aeabi_dmul+0x39c>)
 80016b8:	00c5      	lsls	r5, r0, #3
 80016ba:	4694      	mov	ip, r2
 80016bc:	4463      	add	r3, ip
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	4699      	mov	r9, r3
 80016c4:	469b      	mov	fp, r3
 80016c6:	4643      	mov	r3, r8
 80016c8:	4642      	mov	r2, r8
 80016ca:	031e      	lsls	r6, r3, #12
 80016cc:	0fd2      	lsrs	r2, r2, #31
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4650      	mov	r0, sl
 80016d2:	4690      	mov	r8, r2
 80016d4:	0b36      	lsrs	r6, r6, #12
 80016d6:	0d5b      	lsrs	r3, r3, #21
 80016d8:	d100      	bne.n	80016dc <__aeabi_dmul+0x5c>
 80016da:	e078      	b.n	80017ce <__aeabi_dmul+0x14e>
 80016dc:	4ace      	ldr	r2, [pc, #824]	; (8001a18 <__aeabi_dmul+0x398>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01d      	beq.n	800171e <__aeabi_dmul+0x9e>
 80016e2:	49ce      	ldr	r1, [pc, #824]	; (8001a1c <__aeabi_dmul+0x39c>)
 80016e4:	0f42      	lsrs	r2, r0, #29
 80016e6:	468c      	mov	ip, r1
 80016e8:	9900      	ldr	r1, [sp, #0]
 80016ea:	4463      	add	r3, ip
 80016ec:	00f6      	lsls	r6, r6, #3
 80016ee:	468c      	mov	ip, r1
 80016f0:	4316      	orrs	r6, r2
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	449c      	add	ip, r3
 80016f6:	0412      	lsls	r2, r2, #16
 80016f8:	4663      	mov	r3, ip
 80016fa:	4316      	orrs	r6, r2
 80016fc:	00c2      	lsls	r2, r0, #3
 80016fe:	2000      	movs	r0, #0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	9900      	ldr	r1, [sp, #0]
 8001704:	4643      	mov	r3, r8
 8001706:	3101      	adds	r1, #1
 8001708:	468c      	mov	ip, r1
 800170a:	4649      	mov	r1, r9
 800170c:	407b      	eors	r3, r7
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	290f      	cmp	r1, #15
 8001712:	d900      	bls.n	8001716 <__aeabi_dmul+0x96>
 8001714:	e07e      	b.n	8001814 <__aeabi_dmul+0x194>
 8001716:	4bc2      	ldr	r3, [pc, #776]	; (8001a20 <__aeabi_dmul+0x3a0>)
 8001718:	0089      	lsls	r1, r1, #2
 800171a:	5859      	ldr	r1, [r3, r1]
 800171c:	468f      	mov	pc, r1
 800171e:	4652      	mov	r2, sl
 8001720:	9b00      	ldr	r3, [sp, #0]
 8001722:	4332      	orrs	r2, r6
 8001724:	d000      	beq.n	8001728 <__aeabi_dmul+0xa8>
 8001726:	e156      	b.n	80019d6 <__aeabi_dmul+0x356>
 8001728:	49bb      	ldr	r1, [pc, #748]	; (8001a18 <__aeabi_dmul+0x398>)
 800172a:	2600      	movs	r6, #0
 800172c:	468c      	mov	ip, r1
 800172e:	4463      	add	r3, ip
 8001730:	4649      	mov	r1, r9
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2302      	movs	r3, #2
 8001736:	4319      	orrs	r1, r3
 8001738:	4689      	mov	r9, r1
 800173a:	2002      	movs	r0, #2
 800173c:	e7e1      	b.n	8001702 <__aeabi_dmul+0x82>
 800173e:	4643      	mov	r3, r8
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	0034      	movs	r4, r6
 8001744:	0015      	movs	r5, r2
 8001746:	4683      	mov	fp, r0
 8001748:	465b      	mov	r3, fp
 800174a:	2b02      	cmp	r3, #2
 800174c:	d05e      	beq.n	800180c <__aeabi_dmul+0x18c>
 800174e:	2b03      	cmp	r3, #3
 8001750:	d100      	bne.n	8001754 <__aeabi_dmul+0xd4>
 8001752:	e1f3      	b.n	8001b3c <__aeabi_dmul+0x4bc>
 8001754:	2b01      	cmp	r3, #1
 8001756:	d000      	beq.n	800175a <__aeabi_dmul+0xda>
 8001758:	e118      	b.n	800198c <__aeabi_dmul+0x30c>
 800175a:	2200      	movs	r2, #0
 800175c:	2400      	movs	r4, #0
 800175e:	2500      	movs	r5, #0
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	0512      	lsls	r2, r2, #20
 8001764:	4322      	orrs	r2, r4
 8001766:	07db      	lsls	r3, r3, #31
 8001768:	431a      	orrs	r2, r3
 800176a:	0028      	movs	r0, r5
 800176c:	0011      	movs	r1, r2
 800176e:	b007      	add	sp, #28
 8001770:	bcf0      	pop	{r4, r5, r6, r7}
 8001772:	46bb      	mov	fp, r7
 8001774:	46b2      	mov	sl, r6
 8001776:	46a9      	mov	r9, r5
 8001778:	46a0      	mov	r8, r4
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	0025      	movs	r5, r4
 800177e:	4305      	orrs	r5, r0
 8001780:	d100      	bne.n	8001784 <__aeabi_dmul+0x104>
 8001782:	e141      	b.n	8001a08 <__aeabi_dmul+0x388>
 8001784:	2c00      	cmp	r4, #0
 8001786:	d100      	bne.n	800178a <__aeabi_dmul+0x10a>
 8001788:	e1ad      	b.n	8001ae6 <__aeabi_dmul+0x466>
 800178a:	0020      	movs	r0, r4
 800178c:	f000 fe6c 	bl	8002468 <__clzsi2>
 8001790:	0001      	movs	r1, r0
 8001792:	0002      	movs	r2, r0
 8001794:	390b      	subs	r1, #11
 8001796:	231d      	movs	r3, #29
 8001798:	0010      	movs	r0, r2
 800179a:	1a5b      	subs	r3, r3, r1
 800179c:	0031      	movs	r1, r6
 800179e:	0035      	movs	r5, r6
 80017a0:	3808      	subs	r0, #8
 80017a2:	4084      	lsls	r4, r0
 80017a4:	40d9      	lsrs	r1, r3
 80017a6:	4085      	lsls	r5, r0
 80017a8:	430c      	orrs	r4, r1
 80017aa:	489e      	ldr	r0, [pc, #632]	; (8001a24 <__aeabi_dmul+0x3a4>)
 80017ac:	1a83      	subs	r3, r0, r2
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	4699      	mov	r9, r3
 80017b4:	469b      	mov	fp, r3
 80017b6:	e786      	b.n	80016c6 <__aeabi_dmul+0x46>
 80017b8:	0005      	movs	r5, r0
 80017ba:	4325      	orrs	r5, r4
 80017bc:	d000      	beq.n	80017c0 <__aeabi_dmul+0x140>
 80017be:	e11c      	b.n	80019fa <__aeabi_dmul+0x37a>
 80017c0:	2208      	movs	r2, #8
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2302      	movs	r3, #2
 80017c6:	2400      	movs	r4, #0
 80017c8:	4691      	mov	r9, r2
 80017ca:	469b      	mov	fp, r3
 80017cc:	e77b      	b.n	80016c6 <__aeabi_dmul+0x46>
 80017ce:	4652      	mov	r2, sl
 80017d0:	4332      	orrs	r2, r6
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dmul+0x156>
 80017d4:	e10a      	b.n	80019ec <__aeabi_dmul+0x36c>
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x15c>
 80017da:	e176      	b.n	8001aca <__aeabi_dmul+0x44a>
 80017dc:	0030      	movs	r0, r6
 80017de:	f000 fe43 	bl	8002468 <__clzsi2>
 80017e2:	0002      	movs	r2, r0
 80017e4:	3a0b      	subs	r2, #11
 80017e6:	231d      	movs	r3, #29
 80017e8:	0001      	movs	r1, r0
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	4652      	mov	r2, sl
 80017ee:	3908      	subs	r1, #8
 80017f0:	40da      	lsrs	r2, r3
 80017f2:	408e      	lsls	r6, r1
 80017f4:	4316      	orrs	r6, r2
 80017f6:	4652      	mov	r2, sl
 80017f8:	408a      	lsls	r2, r1
 80017fa:	9b00      	ldr	r3, [sp, #0]
 80017fc:	4989      	ldr	r1, [pc, #548]	; (8001a24 <__aeabi_dmul+0x3a4>)
 80017fe:	1a18      	subs	r0, r3, r0
 8001800:	0003      	movs	r3, r0
 8001802:	468c      	mov	ip, r1
 8001804:	4463      	add	r3, ip
 8001806:	2000      	movs	r0, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	e77a      	b.n	8001702 <__aeabi_dmul+0x82>
 800180c:	2400      	movs	r4, #0
 800180e:	2500      	movs	r5, #0
 8001810:	4a81      	ldr	r2, [pc, #516]	; (8001a18 <__aeabi_dmul+0x398>)
 8001812:	e7a5      	b.n	8001760 <__aeabi_dmul+0xe0>
 8001814:	0c2f      	lsrs	r7, r5, #16
 8001816:	042d      	lsls	r5, r5, #16
 8001818:	0c2d      	lsrs	r5, r5, #16
 800181a:	002b      	movs	r3, r5
 800181c:	0c11      	lsrs	r1, r2, #16
 800181e:	0412      	lsls	r2, r2, #16
 8001820:	0c12      	lsrs	r2, r2, #16
 8001822:	4353      	muls	r3, r2
 8001824:	4698      	mov	r8, r3
 8001826:	0013      	movs	r3, r2
 8001828:	0028      	movs	r0, r5
 800182a:	437b      	muls	r3, r7
 800182c:	4699      	mov	r9, r3
 800182e:	4348      	muls	r0, r1
 8001830:	4448      	add	r0, r9
 8001832:	4683      	mov	fp, r0
 8001834:	4640      	mov	r0, r8
 8001836:	000b      	movs	r3, r1
 8001838:	0c00      	lsrs	r0, r0, #16
 800183a:	4682      	mov	sl, r0
 800183c:	4658      	mov	r0, fp
 800183e:	437b      	muls	r3, r7
 8001840:	4450      	add	r0, sl
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	4581      	cmp	r9, r0
 8001846:	d906      	bls.n	8001856 <__aeabi_dmul+0x1d6>
 8001848:	469a      	mov	sl, r3
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	4699      	mov	r9, r3
 8001850:	44ca      	add	sl, r9
 8001852:	4653      	mov	r3, sl
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	0c03      	lsrs	r3, r0, #16
 8001858:	469b      	mov	fp, r3
 800185a:	4643      	mov	r3, r8
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	0400      	lsls	r0, r0, #16
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	4698      	mov	r8, r3
 8001864:	0003      	movs	r3, r0
 8001866:	4443      	add	r3, r8
 8001868:	9304      	str	r3, [sp, #16]
 800186a:	0c33      	lsrs	r3, r6, #16
 800186c:	4699      	mov	r9, r3
 800186e:	002b      	movs	r3, r5
 8001870:	0436      	lsls	r6, r6, #16
 8001872:	0c36      	lsrs	r6, r6, #16
 8001874:	4373      	muls	r3, r6
 8001876:	4698      	mov	r8, r3
 8001878:	0033      	movs	r3, r6
 800187a:	437b      	muls	r3, r7
 800187c:	469a      	mov	sl, r3
 800187e:	464b      	mov	r3, r9
 8001880:	435d      	muls	r5, r3
 8001882:	435f      	muls	r7, r3
 8001884:	4643      	mov	r3, r8
 8001886:	4455      	add	r5, sl
 8001888:	0c18      	lsrs	r0, r3, #16
 800188a:	1940      	adds	r0, r0, r5
 800188c:	4582      	cmp	sl, r0
 800188e:	d903      	bls.n	8001898 <__aeabi_dmul+0x218>
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	025b      	lsls	r3, r3, #9
 8001894:	469a      	mov	sl, r3
 8001896:	4457      	add	r7, sl
 8001898:	0c05      	lsrs	r5, r0, #16
 800189a:	19eb      	adds	r3, r5, r7
 800189c:	9305      	str	r3, [sp, #20]
 800189e:	4643      	mov	r3, r8
 80018a0:	041d      	lsls	r5, r3, #16
 80018a2:	0c2d      	lsrs	r5, r5, #16
 80018a4:	0400      	lsls	r0, r0, #16
 80018a6:	1940      	adds	r0, r0, r5
 80018a8:	0c25      	lsrs	r5, r4, #16
 80018aa:	0424      	lsls	r4, r4, #16
 80018ac:	0c24      	lsrs	r4, r4, #16
 80018ae:	0027      	movs	r7, r4
 80018b0:	4357      	muls	r7, r2
 80018b2:	436a      	muls	r2, r5
 80018b4:	4690      	mov	r8, r2
 80018b6:	002a      	movs	r2, r5
 80018b8:	0c3b      	lsrs	r3, r7, #16
 80018ba:	469a      	mov	sl, r3
 80018bc:	434a      	muls	r2, r1
 80018be:	4361      	muls	r1, r4
 80018c0:	4441      	add	r1, r8
 80018c2:	4451      	add	r1, sl
 80018c4:	4483      	add	fp, r0
 80018c6:	4588      	cmp	r8, r1
 80018c8:	d903      	bls.n	80018d2 <__aeabi_dmul+0x252>
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	025b      	lsls	r3, r3, #9
 80018ce:	4698      	mov	r8, r3
 80018d0:	4442      	add	r2, r8
 80018d2:	043f      	lsls	r7, r7, #16
 80018d4:	0c0b      	lsrs	r3, r1, #16
 80018d6:	0c3f      	lsrs	r7, r7, #16
 80018d8:	0409      	lsls	r1, r1, #16
 80018da:	19c9      	adds	r1, r1, r7
 80018dc:	0027      	movs	r7, r4
 80018de:	4698      	mov	r8, r3
 80018e0:	464b      	mov	r3, r9
 80018e2:	4377      	muls	r7, r6
 80018e4:	435c      	muls	r4, r3
 80018e6:	436e      	muls	r6, r5
 80018e8:	435d      	muls	r5, r3
 80018ea:	0c3b      	lsrs	r3, r7, #16
 80018ec:	4699      	mov	r9, r3
 80018ee:	19a4      	adds	r4, r4, r6
 80018f0:	444c      	add	r4, r9
 80018f2:	4442      	add	r2, r8
 80018f4:	9503      	str	r5, [sp, #12]
 80018f6:	42a6      	cmp	r6, r4
 80018f8:	d904      	bls.n	8001904 <__aeabi_dmul+0x284>
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	4698      	mov	r8, r3
 8001900:	4445      	add	r5, r8
 8001902:	9503      	str	r5, [sp, #12]
 8001904:	9b02      	ldr	r3, [sp, #8]
 8001906:	043f      	lsls	r7, r7, #16
 8001908:	445b      	add	r3, fp
 800190a:	001e      	movs	r6, r3
 800190c:	4283      	cmp	r3, r0
 800190e:	4180      	sbcs	r0, r0
 8001910:	0423      	lsls	r3, r4, #16
 8001912:	4698      	mov	r8, r3
 8001914:	9b05      	ldr	r3, [sp, #20]
 8001916:	0c3f      	lsrs	r7, r7, #16
 8001918:	4447      	add	r7, r8
 800191a:	4698      	mov	r8, r3
 800191c:	1876      	adds	r6, r6, r1
 800191e:	428e      	cmp	r6, r1
 8001920:	4189      	sbcs	r1, r1
 8001922:	4447      	add	r7, r8
 8001924:	4240      	negs	r0, r0
 8001926:	183d      	adds	r5, r7, r0
 8001928:	46a8      	mov	r8, r5
 800192a:	4693      	mov	fp, r2
 800192c:	4249      	negs	r1, r1
 800192e:	468a      	mov	sl, r1
 8001930:	44c3      	add	fp, r8
 8001932:	429f      	cmp	r7, r3
 8001934:	41bf      	sbcs	r7, r7
 8001936:	4580      	cmp	r8, r0
 8001938:	4180      	sbcs	r0, r0
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	44da      	add	sl, fp
 800193e:	4698      	mov	r8, r3
 8001940:	4653      	mov	r3, sl
 8001942:	4240      	negs	r0, r0
 8001944:	427f      	negs	r7, r7
 8001946:	4307      	orrs	r7, r0
 8001948:	0c24      	lsrs	r4, r4, #16
 800194a:	4593      	cmp	fp, r2
 800194c:	4192      	sbcs	r2, r2
 800194e:	458a      	cmp	sl, r1
 8001950:	4189      	sbcs	r1, r1
 8001952:	193f      	adds	r7, r7, r4
 8001954:	0ddc      	lsrs	r4, r3, #23
 8001956:	9b04      	ldr	r3, [sp, #16]
 8001958:	0275      	lsls	r5, r6, #9
 800195a:	431d      	orrs	r5, r3
 800195c:	1e68      	subs	r0, r5, #1
 800195e:	4185      	sbcs	r5, r0
 8001960:	4653      	mov	r3, sl
 8001962:	4252      	negs	r2, r2
 8001964:	4249      	negs	r1, r1
 8001966:	430a      	orrs	r2, r1
 8001968:	18bf      	adds	r7, r7, r2
 800196a:	4447      	add	r7, r8
 800196c:	0df6      	lsrs	r6, r6, #23
 800196e:	027f      	lsls	r7, r7, #9
 8001970:	4335      	orrs	r5, r6
 8001972:	025a      	lsls	r2, r3, #9
 8001974:	433c      	orrs	r4, r7
 8001976:	4315      	orrs	r5, r2
 8001978:	01fb      	lsls	r3, r7, #7
 800197a:	d400      	bmi.n	800197e <__aeabi_dmul+0x2fe>
 800197c:	e0c1      	b.n	8001b02 <__aeabi_dmul+0x482>
 800197e:	2101      	movs	r1, #1
 8001980:	086a      	lsrs	r2, r5, #1
 8001982:	400d      	ands	r5, r1
 8001984:	4315      	orrs	r5, r2
 8001986:	07e2      	lsls	r2, r4, #31
 8001988:	4315      	orrs	r5, r2
 800198a:	0864      	lsrs	r4, r4, #1
 800198c:	4926      	ldr	r1, [pc, #152]	; (8001a28 <__aeabi_dmul+0x3a8>)
 800198e:	4461      	add	r1, ip
 8001990:	2900      	cmp	r1, #0
 8001992:	dd56      	ble.n	8001a42 <__aeabi_dmul+0x3c2>
 8001994:	076b      	lsls	r3, r5, #29
 8001996:	d009      	beq.n	80019ac <__aeabi_dmul+0x32c>
 8001998:	220f      	movs	r2, #15
 800199a:	402a      	ands	r2, r5
 800199c:	2a04      	cmp	r2, #4
 800199e:	d005      	beq.n	80019ac <__aeabi_dmul+0x32c>
 80019a0:	1d2a      	adds	r2, r5, #4
 80019a2:	42aa      	cmp	r2, r5
 80019a4:	41ad      	sbcs	r5, r5
 80019a6:	426d      	negs	r5, r5
 80019a8:	1964      	adds	r4, r4, r5
 80019aa:	0015      	movs	r5, r2
 80019ac:	01e3      	lsls	r3, r4, #7
 80019ae:	d504      	bpl.n	80019ba <__aeabi_dmul+0x33a>
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <__aeabi_dmul+0x3ac>)
 80019b4:	00c9      	lsls	r1, r1, #3
 80019b6:	4014      	ands	r4, r2
 80019b8:	4461      	add	r1, ip
 80019ba:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <__aeabi_dmul+0x3b0>)
 80019bc:	4291      	cmp	r1, r2
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dmul+0x342>
 80019c0:	e724      	b.n	800180c <__aeabi_dmul+0x18c>
 80019c2:	0762      	lsls	r2, r4, #29
 80019c4:	08ed      	lsrs	r5, r5, #3
 80019c6:	0264      	lsls	r4, r4, #9
 80019c8:	0549      	lsls	r1, r1, #21
 80019ca:	4315      	orrs	r5, r2
 80019cc:	0b24      	lsrs	r4, r4, #12
 80019ce:	0d4a      	lsrs	r2, r1, #21
 80019d0:	e6c6      	b.n	8001760 <__aeabi_dmul+0xe0>
 80019d2:	9701      	str	r7, [sp, #4]
 80019d4:	e6b8      	b.n	8001748 <__aeabi_dmul+0xc8>
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <__aeabi_dmul+0x398>)
 80019d8:	2003      	movs	r0, #3
 80019da:	4694      	mov	ip, r2
 80019dc:	4463      	add	r3, ip
 80019de:	464a      	mov	r2, r9
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2303      	movs	r3, #3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	4691      	mov	r9, r2
 80019e8:	4652      	mov	r2, sl
 80019ea:	e68a      	b.n	8001702 <__aeabi_dmul+0x82>
 80019ec:	4649      	mov	r1, r9
 80019ee:	2301      	movs	r3, #1
 80019f0:	4319      	orrs	r1, r3
 80019f2:	4689      	mov	r9, r1
 80019f4:	2600      	movs	r6, #0
 80019f6:	2001      	movs	r0, #1
 80019f8:	e683      	b.n	8001702 <__aeabi_dmul+0x82>
 80019fa:	220c      	movs	r2, #12
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2303      	movs	r3, #3
 8001a00:	0005      	movs	r5, r0
 8001a02:	4691      	mov	r9, r2
 8001a04:	469b      	mov	fp, r3
 8001a06:	e65e      	b.n	80016c6 <__aeabi_dmul+0x46>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	2400      	movs	r4, #0
 8001a14:	469b      	mov	fp, r3
 8001a16:	e656      	b.n	80016c6 <__aeabi_dmul+0x46>
 8001a18:	000007ff 	.word	0x000007ff
 8001a1c:	fffffc01 	.word	0xfffffc01
 8001a20:	08014088 	.word	0x08014088
 8001a24:	fffffc0d 	.word	0xfffffc0d
 8001a28:	000003ff 	.word	0x000003ff
 8001a2c:	feffffff 	.word	0xfeffffff
 8001a30:	000007fe 	.word	0x000007fe
 8001a34:	2300      	movs	r3, #0
 8001a36:	2480      	movs	r4, #128	; 0x80
 8001a38:	2500      	movs	r5, #0
 8001a3a:	4a44      	ldr	r2, [pc, #272]	; (8001b4c <__aeabi_dmul+0x4cc>)
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	0324      	lsls	r4, r4, #12
 8001a40:	e68e      	b.n	8001760 <__aeabi_dmul+0xe0>
 8001a42:	2001      	movs	r0, #1
 8001a44:	1a40      	subs	r0, r0, r1
 8001a46:	2838      	cmp	r0, #56	; 0x38
 8001a48:	dd00      	ble.n	8001a4c <__aeabi_dmul+0x3cc>
 8001a4a:	e686      	b.n	800175a <__aeabi_dmul+0xda>
 8001a4c:	281f      	cmp	r0, #31
 8001a4e:	dd5b      	ble.n	8001b08 <__aeabi_dmul+0x488>
 8001a50:	221f      	movs	r2, #31
 8001a52:	0023      	movs	r3, r4
 8001a54:	4252      	negs	r2, r2
 8001a56:	1a51      	subs	r1, r2, r1
 8001a58:	40cb      	lsrs	r3, r1
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	2820      	cmp	r0, #32
 8001a5e:	d003      	beq.n	8001a68 <__aeabi_dmul+0x3e8>
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <__aeabi_dmul+0x4d0>)
 8001a62:	4462      	add	r2, ip
 8001a64:	4094      	lsls	r4, r2
 8001a66:	4325      	orrs	r5, r4
 8001a68:	1e6a      	subs	r2, r5, #1
 8001a6a:	4195      	sbcs	r5, r2
 8001a6c:	002a      	movs	r2, r5
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	2107      	movs	r1, #7
 8001a72:	000d      	movs	r5, r1
 8001a74:	2400      	movs	r4, #0
 8001a76:	4015      	ands	r5, r2
 8001a78:	4211      	tst	r1, r2
 8001a7a:	d05b      	beq.n	8001b34 <__aeabi_dmul+0x4b4>
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	2400      	movs	r4, #0
 8001a80:	4011      	ands	r1, r2
 8001a82:	2904      	cmp	r1, #4
 8001a84:	d053      	beq.n	8001b2e <__aeabi_dmul+0x4ae>
 8001a86:	1d11      	adds	r1, r2, #4
 8001a88:	4291      	cmp	r1, r2
 8001a8a:	4192      	sbcs	r2, r2
 8001a8c:	4252      	negs	r2, r2
 8001a8e:	18a4      	adds	r4, r4, r2
 8001a90:	000a      	movs	r2, r1
 8001a92:	0223      	lsls	r3, r4, #8
 8001a94:	d54b      	bpl.n	8001b2e <__aeabi_dmul+0x4ae>
 8001a96:	2201      	movs	r2, #1
 8001a98:	2400      	movs	r4, #0
 8001a9a:	2500      	movs	r5, #0
 8001a9c:	e660      	b.n	8001760 <__aeabi_dmul+0xe0>
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	031b      	lsls	r3, r3, #12
 8001aa2:	421c      	tst	r4, r3
 8001aa4:	d009      	beq.n	8001aba <__aeabi_dmul+0x43a>
 8001aa6:	421e      	tst	r6, r3
 8001aa8:	d107      	bne.n	8001aba <__aeabi_dmul+0x43a>
 8001aaa:	4333      	orrs	r3, r6
 8001aac:	031c      	lsls	r4, r3, #12
 8001aae:	4643      	mov	r3, r8
 8001ab0:	0015      	movs	r5, r2
 8001ab2:	0b24      	lsrs	r4, r4, #12
 8001ab4:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <__aeabi_dmul+0x4cc>)
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	e652      	b.n	8001760 <__aeabi_dmul+0xe0>
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0312      	lsls	r2, r2, #12
 8001abe:	4314      	orrs	r4, r2
 8001ac0:	0324      	lsls	r4, r4, #12
 8001ac2:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <__aeabi_dmul+0x4cc>)
 8001ac4:	0b24      	lsrs	r4, r4, #12
 8001ac6:	9701      	str	r7, [sp, #4]
 8001ac8:	e64a      	b.n	8001760 <__aeabi_dmul+0xe0>
 8001aca:	f000 fccd 	bl	8002468 <__clzsi2>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	3215      	adds	r2, #21
 8001ad4:	3020      	adds	r0, #32
 8001ad6:	2a1c      	cmp	r2, #28
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dmul+0x45c>
 8001ada:	e684      	b.n	80017e6 <__aeabi_dmul+0x166>
 8001adc:	4656      	mov	r6, sl
 8001ade:	3b08      	subs	r3, #8
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	409e      	lsls	r6, r3
 8001ae4:	e689      	b.n	80017fa <__aeabi_dmul+0x17a>
 8001ae6:	f000 fcbf 	bl	8002468 <__clzsi2>
 8001aea:	0001      	movs	r1, r0
 8001aec:	0002      	movs	r2, r0
 8001aee:	3115      	adds	r1, #21
 8001af0:	3220      	adds	r2, #32
 8001af2:	291c      	cmp	r1, #28
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_dmul+0x478>
 8001af6:	e64e      	b.n	8001796 <__aeabi_dmul+0x116>
 8001af8:	0034      	movs	r4, r6
 8001afa:	3808      	subs	r0, #8
 8001afc:	2500      	movs	r5, #0
 8001afe:	4084      	lsls	r4, r0
 8001b00:	e653      	b.n	80017aa <__aeabi_dmul+0x12a>
 8001b02:	9b00      	ldr	r3, [sp, #0]
 8001b04:	469c      	mov	ip, r3
 8001b06:	e741      	b.n	800198c <__aeabi_dmul+0x30c>
 8001b08:	4912      	ldr	r1, [pc, #72]	; (8001b54 <__aeabi_dmul+0x4d4>)
 8001b0a:	0022      	movs	r2, r4
 8001b0c:	4461      	add	r1, ip
 8001b0e:	002e      	movs	r6, r5
 8001b10:	408d      	lsls	r5, r1
 8001b12:	408a      	lsls	r2, r1
 8001b14:	40c6      	lsrs	r6, r0
 8001b16:	1e69      	subs	r1, r5, #1
 8001b18:	418d      	sbcs	r5, r1
 8001b1a:	4332      	orrs	r2, r6
 8001b1c:	432a      	orrs	r2, r5
 8001b1e:	40c4      	lsrs	r4, r0
 8001b20:	0753      	lsls	r3, r2, #29
 8001b22:	d0b6      	beq.n	8001a92 <__aeabi_dmul+0x412>
 8001b24:	210f      	movs	r1, #15
 8001b26:	4011      	ands	r1, r2
 8001b28:	2904      	cmp	r1, #4
 8001b2a:	d1ac      	bne.n	8001a86 <__aeabi_dmul+0x406>
 8001b2c:	e7b1      	b.n	8001a92 <__aeabi_dmul+0x412>
 8001b2e:	0765      	lsls	r5, r4, #29
 8001b30:	0264      	lsls	r4, r4, #9
 8001b32:	0b24      	lsrs	r4, r4, #12
 8001b34:	08d2      	lsrs	r2, r2, #3
 8001b36:	4315      	orrs	r5, r2
 8001b38:	2200      	movs	r2, #0
 8001b3a:	e611      	b.n	8001760 <__aeabi_dmul+0xe0>
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	0312      	lsls	r2, r2, #12
 8001b40:	4314      	orrs	r4, r2
 8001b42:	0324      	lsls	r4, r4, #12
 8001b44:	4a01      	ldr	r2, [pc, #4]	; (8001b4c <__aeabi_dmul+0x4cc>)
 8001b46:	0b24      	lsrs	r4, r4, #12
 8001b48:	e60a      	b.n	8001760 <__aeabi_dmul+0xe0>
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	000007ff 	.word	0x000007ff
 8001b50:	0000043e 	.word	0x0000043e
 8001b54:	0000041e 	.word	0x0000041e

08001b58 <__aeabi_dsub>:
 8001b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5a:	4657      	mov	r7, sl
 8001b5c:	464e      	mov	r6, r9
 8001b5e:	4645      	mov	r5, r8
 8001b60:	46de      	mov	lr, fp
 8001b62:	0004      	movs	r4, r0
 8001b64:	b5e0      	push	{r5, r6, r7, lr}
 8001b66:	001f      	movs	r7, r3
 8001b68:	0010      	movs	r0, r2
 8001b6a:	030b      	lsls	r3, r1, #12
 8001b6c:	0f62      	lsrs	r2, r4, #29
 8001b6e:	004e      	lsls	r6, r1, #1
 8001b70:	0fcd      	lsrs	r5, r1, #31
 8001b72:	0a5b      	lsrs	r3, r3, #9
 8001b74:	0339      	lsls	r1, r7, #12
 8001b76:	4313      	orrs	r3, r2
 8001b78:	0a49      	lsrs	r1, r1, #9
 8001b7a:	00e2      	lsls	r2, r4, #3
 8001b7c:	0f44      	lsrs	r4, r0, #29
 8001b7e:	4321      	orrs	r1, r4
 8001b80:	4cc2      	ldr	r4, [pc, #776]	; (8001e8c <__aeabi_dsub+0x334>)
 8001b82:	4691      	mov	r9, r2
 8001b84:	4692      	mov	sl, r2
 8001b86:	00c0      	lsls	r0, r0, #3
 8001b88:	007a      	lsls	r2, r7, #1
 8001b8a:	4680      	mov	r8, r0
 8001b8c:	0d76      	lsrs	r6, r6, #21
 8001b8e:	0d52      	lsrs	r2, r2, #21
 8001b90:	0fff      	lsrs	r7, r7, #31
 8001b92:	42a2      	cmp	r2, r4
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x40>
 8001b96:	e0b4      	b.n	8001d02 <__aeabi_dsub+0x1aa>
 8001b98:	2401      	movs	r4, #1
 8001b9a:	4067      	eors	r7, r4
 8001b9c:	46bb      	mov	fp, r7
 8001b9e:	42bd      	cmp	r5, r7
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x4c>
 8001ba2:	e088      	b.n	8001cb6 <__aeabi_dsub+0x15e>
 8001ba4:	1ab4      	subs	r4, r6, r2
 8001ba6:	46a4      	mov	ip, r4
 8001ba8:	2c00      	cmp	r4, #0
 8001baa:	dc00      	bgt.n	8001bae <__aeabi_dsub+0x56>
 8001bac:	e0b2      	b.n	8001d14 <__aeabi_dsub+0x1bc>
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x5c>
 8001bb2:	e0c5      	b.n	8001d40 <__aeabi_dsub+0x1e8>
 8001bb4:	4ab5      	ldr	r2, [pc, #724]	; (8001e8c <__aeabi_dsub+0x334>)
 8001bb6:	4296      	cmp	r6, r2
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x64>
 8001bba:	e28b      	b.n	80020d4 <__aeabi_dsub+0x57c>
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	0412      	lsls	r2, r2, #16
 8001bc0:	4311      	orrs	r1, r2
 8001bc2:	4662      	mov	r2, ip
 8001bc4:	2a38      	cmp	r2, #56	; 0x38
 8001bc6:	dd00      	ble.n	8001bca <__aeabi_dsub+0x72>
 8001bc8:	e1a1      	b.n	8001f0e <__aeabi_dsub+0x3b6>
 8001bca:	2a1f      	cmp	r2, #31
 8001bcc:	dd00      	ble.n	8001bd0 <__aeabi_dsub+0x78>
 8001bce:	e216      	b.n	8001ffe <__aeabi_dsub+0x4a6>
 8001bd0:	2720      	movs	r7, #32
 8001bd2:	000c      	movs	r4, r1
 8001bd4:	1abf      	subs	r7, r7, r2
 8001bd6:	40bc      	lsls	r4, r7
 8001bd8:	0002      	movs	r2, r0
 8001bda:	46a0      	mov	r8, r4
 8001bdc:	4664      	mov	r4, ip
 8001bde:	40b8      	lsls	r0, r7
 8001be0:	40e2      	lsrs	r2, r4
 8001be2:	4644      	mov	r4, r8
 8001be4:	4314      	orrs	r4, r2
 8001be6:	0002      	movs	r2, r0
 8001be8:	1e50      	subs	r0, r2, #1
 8001bea:	4182      	sbcs	r2, r0
 8001bec:	4660      	mov	r0, ip
 8001bee:	40c1      	lsrs	r1, r0
 8001bf0:	4322      	orrs	r2, r4
 8001bf2:	1a5b      	subs	r3, r3, r1
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	1a8c      	subs	r4, r1, r2
 8001bf8:	45a1      	cmp	r9, r4
 8001bfa:	4192      	sbcs	r2, r2
 8001bfc:	4252      	negs	r2, r2
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	4698      	mov	r8, r3
 8001c02:	4643      	mov	r3, r8
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	d400      	bmi.n	8001c0a <__aeabi_dsub+0xb2>
 8001c08:	e117      	b.n	8001e3a <__aeabi_dsub+0x2e2>
 8001c0a:	4643      	mov	r3, r8
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	0a5b      	lsrs	r3, r3, #9
 8001c10:	4698      	mov	r8, r3
 8001c12:	4643      	mov	r3, r8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0xc2>
 8001c18:	e16c      	b.n	8001ef4 <__aeabi_dsub+0x39c>
 8001c1a:	4640      	mov	r0, r8
 8001c1c:	f000 fc24 	bl	8002468 <__clzsi2>
 8001c20:	0002      	movs	r2, r0
 8001c22:	3a08      	subs	r2, #8
 8001c24:	2120      	movs	r1, #32
 8001c26:	0020      	movs	r0, r4
 8001c28:	4643      	mov	r3, r8
 8001c2a:	1a89      	subs	r1, r1, r2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	40c8      	lsrs	r0, r1
 8001c30:	4094      	lsls	r4, r2
 8001c32:	4303      	orrs	r3, r0
 8001c34:	4296      	cmp	r6, r2
 8001c36:	dd00      	ble.n	8001c3a <__aeabi_dsub+0xe2>
 8001c38:	e157      	b.n	8001eea <__aeabi_dsub+0x392>
 8001c3a:	1b96      	subs	r6, r2, r6
 8001c3c:	1c71      	adds	r1, r6, #1
 8001c3e:	291f      	cmp	r1, #31
 8001c40:	dd00      	ble.n	8001c44 <__aeabi_dsub+0xec>
 8001c42:	e1cb      	b.n	8001fdc <__aeabi_dsub+0x484>
 8001c44:	2220      	movs	r2, #32
 8001c46:	0018      	movs	r0, r3
 8001c48:	0026      	movs	r6, r4
 8001c4a:	1a52      	subs	r2, r2, r1
 8001c4c:	4094      	lsls	r4, r2
 8001c4e:	4090      	lsls	r0, r2
 8001c50:	40ce      	lsrs	r6, r1
 8001c52:	40cb      	lsrs	r3, r1
 8001c54:	1e62      	subs	r2, r4, #1
 8001c56:	4194      	sbcs	r4, r2
 8001c58:	4330      	orrs	r0, r6
 8001c5a:	4698      	mov	r8, r3
 8001c5c:	2600      	movs	r6, #0
 8001c5e:	4304      	orrs	r4, r0
 8001c60:	0763      	lsls	r3, r4, #29
 8001c62:	d009      	beq.n	8001c78 <__aeabi_dsub+0x120>
 8001c64:	230f      	movs	r3, #15
 8001c66:	4023      	ands	r3, r4
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d005      	beq.n	8001c78 <__aeabi_dsub+0x120>
 8001c6c:	1d23      	adds	r3, r4, #4
 8001c6e:	42a3      	cmp	r3, r4
 8001c70:	41a4      	sbcs	r4, r4
 8001c72:	4264      	negs	r4, r4
 8001c74:	44a0      	add	r8, r4
 8001c76:	001c      	movs	r4, r3
 8001c78:	4643      	mov	r3, r8
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	d400      	bmi.n	8001c80 <__aeabi_dsub+0x128>
 8001c7e:	e0df      	b.n	8001e40 <__aeabi_dsub+0x2e8>
 8001c80:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <__aeabi_dsub+0x334>)
 8001c82:	3601      	adds	r6, #1
 8001c84:	429e      	cmp	r6, r3
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x132>
 8001c88:	e0fb      	b.n	8001e82 <__aeabi_dsub+0x32a>
 8001c8a:	4642      	mov	r2, r8
 8001c8c:	4b80      	ldr	r3, [pc, #512]	; (8001e90 <__aeabi_dsub+0x338>)
 8001c8e:	08e4      	lsrs	r4, r4, #3
 8001c90:	401a      	ands	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	0571      	lsls	r1, r6, #21
 8001c96:	0752      	lsls	r2, r2, #29
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	4322      	orrs	r2, r4
 8001c9c:	0b1b      	lsrs	r3, r3, #12
 8001c9e:	0d49      	lsrs	r1, r1, #21
 8001ca0:	0509      	lsls	r1, r1, #20
 8001ca2:	07ed      	lsls	r5, r5, #31
 8001ca4:	4319      	orrs	r1, r3
 8001ca6:	4329      	orrs	r1, r5
 8001ca8:	0010      	movs	r0, r2
 8001caa:	bcf0      	pop	{r4, r5, r6, r7}
 8001cac:	46bb      	mov	fp, r7
 8001cae:	46b2      	mov	sl, r6
 8001cb0:	46a9      	mov	r9, r5
 8001cb2:	46a0      	mov	r8, r4
 8001cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb6:	1ab4      	subs	r4, r6, r2
 8001cb8:	46a4      	mov	ip, r4
 8001cba:	2c00      	cmp	r4, #0
 8001cbc:	dd58      	ble.n	8001d70 <__aeabi_dsub+0x218>
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x16c>
 8001cc2:	e09e      	b.n	8001e02 <__aeabi_dsub+0x2aa>
 8001cc4:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <__aeabi_dsub+0x334>)
 8001cc6:	4296      	cmp	r6, r2
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x174>
 8001cca:	e13b      	b.n	8001f44 <__aeabi_dsub+0x3ec>
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0412      	lsls	r2, r2, #16
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	4662      	mov	r2, ip
 8001cd4:	2a38      	cmp	r2, #56	; 0x38
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_dsub+0x182>
 8001cd8:	e0c1      	b.n	8001e5e <__aeabi_dsub+0x306>
 8001cda:	2a1f      	cmp	r2, #31
 8001cdc:	dc00      	bgt.n	8001ce0 <__aeabi_dsub+0x188>
 8001cde:	e1bb      	b.n	8002058 <__aeabi_dsub+0x500>
 8001ce0:	000c      	movs	r4, r1
 8001ce2:	3a20      	subs	r2, #32
 8001ce4:	40d4      	lsrs	r4, r2
 8001ce6:	0022      	movs	r2, r4
 8001ce8:	4664      	mov	r4, ip
 8001cea:	2c20      	cmp	r4, #32
 8001cec:	d004      	beq.n	8001cf8 <__aeabi_dsub+0x1a0>
 8001cee:	2740      	movs	r7, #64	; 0x40
 8001cf0:	1b3f      	subs	r7, r7, r4
 8001cf2:	40b9      	lsls	r1, r7
 8001cf4:	4308      	orrs	r0, r1
 8001cf6:	4680      	mov	r8, r0
 8001cf8:	4644      	mov	r4, r8
 8001cfa:	1e61      	subs	r1, r4, #1
 8001cfc:	418c      	sbcs	r4, r1
 8001cfe:	4314      	orrs	r4, r2
 8001d00:	e0b1      	b.n	8001e66 <__aeabi_dsub+0x30e>
 8001d02:	000c      	movs	r4, r1
 8001d04:	4304      	orrs	r4, r0
 8001d06:	d02a      	beq.n	8001d5e <__aeabi_dsub+0x206>
 8001d08:	46bb      	mov	fp, r7
 8001d0a:	42bd      	cmp	r5, r7
 8001d0c:	d02d      	beq.n	8001d6a <__aeabi_dsub+0x212>
 8001d0e:	4c61      	ldr	r4, [pc, #388]	; (8001e94 <__aeabi_dsub+0x33c>)
 8001d10:	46a4      	mov	ip, r4
 8001d12:	44b4      	add	ip, r6
 8001d14:	4664      	mov	r4, ip
 8001d16:	2c00      	cmp	r4, #0
 8001d18:	d05c      	beq.n	8001dd4 <__aeabi_dsub+0x27c>
 8001d1a:	1b94      	subs	r4, r2, r6
 8001d1c:	46a4      	mov	ip, r4
 8001d1e:	2e00      	cmp	r6, #0
 8001d20:	d000      	beq.n	8001d24 <__aeabi_dsub+0x1cc>
 8001d22:	e115      	b.n	8001f50 <__aeabi_dsub+0x3f8>
 8001d24:	464d      	mov	r5, r9
 8001d26:	431d      	orrs	r5, r3
 8001d28:	d100      	bne.n	8001d2c <__aeabi_dsub+0x1d4>
 8001d2a:	e1c3      	b.n	80020b4 <__aeabi_dsub+0x55c>
 8001d2c:	1e65      	subs	r5, r4, #1
 8001d2e:	2c01      	cmp	r4, #1
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x1dc>
 8001d32:	e20c      	b.n	800214e <__aeabi_dsub+0x5f6>
 8001d34:	4e55      	ldr	r6, [pc, #340]	; (8001e8c <__aeabi_dsub+0x334>)
 8001d36:	42b4      	cmp	r4, r6
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x1e4>
 8001d3a:	e1f8      	b.n	800212e <__aeabi_dsub+0x5d6>
 8001d3c:	46ac      	mov	ip, r5
 8001d3e:	e10e      	b.n	8001f5e <__aeabi_dsub+0x406>
 8001d40:	000a      	movs	r2, r1
 8001d42:	4302      	orrs	r2, r0
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x1f0>
 8001d46:	e136      	b.n	8001fb6 <__aeabi_dsub+0x45e>
 8001d48:	0022      	movs	r2, r4
 8001d4a:	3a01      	subs	r2, #1
 8001d4c:	2c01      	cmp	r4, #1
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x1fa>
 8001d50:	e1c6      	b.n	80020e0 <__aeabi_dsub+0x588>
 8001d52:	4c4e      	ldr	r4, [pc, #312]	; (8001e8c <__aeabi_dsub+0x334>)
 8001d54:	45a4      	cmp	ip, r4
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x202>
 8001d58:	e0f4      	b.n	8001f44 <__aeabi_dsub+0x3ec>
 8001d5a:	4694      	mov	ip, r2
 8001d5c:	e731      	b.n	8001bc2 <__aeabi_dsub+0x6a>
 8001d5e:	2401      	movs	r4, #1
 8001d60:	4067      	eors	r7, r4
 8001d62:	46bb      	mov	fp, r7
 8001d64:	42bd      	cmp	r5, r7
 8001d66:	d000      	beq.n	8001d6a <__aeabi_dsub+0x212>
 8001d68:	e71c      	b.n	8001ba4 <__aeabi_dsub+0x4c>
 8001d6a:	4c4a      	ldr	r4, [pc, #296]	; (8001e94 <__aeabi_dsub+0x33c>)
 8001d6c:	46a4      	mov	ip, r4
 8001d6e:	44b4      	add	ip, r6
 8001d70:	4664      	mov	r4, ip
 8001d72:	2c00      	cmp	r4, #0
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x220>
 8001d76:	e0cf      	b.n	8001f18 <__aeabi_dsub+0x3c0>
 8001d78:	1b94      	subs	r4, r2, r6
 8001d7a:	46a4      	mov	ip, r4
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x22a>
 8001d80:	e15c      	b.n	800203c <__aeabi_dsub+0x4e4>
 8001d82:	4e42      	ldr	r6, [pc, #264]	; (8001e8c <__aeabi_dsub+0x334>)
 8001d84:	42b2      	cmp	r2, r6
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x232>
 8001d88:	e1ec      	b.n	8002164 <__aeabi_dsub+0x60c>
 8001d8a:	2680      	movs	r6, #128	; 0x80
 8001d8c:	0436      	lsls	r6, r6, #16
 8001d8e:	4333      	orrs	r3, r6
 8001d90:	4664      	mov	r4, ip
 8001d92:	2c38      	cmp	r4, #56	; 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x240>
 8001d96:	e1b3      	b.n	8002100 <__aeabi_dsub+0x5a8>
 8001d98:	2c1f      	cmp	r4, #31
 8001d9a:	dd00      	ble.n	8001d9e <__aeabi_dsub+0x246>
 8001d9c:	e238      	b.n	8002210 <__aeabi_dsub+0x6b8>
 8001d9e:	2620      	movs	r6, #32
 8001da0:	1b36      	subs	r6, r6, r4
 8001da2:	001c      	movs	r4, r3
 8001da4:	40b4      	lsls	r4, r6
 8001da6:	464f      	mov	r7, r9
 8001da8:	46a0      	mov	r8, r4
 8001daa:	4664      	mov	r4, ip
 8001dac:	40e7      	lsrs	r7, r4
 8001dae:	4644      	mov	r4, r8
 8001db0:	433c      	orrs	r4, r7
 8001db2:	464f      	mov	r7, r9
 8001db4:	40b7      	lsls	r7, r6
 8001db6:	003e      	movs	r6, r7
 8001db8:	1e77      	subs	r7, r6, #1
 8001dba:	41be      	sbcs	r6, r7
 8001dbc:	4334      	orrs	r4, r6
 8001dbe:	4666      	mov	r6, ip
 8001dc0:	40f3      	lsrs	r3, r6
 8001dc2:	18c9      	adds	r1, r1, r3
 8001dc4:	1824      	adds	r4, r4, r0
 8001dc6:	4284      	cmp	r4, r0
 8001dc8:	419b      	sbcs	r3, r3
 8001dca:	425b      	negs	r3, r3
 8001dcc:	4698      	mov	r8, r3
 8001dce:	0016      	movs	r6, r2
 8001dd0:	4488      	add	r8, r1
 8001dd2:	e04e      	b.n	8001e72 <__aeabi_dsub+0x31a>
 8001dd4:	4a30      	ldr	r2, [pc, #192]	; (8001e98 <__aeabi_dsub+0x340>)
 8001dd6:	1c74      	adds	r4, r6, #1
 8001dd8:	4214      	tst	r4, r2
 8001dda:	d000      	beq.n	8001dde <__aeabi_dsub+0x286>
 8001ddc:	e0d6      	b.n	8001f8c <__aeabi_dsub+0x434>
 8001dde:	464a      	mov	r2, r9
 8001de0:	431a      	orrs	r2, r3
 8001de2:	2e00      	cmp	r6, #0
 8001de4:	d000      	beq.n	8001de8 <__aeabi_dsub+0x290>
 8001de6:	e15b      	b.n	80020a0 <__aeabi_dsub+0x548>
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x296>
 8001dec:	e1a5      	b.n	800213a <__aeabi_dsub+0x5e2>
 8001dee:	000a      	movs	r2, r1
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x29e>
 8001df4:	e1bb      	b.n	800216e <__aeabi_dsub+0x616>
 8001df6:	464a      	mov	r2, r9
 8001df8:	0759      	lsls	r1, r3, #29
 8001dfa:	08d2      	lsrs	r2, r2, #3
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	e027      	b.n	8001e52 <__aeabi_dsub+0x2fa>
 8001e02:	000a      	movs	r2, r1
 8001e04:	4302      	orrs	r2, r0
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x2b2>
 8001e08:	e174      	b.n	80020f4 <__aeabi_dsub+0x59c>
 8001e0a:	0022      	movs	r2, r4
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	2c01      	cmp	r4, #1
 8001e10:	d005      	beq.n	8001e1e <__aeabi_dsub+0x2c6>
 8001e12:	4c1e      	ldr	r4, [pc, #120]	; (8001e8c <__aeabi_dsub+0x334>)
 8001e14:	45a4      	cmp	ip, r4
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x2c2>
 8001e18:	e094      	b.n	8001f44 <__aeabi_dsub+0x3ec>
 8001e1a:	4694      	mov	ip, r2
 8001e1c:	e759      	b.n	8001cd2 <__aeabi_dsub+0x17a>
 8001e1e:	4448      	add	r0, r9
 8001e20:	4548      	cmp	r0, r9
 8001e22:	4192      	sbcs	r2, r2
 8001e24:	185b      	adds	r3, r3, r1
 8001e26:	4698      	mov	r8, r3
 8001e28:	0004      	movs	r4, r0
 8001e2a:	4252      	negs	r2, r2
 8001e2c:	4490      	add	r8, r2
 8001e2e:	4643      	mov	r3, r8
 8001e30:	2602      	movs	r6, #2
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	d500      	bpl.n	8001e38 <__aeabi_dsub+0x2e0>
 8001e36:	e0c4      	b.n	8001fc2 <__aeabi_dsub+0x46a>
 8001e38:	3e01      	subs	r6, #1
 8001e3a:	0763      	lsls	r3, r4, #29
 8001e3c:	d000      	beq.n	8001e40 <__aeabi_dsub+0x2e8>
 8001e3e:	e711      	b.n	8001c64 <__aeabi_dsub+0x10c>
 8001e40:	4643      	mov	r3, r8
 8001e42:	46b4      	mov	ip, r6
 8001e44:	0759      	lsls	r1, r3, #29
 8001e46:	08e2      	lsrs	r2, r4, #3
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	490f      	ldr	r1, [pc, #60]	; (8001e8c <__aeabi_dsub+0x334>)
 8001e4e:	458c      	cmp	ip, r1
 8001e50:	d040      	beq.n	8001ed4 <__aeabi_dsub+0x37c>
 8001e52:	4661      	mov	r1, ip
 8001e54:	031b      	lsls	r3, r3, #12
 8001e56:	0549      	lsls	r1, r1, #21
 8001e58:	0b1b      	lsrs	r3, r3, #12
 8001e5a:	0d49      	lsrs	r1, r1, #21
 8001e5c:	e720      	b.n	8001ca0 <__aeabi_dsub+0x148>
 8001e5e:	4301      	orrs	r1, r0
 8001e60:	000c      	movs	r4, r1
 8001e62:	1e61      	subs	r1, r4, #1
 8001e64:	418c      	sbcs	r4, r1
 8001e66:	444c      	add	r4, r9
 8001e68:	454c      	cmp	r4, r9
 8001e6a:	4192      	sbcs	r2, r2
 8001e6c:	4252      	negs	r2, r2
 8001e6e:	4690      	mov	r8, r2
 8001e70:	4498      	add	r8, r3
 8001e72:	4643      	mov	r3, r8
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	d5e0      	bpl.n	8001e3a <__aeabi_dsub+0x2e2>
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <__aeabi_dsub+0x334>)
 8001e7a:	3601      	adds	r6, #1
 8001e7c:	429e      	cmp	r6, r3
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dsub+0x32a>
 8001e80:	e09f      	b.n	8001fc2 <__aeabi_dsub+0x46a>
 8001e82:	0031      	movs	r1, r6
 8001e84:	2300      	movs	r3, #0
 8001e86:	2200      	movs	r2, #0
 8001e88:	e70a      	b.n	8001ca0 <__aeabi_dsub+0x148>
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	000007ff 	.word	0x000007ff
 8001e90:	ff7fffff 	.word	0xff7fffff
 8001e94:	fffff801 	.word	0xfffff801
 8001e98:	000007fe 	.word	0x000007fe
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_dsub+0x34a>
 8001ea0:	e160      	b.n	8002164 <__aeabi_dsub+0x60c>
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	d04d      	beq.n	8001f44 <__aeabi_dsub+0x3ec>
 8001ea8:	464a      	mov	r2, r9
 8001eaa:	075c      	lsls	r4, r3, #29
 8001eac:	08d2      	lsrs	r2, r2, #3
 8001eae:	4322      	orrs	r2, r4
 8001eb0:	2480      	movs	r4, #128	; 0x80
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	0324      	lsls	r4, r4, #12
 8001eb6:	4223      	tst	r3, r4
 8001eb8:	d007      	beq.n	8001eca <__aeabi_dsub+0x372>
 8001eba:	08ce      	lsrs	r6, r1, #3
 8001ebc:	4226      	tst	r6, r4
 8001ebe:	d104      	bne.n	8001eca <__aeabi_dsub+0x372>
 8001ec0:	465d      	mov	r5, fp
 8001ec2:	0033      	movs	r3, r6
 8001ec4:	08c2      	lsrs	r2, r0, #3
 8001ec6:	0749      	lsls	r1, r1, #29
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	0f51      	lsrs	r1, r2, #29
 8001ecc:	00d2      	lsls	r2, r2, #3
 8001ece:	08d2      	lsrs	r2, r2, #3
 8001ed0:	0749      	lsls	r1, r1, #29
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	4319      	orrs	r1, r3
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dsub+0x384>
 8001eda:	e1c8      	b.n	800226e <__aeabi_dsub+0x716>
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0309      	lsls	r1, r1, #12
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	031b      	lsls	r3, r3, #12
 8001ee4:	49d5      	ldr	r1, [pc, #852]	; (800223c <__aeabi_dsub+0x6e4>)
 8001ee6:	0b1b      	lsrs	r3, r3, #12
 8001ee8:	e6da      	b.n	8001ca0 <__aeabi_dsub+0x148>
 8001eea:	49d5      	ldr	r1, [pc, #852]	; (8002240 <__aeabi_dsub+0x6e8>)
 8001eec:	1ab6      	subs	r6, r6, r2
 8001eee:	400b      	ands	r3, r1
 8001ef0:	4698      	mov	r8, r3
 8001ef2:	e6b5      	b.n	8001c60 <__aeabi_dsub+0x108>
 8001ef4:	0020      	movs	r0, r4
 8001ef6:	f000 fab7 	bl	8002468 <__clzsi2>
 8001efa:	0002      	movs	r2, r0
 8001efc:	3218      	adds	r2, #24
 8001efe:	2a1f      	cmp	r2, #31
 8001f00:	dc00      	bgt.n	8001f04 <__aeabi_dsub+0x3ac>
 8001f02:	e68f      	b.n	8001c24 <__aeabi_dsub+0xcc>
 8001f04:	0023      	movs	r3, r4
 8001f06:	3808      	subs	r0, #8
 8001f08:	4083      	lsls	r3, r0
 8001f0a:	2400      	movs	r4, #0
 8001f0c:	e692      	b.n	8001c34 <__aeabi_dsub+0xdc>
 8001f0e:	4308      	orrs	r0, r1
 8001f10:	0002      	movs	r2, r0
 8001f12:	1e50      	subs	r0, r2, #1
 8001f14:	4182      	sbcs	r2, r0
 8001f16:	e66d      	b.n	8001bf4 <__aeabi_dsub+0x9c>
 8001f18:	4cca      	ldr	r4, [pc, #808]	; (8002244 <__aeabi_dsub+0x6ec>)
 8001f1a:	1c72      	adds	r2, r6, #1
 8001f1c:	4222      	tst	r2, r4
 8001f1e:	d000      	beq.n	8001f22 <__aeabi_dsub+0x3ca>
 8001f20:	e0ad      	b.n	800207e <__aeabi_dsub+0x526>
 8001f22:	464a      	mov	r2, r9
 8001f24:	431a      	orrs	r2, r3
 8001f26:	2e00      	cmp	r6, #0
 8001f28:	d1b8      	bne.n	8001e9c <__aeabi_dsub+0x344>
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x3d8>
 8001f2e:	e158      	b.n	80021e2 <__aeabi_dsub+0x68a>
 8001f30:	000a      	movs	r2, r1
 8001f32:	4302      	orrs	r2, r0
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dsub+0x3e0>
 8001f36:	e159      	b.n	80021ec <__aeabi_dsub+0x694>
 8001f38:	464a      	mov	r2, r9
 8001f3a:	0759      	lsls	r1, r3, #29
 8001f3c:	08d2      	lsrs	r2, r2, #3
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	e786      	b.n	8001e52 <__aeabi_dsub+0x2fa>
 8001f44:	464a      	mov	r2, r9
 8001f46:	0759      	lsls	r1, r3, #29
 8001f48:	08d2      	lsrs	r2, r2, #3
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	e7c1      	b.n	8001ed4 <__aeabi_dsub+0x37c>
 8001f50:	4dba      	ldr	r5, [pc, #744]	; (800223c <__aeabi_dsub+0x6e4>)
 8001f52:	42aa      	cmp	r2, r5
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x400>
 8001f56:	e11e      	b.n	8002196 <__aeabi_dsub+0x63e>
 8001f58:	2580      	movs	r5, #128	; 0x80
 8001f5a:	042d      	lsls	r5, r5, #16
 8001f5c:	432b      	orrs	r3, r5
 8001f5e:	4664      	mov	r4, ip
 8001f60:	2c38      	cmp	r4, #56	; 0x38
 8001f62:	dc5d      	bgt.n	8002020 <__aeabi_dsub+0x4c8>
 8001f64:	2c1f      	cmp	r4, #31
 8001f66:	dd00      	ble.n	8001f6a <__aeabi_dsub+0x412>
 8001f68:	e0d0      	b.n	800210c <__aeabi_dsub+0x5b4>
 8001f6a:	2520      	movs	r5, #32
 8001f6c:	4667      	mov	r7, ip
 8001f6e:	1b2d      	subs	r5, r5, r4
 8001f70:	464e      	mov	r6, r9
 8001f72:	001c      	movs	r4, r3
 8001f74:	40fe      	lsrs	r6, r7
 8001f76:	40ac      	lsls	r4, r5
 8001f78:	4334      	orrs	r4, r6
 8001f7a:	464e      	mov	r6, r9
 8001f7c:	40ae      	lsls	r6, r5
 8001f7e:	0035      	movs	r5, r6
 8001f80:	40fb      	lsrs	r3, r7
 8001f82:	1e6e      	subs	r6, r5, #1
 8001f84:	41b5      	sbcs	r5, r6
 8001f86:	1ac9      	subs	r1, r1, r3
 8001f88:	432c      	orrs	r4, r5
 8001f8a:	e04e      	b.n	800202a <__aeabi_dsub+0x4d2>
 8001f8c:	464a      	mov	r2, r9
 8001f8e:	1a14      	subs	r4, r2, r0
 8001f90:	45a1      	cmp	r9, r4
 8001f92:	4192      	sbcs	r2, r2
 8001f94:	4252      	negs	r2, r2
 8001f96:	4690      	mov	r8, r2
 8001f98:	1a5f      	subs	r7, r3, r1
 8001f9a:	003a      	movs	r2, r7
 8001f9c:	4647      	mov	r7, r8
 8001f9e:	1bd2      	subs	r2, r2, r7
 8001fa0:	4690      	mov	r8, r2
 8001fa2:	0212      	lsls	r2, r2, #8
 8001fa4:	d500      	bpl.n	8001fa8 <__aeabi_dsub+0x450>
 8001fa6:	e08b      	b.n	80020c0 <__aeabi_dsub+0x568>
 8001fa8:	4642      	mov	r2, r8
 8001faa:	4322      	orrs	r2, r4
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x458>
 8001fae:	e630      	b.n	8001c12 <__aeabi_dsub+0xba>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	e74d      	b.n	8001e52 <__aeabi_dsub+0x2fa>
 8001fb6:	464a      	mov	r2, r9
 8001fb8:	0759      	lsls	r1, r3, #29
 8001fba:	08d2      	lsrs	r2, r2, #3
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	e744      	b.n	8001e4c <__aeabi_dsub+0x2f4>
 8001fc2:	4642      	mov	r2, r8
 8001fc4:	4b9e      	ldr	r3, [pc, #632]	; (8002240 <__aeabi_dsub+0x6e8>)
 8001fc6:	0861      	lsrs	r1, r4, #1
 8001fc8:	401a      	ands	r2, r3
 8001fca:	0013      	movs	r3, r2
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4014      	ands	r4, r2
 8001fd0:	430c      	orrs	r4, r1
 8001fd2:	07da      	lsls	r2, r3, #31
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	4314      	orrs	r4, r2
 8001fda:	e641      	b.n	8001c60 <__aeabi_dsub+0x108>
 8001fdc:	001a      	movs	r2, r3
 8001fde:	3e1f      	subs	r6, #31
 8001fe0:	40f2      	lsrs	r2, r6
 8001fe2:	0016      	movs	r6, r2
 8001fe4:	2920      	cmp	r1, #32
 8001fe6:	d003      	beq.n	8001ff0 <__aeabi_dsub+0x498>
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	1a51      	subs	r1, r2, r1
 8001fec:	408b      	lsls	r3, r1
 8001fee:	431c      	orrs	r4, r3
 8001ff0:	1e62      	subs	r2, r4, #1
 8001ff2:	4194      	sbcs	r4, r2
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4334      	orrs	r4, r6
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	e71d      	b.n	8001e3a <__aeabi_dsub+0x2e2>
 8001ffe:	000c      	movs	r4, r1
 8002000:	3a20      	subs	r2, #32
 8002002:	40d4      	lsrs	r4, r2
 8002004:	0022      	movs	r2, r4
 8002006:	4664      	mov	r4, ip
 8002008:	2c20      	cmp	r4, #32
 800200a:	d004      	beq.n	8002016 <__aeabi_dsub+0x4be>
 800200c:	2740      	movs	r7, #64	; 0x40
 800200e:	1b3f      	subs	r7, r7, r4
 8002010:	40b9      	lsls	r1, r7
 8002012:	4308      	orrs	r0, r1
 8002014:	4680      	mov	r8, r0
 8002016:	4644      	mov	r4, r8
 8002018:	1e61      	subs	r1, r4, #1
 800201a:	418c      	sbcs	r4, r1
 800201c:	4322      	orrs	r2, r4
 800201e:	e5e9      	b.n	8001bf4 <__aeabi_dsub+0x9c>
 8002020:	464c      	mov	r4, r9
 8002022:	4323      	orrs	r3, r4
 8002024:	001c      	movs	r4, r3
 8002026:	1e63      	subs	r3, r4, #1
 8002028:	419c      	sbcs	r4, r3
 800202a:	1b04      	subs	r4, r0, r4
 800202c:	42a0      	cmp	r0, r4
 800202e:	419b      	sbcs	r3, r3
 8002030:	425b      	negs	r3, r3
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	4698      	mov	r8, r3
 8002036:	465d      	mov	r5, fp
 8002038:	0016      	movs	r6, r2
 800203a:	e5e2      	b.n	8001c02 <__aeabi_dsub+0xaa>
 800203c:	464e      	mov	r6, r9
 800203e:	431e      	orrs	r6, r3
 8002040:	d100      	bne.n	8002044 <__aeabi_dsub+0x4ec>
 8002042:	e0ae      	b.n	80021a2 <__aeabi_dsub+0x64a>
 8002044:	1e66      	subs	r6, r4, #1
 8002046:	2c01      	cmp	r4, #1
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x4f4>
 800204a:	e0fd      	b.n	8002248 <__aeabi_dsub+0x6f0>
 800204c:	4f7b      	ldr	r7, [pc, #492]	; (800223c <__aeabi_dsub+0x6e4>)
 800204e:	42bc      	cmp	r4, r7
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x4fc>
 8002052:	e107      	b.n	8002264 <__aeabi_dsub+0x70c>
 8002054:	46b4      	mov	ip, r6
 8002056:	e69b      	b.n	8001d90 <__aeabi_dsub+0x238>
 8002058:	4664      	mov	r4, ip
 800205a:	2220      	movs	r2, #32
 800205c:	1b12      	subs	r2, r2, r4
 800205e:	000c      	movs	r4, r1
 8002060:	4094      	lsls	r4, r2
 8002062:	0007      	movs	r7, r0
 8002064:	4090      	lsls	r0, r2
 8002066:	46a0      	mov	r8, r4
 8002068:	4664      	mov	r4, ip
 800206a:	1e42      	subs	r2, r0, #1
 800206c:	4190      	sbcs	r0, r2
 800206e:	4662      	mov	r2, ip
 8002070:	40e7      	lsrs	r7, r4
 8002072:	4644      	mov	r4, r8
 8002074:	40d1      	lsrs	r1, r2
 8002076:	433c      	orrs	r4, r7
 8002078:	4304      	orrs	r4, r0
 800207a:	185b      	adds	r3, r3, r1
 800207c:	e6f3      	b.n	8001e66 <__aeabi_dsub+0x30e>
 800207e:	4c6f      	ldr	r4, [pc, #444]	; (800223c <__aeabi_dsub+0x6e4>)
 8002080:	42a2      	cmp	r2, r4
 8002082:	d100      	bne.n	8002086 <__aeabi_dsub+0x52e>
 8002084:	e0d5      	b.n	8002232 <__aeabi_dsub+0x6da>
 8002086:	4448      	add	r0, r9
 8002088:	185b      	adds	r3, r3, r1
 800208a:	4548      	cmp	r0, r9
 800208c:	4189      	sbcs	r1, r1
 800208e:	4249      	negs	r1, r1
 8002090:	185b      	adds	r3, r3, r1
 8002092:	07dc      	lsls	r4, r3, #31
 8002094:	0840      	lsrs	r0, r0, #1
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	4698      	mov	r8, r3
 800209a:	0016      	movs	r6, r2
 800209c:	4304      	orrs	r4, r0
 800209e:	e6cc      	b.n	8001e3a <__aeabi_dsub+0x2e2>
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d000      	beq.n	80020a6 <__aeabi_dsub+0x54e>
 80020a4:	e082      	b.n	80021ac <__aeabi_dsub+0x654>
 80020a6:	000a      	movs	r2, r1
 80020a8:	4302      	orrs	r2, r0
 80020aa:	d140      	bne.n	800212e <__aeabi_dsub+0x5d6>
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	2500      	movs	r5, #0
 80020b0:	031b      	lsls	r3, r3, #12
 80020b2:	e713      	b.n	8001edc <__aeabi_dsub+0x384>
 80020b4:	074b      	lsls	r3, r1, #29
 80020b6:	08c2      	lsrs	r2, r0, #3
 80020b8:	431a      	orrs	r2, r3
 80020ba:	465d      	mov	r5, fp
 80020bc:	08cb      	lsrs	r3, r1, #3
 80020be:	e6c5      	b.n	8001e4c <__aeabi_dsub+0x2f4>
 80020c0:	464a      	mov	r2, r9
 80020c2:	1a84      	subs	r4, r0, r2
 80020c4:	42a0      	cmp	r0, r4
 80020c6:	4192      	sbcs	r2, r2
 80020c8:	1acb      	subs	r3, r1, r3
 80020ca:	4252      	negs	r2, r2
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	4698      	mov	r8, r3
 80020d0:	465d      	mov	r5, fp
 80020d2:	e59e      	b.n	8001c12 <__aeabi_dsub+0xba>
 80020d4:	464a      	mov	r2, r9
 80020d6:	0759      	lsls	r1, r3, #29
 80020d8:	08d2      	lsrs	r2, r2, #3
 80020da:	430a      	orrs	r2, r1
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	e6f9      	b.n	8001ed4 <__aeabi_dsub+0x37c>
 80020e0:	464a      	mov	r2, r9
 80020e2:	1a14      	subs	r4, r2, r0
 80020e4:	45a1      	cmp	r9, r4
 80020e6:	4192      	sbcs	r2, r2
 80020e8:	1a5b      	subs	r3, r3, r1
 80020ea:	4252      	negs	r2, r2
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	4698      	mov	r8, r3
 80020f0:	2601      	movs	r6, #1
 80020f2:	e586      	b.n	8001c02 <__aeabi_dsub+0xaa>
 80020f4:	464a      	mov	r2, r9
 80020f6:	0759      	lsls	r1, r3, #29
 80020f8:	08d2      	lsrs	r2, r2, #3
 80020fa:	430a      	orrs	r2, r1
 80020fc:	08db      	lsrs	r3, r3, #3
 80020fe:	e6a5      	b.n	8001e4c <__aeabi_dsub+0x2f4>
 8002100:	464c      	mov	r4, r9
 8002102:	4323      	orrs	r3, r4
 8002104:	001c      	movs	r4, r3
 8002106:	1e63      	subs	r3, r4, #1
 8002108:	419c      	sbcs	r4, r3
 800210a:	e65b      	b.n	8001dc4 <__aeabi_dsub+0x26c>
 800210c:	4665      	mov	r5, ip
 800210e:	001e      	movs	r6, r3
 8002110:	3d20      	subs	r5, #32
 8002112:	40ee      	lsrs	r6, r5
 8002114:	2c20      	cmp	r4, #32
 8002116:	d005      	beq.n	8002124 <__aeabi_dsub+0x5cc>
 8002118:	2540      	movs	r5, #64	; 0x40
 800211a:	1b2d      	subs	r5, r5, r4
 800211c:	40ab      	lsls	r3, r5
 800211e:	464c      	mov	r4, r9
 8002120:	431c      	orrs	r4, r3
 8002122:	46a2      	mov	sl, r4
 8002124:	4654      	mov	r4, sl
 8002126:	1e63      	subs	r3, r4, #1
 8002128:	419c      	sbcs	r4, r3
 800212a:	4334      	orrs	r4, r6
 800212c:	e77d      	b.n	800202a <__aeabi_dsub+0x4d2>
 800212e:	074b      	lsls	r3, r1, #29
 8002130:	08c2      	lsrs	r2, r0, #3
 8002132:	431a      	orrs	r2, r3
 8002134:	465d      	mov	r5, fp
 8002136:	08cb      	lsrs	r3, r1, #3
 8002138:	e6cc      	b.n	8001ed4 <__aeabi_dsub+0x37c>
 800213a:	000a      	movs	r2, r1
 800213c:	4302      	orrs	r2, r0
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x5ea>
 8002140:	e736      	b.n	8001fb0 <__aeabi_dsub+0x458>
 8002142:	074b      	lsls	r3, r1, #29
 8002144:	08c2      	lsrs	r2, r0, #3
 8002146:	431a      	orrs	r2, r3
 8002148:	465d      	mov	r5, fp
 800214a:	08cb      	lsrs	r3, r1, #3
 800214c:	e681      	b.n	8001e52 <__aeabi_dsub+0x2fa>
 800214e:	464a      	mov	r2, r9
 8002150:	1a84      	subs	r4, r0, r2
 8002152:	42a0      	cmp	r0, r4
 8002154:	4192      	sbcs	r2, r2
 8002156:	1acb      	subs	r3, r1, r3
 8002158:	4252      	negs	r2, r2
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	4698      	mov	r8, r3
 800215e:	465d      	mov	r5, fp
 8002160:	2601      	movs	r6, #1
 8002162:	e54e      	b.n	8001c02 <__aeabi_dsub+0xaa>
 8002164:	074b      	lsls	r3, r1, #29
 8002166:	08c2      	lsrs	r2, r0, #3
 8002168:	431a      	orrs	r2, r3
 800216a:	08cb      	lsrs	r3, r1, #3
 800216c:	e6b2      	b.n	8001ed4 <__aeabi_dsub+0x37c>
 800216e:	464a      	mov	r2, r9
 8002170:	1a14      	subs	r4, r2, r0
 8002172:	45a1      	cmp	r9, r4
 8002174:	4192      	sbcs	r2, r2
 8002176:	1a5f      	subs	r7, r3, r1
 8002178:	4252      	negs	r2, r2
 800217a:	1aba      	subs	r2, r7, r2
 800217c:	4690      	mov	r8, r2
 800217e:	0212      	lsls	r2, r2, #8
 8002180:	d56b      	bpl.n	800225a <__aeabi_dsub+0x702>
 8002182:	464a      	mov	r2, r9
 8002184:	1a84      	subs	r4, r0, r2
 8002186:	42a0      	cmp	r0, r4
 8002188:	4192      	sbcs	r2, r2
 800218a:	1acb      	subs	r3, r1, r3
 800218c:	4252      	negs	r2, r2
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	4698      	mov	r8, r3
 8002192:	465d      	mov	r5, fp
 8002194:	e564      	b.n	8001c60 <__aeabi_dsub+0x108>
 8002196:	074b      	lsls	r3, r1, #29
 8002198:	08c2      	lsrs	r2, r0, #3
 800219a:	431a      	orrs	r2, r3
 800219c:	465d      	mov	r5, fp
 800219e:	08cb      	lsrs	r3, r1, #3
 80021a0:	e698      	b.n	8001ed4 <__aeabi_dsub+0x37c>
 80021a2:	074b      	lsls	r3, r1, #29
 80021a4:	08c2      	lsrs	r2, r0, #3
 80021a6:	431a      	orrs	r2, r3
 80021a8:	08cb      	lsrs	r3, r1, #3
 80021aa:	e64f      	b.n	8001e4c <__aeabi_dsub+0x2f4>
 80021ac:	000a      	movs	r2, r1
 80021ae:	4302      	orrs	r2, r0
 80021b0:	d090      	beq.n	80020d4 <__aeabi_dsub+0x57c>
 80021b2:	464a      	mov	r2, r9
 80021b4:	075c      	lsls	r4, r3, #29
 80021b6:	08d2      	lsrs	r2, r2, #3
 80021b8:	4314      	orrs	r4, r2
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	0312      	lsls	r2, r2, #12
 80021c0:	4213      	tst	r3, r2
 80021c2:	d008      	beq.n	80021d6 <__aeabi_dsub+0x67e>
 80021c4:	08ce      	lsrs	r6, r1, #3
 80021c6:	4216      	tst	r6, r2
 80021c8:	d105      	bne.n	80021d6 <__aeabi_dsub+0x67e>
 80021ca:	08c0      	lsrs	r0, r0, #3
 80021cc:	0749      	lsls	r1, r1, #29
 80021ce:	4308      	orrs	r0, r1
 80021d0:	0004      	movs	r4, r0
 80021d2:	465d      	mov	r5, fp
 80021d4:	0033      	movs	r3, r6
 80021d6:	0f61      	lsrs	r1, r4, #29
 80021d8:	00e2      	lsls	r2, r4, #3
 80021da:	0749      	lsls	r1, r1, #29
 80021dc:	08d2      	lsrs	r2, r2, #3
 80021de:	430a      	orrs	r2, r1
 80021e0:	e678      	b.n	8001ed4 <__aeabi_dsub+0x37c>
 80021e2:	074b      	lsls	r3, r1, #29
 80021e4:	08c2      	lsrs	r2, r0, #3
 80021e6:	431a      	orrs	r2, r3
 80021e8:	08cb      	lsrs	r3, r1, #3
 80021ea:	e632      	b.n	8001e52 <__aeabi_dsub+0x2fa>
 80021ec:	4448      	add	r0, r9
 80021ee:	185b      	adds	r3, r3, r1
 80021f0:	4548      	cmp	r0, r9
 80021f2:	4192      	sbcs	r2, r2
 80021f4:	4698      	mov	r8, r3
 80021f6:	4252      	negs	r2, r2
 80021f8:	4490      	add	r8, r2
 80021fa:	4643      	mov	r3, r8
 80021fc:	0004      	movs	r4, r0
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	d400      	bmi.n	8002204 <__aeabi_dsub+0x6ac>
 8002202:	e61a      	b.n	8001e3a <__aeabi_dsub+0x2e2>
 8002204:	4642      	mov	r2, r8
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <__aeabi_dsub+0x6e8>)
 8002208:	2601      	movs	r6, #1
 800220a:	401a      	ands	r2, r3
 800220c:	4690      	mov	r8, r2
 800220e:	e614      	b.n	8001e3a <__aeabi_dsub+0x2e2>
 8002210:	4666      	mov	r6, ip
 8002212:	001f      	movs	r7, r3
 8002214:	3e20      	subs	r6, #32
 8002216:	40f7      	lsrs	r7, r6
 8002218:	2c20      	cmp	r4, #32
 800221a:	d005      	beq.n	8002228 <__aeabi_dsub+0x6d0>
 800221c:	2640      	movs	r6, #64	; 0x40
 800221e:	1b36      	subs	r6, r6, r4
 8002220:	40b3      	lsls	r3, r6
 8002222:	464c      	mov	r4, r9
 8002224:	431c      	orrs	r4, r3
 8002226:	46a2      	mov	sl, r4
 8002228:	4654      	mov	r4, sl
 800222a:	1e63      	subs	r3, r4, #1
 800222c:	419c      	sbcs	r4, r3
 800222e:	433c      	orrs	r4, r7
 8002230:	e5c8      	b.n	8001dc4 <__aeabi_dsub+0x26c>
 8002232:	0011      	movs	r1, r2
 8002234:	2300      	movs	r3, #0
 8002236:	2200      	movs	r2, #0
 8002238:	e532      	b.n	8001ca0 <__aeabi_dsub+0x148>
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	000007ff 	.word	0x000007ff
 8002240:	ff7fffff 	.word	0xff7fffff
 8002244:	000007fe 	.word	0x000007fe
 8002248:	464a      	mov	r2, r9
 800224a:	1814      	adds	r4, r2, r0
 800224c:	4284      	cmp	r4, r0
 800224e:	4192      	sbcs	r2, r2
 8002250:	185b      	adds	r3, r3, r1
 8002252:	4698      	mov	r8, r3
 8002254:	4252      	negs	r2, r2
 8002256:	4490      	add	r8, r2
 8002258:	e5e9      	b.n	8001e2e <__aeabi_dsub+0x2d6>
 800225a:	4642      	mov	r2, r8
 800225c:	4322      	orrs	r2, r4
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x70a>
 8002260:	e6a6      	b.n	8001fb0 <__aeabi_dsub+0x458>
 8002262:	e5ea      	b.n	8001e3a <__aeabi_dsub+0x2e2>
 8002264:	074b      	lsls	r3, r1, #29
 8002266:	08c2      	lsrs	r2, r0, #3
 8002268:	431a      	orrs	r2, r3
 800226a:	08cb      	lsrs	r3, r1, #3
 800226c:	e632      	b.n	8001ed4 <__aeabi_dsub+0x37c>
 800226e:	2200      	movs	r2, #0
 8002270:	4901      	ldr	r1, [pc, #4]	; (8002278 <__aeabi_dsub+0x720>)
 8002272:	0013      	movs	r3, r2
 8002274:	e514      	b.n	8001ca0 <__aeabi_dsub+0x148>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	000007ff 	.word	0x000007ff

0800227c <__aeabi_ui2d>:
 800227c:	b510      	push	{r4, lr}
 800227e:	1e04      	subs	r4, r0, #0
 8002280:	d010      	beq.n	80022a4 <__aeabi_ui2d+0x28>
 8002282:	f000 f8f1 	bl	8002468 <__clzsi2>
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <__aeabi_ui2d+0x48>)
 8002288:	1a1b      	subs	r3, r3, r0
 800228a:	280a      	cmp	r0, #10
 800228c:	dc11      	bgt.n	80022b2 <__aeabi_ui2d+0x36>
 800228e:	220b      	movs	r2, #11
 8002290:	0021      	movs	r1, r4
 8002292:	1a12      	subs	r2, r2, r0
 8002294:	40d1      	lsrs	r1, r2
 8002296:	3015      	adds	r0, #21
 8002298:	030a      	lsls	r2, r1, #12
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	4084      	lsls	r4, r0
 800229e:	0b12      	lsrs	r2, r2, #12
 80022a0:	0d5b      	lsrs	r3, r3, #21
 80022a2:	e001      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2200      	movs	r2, #0
 80022a8:	051b      	lsls	r3, r3, #20
 80022aa:	4313      	orrs	r3, r2
 80022ac:	0020      	movs	r0, r4
 80022ae:	0019      	movs	r1, r3
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	0022      	movs	r2, r4
 80022b4:	380b      	subs	r0, #11
 80022b6:	4082      	lsls	r2, r0
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	0312      	lsls	r2, r2, #12
 80022bc:	2400      	movs	r4, #0
 80022be:	0b12      	lsrs	r2, r2, #12
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	e7f1      	b.n	80022a8 <__aeabi_ui2d+0x2c>
 80022c4:	0000041e 	.word	0x0000041e

080022c8 <__aeabi_f2d>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	0043      	lsls	r3, r0, #1
 80022cc:	0246      	lsls	r6, r0, #9
 80022ce:	0fc4      	lsrs	r4, r0, #31
 80022d0:	20fe      	movs	r0, #254	; 0xfe
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	1c59      	adds	r1, r3, #1
 80022d6:	0a75      	lsrs	r5, r6, #9
 80022d8:	4208      	tst	r0, r1
 80022da:	d00c      	beq.n	80022f6 <__aeabi_f2d+0x2e>
 80022dc:	22e0      	movs	r2, #224	; 0xe0
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4694      	mov	ip, r2
 80022e2:	076d      	lsls	r5, r5, #29
 80022e4:	0b36      	lsrs	r6, r6, #12
 80022e6:	4463      	add	r3, ip
 80022e8:	051b      	lsls	r3, r3, #20
 80022ea:	4333      	orrs	r3, r6
 80022ec:	07e4      	lsls	r4, r4, #31
 80022ee:	4323      	orrs	r3, r4
 80022f0:	0028      	movs	r0, r5
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d114      	bne.n	8002324 <__aeabi_f2d+0x5c>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d01b      	beq.n	8002336 <__aeabi_f2d+0x6e>
 80022fe:	0028      	movs	r0, r5
 8002300:	f000 f8b2 	bl	8002468 <__clzsi2>
 8002304:	280a      	cmp	r0, #10
 8002306:	dc1c      	bgt.n	8002342 <__aeabi_f2d+0x7a>
 8002308:	230b      	movs	r3, #11
 800230a:	002a      	movs	r2, r5
 800230c:	1a1b      	subs	r3, r3, r0
 800230e:	40da      	lsrs	r2, r3
 8002310:	0003      	movs	r3, r0
 8002312:	3315      	adds	r3, #21
 8002314:	409d      	lsls	r5, r3
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <__aeabi_f2d+0x88>)
 8002318:	0312      	lsls	r2, r2, #12
 800231a:	1a1b      	subs	r3, r3, r0
 800231c:	055b      	lsls	r3, r3, #21
 800231e:	0b16      	lsrs	r6, r2, #12
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	e7e1      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002324:	2d00      	cmp	r5, #0
 8002326:	d009      	beq.n	800233c <__aeabi_f2d+0x74>
 8002328:	0b32      	lsrs	r2, r6, #12
 800232a:	2680      	movs	r6, #128	; 0x80
 800232c:	0336      	lsls	r6, r6, #12
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <__aeabi_f2d+0x8c>)
 8002330:	076d      	lsls	r5, r5, #29
 8002332:	4316      	orrs	r6, r2
 8002334:	e7d8      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002336:	2300      	movs	r3, #0
 8002338:	2600      	movs	r6, #0
 800233a:	e7d5      	b.n	80022e8 <__aeabi_f2d+0x20>
 800233c:	2600      	movs	r6, #0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <__aeabi_f2d+0x8c>)
 8002340:	e7d2      	b.n	80022e8 <__aeabi_f2d+0x20>
 8002342:	0003      	movs	r3, r0
 8002344:	002a      	movs	r2, r5
 8002346:	3b0b      	subs	r3, #11
 8002348:	409a      	lsls	r2, r3
 800234a:	2500      	movs	r5, #0
 800234c:	e7e3      	b.n	8002316 <__aeabi_f2d+0x4e>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	00000389 	.word	0x00000389
 8002354:	000007ff 	.word	0x000007ff

08002358 <__aeabi_d2f>:
 8002358:	0002      	movs	r2, r0
 800235a:	004b      	lsls	r3, r1, #1
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	0308      	lsls	r0, r1, #12
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	4e3d      	ldr	r6, [pc, #244]	; (8002458 <__aeabi_d2f+0x100>)
 8002364:	0fcc      	lsrs	r4, r1, #31
 8002366:	0a40      	lsrs	r0, r0, #9
 8002368:	0f51      	lsrs	r1, r2, #29
 800236a:	1c5f      	adds	r7, r3, #1
 800236c:	4308      	orrs	r0, r1
 800236e:	00d5      	lsls	r5, r2, #3
 8002370:	4237      	tst	r7, r6
 8002372:	d00a      	beq.n	800238a <__aeabi_d2f+0x32>
 8002374:	4939      	ldr	r1, [pc, #228]	; (800245c <__aeabi_d2f+0x104>)
 8002376:	185e      	adds	r6, r3, r1
 8002378:	2efe      	cmp	r6, #254	; 0xfe
 800237a:	dd16      	ble.n	80023aa <__aeabi_d2f+0x52>
 800237c:	23ff      	movs	r3, #255	; 0xff
 800237e:	2100      	movs	r1, #0
 8002380:	05db      	lsls	r3, r3, #23
 8002382:	430b      	orrs	r3, r1
 8002384:	07e0      	lsls	r0, r4, #31
 8002386:	4318      	orrs	r0, r3
 8002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <__aeabi_d2f+0x44>
 800238e:	4328      	orrs	r0, r5
 8002390:	d027      	beq.n	80023e2 <__aeabi_d2f+0x8a>
 8002392:	2105      	movs	r1, #5
 8002394:	0189      	lsls	r1, r1, #6
 8002396:	0a49      	lsrs	r1, r1, #9
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e7f1      	b.n	8002380 <__aeabi_d2f+0x28>
 800239c:	4305      	orrs	r5, r0
 800239e:	d0ed      	beq.n	800237c <__aeabi_d2f+0x24>
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	03c9      	lsls	r1, r1, #15
 80023a4:	23ff      	movs	r3, #255	; 0xff
 80023a6:	4301      	orrs	r1, r0
 80023a8:	e7ea      	b.n	8002380 <__aeabi_d2f+0x28>
 80023aa:	2e00      	cmp	r6, #0
 80023ac:	dd1c      	ble.n	80023e8 <__aeabi_d2f+0x90>
 80023ae:	0192      	lsls	r2, r2, #6
 80023b0:	0011      	movs	r1, r2
 80023b2:	1e4a      	subs	r2, r1, #1
 80023b4:	4191      	sbcs	r1, r2
 80023b6:	00c0      	lsls	r0, r0, #3
 80023b8:	0f6d      	lsrs	r5, r5, #29
 80023ba:	4301      	orrs	r1, r0
 80023bc:	4329      	orrs	r1, r5
 80023be:	074b      	lsls	r3, r1, #29
 80023c0:	d048      	beq.n	8002454 <__aeabi_d2f+0xfc>
 80023c2:	230f      	movs	r3, #15
 80023c4:	400b      	ands	r3, r1
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d000      	beq.n	80023cc <__aeabi_d2f+0x74>
 80023ca:	3104      	adds	r1, #4
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	04db      	lsls	r3, r3, #19
 80023d0:	400b      	ands	r3, r1
 80023d2:	d03f      	beq.n	8002454 <__aeabi_d2f+0xfc>
 80023d4:	1c72      	adds	r2, r6, #1
 80023d6:	2efe      	cmp	r6, #254	; 0xfe
 80023d8:	d0d0      	beq.n	800237c <__aeabi_d2f+0x24>
 80023da:	0189      	lsls	r1, r1, #6
 80023dc:	0a49      	lsrs	r1, r1, #9
 80023de:	b2d3      	uxtb	r3, r2
 80023e0:	e7ce      	b.n	8002380 <__aeabi_d2f+0x28>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	e7cb      	b.n	8002380 <__aeabi_d2f+0x28>
 80023e8:	0032      	movs	r2, r6
 80023ea:	3217      	adds	r2, #23
 80023ec:	db22      	blt.n	8002434 <__aeabi_d2f+0xdc>
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	221e      	movs	r2, #30
 80023f2:	0409      	lsls	r1, r1, #16
 80023f4:	4308      	orrs	r0, r1
 80023f6:	1b92      	subs	r2, r2, r6
 80023f8:	2a1f      	cmp	r2, #31
 80023fa:	dd1d      	ble.n	8002438 <__aeabi_d2f+0xe0>
 80023fc:	2102      	movs	r1, #2
 80023fe:	4249      	negs	r1, r1
 8002400:	1b8e      	subs	r6, r1, r6
 8002402:	0001      	movs	r1, r0
 8002404:	40f1      	lsrs	r1, r6
 8002406:	000e      	movs	r6, r1
 8002408:	2a20      	cmp	r2, #32
 800240a:	d004      	beq.n	8002416 <__aeabi_d2f+0xbe>
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <__aeabi_d2f+0x108>)
 800240e:	4694      	mov	ip, r2
 8002410:	4463      	add	r3, ip
 8002412:	4098      	lsls	r0, r3
 8002414:	4305      	orrs	r5, r0
 8002416:	0029      	movs	r1, r5
 8002418:	1e4d      	subs	r5, r1, #1
 800241a:	41a9      	sbcs	r1, r5
 800241c:	4331      	orrs	r1, r6
 800241e:	2600      	movs	r6, #0
 8002420:	074b      	lsls	r3, r1, #29
 8002422:	d1ce      	bne.n	80023c2 <__aeabi_d2f+0x6a>
 8002424:	2080      	movs	r0, #128	; 0x80
 8002426:	000b      	movs	r3, r1
 8002428:	04c0      	lsls	r0, r0, #19
 800242a:	2201      	movs	r2, #1
 800242c:	4003      	ands	r3, r0
 800242e:	4201      	tst	r1, r0
 8002430:	d1d3      	bne.n	80023da <__aeabi_d2f+0x82>
 8002432:	e7af      	b.n	8002394 <__aeabi_d2f+0x3c>
 8002434:	2300      	movs	r3, #0
 8002436:	e7ac      	b.n	8002392 <__aeabi_d2f+0x3a>
 8002438:	490a      	ldr	r1, [pc, #40]	; (8002464 <__aeabi_d2f+0x10c>)
 800243a:	468c      	mov	ip, r1
 800243c:	0029      	movs	r1, r5
 800243e:	4463      	add	r3, ip
 8002440:	40d1      	lsrs	r1, r2
 8002442:	409d      	lsls	r5, r3
 8002444:	000a      	movs	r2, r1
 8002446:	0029      	movs	r1, r5
 8002448:	4098      	lsls	r0, r3
 800244a:	1e4d      	subs	r5, r1, #1
 800244c:	41a9      	sbcs	r1, r5
 800244e:	4301      	orrs	r1, r0
 8002450:	4311      	orrs	r1, r2
 8002452:	e7e4      	b.n	800241e <__aeabi_d2f+0xc6>
 8002454:	0033      	movs	r3, r6
 8002456:	e79d      	b.n	8002394 <__aeabi_d2f+0x3c>
 8002458:	000007fe 	.word	0x000007fe
 800245c:	fffffc80 	.word	0xfffffc80
 8002460:	fffffca2 	.word	0xfffffca2
 8002464:	fffffc82 	.word	0xfffffc82

08002468 <__clzsi2>:
 8002468:	211c      	movs	r1, #28
 800246a:	2301      	movs	r3, #1
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	4298      	cmp	r0, r3
 8002470:	d301      	bcc.n	8002476 <__clzsi2+0xe>
 8002472:	0c00      	lsrs	r0, r0, #16
 8002474:	3910      	subs	r1, #16
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	4298      	cmp	r0, r3
 800247a:	d301      	bcc.n	8002480 <__clzsi2+0x18>
 800247c:	0a00      	lsrs	r0, r0, #8
 800247e:	3908      	subs	r1, #8
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	4298      	cmp	r0, r3
 8002484:	d301      	bcc.n	800248a <__clzsi2+0x22>
 8002486:	0900      	lsrs	r0, r0, #4
 8002488:	3904      	subs	r1, #4
 800248a:	a202      	add	r2, pc, #8	; (adr r2, 8002494 <__clzsi2+0x2c>)
 800248c:	5c10      	ldrb	r0, [r2, r0]
 800248e:	1840      	adds	r0, r0, r1
 8002490:	4770      	bx	lr
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	02020304 	.word	0x02020304
 8002498:	01010101 	.word	0x01010101
	...

080024a4 <__clzdi2>:
 80024a4:	b510      	push	{r4, lr}
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d103      	bne.n	80024b2 <__clzdi2+0xe>
 80024aa:	f7ff ffdd 	bl	8002468 <__clzsi2>
 80024ae:	3020      	adds	r0, #32
 80024b0:	e002      	b.n	80024b8 <__clzdi2+0x14>
 80024b2:	1c08      	adds	r0, r1, #0
 80024b4:	f7ff ffd8 	bl	8002468 <__clzsi2>
 80024b8:	bd10      	pop	{r4, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)

080024bc <__aeabi_d2uiz>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	2200      	movs	r2, #0
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <__aeabi_d2uiz+0x38>)
 80024c2:	0004      	movs	r4, r0
 80024c4:	000d      	movs	r5, r1
 80024c6:	f000 f881 	bl	80025cc <__aeabi_dcmpge>
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d104      	bne.n	80024d8 <__aeabi_d2uiz+0x1c>
 80024ce:	0020      	movs	r0, r4
 80024d0:	0029      	movs	r1, r5
 80024d2:	f000 f811 	bl	80024f8 <__aeabi_d2iz>
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <__aeabi_d2uiz+0x38>)
 80024da:	2200      	movs	r2, #0
 80024dc:	0020      	movs	r0, r4
 80024de:	0029      	movs	r1, r5
 80024e0:	f7ff fb3a 	bl	8001b58 <__aeabi_dsub>
 80024e4:	f000 f808 	bl	80024f8 <__aeabi_d2iz>
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	469c      	mov	ip, r3
 80024ee:	4460      	add	r0, ip
 80024f0:	e7f1      	b.n	80024d6 <__aeabi_d2uiz+0x1a>
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	41e00000 	.word	0x41e00000

080024f8 <__aeabi_d2iz>:
 80024f8:	000a      	movs	r2, r1
 80024fa:	b530      	push	{r4, r5, lr}
 80024fc:	4c13      	ldr	r4, [pc, #76]	; (800254c <__aeabi_d2iz+0x54>)
 80024fe:	0053      	lsls	r3, r2, #1
 8002500:	0309      	lsls	r1, r1, #12
 8002502:	0005      	movs	r5, r0
 8002504:	0b09      	lsrs	r1, r1, #12
 8002506:	2000      	movs	r0, #0
 8002508:	0d5b      	lsrs	r3, r3, #21
 800250a:	0fd2      	lsrs	r2, r2, #31
 800250c:	42a3      	cmp	r3, r4
 800250e:	dd04      	ble.n	800251a <__aeabi_d2iz+0x22>
 8002510:	480f      	ldr	r0, [pc, #60]	; (8002550 <__aeabi_d2iz+0x58>)
 8002512:	4283      	cmp	r3, r0
 8002514:	dd02      	ble.n	800251c <__aeabi_d2iz+0x24>
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <__aeabi_d2iz+0x5c>)
 8002518:	18d0      	adds	r0, r2, r3
 800251a:	bd30      	pop	{r4, r5, pc}
 800251c:	2080      	movs	r0, #128	; 0x80
 800251e:	0340      	lsls	r0, r0, #13
 8002520:	4301      	orrs	r1, r0
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <__aeabi_d2iz+0x60>)
 8002524:	1ac0      	subs	r0, r0, r3
 8002526:	281f      	cmp	r0, #31
 8002528:	dd08      	ble.n	800253c <__aeabi_d2iz+0x44>
 800252a:	480c      	ldr	r0, [pc, #48]	; (800255c <__aeabi_d2iz+0x64>)
 800252c:	1ac3      	subs	r3, r0, r3
 800252e:	40d9      	lsrs	r1, r3
 8002530:	000b      	movs	r3, r1
 8002532:	4258      	negs	r0, r3
 8002534:	2a00      	cmp	r2, #0
 8002536:	d1f0      	bne.n	800251a <__aeabi_d2iz+0x22>
 8002538:	0018      	movs	r0, r3
 800253a:	e7ee      	b.n	800251a <__aeabi_d2iz+0x22>
 800253c:	4c08      	ldr	r4, [pc, #32]	; (8002560 <__aeabi_d2iz+0x68>)
 800253e:	40c5      	lsrs	r5, r0
 8002540:	46a4      	mov	ip, r4
 8002542:	4463      	add	r3, ip
 8002544:	4099      	lsls	r1, r3
 8002546:	000b      	movs	r3, r1
 8002548:	432b      	orrs	r3, r5
 800254a:	e7f2      	b.n	8002532 <__aeabi_d2iz+0x3a>
 800254c:	000003fe 	.word	0x000003fe
 8002550:	0000041d 	.word	0x0000041d
 8002554:	7fffffff 	.word	0x7fffffff
 8002558:	00000433 	.word	0x00000433
 800255c:	00000413 	.word	0x00000413
 8002560:	fffffbed 	.word	0xfffffbed

08002564 <__aeabi_cdrcmple>:
 8002564:	4684      	mov	ip, r0
 8002566:	1c10      	adds	r0, r2, #0
 8002568:	4662      	mov	r2, ip
 800256a:	468c      	mov	ip, r1
 800256c:	1c19      	adds	r1, r3, #0
 800256e:	4663      	mov	r3, ip
 8002570:	e000      	b.n	8002574 <__aeabi_cdcmpeq>
 8002572:	46c0      	nop			; (mov r8, r8)

08002574 <__aeabi_cdcmpeq>:
 8002574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002576:	f000 f8e1 	bl	800273c <__ledf2>
 800257a:	2800      	cmp	r0, #0
 800257c:	d401      	bmi.n	8002582 <__aeabi_cdcmpeq+0xe>
 800257e:	2100      	movs	r1, #0
 8002580:	42c8      	cmn	r0, r1
 8002582:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002584 <__aeabi_dcmpeq>:
 8002584:	b510      	push	{r4, lr}
 8002586:	f000 f82b 	bl	80025e0 <__eqdf2>
 800258a:	4240      	negs	r0, r0
 800258c:	3001      	adds	r0, #1
 800258e:	bd10      	pop	{r4, pc}

08002590 <__aeabi_dcmplt>:
 8002590:	b510      	push	{r4, lr}
 8002592:	f000 f8d3 	bl	800273c <__ledf2>
 8002596:	2800      	cmp	r0, #0
 8002598:	db01      	blt.n	800259e <__aeabi_dcmplt+0xe>
 800259a:	2000      	movs	r0, #0
 800259c:	bd10      	pop	{r4, pc}
 800259e:	2001      	movs	r0, #1
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)

080025a4 <__aeabi_dcmple>:
 80025a4:	b510      	push	{r4, lr}
 80025a6:	f000 f8c9 	bl	800273c <__ledf2>
 80025aa:	2800      	cmp	r0, #0
 80025ac:	dd01      	ble.n	80025b2 <__aeabi_dcmple+0xe>
 80025ae:	2000      	movs	r0, #0
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	2001      	movs	r0, #1
 80025b4:	bd10      	pop	{r4, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)

080025b8 <__aeabi_dcmpgt>:
 80025b8:	b510      	push	{r4, lr}
 80025ba:	f000 f84d 	bl	8002658 <__gedf2>
 80025be:	2800      	cmp	r0, #0
 80025c0:	dc01      	bgt.n	80025c6 <__aeabi_dcmpgt+0xe>
 80025c2:	2000      	movs	r0, #0
 80025c4:	bd10      	pop	{r4, pc}
 80025c6:	2001      	movs	r0, #1
 80025c8:	bd10      	pop	{r4, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)

080025cc <__aeabi_dcmpge>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	f000 f843 	bl	8002658 <__gedf2>
 80025d2:	2800      	cmp	r0, #0
 80025d4:	da01      	bge.n	80025da <__aeabi_dcmpge+0xe>
 80025d6:	2000      	movs	r0, #0
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	2001      	movs	r0, #1
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	46c0      	nop			; (mov r8, r8)

080025e0 <__eqdf2>:
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	464f      	mov	r7, r9
 80025e4:	4646      	mov	r6, r8
 80025e6:	46d6      	mov	lr, sl
 80025e8:	4694      	mov	ip, r2
 80025ea:	4691      	mov	r9, r2
 80025ec:	031a      	lsls	r2, r3, #12
 80025ee:	0b12      	lsrs	r2, r2, #12
 80025f0:	4d18      	ldr	r5, [pc, #96]	; (8002654 <__eqdf2+0x74>)
 80025f2:	b5c0      	push	{r6, r7, lr}
 80025f4:	004c      	lsls	r4, r1, #1
 80025f6:	030f      	lsls	r7, r1, #12
 80025f8:	4692      	mov	sl, r2
 80025fa:	005a      	lsls	r2, r3, #1
 80025fc:	0006      	movs	r6, r0
 80025fe:	4680      	mov	r8, r0
 8002600:	0b3f      	lsrs	r7, r7, #12
 8002602:	2001      	movs	r0, #1
 8002604:	0d64      	lsrs	r4, r4, #21
 8002606:	0fc9      	lsrs	r1, r1, #31
 8002608:	0d52      	lsrs	r2, r2, #21
 800260a:	0fdb      	lsrs	r3, r3, #31
 800260c:	42ac      	cmp	r4, r5
 800260e:	d00a      	beq.n	8002626 <__eqdf2+0x46>
 8002610:	42aa      	cmp	r2, r5
 8002612:	d003      	beq.n	800261c <__eqdf2+0x3c>
 8002614:	4294      	cmp	r4, r2
 8002616:	d101      	bne.n	800261c <__eqdf2+0x3c>
 8002618:	4557      	cmp	r7, sl
 800261a:	d00d      	beq.n	8002638 <__eqdf2+0x58>
 800261c:	bce0      	pop	{r5, r6, r7}
 800261e:	46ba      	mov	sl, r7
 8002620:	46b1      	mov	r9, r6
 8002622:	46a8      	mov	r8, r5
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002626:	003d      	movs	r5, r7
 8002628:	4335      	orrs	r5, r6
 800262a:	d1f7      	bne.n	800261c <__eqdf2+0x3c>
 800262c:	42a2      	cmp	r2, r4
 800262e:	d1f5      	bne.n	800261c <__eqdf2+0x3c>
 8002630:	4652      	mov	r2, sl
 8002632:	4665      	mov	r5, ip
 8002634:	432a      	orrs	r2, r5
 8002636:	d1f1      	bne.n	800261c <__eqdf2+0x3c>
 8002638:	2001      	movs	r0, #1
 800263a:	45c8      	cmp	r8, r9
 800263c:	d1ee      	bne.n	800261c <__eqdf2+0x3c>
 800263e:	4299      	cmp	r1, r3
 8002640:	d006      	beq.n	8002650 <__eqdf2+0x70>
 8002642:	2c00      	cmp	r4, #0
 8002644:	d1ea      	bne.n	800261c <__eqdf2+0x3c>
 8002646:	433e      	orrs	r6, r7
 8002648:	0030      	movs	r0, r6
 800264a:	1e46      	subs	r6, r0, #1
 800264c:	41b0      	sbcs	r0, r6
 800264e:	e7e5      	b.n	800261c <__eqdf2+0x3c>
 8002650:	2000      	movs	r0, #0
 8002652:	e7e3      	b.n	800261c <__eqdf2+0x3c>
 8002654:	000007ff 	.word	0x000007ff

08002658 <__gedf2>:
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	464e      	mov	r6, r9
 800265c:	4645      	mov	r5, r8
 800265e:	4657      	mov	r7, sl
 8002660:	46de      	mov	lr, fp
 8002662:	0004      	movs	r4, r0
 8002664:	0018      	movs	r0, r3
 8002666:	b5e0      	push	{r5, r6, r7, lr}
 8002668:	0016      	movs	r6, r2
 800266a:	031b      	lsls	r3, r3, #12
 800266c:	0b1b      	lsrs	r3, r3, #12
 800266e:	4d32      	ldr	r5, [pc, #200]	; (8002738 <__gedf2+0xe0>)
 8002670:	030f      	lsls	r7, r1, #12
 8002672:	004a      	lsls	r2, r1, #1
 8002674:	4699      	mov	r9, r3
 8002676:	0043      	lsls	r3, r0, #1
 8002678:	46a4      	mov	ip, r4
 800267a:	46b0      	mov	r8, r6
 800267c:	0b3f      	lsrs	r7, r7, #12
 800267e:	0d52      	lsrs	r2, r2, #21
 8002680:	0fc9      	lsrs	r1, r1, #31
 8002682:	0d5b      	lsrs	r3, r3, #21
 8002684:	0fc0      	lsrs	r0, r0, #31
 8002686:	42aa      	cmp	r2, r5
 8002688:	d029      	beq.n	80026de <__gedf2+0x86>
 800268a:	42ab      	cmp	r3, r5
 800268c:	d018      	beq.n	80026c0 <__gedf2+0x68>
 800268e:	2a00      	cmp	r2, #0
 8002690:	d12a      	bne.n	80026e8 <__gedf2+0x90>
 8002692:	433c      	orrs	r4, r7
 8002694:	46a3      	mov	fp, r4
 8002696:	4265      	negs	r5, r4
 8002698:	4165      	adcs	r5, r4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <__gedf2+0x4c>
 800269e:	464c      	mov	r4, r9
 80026a0:	4326      	orrs	r6, r4
 80026a2:	d027      	beq.n	80026f4 <__gedf2+0x9c>
 80026a4:	2d00      	cmp	r5, #0
 80026a6:	d115      	bne.n	80026d4 <__gedf2+0x7c>
 80026a8:	4281      	cmp	r1, r0
 80026aa:	d028      	beq.n	80026fe <__gedf2+0xa6>
 80026ac:	2002      	movs	r0, #2
 80026ae:	3901      	subs	r1, #1
 80026b0:	4008      	ands	r0, r1
 80026b2:	3801      	subs	r0, #1
 80026b4:	bcf0      	pop	{r4, r5, r6, r7}
 80026b6:	46bb      	mov	fp, r7
 80026b8:	46b2      	mov	sl, r6
 80026ba:	46a9      	mov	r9, r5
 80026bc:	46a0      	mov	r8, r4
 80026be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c0:	464d      	mov	r5, r9
 80026c2:	432e      	orrs	r6, r5
 80026c4:	d12f      	bne.n	8002726 <__gedf2+0xce>
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	d1ee      	bne.n	80026a8 <__gedf2+0x50>
 80026ca:	433c      	orrs	r4, r7
 80026cc:	4265      	negs	r5, r4
 80026ce:	4165      	adcs	r5, r4
 80026d0:	2d00      	cmp	r5, #0
 80026d2:	d0e9      	beq.n	80026a8 <__gedf2+0x50>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d1ed      	bne.n	80026b4 <__gedf2+0x5c>
 80026d8:	2001      	movs	r0, #1
 80026da:	4240      	negs	r0, r0
 80026dc:	e7ea      	b.n	80026b4 <__gedf2+0x5c>
 80026de:	003d      	movs	r5, r7
 80026e0:	4325      	orrs	r5, r4
 80026e2:	d120      	bne.n	8002726 <__gedf2+0xce>
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d0eb      	beq.n	80026c0 <__gedf2+0x68>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1dd      	bne.n	80026a8 <__gedf2+0x50>
 80026ec:	464c      	mov	r4, r9
 80026ee:	4326      	orrs	r6, r4
 80026f0:	d1da      	bne.n	80026a8 <__gedf2+0x50>
 80026f2:	e7db      	b.n	80026ac <__gedf2+0x54>
 80026f4:	465b      	mov	r3, fp
 80026f6:	2000      	movs	r0, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0db      	beq.n	80026b4 <__gedf2+0x5c>
 80026fc:	e7d6      	b.n	80026ac <__gedf2+0x54>
 80026fe:	429a      	cmp	r2, r3
 8002700:	dc0a      	bgt.n	8002718 <__gedf2+0xc0>
 8002702:	dbe7      	blt.n	80026d4 <__gedf2+0x7c>
 8002704:	454f      	cmp	r7, r9
 8002706:	d8d1      	bhi.n	80026ac <__gedf2+0x54>
 8002708:	d010      	beq.n	800272c <__gedf2+0xd4>
 800270a:	2000      	movs	r0, #0
 800270c:	454f      	cmp	r7, r9
 800270e:	d2d1      	bcs.n	80026b4 <__gedf2+0x5c>
 8002710:	2900      	cmp	r1, #0
 8002712:	d0e1      	beq.n	80026d8 <__gedf2+0x80>
 8002714:	0008      	movs	r0, r1
 8002716:	e7cd      	b.n	80026b4 <__gedf2+0x5c>
 8002718:	4243      	negs	r3, r0
 800271a:	4158      	adcs	r0, r3
 800271c:	2302      	movs	r3, #2
 800271e:	4240      	negs	r0, r0
 8002720:	4018      	ands	r0, r3
 8002722:	3801      	subs	r0, #1
 8002724:	e7c6      	b.n	80026b4 <__gedf2+0x5c>
 8002726:	2002      	movs	r0, #2
 8002728:	4240      	negs	r0, r0
 800272a:	e7c3      	b.n	80026b4 <__gedf2+0x5c>
 800272c:	45c4      	cmp	ip, r8
 800272e:	d8bd      	bhi.n	80026ac <__gedf2+0x54>
 8002730:	2000      	movs	r0, #0
 8002732:	45c4      	cmp	ip, r8
 8002734:	d2be      	bcs.n	80026b4 <__gedf2+0x5c>
 8002736:	e7eb      	b.n	8002710 <__gedf2+0xb8>
 8002738:	000007ff 	.word	0x000007ff

0800273c <__ledf2>:
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	464e      	mov	r6, r9
 8002740:	4645      	mov	r5, r8
 8002742:	4657      	mov	r7, sl
 8002744:	46de      	mov	lr, fp
 8002746:	0004      	movs	r4, r0
 8002748:	0018      	movs	r0, r3
 800274a:	b5e0      	push	{r5, r6, r7, lr}
 800274c:	0016      	movs	r6, r2
 800274e:	031b      	lsls	r3, r3, #12
 8002750:	0b1b      	lsrs	r3, r3, #12
 8002752:	4d31      	ldr	r5, [pc, #196]	; (8002818 <__ledf2+0xdc>)
 8002754:	030f      	lsls	r7, r1, #12
 8002756:	004a      	lsls	r2, r1, #1
 8002758:	4699      	mov	r9, r3
 800275a:	0043      	lsls	r3, r0, #1
 800275c:	46a4      	mov	ip, r4
 800275e:	46b0      	mov	r8, r6
 8002760:	0b3f      	lsrs	r7, r7, #12
 8002762:	0d52      	lsrs	r2, r2, #21
 8002764:	0fc9      	lsrs	r1, r1, #31
 8002766:	0d5b      	lsrs	r3, r3, #21
 8002768:	0fc0      	lsrs	r0, r0, #31
 800276a:	42aa      	cmp	r2, r5
 800276c:	d011      	beq.n	8002792 <__ledf2+0x56>
 800276e:	42ab      	cmp	r3, r5
 8002770:	d014      	beq.n	800279c <__ledf2+0x60>
 8002772:	2a00      	cmp	r2, #0
 8002774:	d12f      	bne.n	80027d6 <__ledf2+0x9a>
 8002776:	433c      	orrs	r4, r7
 8002778:	46a3      	mov	fp, r4
 800277a:	4265      	negs	r5, r4
 800277c:	4165      	adcs	r5, r4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d114      	bne.n	80027ac <__ledf2+0x70>
 8002782:	464c      	mov	r4, r9
 8002784:	4326      	orrs	r6, r4
 8002786:	d111      	bne.n	80027ac <__ledf2+0x70>
 8002788:	465b      	mov	r3, fp
 800278a:	2000      	movs	r0, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <__ledf2+0x84>
 8002790:	e010      	b.n	80027b4 <__ledf2+0x78>
 8002792:	003d      	movs	r5, r7
 8002794:	4325      	orrs	r5, r4
 8002796:	d112      	bne.n	80027be <__ledf2+0x82>
 8002798:	4293      	cmp	r3, r2
 800279a:	d11c      	bne.n	80027d6 <__ledf2+0x9a>
 800279c:	464d      	mov	r5, r9
 800279e:	432e      	orrs	r6, r5
 80027a0:	d10d      	bne.n	80027be <__ledf2+0x82>
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d104      	bne.n	80027b0 <__ledf2+0x74>
 80027a6:	433c      	orrs	r4, r7
 80027a8:	4265      	negs	r5, r4
 80027aa:	4165      	adcs	r5, r4
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	d10d      	bne.n	80027cc <__ledf2+0x90>
 80027b0:	4281      	cmp	r1, r0
 80027b2:	d016      	beq.n	80027e2 <__ledf2+0xa6>
 80027b4:	2002      	movs	r0, #2
 80027b6:	3901      	subs	r1, #1
 80027b8:	4008      	ands	r0, r1
 80027ba:	3801      	subs	r0, #1
 80027bc:	e000      	b.n	80027c0 <__ledf2+0x84>
 80027be:	2002      	movs	r0, #2
 80027c0:	bcf0      	pop	{r4, r5, r6, r7}
 80027c2:	46bb      	mov	fp, r7
 80027c4:	46b2      	mov	sl, r6
 80027c6:	46a9      	mov	r9, r5
 80027c8:	46a0      	mov	r8, r4
 80027ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d1f7      	bne.n	80027c0 <__ledf2+0x84>
 80027d0:	2001      	movs	r0, #1
 80027d2:	4240      	negs	r0, r0
 80027d4:	e7f4      	b.n	80027c0 <__ledf2+0x84>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ea      	bne.n	80027b0 <__ledf2+0x74>
 80027da:	464c      	mov	r4, r9
 80027dc:	4326      	orrs	r6, r4
 80027de:	d1e7      	bne.n	80027b0 <__ledf2+0x74>
 80027e0:	e7e8      	b.n	80027b4 <__ledf2+0x78>
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dd06      	ble.n	80027f4 <__ledf2+0xb8>
 80027e6:	4243      	negs	r3, r0
 80027e8:	4158      	adcs	r0, r3
 80027ea:	2302      	movs	r3, #2
 80027ec:	4240      	negs	r0, r0
 80027ee:	4018      	ands	r0, r3
 80027f0:	3801      	subs	r0, #1
 80027f2:	e7e5      	b.n	80027c0 <__ledf2+0x84>
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dbe9      	blt.n	80027cc <__ledf2+0x90>
 80027f8:	454f      	cmp	r7, r9
 80027fa:	d8db      	bhi.n	80027b4 <__ledf2+0x78>
 80027fc:	d006      	beq.n	800280c <__ledf2+0xd0>
 80027fe:	2000      	movs	r0, #0
 8002800:	454f      	cmp	r7, r9
 8002802:	d2dd      	bcs.n	80027c0 <__ledf2+0x84>
 8002804:	2900      	cmp	r1, #0
 8002806:	d0e3      	beq.n	80027d0 <__ledf2+0x94>
 8002808:	0008      	movs	r0, r1
 800280a:	e7d9      	b.n	80027c0 <__ledf2+0x84>
 800280c:	45c4      	cmp	ip, r8
 800280e:	d8d1      	bhi.n	80027b4 <__ledf2+0x78>
 8002810:	2000      	movs	r0, #0
 8002812:	45c4      	cmp	ip, r8
 8002814:	d2d4      	bcs.n	80027c0 <__ledf2+0x84>
 8002816:	e7f5      	b.n	8002804 <__ledf2+0xc8>
 8002818:	000007ff 	.word	0x000007ff

0800281c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
  HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, GPIO_PIN_SET);
 8002826:	4b03      	ldr	r3, [pc, #12]	; (8002834 <vApplicationStackOverflowHook+0x18>)
 8002828:	2201      	movs	r2, #1
 800282a:	2102      	movs	r1, #2
 800282c:	0018      	movs	r0, r3
 800282e:	f003 f9a2 	bl	8005b76 <HAL_GPIO_WritePin>
  while(1)
 8002832:	e7fe      	b.n	8002832 <vApplicationStackOverflowHook+0x16>
 8002834:	48001400 	.word	0x48001400

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283c:	f002 f82c 	bl	8004898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002840:	f000 f820 	bl	8002884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002844:	f000 f9a6 	bl	8002b94 <MX_GPIO_Init>
  MX_CAN_Init();
 8002848:	f000 f882 	bl	8002950 <MX_CAN_Init>
  MX_TIM3_Init();
 800284c:	f000 f91a 	bl	8002a84 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 8002850:	f000 f97a 	bl	8002b48 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8002854:	f000 f8b4 	bl	80029c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002858:	f00b fcb8 	bl	800e1cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <main+0x40>)
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <main+0x44>)
 8002860:	2100      	movs	r1, #0
 8002862:	0018      	movs	r0, r3
 8002864:	f00b fd30 	bl	800e2c8 <osThreadNew>
 8002868:	0002      	movs	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <main+0x48>)
 800286c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  CPP_UserSetup();
 800286e:	f000 fe8b 	bl	8003588 <CPP_UserSetup>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002872:	f00b fcd7 	bl	800e224 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002876:	e7fe      	b.n	8002876 <main+0x3e>
 8002878:	080140c8 	.word	0x080140c8
 800287c:	08002e9d 	.word	0x08002e9d
 8002880:	20002dc4 	.word	0x20002dc4

08002884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b099      	sub	sp, #100	; 0x64
 8002888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288a:	242c      	movs	r4, #44	; 0x2c
 800288c:	193b      	adds	r3, r7, r4
 800288e:	0018      	movs	r0, r3
 8002890:	2334      	movs	r3, #52	; 0x34
 8002892:	001a      	movs	r2, r3
 8002894:	2100      	movs	r1, #0
 8002896:	f00f fd21 	bl	80122dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289a:	231c      	movs	r3, #28
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	0018      	movs	r0, r3
 80028a0:	2310      	movs	r3, #16
 80028a2:	001a      	movs	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	f00f fd19 	bl	80122dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028aa:	003b      	movs	r3, r7
 80028ac:	0018      	movs	r0, r3
 80028ae:	231c      	movs	r3, #28
 80028b0:	001a      	movs	r2, r3
 80028b2:	2100      	movs	r1, #0
 80028b4:	f00f fd12 	bl	80122dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80028b8:	0021      	movs	r1, r4
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2222      	movs	r2, #34	; 0x22
 80028be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2201      	movs	r2, #1
 80028c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2201      	movs	r2, #1
 80028ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2210      	movs	r2, #16
 80028d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2202      	movs	r2, #2
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	0212      	lsls	r2, r2, #8
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	22e0      	movs	r2, #224	; 0xe0
 80028e4:	0352      	lsls	r2, r2, #13
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2201      	movs	r2, #1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	0018      	movs	r0, r3
 80028f2:	f003 facf 	bl	8005e94 <HAL_RCC_OscConfig>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d001      	beq.n	80028fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80028fa:	f000 faf3 	bl	8002ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fe:	211c      	movs	r1, #28
 8002900:	187b      	adds	r3, r7, r1
 8002902:	2207      	movs	r2, #7
 8002904:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2202      	movs	r2, #2
 800290a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800290c:	187b      	adds	r3, r7, r1
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002912:	187b      	adds	r3, r7, r1
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2101      	movs	r1, #1
 800291c:	0018      	movs	r0, r3
 800291e:	f003 fe3f 	bl	80065a0 <HAL_RCC_ClockConfig>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d001      	beq.n	800292a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002926:	f000 fadd 	bl	8002ee4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800292a:	003b      	movs	r3, r7
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	0292      	lsls	r2, r2, #10
 8002930:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002932:	003b      	movs	r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002938:	003b      	movs	r3, r7
 800293a:	0018      	movs	r0, r3
 800293c:	f003 ffd4 	bl	80068e8 <HAL_RCCEx_PeriphCLKConfig>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002944:	f000 face 	bl	8002ee4 <Error_Handler>
  }
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b019      	add	sp, #100	; 0x64
 800294e:	bd90      	pop	{r4, r7, pc}

08002950 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_CAN_Init+0x68>)
 8002956:	4a19      	ldr	r2, [pc, #100]	; (80029bc <MX_CAN_Init+0x6c>)
 8002958:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <MX_CAN_Init+0x68>)
 800295c:	2204      	movs	r2, #4
 800295e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <MX_CAN_Init+0x68>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002966:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <MX_CAN_Init+0x68>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_CAN_Init+0x68>)
 800296e:	22d0      	movs	r2, #208	; 0xd0
 8002970:	0312      	lsls	r2, r2, #12
 8002972:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <MX_CAN_Init+0x68>)
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	0392      	lsls	r2, r2, #14
 800297a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_CAN_Init+0x68>)
 800297e:	2200      	movs	r2, #0
 8002980:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <MX_CAN_Init+0x68>)
 8002984:	2200      	movs	r2, #0
 8002986:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <MX_CAN_Init+0x68>)
 800298a:	2200      	movs	r2, #0
 800298c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <MX_CAN_Init+0x68>)
 8002990:	2200      	movs	r2, #0
 8002992:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <MX_CAN_Init+0x68>)
 8002996:	2200      	movs	r2, #0
 8002998:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <MX_CAN_Init+0x68>)
 800299c:	2200      	movs	r2, #0
 800299e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <MX_CAN_Init+0x68>)
 80029a2:	0018      	movs	r0, r3
 80029a4:	f001 ffa8 	bl	80048f8 <HAL_CAN_Init>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d001      	beq.n	80029b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80029ac:	f000 fa9a 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	20002dc8 	.word	0x20002dc8
 80029bc:	40006400 	.word	0x40006400

080029c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c6:	2320      	movs	r3, #32
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	0018      	movs	r0, r3
 80029cc:	2308      	movs	r3, #8
 80029ce:	001a      	movs	r2, r3
 80029d0:	2100      	movs	r1, #0
 80029d2:	f00f fc83 	bl	80122dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	0018      	movs	r0, r3
 80029da:	231c      	movs	r3, #28
 80029dc:	001a      	movs	r2, r3
 80029de:	2100      	movs	r1, #0
 80029e0:	f00f fc7c 	bl	80122dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029e4:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <MX_TIM2_Init+0xc0>)
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	05d2      	lsls	r2, r2, #23
 80029ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480;
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <MX_TIM2_Init+0xc0>)
 80029ee:	22f0      	movs	r2, #240	; 0xf0
 80029f0:	0052      	lsls	r2, r2, #1
 80029f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <MX_TIM2_Init+0xc0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <MX_TIM2_Init+0xc0>)
 80029fc:	22fa      	movs	r2, #250	; 0xfa
 80029fe:	00d2      	lsls	r2, r2, #3
 8002a00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <MX_TIM2_Init+0xc0>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <MX_TIM2_Init+0xc0>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <MX_TIM2_Init+0xc0>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f004 f911 	bl	8006c38 <HAL_TIM_PWM_Init>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002a1a:	f000 fa63 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1e:	2120      	movs	r1, #32
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a2c:	187a      	adds	r2, r7, r1
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <MX_TIM2_Init+0xc0>)
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f004 fea4 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002a3c:	f000 fa52 	bl	8002ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2260      	movs	r2, #96	; 0x60
 8002a44:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	22fa      	movs	r2, #250	; 0xfa
 8002a4a:	00d2      	lsls	r2, r2, #3
 8002a4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a5a:	1d39      	adds	r1, r7, #4
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <MX_TIM2_Init+0xc0>)
 8002a5e:	2204      	movs	r2, #4
 8002a60:	0018      	movs	r0, r3
 8002a62:	f004 fb07 	bl	8007074 <HAL_TIM_PWM_ConfigChannel>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8002a6a:	f000 fa3b 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <MX_TIM2_Init+0xc0>)
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 faf9 	bl	8003068 <HAL_TIM_MspPostInit>

}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b00a      	add	sp, #40	; 0x28
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	200030f4 	.word	0x200030f4

08002a84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	0018      	movs	r0, r3
 8002a90:	2308      	movs	r3, #8
 8002a92:	001a      	movs	r2, r3
 8002a94:	2100      	movs	r1, #0
 8002a96:	f00f fc21 	bl	80122dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	231c      	movs	r3, #28
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	f00f fc1a 	bl	80122dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <MX_TIM3_Init+0xbc>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002abc:	22fa      	movs	r2, #250	; 0xfa
 8002abe:	00d2      	lsls	r2, r2, #3
 8002ac0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ace:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f004 f8b1 	bl	8006c38 <HAL_TIM_PWM_Init>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002ada:	f000 fa03 	bl	8002ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ade:	2120      	movs	r1, #32
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aec:	187a      	adds	r2, r7, r1
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002af0:	0011      	movs	r1, r2
 8002af2:	0018      	movs	r0, r3
 8002af4:	f004 fe44 	bl	8007780 <HAL_TIMEx_MasterConfigSynchronization>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002afc:	f000 f9f2 	bl	8002ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	2260      	movs	r2, #96	; 0x60
 8002b04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1999;
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <MX_TIM3_Init+0xc0>)
 8002b0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b18:	1d39      	adds	r1, r7, #4
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f004 faa8 	bl	8007074 <HAL_TIM_PWM_ConfigChannel>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8002b28:	f000 f9dc 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <MX_TIM3_Init+0xb8>)
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 fa9a 	bl	8003068 <HAL_TIM_MspPostInit>

}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b00a      	add	sp, #40	; 0x28
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20002df0 	.word	0x20002df0
 8002b40:	40000400 	.word	0x40000400
 8002b44:	000007cf 	.word	0x000007cf

08002b48 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <MX_USB_PCD_Init+0x48>)
 8002b50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b54:	2208      	movs	r2, #8
 8002b56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b60:	2202      	movs	r2, #2
 8002b62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <MX_USB_PCD_Init+0x44>)
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f003 f851 	bl	8005c20 <HAL_PCD_Init>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d001      	beq.n	8002b86 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8002b82:	f000 f9af 	bl	8002ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000313c 	.word	0x2000313c
 8002b90:	40005c00 	.word	0x40005c00

08002b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b08b      	sub	sp, #44	; 0x2c
 8002b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9a:	2414      	movs	r4, #20
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	2314      	movs	r3, #20
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f00f fb99 	bl	80122dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002baa:	4ba9      	ldr	r3, [pc, #676]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	4ba8      	ldr	r3, [pc, #672]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0309      	lsls	r1, r1, #12
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	615a      	str	r2, [r3, #20]
 8002bb8:	4ba5      	ldr	r3, [pc, #660]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	031b      	lsls	r3, r3, #12
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bc6:	4ba2      	ldr	r3, [pc, #648]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	4ba1      	ldr	r3, [pc, #644]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	03c9      	lsls	r1, r1, #15
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	615a      	str	r2, [r3, #20]
 8002bd4:	4b9e      	ldr	r3, [pc, #632]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	03db      	lsls	r3, r3, #15
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	4b9b      	ldr	r3, [pc, #620]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	4b9a      	ldr	r3, [pc, #616]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	0289      	lsls	r1, r1, #10
 8002bec:	430a      	orrs	r2, r1
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	4b97      	ldr	r3, [pc, #604]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	029b      	lsls	r3, r3, #10
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4b94      	ldr	r3, [pc, #592]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	4b93      	ldr	r3, [pc, #588]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	02c9      	lsls	r1, r1, #11
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	4b90      	ldr	r3, [pc, #576]	; (8002e50 <MX_GPIO_Init+0x2bc>)
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	02db      	lsls	r3, r3, #11
 8002c14:	4013      	ands	r3, r2
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RT_Led_Pin|Cruise_Led_Pin|LCD_DATA2_Pin|LCD_DATA1_Pin
 8002c1a:	498e      	ldr	r1, [pc, #568]	; (8002e54 <MX_GPIO_Init+0x2c0>)
 8002c1c:	4b8e      	ldr	r3, [pc, #568]	; (8002e58 <MX_GPIO_Init+0x2c4>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	0018      	movs	r0, r3
 8002c22:	f002 ffa8 	bl	8005b76 <HAL_GPIO_WritePin>
                          |HL_Led_Pin|Eco_Led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BOARD_OK_Pin|ERROR_Pin, GPIO_PIN_RESET);
 8002c26:	4b8d      	ldr	r3, [pc, #564]	; (8002e5c <MX_GPIO_Init+0x2c8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f002 ffa2 	bl	8005b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reverse_Led_Pin|LCD_DATA7_Pin|LCD_DATA6_Pin|LCD_DATA5_Pin
 8002c32:	498b      	ldr	r1, [pc, #556]	; (8002e60 <MX_GPIO_Init+0x2cc>)
 8002c34:	2390      	movs	r3, #144	; 0x90
 8002c36:	05db      	lsls	r3, r3, #23
 8002c38:	2200      	movs	r2, #0
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f002 ff9b 	bl	8005b76 <HAL_GPIO_WritePin>
                          |LCD_DATA4_Pin|LCD_DATA3_Pin|LT_Led_Pin|BPS_Fault_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8002c40:	2390      	movs	r3, #144	; 0x90
 8002c42:	05db      	lsls	r3, r3, #23
 8002c44:	2201      	movs	r2, #1
 8002c46:	2104      	movs	r1, #4
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f002 ff94 	bl	8005b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DATA0_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 8002c4e:	4b85      	ldr	r3, [pc, #532]	; (8002e64 <MX_GPIO_Init+0x2d0>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	2141      	movs	r1, #65	; 0x41
 8002c54:	0018      	movs	r0, r3
 8002c56:	f002 ff8e 	bl	8005b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_READ_Pin|LCD_WRITE_Pin|LCD_CD_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8002c5a:	4983      	ldr	r1, [pc, #524]	; (8002e68 <MX_GPIO_Init+0x2d4>)
 8002c5c:	4b81      	ldr	r3, [pc, #516]	; (8002e64 <MX_GPIO_Init+0x2d0>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	0018      	movs	r0, r3
 8002c62:	f002 ff88 	bl	8005b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RT_Button_Pin Cruise_P_Pin Horn_Button_Pin Cruise_Button_Pin
                           Reverse_Button_Pin HL_Button_Pin Eco_Button_Pin LT_Button_Pin */
  GPIO_InitStruct.Pin = RT_Button_Pin|Cruise_P_Pin|Horn_Button_Pin|Cruise_Button_Pin
 8002c66:	193b      	adds	r3, r7, r4
 8002c68:	4a80      	ldr	r2, [pc, #512]	; (8002e6c <MX_GPIO_Init+0x2d8>)
 8002c6a:	601a      	str	r2, [r3, #0]
                          |Reverse_Button_Pin|HL_Button_Pin|Eco_Button_Pin|LT_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	2288      	movs	r2, #136	; 0x88
 8002c70:	0352      	lsls	r2, r2, #13
 8002c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	2202      	movs	r2, #2
 8002c78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a76      	ldr	r2, [pc, #472]	; (8002e58 <MX_GPIO_Init+0x2c4>)
 8002c7e:	0019      	movs	r1, r3
 8002c80:	0010      	movs	r0, r2
 8002c82:	f002 fde3 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pins : RT_Led_Pin Cruise_Led_Pin HL_Led_Pin Eco_Led_Pin */
  GPIO_InitStruct.Pin = RT_Led_Pin|Cruise_Led_Pin|HL_Led_Pin|Eco_Led_Pin;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	4a79      	ldr	r2, [pc, #484]	; (8002e70 <MX_GPIO_Init+0x2dc>)
 8002c8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2201      	movs	r2, #1
 8002c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	4a6d      	ldr	r2, [pc, #436]	; (8002e58 <MX_GPIO_Init+0x2c4>)
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f002 fdd1 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOARD_OK_Pin ERROR_Pin */
  GPIO_InitStruct.Pin = BOARD_OK_Pin|ERROR_Pin;
 8002caa:	193b      	adds	r3, r7, r4
 8002cac:	2203      	movs	r2, #3
 8002cae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	4a65      	ldr	r2, [pc, #404]	; (8002e5c <MX_GPIO_Init+0x2c8>)
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f002 fdbf 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reverse_Led_Pin LCD_RST_Pin LT_Led_Pin BPS_Fault_Pin */
  GPIO_InitStruct.Pin = Reverse_Led_Pin|LCD_RST_Pin|LT_Led_Pin|BPS_Fault_Pin;
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	4a68      	ldr	r2, [pc, #416]	; (8002e74 <MX_GPIO_Init+0x2e0>)
 8002cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	193a      	adds	r2, r7, r4
 8002ce8:	2390      	movs	r3, #144	; 0x90
 8002cea:	05db      	lsls	r3, r3, #23
 8002cec:	0011      	movs	r1, r2
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f002 fdac 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DATA7_Pin LCD_DATA6_Pin LCD_DATA5_Pin LCD_DATA4_Pin
                           LCD_DATA3_Pin */
  GPIO_InitStruct.Pin = LCD_DATA7_Pin|LCD_DATA6_Pin|LCD_DATA5_Pin|LCD_DATA4_Pin
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	22f8      	movs	r2, #248	; 0xf8
 8002cf8:	601a      	str	r2, [r3, #0]
                          |LCD_DATA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2201      	movs	r2, #1
 8002d0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	193a      	adds	r2, r7, r4
 8002d0e:	2390      	movs	r3, #144	; 0x90
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	0011      	movs	r1, r2
 8002d14:	0018      	movs	r0, r3
 8002d16:	f002 fd99 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DATA2_Pin LCD_DATA1_Pin */
  GPIO_InitStruct.Pin = LCD_DATA2_Pin|LCD_DATA1_Pin;
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	2230      	movs	r2, #48	; 0x30
 8002d1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	2201      	movs	r2, #1
 8002d24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	2201      	movs	r2, #1
 8002d30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <MX_GPIO_Init+0x2c4>)
 8002d36:	0019      	movs	r1, r3
 8002d38:	0010      	movs	r0, r2
 8002d3a:	f002 fd87 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DATA0_Pin LCD_READ_Pin LCD_CD_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DATA0_Pin|LCD_READ_Pin|LCD_CD_Pin|LCD_CS_Pin;
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	4a4d      	ldr	r2, [pc, #308]	; (8002e78 <MX_GPIO_Init+0x2e4>)
 8002d42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	2201      	movs	r2, #1
 8002d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	2201      	movs	r2, #1
 8002d54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	4a42      	ldr	r2, [pc, #264]	; (8002e64 <MX_GPIO_Init+0x2d0>)
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	0010      	movs	r0, r2
 8002d5e:	f002 fd75 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_WRITE_Pin */
  GPIO_InitStruct.Pin = LCD_WRITE_Pin;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2204      	movs	r2, #4
 8002d66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	2203      	movs	r2, #3
 8002d78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_WRITE_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	4a39      	ldr	r2, [pc, #228]	; (8002e64 <MX_GPIO_Init+0x2d0>)
 8002d7e:	0019      	movs	r1, r3
 8002d80:	0010      	movs	r0, r2
 8002d82:	f002 fd63 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pin : Haz_Button_Pin */
  GPIO_InitStruct.Pin = Haz_Button_Pin;
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	0152      	lsls	r2, r2, #5
 8002d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2288      	movs	r2, #136	; 0x88
 8002d92:	0352      	lsls	r2, r2, #13
 8002d94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	2202      	movs	r2, #2
 8002d9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Haz_Button_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <MX_GPIO_Init+0x2d0>)
 8002da0:	0019      	movs	r1, r3
 8002da2:	0010      	movs	r0, r2
 8002da4:	f002 fd52 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pin : Cruise_M_Pin */
  GPIO_InitStruct.Pin = Cruise_M_Pin;
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	0052      	lsls	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	2288      	movs	r2, #136	; 0x88
 8002db4:	0352      	lsls	r2, r2, #13
 8002db6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	2202      	movs	r2, #2
 8002dbc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Cruise_M_GPIO_Port, &GPIO_InitStruct);
 8002dbe:	193a      	adds	r2, r7, r4
 8002dc0:	2390      	movs	r3, #144	; 0x90
 8002dc2:	05db      	lsls	r3, r3, #23
 8002dc4:	0011      	movs	r1, r2
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f002 fd40 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8002dcc:	0021      	movs	r1, r4
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2288      	movs	r2, #136	; 0x88
 8002dd8:	0352      	lsls	r2, r2, #13
 8002dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002de2:	000c      	movs	r4, r1
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <MX_GPIO_Init+0x2d0>)
 8002de8:	0019      	movs	r1, r3
 8002dea:	0010      	movs	r0, r2
 8002dec:	f002 fd2e 	bl	800584c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8002df0:	0021      	movs	r1, r4
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <MX_GPIO_Init+0x2d0>)
 8002e0e:	0019      	movs	r1, r3
 8002e10:	0010      	movs	r0, r2
 8002e12:	f002 fd1b 	bl	800584c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2103      	movs	r1, #3
 8002e1a:	2005      	movs	r0, #5
 8002e1c:	f002 fcf0 	bl	8005800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e20:	2005      	movs	r0, #5
 8002e22:	f002 fd02 	bl	800582a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2103      	movs	r1, #3
 8002e2a:	2006      	movs	r0, #6
 8002e2c:	f002 fce8 	bl	8005800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002e30:	2006      	movs	r0, #6
 8002e32:	f002 fcfa 	bl	800582a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2103      	movs	r1, #3
 8002e3a:	2007      	movs	r0, #7
 8002e3c:	f002 fce0 	bl	8005800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002e40:	2007      	movs	r0, #7
 8002e42:	f002 fcf2 	bl	800582a <HAL_NVIC_EnableIRQ>

}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b00b      	add	sp, #44	; 0x2c
 8002e4c:	bd90      	pop	{r4, r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	40021000 	.word	0x40021000
 8002e54:	00004174 	.word	0x00004174
 8002e58:	48000800 	.word	0x48000800
 8002e5c:	48001400 	.word	0x48001400
 8002e60:	000082f9 	.word	0x000082f9
 8002e64:	48000400 	.word	0x48000400
 8002e68:	00000c06 	.word	0x00000c06
 8002e6c:	0000a68b 	.word	0x0000a68b
 8002e70:	00004144 	.word	0x00004144
 8002e74:	00008205 	.word	0x00008205
 8002e78:	00000c03 	.word	0x00000c03

08002e7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	0002      	movs	r2, r0
 8002e84:	1dbb      	adds	r3, r7, #6
 8002e86:	801a      	strh	r2, [r3, #0]
  // Call into C++ Domain
  CPP_HandleGPIOInterrupt(GPIO_Pin);
 8002e88:	1dbb      	adds	r3, r7, #6
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 fe03 	bl	8003a98 <CPP_HandleGPIOInterrupt>
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(BOARD_OK_GPIO_Port, BOARD_OK_Pin);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <StartDefaultTask+0x20>)
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f002 fe81 	bl	8005bb0 <HAL_GPIO_TogglePin>
    osDelay(500);
 8002eae:	23fa      	movs	r3, #250	; 0xfa
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f00b fab0 	bl	800e418 <osDelay>
    HAL_GPIO_TogglePin(BOARD_OK_GPIO_Port, BOARD_OK_Pin);
 8002eb8:	e7f4      	b.n	8002ea4 <StartDefaultTask+0x8>
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	48001400 	.word	0x48001400

08002ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ed2:	f001 fcf5 	bl	80048c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b002      	add	sp, #8
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	40012c00 	.word	0x40012c00

08002ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
  {
    HAL_GPIO_TogglePin(ERROR_GPIO_Port, ERROR_Pin);
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <Error_Handler+0x20>)
 8002eee:	2102      	movs	r1, #2
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f002 fe5d 	bl	8005bb0 <HAL_GPIO_TogglePin>
    osDelay(500);
 8002ef6:	23fa      	movs	r3, #250	; 0xfa
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	0018      	movs	r0, r3
 8002efc:	f00b fa8c 	bl	800e418 <osDelay>
    HAL_GPIO_TogglePin(ERROR_GPIO_Port, ERROR_Pin);
 8002f00:	e7f4      	b.n	8002eec <Error_Handler+0x8>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	48001400 	.word	0x48001400

08002f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_MspInit+0x50>)
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_MspInit+0x50>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	619a      	str	r2, [r3, #24]
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_MspInit+0x50>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_MspInit+0x50>)
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_MspInit+0x50>)
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	0549      	lsls	r1, r1, #21
 8002f30:	430a      	orrs	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_MspInit+0x50>)
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	055b      	lsls	r3, r3, #21
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8002f42:	2302      	movs	r3, #2
 8002f44:	425b      	negs	r3, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	2103      	movs	r1, #3
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f002 fc58 	bl	8005800 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b08b      	sub	sp, #44	; 0x2c
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	2414      	movs	r4, #20
 8002f66:	193b      	adds	r3, r7, r4
 8002f68:	0018      	movs	r0, r3
 8002f6a:	2314      	movs	r3, #20
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f00f f9b4 	bl	80122dc <memset>
  if(hcan->Instance==CAN)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <HAL_CAN_MspInit+0xa0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d13a      	bne.n	8002ff4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_CAN_MspInit+0xa4>)
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <HAL_CAN_MspInit+0xa4>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0489      	lsls	r1, r1, #18
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_CAN_MspInit+0xa4>)
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	049b      	lsls	r3, r3, #18
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_CAN_MspInit+0xa4>)
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_CAN_MspInit+0xa4>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	02c9      	lsls	r1, r1, #11
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	615a      	str	r2, [r3, #20]
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_CAN_MspInit+0xa4>)
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	02db      	lsls	r3, r3, #11
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	22c0      	movs	r2, #192	; 0xc0
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002fd2:	187b      	adds	r3, r7, r1
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_CAN_MspInit+0xa8>)
 8002fdc:	0019      	movs	r1, r3
 8002fde:	0010      	movs	r0, r2
 8002fe0:	f002 fc34 	bl	800584c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 3, 0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	201e      	movs	r0, #30
 8002fea:	f002 fc09 	bl	8005800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002fee:	201e      	movs	r0, #30
 8002ff0:	f002 fc1b 	bl	800582a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b00b      	add	sp, #44	; 0x2c
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	40006400 	.word	0x40006400
 8003000:	40021000 	.word	0x40021000
 8003004:	48000400 	.word	0x48000400

08003008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	05db      	lsls	r3, r3, #23
 8003018:	429a      	cmp	r2, r3
 800301a:	d10c      	bne.n	8003036 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_TIM_PWM_MspInit+0x58>)
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_TIM_PWM_MspInit+0x58>)
 8003022:	2101      	movs	r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	61da      	str	r2, [r3, #28]
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_TIM_PWM_MspInit+0x58>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	2201      	movs	r2, #1
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003034:	e010      	b.n	8003058 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <HAL_TIM_PWM_MspInit+0x5c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10b      	bne.n	8003058 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_TIM_PWM_MspInit+0x58>)
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_TIM_PWM_MspInit+0x58>)
 8003046:	2102      	movs	r1, #2
 8003048:	430a      	orrs	r2, r1
 800304a:	61da      	str	r2, [r3, #28]
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_TIM_PWM_MspInit+0x58>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2202      	movs	r2, #2
 8003052:	4013      	ands	r3, r2
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b004      	add	sp, #16
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	40000400 	.word	0x40000400

08003068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	2414      	movs	r4, #20
 8003072:	193b      	adds	r3, r7, r4
 8003074:	0018      	movs	r0, r3
 8003076:	2314      	movs	r3, #20
 8003078:	001a      	movs	r2, r3
 800307a:	2100      	movs	r1, #0
 800307c:	f00f f92e 	bl	80122dc <memset>
  if(htim->Instance==TIM2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	05db      	lsls	r3, r3, #23
 8003088:	429a      	cmp	r2, r3
 800308a:	d125      	bne.n	80030d8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_TIM_MspPostInit+0xcc>)
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	4b28      	ldr	r3, [pc, #160]	; (8003134 <HAL_TIM_MspPostInit+0xcc>)
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	0289      	lsls	r1, r1, #10
 8003096:	430a      	orrs	r2, r1
 8003098:	615a      	str	r2, [r3, #20]
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_TIM_MspPostInit+0xcc>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	029b      	lsls	r3, r3, #10
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030a8:	0021      	movs	r1, r4
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	2202      	movs	r2, #2
 80030ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2202      	movs	r2, #2
 80030b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2202      	movs	r2, #2
 80030c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c8:	187a      	adds	r2, r7, r1
 80030ca:	2390      	movs	r3, #144	; 0x90
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f002 fbbb 	bl	800584c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030d6:	e028      	b.n	800312a <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_TIM_MspPostInit+0xd0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d123      	bne.n	800312a <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <HAL_TIM_MspPostInit+0xcc>)
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_TIM_MspPostInit+0xcc>)
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	02c9      	lsls	r1, r1, #11
 80030ec:	430a      	orrs	r2, r1
 80030ee:	615a      	str	r2, [r3, #20]
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_TIM_MspPostInit+0xcc>)
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	02db      	lsls	r3, r3, #11
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80030fe:	2114      	movs	r1, #20
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2220      	movs	r2, #32
 8003104:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2202      	movs	r2, #2
 800310a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2201      	movs	r2, #1
 800311c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800311e:	187b      	adds	r3, r7, r1
 8003120:	4a06      	ldr	r2, [pc, #24]	; (800313c <HAL_TIM_MspPostInit+0xd4>)
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f002 fb91 	bl	800584c <HAL_GPIO_Init>
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b00b      	add	sp, #44	; 0x2c
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	40021000 	.word	0x40021000
 8003138:	40000400 	.word	0x40000400
 800313c:	48000400 	.word	0x48000400

08003140 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_PCD_MspInit+0x38>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10d      	bne.n	800316e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_PCD_MspInit+0x3c>)
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_PCD_MspInit+0x3c>)
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	0409      	lsls	r1, r1, #16
 800315c:	430a      	orrs	r2, r1
 800315e:	61da      	str	r2, [r3, #28]
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_PCD_MspInit+0x3c>)
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	40005c00 	.word	0x40005c00
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	0019      	movs	r1, r3
 8003196:	200d      	movs	r0, #13
 8003198:	f002 fb32 	bl	8005800 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800319c:	200d      	movs	r0, #13
 800319e:	f002 fb44 	bl	800582a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80031a2:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_InitTick+0xa8>)
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_InitTick+0xa8>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0109      	lsls	r1, r1, #4
 80031ac:	430a      	orrs	r2, r1
 80031ae:	619a      	str	r2, [r3, #24]
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_InitTick+0xa8>)
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031be:	230c      	movs	r3, #12
 80031c0:	18fa      	adds	r2, r7, r3
 80031c2:	2310      	movs	r3, #16
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	0011      	movs	r1, r2
 80031c8:	0018      	movs	r0, r3
 80031ca:	f003 fb63 	bl	8006894 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031ce:	f003 fb4b 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
 80031d2:	0003      	movs	r3, r0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	4914      	ldr	r1, [pc, #80]	; (800322c <HAL_InitTick+0xac>)
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fc ff9e 	bl	800011c <__udivsi3>
 80031e0:	0003      	movs	r3, r0
 80031e2:	3b01      	subs	r3, #1
 80031e4:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_InitTick+0xb0>)
 80031e8:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_InitTick+0xb4>)
 80031ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_InitTick+0xb0>)
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <HAL_InitTick+0xb8>)
 80031f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <HAL_InitTick+0xb0>)
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_InitTick+0xb0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_InitTick+0xb0>)
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_InitTick+0xb0>)
 8003206:	0018      	movs	r0, r3
 8003208:	f003 fc6c 	bl	8006ae4 <HAL_TIM_Base_Init>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d105      	bne.n	800321c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_InitTick+0xb0>)
 8003212:	0018      	movs	r0, r3
 8003214:	f003 fcbe 	bl	8006b94 <HAL_TIM_Base_Start_IT>
 8003218:	0003      	movs	r3, r0
 800321a:	e000      	b.n	800321e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b00a      	add	sp, #40	; 0x28
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	40021000 	.word	0x40021000
 800322c:	000f4240 	.word	0x000f4240
 8003230:	20003430 	.word	0x20003430
 8003234:	40012c00 	.word	0x40012c00
 8003238:	000003e7 	.word	0x000003e7

0800323c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <NMI_Handler+0x4>
	...

08003244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_GPIO_WritePin(ERROR_GPIO_Port, ERROR_Pin, GPIO_PIN_SET);
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HardFault_Handler+0x14>)
 800324a:	2201      	movs	r2, #1
 800324c:	2102      	movs	r1, #2
 800324e:	0018      	movs	r0, r3
 8003250:	f002 fc91 	bl	8005b76 <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003254:	e7fe      	b.n	8003254 <HardFault_Handler+0x10>
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	48001400 	.word	0x48001400

0800325c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOARD_OK_Pin);
 8003260:	2001      	movs	r0, #1
 8003262:	f002 fcc1 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ERROR_Pin);
 8003266:	2002      	movs	r0, #2
 8003268:	f002 fcbe 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reverse_Button_Pin);
 8003276:	2008      	movs	r0, #8
 8003278:	f002 fcb6 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_DATA6_Pin);
 8003286:	2010      	movs	r0, #16
 8003288:	f002 fcae 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LCD_DATA3_Pin);
 800328c:	2080      	movs	r0, #128	; 0x80
 800328e:	f002 fcab 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Eco_Led_Pin);
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	0018      	movs	r0, r3
 8003298:	f002 fca6 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Eco_Button_Pin);
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f002 fca1 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LCD_CD_Pin);
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	0018      	movs	r0, r3
 80032ac:	f002 fc9c 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Haz_Button_Pin);
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	0018      	movs	r0, r3
 80032b6:	f002 fc97 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RT_Button_Pin);
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	0018      	movs	r0, r3
 80032c0:	f002 fc92 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Cruise_P_Pin);
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	0018      	movs	r0, r3
 80032ca:	f002 fc8d 	bl	8005be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032d8:	4b03      	ldr	r3, [pc, #12]	; (80032e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80032da:	0018      	movs	r0, r3
 80032dc:	f003 fdb4 	bl	8006e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20003430 	.word	0x20003430

080032ec <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <CEC_CAN_IRQHandler+0x14>)
 80032f2:	0018      	movs	r0, r3
 80032f4:	f001 ffe8 	bl	80052c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	20002dc8 	.word	0x20002dc8

08003304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	return 1;
 8003308:	2301      	movs	r3, #1
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_kill>:

int _kill(int pid, int sig)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800331a:	f00e fe6f 	bl	8011ffc <__errno>
 800331e:	0003      	movs	r3, r0
 8003320:	2216      	movs	r2, #22
 8003322:	601a      	str	r2, [r3, #0]
	return -1;
 8003324:	2301      	movs	r3, #1
 8003326:	425b      	negs	r3, r3
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}

08003330 <_exit>:

void _exit (int status)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003338:	2301      	movs	r3, #1
 800333a:	425a      	negs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0011      	movs	r1, r2
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff ffe5 	bl	8003310 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003346:	e7fe      	b.n	8003346 <_exit+0x16>

08003348 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e00a      	b.n	8003370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800335a:	e000      	b.n	800335e <_read+0x16>
 800335c:	bf00      	nop
 800335e:	0001      	movs	r1, r0
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	60ba      	str	r2, [r7, #8]
 8003366:	b2ca      	uxtb	r2, r1
 8003368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	3301      	adds	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	dbf0      	blt.n	800335a <_read+0x12>
	}

return len;
 8003378:	687b      	ldr	r3, [r7, #4]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b006      	add	sp, #24
 8003380:	bd80      	pop	{r7, pc}

08003382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e009      	b.n	80033a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	60ba      	str	r2, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	0018      	movs	r0, r3
 800339e:	e000      	b.n	80033a2 <_write+0x20>
 80033a0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	dbf1      	blt.n	8003394 <_write+0x12>
	}
	return len;
 80033b0:	687b      	ldr	r3, [r7, #4]
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b006      	add	sp, #24
 80033b8:	bd80      	pop	{r7, pc}

080033ba <_close>:

int _close(int file)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
	return -1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	425b      	negs	r3, r3
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b002      	add	sp, #8
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	0192      	lsls	r2, r2, #6
 80033de:	605a      	str	r2, [r3, #4]
	return 0;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_isatty>:

int _isatty(int file)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	return 1;
 80033f2:	2301      	movs	r3, #1
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	return 0;
 8003408:	2300      	movs	r3, #0
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <_sbrk+0x5c>)
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <_sbrk+0x60>)
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <_sbrk+0x64>)
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <_sbrk+0x68>)
 8003434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <_sbrk+0x64>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	18d3      	adds	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003444:	f00e fdda 	bl	8011ffc <__errno>
 8003448:	0003      	movs	r3, r0
 800344a:	220c      	movs	r2, #12
 800344c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800344e:	2301      	movs	r3, #1
 8003450:	425b      	negs	r3, r3
 8003452:	e009      	b.n	8003468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_sbrk+0x64>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_sbrk+0x64>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	18d2      	adds	r2, r2, r3
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <_sbrk+0x64>)
 8003464:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b006      	add	sp, #24
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20004000 	.word	0x20004000
 8003474:	00000400 	.word	0x00000400
 8003478:	200000b0 	.word	0x200000b0
 800347c:	200034d0 	.word	0x200034d0

08003480 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b002      	add	sp, #8
 800349c:	bd80      	pop	{r7, pc}

0800349e <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b002      	add	sp, #8
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b002      	add	sp, #8
 80034d8:	bd80      	pop	{r7, pc}

080034da <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	2203      	movs	r2, #3
 80034f4:	4798      	blx	r3
    }
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_ZN11SolarGators11DataModules10DataModuleD1Ev>:
  DataModule(uint32_t can_id, uint16_t telem_id, uint32_t size, uint16_t instance_id = 0, bool is_ext_id = false, bool is_rtr = false):
    can_id_(can_id), telem_id_(telem_id), size_(size), instance_id_(instance_id), is_ext_id_(is_ext_id), is_rtr_(is_rtr)
  {
    mutex_id_ = osMutexNew(&mutex_attributes_);
  };
  virtual ~DataModule() {};
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	4a03      	ldr	r2, [pc, #12]	; (8003518 <_ZN11SolarGators11DataModules10DataModuleD1Ev+0x18>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}
 8003518:	08014130 	.word	0x08014130

0800351c <_ZN11SolarGators11DataModules10DataModuleD0Ev>:
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f7ff ffea 	bl	8003500 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2178      	movs	r1, #120	; 0x78
 8003530:	0018      	movs	r0, r3
 8003532:	f00e fcab 	bl	8011e8c <_ZdlPvj>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}

08003540 <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev>:
{
  class OrionBMSRx0 final: public DataModule
  {
  public:
    OrionBMSRx0(uint32_t can_id, uint32_t telem_id);
    ~OrionBMSRx0() {};
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	4a05      	ldr	r2, [pc, #20]	; (8003560 <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev+0x20>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff ffd5 	bl	8003500 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}
 8003560:	08014178 	.word	0x08014178

08003564 <_ZN11SolarGators11DataModules11OrionBMSRx0D0Ev>:
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f7ff ffe6 	bl	8003540 <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	0018      	movs	r0, r3
 800357a:	f00e fc87 	bl	8011e8c <_ZdlPvj>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <CPP_UserSetup>:
};

uint32_t PULSE = 500;

void CPP_UserSetup(void)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b0b1      	sub	sp, #196	; 0xc4
 800358c:	af00      	add	r7, sp, #0
  // Note: These binds really abuse the stack and we should figure out a way to avoid them
  //       since we are heavily constrained.
  {
    using namespace SolarGators::DataModules;
    // Left Side
    left_turn.action_ = std::bind(&SteeringController::ToggleLeftTurnSignal, &LightsState);
 800358e:	2114      	movs	r1, #20
 8003590:	187b      	adds	r3, r7, r1
 8003592:	4aa5      	ldr	r2, [pc, #660]	; (8003828 <CPP_UserSetup+0x2a0>)
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	187b      	adds	r3, r7, r1
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	200c      	movs	r0, #12
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	187a      	adds	r2, r7, r1
 80035a2:	ca12      	ldmia	r2!, {r1, r4}
 80035a4:	c312      	stmia	r3!, {r1, r4}
 80035a6:	4ba1      	ldr	r3, [pc, #644]	; (800382c <CPP_UserSetup+0x2a4>)
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	003b      	movs	r3, r7
 80035ac:	221c      	movs	r2, #28
 80035ae:	18ba      	adds	r2, r7, r2
 80035b0:	1839      	adds	r1, r7, r0
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 fae0 	bl	8003b78 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80035b8:	003a      	movs	r2, r7
 80035ba:	4b9d      	ldr	r3, [pc, #628]	; (8003830 <CPP_UserSetup+0x2a8>)
 80035bc:	0011      	movs	r1, r2
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 fb00 	bl	8003bc4 <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise_minus.action_ = std::bind(&SteeringController::DecreaseCruiseSpeed, &LightsState);
 80035c4:	2134      	movs	r1, #52	; 0x34
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	4a9a      	ldr	r2, [pc, #616]	; (8003834 <CPP_UserSetup+0x2ac>)
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2200      	movs	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	202c      	movs	r0, #44	; 0x2c
 80035d4:	183b      	adds	r3, r7, r0
 80035d6:	187a      	adds	r2, r7, r1
 80035d8:	ca12      	ldmia	r2!, {r1, r4}
 80035da:	c312      	stmia	r3!, {r1, r4}
 80035dc:	4b93      	ldr	r3, [pc, #588]	; (800382c <CPP_UserSetup+0x2a4>)
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e0:	2420      	movs	r4, #32
 80035e2:	193b      	adds	r3, r7, r4
 80035e4:	223c      	movs	r2, #60	; 0x3c
 80035e6:	18ba      	adds	r2, r7, r2
 80035e8:	1839      	adds	r1, r7, r0
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 fac4 	bl	8003b78 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80035f0:	193a      	adds	r2, r7, r4
 80035f2:	4b91      	ldr	r3, [pc, #580]	; (8003838 <CPP_UserSetup+0x2b0>)
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 fae4 	bl	8003bc4 <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    eco.action_ = HandleEco;
 80035fc:	4a8f      	ldr	r2, [pc, #572]	; (800383c <CPP_UserSetup+0x2b4>)
 80035fe:	4b90      	ldr	r3, [pc, #576]	; (8003840 <CPP_UserSetup+0x2b8>)
 8003600:	0011      	movs	r1, r2
 8003602:	0018      	movs	r0, r3
 8003604:	f000 fb04 	bl	8003c10 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    headlights.action_ = HandleHeadLights;
 8003608:	4a8e      	ldr	r2, [pc, #568]	; (8003844 <CPP_UserSetup+0x2bc>)
 800360a:	4b8f      	ldr	r3, [pc, #572]	; (8003848 <CPP_UserSetup+0x2c0>)
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f000 fafe 	bl	8003c10 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    hazards.action_ = std::bind(&SteeringController::ToggleHazards, &LightsState);
 8003614:	2154      	movs	r1, #84	; 0x54
 8003616:	187b      	adds	r3, r7, r1
 8003618:	4a8c      	ldr	r2, [pc, #560]	; (800384c <CPP_UserSetup+0x2c4>)
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	187b      	adds	r3, r7, r1
 800361e:	2200      	movs	r2, #0
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	204c      	movs	r0, #76	; 0x4c
 8003624:	183b      	adds	r3, r7, r0
 8003626:	187a      	adds	r2, r7, r1
 8003628:	ca12      	ldmia	r2!, {r1, r4}
 800362a:	c312      	stmia	r3!, {r1, r4}
 800362c:	4b7f      	ldr	r3, [pc, #508]	; (800382c <CPP_UserSetup+0x2a4>)
 800362e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003630:	2440      	movs	r4, #64	; 0x40
 8003632:	193b      	adds	r3, r7, r4
 8003634:	225c      	movs	r2, #92	; 0x5c
 8003636:	18ba      	adds	r2, r7, r2
 8003638:	1839      	adds	r1, r7, r0
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fa9c 	bl	8003b78 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8003640:	193a      	adds	r2, r7, r4
 8003642:	4b83      	ldr	r3, [pc, #524]	; (8003850 <CPP_UserSetup+0x2c8>)
 8003644:	0011      	movs	r1, r2
 8003646:	0018      	movs	r0, r3
 8003648:	f000 fabc 	bl	8003bc4 <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    // Right Side
    right_turn.action_ = std::bind(&SteeringController::ToggleRightTurnSignal, &LightsState);
 800364c:	2174      	movs	r1, #116	; 0x74
 800364e:	187b      	adds	r3, r7, r1
 8003650:	4a80      	ldr	r2, [pc, #512]	; (8003854 <CPP_UserSetup+0x2cc>)
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	187b      	adds	r3, r7, r1
 8003656:	2200      	movs	r2, #0
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	206c      	movs	r0, #108	; 0x6c
 800365c:	183b      	adds	r3, r7, r0
 800365e:	187a      	adds	r2, r7, r1
 8003660:	ca12      	ldmia	r2!, {r1, r4}
 8003662:	c312      	stmia	r3!, {r1, r4}
 8003664:	4b71      	ldr	r3, [pc, #452]	; (800382c <CPP_UserSetup+0x2a4>)
 8003666:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003668:	2460      	movs	r4, #96	; 0x60
 800366a:	193b      	adds	r3, r7, r4
 800366c:	227c      	movs	r2, #124	; 0x7c
 800366e:	18ba      	adds	r2, r7, r2
 8003670:	1839      	adds	r1, r7, r0
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fa80 	bl	8003b78 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 8003678:	193a      	adds	r2, r7, r4
 800367a:	4b77      	ldr	r3, [pc, #476]	; (8003858 <CPP_UserSetup+0x2d0>)
 800367c:	0011      	movs	r1, r2
 800367e:	0018      	movs	r0, r3
 8003680:	f000 faa0 	bl	8003bc4 <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise_plus.action_ = std::bind(&SteeringController::IncreaseCruiseSpeed, &LightsState);
 8003684:	2194      	movs	r1, #148	; 0x94
 8003686:	187b      	adds	r3, r7, r1
 8003688:	4a74      	ldr	r2, [pc, #464]	; (800385c <CPP_UserSetup+0x2d4>)
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	187b      	adds	r3, r7, r1
 800368e:	2200      	movs	r2, #0
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	208c      	movs	r0, #140	; 0x8c
 8003694:	183b      	adds	r3, r7, r0
 8003696:	187a      	adds	r2, r7, r1
 8003698:	ca12      	ldmia	r2!, {r1, r4}
 800369a:	c312      	stmia	r3!, {r1, r4}
 800369c:	4b63      	ldr	r3, [pc, #396]	; (800382c <CPP_UserSetup+0x2a4>)
 800369e:	229c      	movs	r2, #156	; 0x9c
 80036a0:	18b9      	adds	r1, r7, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	2480      	movs	r4, #128	; 0x80
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	18ba      	adds	r2, r7, r2
 80036aa:	1839      	adds	r1, r7, r0
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fa63 	bl	8003b78 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80036b2:	193a      	adds	r2, r7, r4
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <CPP_UserSetup+0x2d8>)
 80036b6:	0011      	movs	r1, r2
 80036b8:	0018      	movs	r0, r3
 80036ba:	f000 fa83 	bl	8003bc4 <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    horn.action_ = std::bind(&SteeringController::ToggleHorn, &LightsState);
 80036be:	21b4      	movs	r1, #180	; 0xb4
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	4a68      	ldr	r2, [pc, #416]	; (8003864 <CPP_UserSetup+0x2dc>)
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	20ac      	movs	r0, #172	; 0xac
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	187a      	adds	r2, r7, r1
 80036d2:	ca12      	ldmia	r2!, {r1, r4}
 80036d4:	c312      	stmia	r3!, {r1, r4}
 80036d6:	4b55      	ldr	r3, [pc, #340]	; (800382c <CPP_UserSetup+0x2a4>)
 80036d8:	22bc      	movs	r2, #188	; 0xbc
 80036da:	18b9      	adds	r1, r7, r2
 80036dc:	600b      	str	r3, [r1, #0]
 80036de:	24a0      	movs	r4, #160	; 0xa0
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	18ba      	adds	r2, r7, r2
 80036e4:	1839      	adds	r1, r7, r0
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 fa46 	bl	8003b78 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>
 80036ec:	193a      	adds	r2, r7, r4
 80036ee:	4b5e      	ldr	r3, [pc, #376]	; (8003868 <CPP_UserSetup+0x2e0>)
 80036f0:	0011      	movs	r1, r2
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 fa66 	bl	8003bc4 <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>
    cruise.action_ = HandleCruise;
 80036f8:	4a5c      	ldr	r2, [pc, #368]	; (800386c <CPP_UserSetup+0x2e4>)
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <CPP_UserSetup+0x2e8>)
 80036fc:	0011      	movs	r1, r2
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fa86 	bl	8003c10 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
    reverse.action_ = HandleReverse;
 8003704:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <CPP_UserSetup+0x2ec>)
 8003706:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <CPP_UserSetup+0x2f0>)
 8003708:	0011      	movs	r1, r2
 800370a:	0018      	movs	r0, r3
 800370c:	f000 fa80 	bl	8003c10 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>
  }
  // Add to Button Group
  // Left side
  LightsState.AddButton(&left_turn);
 8003710:	4a47      	ldr	r2, [pc, #284]	; (8003830 <CPP_UserSetup+0x2a8>)
 8003712:	4b46      	ldr	r3, [pc, #280]	; (800382c <CPP_UserSetup+0x2a4>)
 8003714:	0011      	movs	r1, r2
 8003716:	0018      	movs	r0, r3
 8003718:	f005 fb9c 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise_minus);
 800371c:	4a46      	ldr	r2, [pc, #280]	; (8003838 <CPP_UserSetup+0x2b0>)
 800371e:	4b43      	ldr	r3, [pc, #268]	; (800382c <CPP_UserSetup+0x2a4>)
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f005 fb96 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&eco);
 8003728:	4a45      	ldr	r2, [pc, #276]	; (8003840 <CPP_UserSetup+0x2b8>)
 800372a:	4b40      	ldr	r3, [pc, #256]	; (800382c <CPP_UserSetup+0x2a4>)
 800372c:	0011      	movs	r1, r2
 800372e:	0018      	movs	r0, r3
 8003730:	f005 fb90 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&headlights);
 8003734:	4a44      	ldr	r2, [pc, #272]	; (8003848 <CPP_UserSetup+0x2c0>)
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <CPP_UserSetup+0x2a4>)
 8003738:	0011      	movs	r1, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f005 fb8a 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&hazards);
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <CPP_UserSetup+0x2c8>)
 8003742:	4b3a      	ldr	r3, [pc, #232]	; (800382c <CPP_UserSetup+0x2a4>)
 8003744:	0011      	movs	r1, r2
 8003746:	0018      	movs	r0, r3
 8003748:	f005 fb84 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  // Right side
  LightsState.AddButton(&right_turn);
 800374c:	4a42      	ldr	r2, [pc, #264]	; (8003858 <CPP_UserSetup+0x2d0>)
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <CPP_UserSetup+0x2a4>)
 8003750:	0011      	movs	r1, r2
 8003752:	0018      	movs	r0, r3
 8003754:	f005 fb7e 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise_plus);
 8003758:	4a41      	ldr	r2, [pc, #260]	; (8003860 <CPP_UserSetup+0x2d8>)
 800375a:	4b34      	ldr	r3, [pc, #208]	; (800382c <CPP_UserSetup+0x2a4>)
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f005 fb78 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&horn);
 8003764:	4a40      	ldr	r2, [pc, #256]	; (8003868 <CPP_UserSetup+0x2e0>)
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <CPP_UserSetup+0x2a4>)
 8003768:	0011      	movs	r1, r2
 800376a:	0018      	movs	r0, r3
 800376c:	f005 fb72 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&cruise);
 8003770:	4a3f      	ldr	r2, [pc, #252]	; (8003870 <CPP_UserSetup+0x2e8>)
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <CPP_UserSetup+0x2a4>)
 8003774:	0011      	movs	r1, r2
 8003776:	0018      	movs	r0, r3
 8003778:	f005 fb6c 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  LightsState.AddButton(&reverse);
 800377c:	4a3e      	ldr	r2, [pc, #248]	; (8003878 <CPP_UserSetup+0x2f0>)
 800377e:	4b2b      	ldr	r3, [pc, #172]	; (800382c <CPP_UserSetup+0x2a4>)
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f005 fb66 	bl	8008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>
  // Load the CAN Controller
  CANController.AddRxModule(&BMS_Rx_0);
 8003788:	4a3c      	ldr	r2, [pc, #240]	; (800387c <CPP_UserSetup+0x2f4>)
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <CPP_UserSetup+0x2f8>)
 800378c:	0011      	movs	r1, r2
 800378e:	0018      	movs	r0, r3
 8003790:	f006 feec 	bl	800a56c <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  CANController.AddRxModule(&Motor_Rx_0);
 8003794:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <CPP_UserSetup+0x2fc>)
 8003796:	4b3a      	ldr	r3, [pc, #232]	; (8003880 <CPP_UserSetup+0x2f8>)
 8003798:	0011      	movs	r1, r2
 800379a:	0018      	movs	r0, r3
 800379c:	f006 fee6 	bl	800a56c <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>
  // Start Thread that Handles Turn Signal LEDs
  signal_timer_id = osTimerNew((osThreadFunc_t)UpdateSignals, osTimerPeriodic, NULL, &signal_timer_attr);
 80037a0:	4b39      	ldr	r3, [pc, #228]	; (8003888 <CPP_UserSetup+0x300>)
 80037a2:	483a      	ldr	r0, [pc, #232]	; (800388c <CPP_UserSetup+0x304>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	2101      	movs	r1, #1
 80037a8:	f00a fe76 	bl	800e498 <osTimerNew>
 80037ac:	0002      	movs	r2, r0
 80037ae:	4b38      	ldr	r3, [pc, #224]	; (8003890 <CPP_UserSetup+0x308>)
 80037b0:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <CPP_UserSetup+0x308>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <CPP_UserSetup+0x236>
  {
      Error_Handler();
 80037ba:	f7ff fb93 	bl	8002ee4 <Error_Handler>
  }
  osTimerStart(signal_timer_id, 500);
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <CPP_UserSetup+0x308>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	22fa      	movs	r2, #250	; 0xfa
 80037c4:	0052      	lsls	r2, r2, #1
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f00a feed 	bl	800e5a8 <osTimerStart>
  // Start Thread that updates screen
  ui_thread_id = osThreadNew((osThreadFunc_t)UpdateUI, NULL, &ui_thread_attributes);
 80037ce:	4a31      	ldr	r2, [pc, #196]	; (8003894 <CPP_UserSetup+0x30c>)
 80037d0:	4b31      	ldr	r3, [pc, #196]	; (8003898 <CPP_UserSetup+0x310>)
 80037d2:	2100      	movs	r1, #0
 80037d4:	0018      	movs	r0, r3
 80037d6:	f00a fd77 	bl	800e2c8 <osThreadNew>
 80037da:	0002      	movs	r2, r0
 80037dc:	4b2f      	ldr	r3, [pc, #188]	; (800389c <CPP_UserSetup+0x314>)
 80037de:	601a      	str	r2, [r3, #0]
  if (signal_timer_id == NULL)
 80037e0:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <CPP_UserSetup+0x308>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <CPP_UserSetup+0x264>
  {
      Error_Handler();
 80037e8:	f7ff fb7c 	bl	8002ee4 <Error_Handler>
  }
  // Start Thread that sends CAN Data
  can_tx_timer_id = osTimerNew((osThreadFunc_t)SendCanMsgs, osTimerPeriodic, NULL, &can_tx_timer_attr);
 80037ec:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <CPP_UserSetup+0x318>)
 80037ee:	482d      	ldr	r0, [pc, #180]	; (80038a4 <CPP_UserSetup+0x31c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	2101      	movs	r1, #1
 80037f4:	f00a fe50 	bl	800e498 <osTimerNew>
 80037f8:	0002      	movs	r2, r0
 80037fa:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <CPP_UserSetup+0x320>)
 80037fc:	601a      	str	r2, [r3, #0]
  if (can_tx_timer_id == NULL)
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <CPP_UserSetup+0x320>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <CPP_UserSetup+0x282>
  {
      Error_Handler();
 8003806:	f7ff fb6d 	bl	8002ee4 <Error_Handler>
  }
  CANController.Init();
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <CPP_UserSetup+0x2f8>)
 800380c:	0018      	movs	r0, r3
 800380e:	f006 fd4b 	bl	800a2a8 <_ZN11SolarGators7Drivers9CANDriver4InitEv>
  osTimerStart(can_tx_timer_id, 100);
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <CPP_UserSetup+0x320>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2164      	movs	r1, #100	; 0x64
 8003818:	0018      	movs	r0, r3
 800381a:	f00a fec5 	bl	800e5a8 <osTimerStart>
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b031      	add	sp, #196	; 0xc4
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	08008a79 	.word	0x08008a79
 800382c:	200000b4 	.word	0x200000b4
 8003830:	20000d00 	.word	0x20000d00
 8003834:	08008ccd 	.word	0x08008ccd
 8003838:	20000d2c 	.word	0x20000d2c
 800383c:	08003ae9 	.word	0x08003ae9
 8003840:	20000d58 	.word	0x20000d58
 8003844:	08003b0d 	.word	0x08003b0d
 8003848:	20000d84 	.word	0x20000d84
 800384c:	08008b51 	.word	0x08008b51
 8003850:	20000db0 	.word	0x20000db0
 8003854:	08008ae5 	.word	0x08008ae5
 8003858:	20000ddc 	.word	0x20000ddc
 800385c:	08008ca1 	.word	0x08008ca1
 8003860:	20000e08 	.word	0x20000e08
 8003864:	08008c75 	.word	0x08008c75
 8003868:	20000e34 	.word	0x20000e34
 800386c:	08003b31 	.word	0x08003b31
 8003870:	20000e60 	.word	0x20000e60
 8003874:	08003b55 	.word	0x08003b55
 8003878:	20000e8c 	.word	0x20000e8c
 800387c:	200007ac 	.word	0x200007ac
 8003880:	200008b4 	.word	0x200008b4
 8003884:	2000082c 	.word	0x2000082c
 8003888:	20000004 	.word	0x20000004
 800388c:	080038ad 	.word	0x080038ad
 8003890:	20000f30 	.word	0x20000f30
 8003894:	08014104 	.word	0x08014104
 8003898:	080039b5 	.word	0x080039b5
 800389c:	20000f34 	.word	0x20000f34
 80038a0:	20000014 	.word	0x20000014
 80038a4:	08003a61 	.word	0x08003a61
 80038a8:	200013f4 	.word	0x200013f4

080038ac <_Z13UpdateSignalsv>:

void UpdateSignals()
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  osMutexAcquire(LightsState.mutex_id_, osWaitForever);
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4252      	negs	r2, r2
 80038b8:	0011      	movs	r1, r2
 80038ba:	0018      	movs	r0, r3
 80038bc:	f00b f880 	bl	800e9c0 <osMutexAcquire>
  if(LightsState.GetHazardsStatus())
 80038c0:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f004 fc04 	bl	80080d0 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d008      	beq.n	80038de <_Z13UpdateSignalsv+0x32>
  {
    lt_indicator.Toggle();
 80038cc:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <_Z13UpdateSignalsv+0xfc>)
 80038ce:	0018      	movs	r0, r3
 80038d0:	f008 ffc9 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
    rt_indicator.Toggle();
 80038d4:	4b35      	ldr	r3, [pc, #212]	; (80039ac <_Z13UpdateSignalsv+0x100>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f008 ffc5 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
 80038dc:	e014      	b.n	8003908 <_Z13UpdateSignalsv+0x5c>
  }
  else if(LightsState.GetRightTurnStatus())
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 80038e0:	0018      	movs	r0, r3
 80038e2:	f004 fbea 	bl	80080ba <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d004      	beq.n	80038f4 <_Z13UpdateSignalsv+0x48>
    rt_indicator.Toggle();
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <_Z13UpdateSignalsv+0x100>)
 80038ec:	0018      	movs	r0, r3
 80038ee:	f008 ffba 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
 80038f2:	e009      	b.n	8003908 <_Z13UpdateSignalsv+0x5c>
  else if(LightsState.GetLeftTurnStatus())
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f004 fbd4 	bl	80080a4 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 80038fc:	1e03      	subs	r3, r0, #0
 80038fe:	d003      	beq.n	8003908 <_Z13UpdateSignalsv+0x5c>
    lt_indicator.Toggle();
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <_Z13UpdateSignalsv+0xfc>)
 8003902:	0018      	movs	r0, r3
 8003904:	f008 ffaf 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
  if(!LightsState.GetHazardsStatus() && !LightsState.GetRightTurnStatus())
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 800390a:	0018      	movs	r0, r3
 800390c:	f004 fbe0 	bl	80080d0 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8003910:	0003      	movs	r3, r0
 8003912:	001a      	movs	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	4053      	eors	r3, r2
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <_Z13UpdateSignalsv+0x8c>
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 8003920:	0018      	movs	r0, r3
 8003922:	f004 fbca 	bl	80080ba <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>
 8003926:	0003      	movs	r3, r0
 8003928:	001a      	movs	r2, r3
 800392a:	2301      	movs	r3, #1
 800392c:	4053      	eors	r3, r2
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <_Z13UpdateSignalsv+0x8c>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <_Z13UpdateSignalsv+0x8e>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <_Z13UpdateSignalsv+0xa0>
    HAL_GPIO_WritePin(RT_Led_GPIO_Port, RT_Led_Pin, GPIO_PIN_RESET);
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	01db      	lsls	r3, r3, #7
 8003942:	481b      	ldr	r0, [pc, #108]	; (80039b0 <_Z13UpdateSignalsv+0x104>)
 8003944:	2200      	movs	r2, #0
 8003946:	0019      	movs	r1, r3
 8003948:	f002 f915 	bl	8005b76 <HAL_GPIO_WritePin>
  if(!LightsState.GetHazardsStatus() && !LightsState.GetLeftTurnStatus())
 800394c:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 800394e:	0018      	movs	r0, r3
 8003950:	f004 fbbe 	bl	80080d0 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>
 8003954:	0003      	movs	r3, r0
 8003956:	001a      	movs	r2, r3
 8003958:	2301      	movs	r3, #1
 800395a:	4053      	eors	r3, r2
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <_Z13UpdateSignalsv+0xd0>
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 8003964:	0018      	movs	r0, r3
 8003966:	f004 fb9d 	bl	80080a4 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>
 800396a:	0003      	movs	r3, r0
 800396c:	001a      	movs	r2, r3
 800396e:	2301      	movs	r3, #1
 8003970:	4053      	eors	r3, r2
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <_Z13UpdateSignalsv+0xd0>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <_Z13UpdateSignalsv+0xd2>
 800397c:	2300      	movs	r3, #0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <_Z13UpdateSignalsv+0xe6>
      HAL_GPIO_WritePin(LT_Led_GPIO_Port, LT_Led_Pin, GPIO_PIN_RESET);
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	0099      	lsls	r1, r3, #2
 8003986:	2390      	movs	r3, #144	; 0x90
 8003988:	05db      	lsls	r3, r3, #23
 800398a:	2200      	movs	r2, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f002 f8f2 	bl	8005b76 <HAL_GPIO_WritePin>
  osMutexRelease(LightsState.mutex_id_);
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <_Z13UpdateSignalsv+0xf8>)
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	0018      	movs	r0, r3
 8003998:	f00b f86e 	bl	800ea78 <osMutexRelease>
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	200000b4 	.word	0x200000b4
 80039a8:	20000eb8 	.word	0x20000eb8
 80039ac:	20000ef4 	.word	0x20000ef4
 80039b0:	48000800 	.word	0x48000800

080039b4 <_Z8UpdateUIv>:

void UpdateUI()
{
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b0ba      	sub	sp, #232	; 0xe8
 80039b8:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <_Z8UpdateUIv+0xa0>)
 80039bc:	2104      	movs	r1, #4
 80039be:	0018      	movs	r0, r3
 80039c0:	f003 f98a 	bl	8006cd8 <HAL_TIM_PWM_Start>
  // LCD
  SolarGators::Drivers::ILI9341 Display(ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 80039c4:	23a0      	movs	r3, #160	; 0xa0
 80039c6:	005a      	lsls	r2, r3, #1
 80039c8:	2478      	movs	r4, #120	; 0x78
 80039ca:	193b      	adds	r3, r7, r4
 80039cc:	21f0      	movs	r1, #240	; 0xf0
 80039ce:	0018      	movs	r0, r3
 80039d0:	f007 fdf2 	bl	800b5b8 <_ZN11SolarGators7Drivers7ILI9341C1Ess>
  Display.Init();
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	0018      	movs	r0, r3
 80039d8:	f007 fea4 	bl	800b724 <_ZN11SolarGators7Drivers7ILI93414InitEv>
  // This will initialize the UI
  SolarGators::Drivers::UI ui(Display);
 80039dc:	193a      	adds	r2, r7, r4
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	0011      	movs	r1, r2
 80039e2:	0018      	movs	r0, r3
 80039e4:	f009 f916 	bl	800cc14 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E>
  float test_val = 0.0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	22e4      	movs	r2, #228	; 0xe4
 80039ec:	18ba      	adds	r2, r7, r2
 80039ee:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 1000; ++i)
 80039f0:	2300      	movs	r3, #0
 80039f2:	22e0      	movs	r2, #224	; 0xe0
 80039f4:	18ba      	adds	r2, r7, r2
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	25e0      	movs	r5, #224	; 0xe0
 80039fa:	197b      	adds	r3, r7, r5
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	23fa      	movs	r3, #250	; 0xfa
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	429a      	cmp	r2, r3
 8003a04:	da21      	bge.n	8003a4a <_Z8UpdateUIv+0x96>
  {
    ui.UpdateSpeed(test_val);
 8003a06:	24e4      	movs	r4, #228	; 0xe4
 8003a08:	193b      	adds	r3, r7, r4
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	1c11      	adds	r1, r2, #0
 8003a10:	0018      	movs	r0, r3
 8003a12:	f009 f9da 	bl	800cdca <_ZN11SolarGators7Drivers2UI11UpdateSpeedEf>
    test_val += 0.1;
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	f7fe fc55 	bl	80022c8 <__aeabi_f2d>
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <_Z8UpdateUIv+0xa4>)
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <_Z8UpdateUIv+0xa8>)
 8003a22:	f7fd fac3 	bl	8000fac <__aeabi_dadd>
 8003a26:	0002      	movs	r2, r0
 8003a28:	000b      	movs	r3, r1
 8003a2a:	0010      	movs	r0, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	f7fe fc93 	bl	8002358 <__aeabi_d2f>
 8003a32:	1c03      	adds	r3, r0, #0
 8003a34:	193a      	adds	r2, r7, r4
 8003a36:	6013      	str	r3, [r2, #0]
    osDelay(50);
 8003a38:	2032      	movs	r0, #50	; 0x32
 8003a3a:	f00a fced 	bl	800e418 <osDelay>
  for (int i = 0; i < 1000; ++i)
 8003a3e:	197b      	adds	r3, r7, r5
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	197a      	adds	r2, r7, r5
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	e7d6      	b.n	80039f8 <_Z8UpdateUIv+0x44>
  }

  while(1)
  {
    osDelay(100);
 8003a4a:	2064      	movs	r0, #100	; 0x64
 8003a4c:	f00a fce4 	bl	800e418 <osDelay>
 8003a50:	e7fb      	b.n	8003a4a <_Z8UpdateUIv+0x96>
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	200030f4 	.word	0x200030f4
 8003a58:	9999999a 	.word	0x9999999a
 8003a5c:	3fb99999 	.word	0x3fb99999

08003a60 <_Z11SendCanMsgsv>:
  }
}

void SendCanMsgs()
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  CANController.Send(&LightsState);
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <_Z11SendCanMsgsv+0x2c>)
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <_Z11SendCanMsgsv+0x30>)
 8003a68:	0011      	movs	r1, r2
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f006 fd17 	bl	800a49e <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
  McReq.SetRequestAllFrames();
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <_Z11SendCanMsgsv+0x34>)
 8003a72:	0018      	movs	r0, r3
 8003a74:	f003 ffbc 	bl	80079f0 <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>
  CANController.Send(&McReq);
 8003a78:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <_Z11SendCanMsgsv+0x34>)
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <_Z11SendCanMsgsv+0x30>)
 8003a7c:	0011      	movs	r1, r2
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f006 fd0d 	bl	800a49e <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	200000b4 	.word	0x200000b4
 8003a90:	200008b4 	.word	0x200008b4
 8003a94:	20000730 	.word	0x20000730

08003a98 <CPP_HandleGPIOInterrupt>:

void CPP_HandleGPIOInterrupt(uint16_t GPIO_Pin)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	1dbb      	adds	r3, r7, #6
 8003aa2:	801a      	strh	r2, [r3, #0]
  LightsState.HandlePress(GPIO_Pin);
 8003aa4:	1dbb      	adds	r3, r7, #6
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <CPP_HandleGPIOInterrupt+0x24>)
 8003aaa:	0011      	movs	r1, r2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f005 f99c 	bl	8008dea <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	200000b4 	.word	0x200000b4

08003ac0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  CANController.SetRxFlag();
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8003aca:	0018      	movs	r0, r3
 8003acc:	f006 fd74 	bl	800a5b8 <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>
  HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f001 fbcc 	bl	8005272 <HAL_CAN_DeactivateNotification>
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	200008b4 	.word	0x200008b4

08003ae8 <_Z9HandleEcov>:

void HandleEco()
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  LightsState.ToggleEco();
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <_Z9HandleEcov+0x1c>)
 8003aee:	0018      	movs	r0, r3
 8003af0:	f005 f965 	bl	8008dbe <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv>
  eco_indicator.Toggle();
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <_Z9HandleEcov+0x20>)
 8003af6:	0018      	movs	r0, r3
 8003af8:	f008 feb5 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	200000b4 	.word	0x200000b4
 8003b08:	20000ecc 	.word	0x20000ecc

08003b0c <_Z16HandleHeadLightsv>:
void HandleHeadLights()
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  LightsState.ToggleHeadlights();
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <_Z16HandleHeadLightsv+0x1c>)
 8003b12:	0018      	movs	r0, r3
 8003b14:	f005 f880 	bl	8008c18 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>
  hl_indicator.Toggle();
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <_Z16HandleHeadLightsv+0x20>)
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f008 fea3 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	200000b4 	.word	0x200000b4
 8003b2c:	20000ee0 	.word	0x20000ee0

08003b30 <_Z12HandleCruisev>:
void HandleCruise()
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  LightsState.ToggleCruise();
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <_Z12HandleCruisev+0x1c>)
 8003b36:	0018      	movs	r0, r3
 8003b38:	f005 f840 	bl	8008bbc <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>
  cr_indicator.Toggle();
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <_Z12HandleCruisev+0x20>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f008 fe91 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	200000b4 	.word	0x200000b4
 8003b50:	20000f08 	.word	0x20000f08

08003b54 <_Z13HandleReversev>:
void HandleReverse()
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  LightsState.ToggleReverse();
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <_Z13HandleReversev+0x1c>)
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f005 f901 	bl	8008d62 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>
  rev_indicator.Toggle();
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <_Z13HandleReversev+0x20>)
 8003b62:	0018      	movs	r0, r3
 8003b64:	f008 fe7f 	bl	800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	200000b4 	.word	0x200000b4
 8003b74:	20000f1c 	.word	0x20000f1c

08003b78 <_ZSt4bindIMN11SolarGators11DataModules18SteeringControllerEFvvEJPS2_EENSt12_Bind_helperIXsrSt5__or_IJSt11is_integralINSt5decayIT_E4typeEESt7is_enumISC_EEE5valueESA_JDpT0_EE4typeEOSA_DpOSH_>:
   *  @ingroup binders
   */
  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
					  std::forward<_BoundArgs>(__args)...);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 f861 	bl	8003c4e <_ZSt7forwardIMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003b8c:	0004      	movs	r4, r0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 f865 	bl	8003c60 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003b96:	0002      	movs	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	0021      	movs	r1, r4
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f000 f868 	bl	8003c72 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1IJS5_EEEOS4_DpOT_>
    }
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b005      	add	sp, #20
 8003ba8:	bd90      	pop	{r4, r7, pc}

08003baa <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff fc90 	bl	80034da <_ZNSt14_Function_baseD1Ev>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_ZNSt8functionIFvvEEaSISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEEENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSH_JEEEE5valueERS1_E4typeEOSF_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b08b      	sub	sp, #44	; 0x2c
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 f89c 	bl	8003d0e <_ZSt7forwardISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEOT_RNSt16remove_referenceIS9_E4typeE>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	241c      	movs	r4, #28
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f876 	bl	8003cd0 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>
 8003be4:	193a      	adds	r2, r7, r4
 8003be6:	240c      	movs	r4, #12
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	0011      	movs	r1, r2
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 f897 	bl	8003d20 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_>
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	193b      	adds	r3, r7, r4
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f8b9 	bl	8003d70 <_ZNSt8functionIFvvEE4swapERS1_>
 8003bfe:	193b      	adds	r3, r7, r4
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff ffd2 	bl	8003baa <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8003c06:	687b      	ldr	r3, [r7, #4]
	}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b00b      	add	sp, #44	; 0x2c
 8003c0e:	bd90      	pop	{r4, r7, pc}

08003c10 <_ZNSt8functionIFvvEEaSIRS0_EENSt9enable_ifIXsrNS1_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRS9_JEEEE5valueERS1_E4typeEOS7_>:
	operator=(_Functor&& __f)
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 f8c8 	bl	8003db2 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c22:	0002      	movs	r2, r0
 8003c24:	2408      	movs	r4, #8
 8003c26:	193b      	adds	r3, r7, r4
 8003c28:	0011      	movs	r1, r2
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f000 f8ca 	bl	8003dc4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	0011      	movs	r1, r2
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 f89a 	bl	8003d70 <_ZNSt8functionIFvvEE4swapERS1_>
 8003c3c:	193b      	adds	r3, r7, r4
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff ffb3 	bl	8003baa <_ZNSt8functionIFvvEED1Ev>
	  return *this;
 8003c44:	687b      	ldr	r3, [r7, #4]
	}
 8003c46:	0018      	movs	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b007      	add	sp, #28
 8003c4c:	bd90      	pop	{r4, r7, pc}

08003c4e <_ZSt7forwardIMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1IJS5_EEEOS4_DpOT_>:
	explicit _Bind(_Functor&& __f, _Args&&... __args)
 8003c72:	b590      	push	{r4, r7, lr}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 f8c7 	bl	8003e14 <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>
 8003c86:	0002      	movs	r2, r0
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	ca03      	ldmia	r2!, {r0, r1}
 8003c8c:	c303      	stmia	r3!, {r0, r1}
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3308      	adds	r3, #8
 8003c92:	001c      	movs	r4, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7ff ffe2 	bl	8003c60 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	f000 f8c0 	bl	8003e26 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1IJS3_ELb1EEEDpOT_>
	{ }
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b005      	add	sp, #20
 8003cae:	bd90      	pop	{r4, r7, pc}

08003cb0 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>:
        explicit constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 f8cd 	bl	8003e60 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>:
      _Bind(_Bind&& __b)
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f000 f899 	bl	8003e14 <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	ca03      	ldmia	r2!, {r0, r1}
 8003ce8:	c303      	stmia	r3!, {r0, r1}
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3308      	adds	r3, #8
 8003cee:	001c      	movs	r4, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 f8aa 	bl	8003e4e <_ZSt4moveIRSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	0020      	movs	r0, r4
 8003d00:	f7ff ffd6 	bl	8003cb0 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>
      { }
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b003      	add	sp, #12
 8003d0c:	bd90      	pop	{r4, r7, pc}

08003d0e <_ZSt7forwardISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7ff fbc8 	bl	80034c2 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 f8ab 	bl	8003e90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE21_M_not_empty_functionIS9_EEbRKT_>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d00f      	beq.n	8003d5e <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x3e>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003d3e:	687c      	ldr	r4, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 f8ad 	bl	8003ea2 <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	0020      	movs	r0, r4
 8003d4e:	f000 f8b1 	bl	8003eb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x48>)
 8003d56:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <_ZNSt8functionIFvvEEC1ISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS6_EEvvEET_+0x4c>)
 8003d5c:	609a      	str	r2, [r3, #8]
	  }
      }
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b003      	add	sp, #12
 8003d66:	bd90      	pop	{r4, r7, pc}
 8003d68:	08003edb 	.word	0x08003edb
 8003d6c:	08003efb 	.word	0x08003efb

08003d70 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	0011      	movs	r1, r2
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 f8f2 	bl	8003f6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	001a      	movs	r2, r3
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	0019      	movs	r1, r3
 8003d92:	0010      	movs	r0, r2
 8003d94:	f000 f914 	bl	8003fc0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	0019      	movs	r1, r3
 8003da4:	0010      	movs	r0, r2
 8003da6:	f000 f935 	bl	8004014 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff fb76 	bl	80034c2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 f93c 	bl	8004056 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d00f      	beq.n	8003e02 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x3e>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003de2:	687c      	ldr	r4, [r7, #4]
 8003de4:	003b      	movs	r3, r7
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f941 	bl	800406e <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8003dec:	0003      	movs	r3, r0
 8003dee:	0019      	movs	r1, r3
 8003df0:	0020      	movs	r0, r4
 8003df2:	f000 f945 	bl	8004080 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x48>)
 8003dfa:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x4c>)
 8003e00:	609a      	str	r2, [r3, #8]
      }
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b003      	add	sp, #12
 8003e0a:	bd90      	pop	{r4, r7, pc}
 8003e0c:	080040a7 	.word	0x080040a7
 8003e10:	080040c5 	.word	0x080040c5

08003e14 <_ZSt4moveIRMN11SolarGators11DataModules18SteeringControllerEFvvEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b002      	add	sp, #8
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <_ZNSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEC1IJS3_ELb1EEEDpOT_>:
        constexpr tuple(_UElements&&... __elements)
 8003e26:	b590      	push	{r4, r7, lr}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
        : _Inherited(std::forward<_UElements>(__elements)...) { }
 8003e30:	687c      	ldr	r4, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff ff13 	bl	8003c60 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f000 f96f 	bl	8004122 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1IS3_EEOT_>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b003      	add	sp, #12
 8003e4c:	bd90      	pop	{r4, r7, pc}

08003e4e <_ZSt4moveIRSt5tupleIJPN11SolarGators11DataModules18SteeringControllerEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8003e6a:	687c      	ldr	r4, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f96b 	bl	800414a <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>
 8003e74:	0003      	movs	r3, r0
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff fef2 	bl	8003c60 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	0019      	movs	r1, r3
 8003e80:	0020      	movs	r0, r4
 8003e82:	f000 f96f 	bl	8004164 <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b003      	add	sp, #12
 8003e8e:	bd90      	pop	{r4, r7, pc}

08003e90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE21_M_not_empty_functionIS9_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	  { return true; }
 8003e98:	2301      	movs	r3, #1
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b002      	add	sp, #8
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0018      	movs	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b002      	add	sp, #8
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff ffee 	bl	8003ea2 <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 8003ec6:	0001      	movs	r1, r0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	1c22      	adds	r2, r4, #0
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f95b 	bl	8004188 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b005      	add	sp, #20
 8003ed8:	bd90      	pop	{r4, r7, pc}

08003eda <_ZNSt17_Function_handlerIFvvESt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 f96e 	bl	80041c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>
 8003eea:	0003      	movs	r3, r0
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 f978 	bl	80041e2 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEclIJEvEET0_DpOT_>
      }
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003efa:	b5b0      	push	{r4, r5, r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	1dfb      	adds	r3, r7, #7
 8003f06:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d018      	beq.n	8003f42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x48>
 8003f10:	dc1d      	bgt.n	8003f4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d002      	beq.n	8003f1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x22>
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d00c      	beq.n	8003f34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x3a>
 8003f1a:	e018      	b.n	8003f4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 f96f 	bl	8004202 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 8003f24:	0004      	movs	r4, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 f94c 	bl	80041c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	6023      	str	r3, [r4, #0]
	      break;
 8003f32:	e00c      	b.n	8003f4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1c2a      	adds	r2, r5, #0
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f000 f96e 	bl	800421c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>
	      break;
 8003f40:	e005      	b.n	8003f4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1c21      	adds	r1, r4, #0
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 f988 	bl	800425c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>
	      break;
 8003f4c:	46c0      	nop			; (mov r8, r8)
	  return false;
 8003f4e:	2300      	movs	r3, #0
	}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b006      	add	sp, #24
 8003f56:	bdb0      	pop	{r4, r5, r7, pc}

08003f58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8003f6a:	b590      	push	{r4, r7, lr}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff ffee 	bl	8003f58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	2408      	movs	r4, #8
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	ca03      	ldmia	r2!, {r0, r1}
 8003f84:	c303      	stmia	r3!, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff ffe5 	bl	8003f58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003f8e:	0002      	movs	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	ca03      	ldmia	r2!, {r0, r1}
 8003f94:	c303      	stmia	r3!, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8003f96:	193b      	adds	r3, r7, r4
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff ffdd 	bl	8003f58 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	ca03      	ldmia	r2!, {r0, r1}
 8003fa4:	c303      	stmia	r3!, {r0, r1}
    }
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b005      	add	sp, #20
 8003fac:	bd90      	pop	{r4, r7, pc}

08003fae <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f7ff ffee 	bl	8003fae <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7ff ffe7 	bl	8003fae <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003fe8:	230c      	movs	r3, #12
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff ffde 	bl	8003fae <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	601a      	str	r2, [r3, #0]
    }
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b004      	add	sp, #16
 8004000:	bd80      	pop	{r7, pc}

08004002 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b002      	add	sp, #8
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ffee 	bl	8004002 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8004026:	0003      	movs	r3, r0
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff ffe7 	bl	8004002 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8004034:	0003      	movs	r3, r0
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800403c:	230c      	movs	r3, #12
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	0018      	movs	r0, r3
 8004042:	f7ff ffde 	bl	8004002 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8004046:	0003      	movs	r3, r0
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	601a      	str	r2, [r3, #0]
    }
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b004      	add	sp, #16
 8004054:	bd80      	pop	{r7, pc}

08004056 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	4193      	sbcs	r3, r2
 8004064:	b2db      	uxtb	r3, r3
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b002      	add	sp, #8
 800406c:	bd80      	pop	{r7, pc}

0800406e <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}

08004080 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	0018      	movs	r0, r3
 800408e:	f7ff ffee 	bl	800406e <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8004092:	0001      	movs	r1, r0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1c22      	adds	r2, r4, #0
 8004098:	0018      	movs	r0, r3
 800409a:	f000 f8f5 	bl	8004288 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b005      	add	sp, #20
 80040a4:	bd90      	pop	{r4, r7, pc}

080040a6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f905 	bl	80042c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80040b6:	0003      	movs	r3, r0
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4798      	blx	r3
      }
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	1dfb      	adds	r3, r7, #7
 80040d0:	701a      	strb	r2, [r3, #0]
	  switch (__op)
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d018      	beq.n	800410c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x48>
 80040da:	dc1d      	bgt.n	8004118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d002      	beq.n	80040e6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d00c      	beq.n	80040fe <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3a>
 80040e4:	e018      	b.n	8004118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 f8fd 	bl	80042e8 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 80040ee:	0004      	movs	r4, r0
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 f8e4 	bl	80042c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 80040f8:	0003      	movs	r3, r0
 80040fa:	6023      	str	r3, [r4, #0]
	      break;
 80040fc:	e00c      	b.n	8004118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_clone(__dest, __source, _Local_storage());
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1c2a      	adds	r2, r5, #0
 8004104:	0018      	movs	r0, r3
 8004106:	f000 f8fc 	bl	8004302 <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 800410a:	e005      	b.n	8004118 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x54>
	      _M_destroy(__dest, _Local_storage());
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1c21      	adds	r1, r4, #0
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f912 	bl	800433a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004116:	46c0      	nop			; (mov r8, r8)
	  return false;
 8004118:	2300      	movs	r3, #0
	}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b006      	add	sp, #24
 8004120:	bdb0      	pop	{r4, r5, r7, pc}

08004122 <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEEC1IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004122:	b590      	push	{r4, r7, lr}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800412c:	687c      	ldr	r4, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff fd95 	bl	8003c60 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004136:	0003      	movs	r3, r0
 8004138:	0019      	movs	r1, r3
 800413a:	0020      	movs	r0, r4
 800413c:	f000 f812 	bl	8004164 <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b003      	add	sp, #12
 8004148:	bd90      	pop	{r4, r7, pc}

0800414a <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f8fe 	bl	8004356 <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EE7_M_headERS4_>
 800415a:	0003      	movs	r3, r0
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}

08004164 <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EEC1IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff fd75 	bl	8003c60 <_ZSt7forwardIPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004176:	0003      	movs	r3, r0
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 8004188:	b5b0      	push	{r4, r5, r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	701a      	strb	r2, [r3, #0]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	0018      	movs	r0, r3
 800419a:	f7ff fe82 	bl	8003ea2 <_ZSt4moveIRSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS3_EEEONSt16remove_referenceIT_E4typeEOSB_>
 800419e:	0005      	movs	r5, r0
 80041a0:	200c      	movs	r0, #12
 80041a2:	f00d fe77 	bl	8011e94 <_Znwj>
 80041a6:	0003      	movs	r3, r0
 80041a8:	001c      	movs	r4, r3
 80041aa:	0029      	movs	r1, r5
 80041ac:	0020      	movs	r0, r4
 80041ae:	f7ff fd8f 	bl	8003cd0 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEC1EOS7_>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f824 	bl	8004202 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 80041ba:	0003      	movs	r3, r0
 80041bc:	601c      	str	r4, [r3, #0]
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b004      	add	sp, #16
 80041c4:	bdb0      	pop	{r4, r5, r7, pc}

080041c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
	    return __source._M_access<_Functor*>();
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 f8c9 	bl	8004368 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>
 80041d6:	0003      	movs	r3, r0
 80041d8:	681b      	ldr	r3, [r3, #0]
	}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EEclIJEvEET0_DpOT_>:
	operator()(_Args&&... __args)
 80041e2:	b590      	push	{r4, r7, lr}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
	      std::forward_as_tuple(std::forward<_Args>(__args)...),
 80041ea:	f000 f8ca 	bl	8004382 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>
	      _Bound_indexes());
 80041ee:	2308      	movs	r3, #8
 80041f0:	18f9      	adds	r1, r7, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	1c22      	adds	r2, r4, #0
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 f8c8 	bl	800438c <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>
	}
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b005      	add	sp, #20
 8004200:	bd90      	pop	{r4, r7, pc}

08004202 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>:
      _M_access()
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0018      	movs	r0, r3
 800420e:	f7ff f946 	bl	800349e <_ZNSt9_Any_data9_M_accessEv>
 8004212:	0003      	movs	r3, r0
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 800421c:	b5b0      	push	{r4, r5, r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	701a      	strb	r2, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0018      	movs	r0, r3
 800422e:	f000 f8ca 	bl	80043c6 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>
 8004232:	0003      	movs	r3, r0
	  __dest._M_access<_Functor*>() =
 8004234:	681d      	ldr	r5, [r3, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8004236:	200c      	movs	r0, #12
 8004238:	f00d fe2c 	bl	8011e94 <_Znwj>
 800423c:	0003      	movs	r3, r0
 800423e:	001c      	movs	r4, r3
	  __dest._M_access<_Functor*>() =
 8004240:	0023      	movs	r3, r4
 8004242:	002a      	movs	r2, r5
 8004244:	ca23      	ldmia	r2!, {r0, r1, r5}
 8004246:	c323      	stmia	r3!, {r0, r1, r5}
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	0018      	movs	r0, r3
 800424c:	f7ff ffd9 	bl	8004202 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 8004250:	0003      	movs	r3, r0
 8004252:	601c      	str	r4, [r3, #0]
	}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	46bd      	mov	sp, r7
 8004258:	b004      	add	sp, #16
 800425a:	bdb0      	pop	{r4, r5, r7, pc}

0800425c <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	_M_destroy(_Any_data& __victim, false_type)
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	003b      	movs	r3, r7
 8004266:	7019      	strb	r1, [r3, #0]
	  delete __victim._M_access<_Functor*>();
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0018      	movs	r0, r3
 800426c:	f7ff ffc9 	bl	8004202 <_ZNSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERT_v>
 8004270:	0003      	movs	r3, r0
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x24>
 8004278:	210c      	movs	r1, #12
 800427a:	0018      	movs	r0, r3
 800427c:	f00d fe06 	bl	8011e8c <_ZdlPvj>
	}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}

08004288 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	701a      	strb	r2, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0018      	movs	r0, r3
 800429a:	f7ff fee8 	bl	800406e <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 800429e:	0003      	movs	r3, r0
 80042a0:	681c      	ldr	r4, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff f8fa 	bl	800349e <_ZNSt9_Any_data9_M_accessEv>
 80042aa:	0003      	movs	r3, r0
 80042ac:	0019      	movs	r1, r3
 80042ae:	2004      	movs	r0, #4
 80042b0:	f7ff f8eb 	bl	800348a <_ZnwjPv>
 80042b4:	0003      	movs	r3, r0
 80042b6:	601c      	str	r4, [r3, #0]
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b005      	add	sp, #20
 80042be:	bd90      	pop	{r4, r7, pc}

080042c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 f888 	bl	80043e0 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 80042d0:	0003      	movs	r3, r0
 80042d2:	60fb      	str	r3, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 f88f 	bl	80043fa <_ZSt11__addressofIKPFvvEEPT_RS3_>
 80042dc:	0003      	movs	r3, r0
 80042de:	46c0      	nop			; (mov r8, r8)
	}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b004      	add	sp, #16
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff f8d3 	bl	800349e <_ZNSt9_Any_data9_M_accessEv>
 80042f8:	0003      	movs	r3, r0
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004302:	b590      	push	{r4, r7, lr}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	701a      	strb	r2, [r3, #0]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 f864 	bl	80043e0 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8004318:	0003      	movs	r3, r0
 800431a:	681c      	ldr	r4, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	0018      	movs	r0, r3
 8004320:	f7ff f8bd 	bl	800349e <_ZNSt9_Any_data9_M_accessEv>
 8004324:	0003      	movs	r3, r0
 8004326:	0019      	movs	r1, r3
 8004328:	2004      	movs	r0, #4
 800432a:	f7ff f8ae 	bl	800348a <_ZnwjPv>
 800432e:	0003      	movs	r3, r0
 8004330:	601c      	str	r4, [r3, #0]
	}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b005      	add	sp, #20
 8004338:	bd90      	pop	{r4, r7, pc}

0800433a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	003b      	movs	r3, r7
 8004344:	7019      	strb	r1, [r3, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f000 f85f 	bl	800440c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}

08004356 <_ZNSt10_Head_baseILj0EPN11SolarGators11DataModules18SteeringControllerELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <_ZNKSt9_Any_data9_M_accessIPSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>:
      _M_access() const
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff f89c 	bl	80034b0 <_ZNKSt9_Any_data9_M_accessEv>
 8004378:	0003      	movs	r3, r0
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}

08004382 <_ZSt16forward_as_tupleIJEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8004382:	b580      	push	{r7, lr}
 8004384:	af00      	add	r7, sp, #0
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8004386:	1c18      	adds	r0, r3, #0
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZNSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS2_EE6__callIvJEJLj0EEEET_OSt5tupleIJDpT0_EESt12_Index_tupleIJXspT1_EEE>:
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	701a      	strb	r2, [r3, #0]
	  return std::__invoke(_M_f,
 800439a:	68fc      	ldr	r4, [r7, #12]
	      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3308      	adds	r3, #8
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 f840 	bl	8004426 <_ZSt3getILj0EJPN11SolarGators11DataModules18SteeringControllerEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80043a6:	0001      	movs	r1, r0
	  return std::__invoke(_M_f,
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	2314      	movs	r3, #20
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 f846 	bl	8004440 <_ZNVKSt3_MuIPN11SolarGators11DataModules18SteeringControllerELb0ELb0EEclIRS3_St5tupleIJEEEEOT_SA_RT0_>
 80043b4:	0003      	movs	r3, r0
 80043b6:	0019      	movs	r1, r3
 80043b8:	0020      	movs	r0, r4
 80043ba:	f000 f850 	bl	800445e <_ZSt8__invokeIRMN11SolarGators11DataModules18SteeringControllerEFvvEJRPS2_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>
	      );
 80043be:	46c0      	nop			; (mov r8, r8)
	}
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b007      	add	sp, #28
 80043c4:	bd90      	pop	{r4, r7, pc}

080043c6 <_ZNKSt9_Any_data9_M_accessIPKSt5_BindIFMN11SolarGators11DataModules18SteeringControllerEFvvEPS4_EEEERKT_v>:
      _M_access() const
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7ff f86d 	bl	80034b0 <_ZNKSt9_Any_data9_M_accessEv>
 80043d6:	0003      	movs	r3, r0
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b002      	add	sp, #8
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7ff f860 	bl	80034b0 <_ZNKSt9_Any_data9_M_accessEv>
 80043f0:	0003      	movs	r3, r0
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}

0800440c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff f841 	bl	800349e <_ZNSt9_Any_data9_M_accessEv>
 800441c:	0003      	movs	r3, r0
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b002      	add	sp, #8
 8004424:	bd80      	pop	{r7, pc}

08004426 <_ZSt3getILj0EJPN11SolarGators11DataModules18SteeringControllerEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0018      	movs	r0, r3
 8004432:	f000 f82c 	bl	800448e <_ZSt12__get_helperILj0EPN11SolarGators11DataModules18SteeringControllerEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004436:	0003      	movs	r3, r0
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}

08004440 <_ZNVKSt3_MuIPN11SolarGators11DataModules18SteeringControllerELb0ELb0EEclIRS3_St5tupleIJEEEEOT_SA_RT0_>:
	operator()(_CVArg&& __arg, _Tuple&) const volatile
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
	{ return std::forward<_CVArg>(__arg); }
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	0018      	movs	r0, r3
 8004450:	f000 f82a 	bl	80044a8 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 8004454:	0003      	movs	r3, r0
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}

0800445e <_ZSt8__invokeIRMN11SolarGators11DataModules18SteeringControllerEFvvEJRPS2_EENSt15__invoke_resultIT_JDpT0_EE4typeEOS9_DpOSA_>:
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
 800445e:	b5b0      	push	{r4, r5, r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	0018      	movs	r0, r3
 800446c:	f000 f825 	bl	80044ba <_ZSt7forwardIRMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004470:	0004      	movs	r4, r0
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f817 	bl	80044a8 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 800447a:	0003      	movs	r3, r0
 800447c:	001a      	movs	r2, r3
 800447e:	0021      	movs	r1, r4
 8004480:	1c28      	adds	r0, r5, #0
 8004482:	f000 f823 	bl	80044cc <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>
					std::forward<_Args>(__args)...);
 8004486:	46c0      	nop			; (mov r8, r8)
    }
 8004488:	46bd      	mov	sp, r7
 800448a:	b004      	add	sp, #16
 800448c:	bdb0      	pop	{r4, r5, r7, pc}

0800448e <_ZSt12__get_helperILj0EPN11SolarGators11DataModules18SteeringControllerEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	0018      	movs	r0, r3
 800449a:	f7ff fe56 	bl	800414a <_ZNSt11_Tuple_implILj0EJPN11SolarGators11DataModules18SteeringControllerEEE7_M_headERS4_>
 800449e:	0003      	movs	r3, r0
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b002      	add	sp, #8
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b002      	add	sp, #8
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_ZSt7forwardIRMN11SolarGators11DataModules18SteeringControllerEFvvEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b002      	add	sp, #8
 80044ca:	bd80      	pop	{r7, pc}

080044cc <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_>:
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	230c      	movs	r3, #12
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	7018      	strb	r0, [r3, #0]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	0018      	movs	r0, r3
 80044e0:	f7ff ffe2 	bl	80044a8 <_ZSt7forwardIRPN11SolarGators11DataModules18SteeringControllerEEOT_RNSt16remove_referenceIS5_E4typeE>
 80044e4:	0003      	movs	r3, r0
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	1052      	asrs	r2, r2, #1
 80044ee:	1899      	adds	r1, r3, r2
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	6852      	ldr	r2, [r2, #4]
 80044f4:	2001      	movs	r0, #1
 80044f6:	4002      	ands	r2, r0
 80044f8:	d102      	bne.n	8004500 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x34>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	e008      	b.n	8004512 <_ZSt13__invoke_implIvRMN11SolarGators11DataModules18SteeringControllerEFvvERPS2_JEET_St21__invoke_memfun_derefOT0_OT1_DpOT2_+0x46>
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	6852      	ldr	r2, [r2, #4]
 8004504:	1052      	asrs	r2, r2, #1
 8004506:	189b      	adds	r3, r3, r2
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	18d3      	adds	r3, r2, r3
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	0008      	movs	r0, r1
 8004514:	4798      	blx	r3
 8004516:	46c0      	nop			; (mov r8, r8)
    }
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <_Z41__static_initialization_and_destruction_0ii>:
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b085      	sub	sp, #20
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d000      	beq.n	8004532 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8004530:	e0ba      	b.n	80046a8 <_Z41__static_initialization_and_destruction_0ii+0x188>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	4a8c      	ldr	r2, [pc, #560]	; (8004768 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d000      	beq.n	800453c <_Z41__static_initialization_and_destruction_0ii+0x1c>
 800453a:	e0b5      	b.n	80046a8 <_Z41__static_initialization_and_destruction_0ii+0x188>
#include "CAN.hpp"
#include "ILI9341.hpp"
#include "ILI9341_CMD.hpp"


SolarGators::DataModules::SteeringController LightsState;
 800453c:	4b8b      	ldr	r3, [pc, #556]	; (800476c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800453e:	0018      	movs	r0, r3
 8004540:	f004 f99e 	bl	8008880 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 8004544:	4a8a      	ldr	r2, [pc, #552]	; (8004770 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8004546:	4b8b      	ldr	r3, [pc, #556]	; (8004774 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004548:	0011      	movs	r1, r2
 800454a:	0018      	movs	r0, r3
 800454c:	f003 fa10 	bl	8007970 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>
SolarGators::DataModules::OrionBMSRx0 BMS_Rx_0(SolarGators::DataModuleInfo::BMS_RX0_MSG_ID, 0);
 8004550:	23d6      	movs	r3, #214	; 0xd6
 8004552:	00d9      	lsls	r1, r3, #3
 8004554:	4b88      	ldr	r3, [pc, #544]	; (8004778 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8004556:	2200      	movs	r2, #0
 8004558:	0018      	movs	r0, r3
 800455a:	f003 fc95 	bl	8007e88 <_ZN11SolarGators11DataModules11OrionBMSRx0C1Emm>
SolarGators::DataModules::MitsubaRx0 Motor_Rx_0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID, 0x04);
 800455e:	4987      	ldr	r1, [pc, #540]	; (800477c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8004560:	4b87      	ldr	r3, [pc, #540]	; (8004780 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004562:	2204      	movs	r2, #4
 8004564:	0018      	movs	r0, r3
 8004566:	f003 fab1 	bl	8007acc <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt>
// Forward Declares
extern CAN_HandleTypeDef hcan;
extern TIM_HandleTypeDef htim2;

// CAN Driver
SolarGators::Drivers::CANDriver CANController(&hcan, 0);
 800456a:	4986      	ldr	r1, [pc, #536]	; (8004784 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800456c:	4b86      	ldr	r3, [pc, #536]	; (8004788 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800456e:	2200      	movs	r2, #0
 8004570:	0018      	movs	r0, r3
 8004572:	f005 fe47 	bl	800a204 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>

// Buttons
// Left Side
SolarGators::Drivers::Button left_turn    ("Left Turn", LT_Button_GPIO_Port, LT_Button_Pin);
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4c84      	ldr	r4, [pc, #528]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800457c:	4984      	ldr	r1, [pc, #528]	; (8004790 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 800457e:	4885      	ldr	r0, [pc, #532]	; (8004794 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8004580:	2201      	movs	r2, #1
 8004582:	9201      	str	r2, [sp, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	9200      	str	r2, [sp, #0]
 8004588:	0022      	movs	r2, r4
 800458a:	f005 fd7f 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_minus ("Cruise Minus", Cruise_M_GPIO_Port, Cruise_M_Pin);
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2290      	movs	r2, #144	; 0x90
 8004594:	05d2      	lsls	r2, r2, #23
 8004596:	4980      	ldr	r1, [pc, #512]	; (8004798 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8004598:	4880      	ldr	r0, [pc, #512]	; (800479c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 800459a:	2401      	movs	r4, #1
 800459c:	9401      	str	r4, [sp, #4]
 800459e:	2400      	movs	r4, #0
 80045a0:	9400      	str	r4, [sp, #0]
 80045a2:	f005 fd73 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button eco          ("Eco Mode", Eco_Button_GPIO_Port, Eco_Button_Pin);
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4c78      	ldr	r4, [pc, #480]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80045ac:	497c      	ldr	r1, [pc, #496]	; (80047a0 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80045ae:	487d      	ldr	r0, [pc, #500]	; (80047a4 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	9201      	str	r2, [sp, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	9200      	str	r2, [sp, #0]
 80045b8:	0022      	movs	r2, r4
 80045ba:	f005 fd67 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button headlights   ("Headlights", HL_Button_GPIO_Port, HL_Button_Pin);
 80045be:	4a73      	ldr	r2, [pc, #460]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80045c0:	4979      	ldr	r1, [pc, #484]	; (80047a8 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80045c2:	487a      	ldr	r0, [pc, #488]	; (80047ac <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80045c4:	2301      	movs	r3, #1
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	2300      	movs	r3, #0
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	f005 fd5d 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button hazards      ("Left Turn", Haz_Button_GPIO_Port, Haz_Button_Pin);
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	015b      	lsls	r3, r3, #5
 80045d6:	4c76      	ldr	r4, [pc, #472]	; (80047b0 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80045d8:	496d      	ldr	r1, [pc, #436]	; (8004790 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80045da:	4876      	ldr	r0, [pc, #472]	; (80047b4 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80045dc:	2201      	movs	r2, #1
 80045de:	9201      	str	r2, [sp, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	9200      	str	r2, [sp, #0]
 80045e4:	0022      	movs	r2, r4
 80045e6:	f005 fd51 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
// Right Side
SolarGators::Drivers::Button right_turn   ("Right Turn", RT_Button_GPIO_Port, RT_Button_Pin);
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	019b      	lsls	r3, r3, #6
 80045ee:	4c67      	ldr	r4, [pc, #412]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80045f0:	4971      	ldr	r1, [pc, #452]	; (80047b8 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80045f2:	4872      	ldr	r0, [pc, #456]	; (80047bc <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	9201      	str	r2, [sp, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	9200      	str	r2, [sp, #0]
 80045fc:	0022      	movs	r2, r4
 80045fe:	f005 fd45 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", Cruise_P_GPIO_Port, Cruise_P_Pin);
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	4c61      	ldr	r4, [pc, #388]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004608:	496d      	ldr	r1, [pc, #436]	; (80047c0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800460a:	486e      	ldr	r0, [pc, #440]	; (80047c4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800460c:	2201      	movs	r2, #1
 800460e:	9201      	str	r2, [sp, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	9200      	str	r2, [sp, #0]
 8004614:	0022      	movs	r2, r4
 8004616:	f005 fd39 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button horn         ("Horn", Horn_Button_GPIO_Port, Horn_Button_Pin);
 800461a:	4a5c      	ldr	r2, [pc, #368]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800461c:	496a      	ldr	r1, [pc, #424]	; (80047c8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800461e:	486b      	ldr	r0, [pc, #428]	; (80047cc <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8004620:	2301      	movs	r3, #1
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	2300      	movs	r3, #0
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2301      	movs	r3, #1
 800462a:	f005 fd2f 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button cruise       ("Cruise", Cruise_Button_GPIO_Port, Cruise_Button_Pin);
 800462e:	4a57      	ldr	r2, [pc, #348]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004630:	4967      	ldr	r1, [pc, #412]	; (80047d0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8004632:	4868      	ldr	r0, [pc, #416]	; (80047d4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8004634:	2301      	movs	r3, #1
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	2300      	movs	r3, #0
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2302      	movs	r3, #2
 800463e:	f005 fd25 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
SolarGators::Drivers::Button reverse      ("Reverse", Reverse_Button_GPIO_Port, Reverse_Button_Pin, 3000);
 8004642:	4a52      	ldr	r2, [pc, #328]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004644:	4964      	ldr	r1, [pc, #400]	; (80047d8 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8004646:	4865      	ldr	r0, [pc, #404]	; (80047dc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8004648:	2301      	movs	r3, #1
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	4b64      	ldr	r3, [pc, #400]	; (80047e0 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2308      	movs	r3, #8
 8004652:	f005 fd1b 	bl	800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>
// Leds
// Left Side
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_Led_GPIO_Port, LT_Led_Pin);
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	2290      	movs	r2, #144	; 0x90
 800465c:	05d2      	lsls	r2, r2, #23
 800465e:	4961      	ldr	r1, [pc, #388]	; (80047e4 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8004660:	4861      	ldr	r0, [pc, #388]	; (80047e8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8004662:	f008 f8a9 	bl	800c7b8 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED eco_indicator   ("ECO Indicator", Eco_Led_GPIO_Port, Eco_Led_Pin);
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4a48      	ldr	r2, [pc, #288]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800466c:	495f      	ldr	r1, [pc, #380]	; (80047ec <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800466e:	4860      	ldr	r0, [pc, #384]	; (80047f0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8004670:	f008 f8a2 	bl	800c7b8 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED hl_indicator    ("HL Indicator", HL_Led_GPIO_Port, HL_Led_Pin);
 8004674:	4a45      	ldr	r2, [pc, #276]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004676:	495f      	ldr	r1, [pc, #380]	; (80047f4 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8004678:	485f      	ldr	r0, [pc, #380]	; (80047f8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	f008 f89c 	bl	800c7b8 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
// Right Side
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_Led_GPIO_Port, RT_Led_Pin);
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	01db      	lsls	r3, r3, #7
 8004684:	4a41      	ldr	r2, [pc, #260]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004686:	495d      	ldr	r1, [pc, #372]	; (80047fc <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8004688:	485d      	ldr	r0, [pc, #372]	; (8004800 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800468a:	f008 f895 	bl	800c7b8 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED cr_indicator    ("CR Indicator", Cruise_Led_GPIO_Port, Cruise_Led_Pin);
 800468e:	4a3f      	ldr	r2, [pc, #252]	; (800478c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004690:	495c      	ldr	r1, [pc, #368]	; (8004804 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8004692:	485d      	ldr	r0, [pc, #372]	; (8004808 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8004694:	2304      	movs	r3, #4
 8004696:	f008 f88f 	bl	800c7b8 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
SolarGators::Drivers::LED rev_indicator   ("Rev Indicator", Reverse_Led_GPIO_Port, Reverse_Led_Pin);
 800469a:	2390      	movs	r3, #144	; 0x90
 800469c:	05da      	lsls	r2, r3, #23
 800469e:	495b      	ldr	r1, [pc, #364]	; (800480c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80046a0:	485b      	ldr	r0, [pc, #364]	; (8004810 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80046a2:	2301      	movs	r3, #1
 80046a4:	f008 f888 	bl	800c7b8 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d157      	bne.n	800475e <_Z41__static_initialization_and_destruction_0ii+0x23e>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d153      	bne.n	800475e <_Z41__static_initialization_and_destruction_0ii+0x23e>
 80046b6:	4b56      	ldr	r3, [pc, #344]	; (8004810 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80046b8:	0018      	movs	r0, r3
 80046ba:	f008 f8a1 	bl	800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED cr_indicator    ("CR Indicator", Cruise_Led_GPIO_Port, Cruise_Led_Pin);
 80046be:	4b52      	ldr	r3, [pc, #328]	; (8004808 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80046c0:	0018      	movs	r0, r3
 80046c2:	f008 f89d 	bl	800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED rt_indicator    ("RT Indicator", RT_Led_GPIO_Port, RT_Led_Pin);
 80046c6:	4b4e      	ldr	r3, [pc, #312]	; (8004800 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80046c8:	0018      	movs	r0, r3
 80046ca:	f008 f899 	bl	800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED hl_indicator    ("HL Indicator", HL_Led_GPIO_Port, HL_Led_Pin);
 80046ce:	4b4a      	ldr	r3, [pc, #296]	; (80047f8 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80046d0:	0018      	movs	r0, r3
 80046d2:	f008 f895 	bl	800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED eco_indicator   ("ECO Indicator", Eco_Led_GPIO_Port, Eco_Led_Pin);
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80046d8:	0018      	movs	r0, r3
 80046da:	f008 f891 	bl	800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::LED lt_indicator    ("LT Indicator", LT_Led_GPIO_Port, LT_Led_Pin);
 80046de:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80046e0:	0018      	movs	r0, r3
 80046e2:	f008 f88d 	bl	800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>
SolarGators::Drivers::Button reverse      ("Reverse", Reverse_Button_GPIO_Port, Reverse_Button_Pin, 3000);
 80046e6:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80046e8:	0018      	movs	r0, r3
 80046ea:	f005 fd02 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise       ("Cruise", Cruise_Button_GPIO_Port, Cruise_Button_Pin);
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80046f0:	0018      	movs	r0, r3
 80046f2:	f005 fcfe 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button horn         ("Horn", Horn_Button_GPIO_Port, Horn_Button_Pin);
 80046f6:	4b35      	ldr	r3, [pc, #212]	; (80047cc <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80046f8:	0018      	movs	r0, r3
 80046fa:	f005 fcfa 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise_plus  ("Cruise Plus", Cruise_P_GPIO_Port, Cruise_P_Pin);
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8004700:	0018      	movs	r0, r3
 8004702:	f005 fcf6 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button right_turn   ("Right Turn", RT_Button_GPIO_Port, RT_Button_Pin);
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8004708:	0018      	movs	r0, r3
 800470a:	f005 fcf2 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button hazards      ("Left Turn", Haz_Button_GPIO_Port, Haz_Button_Pin);
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8004710:	0018      	movs	r0, r3
 8004712:	f005 fcee 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button headlights   ("Headlights", HL_Button_GPIO_Port, HL_Button_Pin);
 8004716:	4b25      	ldr	r3, [pc, #148]	; (80047ac <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8004718:	0018      	movs	r0, r3
 800471a:	f005 fcea 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button eco          ("Eco Mode", Eco_Button_GPIO_Port, Eco_Button_Pin);
 800471e:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8004720:	0018      	movs	r0, r3
 8004722:	f005 fce6 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button cruise_minus ("Cruise Minus", Cruise_M_GPIO_Port, Cruise_M_Pin);
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8004728:	0018      	movs	r0, r3
 800472a:	f005 fce2 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::Button left_turn    ("Left Turn", LT_Button_GPIO_Port, LT_Button_Pin);
 800472e:	4b19      	ldr	r3, [pc, #100]	; (8004794 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8004730:	0018      	movs	r0, r3
 8004732:	f005 fcde 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
SolarGators::Drivers::CANDriver CANController(&hcan, 0);
 8004736:	4b14      	ldr	r3, [pc, #80]	; (8004788 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8004738:	0018      	movs	r0, r3
 800473a:	f005 fe13 	bl	800a364 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
SolarGators::DataModules::MitsubaRx0 Motor_Rx_0(SolarGators::DataModuleInfo::MOTORRX0_RL_MSG_ID, 0x04);
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004740:	0018      	movs	r0, r3
 8004742:	f003 fa01 	bl	8007b48 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
SolarGators::DataModules::OrionBMSRx0 BMS_Rx_0(SolarGators::DataModuleInfo::BMS_RX0_MSG_ID, 0);
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8004748:	0018      	movs	r0, r3
 800474a:	f7fe fef9 	bl	8003540 <_ZN11SolarGators11DataModules11OrionBMSRx0D1Ev>
SolarGators::DataModules::MitsubaRequest McReq(SolarGators::DataModuleInfo::MOTORTX_RL_MSG_ID);
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004750:	0018      	movs	r0, r3
 8004752:	f003 f929 	bl	80079a8 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
SolarGators::DataModules::SteeringController LightsState;
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8004758:	0018      	movs	r0, r3
 800475a:	f004 f931 	bl	80089c0 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b003      	add	sp, #12
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	0000ffff 	.word	0x0000ffff
 800476c:	200000b4 	.word	0x200000b4
 8004770:	08f89540 	.word	0x08f89540
 8004774:	20000730 	.word	0x20000730
 8004778:	200007ac 	.word	0x200007ac
 800477c:	08850225 	.word	0x08850225
 8004780:	2000082c 	.word	0x2000082c
 8004784:	20002dc8 	.word	0x20002dc8
 8004788:	200008b4 	.word	0x200008b4
 800478c:	48000800 	.word	0x48000800
 8004790:	080131a0 	.word	0x080131a0
 8004794:	20000d00 	.word	0x20000d00
 8004798:	080131ac 	.word	0x080131ac
 800479c:	20000d2c 	.word	0x20000d2c
 80047a0:	080131bc 	.word	0x080131bc
 80047a4:	20000d58 	.word	0x20000d58
 80047a8:	080131c8 	.word	0x080131c8
 80047ac:	20000d84 	.word	0x20000d84
 80047b0:	48000400 	.word	0x48000400
 80047b4:	20000db0 	.word	0x20000db0
 80047b8:	080131d4 	.word	0x080131d4
 80047bc:	20000ddc 	.word	0x20000ddc
 80047c0:	080131e0 	.word	0x080131e0
 80047c4:	20000e08 	.word	0x20000e08
 80047c8:	080131ec 	.word	0x080131ec
 80047cc:	20000e34 	.word	0x20000e34
 80047d0:	080131f4 	.word	0x080131f4
 80047d4:	20000e60 	.word	0x20000e60
 80047d8:	080131fc 	.word	0x080131fc
 80047dc:	20000e8c 	.word	0x20000e8c
 80047e0:	00000bb8 	.word	0x00000bb8
 80047e4:	08013204 	.word	0x08013204
 80047e8:	20000eb8 	.word	0x20000eb8
 80047ec:	08013214 	.word	0x08013214
 80047f0:	20000ecc 	.word	0x20000ecc
 80047f4:	08013224 	.word	0x08013224
 80047f8:	20000ee0 	.word	0x20000ee0
 80047fc:	08013234 	.word	0x08013234
 8004800:	20000ef4 	.word	0x20000ef4
 8004804:	08013244 	.word	0x08013244
 8004808:	20000f08 	.word	0x20000f08
 800480c:	08013254 	.word	0x08013254
 8004810:	20000f1c 	.word	0x20000f1c

08004814 <_GLOBAL__sub_I_LightsState>:
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <_GLOBAL__sub_I_LightsState+0x14>)
 800481a:	0019      	movs	r1, r3
 800481c:	2001      	movs	r0, #1
 800481e:	f7ff fe7f 	bl	8004520 <_Z41__static_initialization_and_destruction_0ii>
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	0000ffff 	.word	0x0000ffff

0800482c <_GLOBAL__sub_D_LightsState>:
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <_GLOBAL__sub_D_LightsState+0x14>)
 8004832:	0019      	movs	r1, r3
 8004834:	2000      	movs	r0, #0
 8004836:	f7ff fe73 	bl	8004520 <_Z41__static_initialization_and_destruction_0ii>
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	0000ffff 	.word	0x0000ffff

08004844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004844:	480d      	ldr	r0, [pc, #52]	; (800487c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004846:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004848:	480d      	ldr	r0, [pc, #52]	; (8004880 <LoopForever+0x6>)
  ldr r1, =_edata
 800484a:	490e      	ldr	r1, [pc, #56]	; (8004884 <LoopForever+0xa>)
  ldr r2, =_sidata
 800484c:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <LoopForever+0xe>)
  movs r3, #0
 800484e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004850:	e002      	b.n	8004858 <LoopCopyDataInit>

08004852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004856:	3304      	adds	r3, #4

08004858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800485a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800485c:	d3f9      	bcc.n	8004852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004860:	4c0b      	ldr	r4, [pc, #44]	; (8004890 <LoopForever+0x16>)
  movs r3, #0
 8004862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004864:	e001      	b.n	800486a <LoopFillZerobss>

08004866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004868:	3204      	adds	r2, #4

0800486a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800486a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800486c:	d3fb      	bcc.n	8004866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800486e:	f7fe fe07 	bl	8003480 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004872:	f00d fcdb 	bl	801222c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004876:	f7fd ffdf 	bl	8002838 <main>

0800487a <LoopForever>:

LoopForever:
    b LoopForever
 800487a:	e7fe      	b.n	800487a <LoopForever>
  ldr   r0, =_estack
 800487c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004884:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004888:	08014828 	.word	0x08014828
  ldr r2, =_sbss
 800488c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8004890:	200034cc 	.word	0x200034cc

08004894 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004894:	e7fe      	b.n	8004894 <ADC1_COMP_IRQHandler>
	...

08004898 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <HAL_Init+0x24>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_Init+0x24>)
 80048a2:	2110      	movs	r1, #16
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80048a8:	2003      	movs	r0, #3
 80048aa:	f7fe fc69 	bl	8003180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048ae:	f7fe fb2b 	bl	8002f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	40022000 	.word	0x40022000

080048c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_IncTick+0x1c>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	001a      	movs	r2, r3
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_IncTick+0x20>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	18d2      	adds	r2, r2, r3
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_IncTick+0x20>)
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	20000024 	.word	0x20000024
 80048e0:	20003478 	.word	0x20003478

080048e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  return uwTick;
 80048e8:	4b02      	ldr	r3, [pc, #8]	; (80048f4 <HAL_GetTick+0x10>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	20003478 	.word	0x20003478

080048f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0f0      	b.n	8004aec <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	5c9b      	ldrb	r3, [r3, r2]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f7fe fb1f 	bl	8002f5c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2101      	movs	r1, #1
 800492a:	430a      	orrs	r2, r1
 800492c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800492e:	f7ff ffd9 	bl	80048e4 <HAL_GetTick>
 8004932:	0003      	movs	r3, r0
 8004934:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004936:	e013      	b.n	8004960 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004938:	f7ff ffd4 	bl	80048e4 <HAL_GetTick>
 800493c:	0002      	movs	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b0a      	cmp	r3, #10
 8004944:	d90c      	bls.n	8004960 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	0292      	lsls	r2, r2, #10
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	2105      	movs	r1, #5
 800495a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0c5      	b.n	8004aec <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	4013      	ands	r3, r2
 800496a:	d0e5      	beq.n	8004938 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2102      	movs	r1, #2
 8004978:	438a      	bics	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800497c:	f7ff ffb2 	bl	80048e4 <HAL_GetTick>
 8004980:	0003      	movs	r3, r0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004984:	e013      	b.n	80049ae <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004986:	f7ff ffad 	bl	80048e4 <HAL_GetTick>
 800498a:	0002      	movs	r2, r0
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b0a      	cmp	r3, #10
 8004992:	d90c      	bls.n	80049ae <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	2280      	movs	r2, #128	; 0x80
 800499a:	0292      	lsls	r2, r2, #10
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	2105      	movs	r1, #5
 80049a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e09e      	b.n	8004aec <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	4013      	ands	r3, r2
 80049b8:	d1e5      	bne.n	8004986 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	7e1b      	ldrb	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d108      	bne.n	80049d4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e007      	b.n	80049e4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	438a      	bics	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	7e5b      	ldrb	r3, [r3, #25]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d108      	bne.n	80049fe <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2140      	movs	r1, #64	; 0x40
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e007      	b.n	8004a0e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7e9b      	ldrb	r3, [r3, #26]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d108      	bne.n	8004a28 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2120      	movs	r1, #32
 8004a22:	430a      	orrs	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e007      	b.n	8004a38 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2120      	movs	r1, #32
 8004a34:	438a      	bics	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7edb      	ldrb	r3, [r3, #27]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d108      	bne.n	8004a52 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2110      	movs	r1, #16
 8004a4c:	438a      	bics	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2110      	movs	r1, #16
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7f1b      	ldrb	r3, [r3, #28]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d108      	bne.n	8004a7c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2108      	movs	r1, #8
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e007      	b.n	8004a8c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2108      	movs	r1, #8
 8004a88:	438a      	bics	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7f5b      	ldrb	r3, [r3, #29]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d108      	bne.n	8004aa6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2104      	movs	r1, #4
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e007      	b.n	8004ab6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2104      	movs	r1, #4
 8004ab2:	438a      	bics	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	0011      	movs	r1, r2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b004      	add	sp, #16
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b04:	2013      	movs	r0, #19
 8004b06:	183b      	adds	r3, r7, r0
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	2120      	movs	r1, #32
 8004b0c:	5c52      	ldrb	r2, [r2, r1]
 8004b0e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b10:	0002      	movs	r2, r0
 8004b12:	18bb      	adds	r3, r7, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d004      	beq.n	8004b24 <HAL_CAN_ConfigFilter+0x30>
 8004b1a:	18bb      	adds	r3, r7, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d000      	beq.n	8004b24 <HAL_CAN_ConfigFilter+0x30>
 8004b22:	e0cd      	b.n	8004cc0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	58d3      	ldr	r3, [r2, r3]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	0011      	movs	r1, r2
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	221f      	movs	r2, #31
 8004b40:	4013      	ands	r3, r2
 8004b42:	2201      	movs	r2, #1
 8004b44:	409a      	lsls	r2, r3
 8004b46:	0013      	movs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	2387      	movs	r3, #135	; 0x87
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	58d3      	ldr	r3, [r2, r3]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	43d2      	mvns	r2, r2
 8004b56:	401a      	ands	r2, r3
 8004b58:	0011      	movs	r1, r2
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	2387      	movs	r3, #135	; 0x87
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d129      	bne.n	8004bbe <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	2383      	movs	r3, #131	; 0x83
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	58d3      	ldr	r3, [r2, r3]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	43d2      	mvns	r2, r2
 8004b76:	401a      	ands	r2, r3
 8004b78:	0011      	movs	r1, r2
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	2383      	movs	r3, #131	; 0x83
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b94:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3248      	adds	r2, #72	; 0x48
 8004b9a:	00d2      	lsls	r2, r2, #3
 8004b9c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bb2:	6979      	ldr	r1, [r7, #20]
 8004bb4:	3348      	adds	r3, #72	; 0x48
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	18cb      	adds	r3, r1, r3
 8004bba:	3304      	adds	r3, #4
 8004bbc:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d128      	bne.n	8004c18 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	2383      	movs	r3, #131	; 0x83
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	58d2      	ldr	r2, [r2, r3]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	0011      	movs	r1, r2
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	2383      	movs	r3, #131	; 0x83
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004bee:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3248      	adds	r2, #72	; 0x48
 8004bf4:	00d2      	lsls	r2, r2, #3
 8004bf6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	3348      	adds	r3, #72	; 0x48
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	18cb      	adds	r3, r1, r3
 8004c14:	3304      	adds	r3, #4
 8004c16:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10c      	bne.n	8004c3a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	2381      	movs	r3, #129	; 0x81
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	58d3      	ldr	r3, [r2, r3]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	43d2      	mvns	r2, r2
 8004c2c:	401a      	ands	r2, r3
 8004c2e:	0011      	movs	r1, r2
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	2381      	movs	r3, #129	; 0x81
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	50d1      	str	r1, [r2, r3]
 8004c38:	e00a      	b.n	8004c50 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	2381      	movs	r3, #129	; 0x81
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	58d2      	ldr	r2, [r2, r3]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	0011      	movs	r1, r2
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	2381      	movs	r3, #129	; 0x81
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10c      	bne.n	8004c72 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	2385      	movs	r3, #133	; 0x85
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	58d3      	ldr	r3, [r2, r3]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	43d2      	mvns	r2, r2
 8004c64:	401a      	ands	r2, r3
 8004c66:	0011      	movs	r1, r2
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	2385      	movs	r3, #133	; 0x85
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	50d1      	str	r1, [r2, r3]
 8004c70:	e00a      	b.n	8004c88 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	2385      	movs	r3, #133	; 0x85
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	58d2      	ldr	r2, [r2, r3]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	0011      	movs	r1, r2
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	2385      	movs	r3, #133	; 0x85
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	2387      	movs	r3, #135	; 0x87
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	58d2      	ldr	r2, [r2, r3]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	0011      	movs	r1, r2
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	2387      	movs	r3, #135	; 0x87
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	58d3      	ldr	r3, [r2, r3]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	4393      	bics	r3, r2
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e007      	b.n	8004cd0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2280      	movs	r2, #128	; 0x80
 8004cc6:	02d2      	lsls	r2, r2, #11
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
  }
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b006      	add	sp, #24
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	5c9b      	ldrb	r3, [r3, r2]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d12f      	bne.n	8004d4c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2101      	movs	r1, #1
 8004d00:	438a      	bics	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d04:	f7ff fdee 	bl	80048e4 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d0c:	e013      	b.n	8004d36 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d0e:	f7ff fde9 	bl	80048e4 <HAL_GetTick>
 8004d12:	0002      	movs	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b0a      	cmp	r3, #10
 8004d1a:	d90c      	bls.n	8004d36 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2280      	movs	r2, #128	; 0x80
 8004d22:	0292      	lsls	r2, r2, #10
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	2105      	movs	r1, #5
 8004d30:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e012      	b.n	8004d5c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d1e5      	bne.n	8004d0e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e007      	b.n	8004d5c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	0312      	lsls	r2, r2, #12
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
  }
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b004      	add	sp, #16
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d72:	201f      	movs	r0, #31
 8004d74:	183b      	adds	r3, r7, r0
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	2120      	movs	r1, #32
 8004d7a:	5c52      	ldrb	r2, [r2, r1]
 8004d7c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d86:	183b      	adds	r3, r7, r0
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d004      	beq.n	8004d98 <HAL_CAN_AddTxMessage+0x34>
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d000      	beq.n	8004d98 <HAL_CAN_AddTxMessage+0x34>
 8004d96:	e0b7      	b.n	8004f08 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	04db      	lsls	r3, r3, #19
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d10a      	bne.n	8004db8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	051b      	lsls	r3, r3, #20
 8004da8:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004daa:	d105      	bne.n	8004db8 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	055b      	lsls	r3, r3, #21
 8004db2:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004db4:	d100      	bne.n	8004db8 <HAL_CAN_AddTxMessage+0x54>
 8004db6:	e09e      	b.n	8004ef6 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	0e1b      	lsrs	r3, r3, #24
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d908      	bls.n	8004dda <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	2280      	movs	r2, #128	; 0x80
 8004dce:	0412      	lsls	r2, r2, #16
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e09e      	b.n	8004f18 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004dda:	2201      	movs	r2, #1
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	409a      	lsls	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10c      	bne.n	8004e06 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4311      	orrs	r1, r2
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	3218      	adds	r2, #24
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	50d1      	str	r1, [r2, r3]
 8004e04:	e00f      	b.n	8004e26 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e10:	431a      	orrs	r2, r3
 8004e12:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8004e1c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	3218      	adds	r2, #24
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3318      	adds	r3, #24
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	18cb      	adds	r3, r1, r3
 8004e36:	3304      	adds	r3, #4
 8004e38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	7d1b      	ldrb	r3, [r3, #20]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d112      	bne.n	8004e68 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	18d3      	adds	r3, r2, r3
 8004e4e:	3304      	adds	r3, #4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3318      	adds	r3, #24
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	18cb      	adds	r3, r1, r3
 8004e64:	3304      	adds	r3, #4
 8004e66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3307      	adds	r3, #7
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	061a      	lsls	r2, r3, #24
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3306      	adds	r3, #6
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3305      	adds	r3, #5
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	23c6      	movs	r3, #198	; 0xc6
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	0109      	lsls	r1, r1, #4
 8004e9a:	1841      	adds	r1, r0, r1
 8004e9c:	18cb      	adds	r3, r1, r3
 8004e9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	061a      	lsls	r2, r3, #24
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3302      	adds	r3, #2
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	23c4      	movs	r3, #196	; 0xc4
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	0109      	lsls	r1, r1, #4
 8004ed0:	1841      	adds	r1, r0, r1
 8004ed2:	18cb      	adds	r3, r1, r3
 8004ed4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	3218      	adds	r2, #24
 8004ede:	0112      	lsls	r2, r2, #4
 8004ee0:	58d2      	ldr	r2, [r2, r3]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	3218      	adds	r2, #24
 8004eee:	0112      	lsls	r2, r2, #4
 8004ef0:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e010      	b.n	8004f18 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	0392      	lsls	r2, r2, #14
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e007      	b.n	8004f18 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2280      	movs	r2, #128	; 0x80
 8004f0e:	02d2      	lsls	r2, r2, #11
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
  }
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b008      	add	sp, #32
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f2c:	200b      	movs	r0, #11
 8004f2e:	183b      	adds	r3, r7, r0
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	2120      	movs	r1, #32
 8004f34:	5c52      	ldrb	r2, [r2, r1]
 8004f36:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f38:	0002      	movs	r2, r0
 8004f3a:	18bb      	adds	r3, r7, r2
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d003      	beq.n	8004f4a <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8004f42:	18bb      	adds	r3, r7, r2
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d11d      	bne.n	8004f86 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	04db      	lsls	r3, r3, #19
 8004f54:	4013      	ands	r3, r2
 8004f56:	d002      	beq.n	8004f5e <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	051b      	lsls	r3, r3, #20
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d002      	beq.n	8004f72 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	055b      	lsls	r3, r3, #21
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d002      	beq.n	8004f86 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004f86:	68fb      	ldr	r3, [r7, #12]
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b004      	add	sp, #16
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f9e:	2017      	movs	r0, #23
 8004fa0:	183b      	adds	r3, r7, r0
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	5c52      	ldrb	r2, [r2, r1]
 8004fa8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004faa:	0002      	movs	r2, r0
 8004fac:	18bb      	adds	r3, r7, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d004      	beq.n	8004fbe <HAL_CAN_GetRxMessage+0x2e>
 8004fb4:	18bb      	adds	r3, r7, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d000      	beq.n	8004fbe <HAL_CAN_GetRxMessage+0x2e>
 8004fbc:	e0f8      	b.n	80051b0 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d117      	bne.n	8005000 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2280      	movs	r2, #128	; 0x80
 8004fd6:	0392      	lsls	r2, r2, #14
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0ee      	b.n	80051c0 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	4013      	ands	r3, r2
 8004fec:	d108      	bne.n	8005000 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2280      	movs	r2, #128	; 0x80
 8004ff4:	0392      	lsls	r2, r2, #14
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0df      	b.n	80051c0 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	321b      	adds	r2, #27
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	58d3      	ldr	r3, [r2, r3]
 800500c:	2204      	movs	r2, #4
 800500e:	401a      	ands	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	321b      	adds	r2, #27
 8005024:	0112      	lsls	r2, r2, #4
 8005026:	58d3      	ldr	r3, [r2, r3]
 8005028:	0d5b      	lsrs	r3, r3, #21
 800502a:	055b      	lsls	r3, r3, #21
 800502c:	0d5a      	lsrs	r2, r3, #21
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e00a      	b.n	800504a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	321b      	adds	r2, #27
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	58d3      	ldr	r3, [r2, r3]
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	08da      	lsrs	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	321b      	adds	r2, #27
 8005052:	0112      	lsls	r2, r2, #4
 8005054:	58d3      	ldr	r3, [r2, r3]
 8005056:	2202      	movs	r2, #2
 8005058:	401a      	ands	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	331b      	adds	r3, #27
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	18d3      	adds	r3, r2, r3
 800506a:	3304      	adds	r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	220f      	movs	r2, #15
 8005070:	401a      	ands	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	331b      	adds	r3, #27
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	18d3      	adds	r3, r2, r3
 8005082:	3304      	adds	r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	22ff      	movs	r2, #255	; 0xff
 800508a:	401a      	ands	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	331b      	adds	r3, #27
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	18d3      	adds	r3, r2, r3
 800509c:	3304      	adds	r3, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	0c1a      	lsrs	r2, r3, #16
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6819      	ldr	r1, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	23dc      	movs	r3, #220	; 0xdc
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	0112      	lsls	r2, r2, #4
 80050b6:	188a      	adds	r2, r1, r2
 80050b8:	18d3      	adds	r3, r2, r3
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6819      	ldr	r1, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	23dc      	movs	r3, #220	; 0xdc
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	0112      	lsls	r2, r2, #4
 80050ce:	188a      	adds	r2, r1, r2
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	0a1a      	lsrs	r2, r3, #8
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	23dc      	movs	r3, #220	; 0xdc
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	0112      	lsls	r2, r2, #4
 80050ea:	188a      	adds	r2, r1, r2
 80050ec:	18d3      	adds	r3, r2, r3
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0c1a      	lsrs	r2, r3, #16
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3302      	adds	r3, #2
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6819      	ldr	r1, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	23dc      	movs	r3, #220	; 0xdc
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	0112      	lsls	r2, r2, #4
 8005106:	188a      	adds	r2, r1, r2
 8005108:	18d3      	adds	r3, r2, r3
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0e1a      	lsrs	r2, r3, #24
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	3303      	adds	r3, #3
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	23de      	movs	r3, #222	; 0xde
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	188a      	adds	r2, r1, r2
 8005124:	18d3      	adds	r3, r2, r3
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	3304      	adds	r3, #4
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	23de      	movs	r3, #222	; 0xde
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	0112      	lsls	r2, r2, #4
 800513c:	188a      	adds	r2, r1, r2
 800513e:	18d3      	adds	r3, r2, r3
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	0a1a      	lsrs	r2, r3, #8
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	3305      	adds	r3, #5
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6819      	ldr	r1, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	23de      	movs	r3, #222	; 0xde
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	188a      	adds	r2, r1, r2
 800515a:	18d3      	adds	r3, r2, r3
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	0c1a      	lsrs	r2, r3, #16
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	3306      	adds	r3, #6
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6819      	ldr	r1, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	23de      	movs	r3, #222	; 0xde
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	0112      	lsls	r2, r2, #4
 8005174:	188a      	adds	r2, r1, r2
 8005176:	18d3      	adds	r3, r2, r3
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	0e1a      	lsrs	r2, r3, #24
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	3307      	adds	r3, #7
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2120      	movs	r1, #32
 8005196:	430a      	orrs	r2, r1
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e007      	b.n	80051ac <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2120      	movs	r1, #32
 80051a8:	430a      	orrs	r2, r1
 80051aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e007      	b.n	80051c0 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	02d2      	lsls	r2, r2, #11
 80051b8:	431a      	orrs	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
  }
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b006      	add	sp, #24
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051d6:	200b      	movs	r0, #11
 80051d8:	183b      	adds	r3, r7, r0
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	2120      	movs	r1, #32
 80051de:	5c52      	ldrb	r2, [r2, r1]
 80051e0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80051e2:	0002      	movs	r2, r0
 80051e4:	18bb      	adds	r3, r7, r2
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d003      	beq.n	80051f4 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 80051ec:	18bb      	adds	r3, r7, r2
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d10f      	bne.n	8005214 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2203      	movs	r2, #3
 8005202:	4013      	ands	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e005      	b.n	8005214 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2203      	movs	r2, #3
 8005210:	4013      	ands	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005214:	68fb      	ldr	r3, [r7, #12]
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b004      	add	sp, #16
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005228:	200f      	movs	r0, #15
 800522a:	183b      	adds	r3, r7, r0
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	2120      	movs	r1, #32
 8005230:	5c52      	ldrb	r2, [r2, r1]
 8005232:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005234:	0002      	movs	r2, r0
 8005236:	18bb      	adds	r3, r7, r2
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d003      	beq.n	8005246 <HAL_CAN_ActivateNotification+0x28>
 800523e:	18bb      	adds	r3, r7, r2
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d109      	bne.n	800525a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6959      	ldr	r1, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	e007      	b.n	800526a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	02d2      	lsls	r2, r2, #11
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
  }
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b004      	add	sp, #16
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800527c:	200f      	movs	r0, #15
 800527e:	183b      	adds	r3, r7, r0
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	2120      	movs	r1, #32
 8005284:	5c52      	ldrb	r2, [r2, r1]
 8005286:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005288:	0002      	movs	r2, r0
 800528a:	18bb      	adds	r3, r7, r2
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d003      	beq.n	800529a <HAL_CAN_DeactivateNotification+0x28>
 8005292:	18bb      	adds	r3, r7, r2
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d10a      	bne.n	80052b0 <HAL_CAN_DeactivateNotification+0x3e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	43d9      	mvns	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	400a      	ands	r2, r1
 80052aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e007      	b.n	80052c0 <HAL_CAN_DeactivateNotification+0x4e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2280      	movs	r2, #128	; 0x80
 80052b6:	02d2      	lsls	r2, r2, #11
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
  }
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b004      	add	sp, #16
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2201      	movs	r2, #1
 8005308:	4013      	ands	r3, r2
 800530a:	d100      	bne.n	800530e <HAL_CAN_IRQHandler+0x46>
 800530c:	e084      	b.n	8005418 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2201      	movs	r2, #1
 8005312:	4013      	ands	r3, r2
 8005314:	d024      	beq.n	8005360 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2201      	movs	r2, #1
 800531c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2202      	movs	r2, #2
 8005322:	4013      	ands	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f981 	bl	8005630 <HAL_CAN_TxMailbox0CompleteCallback>
 800532e:	e017      	b.n	8005360 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2204      	movs	r2, #4
 8005334:	4013      	ands	r3, r2
 8005336:	d005      	beq.n	8005344 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	2280      	movs	r2, #128	; 0x80
 800533c:	0112      	lsls	r2, r2, #4
 800533e:	4313      	orrs	r3, r2
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
 8005342:	e00d      	b.n	8005360 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2208      	movs	r2, #8
 8005348:	4013      	ands	r3, r2
 800534a:	d005      	beq.n	8005358 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	0152      	lsls	r2, r2, #5
 8005352:	4313      	orrs	r3, r2
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
 8005356:	e003      	b.n	8005360 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	0018      	movs	r0, r3
 800535c:	f000 f980 	bl	8005660 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4013      	ands	r3, r2
 8005368:	d028      	beq.n	80053bc <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	0052      	lsls	r2, r2, #1
 8005372:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4013      	ands	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f95d 	bl	8005640 <HAL_CAN_TxMailbox1CompleteCallback>
 8005386:	e019      	b.n	80053bc <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4013      	ands	r3, r2
 8005390:	d005      	beq.n	800539e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	2280      	movs	r2, #128	; 0x80
 8005396:	0192      	lsls	r2, r2, #6
 8005398:	4313      	orrs	r3, r2
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e00e      	b.n	80053bc <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	4013      	ands	r3, r2
 80053a6:	d005      	beq.n	80053b4 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	2280      	movs	r2, #128	; 0x80
 80053ac:	01d2      	lsls	r2, r2, #7
 80053ae:	4313      	orrs	r3, r2
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
 80053b2:	e003      	b.n	80053bc <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f000 f95a 	bl	8005670 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	025b      	lsls	r3, r3, #9
 80053c2:	4013      	ands	r3, r2
 80053c4:	d028      	beq.n	8005418 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2280      	movs	r2, #128	; 0x80
 80053cc:	0252      	lsls	r2, r2, #9
 80053ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	029b      	lsls	r3, r3, #10
 80053d6:	4013      	ands	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	0018      	movs	r0, r3
 80053de:	f000 f937 	bl	8005650 <HAL_CAN_TxMailbox2CompleteCallback>
 80053e2:	e019      	b.n	8005418 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	02db      	lsls	r3, r3, #11
 80053ea:	4013      	ands	r3, r2
 80053ec:	d005      	beq.n	80053fa <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	2280      	movs	r2, #128	; 0x80
 80053f2:	0212      	lsls	r2, r2, #8
 80053f4:	4313      	orrs	r3, r2
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
 80053f8:	e00e      	b.n	8005418 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	031b      	lsls	r3, r3, #12
 8005400:	4013      	ands	r3, r2
 8005402:	d005      	beq.n	8005410 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	0252      	lsls	r2, r2, #9
 800540a:	4313      	orrs	r3, r2
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
 800540e:	e003      	b.n	8005418 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	0018      	movs	r0, r3
 8005414:	f000 f934 	bl	8005680 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	2208      	movs	r2, #8
 800541c:	4013      	ands	r3, r2
 800541e:	d00c      	beq.n	800543a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2210      	movs	r2, #16
 8005424:	4013      	ands	r3, r2
 8005426:	d008      	beq.n	800543a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	0092      	lsls	r2, r2, #2
 800542e:	4313      	orrs	r3, r2
 8005430:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2210      	movs	r2, #16
 8005438:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	2204      	movs	r2, #4
 800543e:	4013      	ands	r3, r2
 8005440:	d00b      	beq.n	800545a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2208      	movs	r2, #8
 8005446:	4013      	ands	r3, r2
 8005448:	d007      	beq.n	800545a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2208      	movs	r2, #8
 8005450:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f91b 	bl	8005690 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	2202      	movs	r2, #2
 800545e:	4013      	ands	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2203      	movs	r2, #3
 800546a:	4013      	ands	r3, r2
 800546c:	d003      	beq.n	8005476 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f7fe fb25 	bl	8003ac0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	2240      	movs	r2, #64	; 0x40
 800547a:	4013      	ands	r3, r2
 800547c:	d00c      	beq.n	8005498 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2210      	movs	r2, #16
 8005482:	4013      	ands	r3, r2
 8005484:	d008      	beq.n	8005498 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	2280      	movs	r2, #128	; 0x80
 800548a:	00d2      	lsls	r2, r2, #3
 800548c:	4313      	orrs	r3, r2
 800548e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2210      	movs	r2, #16
 8005496:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	2220      	movs	r2, #32
 800549c:	4013      	ands	r3, r2
 800549e:	d00b      	beq.n	80054b8 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2208      	movs	r2, #8
 80054a4:	4013      	ands	r3, r2
 80054a6:	d007      	beq.n	80054b8 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2208      	movs	r2, #8
 80054ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 f8fc 	bl	80056b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	2210      	movs	r2, #16
 80054bc:	4013      	ands	r3, r2
 80054be:	d009      	beq.n	80054d4 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2203      	movs	r2, #3
 80054c8:	4013      	ands	r3, r2
 80054ca:	d003      	beq.n	80054d4 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f8e6 	bl	80056a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80054d4:	6a3a      	ldr	r2, [r7, #32]
 80054d6:	2380      	movs	r3, #128	; 0x80
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	4013      	ands	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2210      	movs	r2, #16
 80054e2:	4013      	ands	r3, r2
 80054e4:	d007      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2210      	movs	r2, #16
 80054ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 f8e5 	bl	80056c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	025b      	lsls	r3, r3, #9
 80054fc:	4013      	ands	r3, r2
 80054fe:	d00b      	beq.n	8005518 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2208      	movs	r2, #8
 8005504:	4013      	ands	r3, r2
 8005506:	d007      	beq.n	8005518 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2208      	movs	r2, #8
 800550e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f000 f8dc 	bl	80056d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	4013      	ands	r3, r2
 8005520:	d100      	bne.n	8005524 <HAL_CAN_IRQHandler+0x25c>
 8005522:	e074      	b.n	800560e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2204      	movs	r2, #4
 8005528:	4013      	ands	r3, r2
 800552a:	d100      	bne.n	800552e <HAL_CAN_IRQHandler+0x266>
 800552c:	e06b      	b.n	8005606 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4013      	ands	r3, r2
 8005536:	d007      	beq.n	8005548 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800553e:	d003      	beq.n	8005548 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	2201      	movs	r2, #1
 8005544:	4313      	orrs	r3, r2
 8005546:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4013      	ands	r3, r2
 8005550:	d007      	beq.n	8005562 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2202      	movs	r2, #2
 8005556:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005558:	d003      	beq.n	8005562 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	2202      	movs	r2, #2
 800555e:	4313      	orrs	r3, r2
 8005560:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005562:	6a3a      	ldr	r2, [r7, #32]
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4013      	ands	r3, r2
 800556a:	d007      	beq.n	800557c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2204      	movs	r2, #4
 8005570:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005572:	d003      	beq.n	800557c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	2204      	movs	r2, #4
 8005578:	4313      	orrs	r3, r2
 800557a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	4013      	ands	r3, r2
 8005584:	d03f      	beq.n	8005606 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2270      	movs	r2, #112	; 0x70
 800558a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800558c:	d03b      	beq.n	8005606 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2270      	movs	r2, #112	; 0x70
 8005592:	4013      	ands	r3, r2
 8005594:	2b60      	cmp	r3, #96	; 0x60
 8005596:	d027      	beq.n	80055e8 <HAL_CAN_IRQHandler+0x320>
 8005598:	d82c      	bhi.n	80055f4 <HAL_CAN_IRQHandler+0x32c>
 800559a:	2b50      	cmp	r3, #80	; 0x50
 800559c:	d01f      	beq.n	80055de <HAL_CAN_IRQHandler+0x316>
 800559e:	d829      	bhi.n	80055f4 <HAL_CAN_IRQHandler+0x32c>
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d017      	beq.n	80055d4 <HAL_CAN_IRQHandler+0x30c>
 80055a4:	d826      	bhi.n	80055f4 <HAL_CAN_IRQHandler+0x32c>
 80055a6:	2b30      	cmp	r3, #48	; 0x30
 80055a8:	d00f      	beq.n	80055ca <HAL_CAN_IRQHandler+0x302>
 80055aa:	d823      	bhi.n	80055f4 <HAL_CAN_IRQHandler+0x32c>
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d002      	beq.n	80055b6 <HAL_CAN_IRQHandler+0x2ee>
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d005      	beq.n	80055c0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055b4:	e01e      	b.n	80055f4 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	2208      	movs	r2, #8
 80055ba:	4313      	orrs	r3, r2
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055be:	e01a      	b.n	80055f6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	2210      	movs	r2, #16
 80055c4:	4313      	orrs	r3, r2
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055c8:	e015      	b.n	80055f6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	2220      	movs	r2, #32
 80055ce:	4313      	orrs	r3, r2
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055d2:	e010      	b.n	80055f6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	4313      	orrs	r3, r2
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055dc:	e00b      	b.n	80055f6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	4313      	orrs	r3, r2
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055e6:	e006      	b.n	80055f6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2280      	movs	r2, #128	; 0x80
 80055ec:	0052      	lsls	r2, r2, #1
 80055ee:	4313      	orrs	r3, r2
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055f2:	e000      	b.n	80055f6 <HAL_CAN_IRQHandler+0x32e>
            break;
 80055f4:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2170      	movs	r1, #112	; 0x70
 8005602:	438a      	bics	r2, r1
 8005604:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2204      	movs	r2, #4
 800560c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0018      	movs	r0, r3
 8005624:	f000 f85c 	bl	80056e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005628:	46c0      	nop			; (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b00a      	add	sp, #40	; 0x28
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005648:	46c0      	nop			; (mov r8, r8)
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b002      	add	sp, #8
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b002      	add	sp, #8
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b002      	add	sp, #8
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	b002      	add	sp, #8
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80056a8:	46c0      	nop			; (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b002      	add	sp, #8
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b002      	add	sp, #8
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80056c8:	46c0      	nop			; (mov r8, r8)
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b002      	add	sp, #8
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b002      	add	sp, #8
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	0002      	movs	r2, r0
 80056f8:	1dfb      	adds	r3, r7, #7
 80056fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80056fc:	1dfb      	adds	r3, r7, #7
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b7f      	cmp	r3, #127	; 0x7f
 8005702:	d809      	bhi.n	8005718 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005704:	1dfb      	adds	r3, r7, #7
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	001a      	movs	r2, r3
 800570a:	231f      	movs	r3, #31
 800570c:	401a      	ands	r2, r3
 800570e:	4b04      	ldr	r3, [pc, #16]	; (8005720 <__NVIC_EnableIRQ+0x30>)
 8005710:	2101      	movs	r1, #1
 8005712:	4091      	lsls	r1, r2
 8005714:	000a      	movs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
  }
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b002      	add	sp, #8
 800571e:	bd80      	pop	{r7, pc}
 8005720:	e000e100 	.word	0xe000e100

08005724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	0002      	movs	r2, r0
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	1dfb      	adds	r3, r7, #7
 8005730:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b7f      	cmp	r3, #127	; 0x7f
 8005738:	d828      	bhi.n	800578c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800573a:	4a2f      	ldr	r2, [pc, #188]	; (80057f8 <__NVIC_SetPriority+0xd4>)
 800573c:	1dfb      	adds	r3, r7, #7
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b25b      	sxtb	r3, r3
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	33c0      	adds	r3, #192	; 0xc0
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	589b      	ldr	r3, [r3, r2]
 800574a:	1dfa      	adds	r2, r7, #7
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	0011      	movs	r1, r2
 8005750:	2203      	movs	r2, #3
 8005752:	400a      	ands	r2, r1
 8005754:	00d2      	lsls	r2, r2, #3
 8005756:	21ff      	movs	r1, #255	; 0xff
 8005758:	4091      	lsls	r1, r2
 800575a:	000a      	movs	r2, r1
 800575c:	43d2      	mvns	r2, r2
 800575e:	401a      	ands	r2, r3
 8005760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	22ff      	movs	r2, #255	; 0xff
 8005768:	401a      	ands	r2, r3
 800576a:	1dfb      	adds	r3, r7, #7
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	0018      	movs	r0, r3
 8005770:	2303      	movs	r3, #3
 8005772:	4003      	ands	r3, r0
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005778:	481f      	ldr	r0, [pc, #124]	; (80057f8 <__NVIC_SetPriority+0xd4>)
 800577a:	1dfb      	adds	r3, r7, #7
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b25b      	sxtb	r3, r3
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	430a      	orrs	r2, r1
 8005784:	33c0      	adds	r3, #192	; 0xc0
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800578a:	e031      	b.n	80057f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <__NVIC_SetPriority+0xd8>)
 800578e:	1dfb      	adds	r3, r7, #7
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	0019      	movs	r1, r3
 8005794:	230f      	movs	r3, #15
 8005796:	400b      	ands	r3, r1
 8005798:	3b08      	subs	r3, #8
 800579a:	089b      	lsrs	r3, r3, #2
 800579c:	3306      	adds	r3, #6
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	18d3      	adds	r3, r2, r3
 80057a2:	3304      	adds	r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1dfa      	adds	r2, r7, #7
 80057a8:	7812      	ldrb	r2, [r2, #0]
 80057aa:	0011      	movs	r1, r2
 80057ac:	2203      	movs	r2, #3
 80057ae:	400a      	ands	r2, r1
 80057b0:	00d2      	lsls	r2, r2, #3
 80057b2:	21ff      	movs	r1, #255	; 0xff
 80057b4:	4091      	lsls	r1, r2
 80057b6:	000a      	movs	r2, r1
 80057b8:	43d2      	mvns	r2, r2
 80057ba:	401a      	ands	r2, r3
 80057bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	019b      	lsls	r3, r3, #6
 80057c2:	22ff      	movs	r2, #255	; 0xff
 80057c4:	401a      	ands	r2, r3
 80057c6:	1dfb      	adds	r3, r7, #7
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	0018      	movs	r0, r3
 80057cc:	2303      	movs	r3, #3
 80057ce:	4003      	ands	r3, r0
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057d4:	4809      	ldr	r0, [pc, #36]	; (80057fc <__NVIC_SetPriority+0xd8>)
 80057d6:	1dfb      	adds	r3, r7, #7
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	001c      	movs	r4, r3
 80057dc:	230f      	movs	r3, #15
 80057de:	4023      	ands	r3, r4
 80057e0:	3b08      	subs	r3, #8
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	430a      	orrs	r2, r1
 80057e6:	3306      	adds	r3, #6
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	18c3      	adds	r3, r0, r3
 80057ec:	3304      	adds	r3, #4
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b003      	add	sp, #12
 80057f6:	bd90      	pop	{r4, r7, pc}
 80057f8:	e000e100 	.word	0xe000e100
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	210f      	movs	r1, #15
 800580c:	187b      	adds	r3, r7, r1
 800580e:	1c02      	adds	r2, r0, #0
 8005810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	187b      	adds	r3, r7, r1
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b25b      	sxtb	r3, r3
 800581a:	0011      	movs	r1, r2
 800581c:	0018      	movs	r0, r3
 800581e:	f7ff ff81 	bl	8005724 <__NVIC_SetPriority>
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b004      	add	sp, #16
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	0002      	movs	r2, r0
 8005832:	1dfb      	adds	r3, r7, #7
 8005834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005836:	1dfb      	adds	r3, r7, #7
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	b25b      	sxtb	r3, r3
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff ff57 	bl	80056f0 <__NVIC_EnableIRQ>
}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800585a:	e155      	b.n	8005b08 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2101      	movs	r1, #1
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4091      	lsls	r1, r2
 8005866:	000a      	movs	r2, r1
 8005868:	4013      	ands	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <HAL_GPIO_Init+0x28>
 8005872:	e146      	b.n	8005b02 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2203      	movs	r2, #3
 800587a:	4013      	ands	r3, r2
 800587c:	2b01      	cmp	r3, #1
 800587e:	d005      	beq.n	800588c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2203      	movs	r2, #3
 8005886:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005888:	2b02      	cmp	r3, #2
 800588a:	d130      	bne.n	80058ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	2203      	movs	r2, #3
 8005898:	409a      	lsls	r2, r3
 800589a:	0013      	movs	r3, r2
 800589c:	43da      	mvns	r2, r3
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	4013      	ands	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	409a      	lsls	r2, r3
 80058ae:	0013      	movs	r3, r2
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058c2:	2201      	movs	r2, #1
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	409a      	lsls	r2, r3
 80058c8:	0013      	movs	r3, r2
 80058ca:	43da      	mvns	r2, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4013      	ands	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	091b      	lsrs	r3, r3, #4
 80058d8:	2201      	movs	r2, #1
 80058da:	401a      	ands	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	409a      	lsls	r2, r3
 80058e0:	0013      	movs	r3, r2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2203      	movs	r2, #3
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d017      	beq.n	800592a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	2203      	movs	r2, #3
 8005906:	409a      	lsls	r2, r3
 8005908:	0013      	movs	r3, r2
 800590a:	43da      	mvns	r2, r3
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4013      	ands	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	409a      	lsls	r2, r3
 800591c:	0013      	movs	r3, r2
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2203      	movs	r2, #3
 8005930:	4013      	ands	r3, r2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d123      	bne.n	800597e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	08da      	lsrs	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3208      	adds	r2, #8
 800593e:	0092      	lsls	r2, r2, #2
 8005940:	58d3      	ldr	r3, [r2, r3]
 8005942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2207      	movs	r2, #7
 8005948:	4013      	ands	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	220f      	movs	r2, #15
 800594e:	409a      	lsls	r2, r3
 8005950:	0013      	movs	r3, r2
 8005952:	43da      	mvns	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4013      	ands	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2107      	movs	r1, #7
 8005962:	400b      	ands	r3, r1
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	409a      	lsls	r2, r3
 8005968:	0013      	movs	r3, r2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	08da      	lsrs	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3208      	adds	r2, #8
 8005978:	0092      	lsls	r2, r2, #2
 800597a:	6939      	ldr	r1, [r7, #16]
 800597c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	2203      	movs	r2, #3
 800598a:	409a      	lsls	r2, r3
 800598c:	0013      	movs	r3, r2
 800598e:	43da      	mvns	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2203      	movs	r2, #3
 800599c:	401a      	ands	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	409a      	lsls	r2, r3
 80059a4:	0013      	movs	r3, r2
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	23c0      	movs	r3, #192	; 0xc0
 80059b8:	029b      	lsls	r3, r3, #10
 80059ba:	4013      	ands	r3, r2
 80059bc:	d100      	bne.n	80059c0 <HAL_GPIO_Init+0x174>
 80059be:	e0a0      	b.n	8005b02 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059c0:	4b57      	ldr	r3, [pc, #348]	; (8005b20 <HAL_GPIO_Init+0x2d4>)
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <HAL_GPIO_Init+0x2d4>)
 80059c6:	2101      	movs	r1, #1
 80059c8:	430a      	orrs	r2, r1
 80059ca:	619a      	str	r2, [r3, #24]
 80059cc:	4b54      	ldr	r3, [pc, #336]	; (8005b20 <HAL_GPIO_Init+0x2d4>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2201      	movs	r2, #1
 80059d2:	4013      	ands	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80059d8:	4a52      	ldr	r2, [pc, #328]	; (8005b24 <HAL_GPIO_Init+0x2d8>)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	3302      	adds	r3, #2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	589b      	ldr	r3, [r3, r2]
 80059e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2203      	movs	r2, #3
 80059ea:	4013      	ands	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	220f      	movs	r2, #15
 80059f0:	409a      	lsls	r2, r3
 80059f2:	0013      	movs	r3, r2
 80059f4:	43da      	mvns	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4013      	ands	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	2390      	movs	r3, #144	; 0x90
 8005a00:	05db      	lsls	r3, r3, #23
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d019      	beq.n	8005a3a <HAL_GPIO_Init+0x1ee>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a47      	ldr	r2, [pc, #284]	; (8005b28 <HAL_GPIO_Init+0x2dc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d013      	beq.n	8005a36 <HAL_GPIO_Init+0x1ea>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a46      	ldr	r2, [pc, #280]	; (8005b2c <HAL_GPIO_Init+0x2e0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00d      	beq.n	8005a32 <HAL_GPIO_Init+0x1e6>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a45      	ldr	r2, [pc, #276]	; (8005b30 <HAL_GPIO_Init+0x2e4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <HAL_GPIO_Init+0x1e2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a44      	ldr	r2, [pc, #272]	; (8005b34 <HAL_GPIO_Init+0x2e8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_GPIO_Init+0x1de>
 8005a26:	2304      	movs	r3, #4
 8005a28:	e008      	b.n	8005a3c <HAL_GPIO_Init+0x1f0>
 8005a2a:	2305      	movs	r3, #5
 8005a2c:	e006      	b.n	8005a3c <HAL_GPIO_Init+0x1f0>
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e004      	b.n	8005a3c <HAL_GPIO_Init+0x1f0>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e002      	b.n	8005a3c <HAL_GPIO_Init+0x1f0>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_GPIO_Init+0x1f0>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	2103      	movs	r1, #3
 8005a40:	400a      	ands	r2, r1
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	4093      	lsls	r3, r2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a4c:	4935      	ldr	r1, [pc, #212]	; (8005b24 <HAL_GPIO_Init+0x2d8>)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	3302      	adds	r3, #2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	43da      	mvns	r2, r3
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4013      	ands	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	2380      	movs	r3, #128	; 0x80
 8005a70:	025b      	lsls	r3, r3, #9
 8005a72:	4013      	ands	r3, r2
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a7e:	4b2e      	ldr	r3, [pc, #184]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	43da      	mvns	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4013      	ands	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	029b      	lsls	r3, r3, #10
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005aa8:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	035b      	lsls	r3, r3, #13
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005ad2:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005ad8:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	43da      	mvns	r2, r3
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	039b      	lsls	r3, r3, #14
 8005af0:	4013      	ands	r3, r2
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005afc:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <HAL_GPIO_Init+0x2ec>)
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	3301      	adds	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	40da      	lsrs	r2, r3
 8005b10:	1e13      	subs	r3, r2, #0
 8005b12:	d000      	beq.n	8005b16 <HAL_GPIO_Init+0x2ca>
 8005b14:	e6a2      	b.n	800585c <HAL_GPIO_Init+0x10>
  } 
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b006      	add	sp, #24
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	40010000 	.word	0x40010000
 8005b28:	48000400 	.word	0x48000400
 8005b2c:	48000800 	.word	0x48000800
 8005b30:	48000c00 	.word	0x48000c00
 8005b34:	48001000 	.word	0x48001000
 8005b38:	40010400 	.word	0x40010400

08005b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	000a      	movs	r2, r1
 8005b46:	1cbb      	adds	r3, r7, #2
 8005b48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	1cba      	adds	r2, r7, #2
 8005b50:	8812      	ldrh	r2, [r2, #0]
 8005b52:	4013      	ands	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005b56:	230f      	movs	r3, #15
 8005b58:	18fb      	adds	r3, r7, r3
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	e003      	b.n	8005b68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b60:	230f      	movs	r3, #15
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	2200      	movs	r2, #0
 8005b66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005b68:	230f      	movs	r3, #15
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	781b      	ldrb	r3, [r3, #0]
  }
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b004      	add	sp, #16
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	0008      	movs	r0, r1
 8005b80:	0011      	movs	r1, r2
 8005b82:	1cbb      	adds	r3, r7, #2
 8005b84:	1c02      	adds	r2, r0, #0
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	1c7b      	adds	r3, r7, #1
 8005b8a:	1c0a      	adds	r2, r1, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b8e:	1c7b      	adds	r3, r7, #1
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b96:	1cbb      	adds	r3, r7, #2
 8005b98:	881a      	ldrh	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b9e:	e003      	b.n	8005ba8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ba0:	1cbb      	adds	r3, r7, #2
 8005ba2:	881a      	ldrh	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	000a      	movs	r2, r1
 8005bba:	1cbb      	adds	r3, r7, #2
 8005bbc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bc4:	1cbb      	adds	r3, r7, #2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	041a      	lsls	r2, r3, #16
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	1cb9      	adds	r1, r7, #2
 8005bd4:	8809      	ldrh	r1, [r1, #0]
 8005bd6:	400b      	ands	r3, r1
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]
}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b004      	add	sp, #16
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	0002      	movs	r2, r0
 8005bf0:	1dbb      	adds	r3, r7, #6
 8005bf2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	1dba      	adds	r2, r7, #6
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d008      	beq.n	8005c12 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c00:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005c02:	1dba      	adds	r2, r7, #6
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c08:	1dbb      	adds	r3, r7, #6
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fd f935 	bl	8002e7c <HAL_GPIO_EXTI_Callback>
  }
}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b002      	add	sp, #8
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	40010400 	.word	0x40010400

08005c20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c22:	b08b      	sub	sp, #44	; 0x2c
 8005c24:	af06      	add	r7, sp, #24
 8005c26:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0ff      	b.n	8005e32 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a81      	ldr	r2, [pc, #516]	; (8005e3c <HAL_PCD_Init+0x21c>)
 8005c36:	5c9b      	ldrb	r3, [r3, r2]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d108      	bne.n	8005c50 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	23aa      	movs	r3, #170	; 0xaa
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	2100      	movs	r1, #0
 8005c46:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7fd fa78 	bl	8003140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a7a      	ldr	r2, [pc, #488]	; (8005e3c <HAL_PCD_Init+0x21c>)
 8005c54:	2103      	movs	r1, #3
 8005c56:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f001 fdfd 	bl	800785c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c62:	230f      	movs	r3, #15
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e058      	b.n	8005d1e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c6c:	200f      	movs	r0, #15
 8005c6e:	183b      	adds	r3, r7, r0
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	0013      	movs	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	18cb      	adds	r3, r1, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c86:	183b      	adds	r3, r7, r0
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	0013      	movs	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	189b      	adds	r3, r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	183a      	adds	r2, r7, r0
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c9c:	0004      	movs	r4, r0
 8005c9e:	183b      	adds	r3, r7, r0
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	193b      	adds	r3, r7, r4
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	b298      	uxth	r0, r3
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	0013      	movs	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	189b      	adds	r3, r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	18cb      	adds	r3, r1, r3
 8005cb4:	3336      	adds	r3, #54	; 0x36
 8005cb6:	1c02      	adds	r2, r0, #0
 8005cb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005cba:	193b      	adds	r3, r7, r4
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	0013      	movs	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	189b      	adds	r3, r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	18cb      	adds	r3, r1, r3
 8005ccc:	3303      	adds	r3, #3
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cd2:	193b      	adds	r3, r7, r4
 8005cd4:	781a      	ldrb	r2, [r3, #0]
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	0013      	movs	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	18cb      	adds	r3, r1, r3
 8005ce2:	3338      	adds	r3, #56	; 0x38
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ce8:	193b      	adds	r3, r7, r4
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	0013      	movs	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	189b      	adds	r3, r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	18cb      	adds	r3, r1, r3
 8005cf8:	333c      	adds	r3, #60	; 0x3c
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cfe:	193b      	adds	r3, r7, r4
 8005d00:	781a      	ldrb	r2, [r3, #0]
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	0013      	movs	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	189b      	adds	r3, r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	18cb      	adds	r3, r1, r3
 8005d0e:	3340      	adds	r3, #64	; 0x40
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d14:	193b      	adds	r3, r7, r4
 8005d16:	781a      	ldrb	r2, [r3, #0]
 8005d18:	193b      	adds	r3, r7, r4
 8005d1a:	3201      	adds	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	210f      	movs	r1, #15
 8005d20:	187b      	adds	r3, r7, r1
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d39f      	bcc.n	8005c6c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e056      	b.n	8005de2 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d34:	240f      	movs	r4, #15
 8005d36:	193b      	adds	r3, r7, r4
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	236a      	movs	r3, #106	; 0x6a
 8005d3e:	33ff      	adds	r3, #255	; 0xff
 8005d40:	0019      	movs	r1, r3
 8005d42:	0013      	movs	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	18c3      	adds	r3, r0, r3
 8005d4c:	185b      	adds	r3, r3, r1
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d52:	193b      	adds	r3, r7, r4
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	23b4      	movs	r3, #180	; 0xb4
 8005d5a:	0059      	lsls	r1, r3, #1
 8005d5c:	0013      	movs	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	189b      	adds	r3, r3, r2
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	18c3      	adds	r3, r0, r3
 8005d66:	185b      	adds	r3, r3, r1
 8005d68:	193a      	adds	r2, r7, r4
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d6e:	193b      	adds	r3, r7, r4
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	236c      	movs	r3, #108	; 0x6c
 8005d76:	33ff      	adds	r3, #255	; 0xff
 8005d78:	0019      	movs	r1, r3
 8005d7a:	0013      	movs	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	189b      	adds	r3, r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	18c3      	adds	r3, r0, r3
 8005d84:	185b      	adds	r3, r3, r1
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d8a:	193b      	adds	r3, r7, r4
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	23bc      	movs	r3, #188	; 0xbc
 8005d92:	0059      	lsls	r1, r3, #1
 8005d94:	0013      	movs	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	189b      	adds	r3, r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	18c3      	adds	r3, r0, r3
 8005d9e:	185b      	adds	r3, r3, r1
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	23be      	movs	r3, #190	; 0xbe
 8005dac:	0059      	lsls	r1, r3, #1
 8005dae:	0013      	movs	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	18c3      	adds	r3, r0, r3
 8005db8:	185b      	adds	r3, r3, r1
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005dbe:	193b      	adds	r3, r7, r4
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	23c0      	movs	r3, #192	; 0xc0
 8005dc6:	0059      	lsls	r1, r3, #1
 8005dc8:	0013      	movs	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	189b      	adds	r3, r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	18c3      	adds	r3, r0, r3
 8005dd2:	185b      	adds	r3, r3, r1
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dd8:	193b      	adds	r3, r7, r4
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	193b      	adds	r3, r7, r4
 8005dde:	3201      	adds	r2, #1
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	230f      	movs	r3, #15
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	781a      	ldrb	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d3a1      	bcc.n	8005d34 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	466a      	mov	r2, sp
 8005df8:	0011      	movs	r1, r2
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	3210      	adds	r2, #16
 8005dfe:	ca70      	ldmia	r2!, {r4, r5, r6}
 8005e00:	c170      	stmia	r1!, {r4, r5, r6}
 8005e02:	ca30      	ldmia	r2!, {r4, r5}
 8005e04:	c130      	stmia	r1!, {r4, r5}
 8005e06:	6859      	ldr	r1, [r3, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f001 fd40 	bl	8007890 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2224      	movs	r2, #36	; 0x24
 8005e14:	2100      	movs	r1, #0
 8005e16:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <HAL_PCD_Init+0x21c>)
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d103      	bne.n	8005e30 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f000 f808 	bl	8005e40 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b005      	add	sp, #20
 8005e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	000002a9 	.word	0x000002a9

08005e40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	23ba      	movs	r3, #186	; 0xba
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	2101      	movs	r1, #1
 8005e56:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	23b8      	movs	r3, #184	; 0xb8
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	2100      	movs	r1, #0
 8005e60:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2254      	movs	r2, #84	; 0x54
 8005e66:	5a9b      	ldrh	r3, [r3, r2]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b299      	uxth	r1, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2254      	movs	r2, #84	; 0x54
 8005e74:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2254      	movs	r2, #84	; 0x54
 8005e7a:	5a9b      	ldrh	r3, [r3, r2]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2202      	movs	r2, #2
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b299      	uxth	r1, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2254      	movs	r2, #84	; 0x54
 8005e88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b004      	add	sp, #16
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f000 fb76 	bl	8006594 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d100      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x20>
 8005eb2:	e08e      	b.n	8005fd2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005eb4:	4bc5      	ldr	r3, [pc, #788]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	220c      	movs	r2, #12
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d00e      	beq.n	8005ede <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ec0:	4bc2      	ldr	r3, [pc, #776]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	220c      	movs	r2, #12
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d117      	bne.n	8005efc <HAL_RCC_OscConfig+0x68>
 8005ecc:	4bbf      	ldr	r3, [pc, #764]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	23c0      	movs	r3, #192	; 0xc0
 8005ed2:	025b      	lsls	r3, r3, #9
 8005ed4:	401a      	ands	r2, r3
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	025b      	lsls	r3, r3, #9
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d10e      	bne.n	8005efc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ede:	4bbb      	ldr	r3, [pc, #748]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	2380      	movs	r3, #128	; 0x80
 8005ee4:	029b      	lsls	r3, r3, #10
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d100      	bne.n	8005eec <HAL_RCC_OscConfig+0x58>
 8005eea:	e071      	b.n	8005fd0 <HAL_RCC_OscConfig+0x13c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d000      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x62>
 8005ef4:	e06c      	b.n	8005fd0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f000 fb4c 	bl	8006594 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d107      	bne.n	8005f14 <HAL_RCC_OscConfig+0x80>
 8005f04:	4bb1      	ldr	r3, [pc, #708]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4bb0      	ldr	r3, [pc, #704]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	0249      	lsls	r1, r1, #9
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e02f      	b.n	8005f74 <HAL_RCC_OscConfig+0xe0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10c      	bne.n	8005f36 <HAL_RCC_OscConfig+0xa2>
 8005f1c:	4bab      	ldr	r3, [pc, #684]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4baa      	ldr	r3, [pc, #680]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f22:	49ab      	ldr	r1, [pc, #684]	; (80061d0 <HAL_RCC_OscConfig+0x33c>)
 8005f24:	400a      	ands	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	4ba8      	ldr	r3, [pc, #672]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4ba7      	ldr	r3, [pc, #668]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f2e:	49a9      	ldr	r1, [pc, #676]	; (80061d4 <HAL_RCC_OscConfig+0x340>)
 8005f30:	400a      	ands	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e01e      	b.n	8005f74 <HAL_RCC_OscConfig+0xe0>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d10e      	bne.n	8005f5c <HAL_RCC_OscConfig+0xc8>
 8005f3e:	4ba3      	ldr	r3, [pc, #652]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4ba2      	ldr	r3, [pc, #648]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	02c9      	lsls	r1, r1, #11
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	4b9f      	ldr	r3, [pc, #636]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4b9e      	ldr	r3, [pc, #632]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	0249      	lsls	r1, r1, #9
 8005f56:	430a      	orrs	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e00b      	b.n	8005f74 <HAL_RCC_OscConfig+0xe0>
 8005f5c:	4b9b      	ldr	r3, [pc, #620]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b9a      	ldr	r3, [pc, #616]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f62:	499b      	ldr	r1, [pc, #620]	; (80061d0 <HAL_RCC_OscConfig+0x33c>)
 8005f64:	400a      	ands	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	4b98      	ldr	r3, [pc, #608]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	4b97      	ldr	r3, [pc, #604]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f6e:	4999      	ldr	r1, [pc, #612]	; (80061d4 <HAL_RCC_OscConfig+0x340>)
 8005f70:	400a      	ands	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d014      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fe fcb2 	bl	80048e4 <HAL_GetTick>
 8005f80:	0003      	movs	r3, r0
 8005f82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f86:	f7fe fcad 	bl	80048e4 <HAL_GetTick>
 8005f8a:	0002      	movs	r2, r0
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b64      	cmp	r3, #100	; 0x64
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e2fd      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f98:	4b8c      	ldr	r3, [pc, #560]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	029b      	lsls	r3, r3, #10
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d0f0      	beq.n	8005f86 <HAL_RCC_OscConfig+0xf2>
 8005fa4:	e015      	b.n	8005fd2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa6:	f7fe fc9d 	bl	80048e4 <HAL_GetTick>
 8005faa:	0003      	movs	r3, r0
 8005fac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7fe fc98 	bl	80048e4 <HAL_GetTick>
 8005fb4:	0002      	movs	r2, r0
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	; 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e2e8      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc2:	4b82      	ldr	r3, [pc, #520]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	2380      	movs	r3, #128	; 0x80
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	4013      	ands	r3, r2
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x11c>
 8005fce:	e000      	b.n	8005fd2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d100      	bne.n	8005fde <HAL_RCC_OscConfig+0x14a>
 8005fdc:	e06c      	b.n	80060b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005fde:	4b7b      	ldr	r3, [pc, #492]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	220c      	movs	r2, #12
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fe8:	4b78      	ldr	r3, [pc, #480]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	220c      	movs	r2, #12
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d11f      	bne.n	8006034 <HAL_RCC_OscConfig+0x1a0>
 8005ff4:	4b75      	ldr	r3, [pc, #468]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	23c0      	movs	r3, #192	; 0xc0
 8005ffa:	025b      	lsls	r3, r3, #9
 8005ffc:	401a      	ands	r2, r3
 8005ffe:	2380      	movs	r3, #128	; 0x80
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	429a      	cmp	r2, r3
 8006004:	d116      	bne.n	8006034 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006006:	4b71      	ldr	r3, [pc, #452]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2202      	movs	r2, #2
 800600c:	4013      	ands	r3, r2
 800600e:	d005      	beq.n	800601c <HAL_RCC_OscConfig+0x188>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d001      	beq.n	800601c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e2bb      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601c:	4b6b      	ldr	r3, [pc, #428]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	22f8      	movs	r2, #248	; 0xf8
 8006022:	4393      	bics	r3, r2
 8006024:	0019      	movs	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	00da      	lsls	r2, r3, #3
 800602c:	4b67      	ldr	r3, [pc, #412]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 800602e:	430a      	orrs	r2, r1
 8006030:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006032:	e041      	b.n	80060b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d024      	beq.n	8006086 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800603c:	4b63      	ldr	r3, [pc, #396]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4b62      	ldr	r3, [pc, #392]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006042:	2101      	movs	r1, #1
 8006044:	430a      	orrs	r2, r1
 8006046:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fe fc4c 	bl	80048e4 <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006052:	f7fe fc47 	bl	80048e4 <HAL_GetTick>
 8006056:	0002      	movs	r2, r0
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e297      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006064:	4b59      	ldr	r3, [pc, #356]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2202      	movs	r2, #2
 800606a:	4013      	ands	r3, r2
 800606c:	d0f1      	beq.n	8006052 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606e:	4b57      	ldr	r3, [pc, #348]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	22f8      	movs	r2, #248	; 0xf8
 8006074:	4393      	bics	r3, r2
 8006076:	0019      	movs	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	00da      	lsls	r2, r3, #3
 800607e:	4b53      	ldr	r3, [pc, #332]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e018      	b.n	80060b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006086:	4b51      	ldr	r3, [pc, #324]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b50      	ldr	r3, [pc, #320]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 800608c:	2101      	movs	r1, #1
 800608e:	438a      	bics	r2, r1
 8006090:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006092:	f7fe fc27 	bl	80048e4 <HAL_GetTick>
 8006096:	0003      	movs	r3, r0
 8006098:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800609c:	f7fe fc22 	bl	80048e4 <HAL_GetTick>
 80060a0:	0002      	movs	r2, r0
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e272      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ae:	4b47      	ldr	r3, [pc, #284]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2202      	movs	r2, #2
 80060b4:	4013      	ands	r3, r2
 80060b6:	d1f1      	bne.n	800609c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2208      	movs	r2, #8
 80060be:	4013      	ands	r3, r2
 80060c0:	d036      	beq.n	8006130 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d019      	beq.n	80060fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ca:	4b40      	ldr	r3, [pc, #256]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 80060cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ce:	4b3f      	ldr	r3, [pc, #252]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 80060d0:	2101      	movs	r1, #1
 80060d2:	430a      	orrs	r2, r1
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d6:	f7fe fc05 	bl	80048e4 <HAL_GetTick>
 80060da:	0003      	movs	r3, r0
 80060dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060e0:	f7fe fc00 	bl	80048e4 <HAL_GetTick>
 80060e4:	0002      	movs	r2, r0
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e250      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2202      	movs	r2, #2
 80060f8:	4013      	ands	r3, r2
 80060fa:	d0f1      	beq.n	80060e0 <HAL_RCC_OscConfig+0x24c>
 80060fc:	e018      	b.n	8006130 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060fe:	4b33      	ldr	r3, [pc, #204]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006102:	4b32      	ldr	r3, [pc, #200]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006104:	2101      	movs	r1, #1
 8006106:	438a      	bics	r2, r1
 8006108:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610a:	f7fe fbeb 	bl	80048e4 <HAL_GetTick>
 800610e:	0003      	movs	r3, r0
 8006110:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006114:	f7fe fbe6 	bl	80048e4 <HAL_GetTick>
 8006118:	0002      	movs	r2, r0
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e236      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2202      	movs	r2, #2
 800612c:	4013      	ands	r3, r2
 800612e:	d1f1      	bne.n	8006114 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2204      	movs	r2, #4
 8006136:	4013      	ands	r3, r2
 8006138:	d100      	bne.n	800613c <HAL_RCC_OscConfig+0x2a8>
 800613a:	e0b5      	b.n	80062a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800613c:	201f      	movs	r0, #31
 800613e:	183b      	adds	r3, r7, r0
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006144:	4b21      	ldr	r3, [pc, #132]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	055b      	lsls	r3, r3, #21
 800614c:	4013      	ands	r3, r2
 800614e:	d110      	bne.n	8006172 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	0549      	lsls	r1, r1, #21
 800615a:	430a      	orrs	r2, r1
 800615c:	61da      	str	r2, [r3, #28]
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	055b      	lsls	r3, r3, #21
 8006166:	4013      	ands	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800616c:	183b      	adds	r3, r7, r0
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006172:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <HAL_RCC_OscConfig+0x344>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	4013      	ands	r3, r2
 800617c:	d11a      	bne.n	80061b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800617e:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <HAL_RCC_OscConfig+0x344>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_RCC_OscConfig+0x344>)
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	0049      	lsls	r1, r1, #1
 8006188:	430a      	orrs	r2, r1
 800618a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618c:	f7fe fbaa 	bl	80048e4 <HAL_GetTick>
 8006190:	0003      	movs	r3, r0
 8006192:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006196:	f7fe fba5 	bl	80048e4 <HAL_GetTick>
 800619a:	0002      	movs	r2, r0
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b64      	cmp	r3, #100	; 0x64
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e1f5      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_RCC_OscConfig+0x344>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d10f      	bne.n	80061dc <HAL_RCC_OscConfig+0x348>
 80061bc:	4b03      	ldr	r3, [pc, #12]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	4b02      	ldr	r3, [pc, #8]	; (80061cc <HAL_RCC_OscConfig+0x338>)
 80061c2:	2101      	movs	r1, #1
 80061c4:	430a      	orrs	r2, r1
 80061c6:	621a      	str	r2, [r3, #32]
 80061c8:	e036      	b.n	8006238 <HAL_RCC_OscConfig+0x3a4>
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	40021000 	.word	0x40021000
 80061d0:	fffeffff 	.word	0xfffeffff
 80061d4:	fffbffff 	.word	0xfffbffff
 80061d8:	40007000 	.word	0x40007000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10c      	bne.n	80061fe <HAL_RCC_OscConfig+0x36a>
 80061e4:	4bca      	ldr	r3, [pc, #808]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	4bc9      	ldr	r3, [pc, #804]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80061ea:	2101      	movs	r1, #1
 80061ec:	438a      	bics	r2, r1
 80061ee:	621a      	str	r2, [r3, #32]
 80061f0:	4bc7      	ldr	r3, [pc, #796]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	4bc6      	ldr	r3, [pc, #792]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80061f6:	2104      	movs	r1, #4
 80061f8:	438a      	bics	r2, r1
 80061fa:	621a      	str	r2, [r3, #32]
 80061fc:	e01c      	b.n	8006238 <HAL_RCC_OscConfig+0x3a4>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b05      	cmp	r3, #5
 8006204:	d10c      	bne.n	8006220 <HAL_RCC_OscConfig+0x38c>
 8006206:	4bc2      	ldr	r3, [pc, #776]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	4bc1      	ldr	r3, [pc, #772]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800620c:	2104      	movs	r1, #4
 800620e:	430a      	orrs	r2, r1
 8006210:	621a      	str	r2, [r3, #32]
 8006212:	4bbf      	ldr	r3, [pc, #764]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	4bbe      	ldr	r3, [pc, #760]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006218:	2101      	movs	r1, #1
 800621a:	430a      	orrs	r2, r1
 800621c:	621a      	str	r2, [r3, #32]
 800621e:	e00b      	b.n	8006238 <HAL_RCC_OscConfig+0x3a4>
 8006220:	4bbb      	ldr	r3, [pc, #748]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	4bba      	ldr	r3, [pc, #744]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006226:	2101      	movs	r1, #1
 8006228:	438a      	bics	r2, r1
 800622a:	621a      	str	r2, [r3, #32]
 800622c:	4bb8      	ldr	r3, [pc, #736]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800622e:	6a1a      	ldr	r2, [r3, #32]
 8006230:	4bb7      	ldr	r3, [pc, #732]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006232:	2104      	movs	r1, #4
 8006234:	438a      	bics	r2, r1
 8006236:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d014      	beq.n	800626a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006240:	f7fe fb50 	bl	80048e4 <HAL_GetTick>
 8006244:	0003      	movs	r3, r0
 8006246:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006248:	e009      	b.n	800625e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800624a:	f7fe fb4b 	bl	80048e4 <HAL_GetTick>
 800624e:	0002      	movs	r2, r0
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	4aaf      	ldr	r2, [pc, #700]	; (8006514 <HAL_RCC_OscConfig+0x680>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e19a      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800625e:	4bac      	ldr	r3, [pc, #688]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	2202      	movs	r2, #2
 8006264:	4013      	ands	r3, r2
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x3b6>
 8006268:	e013      	b.n	8006292 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800626a:	f7fe fb3b 	bl	80048e4 <HAL_GetTick>
 800626e:	0003      	movs	r3, r0
 8006270:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006272:	e009      	b.n	8006288 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006274:	f7fe fb36 	bl	80048e4 <HAL_GetTick>
 8006278:	0002      	movs	r2, r0
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	4aa5      	ldr	r2, [pc, #660]	; (8006514 <HAL_RCC_OscConfig+0x680>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e185      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006288:	4ba1      	ldr	r3, [pc, #644]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	2202      	movs	r2, #2
 800628e:	4013      	ands	r3, r2
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006292:	231f      	movs	r3, #31
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d105      	bne.n	80062a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800629c:	4b9c      	ldr	r3, [pc, #624]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	4b9b      	ldr	r3, [pc, #620]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80062a2:	499d      	ldr	r1, [pc, #628]	; (8006518 <HAL_RCC_OscConfig+0x684>)
 80062a4:	400a      	ands	r2, r1
 80062a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2210      	movs	r2, #16
 80062ae:	4013      	ands	r3, r2
 80062b0:	d063      	beq.n	800637a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d12a      	bne.n	8006310 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80062ba:	4b95      	ldr	r3, [pc, #596]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80062bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062be:	4b94      	ldr	r3, [pc, #592]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80062c0:	2104      	movs	r1, #4
 80062c2:	430a      	orrs	r2, r1
 80062c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80062c6:	4b92      	ldr	r3, [pc, #584]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80062c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ca:	4b91      	ldr	r3, [pc, #580]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80062cc:	2101      	movs	r1, #1
 80062ce:	430a      	orrs	r2, r1
 80062d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d2:	f7fe fb07 	bl	80048e4 <HAL_GetTick>
 80062d6:	0003      	movs	r3, r0
 80062d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80062dc:	f7fe fb02 	bl	80048e4 <HAL_GetTick>
 80062e0:	0002      	movs	r2, r0
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e152      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80062ee:	4b88      	ldr	r3, [pc, #544]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	2202      	movs	r2, #2
 80062f4:	4013      	ands	r3, r2
 80062f6:	d0f1      	beq.n	80062dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80062f8:	4b85      	ldr	r3, [pc, #532]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	22f8      	movs	r2, #248	; 0xf8
 80062fe:	4393      	bics	r3, r2
 8006300:	0019      	movs	r1, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	00da      	lsls	r2, r3, #3
 8006308:	4b81      	ldr	r3, [pc, #516]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800630a:	430a      	orrs	r2, r1
 800630c:	635a      	str	r2, [r3, #52]	; 0x34
 800630e:	e034      	b.n	800637a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	3305      	adds	r3, #5
 8006316:	d111      	bne.n	800633c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006318:	4b7d      	ldr	r3, [pc, #500]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800631a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800631c:	4b7c      	ldr	r3, [pc, #496]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800631e:	2104      	movs	r1, #4
 8006320:	438a      	bics	r2, r1
 8006322:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006324:	4b7a      	ldr	r3, [pc, #488]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006328:	22f8      	movs	r2, #248	; 0xf8
 800632a:	4393      	bics	r3, r2
 800632c:	0019      	movs	r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	00da      	lsls	r2, r3, #3
 8006334:	4b76      	ldr	r3, [pc, #472]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006336:	430a      	orrs	r2, r1
 8006338:	635a      	str	r2, [r3, #52]	; 0x34
 800633a:	e01e      	b.n	800637a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800633c:	4b74      	ldr	r3, [pc, #464]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800633e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006340:	4b73      	ldr	r3, [pc, #460]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006342:	2104      	movs	r1, #4
 8006344:	430a      	orrs	r2, r1
 8006346:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006348:	4b71      	ldr	r3, [pc, #452]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800634a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634c:	4b70      	ldr	r3, [pc, #448]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800634e:	2101      	movs	r1, #1
 8006350:	438a      	bics	r2, r1
 8006352:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006354:	f7fe fac6 	bl	80048e4 <HAL_GetTick>
 8006358:	0003      	movs	r3, r0
 800635a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800635e:	f7fe fac1 	bl	80048e4 <HAL_GetTick>
 8006362:	0002      	movs	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e111      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006370:	4b67      	ldr	r3, [pc, #412]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	2202      	movs	r2, #2
 8006376:	4013      	ands	r3, r2
 8006378:	d1f1      	bne.n	800635e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2220      	movs	r2, #32
 8006380:	4013      	ands	r3, r2
 8006382:	d05c      	beq.n	800643e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006384:	4b62      	ldr	r3, [pc, #392]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	220c      	movs	r2, #12
 800638a:	4013      	ands	r3, r2
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d00e      	beq.n	80063ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006390:	4b5f      	ldr	r3, [pc, #380]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	220c      	movs	r2, #12
 8006396:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006398:	2b08      	cmp	r3, #8
 800639a:	d114      	bne.n	80063c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800639c:	4b5c      	ldr	r3, [pc, #368]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	23c0      	movs	r3, #192	; 0xc0
 80063a2:	025b      	lsls	r3, r3, #9
 80063a4:	401a      	ands	r2, r3
 80063a6:	23c0      	movs	r3, #192	; 0xc0
 80063a8:	025b      	lsls	r3, r3, #9
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d10b      	bne.n	80063c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80063ae:	4b58      	ldr	r3, [pc, #352]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80063b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b2:	2380      	movs	r3, #128	; 0x80
 80063b4:	025b      	lsls	r3, r3, #9
 80063b6:	4013      	ands	r3, r2
 80063b8:	d040      	beq.n	800643c <HAL_RCC_OscConfig+0x5a8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d03c      	beq.n	800643c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0e6      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01b      	beq.n	8006406 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80063ce:	4b50      	ldr	r3, [pc, #320]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80063d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d2:	4b4f      	ldr	r3, [pc, #316]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80063d4:	2180      	movs	r1, #128	; 0x80
 80063d6:	0249      	lsls	r1, r1, #9
 80063d8:	430a      	orrs	r2, r1
 80063da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063dc:	f7fe fa82 	bl	80048e4 <HAL_GetTick>
 80063e0:	0003      	movs	r3, r0
 80063e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e6:	f7fe fa7d 	bl	80048e4 <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0cd      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80063f8:	4b45      	ldr	r3, [pc, #276]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80063fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fc:	2380      	movs	r3, #128	; 0x80
 80063fe:	025b      	lsls	r3, r3, #9
 8006400:	4013      	ands	r3, r2
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x552>
 8006404:	e01b      	b.n	800643e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006406:	4b42      	ldr	r3, [pc, #264]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800640a:	4b41      	ldr	r3, [pc, #260]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800640c:	4943      	ldr	r1, [pc, #268]	; (800651c <HAL_RCC_OscConfig+0x688>)
 800640e:	400a      	ands	r2, r1
 8006410:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006412:	f7fe fa67 	bl	80048e4 <HAL_GetTick>
 8006416:	0003      	movs	r3, r0
 8006418:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800641c:	f7fe fa62 	bl	80048e4 <HAL_GetTick>
 8006420:	0002      	movs	r2, r0
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0b2      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800642e:	4b38      	ldr	r3, [pc, #224]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	025b      	lsls	r3, r3, #9
 8006436:	4013      	ands	r3, r2
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0x588>
 800643a:	e000      	b.n	800643e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800643c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d100      	bne.n	8006448 <HAL_RCC_OscConfig+0x5b4>
 8006446:	e0a4      	b.n	8006592 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006448:	4b31      	ldr	r3, [pc, #196]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	220c      	movs	r2, #12
 800644e:	4013      	ands	r3, r2
 8006450:	2b08      	cmp	r3, #8
 8006452:	d100      	bne.n	8006456 <HAL_RCC_OscConfig+0x5c2>
 8006454:	e078      	b.n	8006548 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b02      	cmp	r3, #2
 800645c:	d14c      	bne.n	80064f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645e:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b2b      	ldr	r3, [pc, #172]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006464:	492e      	ldr	r1, [pc, #184]	; (8006520 <HAL_RCC_OscConfig+0x68c>)
 8006466:	400a      	ands	r2, r1
 8006468:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646a:	f7fe fa3b 	bl	80048e4 <HAL_GetTick>
 800646e:	0003      	movs	r3, r0
 8006470:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006474:	f7fe fa36 	bl	80048e4 <HAL_GetTick>
 8006478:	0002      	movs	r2, r0
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e086      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006486:	4b22      	ldr	r3, [pc, #136]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	2380      	movs	r3, #128	; 0x80
 800648c:	049b      	lsls	r3, r3, #18
 800648e:	4013      	ands	r3, r2
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006492:	4b1f      	ldr	r3, [pc, #124]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	220f      	movs	r2, #15
 8006498:	4393      	bics	r3, r2
 800649a:	0019      	movs	r1, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a0:	4b1b      	ldr	r3, [pc, #108]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064a2:	430a      	orrs	r2, r1
 80064a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80064a6:	4b1a      	ldr	r3, [pc, #104]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <HAL_RCC_OscConfig+0x690>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	0019      	movs	r1, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	431a      	orrs	r2, r3
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c0:	4b13      	ldr	r3, [pc, #76]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	0449      	lsls	r1, r1, #17
 80064ca:	430a      	orrs	r2, r1
 80064cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ce:	f7fe fa09 	bl	80048e4 <HAL_GetTick>
 80064d2:	0003      	movs	r3, r0
 80064d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d8:	f7fe fa04 	bl	80048e4 <HAL_GetTick>
 80064dc:	0002      	movs	r2, r0
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e054      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064ea:	4b09      	ldr	r3, [pc, #36]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	2380      	movs	r3, #128	; 0x80
 80064f0:	049b      	lsls	r3, r3, #18
 80064f2:	4013      	ands	r3, r2
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x644>
 80064f6:	e04c      	b.n	8006592 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b04      	ldr	r3, [pc, #16]	; (8006510 <HAL_RCC_OscConfig+0x67c>)
 80064fe:	4908      	ldr	r1, [pc, #32]	; (8006520 <HAL_RCC_OscConfig+0x68c>)
 8006500:	400a      	ands	r2, r1
 8006502:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006504:	f7fe f9ee 	bl	80048e4 <HAL_GetTick>
 8006508:	0003      	movs	r3, r0
 800650a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800650c:	e015      	b.n	800653a <HAL_RCC_OscConfig+0x6a6>
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	40021000 	.word	0x40021000
 8006514:	00001388 	.word	0x00001388
 8006518:	efffffff 	.word	0xefffffff
 800651c:	fffeffff 	.word	0xfffeffff
 8006520:	feffffff 	.word	0xfeffffff
 8006524:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006528:	f7fe f9dc 	bl	80048e4 <HAL_GetTick>
 800652c:	0002      	movs	r2, r0
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e02c      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800653a:	4b18      	ldr	r3, [pc, #96]	; (800659c <HAL_RCC_OscConfig+0x708>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	049b      	lsls	r3, r3, #18
 8006542:	4013      	ands	r3, r2
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x694>
 8006546:	e024      	b.n	8006592 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e01f      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006554:	4b11      	ldr	r3, [pc, #68]	; (800659c <HAL_RCC_OscConfig+0x708>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <HAL_RCC_OscConfig+0x708>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	23c0      	movs	r3, #192	; 0xc0
 8006564:	025b      	lsls	r3, r3, #9
 8006566:	401a      	ands	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	429a      	cmp	r2, r3
 800656e:	d10e      	bne.n	800658e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	220f      	movs	r2, #15
 8006574:	401a      	ands	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d107      	bne.n	800658e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	23f0      	movs	r3, #240	; 0xf0
 8006582:	039b      	lsls	r3, r3, #14
 8006584:	401a      	ands	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800658a:	429a      	cmp	r2, r3
 800658c:	d001      	beq.n	8006592 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	0018      	movs	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	b008      	add	sp, #32
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40021000 	.word	0x40021000

080065a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0bf      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065b4:	4b61      	ldr	r3, [pc, #388]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2201      	movs	r2, #1
 80065ba:	4013      	ands	r3, r2
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d911      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c2:	4b5e      	ldr	r3, [pc, #376]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2201      	movs	r2, #1
 80065c8:	4393      	bics	r3, r2
 80065ca:	0019      	movs	r1, r3
 80065cc:	4b5b      	ldr	r3, [pc, #364]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d4:	4b59      	ldr	r3, [pc, #356]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2201      	movs	r2, #1
 80065da:	4013      	ands	r3, r2
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d001      	beq.n	80065e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e0a6      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2202      	movs	r2, #2
 80065ec:	4013      	ands	r3, r2
 80065ee:	d015      	beq.n	800661c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2204      	movs	r2, #4
 80065f6:	4013      	ands	r3, r2
 80065f8:	d006      	beq.n	8006608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80065fa:	4b51      	ldr	r3, [pc, #324]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	4b50      	ldr	r3, [pc, #320]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 8006600:	21e0      	movs	r1, #224	; 0xe0
 8006602:	00c9      	lsls	r1, r1, #3
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006608:	4b4d      	ldr	r3, [pc, #308]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	22f0      	movs	r2, #240	; 0xf0
 800660e:	4393      	bics	r3, r2
 8006610:	0019      	movs	r1, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2201      	movs	r2, #1
 8006622:	4013      	ands	r3, r2
 8006624:	d04c      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d107      	bne.n	800663e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662e:	4b44      	ldr	r3, [pc, #272]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	4013      	ands	r3, r2
 8006638:	d120      	bne.n	800667c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e07a      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d107      	bne.n	8006656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006646:	4b3e      	ldr	r3, [pc, #248]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	2380      	movs	r3, #128	; 0x80
 800664c:	049b      	lsls	r3, r3, #18
 800664e:	4013      	ands	r3, r2
 8006650:	d114      	bne.n	800667c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e06e      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d107      	bne.n	800666e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800665e:	4b38      	ldr	r3, [pc, #224]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 8006660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	025b      	lsls	r3, r3, #9
 8006666:	4013      	ands	r3, r2
 8006668:	d108      	bne.n	800667c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e062      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666e:	4b34      	ldr	r3, [pc, #208]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2202      	movs	r2, #2
 8006674:	4013      	ands	r3, r2
 8006676:	d101      	bne.n	800667c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e05b      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800667c:	4b30      	ldr	r3, [pc, #192]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2203      	movs	r2, #3
 8006682:	4393      	bics	r3, r2
 8006684:	0019      	movs	r1, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	4b2d      	ldr	r3, [pc, #180]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006690:	f7fe f928 	bl	80048e4 <HAL_GetTick>
 8006694:	0003      	movs	r3, r0
 8006696:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006698:	e009      	b.n	80066ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800669a:	f7fe f923 	bl	80048e4 <HAL_GetTick>
 800669e:	0002      	movs	r2, r0
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	4a27      	ldr	r2, [pc, #156]	; (8006744 <HAL_RCC_ClockConfig+0x1a4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e042      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	220c      	movs	r2, #12
 80066b4:	401a      	ands	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	429a      	cmp	r2, r3
 80066be:	d1ec      	bne.n	800669a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066c0:	4b1e      	ldr	r3, [pc, #120]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2201      	movs	r2, #1
 80066c6:	4013      	ands	r3, r2
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d211      	bcs.n	80066f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ce:	4b1b      	ldr	r3, [pc, #108]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2201      	movs	r2, #1
 80066d4:	4393      	bics	r3, r2
 80066d6:	0019      	movs	r1, r3
 80066d8:	4b18      	ldr	r3, [pc, #96]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e0:	4b16      	ldr	r3, [pc, #88]	; (800673c <HAL_RCC_ClockConfig+0x19c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2201      	movs	r2, #1
 80066e6:	4013      	ands	r3, r2
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d001      	beq.n	80066f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e020      	b.n	8006734 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2204      	movs	r2, #4
 80066f8:	4013      	ands	r3, r2
 80066fa:	d009      	beq.n	8006710 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80066fc:	4b10      	ldr	r3, [pc, #64]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4a11      	ldr	r2, [pc, #68]	; (8006748 <HAL_RCC_ClockConfig+0x1a8>)
 8006702:	4013      	ands	r3, r2
 8006704:	0019      	movs	r1, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006710:	f000 f820 	bl	8006754 <HAL_RCC_GetSysClockFreq>
 8006714:	0001      	movs	r1, r0
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <HAL_RCC_ClockConfig+0x1a0>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	220f      	movs	r2, #15
 800671e:	4013      	ands	r3, r2
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <HAL_RCC_ClockConfig+0x1ac>)
 8006722:	5cd3      	ldrb	r3, [r2, r3]
 8006724:	000a      	movs	r2, r1
 8006726:	40da      	lsrs	r2, r3
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <HAL_RCC_ClockConfig+0x1b0>)
 800672a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800672c:	2003      	movs	r0, #3
 800672e:	f7fc fd27 	bl	8003180 <HAL_InitTick>
  
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	0018      	movs	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	b004      	add	sp, #16
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40022000 	.word	0x40022000
 8006740:	40021000 	.word	0x40021000
 8006744:	00001388 	.word	0x00001388
 8006748:	fffff8ff 	.word	0xfffff8ff
 800674c:	080140ec 	.word	0x080140ec
 8006750:	20000000 	.word	0x20000000

08006754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006754:	b590      	push	{r4, r7, lr}
 8006756:	b08f      	sub	sp, #60	; 0x3c
 8006758:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800675a:	2314      	movs	r3, #20
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	4a38      	ldr	r2, [pc, #224]	; (8006840 <HAL_RCC_GetSysClockFreq+0xec>)
 8006760:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006762:	c313      	stmia	r3!, {r0, r1, r4}
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006768:	1d3b      	adds	r3, r7, #4
 800676a:	4a36      	ldr	r2, [pc, #216]	; (8006844 <HAL_RCC_GetSysClockFreq+0xf0>)
 800676c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800676e:	c313      	stmia	r3!, {r0, r1, r4}
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006778:	2300      	movs	r3, #0
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
 800677c:	2300      	movs	r3, #0
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
 8006780:	2300      	movs	r3, #0
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006788:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <HAL_RCC_GetSysClockFreq+0xf4>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	220c      	movs	r2, #12
 8006792:	4013      	ands	r3, r2
 8006794:	2b0c      	cmp	r3, #12
 8006796:	d047      	beq.n	8006828 <HAL_RCC_GetSysClockFreq+0xd4>
 8006798:	d849      	bhi.n	800682e <HAL_RCC_GetSysClockFreq+0xda>
 800679a:	2b04      	cmp	r3, #4
 800679c:	d002      	beq.n	80067a4 <HAL_RCC_GetSysClockFreq+0x50>
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d003      	beq.n	80067aa <HAL_RCC_GetSysClockFreq+0x56>
 80067a2:	e044      	b.n	800682e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067a4:	4b29      	ldr	r3, [pc, #164]	; (800684c <HAL_RCC_GetSysClockFreq+0xf8>)
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80067a8:	e044      	b.n	8006834 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	0c9b      	lsrs	r3, r3, #18
 80067ae:	220f      	movs	r2, #15
 80067b0:	4013      	ands	r3, r2
 80067b2:	2214      	movs	r2, #20
 80067b4:	18ba      	adds	r2, r7, r2
 80067b6:	5cd3      	ldrb	r3, [r2, r3]
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80067ba:	4b23      	ldr	r3, [pc, #140]	; (8006848 <HAL_RCC_GetSysClockFreq+0xf4>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	220f      	movs	r2, #15
 80067c0:	4013      	ands	r3, r2
 80067c2:	1d3a      	adds	r2, r7, #4
 80067c4:	5cd3      	ldrb	r3, [r2, r3]
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ca:	23c0      	movs	r3, #192	; 0xc0
 80067cc:	025b      	lsls	r3, r3, #9
 80067ce:	401a      	ands	r2, r3
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	025b      	lsls	r3, r3, #9
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d109      	bne.n	80067ec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067da:	481c      	ldr	r0, [pc, #112]	; (800684c <HAL_RCC_GetSysClockFreq+0xf8>)
 80067dc:	f7f9 fc9e 	bl	800011c <__udivsi3>
 80067e0:	0003      	movs	r3, r0
 80067e2:	001a      	movs	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	4353      	muls	r3, r2
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ea:	e01a      	b.n	8006822 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80067ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ee:	23c0      	movs	r3, #192	; 0xc0
 80067f0:	025b      	lsls	r3, r3, #9
 80067f2:	401a      	ands	r2, r3
 80067f4:	23c0      	movs	r3, #192	; 0xc0
 80067f6:	025b      	lsls	r3, r3, #9
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d109      	bne.n	8006810 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067fe:	4814      	ldr	r0, [pc, #80]	; (8006850 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006800:	f7f9 fc8c 	bl	800011c <__udivsi3>
 8006804:	0003      	movs	r3, r0
 8006806:	001a      	movs	r2, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	4353      	muls	r3, r2
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
 800680e:	e008      	b.n	8006822 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006812:	480e      	ldr	r0, [pc, #56]	; (800684c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006814:	f7f9 fc82 	bl	800011c <__udivsi3>
 8006818:	0003      	movs	r3, r0
 800681a:	001a      	movs	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	4353      	muls	r3, r2
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006826:	e005      	b.n	8006834 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006828:	4b09      	ldr	r3, [pc, #36]	; (8006850 <HAL_RCC_GetSysClockFreq+0xfc>)
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800682c:	e002      	b.n	8006834 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006830:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006832:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006836:	0018      	movs	r0, r3
 8006838:	46bd      	mov	sp, r7
 800683a:	b00f      	add	sp, #60	; 0x3c
 800683c:	bd90      	pop	{r4, r7, pc}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	08013264 	.word	0x08013264
 8006844:	08013274 	.word	0x08013274
 8006848:	40021000 	.word	0x40021000
 800684c:	007a1200 	.word	0x007a1200
 8006850:	02dc6c00 	.word	0x02dc6c00

08006854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006858:	4b02      	ldr	r3, [pc, #8]	; (8006864 <HAL_RCC_GetHCLKFreq+0x10>)
 800685a:	681b      	ldr	r3, [r3, #0]
}
 800685c:	0018      	movs	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	20000000 	.word	0x20000000

08006868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800686c:	f7ff fff2 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 8006870:	0001      	movs	r1, r0
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	2207      	movs	r2, #7
 800687a:	4013      	ands	r3, r2
 800687c:	4a04      	ldr	r2, [pc, #16]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800687e:	5cd3      	ldrb	r3, [r2, r3]
 8006880:	40d9      	lsrs	r1, r3
 8006882:	000b      	movs	r3, r1
}    
 8006884:	0018      	movs	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	40021000 	.word	0x40021000
 8006890:	080140fc 	.word	0x080140fc

08006894 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <HAL_RCC_GetClockConfig+0x4c>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2203      	movs	r2, #3
 80068aa:	401a      	ands	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <HAL_RCC_GetClockConfig+0x4c>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	22f0      	movs	r2, #240	; 0xf0
 80068b6:	401a      	ands	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80068bc:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <HAL_RCC_GetClockConfig+0x4c>)
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	23e0      	movs	r3, #224	; 0xe0
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	401a      	ands	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_RCC_GetClockConfig+0x50>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2201      	movs	r2, #1
 80068d0:	401a      	ands	r2, r3
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	601a      	str	r2, [r3, #0]
}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	46bd      	mov	sp, r7
 80068da:	b002      	add	sp, #8
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	40021000 	.word	0x40021000
 80068e4:	40022000 	.word	0x40022000

080068e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	025b      	lsls	r3, r3, #9
 8006900:	4013      	ands	r3, r2
 8006902:	d100      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006904:	e08e      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006906:	2017      	movs	r0, #23
 8006908:	183b      	adds	r3, r7, r0
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800690e:	4b6e      	ldr	r3, [pc, #440]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006910:	69da      	ldr	r2, [r3, #28]
 8006912:	2380      	movs	r3, #128	; 0x80
 8006914:	055b      	lsls	r3, r3, #21
 8006916:	4013      	ands	r3, r2
 8006918:	d110      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800691a:	4b6b      	ldr	r3, [pc, #428]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800691c:	69da      	ldr	r2, [r3, #28]
 800691e:	4b6a      	ldr	r3, [pc, #424]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	0549      	lsls	r1, r1, #21
 8006924:	430a      	orrs	r2, r1
 8006926:	61da      	str	r2, [r3, #28]
 8006928:	4b67      	ldr	r3, [pc, #412]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	2380      	movs	r3, #128	; 0x80
 800692e:	055b      	lsls	r3, r3, #21
 8006930:	4013      	ands	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
 8006934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006936:	183b      	adds	r3, r7, r0
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693c:	4b63      	ldr	r3, [pc, #396]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	4013      	ands	r3, r2
 8006946:	d11a      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006948:	4b60      	ldr	r3, [pc, #384]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b5f      	ldr	r3, [pc, #380]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800694e:	2180      	movs	r1, #128	; 0x80
 8006950:	0049      	lsls	r1, r1, #1
 8006952:	430a      	orrs	r2, r1
 8006954:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006956:	f7fd ffc5 	bl	80048e4 <HAL_GetTick>
 800695a:	0003      	movs	r3, r0
 800695c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695e:	e008      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006960:	f7fd ffc0 	bl	80048e4 <HAL_GetTick>
 8006964:	0002      	movs	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b64      	cmp	r3, #100	; 0x64
 800696c:	d901      	bls.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e0a6      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006972:	4b56      	ldr	r3, [pc, #344]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	2380      	movs	r3, #128	; 0x80
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	4013      	ands	r3, r2
 800697c:	d0f0      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800697e:	4b52      	ldr	r3, [pc, #328]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	23c0      	movs	r3, #192	; 0xc0
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4013      	ands	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d034      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	23c0      	movs	r3, #192	; 0xc0
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4013      	ands	r3, r2
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	429a      	cmp	r2, r3
 800699e:	d02c      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069a0:	4b49      	ldr	r3, [pc, #292]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	4a4a      	ldr	r2, [pc, #296]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069aa:	4b47      	ldr	r3, [pc, #284]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	4b46      	ldr	r3, [pc, #280]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069b0:	2180      	movs	r1, #128	; 0x80
 80069b2:	0249      	lsls	r1, r1, #9
 80069b4:	430a      	orrs	r2, r1
 80069b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069b8:	4b43      	ldr	r3, [pc, #268]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069ba:	6a1a      	ldr	r2, [r3, #32]
 80069bc:	4b42      	ldr	r3, [pc, #264]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069be:	4945      	ldr	r1, [pc, #276]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80069c0:	400a      	ands	r2, r1
 80069c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80069c4:	4b40      	ldr	r3, [pc, #256]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	4013      	ands	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d2:	f7fd ff87 	bl	80048e4 <HAL_GetTick>
 80069d6:	0003      	movs	r3, r0
 80069d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069da:	e009      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069dc:	f7fd ff82 	bl	80048e4 <HAL_GetTick>
 80069e0:	0002      	movs	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	4a3c      	ldr	r2, [pc, #240]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e067      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f0:	4b35      	ldr	r3, [pc, #212]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	2202      	movs	r2, #2
 80069f6:	4013      	ands	r3, r2
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069fa:	4b33      	ldr	r3, [pc, #204]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	4a34      	ldr	r2, [pc, #208]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	0019      	movs	r1, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	4b2f      	ldr	r3, [pc, #188]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a0e:	2317      	movs	r3, #23
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d105      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a18:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a1e:	492f      	ldr	r1, [pc, #188]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006a20:	400a      	ands	r2, r1
 8006a22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a2e:	4b26      	ldr	r3, [pc, #152]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	2203      	movs	r2, #3
 8006a34:	4393      	bics	r3, r2
 8006a36:	0019      	movs	r1, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2202      	movs	r2, #2
 8006a48:	4013      	ands	r3, r2
 8006a4a:	d009      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a4c:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	4a23      	ldr	r2, [pc, #140]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	0019      	movs	r1, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2220      	movs	r2, #32
 8006a66:	4013      	ands	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a6a:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	2210      	movs	r2, #16
 8006a70:	4393      	bics	r3, r2
 8006a72:	0019      	movs	r1, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	029b      	lsls	r3, r3, #10
 8006a86:	4013      	ands	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	4393      	bics	r3, r2
 8006a92:	0019      	movs	r1, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	2380      	movs	r3, #128	; 0x80
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006aaa:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	2240      	movs	r2, #64	; 0x40
 8006ab0:	4393      	bics	r3, r2
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006aba:	430a      	orrs	r2, r1
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b006      	add	sp, #24
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40007000 	.word	0x40007000
 8006ad0:	fffffcff 	.word	0xfffffcff
 8006ad4:	fffeffff 	.word	0xfffeffff
 8006ad8:	00001388 	.word	0x00001388
 8006adc:	efffffff 	.word	0xefffffff
 8006ae0:	fffcffff 	.word	0xfffcffff

08006ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e042      	b.n	8006b7c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	223d      	movs	r2, #61	; 0x3d
 8006afa:	5c9b      	ldrb	r3, [r3, r2]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d107      	bne.n	8006b12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	223c      	movs	r2, #60	; 0x3c
 8006b06:	2100      	movs	r1, #0
 8006b08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 f839 	bl	8006b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	223d      	movs	r2, #61	; 0x3d
 8006b16:	2102      	movs	r1, #2
 8006b18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3304      	adds	r3, #4
 8006b22:	0019      	movs	r1, r3
 8006b24:	0010      	movs	r0, r2
 8006b26:	f000 fb8b 	bl	8007240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2246      	movs	r2, #70	; 0x46
 8006b2e:	2101      	movs	r1, #1
 8006b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	223e      	movs	r2, #62	; 0x3e
 8006b36:	2101      	movs	r1, #1
 8006b38:	5499      	strb	r1, [r3, r2]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	223f      	movs	r2, #63	; 0x3f
 8006b3e:	2101      	movs	r1, #1
 8006b40:	5499      	strb	r1, [r3, r2]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2240      	movs	r2, #64	; 0x40
 8006b46:	2101      	movs	r1, #1
 8006b48:	5499      	strb	r1, [r3, r2]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2241      	movs	r2, #65	; 0x41
 8006b4e:	2101      	movs	r1, #1
 8006b50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2242      	movs	r2, #66	; 0x42
 8006b56:	2101      	movs	r1, #1
 8006b58:	5499      	strb	r1, [r3, r2]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2243      	movs	r2, #67	; 0x43
 8006b5e:	2101      	movs	r1, #1
 8006b60:	5499      	strb	r1, [r3, r2]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2244      	movs	r2, #68	; 0x44
 8006b66:	2101      	movs	r1, #1
 8006b68:	5499      	strb	r1, [r3, r2]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2245      	movs	r2, #69	; 0x45
 8006b6e:	2101      	movs	r1, #1
 8006b70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	223d      	movs	r2, #61	; 0x3d
 8006b76:	2101      	movs	r1, #1
 8006b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b002      	add	sp, #8
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b8c:	46c0      	nop			; (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b002      	add	sp, #8
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	223d      	movs	r2, #61	; 0x3d
 8006ba0:	5c9b      	ldrb	r3, [r3, r2]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e03b      	b.n	8006c24 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	223d      	movs	r2, #61	; 0x3d
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <HAL_TIM_Base_Start_IT+0x98>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00f      	beq.n	8006bee <HAL_TIM_Base_Start_IT+0x5a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	2380      	movs	r3, #128	; 0x80
 8006bd4:	05db      	lsls	r3, r3, #23
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d009      	beq.n	8006bee <HAL_TIM_Base_Start_IT+0x5a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <HAL_TIM_Base_Start_IT+0x9c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIM_Base_Start_IT+0x5a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <HAL_TIM_Base_Start_IT+0xa0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d111      	bne.n	8006c12 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2207      	movs	r2, #7
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b06      	cmp	r3, #6
 8006bfe:	d010      	beq.n	8006c22 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c10:	e007      	b.n	8006c22 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	0018      	movs	r0, r3
 8006c26:	46bd      	mov	sp, r7
 8006c28:	b004      	add	sp, #16
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40014000 	.word	0x40014000

08006c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e042      	b.n	8006cd0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	223d      	movs	r2, #61	; 0x3d
 8006c4e:	5c9b      	ldrb	r3, [r3, r2]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d107      	bne.n	8006c66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	223c      	movs	r2, #60	; 0x3c
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7fc f9d1 	bl	8003008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	223d      	movs	r2, #61	; 0x3d
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	0019      	movs	r1, r3
 8006c78:	0010      	movs	r0, r2
 8006c7a:	f000 fae1 	bl	8007240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2246      	movs	r2, #70	; 0x46
 8006c82:	2101      	movs	r1, #1
 8006c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	223e      	movs	r2, #62	; 0x3e
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	5499      	strb	r1, [r3, r2]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	223f      	movs	r2, #63	; 0x3f
 8006c92:	2101      	movs	r1, #1
 8006c94:	5499      	strb	r1, [r3, r2]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2240      	movs	r2, #64	; 0x40
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	5499      	strb	r1, [r3, r2]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2241      	movs	r2, #65	; 0x41
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2242      	movs	r2, #66	; 0x42
 8006caa:	2101      	movs	r1, #1
 8006cac:	5499      	strb	r1, [r3, r2]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2243      	movs	r2, #67	; 0x43
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	5499      	strb	r1, [r3, r2]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2244      	movs	r2, #68	; 0x44
 8006cba:	2101      	movs	r1, #1
 8006cbc:	5499      	strb	r1, [r3, r2]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2245      	movs	r2, #69	; 0x45
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	223d      	movs	r2, #61	; 0x3d
 8006cca:	2101      	movs	r1, #1
 8006ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	b002      	add	sp, #8
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d108      	bne.n	8006cfa <HAL_TIM_PWM_Start+0x22>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	223e      	movs	r2, #62	; 0x3e
 8006cec:	5c9b      	ldrb	r3, [r3, r2]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	1e5a      	subs	r2, r3, #1
 8006cf4:	4193      	sbcs	r3, r2
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	e01f      	b.n	8006d3a <HAL_TIM_PWM_Start+0x62>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d108      	bne.n	8006d12 <HAL_TIM_PWM_Start+0x3a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	223f      	movs	r2, #63	; 0x3f
 8006d04:	5c9b      	ldrb	r3, [r3, r2]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	1e5a      	subs	r2, r3, #1
 8006d0c:	4193      	sbcs	r3, r2
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e013      	b.n	8006d3a <HAL_TIM_PWM_Start+0x62>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d108      	bne.n	8006d2a <HAL_TIM_PWM_Start+0x52>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2240      	movs	r2, #64	; 0x40
 8006d1c:	5c9b      	ldrb	r3, [r3, r2]
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	1e5a      	subs	r2, r3, #1
 8006d24:	4193      	sbcs	r3, r2
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	e007      	b.n	8006d3a <HAL_TIM_PWM_Start+0x62>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2241      	movs	r2, #65	; 0x41
 8006d2e:	5c9b      	ldrb	r3, [r3, r2]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	3b01      	subs	r3, #1
 8006d34:	1e5a      	subs	r2, r3, #1
 8006d36:	4193      	sbcs	r3, r2
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e074      	b.n	8006e2c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0x7a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	223e      	movs	r2, #62	; 0x3e
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	5499      	strb	r1, [r3, r2]
 8006d50:	e013      	b.n	8006d7a <HAL_TIM_PWM_Start+0xa2>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_PWM_Start+0x8a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	223f      	movs	r2, #63	; 0x3f
 8006d5c:	2102      	movs	r1, #2
 8006d5e:	5499      	strb	r1, [r3, r2]
 8006d60:	e00b      	b.n	8006d7a <HAL_TIM_PWM_Start+0xa2>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d104      	bne.n	8006d72 <HAL_TIM_PWM_Start+0x9a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2240      	movs	r2, #64	; 0x40
 8006d6c:	2102      	movs	r1, #2
 8006d6e:	5499      	strb	r1, [r3, r2]
 8006d70:	e003      	b.n	8006d7a <HAL_TIM_PWM_Start+0xa2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2241      	movs	r2, #65	; 0x41
 8006d76:	2102      	movs	r1, #2
 8006d78:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	2201      	movs	r2, #1
 8006d82:	0018      	movs	r0, r3
 8006d84:	f000 fcd8 	bl	8007738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a29      	ldr	r2, [pc, #164]	; (8006e34 <HAL_TIM_PWM_Start+0x15c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_TIM_PWM_Start+0xd8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a28      	ldr	r2, [pc, #160]	; (8006e38 <HAL_TIM_PWM_Start+0x160>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_TIM_PWM_Start+0xd8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a26      	ldr	r2, [pc, #152]	; (8006e3c <HAL_TIM_PWM_Start+0x164>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_TIM_PWM_Start+0xd8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a25      	ldr	r2, [pc, #148]	; (8006e40 <HAL_TIM_PWM_Start+0x168>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d101      	bne.n	8006db4 <HAL_TIM_PWM_Start+0xdc>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <HAL_TIM_PWM_Start+0xde>
 8006db4:	2300      	movs	r3, #0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2180      	movs	r1, #128	; 0x80
 8006dc6:	0209      	lsls	r1, r1, #8
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_TIM_PWM_Start+0x15c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00f      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x11e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	05db      	lsls	r3, r3, #23
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d009      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x11e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a17      	ldr	r2, [pc, #92]	; (8006e44 <HAL_TIM_PWM_Start+0x16c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x11e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a11      	ldr	r2, [pc, #68]	; (8006e38 <HAL_TIM_PWM_Start+0x160>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d111      	bne.n	8006e1a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2207      	movs	r2, #7
 8006dfe:	4013      	ands	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	d010      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2101      	movs	r1, #1
 8006e14:	430a      	orrs	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e18:	e007      	b.n	8006e2a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2101      	movs	r1, #1
 8006e26:	430a      	orrs	r2, r1
 8006e28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b004      	add	sp, #16
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40014000 	.word	0x40014000
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800
 8006e44:	40000400 	.word	0x40000400

08006e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2202      	movs	r2, #2
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d124      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2202      	movs	r2, #2
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d11d      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2203      	movs	r2, #3
 8006e72:	4252      	negs	r2, r2
 8006e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2203      	movs	r2, #3
 8006e84:	4013      	ands	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f000 f9c0 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006e90:	e007      	b.n	8006ea2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f000 f9b3 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f000 f9bf 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2204      	movs	r2, #4
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d125      	bne.n	8006f02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d11e      	bne.n	8006f02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2205      	movs	r2, #5
 8006eca:	4252      	negs	r2, r2
 8006ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	23c0      	movs	r3, #192	; 0xc0
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 f993 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006eea:	e007      	b.n	8006efc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f000 f986 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f000 f992 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2208      	movs	r2, #8
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d124      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2208      	movs	r2, #8
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d11d      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2209      	movs	r2, #9
 8006f24:	4252      	negs	r2, r2
 8006f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	2203      	movs	r2, #3
 8006f36:	4013      	ands	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f000 f967 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006f42:	e007      	b.n	8006f54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	0018      	movs	r0, r3
 8006f48:	f000 f95a 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f000 f966 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2210      	movs	r2, #16
 8006f62:	4013      	ands	r3, r2
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d125      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2210      	movs	r2, #16
 8006f70:	4013      	ands	r3, r2
 8006f72:	2b10      	cmp	r3, #16
 8006f74:	d11e      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2211      	movs	r2, #17
 8006f7c:	4252      	negs	r2, r2
 8006f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2208      	movs	r2, #8
 8006f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	23c0      	movs	r3, #192	; 0xc0
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4013      	ands	r3, r2
 8006f92:	d004      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	0018      	movs	r0, r3
 8006f98:	f000 f93a 	bl	8007210 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e007      	b.n	8006fae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f000 f92d 	bl	8007200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f000 f939 	bl	8007220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d10f      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d108      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	4252      	negs	r2, r2
 8006fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7fb ff6f 	bl	8002ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2280      	movs	r2, #128	; 0x80
 8006fea:	4013      	ands	r3, r2
 8006fec:	2b80      	cmp	r3, #128	; 0x80
 8006fee:	d10f      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2280      	movs	r2, #128	; 0x80
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b80      	cmp	r3, #128	; 0x80
 8006ffc:	d108      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2281      	movs	r2, #129	; 0x81
 8007004:	4252      	negs	r2, r2
 8007006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	0018      	movs	r0, r3
 800700c:	f000 fc1e 	bl	800784c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2240      	movs	r2, #64	; 0x40
 8007018:	4013      	ands	r3, r2
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d10f      	bne.n	800703e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2240      	movs	r2, #64	; 0x40
 8007026:	4013      	ands	r3, r2
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d108      	bne.n	800703e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2241      	movs	r2, #65	; 0x41
 8007032:	4252      	negs	r2, r2
 8007034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	0018      	movs	r0, r3
 800703a:	f000 f8f9 	bl	8007230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2220      	movs	r2, #32
 8007046:	4013      	ands	r3, r2
 8007048:	2b20      	cmp	r3, #32
 800704a:	d10f      	bne.n	800706c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	4013      	ands	r3, r2
 8007056:	2b20      	cmp	r3, #32
 8007058:	d108      	bne.n	800706c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2221      	movs	r2, #33	; 0x21
 8007060:	4252      	negs	r2, r2
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0018      	movs	r0, r3
 8007068:	f000 fbe8 	bl	800783c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800706c:	46c0      	nop			; (mov r8, r8)
 800706e:	46bd      	mov	sp, r7
 8007070:	b002      	add	sp, #8
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007080:	2317      	movs	r3, #23
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	223c      	movs	r2, #60	; 0x3c
 800708c:	5c9b      	ldrb	r3, [r3, r2]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d101      	bne.n	8007096 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007092:	2302      	movs	r3, #2
 8007094:	e0ad      	b.n	80071f2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	223c      	movs	r2, #60	; 0x3c
 800709a:	2101      	movs	r1, #1
 800709c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b0c      	cmp	r3, #12
 80070a2:	d100      	bne.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80070a4:	e076      	b.n	8007194 <HAL_TIM_PWM_ConfigChannel+0x120>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d900      	bls.n	80070ae <HAL_TIM_PWM_ConfigChannel+0x3a>
 80070ac:	e095      	b.n	80071da <HAL_TIM_PWM_ConfigChannel+0x166>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d04e      	beq.n	8007152 <HAL_TIM_PWM_ConfigChannel+0xde>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d900      	bls.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x48>
 80070ba:	e08e      	b.n	80071da <HAL_TIM_PWM_ConfigChannel+0x166>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_TIM_PWM_ConfigChannel+0x56>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d021      	beq.n	800710c <HAL_TIM_PWM_ConfigChannel+0x98>
 80070c8:	e087      	b.n	80071da <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	0011      	movs	r1, r2
 80070d2:	0018      	movs	r0, r3
 80070d4:	f000 f934 	bl	8007340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2108      	movs	r1, #8
 80070e4:	430a      	orrs	r2, r1
 80070e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2104      	movs	r1, #4
 80070f4:	438a      	bics	r2, r1
 80070f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6999      	ldr	r1, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	619a      	str	r2, [r3, #24]
      break;
 800710a:	e06b      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	0011      	movs	r1, r2
 8007114:	0018      	movs	r0, r3
 8007116:	f000 f99b 	bl	8007450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2180      	movs	r1, #128	; 0x80
 8007126:	0109      	lsls	r1, r1, #4
 8007128:	430a      	orrs	r2, r1
 800712a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4931      	ldr	r1, [pc, #196]	; (80071fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007138:	400a      	ands	r2, r1
 800713a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6999      	ldr	r1, [r3, #24]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	021a      	lsls	r2, r3, #8
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	619a      	str	r2, [r3, #24]
      break;
 8007150:	e048      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	0011      	movs	r1, r2
 800715a:	0018      	movs	r0, r3
 800715c:	f000 f9fc 	bl	8007558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69da      	ldr	r2, [r3, #28]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2108      	movs	r1, #8
 800716c:	430a      	orrs	r2, r1
 800716e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2104      	movs	r1, #4
 800717c:	438a      	bics	r2, r1
 800717e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69d9      	ldr	r1, [r3, #28]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	691a      	ldr	r2, [r3, #16]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	61da      	str	r2, [r3, #28]
      break;
 8007192:	e027      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	0011      	movs	r1, r2
 800719c:	0018      	movs	r0, r3
 800719e:	f000 fa61 	bl	8007664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2180      	movs	r1, #128	; 0x80
 80071ae:	0109      	lsls	r1, r1, #4
 80071b0:	430a      	orrs	r2, r1
 80071b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	490f      	ldr	r1, [pc, #60]	; (80071fc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80071c0:	400a      	ands	r2, r1
 80071c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69d9      	ldr	r1, [r3, #28]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	021a      	lsls	r2, r3, #8
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	61da      	str	r2, [r3, #28]
      break;
 80071d8:	e004      	b.n	80071e4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80071da:	2317      	movs	r3, #23
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	2201      	movs	r2, #1
 80071e0:	701a      	strb	r2, [r3, #0]
      break;
 80071e2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	223c      	movs	r2, #60	; 0x3c
 80071e8:	2100      	movs	r1, #0
 80071ea:	5499      	strb	r1, [r3, r2]

  return status;
 80071ec:	2317      	movs	r3, #23
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	781b      	ldrb	r3, [r3, #0]
}
 80071f2:	0018      	movs	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b006      	add	sp, #24
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	fffffbff 	.word	0xfffffbff

08007200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007208:	46c0      	nop			; (mov r8, r8)
 800720a:	46bd      	mov	sp, r7
 800720c:	b002      	add	sp, #8
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007218:	46c0      	nop			; (mov r8, r8)
 800721a:	46bd      	mov	sp, r7
 800721c:	b002      	add	sp, #8
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007228:	46c0      	nop			; (mov r8, r8)
 800722a:	46bd      	mov	sp, r7
 800722c:	b002      	add	sp, #8
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	46bd      	mov	sp, r7
 800723c:	b002      	add	sp, #8
 800723e:	bd80      	pop	{r7, pc}

08007240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a34      	ldr	r2, [pc, #208]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d008      	beq.n	800726a <TIM_Base_SetConfig+0x2a>
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	2380      	movs	r3, #128	; 0x80
 800725c:	05db      	lsls	r3, r3, #23
 800725e:	429a      	cmp	r2, r3
 8007260:	d003      	beq.n	800726a <TIM_Base_SetConfig+0x2a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a30      	ldr	r2, [pc, #192]	; (8007328 <TIM_Base_SetConfig+0xe8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d108      	bne.n	800727c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2270      	movs	r2, #112	; 0x70
 800726e:	4393      	bics	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a29      	ldr	r2, [pc, #164]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	05db      	lsls	r3, r3, #23
 800728a:	429a      	cmp	r2, r3
 800728c:	d013      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a25      	ldr	r2, [pc, #148]	; (8007328 <TIM_Base_SetConfig+0xe8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a24      	ldr	r2, [pc, #144]	; (800732c <TIM_Base_SetConfig+0xec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00b      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a23      	ldr	r2, [pc, #140]	; (8007330 <TIM_Base_SetConfig+0xf0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a22      	ldr	r2, [pc, #136]	; (8007334 <TIM_Base_SetConfig+0xf4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_Base_SetConfig+0x76>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a21      	ldr	r2, [pc, #132]	; (8007338 <TIM_Base_SetConfig+0xf8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d108      	bne.n	80072c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a20      	ldr	r2, [pc, #128]	; (800733c <TIM_Base_SetConfig+0xfc>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2280      	movs	r2, #128	; 0x80
 80072cc:	4393      	bics	r3, r2
 80072ce:	001a      	movs	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a0c      	ldr	r2, [pc, #48]	; (8007324 <TIM_Base_SetConfig+0xe4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00b      	beq.n	800730e <TIM_Base_SetConfig+0xce>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a0d      	ldr	r2, [pc, #52]	; (8007330 <TIM_Base_SetConfig+0xf0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d007      	beq.n	800730e <TIM_Base_SetConfig+0xce>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a0c      	ldr	r2, [pc, #48]	; (8007334 <TIM_Base_SetConfig+0xf4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <TIM_Base_SetConfig+0xce>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a0b      	ldr	r2, [pc, #44]	; (8007338 <TIM_Base_SetConfig+0xf8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d103      	bne.n	8007316 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	615a      	str	r2, [r3, #20]
}
 800731c:	46c0      	nop			; (mov r8, r8)
 800731e:	46bd      	mov	sp, r7
 8007320:	b004      	add	sp, #16
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40012c00 	.word	0x40012c00
 8007328:	40000400 	.word	0x40000400
 800732c:	40002000 	.word	0x40002000
 8007330:	40014000 	.word	0x40014000
 8007334:	40014400 	.word	0x40014400
 8007338:	40014800 	.word	0x40014800
 800733c:	fffffcff 	.word	0xfffffcff

08007340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	2201      	movs	r2, #1
 8007350:	4393      	bics	r3, r2
 8007352:	001a      	movs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2270      	movs	r2, #112	; 0x70
 800736e:	4393      	bics	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2203      	movs	r2, #3
 8007376:	4393      	bics	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2202      	movs	r2, #2
 8007388:	4393      	bics	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a27      	ldr	r2, [pc, #156]	; (8007438 <TIM_OC1_SetConfig+0xf8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00b      	beq.n	80073b6 <TIM_OC1_SetConfig+0x76>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a26      	ldr	r2, [pc, #152]	; (800743c <TIM_OC1_SetConfig+0xfc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d007      	beq.n	80073b6 <TIM_OC1_SetConfig+0x76>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a25      	ldr	r2, [pc, #148]	; (8007440 <TIM_OC1_SetConfig+0x100>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d003      	beq.n	80073b6 <TIM_OC1_SetConfig+0x76>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a24      	ldr	r2, [pc, #144]	; (8007444 <TIM_OC1_SetConfig+0x104>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d10c      	bne.n	80073d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2208      	movs	r2, #8
 80073ba:	4393      	bics	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2204      	movs	r2, #4
 80073cc:	4393      	bics	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a19      	ldr	r2, [pc, #100]	; (8007438 <TIM_OC1_SetConfig+0xf8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_OC1_SetConfig+0xb0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <TIM_OC1_SetConfig+0xfc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_OC1_SetConfig+0xb0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a17      	ldr	r2, [pc, #92]	; (8007440 <TIM_OC1_SetConfig+0x100>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_OC1_SetConfig+0xb0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a16      	ldr	r2, [pc, #88]	; (8007444 <TIM_OC1_SetConfig+0x104>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d111      	bne.n	8007414 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	4a15      	ldr	r2, [pc, #84]	; (8007448 <TIM_OC1_SetConfig+0x108>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4a14      	ldr	r2, [pc, #80]	; (800744c <TIM_OC1_SetConfig+0x10c>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	4313      	orrs	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	46bd      	mov	sp, r7
 8007432:	b006      	add	sp, #24
 8007434:	bd80      	pop	{r7, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800
 8007448:	fffffeff 	.word	0xfffffeff
 800744c:	fffffdff 	.word	0xfffffdff

08007450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	2210      	movs	r2, #16
 8007460:	4393      	bics	r3, r2
 8007462:	001a      	movs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a2e      	ldr	r2, [pc, #184]	; (8007538 <TIM_OC2_SetConfig+0xe8>)
 800747e:	4013      	ands	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a2d      	ldr	r2, [pc, #180]	; (800753c <TIM_OC2_SetConfig+0xec>)
 8007486:	4013      	ands	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2220      	movs	r2, #32
 800749a:	4393      	bics	r3, r2
 800749c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a24      	ldr	r2, [pc, #144]	; (8007540 <TIM_OC2_SetConfig+0xf0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d10d      	bne.n	80074ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2280      	movs	r2, #128	; 0x80
 80074b6:	4393      	bics	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2240      	movs	r2, #64	; 0x40
 80074ca:	4393      	bics	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <TIM_OC2_SetConfig+0xf0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_OC2_SetConfig+0x9e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <TIM_OC2_SetConfig+0xf4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_OC2_SetConfig+0x9e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a19      	ldr	r2, [pc, #100]	; (8007548 <TIM_OC2_SetConfig+0xf8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_OC2_SetConfig+0x9e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a18      	ldr	r2, [pc, #96]	; (800754c <TIM_OC2_SetConfig+0xfc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d113      	bne.n	8007516 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	4a17      	ldr	r2, [pc, #92]	; (8007550 <TIM_OC2_SetConfig+0x100>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4a16      	ldr	r2, [pc, #88]	; (8007554 <TIM_OC2_SetConfig+0x104>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	621a      	str	r2, [r3, #32]
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b006      	add	sp, #24
 8007536:	bd80      	pop	{r7, pc}
 8007538:	ffff8fff 	.word	0xffff8fff
 800753c:	fffffcff 	.word	0xfffffcff
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40014000 	.word	0x40014000
 8007548:	40014400 	.word	0x40014400
 800754c:	40014800 	.word	0x40014800
 8007550:	fffffbff 	.word	0xfffffbff
 8007554:	fffff7ff 	.word	0xfffff7ff

08007558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	4a35      	ldr	r2, [pc, #212]	; (800763c <TIM_OC3_SetConfig+0xe4>)
 8007568:	401a      	ands	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2270      	movs	r2, #112	; 0x70
 8007584:	4393      	bics	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2203      	movs	r2, #3
 800758c:	4393      	bics	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4a28      	ldr	r2, [pc, #160]	; (8007640 <TIM_OC3_SetConfig+0xe8>)
 800759e:	4013      	ands	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a24      	ldr	r2, [pc, #144]	; (8007644 <TIM_OC3_SetConfig+0xec>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10d      	bne.n	80075d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4a23      	ldr	r2, [pc, #140]	; (8007648 <TIM_OC3_SetConfig+0xf0>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <TIM_OC3_SetConfig+0xf4>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a1b      	ldr	r2, [pc, #108]	; (8007644 <TIM_OC3_SetConfig+0xec>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <TIM_OC3_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <TIM_OC3_SetConfig+0xf8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <TIM_OC3_SetConfig+0x9a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <TIM_OC3_SetConfig+0xfc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <TIM_OC3_SetConfig+0x9a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <TIM_OC3_SetConfig+0x100>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d113      	bne.n	800761a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	4a19      	ldr	r2, [pc, #100]	; (800765c <TIM_OC3_SetConfig+0x104>)
 80075f6:	4013      	ands	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4a18      	ldr	r2, [pc, #96]	; (8007660 <TIM_OC3_SetConfig+0x108>)
 80075fe:	4013      	ands	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	621a      	str	r2, [r3, #32]
}
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b006      	add	sp, #24
 800763a:	bd80      	pop	{r7, pc}
 800763c:	fffffeff 	.word	0xfffffeff
 8007640:	fffffdff 	.word	0xfffffdff
 8007644:	40012c00 	.word	0x40012c00
 8007648:	fffff7ff 	.word	0xfffff7ff
 800764c:	fffffbff 	.word	0xfffffbff
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800
 800765c:	ffffefff 	.word	0xffffefff
 8007660:	ffffdfff 	.word	0xffffdfff

08007664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	4a28      	ldr	r2, [pc, #160]	; (8007714 <TIM_OC4_SetConfig+0xb0>)
 8007674:	401a      	ands	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <TIM_OC4_SetConfig+0xb4>)
 8007690:	4013      	ands	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4a21      	ldr	r2, [pc, #132]	; (800771c <TIM_OC4_SetConfig+0xb8>)
 8007698:	4013      	ands	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4a1d      	ldr	r2, [pc, #116]	; (8007720 <TIM_OC4_SetConfig+0xbc>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	031b      	lsls	r3, r3, #12
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a19      	ldr	r2, [pc, #100]	; (8007724 <TIM_OC4_SetConfig+0xc0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00b      	beq.n	80076dc <TIM_OC4_SetConfig+0x78>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <TIM_OC4_SetConfig+0xc4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d007      	beq.n	80076dc <TIM_OC4_SetConfig+0x78>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a17      	ldr	r2, [pc, #92]	; (800772c <TIM_OC4_SetConfig+0xc8>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_OC4_SetConfig+0x78>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a16      	ldr	r2, [pc, #88]	; (8007730 <TIM_OC4_SetConfig+0xcc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d109      	bne.n	80076f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	4a15      	ldr	r2, [pc, #84]	; (8007734 <TIM_OC4_SetConfig+0xd0>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	019b      	lsls	r3, r3, #6
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	621a      	str	r2, [r3, #32]
}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	46bd      	mov	sp, r7
 800770e:	b006      	add	sp, #24
 8007710:	bd80      	pop	{r7, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	ffffefff 	.word	0xffffefff
 8007718:	ffff8fff 	.word	0xffff8fff
 800771c:	fffffcff 	.word	0xfffffcff
 8007720:	ffffdfff 	.word	0xffffdfff
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40014000 	.word	0x40014000
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800
 8007734:	ffffbfff 	.word	0xffffbfff

08007738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	221f      	movs	r2, #31
 8007748:	4013      	ands	r3, r2
 800774a:	2201      	movs	r2, #1
 800774c:	409a      	lsls	r2, r3
 800774e:	0013      	movs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	43d2      	mvns	r2, r2
 800775a:	401a      	ands	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	211f      	movs	r1, #31
 8007768:	400b      	ands	r3, r1
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	4099      	lsls	r1, r3
 800776e:	000b      	movs	r3, r1
 8007770:	431a      	orrs	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	46bd      	mov	sp, r7
 800777a:	b006      	add	sp, #24
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	223c      	movs	r2, #60	; 0x3c
 800778e:	5c9b      	ldrb	r3, [r3, r2]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007794:	2302      	movs	r3, #2
 8007796:	e047      	b.n	8007828 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	223c      	movs	r2, #60	; 0x3c
 800779c:	2101      	movs	r1, #1
 800779e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	223d      	movs	r2, #61	; 0x3d
 80077a4:	2102      	movs	r1, #2
 80077a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2270      	movs	r2, #112	; 0x70
 80077bc:	4393      	bics	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a16      	ldr	r2, [pc, #88]	; (8007830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00f      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	2380      	movs	r3, #128	; 0x80
 80077e2:	05db      	lsls	r3, r3, #23
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d009      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a11      	ldr	r2, [pc, #68]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a10      	ldr	r2, [pc, #64]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d10c      	bne.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2280      	movs	r2, #128	; 0x80
 8007800:	4393      	bics	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	4313      	orrs	r3, r2
 800780c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	223d      	movs	r2, #61	; 0x3d
 800781a:	2101      	movs	r1, #1
 800781c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	223c      	movs	r2, #60	; 0x3c
 8007822:	2100      	movs	r1, #0
 8007824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	0018      	movs	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	b004      	add	sp, #16
 800782e:	bd80      	pop	{r7, pc}
 8007830:	40012c00 	.word	0x40012c00
 8007834:	40000400 	.word	0x40000400
 8007838:	40014000 	.word	0x40014000

0800783c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007844:	46c0      	nop			; (mov r8, r8)
 8007846:	46bd      	mov	sp, r7
 8007848:	b002      	add	sp, #8
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b002      	add	sp, #8
 800785a:	bd80      	pop	{r7, pc}

0800785c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <USB_DisableGlobalInt+0x30>)
 8007866:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2240      	movs	r2, #64	; 0x40
 800786c:	5a9b      	ldrh	r3, [r3, r2]
 800786e:	b29b      	uxth	r3, r3
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	b292      	uxth	r2, r2
 8007874:	43d2      	mvns	r2, r2
 8007876:	b292      	uxth	r2, r2
 8007878:	4013      	ands	r3, r2
 800787a:	b299      	uxth	r1, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2240      	movs	r2, #64	; 0x40
 8007880:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	0018      	movs	r0, r3
 8007886:	46bd      	mov	sp, r7
 8007888:	b004      	add	sp, #16
 800788a:	bd80      	pop	{r7, pc}
 800788c:	0000bf80 	.word	0x0000bf80

08007890 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007890:	b084      	sub	sp, #16
 8007892:	b590      	push	{r4, r7, lr}
 8007894:	46c6      	mov	lr, r8
 8007896:	b500      	push	{lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	2004      	movs	r0, #4
 80078a0:	2410      	movs	r4, #16
 80078a2:	46a4      	mov	ip, r4
 80078a4:	2408      	movs	r4, #8
 80078a6:	46a0      	mov	r8, r4
 80078a8:	44b8      	add	r8, r7
 80078aa:	44c4      	add	ip, r8
 80078ac:	4460      	add	r0, ip
 80078ae:	6001      	str	r1, [r0, #0]
 80078b0:	6042      	str	r2, [r0, #4]
 80078b2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2240      	movs	r2, #64	; 0x40
 80078b8:	2101      	movs	r1, #1
 80078ba:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2240      	movs	r2, #64	; 0x40
 80078c0:	2100      	movs	r1, #0
 80078c2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2244      	movs	r2, #68	; 0x44
 80078c8:	2100      	movs	r1, #0
 80078ca:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2250      	movs	r2, #80	; 0x50
 80078d0:	2100      	movs	r1, #0
 80078d2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	0018      	movs	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	b002      	add	sp, #8
 80078dc:	bc80      	pop	{r7}
 80078de:	46b8      	mov	r8, r7
 80078e0:	bc90      	pop	{r4, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	b004      	add	sp, #16
 80078e6:	4718      	bx	r3

080078e8 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>:
  DataModule(uint32_t can_id, uint16_t telem_id, uint32_t size, uint16_t instance_id = 0, bool is_ext_id = false, bool is_rtr = false):
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	1dbb      	adds	r3, r7, #6
 80078f6:	801a      	strh	r2, [r3, #0]
    can_id_(can_id), telem_id_(telem_id), size_(size), instance_id_(instance_id), is_ext_id_(is_ext_id), is_rtr_(is_rtr)
 80078f8:	4a1b      	ldr	r2, [pc, #108]	; (8007968 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x80>)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	605a      	str	r2, [r3, #4]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	1dba      	adds	r2, r7, #6
 8007908:	8812      	ldrh	r2, [r2, #0]
 800790a:	811a      	strh	r2, [r3, #8]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	2318      	movs	r3, #24
 8007916:	18fb      	adds	r3, r7, r3
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	8213      	strh	r3, [r2, #16]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	221c      	movs	r2, #28
 8007920:	18ba      	adds	r2, r7, r2
 8007922:	7812      	ldrb	r2, [r2, #0]
 8007924:	749a      	strb	r2, [r3, #18]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2220      	movs	r2, #32
 800792a:	18ba      	adds	r2, r7, r2
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	74da      	strb	r2, [r3, #19]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a0e      	ldr	r2, [pc, #56]	; (800796c <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb+0x84>)
 8007934:	669a      	str	r2, [r3, #104]	; 0x68
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	66da      	str	r2, [r3, #108]	; 0x6c
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3318      	adds	r3, #24
 8007940:	001a      	movs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	671a      	str	r2, [r3, #112]	; 0x70
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2250      	movs	r2, #80	; 0x50
 800794a:	675a      	str	r2, [r3, #116]	; 0x74
    mutex_id_ = osMutexNew(&mutex_attributes_);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3368      	adds	r3, #104	; 0x68
 8007950:	0018      	movs	r0, r3
 8007952:	f006 ff9b 	bl	800e88c <osMutexNew>
 8007956:	0002      	movs	r2, r0
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	615a      	str	r2, [r3, #20]
  };
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	0018      	movs	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	b004      	add	sp, #16
 8007964:	bd80      	pop	{r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	08014130 	.word	0x08014130
 800796c:	08013284 	.word	0x08013284

08007970 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em>:
#include <Mitsuba.hpp>

namespace SolarGators {
namespace DataModules {

MitsubaRequest::MitsubaRequest(uint32_t can_id):
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af04      	add	r7, sp, #16
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
    DataModule(can_id, 0, Request_Size, 0, true)
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	9302      	str	r3, [sp, #8]
 8007982:	2301      	movs	r3, #1
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	2300      	movs	r3, #0
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	2301      	movs	r3, #1
 800798c:	2200      	movs	r2, #0
 800798e:	f7ff ffab 	bl	80078e8 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 8007992:	4a04      	ldr	r2, [pc, #16]	; (80079a4 <_ZN11SolarGators11DataModules14MitsubaRequestC1Em+0x34>)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
{ }
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	0018      	movs	r0, r3
 800799c:	46bd      	mov	sp, r7
 800799e:	b002      	add	sp, #8
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	08014160 	.word	0x08014160

080079a8 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>:

MitsubaRequest::~MitsubaRequest()
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	4a05      	ldr	r2, [pc, #20]	; (80079c8 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev+0x20>)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7fb fda1 	bl	8003500 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	08014160 	.word	0x08014160

080079cc <_ZN11SolarGators11DataModules14MitsubaRequestD0Ev>:
MitsubaRequest::~MitsubaRequest()
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
{ }
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	0018      	movs	r0, r3
 80079d8:	f7ff ffe6 	bl	80079a8 <_ZN11SolarGators11DataModules14MitsubaRequestD1Ev>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	217c      	movs	r1, #124	; 0x7c
 80079e0:	0018      	movs	r0, r3
 80079e2:	f00a fa53 	bl	8011e8c <_ZdlPvj>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	0018      	movs	r0, r3
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b002      	add	sp, #8
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <_ZN11SolarGators11DataModules14MitsubaRequest19SetRequestAllFramesEv>:
  requestFrame1 = false;
  requestFrame2 = false;
}

void MitsubaRequest::SetRequestAllFrames()
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  requestFrame0 = true;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2278      	movs	r2, #120	; 0x78
 80079fc:	2101      	movs	r1, #1
 80079fe:	5499      	strb	r1, [r3, r2]
  requestFrame1 = true;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2279      	movs	r2, #121	; 0x79
 8007a04:	2101      	movs	r1, #1
 8007a06:	5499      	strb	r1, [r3, r2]
  requestFrame2 = true;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	227a      	movs	r2, #122	; 0x7a
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	5499      	strb	r1, [r3, r2]
}
 8007a10:	46c0      	nop			; (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b002      	add	sp, #8
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <_ZNK11SolarGators11DataModules14MitsubaRequest11ToByteArrayEPh>:

void MitsubaRequest::ToByteArray(uint8_t* buff) const
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  buff[0] = 0;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame0) << 0;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	2178      	movs	r1, #120	; 0x78
 8007a30:	5c52      	ldrb	r2, [r2, r1]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame1) << 1;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b25a      	sxtb	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2179      	movs	r1, #121	; 0x79
 8007a44:	5c5b      	ldrb	r3, [r3, r1]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	b25b      	sxtb	r3, r3
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(requestFrame2) << 2;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b25a      	sxtb	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	217a      	movs	r1, #122	; 0x7a
 8007a5e:	5c5b      	ldrb	r3, [r3, r1]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	b25b      	sxtb	r3, r3
 8007a64:	4313      	orrs	r3, r2
 8007a66:	b25b      	sxtb	r3, r3
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	701a      	strb	r2, [r3, #0]
}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b002      	add	sp, #8
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <_ZN11SolarGators11DataModules14MitsubaRequest13FromByteArrayEPh>:
void MitsubaRequest::FromByteArray(uint8_t* buff)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  requestFrame0 = buff[0] & (1 << 0);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	001a      	movs	r2, r3
 8007a86:	2301      	movs	r3, #1
 8007a88:	4013      	ands	r3, r2
 8007a8a:	1e5a      	subs	r2, r3, #1
 8007a8c:	4193      	sbcs	r3, r2
 8007a8e:	b2d9      	uxtb	r1, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2278      	movs	r2, #120	; 0x78
 8007a94:	5499      	strb	r1, [r3, r2]
  requestFrame1 = buff[0] & (1 << 1);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	4193      	sbcs	r3, r2
 8007aa4:	b2d9      	uxtb	r1, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2279      	movs	r2, #121	; 0x79
 8007aaa:	5499      	strb	r1, [r3, r2]
  requestFrame2 = buff[0] & (1 << 2);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	001a      	movs	r2, r3
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	1e5a      	subs	r2, r3, #1
 8007ab8:	4193      	sbcs	r3, r2
 8007aba:	b2d9      	uxtb	r1, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	227a      	movs	r2, #122	; 0x7a
 8007ac0:	5499      	strb	r1, [r3, r2]
}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b002      	add	sp, #8
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt>:

MitsubaRx0::MitsubaRx0(uint32_t can_id, uint16_t telem_id):
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af04      	add	r7, sp, #16
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	1dbb      	adds	r3, r7, #6
 8007ad8:	801a      	strh	r2, [r3, #0]
    DataModule(can_id, telem_id, Rx0_Size, 0, true), battVoltage(0),battCurrent(0),
    battCurrentDir(false),motorCurrentPkAvg(0),FETtemp(0),
    motorRPM(0),PWMDuty(0),LeadAngle(0)
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	1dbb      	adds	r3, r7, #6
 8007ade:	881a      	ldrh	r2, [r3, #0]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9301      	str	r3, [sp, #4]
 8007aea:	2300      	movs	r3, #0
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	2308      	movs	r3, #8
 8007af0:	f7ff fefa 	bl	80078e8 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 8007af4:	4a13      	ldr	r2, [pc, #76]	; (8007b44 <_ZN11SolarGators11DataModules10MitsubaRx0C1Emt+0x78>)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2278      	movs	r2, #120	; 0x78
 8007afe:	2100      	movs	r1, #0
 8007b00:	5299      	strh	r1, [r3, r2]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	227a      	movs	r2, #122	; 0x7a
 8007b06:	2100      	movs	r1, #0
 8007b08:	5299      	strh	r1, [r3, r2]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	227c      	movs	r2, #124	; 0x7c
 8007b0e:	2100      	movs	r1, #0
 8007b10:	5499      	strb	r1, [r3, r2]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	227e      	movs	r2, #126	; 0x7e
 8007b16:	2100      	movs	r1, #0
 8007b18:	5299      	strh	r1, [r3, r2]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2280      	movs	r2, #128	; 0x80
 8007b1e:	2100      	movs	r1, #0
 8007b20:	5499      	strb	r1, [r3, r2]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2282      	movs	r2, #130	; 0x82
 8007b26:	2100      	movs	r1, #0
 8007b28:	5299      	strh	r1, [r3, r2]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2284      	movs	r2, #132	; 0x84
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5299      	strh	r1, [r3, r2]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2286      	movs	r2, #134	; 0x86
 8007b36:	2100      	movs	r1, #0
 8007b38:	5499      	strb	r1, [r3, r2]
{ }
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b004      	add	sp, #16
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	08014148 	.word	0x08014148

08007b48 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>:

MitsubaRx0::~MitsubaRx0()
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	4a05      	ldr	r2, [pc, #20]	; (8007b68 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev+0x20>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f7fb fcd1 	bl	8003500 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
{ }
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b002      	add	sp, #8
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	08014148 	.word	0x08014148

08007b6c <_ZN11SolarGators11DataModules10MitsubaRx0D0Ev>:
MitsubaRx0::~MitsubaRx0()
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
{ }
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	0018      	movs	r0, r3
 8007b78:	f7ff ffe6 	bl	8007b48 <_ZN11SolarGators11DataModules10MitsubaRx0D1Ev>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2188      	movs	r1, #136	; 0x88
 8007b80:	0018      	movs	r0, r3
 8007b82:	f00a f983 	bl	8011e8c <_ZdlPvj>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	0018      	movs	r0, r3
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b002      	add	sp, #8
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <_ZNK11SolarGators11DataModules10MitsubaRx011ToByteArrayEPh>:
{
  return static_cast<float>(LeadAngle) / 2.0; // 0.5deg/LSB
}
// Converter Functions
void MitsubaRx0::ToByteArray(uint8_t* buff) const
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]

  buff[0] = 0;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
  buff[0] |= static_cast<uint8_t>(battVoltage);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2178      	movs	r1, #120	; 0x78
 8007ba8:	5a5b      	ldrh	r3, [r3, r1]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	4313      	orrs	r3, r2
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	701a      	strb	r2, [r3, #0]

  buff[1] = 0;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(battVoltage >> 8);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	7819      	ldrb	r1, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2278      	movs	r2, #120	; 0x78
 8007bc6:	5a9b      	ldrh	r3, [r3, r2]
 8007bc8:	121b      	asrs	r3, r3, #8
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
  buff[1] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrent) << 2);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	7819      	ldrb	r1, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	227a      	movs	r2, #122	; 0x7a
 8007be0:	5a9b      	ldrh	r3, [r3, r2]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	430a      	orrs	r2, r1
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]

  buff[2] = 0;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(battCurrent >> 6);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	7819      	ldrb	r1, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	227a      	movs	r2, #122	; 0x7a
 8007c04:	5a9b      	ldrh	r3, [r3, r2]
 8007c06:	119b      	asrs	r3, r3, #6
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(static_cast<uint32_t>(battCurrentDir) << 3);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	3302      	adds	r3, #2
 8007c18:	7819      	ldrb	r1, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	227c      	movs	r2, #124	; 0x7c
 8007c1e:	5c9b      	ldrb	r3, [r3, r2]
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	3302      	adds	r3, #2
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
  buff[2] |= static_cast<uint8_t>(motorCurrentPkAvg << 4);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	3302      	adds	r3, #2
 8007c32:	7819      	ldrb	r1, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	227e      	movs	r2, #126	; 0x7e
 8007c38:	5a9b      	ldrh	r3, [r3, r2]
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	3302      	adds	r3, #2
 8007c44:	430a      	orrs	r2, r1
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]

  buff[3] = 0;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	3303      	adds	r3, #3
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(motorCurrentPkAvg >> 4);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	3303      	adds	r3, #3
 8007c56:	7819      	ldrb	r1, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	227e      	movs	r2, #126	; 0x7e
 8007c5c:	5a9b      	ldrh	r3, [r3, r2]
 8007c5e:	111b      	asrs	r3, r3, #4
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	3303      	adds	r3, #3
 8007c66:	430a      	orrs	r2, r1
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	701a      	strb	r2, [r3, #0]
  buff[3] |= static_cast<uint8_t>(static_cast<uint32_t>(FETtemp) << 6);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	3303      	adds	r3, #3
 8007c70:	7819      	ldrb	r1, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2280      	movs	r2, #128	; 0x80
 8007c76:	5c9b      	ldrb	r3, [r3, r2]
 8007c78:	019b      	lsls	r3, r3, #6
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	3303      	adds	r3, #3
 8007c80:	430a      	orrs	r2, r1
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]


  uint32_t convMotorRPM = motorRPM * 1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2282      	movs	r2, #130	; 0x82
 8007c8a:	5a9b      	ldrh	r3, [r3, r2]
 8007c8c:	60fb      	str	r3, [r7, #12]
  buff[4] = 0;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	3304      	adds	r3, #4
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
  buff[4] |= static_cast<uint8_t>(FETtemp >> 2);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	7819      	ldrb	r1, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2280      	movs	r2, #128	; 0x80
 8007ca0:	5c9b      	ldrb	r3, [r3, r2]
 8007ca2:	109b      	asrs	r3, r3, #2
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	430a      	orrs	r2, r1
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]
  buff[4] |= (static_cast<uint32_t>(convMotorRPM) & 0x1F) << 3;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	7819      	ldrb	r1, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	701a      	strb	r2, [r3, #0]

  buff[5] = 0;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	3305      	adds	r3, #5
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint32_t>(convMotorRPM) & 0xFE0) >> 5;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	3305      	adds	r3, #5
 8007cd4:	7819      	ldrb	r1, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	227f      	movs	r2, #127	; 0x7f
 8007cde:	4013      	ands	r3, r2
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3305      	adds	r3, #5
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	701a      	strb	r2, [r3, #0]
  buff[5] |= (static_cast<uint8_t>(PWMDuty << 7));
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	3305      	adds	r3, #5
 8007cf0:	7819      	ldrb	r1, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2284      	movs	r2, #132	; 0x84
 8007cf6:	5a9b      	ldrh	r3, [r3, r2]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	01db      	lsls	r3, r3, #7
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	3305      	adds	r3, #5
 8007d02:	430a      	orrs	r2, r1
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]

  buff[6] = 0;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	3306      	adds	r3, #6
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
  buff[6] |= static_cast<uint8_t>(PWMDuty >> 1);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	3306      	adds	r3, #6
 8007d14:	7819      	ldrb	r1, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2284      	movs	r2, #132	; 0x84
 8007d1a:	5a9b      	ldrh	r3, [r3, r2]
 8007d1c:	105b      	asrs	r3, r3, #1
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	3306      	adds	r3, #6
 8007d24:	430a      	orrs	r2, r1
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]

  buff[7] = 0;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	3307      	adds	r3, #7
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(PWMDuty >> 9);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	3307      	adds	r3, #7
 8007d36:	7819      	ldrb	r1, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2284      	movs	r2, #132	; 0x84
 8007d3c:	5a9b      	ldrh	r3, [r3, r2]
 8007d3e:	125b      	asrs	r3, r3, #9
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	3307      	adds	r3, #7
 8007d46:	430a      	orrs	r2, r1
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	701a      	strb	r2, [r3, #0]
  buff[7] |= static_cast<uint8_t>(static_cast<uint32_t>(LeadAngle) << 1);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	3307      	adds	r3, #7
 8007d50:	7819      	ldrb	r1, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2286      	movs	r2, #134	; 0x86
 8007d56:	5c9b      	ldrb	r3, [r3, r2]
 8007d58:	18db      	adds	r3, r3, r3
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	3307      	adds	r3, #7
 8007d60:	430a      	orrs	r2, r1
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]
}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b004      	add	sp, #16
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <_ZN11SolarGators11DataModules10MitsubaRx013FromByteArrayEPh>:

void MitsubaRx0::FromByteArray(uint8_t* buff)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b088      	sub	sp, #32
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  uint32_t preBattVoltage = (static_cast<uint32_t>(buff[1] & 3) << 8) | (buff[0]);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	021a      	lsls	r2, r3, #8
 8007d80:	23c0      	movs	r3, #192	; 0xc0
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4013      	ands	r3, r2
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	61fb      	str	r3, [r7, #28]
  battVoltage = static_cast<uint16_t>(preBattVoltage);
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	b299      	uxth	r1, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2278      	movs	r2, #120	; 0x78
 8007d96:	5299      	strh	r1, [r3, r2]

  uint32_t preBattCurrent = (static_cast<uint32_t>(buff[2] & 7) << 6) | (buff[1] >> 2);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	3302      	adds	r3, #2
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	019a      	lsls	r2, r3, #6
 8007da0:	23e0      	movs	r3, #224	; 0xe0
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	4013      	ands	r3, r2
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	3201      	adds	r2, #1
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	1092      	asrs	r2, r2, #2
 8007dae:	4313      	orrs	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
  battCurrent = static_cast<uint16_t>(preBattCurrent);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	b299      	uxth	r1, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	227a      	movs	r2, #122	; 0x7a
 8007dba:	5299      	strh	r1, [r3, r2]

  battCurrentDir = static_cast<bool>(buff[2] & 8);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	3302      	adds	r3, #2
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	001a      	movs	r2, r3
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	1e5a      	subs	r2, r3, #1
 8007dca:	4193      	sbcs	r3, r2
 8007dcc:	b2d9      	uxtb	r1, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	227c      	movs	r2, #124	; 0x7c
 8007dd2:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorCurrent = static_cast<uint32_t>((buff[3] & 0x3F) << 4) | (buff[2] >> 4);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	3303      	adds	r3, #3
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	001a      	movs	r2, r3
 8007dde:	23fc      	movs	r3, #252	; 0xfc
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4013      	ands	r3, r2
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	3202      	adds	r2, #2
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	1112      	asrs	r2, r2, #4
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]
  motorCurrentPkAvg = static_cast<uint16_t>(preMotorCurrent);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	b299      	uxth	r1, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	227e      	movs	r2, #126	; 0x7e
 8007df8:	5299      	strh	r1, [r3, r2]

  uint32_t preFETtemp = static_cast<uint32_t>((buff[4] & 7) << 2) | (buff[3] >> 6);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	001a      	movs	r2, r3
 8007e04:	231c      	movs	r3, #28
 8007e06:	4013      	ands	r3, r2
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	3203      	adds	r2, #3
 8007e0c:	7812      	ldrb	r2, [r2, #0]
 8007e0e:	1192      	asrs	r2, r2, #6
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
  FETtemp = static_cast<uint8_t>(preFETtemp);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	b2d9      	uxtb	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2280      	movs	r2, #128	; 0x80
 8007e1c:	5499      	strb	r1, [r3, r2]

  uint32_t preMotorRPM = (static_cast<uint32_t>(buff[5] & 0x7F) << 5) | (buff[4] >> 3);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	3305      	adds	r3, #5
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	23fe      	movs	r3, #254	; 0xfe
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	3204      	adds	r2, #4
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	10d2      	asrs	r2, r2, #3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  motorRPM = static_cast<uint16_t>(preMotorRPM);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	b299      	uxth	r1, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2282      	movs	r2, #130	; 0x82
 8007e40:	5299      	strh	r1, [r3, r2]

  uint32_t preDuty = (static_cast<uint32_t>(buff[7] & 1) << 9) | (buff[6] << 1) | (buff[5] >> 7);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	3307      	adds	r3, #7
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	025a      	lsls	r2, r3, #9
 8007e4a:	2380      	movs	r3, #128	; 0x80
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4013      	ands	r3, r2
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	3206      	adds	r2, #6
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	0052      	lsls	r2, r2, #1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	3205      	adds	r2, #5
 8007e5e:	7812      	ldrb	r2, [r2, #0]
 8007e60:	11d2      	asrs	r2, r2, #7
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60bb      	str	r3, [r7, #8]
  PWMDuty = static_cast<uint16_t>(preDuty);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	b299      	uxth	r1, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2284      	movs	r2, #132	; 0x84
 8007e6e:	5299      	strh	r1, [r3, r2]

  LeadAngle = static_cast<uint8_t>((buff[7] >> 1));
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	3307      	adds	r3, #7
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	105b      	asrs	r3, r3, #1
 8007e78:	b2d9      	uxtb	r1, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2286      	movs	r2, #134	; 0x86
 8007e7e:	5499      	strb	r1, [r3, r2]
}
 8007e80:	46c0      	nop			; (mov r8, r8)
 8007e82:	46bd      	mov	sp, r7
 8007e84:	b008      	add	sp, #32
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <_ZN11SolarGators11DataModules11OrionBMSRx0C1Emm>:
#include "OrionBMS.hpp"

namespace SolarGators::DataModules
{
  // BMS Message 0
  OrionBMSRx0::OrionBMSRx0(uint32_t can_id, uint32_t telem_id):
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af04      	add	r7, sp, #16
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
        DataModule(can_id, telem_id, this->Size, 0, false)
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	f7ff fd1d 	bl	80078e8 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 8007eae:	4a04      	ldr	r2, [pc, #16]	; (8007ec0 <_ZN11SolarGators11DataModules11OrionBMSRx0C1Emm+0x38>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	601a      	str	r2, [r3, #0]
  { }
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b004      	add	sp, #16
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	08014178 	.word	0x08014178

08007ec4 <_ZNK11SolarGators11DataModules11OrionBMSRx011ToByteArrayEPh>:

  void OrionBMSRx0::ToByteArray(uint8_t* buff) const
  {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
    buff[0] = low_cell_volt_ >> 8;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2278      	movs	r2, #120	; 0x78
 8007ed2:	5a9b      	ldrh	r3, [r3, r2]
 8007ed4:	121b      	asrs	r3, r3, #8
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	701a      	strb	r2, [r3, #0]
    buff[1] = (low_cell_volt_ & 0x00FF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2278      	movs	r2, #120	; 0x78
 8007ee0:	5a9a      	ldrh	r2, [r3, r2]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
    buff[2] = high_cell_volt_ >> 8;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	227a      	movs	r2, #122	; 0x7a
 8007eee:	5a9b      	ldrh	r3, [r3, r2]
 8007ef0:	121a      	asrs	r2, r3, #8
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]
    buff[3] = (high_cell_volt_ & 0x00FF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	227a      	movs	r2, #122	; 0x7a
 8007efe:	5a9a      	ldrh	r2, [r3, r2]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	3303      	adds	r3, #3
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	701a      	strb	r2, [r3, #0]
    buff[4] = avg_cell_volt_ >> 8;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	227c      	movs	r2, #124	; 0x7c
 8007f0c:	5a9b      	ldrh	r3, [r3, r2]
 8007f0e:	121a      	asrs	r2, r3, #8
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	3304      	adds	r3, #4
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]
    buff[5] = (avg_cell_volt_ & 0x00FF);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	227c      	movs	r2, #124	; 0x7c
 8007f1c:	5a9a      	ldrh	r2, [r3, r2]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	3305      	adds	r3, #5
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
    buff[6] = pack_sum_volt_ >> 8;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	227e      	movs	r2, #126	; 0x7e
 8007f2a:	5a9b      	ldrh	r3, [r3, r2]
 8007f2c:	121a      	asrs	r2, r3, #8
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	3306      	adds	r3, #6
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
    buff[7] = (pack_sum_volt_ & 0x00FF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	227e      	movs	r2, #126	; 0x7e
 8007f3a:	5a9a      	ldrh	r2, [r3, r2]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	3307      	adds	r3, #7
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	701a      	strb	r2, [r3, #0]
  }
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b002      	add	sp, #8
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <_ZN11SolarGators11DataModules11OrionBMSRx013FromByteArrayEPh>:

  void OrionBMSRx0::FromByteArray(uint8_t* buff)
  {
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
    low_cell_volt_   = (static_cast<uint16_t>(buff[0]) << 8) | buff[1];
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	b21a      	sxth	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	b21b      	sxth	r3, r3
 8007f66:	4313      	orrs	r3, r2
 8007f68:	b21b      	sxth	r3, r3
 8007f6a:	b299      	uxth	r1, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2278      	movs	r2, #120	; 0x78
 8007f70:	5299      	strh	r1, [r3, r2]
    high_cell_volt_  = (static_cast<uint16_t>(buff[2]) << 8) | buff[3];
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	3302      	adds	r3, #2
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b21a      	sxth	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	3303      	adds	r3, #3
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	b21b      	sxth	r3, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b21b      	sxth	r3, r3
 8007f88:	b299      	uxth	r1, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	227a      	movs	r2, #122	; 0x7a
 8007f8e:	5299      	strh	r1, [r3, r2]
    avg_cell_volt_   = (static_cast<uint16_t>(buff[4]) << 8) | buff[5];
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	3304      	adds	r3, #4
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	b21a      	sxth	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3305      	adds	r3, #5
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b21b      	sxth	r3, r3
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	b21b      	sxth	r3, r3
 8007fa6:	b299      	uxth	r1, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	227c      	movs	r2, #124	; 0x7c
 8007fac:	5299      	strh	r1, [r3, r2]
    pack_sum_volt_   = (static_cast<uint16_t>(buff[6]) << 8) | buff[7];
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	3306      	adds	r3, #6
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b21a      	sxth	r2, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	3307      	adds	r3, #7
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	b21b      	sxth	r3, r3
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	b21b      	sxth	r3, r3
 8007fc4:	b299      	uxth	r1, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	227e      	movs	r2, #126	; 0x7e
 8007fca:	5299      	strh	r1, [r3, r2]
  }
 8007fcc:	46c0      	nop			; (mov r8, r8)
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b002      	add	sp, #8
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <_ZN11SolarGators11DataModules8SteeringC1Ev>:
  static constexpr uint32_t ID = 1023;
  static constexpr uint32_t SIZE = 0x2;
}
namespace SolarGators::DataModules
{
  Steering::Steering():
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af04      	add	r7, sp, #16
 8007fda:	6078      	str	r0, [r7, #4]
    cruise_enable_(false),
    eco_enable_(true),
    headlights_(false),
    horn_(false),
    reverse_(false),
    cruise_speed_(Min_Cruise_Speed_)
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	491d      	ldr	r1, [pc, #116]	; (8008054 <_ZN11SolarGators11DataModules8SteeringC1Ev+0x80>)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	2302      	movs	r3, #2
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f7ff fc7a 	bl	80078e8 <_ZN11SolarGators11DataModules10DataModuleC1Emtmtbb>
 8007ff4:	4a18      	ldr	r2, [pc, #96]	; (8008058 <_ZN11SolarGators11DataModules8SteeringC1Ev+0x84>)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2278      	movs	r2, #120	; 0x78
 8007ffe:	2100      	movs	r1, #0
 8008000:	5499      	strb	r1, [r3, r2]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2279      	movs	r2, #121	; 0x79
 8008006:	2100      	movs	r1, #0
 8008008:	5499      	strb	r1, [r3, r2]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	227a      	movs	r2, #122	; 0x7a
 800800e:	2100      	movs	r1, #0
 8008010:	5499      	strb	r1, [r3, r2]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	227b      	movs	r2, #123	; 0x7b
 8008016:	2100      	movs	r1, #0
 8008018:	5499      	strb	r1, [r3, r2]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	227c      	movs	r2, #124	; 0x7c
 800801e:	2100      	movs	r1, #0
 8008020:	5499      	strb	r1, [r3, r2]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	227d      	movs	r2, #125	; 0x7d
 8008026:	2101      	movs	r1, #1
 8008028:	5499      	strb	r1, [r3, r2]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	227e      	movs	r2, #126	; 0x7e
 800802e:	2100      	movs	r1, #0
 8008030:	5499      	strb	r1, [r3, r2]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	227f      	movs	r2, #127	; 0x7f
 8008036:	2100      	movs	r1, #0
 8008038:	5499      	strb	r1, [r3, r2]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2280      	movs	r2, #128	; 0x80
 800803e:	2100      	movs	r1, #0
 8008040:	5499      	strb	r1, [r3, r2]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2281      	movs	r2, #129	; 0x81
 8008046:	2100      	movs	r1, #0
 8008048:	5499      	strb	r1, [r3, r2]
  {}
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	b002      	add	sp, #8
 8008052:	bd80      	pop	{r7, pc}
 8008054:	000003ff 	.word	0x000003ff
 8008058:	08014190 	.word	0x08014190

0800805c <_ZN11SolarGators11DataModules8SteeringD1Ev>:
  Steering::~Steering()
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	4a05      	ldr	r2, [pc, #20]	; (800807c <_ZN11SolarGators11DataModules8SteeringD1Ev+0x20>)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0018      	movs	r0, r3
 800806e:	f7fb fa47 	bl	8003500 <_ZN11SolarGators11DataModules10DataModuleD1Ev>
  {}
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	0018      	movs	r0, r3
 8008076:	46bd      	mov	sp, r7
 8008078:	b002      	add	sp, #8
 800807a:	bd80      	pop	{r7, pc}
 800807c:	08014190 	.word	0x08014190

08008080 <_ZN11SolarGators11DataModules8SteeringD0Ev>:
  Steering::~Steering()
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  {}
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	0018      	movs	r0, r3
 800808c:	f7ff ffe6 	bl	800805c <_ZN11SolarGators11DataModules8SteeringD1Ev>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2184      	movs	r1, #132	; 0x84
 8008094:	0018      	movs	r0, r3
 8008096:	f009 fef9 	bl	8011e8c <_ZdlPvj>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b002      	add	sp, #8
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_ZNK11SolarGators11DataModules8Steering17GetLeftTurnStatusEv>:
  bool Steering::GetLeftTurnStatus() const
  {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
    return left_turn_;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2278      	movs	r2, #120	; 0x78
 80080b0:	5c9b      	ldrb	r3, [r3, r2]
  }
 80080b2:	0018      	movs	r0, r3
 80080b4:	46bd      	mov	sp, r7
 80080b6:	b002      	add	sp, #8
 80080b8:	bd80      	pop	{r7, pc}

080080ba <_ZNK11SolarGators11DataModules8Steering18GetRightTurnStatusEv>:
  bool Steering::GetRightTurnStatus() const
  {
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
    return right_turn_;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2279      	movs	r2, #121	; 0x79
 80080c6:	5c9b      	ldrb	r3, [r3, r2]
  }
 80080c8:	0018      	movs	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	b002      	add	sp, #8
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZNK11SolarGators11DataModules8Steering16GetHazardsStatusEv>:
  bool Steering::GetHazardsStatus() const
  {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    return hazards_;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	227a      	movs	r2, #122	; 0x7a
 80080dc:	5c9b      	ldrb	r3, [r3, r2]
  }
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b002      	add	sp, #8
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <_ZNK11SolarGators11DataModules8Steering11ToByteArrayEPh>:
  uint8_t Steering::GetCruiseSpeed() const
  {
    return cruise_speed_;
  }
  void Steering::ToByteArray(uint8_t* buff) const
  {
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
    memset(buff, 0, sizeof(buff));
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2204      	movs	r2, #4
 80080f4:	2100      	movs	r1, #0
 80080f6:	0018      	movs	r0, r3
 80080f8:	f00a f8f0 	bl	80122dc <memset>
    buff[0] |= (static_cast<uint8_t>(left_turn_)     << 0);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	2178      	movs	r1, #120	; 0x78
 8008104:	5c52      	ldrb	r2, [r2, r1]
 8008106:	4313      	orrs	r3, r2
 8008108:	b2da      	uxtb	r2, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(right_turn_)    << 1);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b25a      	sxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2179      	movs	r1, #121	; 0x79
 8008118:	5c5b      	ldrb	r3, [r3, r1]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	b25b      	sxtb	r3, r3
 800811e:	4313      	orrs	r3, r2
 8008120:	b25b      	sxtb	r3, r3
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(hazards_)       << 2);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	b25a      	sxtb	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	217a      	movs	r1, #122	; 0x7a
 8008132:	5c5b      	ldrb	r3, [r3, r1]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	b25b      	sxtb	r3, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	b25b      	sxtb	r3, r3
 800813c:	b2da      	uxtb	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(bps_fault_)     << 3);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b25a      	sxtb	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	217b      	movs	r1, #123	; 0x7b
 800814c:	5c5b      	ldrb	r3, [r3, r1]
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	b25b      	sxtb	r3, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	b25b      	sxtb	r3, r3
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(cruise_enable_) << 4);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b25a      	sxtb	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	217c      	movs	r1, #124	; 0x7c
 8008166:	5c5b      	ldrb	r3, [r3, r1]
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	b25b      	sxtb	r3, r3
 800816c:	4313      	orrs	r3, r2
 800816e:	b25b      	sxtb	r3, r3
 8008170:	b2da      	uxtb	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(eco_enable_)    << 5);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	b25a      	sxtb	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	217d      	movs	r1, #125	; 0x7d
 8008180:	5c5b      	ldrb	r3, [r3, r1]
 8008182:	015b      	lsls	r3, r3, #5
 8008184:	b25b      	sxtb	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b25b      	sxtb	r3, r3
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(headlights_)    << 6);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	b25a      	sxtb	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	217e      	movs	r1, #126	; 0x7e
 800819a:	5c5b      	ldrb	r3, [r3, r1]
 800819c:	019b      	lsls	r3, r3, #6
 800819e:	b25b      	sxtb	r3, r3
 80081a0:	4313      	orrs	r3, r2
 80081a2:	b25b      	sxtb	r3, r3
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	701a      	strb	r2, [r3, #0]
    buff[0] |= (static_cast<uint8_t>(horn_)          << 7);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b25a      	sxtb	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	217f      	movs	r1, #127	; 0x7f
 80081b4:	5c5b      	ldrb	r3, [r3, r1]
 80081b6:	01db      	lsls	r3, r3, #7
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	4313      	orrs	r3, r2
 80081bc:	b25b      	sxtb	r3, r3
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	701a      	strb	r2, [r3, #0]
    buff[1] |= (static_cast<uint8_t>(reverse_)       << 0);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	3301      	adds	r3, #1
 80081c8:	781a      	ldrb	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2180      	movs	r1, #128	; 0x80
 80081ce:	5c5b      	ldrb	r3, [r3, r1]
 80081d0:	0019      	movs	r1, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	430a      	orrs	r2, r1
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	701a      	strb	r2, [r3, #0]
    buff[2] |= cruise_speed_;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	3302      	adds	r3, #2
 80081e0:	7819      	ldrb	r1, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2281      	movs	r2, #129	; 0x81
 80081e6:	5c9a      	ldrb	r2, [r3, r2]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	3302      	adds	r3, #2
 80081ec:	430a      	orrs	r2, r1
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	701a      	strb	r2, [r3, #0]
  }
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b002      	add	sp, #8
 80081f8:	bd80      	pop	{r7, pc}

080081fa <_ZN11SolarGators11DataModules8Steering13FromByteArrayEPh>:
  void Steering::FromByteArray(uint8_t* buff)
  {
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
    left_turn_      = buff[0] & (1 << 0);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	001a      	movs	r2, r3
 800820a:	2301      	movs	r3, #1
 800820c:	4013      	ands	r3, r2
 800820e:	1e5a      	subs	r2, r3, #1
 8008210:	4193      	sbcs	r3, r2
 8008212:	b2d9      	uxtb	r1, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2278      	movs	r2, #120	; 0x78
 8008218:	5499      	strb	r1, [r3, r2]
    right_turn_     = buff[0] & (1 << 1);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	001a      	movs	r2, r3
 8008220:	2302      	movs	r3, #2
 8008222:	4013      	ands	r3, r2
 8008224:	1e5a      	subs	r2, r3, #1
 8008226:	4193      	sbcs	r3, r2
 8008228:	b2d9      	uxtb	r1, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2279      	movs	r2, #121	; 0x79
 800822e:	5499      	strb	r1, [r3, r2]
    hazards_        = buff[0] & (1 << 2);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	001a      	movs	r2, r3
 8008236:	2304      	movs	r3, #4
 8008238:	4013      	ands	r3, r2
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	4193      	sbcs	r3, r2
 800823e:	b2d9      	uxtb	r1, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	227a      	movs	r2, #122	; 0x7a
 8008244:	5499      	strb	r1, [r3, r2]
    bps_fault_      = buff[0] & (1 << 3);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	001a      	movs	r2, r3
 800824c:	2308      	movs	r3, #8
 800824e:	4013      	ands	r3, r2
 8008250:	1e5a      	subs	r2, r3, #1
 8008252:	4193      	sbcs	r3, r2
 8008254:	b2d9      	uxtb	r1, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	227b      	movs	r2, #123	; 0x7b
 800825a:	5499      	strb	r1, [r3, r2]
    cruise_enable_  = buff[0] & (1 << 4);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	001a      	movs	r2, r3
 8008262:	2310      	movs	r3, #16
 8008264:	4013      	ands	r3, r2
 8008266:	1e5a      	subs	r2, r3, #1
 8008268:	4193      	sbcs	r3, r2
 800826a:	b2d9      	uxtb	r1, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	227c      	movs	r2, #124	; 0x7c
 8008270:	5499      	strb	r1, [r3, r2]
    eco_enable_     = buff[0] & (1 << 5);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	001a      	movs	r2, r3
 8008278:	2320      	movs	r3, #32
 800827a:	4013      	ands	r3, r2
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	4193      	sbcs	r3, r2
 8008280:	b2d9      	uxtb	r1, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	227d      	movs	r2, #125	; 0x7d
 8008286:	5499      	strb	r1, [r3, r2]
    headlights_     = buff[0] & (1 << 6);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	001a      	movs	r2, r3
 800828e:	2340      	movs	r3, #64	; 0x40
 8008290:	4013      	ands	r3, r2
 8008292:	1e5a      	subs	r2, r3, #1
 8008294:	4193      	sbcs	r3, r2
 8008296:	b2d9      	uxtb	r1, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	227e      	movs	r2, #126	; 0x7e
 800829c:	5499      	strb	r1, [r3, r2]
    horn_           = buff[0] & (1 << 7);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b25b      	sxtb	r3, r3
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	09db      	lsrs	r3, r3, #7
 80082a8:	b2d9      	uxtb	r1, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	227f      	movs	r2, #127	; 0x7f
 80082ae:	5499      	strb	r1, [r3, r2]
    reverse_        = buff[1] & (1 << 0);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	3301      	adds	r3, #1
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	001a      	movs	r2, r3
 80082b8:	2301      	movs	r3, #1
 80082ba:	4013      	ands	r3, r2
 80082bc:	1e5a      	subs	r2, r3, #1
 80082be:	4193      	sbcs	r3, r2
 80082c0:	b2d9      	uxtb	r1, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2280      	movs	r2, #128	; 0x80
 80082c6:	5499      	strb	r1, [r3, r2]
    cruise_speed_   = buff[2];
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	7899      	ldrb	r1, [r3, #2]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2281      	movs	r2, #129	; 0x81
 80082d0:	5499      	strb	r1, [r3, r2]
  }
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b002      	add	sp, #8
 80082d8:	bd80      	pop	{r7, pc}

080082da <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	425a      	negs	r2, r3
 80082e8:	4153      	adcs	r3, r2
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	0018      	movs	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	b002      	add	sp, #8
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <_ZN3etl5ipool7releaseEPKv>:
    /// Release an object in the pool.
    /// If asserts or exceptions are enabled and the object does not belong to this
    /// pool then an etl::pool_object_not_in_pool is thrown.
    /// \param p_object A pointer to the object to be released.
    //*************************************************************************
    void release(const void* const p_object)
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
    {
      const uintptr_t p = uintptr_t(p_object);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	60fb      	str	r3, [r7, #12]
      release_item((char*)p);
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	0011      	movs	r1, r2
 8008308:	0018      	movs	r0, r3
 800830a:	f000 f875 	bl	80083f8 <_ZN3etl5ipool12release_itemEPc>
    }
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	46bd      	mov	sp, r7
 8008312:	b004      	add	sp, #16
 8008314:	bd80      	pop	{r7, pc}

08008316 <_ZN3etl5ipoolC1EPcmm>:
  protected:

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    ipool(char* p_buffer_, uint32_t item_size_, uint32_t max_size_)
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
 8008322:	603b      	str	r3, [r7, #0]
      : p_buffer(p_buffer_),
      p_next(p_buffer_),
      items_allocated(0),
      items_initialised(0),
      Item_Size(item_size_),
      Max_Size(max_size_)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	605a      	str	r2, [r3, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	609a      	str	r2, [r3, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	60da      	str	r2, [r3, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	611a      	str	r2, [r3, #16]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	615a      	str	r2, [r3, #20]
    {
    }
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	0018      	movs	r0, r3
 800834c:	46bd      	mov	sp, r7
 800834e:	b004      	add	sp, #16
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <_ZN3etl5ipool13allocate_itemEv>:
  private:

    //*************************************************************************
    /// Allocate an item from the pool.
    //*************************************************************************
    char* allocate_item()
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
    {
      char* p_value = ETL_NULLPTR;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]

      // Any free space left?
      if (items_allocated < Max_Size)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	429a      	cmp	r2, r3
 800836a:	d233      	bcs.n	80083d4 <_ZN3etl5ipool13allocate_itemEv+0x80>
      {
        // Initialise another one if necessary.
        if (items_initialised < Max_Size)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	429a      	cmp	r2, r3
 8008376:	d215      	bcs.n	80083a4 <_ZN3etl5ipool13allocate_itemEv+0x50>
        {
          char* p = p_buffer + (items_initialised * Item_Size);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68d9      	ldr	r1, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	434b      	muls	r3, r1
 8008386:	18d3      	adds	r3, r2, r3
 8008388:	613b      	str	r3, [r7, #16]
          char* np = p + Item_Size;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	18d3      	adds	r3, r2, r3
 8008392:	60fb      	str	r3, [r7, #12]
          *reinterpret_cast<char**>(p) = np;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	601a      	str	r2, [r3, #0]
          ++items_initialised;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	60da      	str	r2, [r3, #12]
        }

        // Get the address of new allocated item.
        p_value = p_next;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	617b      	str	r3, [r7, #20]

        ++items_allocated;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	609a      	str	r2, [r3, #8]
        if (items_allocated < Max_Size)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d205      	bcs.n	80083cc <_ZN3etl5ipool13allocate_itemEv+0x78>
        {
          // Set up the pointer to the next free item
          p_next = *reinterpret_cast<char**>(p_next);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]
 80083ca:	e00a      	b.n	80083e2 <_ZN3etl5ipool13allocate_itemEv+0x8e>
        }
        else
        {
          // No more left!
          p_next = ETL_NULLPTR;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	605a      	str	r2, [r3, #4]
 80083d2:	e006      	b.n	80083e2 <_ZN3etl5ipool13allocate_itemEv+0x8e>
        }
      }
      else
      {
        ETL_ASSERT(false, ETL_ERROR(pool_no_allocation));
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <_ZN3etl5ipool13allocate_itemEv+0x98>)
 80083d6:	4a06      	ldr	r2, [pc, #24]	; (80083f0 <_ZN3etl5ipool13allocate_itemEv+0x9c>)
 80083d8:	2172      	movs	r1, #114	; 0x72
 80083da:	31ff      	adds	r1, #255	; 0xff
 80083dc:	4805      	ldr	r0, [pc, #20]	; (80083f4 <_ZN3etl5ipool13allocate_itemEv+0xa0>)
 80083de:	f009 fdef 	bl	8011fc0 <__assert_func>
      }

      return p_value;
 80083e2:	697b      	ldr	r3, [r7, #20]
    }
 80083e4:	0018      	movs	r0, r3
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b006      	add	sp, #24
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	08013288 	.word	0x08013288
 80083f0:	08013290 	.word	0x08013290
 80083f4:	080132b4 	.word	0x080132b4

080083f8 <_ZN3etl5ipool12release_itemEPc>:

    //*************************************************************************
    /// Release an item back to the pool.
    //*************************************************************************
    void release_item(char* p_value)
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
    {
      // Does it belong to us?
      ETL_ASSERT(is_item_in_pool(p_value), ETL_ERROR(pool_object_not_in_pool));
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	0011      	movs	r1, r2
 8008408:	0018      	movs	r0, r3
 800840a:	f000 f829 	bl	8008460 <_ZNK3etl5ipool15is_item_in_poolEPKc>
 800840e:	1e03      	subs	r3, r0, #0
 8008410:	d106      	bne.n	8008420 <_ZN3etl5ipool12release_itemEPc+0x28>
 8008412:	4b10      	ldr	r3, [pc, #64]	; (8008454 <_ZN3etl5ipool12release_itemEPc+0x5c>)
 8008414:	4a10      	ldr	r2, [pc, #64]	; (8008458 <_ZN3etl5ipool12release_itemEPc+0x60>)
 8008416:	217e      	movs	r1, #126	; 0x7e
 8008418:	31ff      	adds	r1, #255	; 0xff
 800841a:	4810      	ldr	r0, [pc, #64]	; (800845c <_ZN3etl5ipool12release_itemEPc+0x64>)
 800841c:	f009 fdd0 	bl	8011fc0 <__assert_func>

      if (p_next != ETL_NULLPTR)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <_ZN3etl5ipool12release_itemEPc+0x3c>
      {
        // Point it to the current free item.
        *(uintptr_t*)p_value = reinterpret_cast<uintptr_t>(p_next);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	001a      	movs	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e002      	b.n	800843a <_ZN3etl5ipool12release_itemEPc+0x42>
      }
      else
      {
        // This is the only free item.
        *((uintptr_t*)p_value) = 0;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
      }

      p_next = p_value;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]

      --items_allocated;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]
    }
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	46bd      	mov	sp, r7
 800844e:	b002      	add	sp, #8
 8008450:	bd80      	pop	{r7, pc}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	0801331c 	.word	0x0801331c
 8008458:	08013338 	.word	0x08013338
 800845c:	080132b4 	.word	0x080132b4

08008460 <_ZNK3etl5ipool15is_item_in_poolEPKc>:

    //*************************************************************************
    /// Check if the item belongs to this pool.
    //*************************************************************************
    bool is_item_in_pool(const char* p) const
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
    {
      // Within the range of the buffer?
      intptr_t distance = p - p_buffer;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	60fb      	str	r3, [r7, #12]
      bool is_within_range = (distance >= 0) && (distance <= intptr_t((Item_Size * Max_Size) - Item_Size));
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	db0b      	blt.n	8008492 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x32>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	1e5a      	subs	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	4353      	muls	r3, r2
 8008486:	001a      	movs	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4293      	cmp	r3, r2
 800848c:	dc01      	bgt.n	8008492 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x32>
 800848e:	2201      	movs	r2, #1
 8008490:	e000      	b.n	8008494 <_ZNK3etl5ipool15is_item_in_poolEPKc+0x34>
 8008492:	2200      	movs	r2, #0
 8008494:	240b      	movs	r4, #11
 8008496:	193b      	adds	r3, r7, r4
 8008498:	701a      	strb	r2, [r3, #0]

      // Modulus and division can be slow on some architectures, so only do this in debug.
#if defined(ETL_DEBUG)
      // Is the address on a valid object boundary?
      bool is_valid_address = ((distance % Item_Size) == 0);
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	0019      	movs	r1, r3
 80084a2:	0010      	movs	r0, r2
 80084a4:	f7f7 fec0 	bl	8000228 <__aeabi_uidivmod>
 80084a8:	000b      	movs	r3, r1
 80084aa:	001a      	movs	r2, r3
 80084ac:	200a      	movs	r0, #10
 80084ae:	183b      	adds	r3, r7, r0
 80084b0:	4251      	negs	r1, r2
 80084b2:	414a      	adcs	r2, r1
 80084b4:	701a      	strb	r2, [r3, #0]
#else
      bool is_valid_address = true;
#endif

      return is_within_range && is_valid_address;
 80084b6:	193b      	adds	r3, r7, r4
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6a>
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6a>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <_ZNK3etl5ipool15is_item_in_poolEPKc+0x6c>
 80084ca:	2300      	movs	r3, #0
    }
 80084cc:	0018      	movs	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b005      	add	sp, #20
 80084d2:	bd90      	pop	{r4, r7, pc}

080084d4 <_ZN3etl5ipoolD1Ev>:
    virtual ~ipool()
    {
    }
#else
  protected:
    ~ipool()
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
    {
    }
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	0018      	movs	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	b002      	add	sp, #8
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <_ZNK3etl8map_base4fullEv>:
    }

    //*************************************************************************
    /// Checks to see if the map is full.
    //*************************************************************************
    bool full() const
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
    {
      return current_size == CAPACITY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	425a      	negs	r2, r3
 80084fa:	4153      	adcs	r3, r2
 80084fc:	b2db      	uxtb	r3, r3
    }
 80084fe:	0018      	movs	r0, r3
 8008500:	46bd      	mov	sp, r7
 8008502:	b002      	add	sp, #8
 8008504:	bd80      	pop	{r7, pc}

08008506 <_ZN3etl8map_base4Node12mark_as_leafEv>:
      }

      //***********************************************************************
      /// Marks the node as a leaf.
      //***********************************************************************
      void mark_as_leaf()
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
      {
        weight = uint_least8_t(kNeither);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2202      	movs	r2, #2
 8008512:	721a      	strb	r2, [r3, #8]
        dir = uint_least8_t(kNeither);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	725a      	strb	r2, [r3, #9]
        children[0] = ETL_NULLPTR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
        children[1] = ETL_NULLPTR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	605a      	str	r2, [r3, #4]
      }
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	46bd      	mov	sp, r7
 800852a:	b002      	add	sp, #8
 800852c:	bd80      	pop	{r7, pc}

0800852e <_ZN3etl8map_baseC1Ej>:
    };

    //*************************************************************************
    /// The constructor that is called from derived classes.
    //*************************************************************************
    map_base(size_type max_size_)
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
      : current_size(0)
      , CAPACITY(max_size_)
      , root_node(ETL_NULLPTR)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	605a      	str	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	609a      	str	r2, [r3, #8]

    {
    }
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	0018      	movs	r0, r3
 800854e:	46bd      	mov	sp, r7
 8008550:	b002      	add	sp, #8
 8008552:	bd80      	pop	{r7, pc}

08008554 <_ZN3etl8map_baseD1Ev>:

    //*************************************************************************
    /// Destructor
    //*************************************************************************
    ~map_base()
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
    {
    }
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0018      	movs	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	b002      	add	sp, #8
 8008564:	bd80      	pop	{r7, pc}

08008566 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>:

    //*************************************************************************
    /// Balance the critical node at the position provided as needed
    //*************************************************************************
    void balance_node(Node*& critical_node)
 8008566:	b590      	push	{r4, r7, lr}
 8008568:	b085      	sub	sp, #20
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
    {
      // Step 1: Update weights for all children of the critical node up to the
      // newly inserted node. This step is costly (in terms of traversing nodes
      // multiple times during insertion) but doesn't require as much recursion
      Node* weight_node = critical_node->children[critical_node->dir];
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	7a5b      	ldrb	r3, [r3, #9]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	589b      	ldr	r3, [r3, r2]
 800857e:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d01e      	beq.n	80085c4 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5e>
      {
        // Keep going until we reach a terminal node (dir == kNeither)
        if (uint_least8_t(kNeither) != weight_node->dir)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	7a5b      	ldrb	r3, [r3, #9]
 800858a:	2b02      	cmp	r3, #2
 800858c:	d019      	beq.n	80085c2 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x5c>
        {
          // Does this insert balance the previous weight factor value?
          if (weight_node->weight == 1 - weight_node->dir)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	7a1b      	ldrb	r3, [r3, #8]
 8008592:	001a      	movs	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	7a5b      	ldrb	r3, [r3, #9]
 8008598:	0019      	movs	r1, r3
 800859a:	2301      	movs	r3, #1
 800859c:	1a5b      	subs	r3, r3, r1
 800859e:	429a      	cmp	r2, r3
 80085a0:	d103      	bne.n	80085aa <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x44>
          {
            weight_node->weight = uint_least8_t(kNeither);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2202      	movs	r2, #2
 80085a6:	721a      	strb	r2, [r3, #8]
 80085a8:	e003      	b.n	80085b2 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x4c>
          }
          else
          {
            weight_node->weight = weight_node->dir;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	7a5a      	ldrb	r2, [r3, #9]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	721a      	strb	r2, [r3, #8]
          }

          // Update weight factor node to point to next node
          weight_node = weight_node->children[weight_node->dir];
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	7a5b      	ldrb	r3, [r3, #9]
 80085b6:	001a      	movs	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	0092      	lsls	r2, r2, #2
 80085bc:	58d3      	ldr	r3, [r2, r3]
 80085be:	60fb      	str	r3, [r7, #12]
      while (weight_node)
 80085c0:	e7de      	b.n	8008580 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x1a>
        }
        else
        {
          // Stop loop, terminal node found
          break;
 80085c2:	46c0      	nop			; (mov r8, r8)
        }
      } // while(weight_node)

        // Step 2: Update weight for critical_node or rotate tree to balance node
      if (uint_least8_t(kNeither) == critical_node->weight)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	7a1b      	ldrb	r3, [r3, #8]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d106      	bne.n	80085dc <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x76>
      {
        critical_node->weight = critical_node->dir;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	7a52      	ldrb	r2, [r2, #9]
 80085d8:	721a      	strb	r2, [r3, #8]
        {
          rotate_3node(critical_node, critical_node->dir,
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
        }
      }
    }
 80085da:	e03a      	b.n	8008652 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
      else if (critical_node->dir != critical_node->weight)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	7a5a      	ldrb	r2, [r3, #9]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	7a1b      	ldrb	r3, [r3, #8]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d004      	beq.n	80085f6 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0x90>
        critical_node->weight = uint_least8_t(kNeither);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2202      	movs	r2, #2
 80085f2:	721a      	strb	r2, [r3, #8]
    }
 80085f4:	e02d      	b.n	8008652 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
        if (critical_node->weight == critical_node->children[critical_node->dir]->dir)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	7a1a      	ldrb	r2, [r3, #8]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	6819      	ldr	r1, [r3, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	7a5b      	ldrb	r3, [r3, #9]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	585b      	ldr	r3, [r3, r1]
 800860a:	7a5b      	ldrb	r3, [r3, #9]
 800860c:	429a      	cmp	r2, r3
 800860e:	d108      	bne.n	8008622 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xbc>
          rotate_2node(critical_node, critical_node->dir);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	7a5a      	ldrb	r2, [r3, #9]
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	0018      	movs	r0, r3
 800861c:	f000 f81d 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
    }
 8008620:	e017      	b.n	8008652 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE+0xec>
          rotate_3node(critical_node, critical_node->dir,
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	7a5c      	ldrb	r4, [r3, #9]
            critical_node->children[critical_node->dir]->children[1 - critical_node->dir]->dir);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	7a5b      	ldrb	r3, [r3, #9]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	589a      	ldr	r2, [r3, r2]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	7a5b      	ldrb	r3, [r3, #9]
 800863c:	0019      	movs	r1, r3
 800863e:	2301      	movs	r3, #1
 8008640:	1a5b      	subs	r3, r3, r1
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	589b      	ldr	r3, [r3, r2]
          rotate_3node(critical_node, critical_node->dir,
 8008646:	7a5b      	ldrb	r3, [r3, #9]
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	0022      	movs	r2, r4
 800864e:	f000 f837 	bl	80086c0 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
    }
 8008652:	46c0      	nop			; (mov r8, r8)
 8008654:	46bd      	mov	sp, r7
 8008656:	b005      	add	sp, #20
 8008658:	bd90      	pop	{r4, r7, pc}

0800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>:

    //*************************************************************************
    /// Rotate two nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_2node(Node*& position, uint_least8_t dir)
 800865a:	b580      	push	{r7, lr}
 800865c:	b086      	sub	sp, #24
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	1dfb      	adds	r3, r7, #7
 8008666:	701a      	strb	r2, [r3, #0]
      // B (new position) becomes the root
      // A (position) takes ownership of E as its left child
      // B (new position) takes ownership of A as its right child

      // Capture new root
      Node* new_root = position->children[dir];
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	1dfa      	adds	r2, r7, #7
 800866e:	7812      	ldrb	r2, [r2, #0]
 8008670:	0092      	lsls	r2, r2, #2
 8008672:	58d3      	ldr	r3, [r2, r3]
 8008674:	617b      	str	r3, [r7, #20]
      // Replace position's previous child with new root's other child
      position->children[dir] = new_root->children[1 - dir];
 8008676:	1dfb      	adds	r3, r7, #7
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2201      	movs	r2, #1
 800867c:	1ad0      	subs	r0, r2, r3
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	1dfa      	adds	r2, r7, #7
 8008684:	7812      	ldrb	r2, [r2, #0]
 8008686:	6979      	ldr	r1, [r7, #20]
 8008688:	0080      	lsls	r0, r0, #2
 800868a:	5841      	ldr	r1, [r0, r1]
 800868c:	0092      	lsls	r2, r2, #2
 800868e:	50d1      	str	r1, [r2, r3]
      // New root now becomes parent of current position
      new_root->children[1 - dir] = position;
 8008690:	1dfb      	adds	r3, r7, #7
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2201      	movs	r2, #1
 8008696:	1ad2      	subs	r2, r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6819      	ldr	r1, [r3, #0]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	0092      	lsls	r2, r2, #2
 80086a0:	50d1      	str	r1, [r2, r3]
      // Clear weight factor from current position
      position->weight = uint_least8_t(kNeither);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2202      	movs	r2, #2
 80086a8:	721a      	strb	r2, [r3, #8]
      // Newly detached right now becomes current position
      position = new_root;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	601a      	str	r2, [r3, #0]
      // Clear weight factor from new root
      position->weight = uint_least8_t(kNeither);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2202      	movs	r2, #2
 80086b6:	721a      	strb	r2, [r3, #8]
    }
 80086b8:	46c0      	nop			; (mov r8, r8)
 80086ba:	46bd      	mov	sp, r7
 80086bc:	b006      	add	sp, #24
 80086be:	bd80      	pop	{r7, pc}

080086c0 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>:

    //*************************************************************************
    /// Rotate three nodes at the position provided the to balance the tree
    //*************************************************************************
    void rotate_3node(Node*& position, uint_least8_t dir, uint_least8_t third)
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	0019      	movs	r1, r3
 80086cc:	1dfb      	adds	r3, r7, #7
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	1dbb      	adds	r3, r7, #6
 80086d2:	1c0a      	adds	r2, r1, #0
 80086d4:	701a      	strb	r2, [r3, #0]
      // D (new position) becomes the root
      // A (position) takes ownership of F as its right child
      // C takes ownership of G as its left child

      // Capture new root (either E or D depending on dir)
      Node* new_root = position->children[dir]->children[1 - dir];
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	1dfa      	adds	r2, r7, #7
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	0092      	lsls	r2, r2, #2
 80086e0:	58d3      	ldr	r3, [r2, r3]
 80086e2:	1dfa      	adds	r2, r7, #7
 80086e4:	7812      	ldrb	r2, [r2, #0]
 80086e6:	2101      	movs	r1, #1
 80086e8:	1a8a      	subs	r2, r1, r2
 80086ea:	0092      	lsls	r2, r2, #2
 80086ec:	58d3      	ldr	r3, [r2, r3]
 80086ee:	617b      	str	r3, [r7, #20]
      // Set weight factor for B or C based on F or G existing and being a different than dir
      position->children[dir]->weight = third != uint_least8_t(kNeither) && third != dir ? dir : uint_least8_t(kNeither);
 80086f0:	1dbb      	adds	r3, r7, #6
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d008      	beq.n	800870a <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4a>
 80086f8:	1dba      	adds	r2, r7, #6
 80086fa:	1dfb      	adds	r3, r7, #7
 80086fc:	7812      	ldrb	r2, [r2, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d002      	beq.n	800870a <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4a>
 8008704:	1dfb      	adds	r3, r7, #7
 8008706:	7819      	ldrb	r1, [r3, #0]
 8008708:	e000      	b.n	800870c <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0x4c>
 800870a:	2102      	movs	r1, #2
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	1dfa      	adds	r2, r7, #7
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	0092      	lsls	r2, r2, #2
 8008716:	58d3      	ldr	r3, [r2, r3]
 8008718:	1c0a      	adds	r2, r1, #0
 800871a:	721a      	strb	r2, [r3, #8]

      // Detach new root from its tree (replace with new roots child)
      position->children[dir]->children[1 - dir] =
        new_root->children[dir];
 800871c:	1dfb      	adds	r3, r7, #7
 800871e:	7818      	ldrb	r0, [r3, #0]
      position->children[dir]->children[1 - dir] =
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	1dfa      	adds	r2, r7, #7
 8008726:	7812      	ldrb	r2, [r2, #0]
 8008728:	0092      	lsls	r2, r2, #2
 800872a:	58d3      	ldr	r3, [r2, r3]
 800872c:	1dfa      	adds	r2, r7, #7
 800872e:	7812      	ldrb	r2, [r2, #0]
 8008730:	2101      	movs	r1, #1
 8008732:	1a8a      	subs	r2, r1, r2
        new_root->children[dir];
 8008734:	6979      	ldr	r1, [r7, #20]
 8008736:	0080      	lsls	r0, r0, #2
 8008738:	5841      	ldr	r1, [r0, r1]
      position->children[dir]->children[1 - dir] =
 800873a:	0092      	lsls	r2, r2, #2
 800873c:	50d1      	str	r1, [r2, r3]
      // Attach current left tree to new root
      new_root->children[dir] = position->children[dir];
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	1dfa      	adds	r2, r7, #7
 8008744:	7811      	ldrb	r1, [r2, #0]
 8008746:	1dfa      	adds	r2, r7, #7
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	0089      	lsls	r1, r1, #2
 800874c:	58c9      	ldr	r1, [r1, r3]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	0092      	lsls	r2, r2, #2
 8008752:	50d1      	str	r1, [r2, r3]
      // Set weight factor for A based on F or G
      position->weight = third != uint_least8_t(kNeither) && third == dir ? 1 - dir : uint_least8_t(kNeither);
 8008754:	1dbb      	adds	r3, r7, #6
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d00b      	beq.n	8008774 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb4>
 800875c:	1dba      	adds	r2, r7, #6
 800875e:	1dfb      	adds	r3, r7, #7
 8008760:	7812      	ldrb	r2, [r2, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d105      	bne.n	8008774 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb4>
 8008768:	1dfb      	adds	r3, r7, #7
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2201      	movs	r2, #1
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	b2da      	uxtb	r2, r3
 8008772:	e000      	b.n	8008776 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh+0xb6>
 8008774:	2202      	movs	r2, #2
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	721a      	strb	r2, [r3, #8]

      // Move new root's right tree to current roots left tree
      position->children[dir] = new_root->children[1 - dir];
 800877c:	1dfb      	adds	r3, r7, #7
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2201      	movs	r2, #1
 8008782:	1ad0      	subs	r0, r2, r3
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	1dfa      	adds	r2, r7, #7
 800878a:	7812      	ldrb	r2, [r2, #0]
 800878c:	6979      	ldr	r1, [r7, #20]
 800878e:	0080      	lsls	r0, r0, #2
 8008790:	5841      	ldr	r1, [r0, r1]
 8008792:	0092      	lsls	r2, r2, #2
 8008794:	50d1      	str	r1, [r2, r3]
      // Attach current root to new roots right tree
      new_root->children[1 - dir] = position;
 8008796:	1dfb      	adds	r3, r7, #7
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2201      	movs	r2, #1
 800879c:	1ad2      	subs	r2, r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	0092      	lsls	r2, r2, #2
 80087a6:	50d1      	str	r1, [r2, r3]
      // Replace current position with new root
      position = new_root;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	601a      	str	r2, [r3, #0]
      // Clear weight factor for new current position
      position->weight = uint_least8_t(kNeither);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2202      	movs	r2, #2
 80087b4:	721a      	strb	r2, [r3, #8]
    }
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b006      	add	sp, #24
 80087bc:	bd80      	pop	{r7, pc}

080087be <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>:

    //*************************************************************************
    /// Find the node whose key would go before all the other keys from the
    /// position provided
    //*************************************************************************
    Node* find_limit_node(Node* position, const int8_t dir) const
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	1dfb      	adds	r3, r7, #7
 80087ca:	701a      	strb	r2, [r3, #0]
    {
      // Something at this position and in the direction specified? keep going
      Node* limit_node = position;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00f      	beq.n	80087f6 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x38>
 80087d6:	1dfb      	adds	r3, r7, #7
 80087d8:	2200      	movs	r2, #0
 80087da:	569a      	ldrsb	r2, [r3, r2]
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	0092      	lsls	r2, r2, #2
 80087e0:	58d3      	ldr	r3, [r2, r3]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x38>
      {
        limit_node = limit_node->children[dir];
 80087e6:	1dfb      	adds	r3, r7, #7
 80087e8:	2200      	movs	r2, #0
 80087ea:	569a      	ldrsb	r2, [r3, r2]
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	58d3      	ldr	r3, [r2, r3]
 80087f2:	617b      	str	r3, [r7, #20]
      while (limit_node && limit_node->children[dir])
 80087f4:	e7ec      	b.n	80087d0 <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa+0x12>
      }

      // Return the limit node position found
      return limit_node;
 80087f6:	697b      	ldr	r3, [r7, #20]
    }
 80087f8:	0018      	movs	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b006      	add	sp, #24
 80087fe:	bd80      	pop	{r7, pc}

08008800 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>:
    }

    //*************************************************************************
    /// Attach the provided node to the position provided
    //*************************************************************************
    void attach_node(Node*& position, Node& node)
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
    {
      // Mark new node as leaf on attach to tree at position provided
      node.mark_as_leaf();
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	0018      	movs	r0, r3
 8008810:	f7ff fe79 	bl	8008506 <_ZN3etl8map_base4Node12mark_as_leafEv>

      // Add the node here
      position = &node;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	601a      	str	r2, [r3, #0]

      // One more.
      ++current_size;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	601a      	str	r2, [r3, #0]
    }
 8008824:	46c0      	nop			; (mov r8, r8)
 8008826:	46bd      	mov	sp, r7
 8008828:	b004      	add	sp, #16
 800882a:	bd80      	pop	{r7, pc}

0800882c <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>:

    //*************************************************************************
    /// Detach the node at the position provided
    //*************************************************************************
    void detach_node(Node*& position, Node*& replacement)
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
    {
      // Make temporary copy of actual nodes involved because we might lose
      // their references in the process (e.g. position is the same as
      // replacement or replacement is a child of position)
      Node* detached = position;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	617b      	str	r3, [r7, #20]
      Node* swap = replacement;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	613b      	str	r3, [r7, #16]

      // Update current position to point to swap (replacement) node first
      position = swap;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	601a      	str	r2, [r3, #0]

      // Update replacement node to point to child in opposite direction
      // otherwise we might lose the other child of the swap node
      replacement = swap->children[1 - swap->dir];
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	7a5b      	ldrb	r3, [r3, #9]
 800884e:	001a      	movs	r2, r3
 8008850:	2301      	movs	r3, #1
 8008852:	1a9a      	subs	r2, r3, r2
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	0092      	lsls	r2, r2, #2
 8008858:	58d2      	ldr	r2, [r2, r3]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]

      // Point swap node to detached node's children and weight
      swap->children[kLeft] = detached->children[kLeft];
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	601a      	str	r2, [r3, #0]
      swap->children[kRight] = detached->children[kRight];
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	605a      	str	r2, [r3, #4]
      swap->weight = detached->weight;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	7a1a      	ldrb	r2, [r3, #8]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	721a      	strb	r2, [r3, #8]
    }
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	46bd      	mov	sp, r7
 800887a:	b006      	add	sp, #24
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev>:
namespace SolarGators {
namespace DataModules {

// TODO: Currently left turn and right turn are able to be true at the same time

  SteeringController::SteeringController()
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	0018      	movs	r0, r3
 800888c:	f7ff fba2 	bl	8007fd4 <_ZN11SolarGators11DataModules8SteeringC1Ev>
 8008890:	4a47      	ldr	r2, [pc, #284]	; (80089b0 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x130>)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	22fc      	movs	r2, #252	; 0xfc
 800889a:	189b      	adds	r3, r3, r2
 800889c:	2218      	movs	r2, #24
 800889e:	2100      	movs	r1, #0
 80088a0:	0018      	movs	r0, r3
 80088a2:	f009 fd1b 	bl	80122dc <memset>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	21fc      	movs	r1, #252	; 0xfc
 80088aa:	4a42      	ldr	r2, [pc, #264]	; (80089b4 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x134>)
 80088ac:	505a      	str	r2, [r3, r1]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	33ac      	adds	r3, #172	; 0xac
 80088b2:	0019      	movs	r1, r3
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	2382      	movs	r3, #130	; 0x82
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	50d1      	str	r1, [r2, r3]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	2384      	movs	r3, #132	; 0x84
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	2150      	movs	r1, #80	; 0x50
 80088c4:	50d1      	str	r1, [r2, r3]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	338c      	adds	r3, #140	; 0x8c
 80088ca:	0019      	movs	r1, r3
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	2386      	movs	r3, #134	; 0x86
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	50d1      	str	r1, [r2, r3]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	2388      	movs	r3, #136	; 0x88
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	2120      	movs	r1, #32
 80088dc:	50d1      	str	r1, [r2, r3]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	23f5      	movs	r3, #245	; 0xf5
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	18d3      	adds	r3, r2, r3
 80088e6:	2224      	movs	r2, #36	; 0x24
 80088e8:	2100      	movs	r1, #0
 80088ea:	0018      	movs	r0, r3
 80088ec:	f009 fcf6 	bl	80122dc <memset>
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	23f5      	movs	r3, #245	; 0xf5
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4930      	ldr	r1, [pc, #192]	; (80089b8 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x138>)
 80088f8:	50d1      	str	r1, [r2, r3]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	22c6      	movs	r2, #198	; 0xc6
 80088fe:	0092      	lsls	r2, r2, #2
 8008900:	1899      	adds	r1, r3, r2
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	23f7      	movs	r3, #247	; 0xf7
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	50d1      	str	r1, [r2, r3]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	23f8      	movs	r3, #248	; 0xf8
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	21bc      	movs	r1, #188	; 0xbc
 8008912:	50d1      	str	r1, [r2, r3]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3319      	adds	r3, #25
 8008918:	33ff      	adds	r3, #255	; 0xff
 800891a:	0019      	movs	r1, r3
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	23f9      	movs	r3, #249	; 0xf9
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	50d1      	str	r1, [r2, r3]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	23fa      	movs	r3, #250	; 0xfa
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	2180      	movs	r1, #128	; 0x80
 800892c:	0089      	lsls	r1, r1, #2
 800892e:	50d1      	str	r1, [r2, r3]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	23fb      	movs	r3, #251	; 0xfb
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	2137      	movs	r1, #55	; 0x37
 8008938:	50d1      	str	r1, [r2, r3]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	22fe      	movs	r2, #254	; 0xfe
 800893e:	0092      	lsls	r2, r2, #2
 8008940:	4694      	mov	ip, r2
 8008942:	4463      	add	r3, ip
 8008944:	0018      	movs	r0, r3
 8008946:	f000 fb0a 	bl	8008f5e <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEEC1Ev>
  {
    button_handle_ = osThreadNew((osThreadFunc_t)&SteeringController::ButtonHandler, this, &button_attributes_);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	22f5      	movs	r2, #245	; 0xf5
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	189a      	adds	r2, r3, r2
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	4b19      	ldr	r3, [pc, #100]	; (80089bc <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x13c>)
 8008956:	0018      	movs	r0, r3
 8008958:	f005 fcb6 	bl	800e2c8 <osThreadNew>
 800895c:	0001      	movs	r1, r0
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	238a      	movs	r3, #138	; 0x8a
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	50d1      	str	r1, [r2, r3]
    button_event_ = osEventFlagsNew(NULL);
 8008966:	2000      	movs	r0, #0
 8008968:	f005 fe58 	bl	800e61c <osEventFlagsNew>
 800896c:	0002      	movs	r2, r0
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2184      	movs	r1, #132	; 0x84
 8008972:	505a      	str	r2, [r3, r1]
    if (button_event_ == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2284      	movs	r2, #132	; 0x84
 8008978:	589b      	ldr	r3, [r3, r2]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x102>
    {
        Error_Handler();
 800897e:	f7fa fab1 	bl	8002ee4 <Error_Handler>
    }
    button_queue_ = osMessageQueueNew(16, sizeof(uint16_t), &button_queue_attributes_);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	33fc      	adds	r3, #252	; 0xfc
 8008986:	001a      	movs	r2, r3
 8008988:	2102      	movs	r1, #2
 800898a:	2010      	movs	r0, #16
 800898c:	f006 f8be 	bl	800eb0c <osMessageQueueNew>
 8008990:	0002      	movs	r2, r0
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2188      	movs	r1, #136	; 0x88
 8008996:	505a      	str	r2, [r3, r1]
    if (button_queue_ == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2288      	movs	r2, #136	; 0x88
 800899c:	589b      	ldr	r3, [r3, r2]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <_ZN11SolarGators11DataModules18SteeringControllerC1Ev+0x126>
    {
        Error_Handler();
 80089a2:	f7fa fa9f 	bl	8002ee4 <Error_Handler>
    }
  }
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b002      	add	sp, #8
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	080141a8 	.word	0x080141a8
 80089b4:	08013360 	.word	0x08013360
 80089b8:	08013370 	.word	0x08013370
 80089bc:	08008ead 	.word	0x08008ead

080089c0 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>:

  SteeringController::~SteeringController() {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	4a0f      	ldr	r2, [pc, #60]	; (8008a08 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev+0x48>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	601a      	str	r2, [r3, #0]
    osEventFlagsDelete(button_event_);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2284      	movs	r2, #132	; 0x84
 80089d2:	589b      	ldr	r3, [r3, r2]
 80089d4:	0018      	movs	r0, r3
 80089d6:	f005 ff2b 	bl	800e830 <osEventFlagsDelete>
    osMessageQueueDelete(button_queue_);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2288      	movs	r2, #136	; 0x88
 80089de:	589b      	ldr	r3, [r3, r2]
 80089e0:	0018      	movs	r0, r3
 80089e2:	f006 fa1b 	bl	800ee1c <osMessageQueueDelete>
  SteeringController::~SteeringController() {
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	22fe      	movs	r2, #254	; 0xfe
 80089ea:	0092      	lsls	r2, r2, #2
 80089ec:	4694      	mov	ip, r2
 80089ee:	4463      	add	r3, ip
 80089f0:	0018      	movs	r0, r3
 80089f2:	f000 facd 	bl	8008f90 <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEED1Ev>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7ff fb2f 	bl	800805c <_ZN11SolarGators11DataModules8SteeringD1Ev>
  }
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	0018      	movs	r0, r3
 8008a02:	46bd      	mov	sp, r7
 8008a04:	b002      	add	sp, #8
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	080141a8 	.word	0x080141a8

08008a0c <_ZN11SolarGators11DataModules18SteeringControllerD0Ev>:
  SteeringController::~SteeringController() {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  }
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	0018      	movs	r0, r3
 8008a18:	f7ff ffd2 	bl	80089c0 <_ZN11SolarGators11DataModules18SteeringControllerD1Ev>
 8008a1c:	4a05      	ldr	r2, [pc, #20]	; (8008a34 <_ZN11SolarGators11DataModules18SteeringControllerD0Ev+0x28>)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	0011      	movs	r1, r2
 8008a22:	0018      	movs	r0, r3
 8008a24:	f009 fa32 	bl	8011e8c <_ZdlPvj>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b002      	add	sp, #8
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	0000067c 	.word	0x0000067c

08008a38 <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>:

  void SteeringController::EnableLeftTurnSignal()
  {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	227a      	movs	r2, #122	; 0x7a
 8008a44:	5c9b      	ldrb	r3, [r3, r2]
 8008a46:	2201      	movs	r2, #1
 8008a48:	4053      	eors	r3, r2
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv+0x20>
      left_turn_ = true;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2278      	movs	r2, #120	; 0x78
 8008a54:	2101      	movs	r1, #1
 8008a56:	5499      	strb	r1, [r3, r2]
  }
 8008a58:	46c0      	nop			; (mov r8, r8)
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	b002      	add	sp, #8
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>:

  void SteeringController::DisableLeftTurnSignal()
  {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
    left_turn_ = false;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2278      	movs	r2, #120	; 0x78
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	5499      	strb	r1, [r3, r2]
  }
 8008a70:	46c0      	nop			; (mov r8, r8)
 8008a72:	46bd      	mov	sp, r7
 8008a74:	b002      	add	sp, #8
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv>:

  void SteeringController::ToggleLeftTurnSignal()
  {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
    if(left_turn_)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2278      	movs	r2, #120	; 0x78
 8008a84:	5c9b      	ldrb	r3, [r3, r2]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d004      	beq.n	8008a94 <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x1c>
      DisableLeftTurnSignal();
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f7ff ffe7 	bl	8008a60 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    else
      EnableLeftTurnSignal();
  }
 8008a92:	e003      	b.n	8008a9c <_ZN11SolarGators11DataModules18SteeringController20ToggleLeftTurnSignalEv+0x24>
      EnableLeftTurnSignal();
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	0018      	movs	r0, r3
 8008a98:	f7ff ffce 	bl	8008a38 <_ZN11SolarGators11DataModules18SteeringController20EnableLeftTurnSignalEv>
  }
 8008a9c:	46c0      	nop			; (mov r8, r8)
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b002      	add	sp, #8
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>:

  void SteeringController::EnableRightTurnSignal()
  {
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
    if(!hazards_)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	227a      	movs	r2, #122	; 0x7a
 8008ab0:	5c9b      	ldrb	r3, [r3, r2]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	4053      	eors	r3, r2
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv+0x20>
      right_turn_ = true;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2279      	movs	r2, #121	; 0x79
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	5499      	strb	r1, [r3, r2]
  }
 8008ac4:	46c0      	nop			; (mov r8, r8)
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	b002      	add	sp, #8
 8008aca:	bd80      	pop	{r7, pc}

08008acc <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>:

  void SteeringController::DisableRightTurnSignal()
  {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
    right_turn_ = false;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2279      	movs	r2, #121	; 0x79
 8008ad8:	2100      	movs	r1, #0
 8008ada:	5499      	strb	r1, [r3, r2]
  }
 8008adc:	46c0      	nop			; (mov r8, r8)
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	b002      	add	sp, #8
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv>:

  void SteeringController::ToggleRightTurnSignal()
  {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
    if(right_turn_)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2279      	movs	r2, #121	; 0x79
 8008af0:	5c9b      	ldrb	r3, [r3, r2]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x1c>
      DisableRightTurnSignal();
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7ff ffe7 	bl	8008acc <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    else
      EnableRightTurnSignal();
  }
 8008afe:	e003      	b.n	8008b08 <_ZN11SolarGators11DataModules18SteeringController21ToggleRightTurnSignalEv+0x24>
      EnableRightTurnSignal();
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	0018      	movs	r0, r3
 8008b04:	f7ff ffce 	bl	8008aa4 <_ZN11SolarGators11DataModules18SteeringController21EnableRightTurnSignalEv>
  }
 8008b08:	46c0      	nop			; (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>:

  void SteeringController::EnableHazards()
  {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
    DisableLeftTurnSignal();
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f7ff ffa0 	bl	8008a60 <_ZN11SolarGators11DataModules18SteeringController21DisableLeftTurnSignalEv>
    DisableRightTurnSignal();
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	0018      	movs	r0, r3
 8008b24:	f7ff ffd2 	bl	8008acc <_ZN11SolarGators11DataModules18SteeringController22DisableRightTurnSignalEv>
    hazards_ = true;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	227a      	movs	r2, #122	; 0x7a
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	5499      	strb	r1, [r3, r2]
  }
 8008b30:	46c0      	nop			; (mov r8, r8)
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b002      	add	sp, #8
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>:

  void SteeringController::DisableHazards()
  {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
    hazards_ = false;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	227a      	movs	r2, #122	; 0x7a
 8008b44:	2100      	movs	r1, #0
 8008b46:	5499      	strb	r1, [r3, r2]
  }
 8008b48:	46c0      	nop			; (mov r8, r8)
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	b002      	add	sp, #8
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv>:

  void SteeringController::ToggleHazards()
  {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
    if(hazards_)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	227a      	movs	r2, #122	; 0x7a
 8008b5c:	5c9b      	ldrb	r3, [r3, r2]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d004      	beq.n	8008b6c <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x1c>
      DisableHazards();
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	0018      	movs	r0, r3
 8008b66:	f7ff ffe7 	bl	8008b38 <_ZN11SolarGators11DataModules18SteeringController14DisableHazardsEv>
    else
      EnableHazards();
  }
 8008b6a:	e003      	b.n	8008b74 <_ZN11SolarGators11DataModules18SteeringController13ToggleHazardsEv+0x24>
      EnableHazards();
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f7ff ffce 	bl	8008b10 <_ZN11SolarGators11DataModules18SteeringController13EnableHazardsEv>
  }
 8008b74:	46c0      	nop			; (mov r8, r8)
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b002      	add	sp, #8
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>:
  {
    bps_fault_ = fault;
  }

  void SteeringController::EnableCruise()
  {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
    // Don't allow cruise to be enabled in reverse
    if(!reverse_)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2280      	movs	r2, #128	; 0x80
 8008b88:	5c9b      	ldrb	r3, [r3, r2]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	4053      	eors	r3, r2
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv+0x20>
      cruise_enable_ = true;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	227c      	movs	r2, #124	; 0x7c
 8008b98:	2101      	movs	r1, #1
 8008b9a:	5499      	strb	r1, [r3, r2]
  }
 8008b9c:	46c0      	nop			; (mov r8, r8)
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	b002      	add	sp, #8
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>:

  void SteeringController::DisableCruise()
  {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
    cruise_enable_ = false;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	227c      	movs	r2, #124	; 0x7c
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	5499      	strb	r1, [r3, r2]
  }
 8008bb4:	46c0      	nop			; (mov r8, r8)
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b002      	add	sp, #8
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv>:
  void SteeringController::ToggleCruise()
  {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
    if(cruise_enable_)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	227c      	movs	r2, #124	; 0x7c
 8008bc8:	5c9b      	ldrb	r3, [r3, r2]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x1c>
      DisableCruise();
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f7ff ffe7 	bl	8008ba4 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    else
      EnableCruise();
  }
 8008bd6:	e003      	b.n	8008be0 <_ZN11SolarGators11DataModules18SteeringController12ToggleCruiseEv+0x24>
      EnableCruise();
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7ff ffce 	bl	8008b7c <_ZN11SolarGators11DataModules18SteeringController12EnableCruiseEv>
  }
 8008be0:	46c0      	nop			; (mov r8, r8)
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b002      	add	sp, #8
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>:

  void SteeringController::EnableHeadlights()
  {
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
    headlights_ = true;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	227e      	movs	r2, #126	; 0x7e
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	5499      	strb	r1, [r3, r2]
  }
 8008bf8:	46c0      	nop			; (mov r8, r8)
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	b002      	add	sp, #8
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>:

  void SteeringController::DisableHeadlights()
  {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
    headlights_ = false;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	227e      	movs	r2, #126	; 0x7e
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	5499      	strb	r1, [r3, r2]
  }
 8008c10:	46c0      	nop			; (mov r8, r8)
 8008c12:	46bd      	mov	sp, r7
 8008c14:	b002      	add	sp, #8
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv>:

  void SteeringController::ToggleHeadlights()
  {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    if(headlights_)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	227e      	movs	r2, #126	; 0x7e
 8008c24:	5c9b      	ldrb	r3, [r3, r2]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d004      	beq.n	8008c34 <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x1c>
      DisableHeadlights();
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f7ff ffe7 	bl	8008c00 <_ZN11SolarGators11DataModules18SteeringController17DisableHeadlightsEv>
    else
      EnableHeadlights();
  }
 8008c32:	e003      	b.n	8008c3c <_ZN11SolarGators11DataModules18SteeringController16ToggleHeadlightsEv+0x24>
      EnableHeadlights();
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7ff ffd6 	bl	8008be8 <_ZN11SolarGators11DataModules18SteeringController16EnableHeadlightsEv>
  }
 8008c3c:	46c0      	nop			; (mov r8, r8)
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	b002      	add	sp, #8
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>:

  void SteeringController::EnableHorn()
  {
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
    horn_ = true;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	227f      	movs	r2, #127	; 0x7f
 8008c50:	2101      	movs	r1, #1
 8008c52:	5499      	strb	r1, [r3, r2]
  }
 8008c54:	46c0      	nop			; (mov r8, r8)
 8008c56:	46bd      	mov	sp, r7
 8008c58:	b002      	add	sp, #8
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>:

  void SteeringController::DisableHorn()
  {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
    horn_ = false;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	227f      	movs	r2, #127	; 0x7f
 8008c68:	2100      	movs	r1, #0
 8008c6a:	5499      	strb	r1, [r3, r2]
  }
 8008c6c:	46c0      	nop			; (mov r8, r8)
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	b002      	add	sp, #8
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv>:

  void SteeringController::ToggleHorn()
  {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
    if(horn_)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	227f      	movs	r2, #127	; 0x7f
 8008c80:	5c9b      	ldrb	r3, [r3, r2]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d004      	beq.n	8008c90 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv+0x1c>
      DisableHorn();
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f7ff ffe7 	bl	8008c5c <_ZN11SolarGators11DataModules18SteeringController11DisableHornEv>
    else
      EnableHorn();
  }
 8008c8e:	e003      	b.n	8008c98 <_ZN11SolarGators11DataModules18SteeringController10ToggleHornEv+0x24>
      EnableHorn();
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	0018      	movs	r0, r3
 8008c94:	f7ff ffd6 	bl	8008c44 <_ZN11SolarGators11DataModules18SteeringController10EnableHornEv>
  }
 8008c98:	46c0      	nop			; (mov r8, r8)
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	b002      	add	sp, #8
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <_ZN11SolarGators11DataModules18SteeringController19IncreaseCruiseSpeedEv>:

  void SteeringController::IncreaseCruiseSpeed()
  {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
    SetCruiseSpeed(cruise_speed_++);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2281      	movs	r2, #129	; 0x81
 8008cac:	5c9b      	ldrb	r3, [r3, r2]
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	b2d0      	uxtb	r0, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	2181      	movs	r1, #129	; 0x81
 8008cb6:	5450      	strb	r0, [r2, r1]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	0011      	movs	r1, r2
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f000 f81a 	bl	8008cf8 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>
  }
 8008cc4:	46c0      	nop			; (mov r8, r8)
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b002      	add	sp, #8
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <_ZN11SolarGators11DataModules18SteeringController19DecreaseCruiseSpeedEv>:

  void SteeringController::DecreaseCruiseSpeed()
  {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
    SetCruiseSpeed(cruise_speed_--);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2281      	movs	r2, #129	; 0x81
 8008cd8:	5c9b      	ldrb	r3, [r3, r2]
 8008cda:	1e5a      	subs	r2, r3, #1
 8008cdc:	b2d0      	uxtb	r0, r2
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	2181      	movs	r1, #129	; 0x81
 8008ce2:	5450      	strb	r0, [r2, r1]
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	0011      	movs	r1, r2
 8008cea:	0018      	movs	r0, r3
 8008cec:	f000 f804 	bl	8008cf8 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>
  }
 8008cf0:	46c0      	nop			; (mov r8, r8)
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	b002      	add	sp, #8
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt>:

  void SteeringController::SetCruiseSpeed(uint16_t speed)
  {
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	000a      	movs	r2, r1
 8008d02:	1cbb      	adds	r3, r7, #2
 8008d04:	801a      	strh	r2, [r3, #0]
    // Make sure the the requested cruise speed is acceptable
    if(speed < Max_Cruise_Speed_ && speed > Min_Cruise_Speed_)
 8008d06:	1cbb      	adds	r3, r7, #2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	2b3b      	cmp	r3, #59	; 0x3b
 8008d0c:	d809      	bhi.n	8008d22 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt+0x2a>
 8008d0e:	1cbb      	adds	r3, r7, #2
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <_ZN11SolarGators11DataModules18SteeringController14SetCruiseSpeedEt+0x2a>
      cruise_speed_ = speed;
 8008d16:	1cbb      	adds	r3, r7, #2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b2d9      	uxtb	r1, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2281      	movs	r2, #129	; 0x81
 8008d20:	5499      	strb	r1, [r3, r2]
  }
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	46bd      	mov	sp, r7
 8008d26:	b002      	add	sp, #8
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>:

  void SteeringController::EnableReverse()
  {
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
    // Disable cruise if switching into reverse (should never need to happen but just in case)
    DisableCruise();
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	0018      	movs	r0, r3
 8008d36:	f7ff ff35 	bl	8008ba4 <_ZN11SolarGators11DataModules18SteeringController13DisableCruiseEv>
    reverse_ = true;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2280      	movs	r2, #128	; 0x80
 8008d3e:	2101      	movs	r1, #1
 8008d40:	5499      	strb	r1, [r3, r2]
  }
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b002      	add	sp, #8
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>:

  void SteeringController::DisableReverse()
  {
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
    reverse_ = false;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2280      	movs	r2, #128	; 0x80
 8008d56:	2100      	movs	r1, #0
 8008d58:	5499      	strb	r1, [r3, r2]
  }
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	b002      	add	sp, #8
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv>:

  void SteeringController::ToggleReverse()
  {
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
    if(reverse_)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2280      	movs	r2, #128	; 0x80
 8008d6e:	5c9b      	ldrb	r3, [r3, r2]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d004      	beq.n	8008d7e <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x1c>
      DisableReverse();
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	0018      	movs	r0, r3
 8008d78:	f7ff ffe7 	bl	8008d4a <_ZN11SolarGators11DataModules18SteeringController14DisableReverseEv>
    else
      EnableReverse();
  }
 8008d7c:	e003      	b.n	8008d86 <_ZN11SolarGators11DataModules18SteeringController13ToggleReverseEv+0x24>
      EnableReverse();
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7ff ffd2 	bl	8008d2a <_ZN11SolarGators11DataModules18SteeringController13EnableReverseEv>
  }
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	b002      	add	sp, #8
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>:

  void SteeringController::EnableEco()
  {
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
    eco_enable_ = true;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	227d      	movs	r2, #125	; 0x7d
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	5499      	strb	r1, [r3, r2]
  }
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	46bd      	mov	sp, r7
 8008da2:	b002      	add	sp, #8
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <_ZN11SolarGators11DataModules18SteeringController10DisableEcoEv>:

  void SteeringController::DisableEco()
  {
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
    eco_enable_ = false;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	227d      	movs	r2, #125	; 0x7d
 8008db2:	2100      	movs	r1, #0
 8008db4:	5499      	strb	r1, [r3, r2]
  }
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b002      	add	sp, #8
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv>:
  void SteeringController::ToggleEco()
  {
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
    if(eco_enable_)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	227d      	movs	r2, #125	; 0x7d
 8008dca:	5c9b      	ldrb	r3, [r3, r2]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d004      	beq.n	8008dda <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv+0x1c>
      DisableEco();
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f7ff ffe7 	bl	8008da6 <_ZN11SolarGators11DataModules18SteeringController10DisableEcoEv>
    else
      EnableEco();
  }
 8008dd8:	e003      	b.n	8008de2 <_ZN11SolarGators11DataModules18SteeringController9ToggleEcoEv+0x24>
      EnableEco();
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7ff ffd6 	bl	8008d8e <_ZN11SolarGators11DataModules18SteeringController9EnableEcoEv>
  }
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	b002      	add	sp, #8
 8008de8:	bd80      	pop	{r7, pc}

08008dea <_ZN11SolarGators11DataModules18SteeringController11HandlePressEt>:

  void SteeringController::HandlePress(uint16_t pin)
  {
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	000a      	movs	r2, r1
 8008df4:	1cbb      	adds	r3, r7, #2
 8008df6:	801a      	strh	r2, [r3, #0]
    // Handles calling the action debouncing
    osEventFlagsSet(button_event_, 0x1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2284      	movs	r2, #132	; 0x84
 8008dfc:	589b      	ldr	r3, [r3, r2]
 8008dfe:	2101      	movs	r1, #1
 8008e00:	0018      	movs	r0, r3
 8008e02:	f005 fc59 	bl	800e6b8 <osEventFlagsSet>
    osMessageQueuePut(button_queue_, &pin, 0, 0);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2288      	movs	r2, #136	; 0x88
 8008e0a:	5898      	ldr	r0, [r3, r2]
 8008e0c:	1cb9      	adds	r1, r7, #2
 8008e0e:	2300      	movs	r3, #0
 8008e10:	2200      	movs	r2, #0
 8008e12:	f005 ff01 	bl	800ec18 <osMessageQueuePut>
  }
 8008e16:	46c0      	nop			; (mov r8, r8)
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	b002      	add	sp, #8
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<typename _T1, typename _T2>
    struct pair
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f001 f961 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	0018      	movs	r0, r3
 8008e34:	46bd      	mov	sp, r7
 8008e36:	b002      	add	sp, #8
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbED1Ev>:
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	0018      	movs	r0, r3
 8008e46:	f000 f9af 	bl	80091a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	b002      	add	sp, #8
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <_ZN11SolarGators11DataModules18SteeringController9AddButtonEPNS_7Drivers6ButtonE>:

  void SteeringController::AddButton(Drivers::Button* button)
  {
 8008e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e56:	b095      	sub	sp, #84	; 0x54
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
    buttons_.insert(etl::make_pair(button->pin_, *button));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	22fe      	movs	r2, #254	; 0xfe
 8008e62:	0092      	lsls	r2, r2, #2
 8008e64:	189c      	adds	r4, r3, r2
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3318      	adds	r3, #24
 8008e6a:	0019      	movs	r1, r3
 8008e6c:	2648      	movs	r6, #72	; 0x48
 8008e6e:	19bb      	adds	r3, r7, r6
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	0018      	movs	r0, r3
 8008e74:	f000 f8a2 	bl	8008fbc <_ZN3etl9make_pairIRtRN11SolarGators7Drivers6ButtonEEENS_4pairIT_T0_EEOS7_OS8_>
 8008e78:	2518      	movs	r5, #24
 8008e7a:	197b      	adds	r3, r7, r5
 8008e7c:	19ba      	adds	r2, r7, r6
 8008e7e:	0011      	movs	r1, r2
 8008e80:	0018      	movs	r0, r3
 8008e82:	f000 f919 	bl	80090b8 <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEcvSt4pairIT_T0_EIKtS4_EEv>
 8008e86:	260c      	movs	r6, #12
 8008e88:	19bb      	adds	r3, r7, r6
 8008e8a:	197a      	adds	r2, r7, r5
 8008e8c:	0021      	movs	r1, r4
 8008e8e:	0018      	movs	r0, r3
 8008e90:	f000 f930 	bl	80090f4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E>
 8008e94:	19bb      	adds	r3, r7, r6
 8008e96:	0018      	movs	r0, r3
 8008e98:	f7ff ffcf 	bl	8008e3a <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbED1Ev>
 8008e9c:	197b      	adds	r3, r7, r5
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f7ff ffbd 	bl	8008e1e <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEED1Ev>
  }
 8008ea4:	46c0      	nop			; (mov r8, r8)
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	b015      	add	sp, #84	; 0x54
 8008eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eac <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv>:

  void SteeringController::ButtonHandler()
  {
 8008eac:	b5b0      	push	{r4, r5, r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
    while(1)
    {
      // Wait for event to be set, no timeout
      osEventFlagsWait(button_event_, 0x1, osFlagsWaitAny, osWaitForever);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2284      	movs	r2, #132	; 0x84
 8008eb8:	5898      	ldr	r0, [r3, r2]
 8008eba:	2301      	movs	r3, #1
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	f005 fc47 	bl	800e754 <osEventFlagsWait>
      while(osMessageQueueGetCount(button_queue_) > 0)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2288      	movs	r2, #136	; 0x88
 8008eca:	589b      	ldr	r3, [r3, r2]
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f005 ff75 	bl	800edbc <osMessageQueueGetCount>
 8008ed2:	0003      	movs	r3, r0
 8008ed4:	1e5a      	subs	r2, r3, #1
 8008ed6:	4193      	sbcs	r3, r2
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0ea      	beq.n	8008eb4 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x8>
      {
        uint16_t pin;
        osMessageQueueGet(button_queue_, &pin, NULL, 0);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2288      	movs	r2, #136	; 0x88
 8008ee2:	5898      	ldr	r0, [r3, r2]
 8008ee4:	250a      	movs	r5, #10
 8008ee6:	1979      	adds	r1, r7, r5
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2200      	movs	r2, #0
 8008eec:	f005 fefe 	bl	800ecec <osMessageQueueGet>
        Drivers::Button* button = &(*buttons_.find(pin)).second;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	22fe      	movs	r2, #254	; 0xfe
 8008ef4:	0092      	lsls	r2, r2, #2
 8008ef6:	1899      	adds	r1, r3, r2
 8008ef8:	240c      	movs	r4, #12
 8008efa:	193b      	adds	r3, r7, r4
 8008efc:	197a      	adds	r2, r7, r5
 8008efe:	0018      	movs	r0, r3
 8008f00:	f000 f95b 	bl	80091ba <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE4findERKt>
 8008f04:	193b      	adds	r3, r7, r4
 8008f06:	0018      	movs	r0, r3
 8008f08:	f000 f96e 	bl	80091e8 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratordeEv>
 8008f0c:	0003      	movs	r3, r0
 8008f0e:	3304      	adds	r3, #4
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	193b      	adds	r3, r7, r4
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 f947 	bl	80091a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
        if(button != nullptr)
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0d2      	beq.n	8008ec6 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>
          button->HandlePress();
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	0018      	movs	r0, r3
 8008f24:	f001 f903 	bl	800a12e <_ZN11SolarGators7Drivers6Button11HandlePressEv>
      while(osMessageQueueGetCount(button_queue_) > 0)
 8008f28:	e7cd      	b.n	8008ec6 <_ZN11SolarGators11DataModules18SteeringController13ButtonHandlerEv+0x1a>

08008f2a <_ZN3etl12generic_poolILj60ELj4ELj10EED1Ev>:
  //*************************************************************************
  /// A templated abstract pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <const size_t VTypeSize, const size_t VAlignment, const size_t VSize>
  class generic_pool : public etl::ipool
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	0018      	movs	r0, r3
 8008f36:	f7ff facd 	bl	80084d4 <_ZN3etl5ipoolD1Ev>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b002      	add	sp, #8
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EED1Ev>:
  //*************************************************************************
  /// A templated pool implementation that uses a fixed size pool.
  ///\ingroup pool
  //*************************************************************************
  template <typename T, const size_t VSize>
  class pool : public etl::generic_pool<sizeof(T), etl::alignment_of<T>::value, VSize>
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	0018      	movs	r0, r3
 8008f50:	f7ff ffeb 	bl	8008f2a <_ZN3etl12generic_poolILj60ELj4ELj10EED1Ev>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	0018      	movs	r0, r3
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	b002      	add	sp, #8
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEEC1Ev>:
    static ETL_CONSTANT size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Default constructor.
    //*************************************************************************
    map()
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
      : etl::imap<TKey, TValue, TCompare>(node_pool, MAX_SIZE)
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3314      	adds	r3, #20
 8008f6c:	220a      	movs	r2, #10
 8008f6e:	0019      	movs	r1, r3
 8008f70:	f000 f949 	bl	8009206 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEEC1ERNS_5ipoolEj>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3314      	adds	r3, #20
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f000 f965 	bl	8009248 <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EEC1Ev>
    {
      this->initialise();
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	0018      	movs	r0, r3
 8008f82:	f000 f96e 	bl	8009262 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv>
    }
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	0018      	movs	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b002      	add	sp, #8
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZN3etl3mapItN11SolarGators7Drivers6ButtonELj10ENS_4lessItEEED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~map()
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    {
      this->initialise();
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f000 f961 	bl	8009262 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv>
    }
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3314      	adds	r3, #20
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7ff ffcd 	bl	8008f44 <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EED1Ev>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	0018      	movs	r0, r3
 8008fae:	f000 f93e 	bl	800922e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEED1Ev>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	b002      	add	sp, #8
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <_ZN3etl9make_pairIRtRN11SolarGators7Drivers6ButtonEEENS_4pairIT_T0_EEOS7_OS8_>:
  };

  //******************************************************************************
#if ETL_CPP11_SUPPORTED
  template <typename T1, typename T2>
  inline pair<T1, T2> make_pair(T1&& a, T2&& b)
 8008fbc:	b5b0      	push	{r4, r5, r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
  {
    return pair<T1, T2>(etl::forward<T1>(a), etl::forward<T2>(b));
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 f9b4 	bl	8009338 <_ZN3etl7forwardIRtEEOT_RNS_16remove_referenceIS2_E4typeE>
 8008fd0:	0004      	movs	r4, r0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	f000 f9b8 	bl	800934a <_ZN3etl7forwardIRN11SolarGators7Drivers6ButtonEEEOT_RNS_16remove_referenceIS5_E4typeE>
 8008fda:	0002      	movs	r2, r0
 8008fdc:	2510      	movs	r5, #16
 8008fde:	197b      	adds	r3, r7, r5
 8008fe0:	0021      	movs	r1, r4
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f000 f9ba 	bl	800935c <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1ES1_S5_>
 8008fe8:	197a      	adds	r2, r7, r5
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	0011      	movs	r1, r2
 8008fee:	0018      	movs	r0, r3
 8008ff0:	f000 f9c5 	bl	800937e <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1IS1_S5_EEONS0_IT_T0_EE>
  }
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b006      	add	sp, #24
 8008ffa:	bdb0      	pop	{r4, r5, r7, pc}

08008ffc <_ZNSt4pairItN11SolarGators7Drivers6ButtonEED1Ev>:
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	0018      	movs	r0, r3
 800900a:	f001 f872 	bl	800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	0018      	movs	r0, r3
 8009012:	46bd      	mov	sp, r7
 8009014:	b002      	add	sp, #8
 8009016:	bd80      	pop	{r7, pc}

08009018 <_ZN11SolarGators7Drivers6ButtonC1ERKS1_>:
#include "cmsis_os.h"
#include "main.h"

namespace SolarGators {
namespace Drivers {
class Button
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	0011      	movs	r1, r2
 8009028:	0018      	movs	r0, r3
 800902a:	f000 f9f9 	bl	8009420 <_ZNSt8functionIFvvEEC1ERKS1_>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	611a      	str	r2, [r3, #16]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	695a      	ldr	r2, [r3, #20]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	615a      	str	r2, [r3, #20]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	8b1a      	ldrh	r2, [r3, #24]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	831a      	strh	r2, [r3, #24]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	7e9a      	ldrb	r2, [r3, #26]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	769a      	strb	r2, [r3, #26]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	8b9a      	ldrh	r2, [r3, #28]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	839a      	strh	r2, [r3, #28]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	7f9a      	ldrb	r2, [r3, #30]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	779a      	strb	r2, [r3, #30]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	6a1a      	ldr	r2, [r3, #32]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	621a      	str	r2, [r3, #32]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	625a      	str	r2, [r3, #36]	; 0x24
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	851a      	strh	r2, [r3, #40]	; 0x28
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	222a      	movs	r2, #42	; 0x2a
 800907a:	5c99      	ldrb	r1, [r3, r2]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	222a      	movs	r2, #42	; 0x2a
 8009080:	5499      	strb	r1, [r3, r2]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	0018      	movs	r0, r3
 8009086:	46bd      	mov	sp, r7
 8009088:	b002      	add	sp, #8
 800908a:	bd80      	pop	{r7, pc}

0800908c <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEEC1EOS4_>:
                         bool>::type=false>
	explicit constexpr pair(const pair<_U1, _U2>& __p)
	: first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	881a      	ldrh	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	801a      	strh	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	1d1a      	adds	r2, r3, #4
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	3304      	adds	r3, #4
 80090a6:	0019      	movs	r1, r3
 80090a8:	0010      	movs	r0, r2
 80090aa:	f7ff ffb5 	bl	8009018 <_ZN11SolarGators7Drivers6ButtonC1ERKS1_>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	0018      	movs	r0, r3
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b002      	add	sp, #8
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEcvSt4pairIT_T0_EIKtS4_EEv>:
    operator std::pair<U1, U2>()
 80090b8:	b590      	push	{r4, r7, lr}
 80090ba:	b08f      	sub	sp, #60	; 0x3c
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
      return std::make_pair(first, second);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6819      	ldr	r1, [r3, #0]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	2408      	movs	r4, #8
 80090cc:	193b      	adds	r3, r7, r4
 80090ce:	0018      	movs	r0, r3
 80090d0:	f000 f96f 	bl	80093b2 <_ZSt9make_pairIRtRN11SolarGators7Drivers6ButtonEESt4pairINSt17__decay_and_stripIT_E6__typeENS6_IT0_E6__typeEEOS7_OSA_>
 80090d4:	193a      	adds	r2, r7, r4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	0011      	movs	r1, r2
 80090da:	0018      	movs	r0, r3
 80090dc:	f000 f982 	bl	80093e4 <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEEC1ItS3_Lb1EEEOS_IT_T0_E>
 80090e0:	193b      	adds	r3, r7, r4
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7ff ff8a 	bl	8008ffc <_ZNSt4pairItN11SolarGators7Drivers6ButtonEED1Ev>
 80090e8:	46c0      	nop			; (mov r8, r8)
    }
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b00f      	add	sp, #60	; 0x3c
 80090f0:	bd90      	pop	{r4, r7, pc}
	...

080090f4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E>:
    ETL_OR_STD::pair<iterator, bool> insert(rvalue_reference value)
 80090f4:	b5b0      	push	{r4, r5, r7, lr}
 80090f6:	b08a      	sub	sp, #40	; 0x28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
      Node* inserted_node = ETL_NULLPTR;
 8009100:	2300      	movs	r3, #0
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
      bool inserted = false;
 8009104:	2317      	movs	r3, #23
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	2200      	movs	r2, #0
 800910a:	701a      	strb	r2, [r3, #0]
      ETL_ASSERT(!full(), ETL_ERROR(map_full));
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	0018      	movs	r0, r3
 8009110:	f7ff f9e9 	bl	80084e6 <_ZNK3etl8map_base4fullEv>
 8009114:	0003      	movs	r3, r0
 8009116:	001a      	movs	r2, r3
 8009118:	2301      	movs	r3, #1
 800911a:	4053      	eors	r3, r2
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d105      	bne.n	800912e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0x3a>
 8009122:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0xa4>)
 8009124:	4a1d      	ldr	r2, [pc, #116]	; (800919c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0xa8>)
 8009126:	491e      	ldr	r1, [pc, #120]	; (80091a0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0xac>)
 8009128:	481e      	ldr	r0, [pc, #120]	; (80091a4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE6insertEOSt4pairIKtS3_E+0xb0>)
 800912a:	f008 ff49 	bl	8011fc0 <__assert_func>
      Data_Node& node = allocate_data_node(etl::move(value));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	0018      	movs	r0, r3
 8009132:	f000 f997 	bl	8009464 <_ZN3etl4moveIRSt4pairIKtN11SolarGators7Drivers6ButtonEEEEONS_16remove_referenceIT_E4typeEOS9_>
 8009136:	0002      	movs	r2, r0
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	0011      	movs	r1, r2
 800913c:	0018      	movs	r0, r3
 800913e:	f000 f99a 	bl	8009476 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS3_E>
 8009142:	0003      	movs	r3, r0
 8009144:	623b      	str	r3, [r7, #32]
      inserted_node = insert_node(root_node, node);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	3308      	adds	r3, #8
 800914a:	0019      	movs	r1, r3
 800914c:	6a3a      	ldr	r2, [r7, #32]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	0018      	movs	r0, r3
 8009152:	f000 f9b0 	bl	80094b6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE>
 8009156:	0003      	movs	r3, r0
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
      inserted = inserted_node == &node;
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	425a      	negs	r2, r3
 8009162:	4153      	adcs	r3, r2
 8009164:	b2da      	uxtb	r2, r3
 8009166:	2517      	movs	r5, #23
 8009168:	197b      	adds	r3, r7, r5
 800916a:	701a      	strb	r2, [r3, #0]
      return ETL_OR_STD::make_pair(iterator(*this, inserted_node), inserted);
 800916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	2418      	movs	r4, #24
 8009172:	193b      	adds	r3, r7, r4
 8009174:	0018      	movs	r0, r3
 8009176:	f000 fa4d 	bl	8009614 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	197a      	adds	r2, r7, r5
 800917e:	1939      	adds	r1, r7, r4
 8009180:	0018      	movs	r0, r3
 8009182:	f000 fa58 	bl	8009636 <_ZSt9make_pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSB_IT0_E6__typeEEOSC_OSF_>
 8009186:	193b      	adds	r3, r7, r4
 8009188:	0018      	movs	r0, r3
 800918a:	f000 f80d 	bl	80091a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 800918e:	46c0      	nop			; (mov r8, r8)
    }
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	46bd      	mov	sp, r7
 8009194:	b00a      	add	sp, #40	; 0x28
 8009196:	bdb0      	pop	{r4, r5, r7, pc}
 8009198:	08013380 	.word	0x08013380
 800919c:	0801338c 	.word	0x0801338c
 80091a0:	000004a7 	.word	0x000004a7
 80091a4:	080135a0 	.word	0x080135a0

080091a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>:
      ~iterator()
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
      }
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	0018      	movs	r0, r3
 80091b4:	46bd      	mov	sp, r7
 80091b6:	b002      	add	sp, #8
 80091b8:	bd80      	pop	{r7, pc}

080091ba <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE4findERKt>:
    iterator find(key_parameter_t key)
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	60b9      	str	r1, [r7, #8]
 80091c4:	607a      	str	r2, [r7, #4]
      return iterator(*this, find_node(root_node, key));
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6899      	ldr	r1, [r3, #8]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	0018      	movs	r0, r3
 80091d0:	f000 fa5c 	bl	800968c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>
 80091d4:	0002      	movs	r2, r0
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	0018      	movs	r0, r3
 80091dc:	f000 fa1a 	bl	8009614 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
    }
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	46bd      	mov	sp, r7
 80091e4:	b004      	add	sp, #16
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratordeEv>:
      reference operator *() const
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	0018      	movs	r0, r3
 80091f6:	f000 fa78 	bl	80096ea <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPNS_8map_base4NodeE>
 80091fa:	0003      	movs	r3, r0
 80091fc:	330c      	adds	r3, #12
      }
 80091fe:	0018      	movs	r0, r3
 8009200:	46bd      	mov	sp, r7
 8009202:	b002      	add	sp, #8
 8009204:	bd80      	pop	{r7, pc}

08009206 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEEC1ERNS_5ipoolEj>:
    imap(etl::ipool& node_pool, size_t max_size_)
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
      , p_node_pool(&node_pool)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	0011      	movs	r1, r2
 8009218:	0018      	movs	r0, r3
 800921a:	f7ff f988 	bl	800852e <_ZN3etl8map_baseC1Ej>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	60da      	str	r2, [r3, #12]
    }
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	0018      	movs	r0, r3
 8009228:	46bd      	mov	sp, r7
 800922a:	b004      	add	sp, #16
 800922c:	bd80      	pop	{r7, pc}

0800922e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEED1Ev>:
    ~imap()
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
    }
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	0018      	movs	r0, r3
 800923a:	f7ff f98b 	bl	8008554 <_ZN3etl8map_baseD1Ev>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	0018      	movs	r0, r3
 8009242:	46bd      	mov	sp, r7
 8009244:	b002      	add	sp, #8
 8009246:	bd80      	pop	{r7, pc}

08009248 <_ZN3etl4poolINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeELj10EEC1Ev>:
    using base_t::TYPE_SIZE;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    pool()
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
    {
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	0018      	movs	r0, r3
 8009254:	f000 fa52 	bl	80096fc <_ZN3etl12generic_poolILj60ELj4ELj10EEC1Ev>
    }
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	0018      	movs	r0, r3
 800925c:	46bd      	mov	sp, r7
 800925e:	b002      	add	sp, #8
 8009260:	bd80      	pop	{r7, pc}

08009262 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv>:
    void initialise()
 8009262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009264:	b091      	sub	sp, #68	; 0x44
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
      const_iterator item = begin();
 800926a:	2410      	movs	r4, #16
 800926c:	193b      	adds	r3, r7, r4
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	0011      	movs	r1, r2
 8009272:	0018      	movs	r0, r3
 8009274:	f000 fa53 	bl	800971e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5beginEv>
 8009278:	193a      	adds	r2, r7, r4
 800927a:	2308      	movs	r3, #8
 800927c:	18fb      	adds	r3, r7, r3
 800927e:	0011      	movs	r1, r2
 8009280:	0018      	movs	r0, r3
 8009282:	f000 fa62 	bl	800974a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>
 8009286:	193b      	adds	r3, r7, r4
 8009288:	0018      	movs	r0, r3
 800928a:	f7ff ff8d 	bl	80091a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
      while (item != end())
 800928e:	2520      	movs	r5, #32
 8009290:	197b      	adds	r3, r7, r5
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	0011      	movs	r1, r2
 8009296:	0018      	movs	r0, r3
 8009298:	f000 fa84 	bl	80097a4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE3endEv>
 800929c:	197a      	adds	r2, r7, r5
 800929e:	2618      	movs	r6, #24
 80092a0:	19bb      	adds	r3, r7, r6
 80092a2:	0011      	movs	r1, r2
 80092a4:	0018      	movs	r0, r3
 80092a6:	f000 fa50 	bl	800974a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>
 80092aa:	19ba      	adds	r2, r7, r6
 80092ac:	2408      	movs	r4, #8
 80092ae:	193b      	adds	r3, r7, r4
 80092b0:	0011      	movs	r1, r2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f000 fa85 	bl	80097c2 <_ZN3etlneERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>
 80092b8:	0003      	movs	r3, r0
 80092ba:	001c      	movs	r4, r3
 80092bc:	19bb      	adds	r3, r7, r6
 80092be:	0018      	movs	r0, r3
 80092c0:	f000 fa55 	bl	800976e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
 80092c4:	197b      	adds	r3, r7, r5
 80092c6:	0018      	movs	r0, r3
 80092c8:	f7ff ff6e 	bl	80091a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d02a      	beq.n	8009326 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv+0xc4>
        item = erase(item);
 80092d0:	2408      	movs	r4, #8
 80092d2:	193a      	adds	r2, r7, r4
 80092d4:	2538      	movs	r5, #56	; 0x38
 80092d6:	197b      	adds	r3, r7, r5
 80092d8:	0011      	movs	r1, r2
 80092da:	0018      	movs	r0, r3
 80092dc:	f000 fa50 	bl	8009780 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKS7_>
 80092e0:	2630      	movs	r6, #48	; 0x30
 80092e2:	19bb      	adds	r3, r7, r6
 80092e4:	197a      	adds	r2, r7, r5
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	0018      	movs	r0, r3
 80092ea:	f000 fa7e 	bl	80097ea <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5eraseENS6_14const_iteratorE>
 80092ee:	19ba      	adds	r2, r7, r6
 80092f0:	2328      	movs	r3, #40	; 0x28
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	0011      	movs	r1, r2
 80092f6:	0018      	movs	r0, r3
 80092f8:	f000 fa27 	bl	800974a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>
 80092fc:	2328      	movs	r3, #40	; 0x28
 80092fe:	18fa      	adds	r2, r7, r3
 8009300:	193b      	adds	r3, r7, r4
 8009302:	0011      	movs	r1, r2
 8009304:	0018      	movs	r0, r3
 8009306:	f000 fa9f 	bl	8009848 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratoraSERKS7_>
 800930a:	2328      	movs	r3, #40	; 0x28
 800930c:	18fb      	adds	r3, r7, r3
 800930e:	0018      	movs	r0, r3
 8009310:	f000 fa2d 	bl	800976e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
 8009314:	19bb      	adds	r3, r7, r6
 8009316:	0018      	movs	r0, r3
 8009318:	f7ff ff46 	bl	80091a8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorD1Ev>
 800931c:	197b      	adds	r3, r7, r5
 800931e:	0018      	movs	r0, r3
 8009320:	f000 fa25 	bl	800976e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
      while (item != end())
 8009324:	e7b3      	b.n	800928e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE10initialiseEv+0x2c>
      const_iterator item = begin();
 8009326:	2308      	movs	r3, #8
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	0018      	movs	r0, r3
 800932c:	f000 fa1f 	bl	800976e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>
    }
 8009330:	46c0      	nop			; (mov r8, r8)
 8009332:	46bd      	mov	sp, r7
 8009334:	b011      	add	sp, #68	; 0x44
 8009336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009338 <_ZN3etl7forwardIRtEEOT_RNS_16remove_referenceIS2_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8009340:	687b      	ldr	r3, [r7, #4]
  }
 8009342:	0018      	movs	r0, r3
 8009344:	46bd      	mov	sp, r7
 8009346:	b002      	add	sp, #8
 8009348:	bd80      	pop	{r7, pc}

0800934a <_ZN3etl7forwardIRN11SolarGators7Drivers6ButtonEEEOT_RNS_16remove_referenceIS5_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800934a:	b580      	push	{r7, lr}
 800934c:	b082      	sub	sp, #8
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 8009352:	687b      	ldr	r3, [r7, #4]
  }
 8009354:	0018      	movs	r0, r3
 8009356:	46bd      	mov	sp, r7
 8009358:	b002      	add	sp, #8
 800935a:	bd80      	pop	{r7, pc}

0800935c <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1ES1_S5_>:
    ETL_CONSTEXPR14 pair(const T1& a, const T2& b)
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
      , second(b)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	605a      	str	r2, [r3, #4]
    }
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	0018      	movs	r0, r3
 8009378:	46bd      	mov	sp, r7
 800937a:	b004      	add	sp, #16
 800937c:	bd80      	pop	{r7, pc}

0800937e <_ZN3etl4pairIRtRN11SolarGators7Drivers6ButtonEEC1IS1_S5_EEONS0_IT_T0_EE>:
    ETL_CONSTEXPR14 pair(pair<U1, U2>&& other)
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
      : first(etl::forward<U1>(other.first))
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	0018      	movs	r0, r3
 800938e:	f7ff ffd3 	bl	8009338 <_ZN3etl7forwardIRtEEOT_RNS_16remove_referenceIS2_E4typeE>
 8009392:	0002      	movs	r2, r0
      , second(etl::forward<U2>(other.second))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	0018      	movs	r0, r3
 800939e:	f7ff ffd4 	bl	800934a <_ZN3etl7forwardIRN11SolarGators7Drivers6ButtonEEEOT_RNS_16remove_referenceIS5_E4typeE>
 80093a2:	0002      	movs	r2, r0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	605a      	str	r2, [r3, #4]
    }
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	0018      	movs	r0, r3
 80093ac:	46bd      	mov	sp, r7
 80093ae:	b002      	add	sp, #8
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <_ZSt9make_pairIRtRN11SolarGators7Drivers6ButtonEESt4pairINSt17__decay_and_stripIT_E6__typeENS6_IT0_E6__typeEEOS7_OSA_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 80093b2:	b590      	push	{r4, r7, lr}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	0018      	movs	r0, r3
 80093c2:	f000 fa53 	bl	800986c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80093c6:	0004      	movs	r4, r0
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	0018      	movs	r0, r3
 80093cc:	f000 fa57 	bl	800987e <_ZSt7forwardIRN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS4_E4typeE>
 80093d0:	0002      	movs	r2, r0
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	0021      	movs	r1, r4
 80093d6:	0018      	movs	r0, r3
 80093d8:	f000 fa5a 	bl	8009890 <_ZNSt4pairItN11SolarGators7Drivers6ButtonEEC1IRtRS2_Lb1EEEOT_OT0_>
    }
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	46bd      	mov	sp, r7
 80093e0:	b005      	add	sp, #20
 80093e2:	bd90      	pop	{r4, r7, pc}

080093e4 <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEEC1ItS3_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	0018      	movs	r0, r3
 80093f2:	f000 fa6b 	bl	80098cc <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80093f6:	0003      	movs	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 80093f8:	881a      	ldrh	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	801a      	strh	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	1d1c      	adds	r4, r3, #4
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3304      	adds	r3, #4
 8009406:	0018      	movs	r0, r3
 8009408:	f000 fa69 	bl	80098de <_ZSt7forwardIN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS3_E4typeE>
 800940c:	0003      	movs	r3, r0
 800940e:	0019      	movs	r1, r3
 8009410:	0020      	movs	r0, r4
 8009412:	f7ff fe01 	bl	8009018 <_ZN11SolarGators7Drivers6ButtonC1ERKS1_>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	0018      	movs	r0, r3
 800941a:	46bd      	mov	sp, r7
 800941c:	b003      	add	sp, #12
 800941e:	bd90      	pop	{r4, r7, pc}

08009420 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	0018      	movs	r0, r3
 800942e:	f7fa f848 	bl	80034c2 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	0018      	movs	r0, r3
 8009436:	f000 fa5b 	bl	80098f0 <_ZNKSt8functionIFvvEEcvbEv>
 800943a:	1e03      	subs	r3, r0, #0
 800943c:	d00d      	beq.n	800945a <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	2202      	movs	r2, #2
 8009448:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	609a      	str	r2, [r3, #8]
    }
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	0018      	movs	r0, r3
 800945e:	46bd      	mov	sp, r7
 8009460:	b002      	add	sp, #8
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZN3etl4moveIRSt4pairIKtN11SolarGators7Drivers6ButtonEEEEONS_16remove_referenceIT_E4typeEOS9_>:
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 800946c:	687b      	ldr	r3, [r7, #4]
  }
 800946e:	0018      	movs	r0, r3
 8009470:	46bd      	mov	sp, r7
 8009472:	b002      	add	sp, #8
 8009474:	bd80      	pop	{r7, pc}

08009476 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS3_E>:
    Data_Node& allocate_data_node(rvalue_reference value)
 8009476:	b590      	push	{r4, r7, lr}
 8009478:	b085      	sub	sp, #20
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
      Data_Node& node = create_data_node();
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	0018      	movs	r0, r3
 8009484:	f000 fa46 	bl	8009914 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv>
 8009488:	0003      	movs	r3, r0
 800948a:	60fb      	str	r3, [r7, #12]
      ::new (&node.value) value_type(etl::move(value));
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	0018      	movs	r0, r3
 8009490:	f7ff ffe8 	bl	8009464 <_ZN3etl4moveIRSt4pairIKtN11SolarGators7Drivers6ButtonEEEEONS_16remove_referenceIT_E4typeEOS9_>
 8009494:	0004      	movs	r4, r0
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	330c      	adds	r3, #12
 800949a:	0019      	movs	r1, r3
 800949c:	2030      	movs	r0, #48	; 0x30
 800949e:	f7f9 fff4 	bl	800348a <_ZnwjPv>
 80094a2:	0003      	movs	r3, r0
 80094a4:	0021      	movs	r1, r4
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7ff fdf0 	bl	800908c <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEEC1EOS4_>
      return node;
 80094ac:	68fb      	ldr	r3, [r7, #12]
    }
 80094ae:	0018      	movs	r0, r3
 80094b0:	46bd      	mov	sp, r7
 80094b2:	b005      	add	sp, #20
 80094b4:	bd90      	pop	{r4, r7, pc}

080094b6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE>:
    Node* insert_node(Node*& position, Data_Node& node)
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
      Node* found = position;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	61fb      	str	r3, [r7, #28]
      if (position)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d100      	bne.n	80094d2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x1c>
 80094d0:	e092      	b.n	80095f8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x142>
        Node* critical_parent_node = ETL_NULLPTR;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61bb      	str	r3, [r7, #24]
        Node* critical_node = root_node;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	617b      	str	r3, [r7, #20]
        while (found)
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d05b      	beq.n	800959a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xe4>
          if (kNeither != found->weight)
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	7a1b      	ldrb	r3, [r3, #8]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d001      	beq.n	80094ee <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x38>
            critical_node = found;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	617b      	str	r3, [r7, #20]
          Data_Node& found_data_node = imap::data_cast(*found);
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	0018      	movs	r0, r3
 80094f2:	f000 fa3d 	bl	8009970 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 80094f6:	0003      	movs	r3, r0
 80094f8:	613b      	str	r3, [r7, #16]
          if (node_comp(node, found_data_node))
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	0018      	movs	r0, r3
 8009502:	f000 fa3e 	bl	8009982 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 8009506:	1e03      	subs	r3, r0, #0
 8009508:	d003      	beq.n	8009512 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x5c>
            found->dir = kLeft;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	2200      	movs	r2, #0
 800950e:	725a      	strb	r2, [r3, #9]
 8009510:	e017      	b.n	8009542 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x8c>
          else if (node_comp(found_data_node, node))
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	6939      	ldr	r1, [r7, #16]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	0018      	movs	r0, r3
 800951a:	f000 fa32 	bl	8009982 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800951e:	1e03      	subs	r3, r0, #0
 8009520:	d003      	beq.n	800952a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x74>
            found->dir = kRight;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	2201      	movs	r2, #1
 8009526:	725a      	strb	r2, [r3, #9]
 8009528:	e00b      	b.n	8009542 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x8c>
            found->dir = kNeither;
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	2202      	movs	r2, #2
 800952e:	725a      	strb	r2, [r3, #9]
            critical_node = ETL_NULLPTR;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
            destroy_data_node(node);
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	0011      	movs	r1, r2
 800953a:	0018      	movs	r0, r3
 800953c:	f000 fa37 	bl	80099ae <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE17destroy_data_nodeERNS6_9Data_NodeE>
            break;
 8009540:	e02b      	b.n	800959a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xe4>
          if (found->children[found->dir])
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	7a5b      	ldrb	r3, [r3, #9]
 8009546:	001a      	movs	r2, r3
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	0092      	lsls	r2, r2, #2
 800954c:	58d3      	ldr	r3, [r2, r3]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d012      	beq.n	8009578 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xc2>
            if (kNeither != found->children[found->dir]->weight)
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	7a5b      	ldrb	r3, [r3, #9]
 8009556:	001a      	movs	r2, r3
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	0092      	lsls	r2, r2, #2
 800955c:	58d3      	ldr	r3, [r2, r3]
 800955e:	7a1b      	ldrb	r3, [r3, #8]
 8009560:	2b02      	cmp	r3, #2
 8009562:	d001      	beq.n	8009568 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0xb2>
              critical_parent_node = found;
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	61bb      	str	r3, [r7, #24]
            found = found->children[found->dir];
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	7a5b      	ldrb	r3, [r3, #9]
 800956c:	001a      	movs	r2, r3
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	0092      	lsls	r2, r2, #2
 8009572:	58d3      	ldr	r3, [r2, r3]
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	e7b1      	b.n	80094dc <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x26>
            attach_node(found->children[found->dir], node);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	7a5b      	ldrb	r3, [r3, #9]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	69fa      	ldr	r2, [r7, #28]
 8009582:	18d3      	adds	r3, r2, r3
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	0019      	movs	r1, r3
 8009588:	f7ff f93a 	bl	8008800 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
            found = found->children[found->dir];
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	7a5b      	ldrb	r3, [r3, #9]
 8009590:	001a      	movs	r2, r3
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	58d3      	ldr	r3, [r2, r3]
 8009598:	61fb      	str	r3, [r7, #28]
        if (critical_node)
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d034      	beq.n	800960a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x154>
          if (critical_parent_node == ETL_NULLPTR && critical_node == root_node)
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10c      	bne.n	80095c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x10a>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d107      	bne.n	80095c0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x10a>
            balance_node(root_node);
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3308      	adds	r3, #8
 80095b6:	0019      	movs	r1, r3
 80095b8:	0010      	movs	r0, r2
 80095ba:	f7fe ffd4 	bl	8008566 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 80095be:	e024      	b.n	800960a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x154>
          else if (critical_parent_node == ETL_NULLPTR && critical_node == position)
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x128>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d106      	bne.n	80095de <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x128>
            balance_node(position);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	0011      	movs	r1, r2
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7fe ffc5 	bl	8008566 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 80095dc:	e015      	b.n	800960a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x154>
            if (critical_parent_node != ETL_NULLPTR)
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d012      	beq.n	800960a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x154>
              balance_node(critical_parent_node->children[critical_parent_node->dir]);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	7a5b      	ldrb	r3, [r3, #9]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	18d3      	adds	r3, r2, r3
 80095f0:	0019      	movs	r1, r3
 80095f2:	f7fe ffb8 	bl	8008566 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 80095f6:	e008      	b.n	800960a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS6_9Data_NodeE+0x154>
        attach_node(position, node);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	0018      	movs	r0, r3
 8009600:	f7ff f8fe 	bl	8008800 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
        found = position;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	61fb      	str	r3, [r7, #28]
      return found;
 800960a:	69fb      	ldr	r3, [r7, #28]
    }
 800960c:	0018      	movs	r0, r3
 800960e:	46bd      	mov	sp, r7
 8009610:	b008      	add	sp, #32
 8009612:	bd80      	pop	{r7, pc}

08009614 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>:
      iterator(imap& map, Node* node)
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
        , p_node(node)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	605a      	str	r2, [r3, #4]
      }
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	0018      	movs	r0, r3
 8009630:	46bd      	mov	sp, r7
 8009632:	b004      	add	sp, #16
 8009634:	bd80      	pop	{r7, pc}

08009636 <_ZSt9make_pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSB_IT0_E6__typeEEOSC_OSF_>:
    make_pair(_T1&& __x, _T2&& __y)
 8009636:	b590      	push	{r4, r7, lr}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	0018      	movs	r0, r3
 8009646:	f000 f9c7 	bl	80099d8 <_ZSt7forwardIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceIS9_E4typeE>
 800964a:	0004      	movs	r4, r0
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	0018      	movs	r0, r3
 8009650:	f000 f9cb 	bl	80099ea <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8009654:	0002      	movs	r2, r0
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	0021      	movs	r1, r4
 800965a:	0018      	movs	r0, r3
 800965c:	f000 f9ce 	bl	80099fc <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbEC1IS8_RbLb1EEEOT_OT0_>
    }
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	46bd      	mov	sp, r7
 8009664:	b005      	add	sp, #20
 8009666:	bd90      	pop	{r4, r7, pc}

08009668 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERKS7_>:
      iterator(const iterator& other)
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
      }
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	0018      	movs	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	b002      	add	sp, #8
 800968a:	bd80      	pop	{r7, pc}

0800968c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>:
    Node* find_node(Node* position, key_parameter_t key)
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
      Node* found = position;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	617b      	str	r3, [r7, #20]
      while (found)
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d01e      	beq.n	80096e0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x54>
        Data_Node& found_data_node = imap::data_cast(*found);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	0018      	movs	r0, r3
 80096a6:	f000 f963 	bl	8009970 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 80096aa:	0003      	movs	r3, r0
 80096ac:	613b      	str	r3, [r7, #16]
        if (node_comp(key, found_data_node))
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	0018      	movs	r0, r3
 80096b6:	f000 f9be 	bl	8009a36 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKtRKNS6_9Data_NodeE>
 80096ba:	1e03      	subs	r3, r0, #0
 80096bc:	d003      	beq.n	80096c6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x3a>
          found = found->children[kLeft];
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	e7ea      	b.n	800969c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
        else if (node_comp(found_data_node, key))
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	6939      	ldr	r1, [r7, #16]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	0018      	movs	r0, r3
 80096ce:	f000 f9c7 	bl	8009a60 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeERKt>
 80096d2:	1e03      	subs	r3, r0, #0
 80096d4:	d003      	beq.n	80096de <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x52>
          found = found->children[kRight];
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	617b      	str	r3, [r7, #20]
      while (found)
 80096dc:	e7de      	b.n	800969c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
          break;
 80096de:	46c0      	nop			; (mov r8, r8)
      return found;
 80096e0:	697b      	ldr	r3, [r7, #20]
    }
 80096e2:	0018      	movs	r0, r3
 80096e4:	46bd      	mov	sp, r7
 80096e6:	b006      	add	sp, #24
 80096e8:	bd80      	pop	{r7, pc}

080096ea <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPNS_8map_base4NodeE>:
    static Data_Node* data_cast(Node* p_node)
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node*>(p_node);
 80096f2:	687b      	ldr	r3, [r7, #4]
    }
 80096f4:	0018      	movs	r0, r3
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b002      	add	sp, #8
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZN3etl12generic_poolILj60ELj4ELj10EEC1Ev>:
    static ETL_CONSTANT size_t TYPE_SIZE = VTypeSize;

    //*************************************************************************
    /// Constructor
    //*************************************************************************
    generic_pool()
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
      : etl::ipool(reinterpret_cast<char*>(&buffer[0]), Element_Size, VSize)
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3318      	adds	r3, #24
 800970a:	0019      	movs	r1, r3
 800970c:	230a      	movs	r3, #10
 800970e:	223c      	movs	r2, #60	; 0x3c
 8009710:	f7fe fe01 	bl	8008316 <_ZN3etl5ipoolC1EPcmm>
    {
    }
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	0018      	movs	r0, r3
 8009718:	46bd      	mov	sp, r7
 800971a:	b002      	add	sp, #8
 800971c:	bd80      	pop	{r7, pc}

0800971e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5beginEv>:
    iterator begin()
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
      return iterator(*this, find_limit_node(root_node, kLeft));
 8009728:	6838      	ldr	r0, [r7, #0]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	2200      	movs	r2, #0
 8009730:	0019      	movs	r1, r3
 8009732:	f7ff f844 	bl	80087be <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 8009736:	0002      	movs	r2, r0
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	0018      	movs	r0, r3
 800973e:	f7ff ff69 	bl	8009614 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
    }
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	46bd      	mov	sp, r7
 8009746:	b002      	add	sp, #8
 8009748:	bd80      	pop	{r7, pc}

0800974a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKNS6_8iteratorE>:
      const_iterator(const typename imap::iterator& other)
 800974a:	b580      	push	{r7, lr}
 800974c:	b082      	sub	sp, #8
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	605a      	str	r2, [r3, #4]
      }
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	0018      	movs	r0, r3
 8009768:	46bd      	mov	sp, r7
 800976a:	b002      	add	sp, #8
 800976c:	bd80      	pop	{r7, pc}

0800976e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorD1Ev>:
      ~const_iterator()
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
      }
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	0018      	movs	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	b002      	add	sp, #8
 800977e:	bd80      	pop	{r7, pc}

08009780 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorC1ERKS7_>:
      const_iterator(const const_iterator& other)
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	605a      	str	r2, [r3, #4]
      }
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	0018      	movs	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	b002      	add	sp, #8
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE3endEv>:
    iterator end()
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
      return iterator(*this);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	0011      	movs	r1, r2
 80097b4:	0018      	movs	r0, r3
 80097b6:	f000 f967 	bl	8009a88 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_>
    }
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	46bd      	mov	sp, r7
 80097be:	b002      	add	sp, #8
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <_ZN3etlneERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>:
      friend bool operator != (const const_iterator& lhs, const const_iterator& rhs)
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
        return !(lhs == rhs);
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	0011      	movs	r1, r2
 80097d2:	0018      	movs	r0, r3
 80097d4:	f000 f968 	bl	8009aa8 <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>
 80097d8:	0003      	movs	r3, r0
 80097da:	001a      	movs	r2, r3
 80097dc:	2301      	movs	r3, #1
 80097de:	4053      	eors	r3, r2
 80097e0:	b2db      	uxtb	r3, r3
      }
 80097e2:	0018      	movs	r0, r3
 80097e4:	46bd      	mov	sp, r7
 80097e6:	b002      	add	sp, #8
 80097e8:	bd80      	pop	{r7, pc}

080097ea <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE5eraseENS6_14const_iteratorE>:
    iterator erase(const_iterator position)
 80097ea:	b590      	push	{r4, r7, lr}
 80097ec:	b087      	sub	sp, #28
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
      Node*& reference_node = find_node(root_node, position.p_node);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	3308      	adds	r3, #8
 80097fa:	0019      	movs	r1, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	0018      	movs	r0, r3
 8009804:	f000 f968 	bl	8009ad8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_>
 8009808:	0003      	movs	r3, r0
 800980a:	617b      	str	r3, [r7, #20]
      iterator next(*this, reference_node);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	0018      	movs	r0, r3
 8009816:	f7ff fefd 	bl	8009614 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_PNS_8map_base4NodeE>
      ++next;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	0018      	movs	r0, r3
 800981e:	f000 f9a2 	bl	8009b66 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorppEv>
      remove_node(root_node, (*position).first);
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3308      	adds	r3, #8
 8009826:	001c      	movs	r4, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	0018      	movs	r0, r3
 800982c:	f000 f9ac 	bl	8009b88 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratordeEv>
 8009830:	0003      	movs	r3, r0
 8009832:	001a      	movs	r2, r3
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	0021      	movs	r1, r4
 8009838:	0018      	movs	r0, r3
 800983a:	f000 f9b4 	bl	8009ba6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>
      return next;
 800983e:	46c0      	nop			; (mov r8, r8)
    }
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	46bd      	mov	sp, r7
 8009844:	b007      	add	sp, #28
 8009846:	bd90      	pop	{r4, r7, pc}

08009848 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratoraSERKS7_>:
      const_iterator& operator =(const const_iterator& other)
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
        p_map = other.p_map;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	601a      	str	r2, [r3, #0]
        p_node = other.p_node;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	605a      	str	r2, [r3, #4]
        return *this;
 8009862:	687b      	ldr	r3, [r7, #4]
      }
 8009864:	0018      	movs	r0, r3
 8009866:	46bd      	mov	sp, r7
 8009868:	b002      	add	sp, #8
 800986a:	bd80      	pop	{r7, pc}

0800986c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	0018      	movs	r0, r3
 8009878:	46bd      	mov	sp, r7
 800987a:	b002      	add	sp, #8
 800987c:	bd80      	pop	{r7, pc}

0800987e <_ZSt7forwardIRN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	0018      	movs	r0, r3
 800988a:	46bd      	mov	sp, r7
 800988c:	b002      	add	sp, #8
 800988e:	bd80      	pop	{r7, pc}

08009890 <_ZNSt4pairItN11SolarGators7Drivers6ButtonEEC1IRtRS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8009890:	b590      	push	{r4, r7, lr}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	0018      	movs	r0, r3
 80098a0:	f7ff ffe4 	bl	800986c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80098a4:	0003      	movs	r3, r0
 80098a6:	881a      	ldrh	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	1d1c      	adds	r4, r3, #4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	0018      	movs	r0, r3
 80098b4:	f7ff ffe3 	bl	800987e <_ZSt7forwardIRN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS4_E4typeE>
 80098b8:	0003      	movs	r3, r0
 80098ba:	0019      	movs	r1, r3
 80098bc:	0020      	movs	r0, r4
 80098be:	f7ff fbab 	bl	8009018 <_ZN11SolarGators7Drivers6ButtonC1ERKS1_>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	0018      	movs	r0, r3
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b005      	add	sp, #20
 80098ca:	bd90      	pop	{r4, r7, pc}

080098cc <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	0018      	movs	r0, r3
 80098d8:	46bd      	mov	sp, r7
 80098da:	b002      	add	sp, #8
 80098dc:	bd80      	pop	{r7, pc}

080098de <_ZSt7forwardIN11SolarGators7Drivers6ButtonEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	0018      	movs	r0, r3
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b002      	add	sp, #8
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	0018      	movs	r0, r3
 80098fc:	f7fe fced 	bl	80082da <_ZNKSt14_Function_base8_M_emptyEv>
 8009900:	0003      	movs	r3, r0
 8009902:	001a      	movs	r2, r3
 8009904:	2301      	movs	r3, #1
 8009906:	4053      	eors	r3, r2
 8009908:	b2db      	uxtb	r3, r3
 800990a:	0018      	movs	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	b002      	add	sp, #8
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv>:
    Data_Node& create_data_node()
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
      Data_Node* (etl::ipool::*func)() = &etl::ipool::allocate<Data_Node>;
 800991c:	2008      	movs	r0, #8
 800991e:	183b      	adds	r3, r7, r0
 8009920:	4a12      	ldr	r2, [pc, #72]	; (800996c <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv+0x58>)
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	183b      	adds	r3, r7, r0
 8009926:	2200      	movs	r2, #0
 8009928:	605a      	str	r2, [r3, #4]
      return *(p_node_pool->*func)();
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	183b      	adds	r3, r7, r0
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	105b      	asrs	r3, r3, #1
 8009934:	18d1      	adds	r1, r2, r3
 8009936:	183b      	adds	r3, r7, r0
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	4013      	ands	r3, r2
 800993e:	d102      	bne.n	8009946 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv+0x32>
 8009940:	183b      	adds	r3, r7, r0
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	e00b      	b.n	800995e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16create_data_nodeEv+0x4a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	2008      	movs	r0, #8
 800994c:	183b      	adds	r3, r7, r0
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	105b      	asrs	r3, r3, #1
 8009952:	18d3      	adds	r3, r2, r3
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	183b      	adds	r3, r7, r0
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	18d3      	adds	r3, r2, r3
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	0008      	movs	r0, r1
 8009960:	4798      	blx	r3
 8009962:	0003      	movs	r3, r0
    }
 8009964:	0018      	movs	r0, r3
 8009966:	46bd      	mov	sp, r7
 8009968:	b004      	add	sp, #16
 800996a:	bd80      	pop	{r7, pc}
 800996c:	08009ef9 	.word	0x08009ef9

08009970 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>:
    static Data_Node& data_cast(Node& node)
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node&>(node);
 8009978:	687b      	ldr	r3, [r7, #4]
    }
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	b002      	add	sp, #8
 8009980:	bd80      	pop	{r7, pc}

08009982 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>:
    bool node_comp(const Data_Node& node1, const Data_Node& node2) const
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	607a      	str	r2, [r7, #4]
      return kcompare(node1.value.first, node2.value.first);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3310      	adds	r3, #16
 8009992:	0018      	movs	r0, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	330c      	adds	r3, #12
 8009998:	0019      	movs	r1, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	330c      	adds	r3, #12
 800999e:	001a      	movs	r2, r3
 80099a0:	f000 fac8 	bl	8009f34 <_ZNK3etl4lessItEclERKtS3_>
 80099a4:	0003      	movs	r3, r0
    }
 80099a6:	0018      	movs	r0, r3
 80099a8:	46bd      	mov	sp, r7
 80099aa:	b004      	add	sp, #16
 80099ac:	bd80      	pop	{r7, pc}

080099ae <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE17destroy_data_nodeERNS6_9Data_NodeE>:
    void destroy_data_node(Data_Node& node)
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
      node.value.~value_type();
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	330c      	adds	r3, #12
 80099bc:	0018      	movs	r0, r3
 80099be:	f7ff fa2e 	bl	8008e1e <_ZNSt4pairIKtN11SolarGators7Drivers6ButtonEED1Ev>
      p_node_pool->release(&node);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	0011      	movs	r1, r2
 80099ca:	0018      	movs	r0, r3
 80099cc:	f7fe fc92 	bl	80082f4 <_ZN3etl5ipool7releaseEPKv>
    }
 80099d0:	46c0      	nop			; (mov r8, r8)
 80099d2:	46bd      	mov	sp, r7
 80099d4:	b002      	add	sp, #8
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_ZSt7forwardIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	0018      	movs	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b002      	add	sp, #8
 80099e8:	bd80      	pop	{r7, pc}

080099ea <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	0018      	movs	r0, r3
 80099f6:	46bd      	mov	sp, r7
 80099f8:	b002      	add	sp, #8
 80099fa:	bd80      	pop	{r7, pc}

080099fc <_ZNSt4pairIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEbEC1IS8_RbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80099fc:	b590      	push	{r4, r7, lr}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8009a08:	68fc      	ldr	r4, [r7, #12]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f7ff ffe3 	bl	80099d8 <_ZSt7forwardIN3etl4imapItN11SolarGators7Drivers6ButtonENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceIS9_E4typeE>
 8009a12:	0003      	movs	r3, r0
 8009a14:	0019      	movs	r1, r3
 8009a16:	0020      	movs	r0, r4
 8009a18:	f7ff fe26 	bl	8009668 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERKS7_>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	0018      	movs	r0, r3
 8009a20:	f7ff ffe3 	bl	80099ea <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8009a24:	0003      	movs	r3, r0
 8009a26:	781a      	ldrb	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	721a      	strb	r2, [r3, #8]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	0018      	movs	r0, r3
 8009a30:	46bd      	mov	sp, r7
 8009a32:	b005      	add	sp, #20
 8009a34:	bd90      	pop	{r4, r7, pc}

08009a36 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKtRKNS6_9Data_NodeE>:
    bool node_comp(key_parameter_t key, const Data_Node& node) const
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
      return kcompare(key, node.value.first);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3310      	adds	r3, #16
 8009a46:	0018      	movs	r0, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	330c      	adds	r3, #12
 8009a4c:	001a      	movs	r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	0019      	movs	r1, r3
 8009a52:	f000 fa6f 	bl	8009f34 <_ZNK3etl4lessItEclERKtS3_>
 8009a56:	0003      	movs	r3, r0
    }
 8009a58:	0018      	movs	r0, r3
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b004      	add	sp, #16
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeERKt>:
    bool node_comp(const Data_Node& node, key_parameter_t key) const
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
      return kcompare(node.value.first, key);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	3310      	adds	r3, #16
 8009a70:	0018      	movs	r0, r3
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	330c      	adds	r3, #12
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	0019      	movs	r1, r3
 8009a7a:	f000 fa5b 	bl	8009f34 <_ZNK3etl4lessItEclERKtS3_>
 8009a7e:	0003      	movs	r3, r0
    }
 8009a80:	0018      	movs	r0, r3
 8009a82:	46bd      	mov	sp, r7
 8009a84:	b004      	add	sp, #16
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorC1ERS6_>:
      iterator(imap& map)
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
        , p_node(ETL_NULLPTR)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	605a      	str	r2, [r3, #4]
      }
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	b002      	add	sp, #8
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_>:
      friend bool operator == (const const_iterator& lhs, const const_iterator& rhs)
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
        return lhs.p_map == rhs.p_map && lhs.p_node == rhs.p_node;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d107      	bne.n	8009ace <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_+0x26>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d101      	bne.n	8009ace <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_+0x26>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <_ZN3etleqERKNS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratorES9_+0x28>
 8009ace:	2300      	movs	r3, #0
      }
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	b002      	add	sp, #8
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_>:
    Node*& find_node(Node*& position, const Node* node)
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
      Node* found = position;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	61fb      	str	r3, [r7, #28]
      while (found)
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d034      	beq.n	8009b5a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x82>
        if (found->children[kLeft] == node)
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d101      	bne.n	8009afe <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x26>
          return found->children[kLeft];
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	e02f      	b.n	8009b5e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x86>
        else if (found->children[kRight] == node)
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d102      	bne.n	8009b0e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x36>
          return found->children[kRight];
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	e027      	b.n	8009b5e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x86>
          Data_Node& found_data_node = imap::data_cast(*found);
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	0018      	movs	r0, r3
 8009b12:	f7ff ff2d 	bl	8009970 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8009b16:	0003      	movs	r3, r0
 8009b18:	61bb      	str	r3, [r7, #24]
          const Data_Node& data_node = imap::data_cast(*node);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f000 fa1b 	bl	8009f58 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 8009b22:	0003      	movs	r3, r0
 8009b24:	617b      	str	r3, [r7, #20]
          if (node_comp(data_node, found_data_node))
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	6979      	ldr	r1, [r7, #20]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f7ff ff28 	bl	8009982 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 8009b32:	1e03      	subs	r3, r0, #0
 8009b34:	d003      	beq.n	8009b3e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x66>
            found = found->children[kLeft];
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	61fb      	str	r3, [r7, #28]
 8009b3c:	e7d5      	b.n	8009aea <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x12>
          else if (node_comp(found_data_node, data_node))
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	69b9      	ldr	r1, [r7, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	0018      	movs	r0, r3
 8009b46:	f7ff ff1c 	bl	8009982 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 8009b4a:	1e03      	subs	r3, r0, #0
 8009b4c:	d003      	beq.n	8009b56 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x7e>
            found = found->children[kRight];
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	61fb      	str	r3, [r7, #28]
 8009b54:	e7c9      	b.n	8009aea <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x12>
            return position;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	e001      	b.n	8009b5e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS8_+0x86>
      return root_node;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3308      	adds	r3, #8
    }
 8009b5e:	0018      	movs	r0, r3
 8009b60:	46bd      	mov	sp, r7
 8009b62:	b008      	add	sp, #32
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE8iteratorppEv>:
      iterator& operator ++()
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
        p_map->next_node(p_node);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3304      	adds	r3, #4
 8009b76:	0019      	movs	r1, r3
 8009b78:	0010      	movs	r0, r2
 8009b7a:	f000 f9f6 	bl	8009f6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>
        return *this;
 8009b7e:	687b      	ldr	r3, [r7, #4]
      }
 8009b80:	0018      	movs	r0, r3
 8009b82:	46bd      	mov	sp, r7
 8009b84:	b002      	add	sp, #8
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE14const_iteratordeEv>:
      const_reference operator *() const
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	0018      	movs	r0, r3
 8009b96:	f000 fa23 	bl	8009fe0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	330c      	adds	r3, #12
      }
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	b002      	add	sp, #8
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>:
    Node* remove_node(Node*& position, key_parameter_t key)
 8009ba6:	b590      	push	{r4, r7, lr}
 8009ba8:	b08f      	sub	sp, #60	; 0x3c
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
      Node* found_parent = ETL_NULLPTR;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	637b      	str	r3, [r7, #52]	; 0x34
      Node* found = ETL_NULLPTR;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	633b      	str	r3, [r7, #48]	; 0x30
      Node* replace_parent = ETL_NULLPTR;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      Node* replace = position;
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      Node* balance_parent = ETL_NULLPTR;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
      Node* balance = root_node;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	623b      	str	r3, [r7, #32]
      while (replace)
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d059      	beq.n	8009c88 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe2>
        Data_Node& replace_data_node = imap::data_cast(*replace);
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	0018      	movs	r0, r3
 8009bd8:	f7ff feca 	bl	8009970 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	61fb      	str	r3, [r7, #28]
        if (node_comp(key, replace_data_node))
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	6879      	ldr	r1, [r7, #4]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	0018      	movs	r0, r3
 8009be8:	f7ff ff25 	bl	8009a36 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKtRKNS6_9Data_NodeE>
 8009bec:	1e03      	subs	r3, r0, #0
 8009bee:	d003      	beq.n	8009bf8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x52>
          replace->dir = kLeft;
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	725a      	strb	r2, [r3, #9]
 8009bf6:	e017      	b.n	8009c28 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
        else if (node_comp(replace_data_node, key))
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	69f9      	ldr	r1, [r7, #28]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f7ff ff2e 	bl	8009a60 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeERKt>
 8009c04:	1e03      	subs	r3, r0, #0
 8009c06:	d003      	beq.n	8009c10 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x6a>
          replace->dir = kRight;
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	725a      	strb	r2, [r3, #9]
 8009c0e:	e00b      	b.n	8009c28 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
          replace->dir = replace->children[kLeft] ? kLeft : kRight;
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	425a      	negs	r2, r3
 8009c16:	4153      	adcs	r3, r2
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	001a      	movs	r2, r3
 8009c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1e:	725a      	strb	r2, [r3, #9]
          found_parent = replace_parent;
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	637b      	str	r3, [r7, #52]	; 0x34
          found = replace;
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	633b      	str	r3, [r7, #48]	; 0x30
        if (replace->children[replace->dir] == ETL_NULLPTR)
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	7a5b      	ldrb	r3, [r3, #9]
 8009c2c:	001a      	movs	r2, r3
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	0092      	lsls	r2, r2, #2
 8009c32:	58d3      	ldr	r3, [r2, r3]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d026      	beq.n	8009c86 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe0>
        if ((replace->weight == kNeither) ||
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	7a1b      	ldrb	r3, [r3, #8]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d014      	beq.n	8009c6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xc4>
          (replace->weight == (1 - replace->dir) &&
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	7a1b      	ldrb	r3, [r3, #8]
 8009c44:	001a      	movs	r2, r3
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	7a5b      	ldrb	r3, [r3, #9]
 8009c4a:	0019      	movs	r1, r3
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	1a5b      	subs	r3, r3, r1
        if ((replace->weight == kNeither) ||
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d10e      	bne.n	8009c72 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
            replace->children[1 - replace->dir]->weight == kNeither))
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	7a5b      	ldrb	r3, [r3, #9]
 8009c58:	001a      	movs	r2, r3
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	1a9a      	subs	r2, r3, r2
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	58d3      	ldr	r3, [r2, r3]
 8009c64:	7a1b      	ldrb	r3, [r3, #8]
          (replace->weight == (1 - replace->dir) &&
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d103      	bne.n	8009c72 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
          balance_parent = replace_parent;
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
          balance = replace;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	623b      	str	r3, [r7, #32]
        replace_parent = replace;
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        replace = replace->children[replace->dir];
 8009c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c78:	7a5b      	ldrb	r3, [r3, #9]
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	0092      	lsls	r2, r2, #2
 8009c80:	58d3      	ldr	r3, [r2, r3]
 8009c82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (replace)
 8009c84:	e7a3      	b.n	8009bce <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x28>
          break;
 8009c86:	46c0      	nop			; (mov r8, r8)
      if (found)
 8009c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d100      	bne.n	8009c90 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
 8009c8e:	e12e      	b.n	8009eee <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x348>
        while (balance)
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d100      	bne.n	8009c98 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xf2>
 8009c96:	e0ee      	b.n	8009e76 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2d0>
          if (balance->children[balance->dir] == ETL_NULLPTR)
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	7a5b      	ldrb	r3, [r3, #9]
 8009c9c:	001a      	movs	r2, r3
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	0092      	lsls	r2, r2, #2
 8009ca2:	58d3      	ldr	r3, [r2, r3]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d100      	bne.n	8009caa <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x104>
 8009ca8:	e0e4      	b.n	8009e74 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ce>
          if (balance->weight == kNeither)
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	7a1b      	ldrb	r3, [r3, #8]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d107      	bne.n	8009cc2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x11c>
            balance->weight = 1 - balance->dir;
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	7a5b      	ldrb	r3, [r3, #9]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	721a      	strb	r2, [r3, #8]
 8009cc0:	e0ce      	b.n	8009e60 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
          else if (balance->weight == balance->dir)
 8009cc2:	6a3b      	ldr	r3, [r7, #32]
 8009cc4:	7a1a      	ldrb	r2, [r3, #8]
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	7a5b      	ldrb	r3, [r3, #9]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d103      	bne.n	8009cd6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x130>
            balance->weight = kNeither;
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	721a      	strb	r2, [r3, #8]
 8009cd4:	e0c4      	b.n	8009e60 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
            int weight = balance->children[1 - balance->dir]->weight;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	7a5b      	ldrb	r3, [r3, #9]
 8009cda:	001a      	movs	r2, r3
 8009cdc:	2301      	movs	r3, #1
 8009cde:	1a9a      	subs	r2, r3, r2
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	0092      	lsls	r2, r2, #2
 8009ce4:	58d3      	ldr	r3, [r2, r3]
 8009ce6:	7a1b      	ldrb	r3, [r3, #8]
 8009ce8:	61bb      	str	r3, [r7, #24]
            if (weight == balance->dir)
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	7a5b      	ldrb	r3, [r3, #9]
 8009cee:	001a      	movs	r2, r3
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d138      	bne.n	8009d68 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1c2>
              if (balance_parent == ETL_NULLPTR)
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d119      	bne.n	8009d30 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x18a>
                rotate_3node(root_node, 1 - balance->dir,
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3308      	adds	r3, #8
 8009d02:	0019      	movs	r1, r3
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	7a5b      	ldrb	r3, [r3, #9]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	7a5b      	ldrb	r3, [r3, #9]
 8009d12:	001a      	movs	r2, r3
 8009d14:	2301      	movs	r3, #1
 8009d16:	1a9a      	subs	r2, r3, r2
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	0092      	lsls	r2, r2, #2
 8009d1c:	58d3      	ldr	r3, [r2, r3]
 8009d1e:	6a3a      	ldr	r2, [r7, #32]
 8009d20:	7a52      	ldrb	r2, [r2, #9]
 8009d22:	0092      	lsls	r2, r2, #2
 8009d24:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(root_node, 1 - balance->dir,
 8009d26:	7a1b      	ldrb	r3, [r3, #8]
 8009d28:	0022      	movs	r2, r4
 8009d2a:	f7fe fcc9 	bl	80086c0 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 8009d2e:	e070      	b.n	8009e12 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	7a5b      	ldrb	r3, [r3, #9]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3a:	18d1      	adds	r1, r2, r3
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	7a5b      	ldrb	r3, [r3, #9]
 8009d40:	2201      	movs	r2, #1
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	7a5b      	ldrb	r3, [r3, #9]
 8009d4a:	001a      	movs	r2, r3
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	1a9a      	subs	r2, r3, r2
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	0092      	lsls	r2, r2, #2
 8009d54:	58d3      	ldr	r3, [r2, r3]
 8009d56:	6a3a      	ldr	r2, [r7, #32]
 8009d58:	7a52      	ldrb	r2, [r2, #9]
 8009d5a:	0092      	lsls	r2, r2, #2
 8009d5c:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 8009d5e:	7a1b      	ldrb	r3, [r3, #8]
 8009d60:	0022      	movs	r2, r4
 8009d62:	f7fe fcad 	bl	80086c0 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 8009d66:	e054      	b.n	8009e12 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
            else if (weight == kNeither)
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d133      	bne.n	8009dd6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x230>
              if (balance_parent == ETL_NULLPTR)
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d111      	bne.n	8009d98 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1f2>
                rotate_2node(root_node, 1 - balance->dir);
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	0019      	movs	r1, r3
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	7a5b      	ldrb	r3, [r3, #9]
 8009d80:	2201      	movs	r2, #1
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	001a      	movs	r2, r3
 8009d88:	f7fe fc67 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                root_node->weight = balance->dir;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	6a3a      	ldr	r2, [r7, #32]
 8009d92:	7a52      	ldrb	r2, [r2, #9]
 8009d94:	721a      	strb	r2, [r3, #8]
 8009d96:	e016      	b.n	8009dc6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x220>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	7a5b      	ldrb	r3, [r3, #9]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da2:	18d1      	adds	r1, r2, r3
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	7a5b      	ldrb	r3, [r3, #9]
 8009da8:	2201      	movs	r2, #1
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	001a      	movs	r2, r3
 8009db0:	f7fe fc53 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                balance_parent->children[balance_parent->dir]->weight = balance->dir;
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	7a5b      	ldrb	r3, [r3, #9]
 8009db8:	001a      	movs	r2, r3
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	0092      	lsls	r2, r2, #2
 8009dbe:	58d3      	ldr	r3, [r2, r3]
 8009dc0:	6a3a      	ldr	r2, [r7, #32]
 8009dc2:	7a52      	ldrb	r2, [r2, #9]
 8009dc4:	721a      	strb	r2, [r3, #8]
              balance->weight = 1 - balance->dir;
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	7a5b      	ldrb	r3, [r3, #9]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	721a      	strb	r2, [r3, #8]
 8009dd4:	e01d      	b.n	8009e12 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
              if (balance_parent == ETL_NULLPTR)
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10c      	bne.n	8009df6 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x250>
                rotate_2node(root_node, 1 - balance->dir);
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3308      	adds	r3, #8
 8009de2:	0019      	movs	r1, r3
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	7a5b      	ldrb	r3, [r3, #9]
 8009de8:	2201      	movs	r2, #1
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	001a      	movs	r2, r3
 8009df0:	f7fe fc33 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
 8009df4:	e00d      	b.n	8009e12 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	7a5b      	ldrb	r3, [r3, #9]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e00:	18d1      	adds	r1, r2, r3
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	7a5b      	ldrb	r3, [r3, #9]
 8009e06:	2201      	movs	r2, #1
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	001a      	movs	r2, r3
 8009e0e:	f7fe fc24 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
            if (balance == found)
 8009e12:	6a3a      	ldr	r2, [r7, #32]
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d122      	bne.n	8009e60 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
              if (balance_parent)
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d011      	beq.n	8009e44 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x29e>
                found_parent = balance_parent->children[balance_parent->dir];
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	7a5b      	ldrb	r3, [r3, #9]
 8009e24:	001a      	movs	r2, r3
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	0092      	lsls	r2, r2, #2
 8009e2a:	58d3      	ldr	r3, [r2, r3]
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34
                found_parent->dir = found_parent->children[kLeft] == found ? kLeft : kRight;
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	1e5a      	subs	r2, r3, #1
 8009e38:	4193      	sbcs	r3, r2
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	001a      	movs	r2, r3
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e40:	725a      	strb	r2, [r3, #9]
 8009e42:	e00d      	b.n	8009e60 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
                found_parent = root_node;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
                root_node->dir = root_node->children[kLeft] == found ? kLeft : kRight;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	1e5a      	subs	r2, r3, #1
 8009e56:	4193      	sbcs	r3, r2
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	725a      	strb	r2, [r3, #9]
          balance_parent = balance;
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
          balance = balance->children[balance->dir];
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	7a5b      	ldrb	r3, [r3, #9]
 8009e68:	001a      	movs	r2, r3
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	0092      	lsls	r2, r2, #2
 8009e6e:	58d3      	ldr	r3, [r2, r3]
 8009e70:	623b      	str	r3, [r7, #32]
        while (balance)
 8009e72:	e70d      	b.n	8009c90 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
            break;
 8009e74:	46c0      	nop			; (mov r8, r8)
        if (found_parent)
 8009e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00e      	beq.n	8009e9a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2f4>
          detach_node(found_parent->children[found_parent->dir],
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e80:	7a5b      	ldrb	r3, [r3, #9]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e86:	18d1      	adds	r1, r2, r3
            replace_parent->children[replace_parent->dir]);
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	7a5b      	ldrb	r3, [r3, #9]
          detach_node(found_parent->children[found_parent->dir],
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e90:	18d3      	adds	r3, r2, r3
 8009e92:	001a      	movs	r2, r3
 8009e94:	f7fe fcca 	bl	800882c <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 8009e98:	e018      	b.n	8009ecc <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
          if (replace_parent)
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00c      	beq.n	8009eba <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x314>
            detach_node(root_node, replace_parent->children[replace_parent->dir]);
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	0019      	movs	r1, r3
 8009ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eaa:	7a5b      	ldrb	r3, [r3, #9]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb0:	18d3      	adds	r3, r2, r3
 8009eb2:	001a      	movs	r2, r3
 8009eb4:	f7fe fcba 	bl	800882c <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 8009eb8:	e008      	b.n	8009ecc <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
            detach_node(root_node, root_node);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	0019      	movs	r1, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	001a      	movs	r2, r3
 8009ec8:	f7fe fcb0 	bl	800882c <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
        Data_Node& found_data_node = imap::data_cast(*found);
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f7ff fd4e 	bl	8009970 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 8009ed4:	0003      	movs	r3, r0
 8009ed6:	617b      	str	r3, [r7, #20]
        --current_size;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	1e5a      	subs	r2, r3, #1
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	601a      	str	r2, [r3, #0]
        destroy_data_node(found_data_node);
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	0011      	movs	r1, r2
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f7ff fd60 	bl	80099ae <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE17destroy_data_nodeERNS6_9Data_NodeE>
      return found;
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b00f      	add	sp, #60	; 0x3c
 8009ef6:	bd90      	pop	{r4, r7, pc}

08009ef8 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v>:
    T* allocate()
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
      if (sizeof(T) > Item_Size)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	2b3b      	cmp	r3, #59	; 0x3b
 8009f06:	d805      	bhi.n	8009f14 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x1c>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 8009f08:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x30>)
 8009f0a:	4a08      	ldr	r2, [pc, #32]	; (8009f2c <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x34>)
 8009f0c:	4808      	ldr	r0, [pc, #32]	; (8009f30 <_ZN3etl5ipool8allocateINS_4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9Data_NodeEEEPT_v+0x38>)
 8009f0e:	2175      	movs	r1, #117	; 0x75
 8009f10:	f008 f856 	bl	8011fc0 <__assert_func>
      return reinterpret_cast<T*>(allocate_item());
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	0018      	movs	r0, r3
 8009f18:	f7fe fa1c 	bl	8008354 <_ZN3etl5ipool13allocate_itemEv>
 8009f1c:	0003      	movs	r3, r0
    }
 8009f1e:	0018      	movs	r0, r3
 8009f20:	46bd      	mov	sp, r7
 8009f22:	b002      	add	sp, #8
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	08013288 	.word	0x08013288
 8009f2c:	08013604 	.word	0x08013604
 8009f30:	080132b4 	.word	0x080132b4

08009f34 <_ZNK3etl4lessItEclERKtS3_>:
  template <typename T = void>
  struct less : public etl::binary_function<T, T, bool>
  {
    typedef T value_type;

    ETL_CONSTEXPR bool operator()(const T &lhs, const T &rhs) const
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
    {
      return (lhs < rhs);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	881a      	ldrh	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	419b      	sbcs	r3, r3
 8009f4c:	425b      	negs	r3, r3
 8009f4e:	b2db      	uxtb	r3, r3
    }
 8009f50:	0018      	movs	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	b004      	add	sp, #16
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERKNS_8map_base4NodeE>:
    static const Data_Node& data_cast(const Node& node)
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node&>(node);
 8009f60:	687b      	ldr	r3, [r7, #4]
    }
 8009f62:	0018      	movs	r0, r3
 8009f64:	46bd      	mov	sp, r7
 8009f66:	b002      	add	sp, #8
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>:
    void next_node(Node*&position)
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
      if (position)
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d02d      	beq.n	8009fd8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
        if (position->children[kRight])
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00b      	beq.n	8009f9e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x34>
          position = find_limit_node(position->children[kRight], kLeft);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	0019      	movs	r1, r3
 8009f92:	f7fe fc14 	bl	80087be <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 8009f96:	0002      	movs	r2, r0
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	601a      	str	r2, [r3, #0]
    }
 8009f9c:	e01c      	b.n	8009fd8 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
          Node* parent = position;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]
            position = parent;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	601a      	str	r2, [r3, #0]
            parent = find_parent_node(root_node, position);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6899      	ldr	r1, [r3, #8]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	0018      	movs	r0, r3
 8009fb6:	f000 f81c 	bl	8009ff2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_>
 8009fba:	0003      	movs	r3, r0
 8009fbc:	60fb      	str	r3, [r7, #12]
          } while (parent && parent->children[kRight] == position);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d006      	beq.n	8009fd2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d100      	bne.n	8009fd2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
          do {
 8009fd0:	e7e8      	b.n	8009fa4 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x3a>
          position = parent;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	601a      	str	r2, [r3, #0]
    }
 8009fd8:	46c0      	nop			; (mov r8, r8)
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	b004      	add	sp, #16
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>:
    static const Data_Node* data_cast(const Node* p_node)
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node*>(p_node);
 8009fe8:	687b      	ldr	r3, [r7, #4]
    }
 8009fea:	0018      	movs	r0, r3
 8009fec:	46bd      	mov	sp, r7
 8009fee:	b002      	add	sp, #8
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_>:
    Node* find_parent_node(Node* position, const Node* node)
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b088      	sub	sp, #32
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
      Node* found = ETL_NULLPTR;
 8009ffe:	2300      	movs	r3, #0
 800a000:	61fb      	str	r3, [r7, #28]
      if (position && node && position != node)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d03c      	beq.n	800a082 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x90>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d039      	beq.n	800a082 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x90>
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d035      	beq.n	800a082 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x90>
        while (position)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d032      	beq.n	800a082 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x90>
          if (position->children[kLeft] != node &&
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	429a      	cmp	r2, r3
 800a024:	d028      	beq.n	800a078 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x86>
            position->children[kRight] != node)
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	685b      	ldr	r3, [r3, #4]
          if (position->children[kLeft] != node &&
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d023      	beq.n	800a078 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x86>
            const Data_Node& node_data_node = imap::data_cast(*node);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	0018      	movs	r0, r3
 800a034:	f7ff ff90 	bl	8009f58 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 800a038:	0003      	movs	r3, r0
 800a03a:	61bb      	str	r3, [r7, #24]
            Data_Node& position_data_node = imap::data_cast(*position);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	0018      	movs	r0, r3
 800a040:	f7ff fc96 	bl	8009970 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800a044:	0003      	movs	r3, r0
 800a046:	617b      	str	r3, [r7, #20]
            if (node_comp(node_data_node, position_data_node))
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	69b9      	ldr	r1, [r7, #24]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	0018      	movs	r0, r3
 800a050:	f7ff fc97 	bl	8009982 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800a054:	1e03      	subs	r3, r0, #0
 800a056:	d003      	beq.n	800a060 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x6e>
              position = position->children[kLeft];
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60bb      	str	r3, [r7, #8]
            }
 800a05e:	e00e      	b.n	800a07e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x8c>
            else if (node_comp(position_data_node, node_data_node))
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	6979      	ldr	r1, [r7, #20]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	0018      	movs	r0, r3
 800a068:	f7ff fc8b 	bl	8009982 <_ZNK3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE9node_compERKNS6_9Data_NodeES9_>
 800a06c:	1e03      	subs	r3, r0, #0
 800a06e:	d006      	beq.n	800a07e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x8c>
              position = position->children[kRight];
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	60bb      	str	r3, [r7, #8]
            }
 800a076:	e002      	b.n	800a07e <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x8c>
            found = position;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	61fb      	str	r3, [r7, #28]
            break;
 800a07c:	e001      	b.n	800a082 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x90>
            }
 800a07e:	46c0      	nop			; (mov r8, r8)
        while (position)
 800a080:	e7c9      	b.n	800a016 <_ZN3etl4imapItN11SolarGators7Drivers6ButtonENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS8_+0x24>
      return found;
 800a082:	69fb      	ldr	r3, [r7, #28]
    }
 800a084:	0018      	movs	r0, r3
 800a086:	46bd      	mov	sp, r7
 800a088:	b008      	add	sp, #32
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <_ZN11SolarGators7Drivers6ButtonC1EPKcP12GPIO_TypeDeftt13GPIO_PinState>:
#include "Button.hpp"

#include "map"
namespace SolarGators::Drivers {

Button::Button(const char* name, GPIO_TypeDef* port, uint16_t pin, uint16_t press_time, GPIO_PinState active_state):
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	001a      	movs	r2, r3
 800a09a:	1cbb      	adds	r3, r7, #2
 800a09c:	801a      	strh	r2, [r3, #0]
    name_(name),port_(port),pin_(pin),press_time_(press_time), active_state_(active_state), press_count_(0), last_valid_press_time_(0)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f000 f88c 	bl	800a1be <_ZNSt8functionIFvvEEC1Ev>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	611a      	str	r2, [r3, #16]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	615a      	str	r2, [r3, #20]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1cba      	adds	r2, r7, #2
 800a0b6:	8812      	ldrh	r2, [r2, #0]
 800a0b8:	831a      	strh	r2, [r3, #24]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	2318      	movs	r3, #24
 800a0be:	18fb      	adds	r3, r7, r3
 800a0c0:	881b      	ldrh	r3, [r3, #0]
 800a0c2:	8393      	strh	r3, [r2, #28]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	221c      	movs	r2, #28
 800a0c8:	18ba      	adds	r2, r7, r2
 800a0ca:	7812      	ldrb	r2, [r2, #0]
 800a0cc:	779a      	strb	r2, [r3, #30]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	621a      	str	r2, [r3, #32]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	625a      	str	r2, [r3, #36]	; 0x24
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2232      	movs	r2, #50	; 0x32
 800a0de:	851a      	strh	r2, [r3, #40]	; 0x28
{
  disabled_ = false;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	222a      	movs	r2, #42	; 0x2a
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	5499      	strb	r1, [r3, r2]
}
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	b004      	add	sp, #16
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <_ZN11SolarGators7Drivers6ButtonD1Ev>:

Button::~Button()
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f7f9 fd54 	bl	8003baa <_ZNSt8functionIFvvEED1Ev>
{
}
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	0018      	movs	r0, r3
 800a106:	46bd      	mov	sp, r7
 800a108:	b002      	add	sp, #8
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <_ZN11SolarGators7Drivers6Button7ReadPinEv>:

GPIO_PinState Button::ReadPin()
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port_, pin_);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	695a      	ldr	r2, [r3, #20]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8b1b      	ldrh	r3, [r3, #24]
 800a11c:	0019      	movs	r1, r3
 800a11e:	0010      	movs	r0, r2
 800a120:	f7fb fd0c 	bl	8005b3c <HAL_GPIO_ReadPin>
 800a124:	0003      	movs	r3, r0
}
 800a126:	0018      	movs	r0, r3
 800a128:	46bd      	mov	sp, r7
 800a12a:	b002      	add	sp, #8
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <_ZN11SolarGators7Drivers6Button11HandlePressEv>:

void Button::HandlePress()
{
 800a12e:	b590      	push	{r4, r7, lr}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  if(last_valid_press_time_ + debounce_time_ < osKernelGetTickCount())
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a13e:	189c      	adds	r4, r3, r2
 800a140:	f004 f89e 	bl	800e280 <osKernelGetTickCount>
 800a144:	0003      	movs	r3, r0
 800a146:	429c      	cmp	r4, r3
 800a148:	419b      	sbcs	r3, r3
 800a14a:	425b      	negs	r3, r3
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d032      	beq.n	800a1b8 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8a>
  {
    press_count_++;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	621a      	str	r2, [r3, #32]
    last_valid_press_time_ = osKernelGetTickCount();
 800a15c:	f004 f890 	bl	800e280 <osKernelGetTickCount>
 800a160:	0002      	movs	r2, r0
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	625a      	str	r2, [r3, #36]	; 0x24
    // Sleep until we should call action
    osDelay(debounce_time_ + press_time_);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a16a:	001a      	movs	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	8b9b      	ldrh	r3, [r3, #28]
 800a170:	18d3      	adds	r3, r2, r3
 800a172:	0018      	movs	r0, r3
 800a174:	f004 f950 	bl	800e418 <osDelay>
    if(ReadPin() != active_state_)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	0018      	movs	r0, r3
 800a17c:	f7ff ffc6 	bl	800a10c <_ZN11SolarGators7Drivers6Button7ReadPinEv>
 800a180:	0003      	movs	r3, r0
 800a182:	001a      	movs	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	7f9b      	ldrb	r3, [r3, #30]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	4193      	sbcs	r3, r2
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d110      	bne.n	800a1b6 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x88>
      return;
    // Make sure button is still pressed
    // and there is an action assigned to it
    if(action_)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	0018      	movs	r0, r3
 800a198:	f7ff fbaa 	bl	80098f0 <_ZNKSt8functionIFvvEEcvbEv>
 800a19c:	1e03      	subs	r3, r0, #0
 800a19e:	d00b      	beq.n	800a1b8 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8a>
    {
      action_();
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f000 f818 	bl	800a1d8 <_ZNKSt8functionIFvvEEclEv>
      action_called_time_++;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7e9b      	ldrb	r3, [r3, #26]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	769a      	strb	r2, [r3, #26]
 800a1b4:	e000      	b.n	800a1b8 <_ZN11SolarGators7Drivers6Button11HandlePressEv+0x8a>
      return;
 800a1b6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b003      	add	sp, #12
 800a1bc:	bd90      	pop	{r4, r7, pc}

0800a1be <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f7f9 f97a 	bl	80034c2 <_ZNSt14_Function_baseC1Ev>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	b002      	add	sp, #8
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f7fe f879 	bl	80082da <_ZNKSt14_Function_base8_M_emptyEv>
 800a1e8:	1e03      	subs	r3, r0, #0
 800a1ea:	d001      	beq.n	800a1f0 <_ZNKSt8functionIFvvEEclEv+0x18>
	__throw_bad_function_call();
 800a1ec:	f007 fe67 	bl	8011ebe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	0010      	movs	r0, r2
 800a1f8:	4798      	blx	r3
 800a1fa:	46c0      	nop			; (mov r8, r8)
    }
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	b002      	add	sp, #8
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm>:
#include <CAN.hpp>

namespace SolarGators {
namespace Drivers {

CANDriver::CANDriver(CAN_HandleTypeDef* hcan, uint32_t rx_fifo_num_):hcan_(hcan),rx_fifo_num_(rx_fifo_num_)
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	4a21      	ldr	r2, [pc, #132]	; (800a298 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x94>)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3304      	adds	r3, #4
 800a21a:	0018      	movs	r0, r3
 800a21c:	f000 f9f6 	bl	800a60c <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj15ENS_4lessItEEEC1Ev>
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	23ae      	movs	r3, #174	; 0xae
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	50d1      	str	r1, [r2, r3]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	23b0      	movs	r3, #176	; 0xb0
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	50d1      	str	r1, [r2, r3]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	2385      	movs	r3, #133	; 0x85
 800a238:	00db      	lsls	r3, r3, #3
 800a23a:	18d3      	adds	r3, r2, r3
 800a23c:	2224      	movs	r2, #36	; 0x24
 800a23e:	2100      	movs	r1, #0
 800a240:	0018      	movs	r0, r3
 800a242:	f008 f84b 	bl	80122dc <memset>
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	2385      	movs	r3, #133	; 0x85
 800a24a:	00db      	lsls	r3, r3, #3
 800a24c:	4913      	ldr	r1, [pc, #76]	; (800a29c <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x98>)
 800a24e:	50d1      	str	r1, [r2, r3]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	22db      	movs	r2, #219	; 0xdb
 800a254:	0092      	lsls	r2, r2, #2
 800a256:	1899      	adds	r1, r3, r2
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	2386      	movs	r3, #134	; 0x86
 800a25c:	00db      	lsls	r3, r3, #3
 800a25e:	50d1      	str	r1, [r2, r3]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4a0f      	ldr	r2, [pc, #60]	; (800a2a0 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0x9c>)
 800a264:	21bc      	movs	r1, #188	; 0xbc
 800a266:	5099      	str	r1, [r3, r2]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	336d      	adds	r3, #109	; 0x6d
 800a26c:	33ff      	adds	r3, #255	; 0xff
 800a26e:	0019      	movs	r1, r3
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	2387      	movs	r3, #135	; 0x87
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	50d1      	str	r1, [r2, r3]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	490a      	ldr	r1, [pc, #40]	; (800a2a4 <_ZN11SolarGators7Drivers9CANDriverC1EP19__CAN_HandleTypeDefm+0xa0>)
 800a27c:	2280      	movs	r2, #128	; 0x80
 800a27e:	0092      	lsls	r2, r2, #2
 800a280:	505a      	str	r2, [r3, r1]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	2388      	movs	r3, #136	; 0x88
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	2130      	movs	r1, #48	; 0x30
 800a28a:	50d1      	str	r1, [r2, r3]
{

}
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	0018      	movs	r0, r3
 800a290:	46bd      	mov	sp, r7
 800a292:	b004      	add	sp, #16
 800a294:	bd80      	pop	{r7, pc}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	080141c0 	.word	0x080141c0
 800a29c:	08013768 	.word	0x08013768
 800a2a0:	00000434 	.word	0x00000434
 800a2a4:	0000043c 	.word	0x0000043c

0800a2a8 <_ZN11SolarGators7Drivers9CANDriver4InitEv>:

void CANDriver::Init()
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08c      	sub	sp, #48	; 0x30
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  // Configure Filter
  //Initialize a hardware filter that passes everything
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; /*Enable the filter*/
 800a2b0:	2108      	movs	r1, #8
 800a2b2:	187b      	adds	r3, r7, r1
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	621a      	str	r2, [r3, #32]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;   /*Mask mode*/
 800a2b8:	187b      	adds	r3, r7, r1
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterMaskIdHigh = 0;
 800a2be:	187b      	adds	r3, r7, r1
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;                  /*Accept everything*/
 800a2c4:	187b      	adds	r3, r7, r1
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;  /*One 32-bit filter*/
 800a2ca:	187b      	adds	r3, r7, r1
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterBank = 0;                       /*Init bank 0*/
 800a2d0:	187b      	adds	r3, r7, r1
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterFIFOAssignment = 0;             /*Assign to FIFO 0*/
 800a2d6:	187b      	adds	r3, r7, r1
 800a2d8:	2200      	movs	r2, #0
 800a2da:	611a      	str	r2, [r3, #16]
  HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	23ae      	movs	r3, #174	; 0xae
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	58d3      	ldr	r3, [r2, r3]
 800a2e4:	187a      	adds	r2, r7, r1
 800a2e6:	0011      	movs	r1, r2
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	f7fa fc03 	bl	8004af4 <HAL_CAN_ConfigFilter>

  can_rx_event_ = osEventFlagsNew(NULL);
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	f004 f994 	bl	800e61c <osEventFlagsNew>
 800a2f4:	0001      	movs	r1, r0
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	23b2      	movs	r3, #178	; 0xb2
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	50d1      	str	r1, [r2, r3]
  if (can_rx_event_ == NULL)
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	23b2      	movs	r3, #178	; 0xb2
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	58d3      	ldr	r3, [r2, r3]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x66>
  {
      Error_Handler();
 800a30a:	f7f8 fdeb 	bl	8002ee4 <Error_Handler>
  }

  rx_task_handle_ = osThreadNew((osThreadFunc_t)&CANDriver::HandleReceive, this, &rx_task_attributes_);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2285      	movs	r2, #133	; 0x85
 800a312:	00d2      	lsls	r2, r2, #3
 800a314:	189a      	adds	r2, r3, r2
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	4b11      	ldr	r3, [pc, #68]	; (800a360 <_ZN11SolarGators7Drivers9CANDriver4InitEv+0xb8>)
 800a31a:	0018      	movs	r0, r3
 800a31c:	f003 ffd4 	bl	800e2c8 <osThreadNew>
 800a320:	0001      	movs	r1, r0
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	23b4      	movs	r3, #180	; 0xb4
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	50d1      	str	r1, [r2, r3]
  if (rx_task_handle_ == NULL)
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	23b4      	movs	r3, #180	; 0xb4
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	58d3      	ldr	r3, [r2, r3]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <_ZN11SolarGators7Drivers9CANDriver4InitEv+0x92>
  {
      Error_Handler();
 800a336:	f7f8 fdd5 	bl	8002ee4 <Error_Handler>
  }
  HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	23ae      	movs	r3, #174	; 0xae
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	58d3      	ldr	r3, [r2, r3]
 800a342:	2102      	movs	r1, #2
 800a344:	0018      	movs	r0, r3
 800a346:	f7fa ff6a 	bl	800521e <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(hcan_);
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	23ae      	movs	r3, #174	; 0xae
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	58d3      	ldr	r3, [r2, r3]
 800a352:	0018      	movs	r0, r3
 800a354:	f7fa fcc0 	bl	8004cd8 <HAL_CAN_Start>
}
 800a358:	46c0      	nop			; (mov r8, r8)
 800a35a:	46bd      	mov	sp, r7
 800a35c:	b00c      	add	sp, #48	; 0x30
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	0800a3b9 	.word	0x0800a3b9

0800a364 <_ZN11SolarGators7Drivers9CANDriverD1Ev>:

CANDriver::~CANDriver()
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	4a06      	ldr	r2, [pc, #24]	; (800a388 <_ZN11SolarGators7Drivers9CANDriverD1Ev+0x24>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	3304      	adds	r3, #4
 800a376:	0018      	movs	r0, r3
 800a378:	f000 f961 	bl	800a63e <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj15ENS_4lessItEEED1Ev>
{ }
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	0018      	movs	r0, r3
 800a380:	46bd      	mov	sp, r7
 800a382:	b002      	add	sp, #8
 800a384:	bd80      	pop	{r7, pc}
 800a386:	46c0      	nop			; (mov r8, r8)
 800a388:	080141c0 	.word	0x080141c0

0800a38c <_ZN11SolarGators7Drivers9CANDriverD0Ev>:
CANDriver::~CANDriver()
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
{ }
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	0018      	movs	r0, r3
 800a398:	f7ff ffe4 	bl	800a364 <_ZN11SolarGators7Drivers9CANDriverD1Ev>
 800a39c:	4a05      	ldr	r2, [pc, #20]	; (800a3b4 <_ZN11SolarGators7Drivers9CANDriverD0Ev+0x28>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	0011      	movs	r1, r2
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	f007 fd72 	bl	8011e8c <_ZdlPvj>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	b002      	add	sp, #8
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	0000044c 	.word	0x0000044c

0800a3b8 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv>:

void CANDriver::HandleReceive()
{
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b091      	sub	sp, #68	; 0x44
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  while(1)
  {
    osEventFlagsWait(can_rx_event_, 0x1, osFlagsWaitAny, osWaitForever);
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	23b2      	movs	r3, #178	; 0xb2
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	58d0      	ldr	r0, [r2, r3]
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	425b      	negs	r3, r3
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	f004 f9c0 	bl	800e754 <osEventFlagsWait>
    CAN_RxHeaderTypeDef pHeader;
    uint8_t aData[MAX_DATA_SIZE];

    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	23ae      	movs	r3, #174	; 0xae
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	58d0      	ldr	r0, [r2, r3]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	23b0      	movs	r3, #176	; 0xb0
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	58d3      	ldr	r3, [r2, r3]
 800a3e4:	0019      	movs	r1, r3
 800a3e6:	f7fa feef 	bl	80051c8 <HAL_CAN_GetRxFifoFillLevel>
 800a3ea:	0003      	movs	r3, r0
 800a3ec:	1e5a      	subs	r2, r3, #1
 800a3ee:	4193      	sbcs	r3, r2
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d04a      	beq.n	800a48c <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0xd4>
    {
      HAL_CAN_GetRxMessage(hcan_, rx_fifo_num_, &pHeader, aData);
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	23ae      	movs	r3, #174	; 0xae
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	58d0      	ldr	r0, [r2, r3]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	23b0      	movs	r3, #176	; 0xb0
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	58d1      	ldr	r1, [r2, r3]
 800a406:	230c      	movs	r3, #12
 800a408:	18fb      	adds	r3, r7, r3
 800a40a:	2414      	movs	r4, #20
 800a40c:	193a      	adds	r2, r7, r4
 800a40e:	f7fa fdbf 	bl	8004f90 <HAL_CAN_GetRxMessage>
      DataModules::DataModule* rx_module = (*modules_.find(pHeader.IDE == CAN_ID_STD ? pHeader.StdId : pHeader.ExtId)).second;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	1d19      	adds	r1, r3, #4
 800a416:	0022      	movs	r2, r4
 800a418:	18bb      	adds	r3, r7, r2
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d103      	bne.n	800a428 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x70>
 800a420:	18bb      	adds	r3, r7, r2
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	b29b      	uxth	r3, r3
 800a426:	e003      	b.n	800a430 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x78>
 800a428:	2314      	movs	r3, #20
 800a42a:	18fb      	adds	r3, r7, r3
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	203a      	movs	r0, #58	; 0x3a
 800a432:	183a      	adds	r2, r7, r0
 800a434:	8013      	strh	r3, [r2, #0]
 800a436:	2430      	movs	r4, #48	; 0x30
 800a438:	193b      	adds	r3, r7, r4
 800a43a:	183a      	adds	r2, r7, r0
 800a43c:	0018      	movs	r0, r3
 800a43e:	f000 f914 	bl	800a66a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE4findERKt>
 800a442:	193b      	adds	r3, r7, r4
 800a444:	0018      	movs	r0, r3
 800a446:	f000 f930 	bl	800a6aa <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratordeEv>
 800a44a:	0003      	movs	r3, r0
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a450:	193b      	adds	r3, r7, r4
 800a452:	0018      	movs	r0, r3
 800a454:	f000 f920 	bl	800a698 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
      if(rx_module != nullptr)
 800a458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0ba      	beq.n	800a3d4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1c>
      {
        osMutexAcquire(rx_module->mutex_id_, osWaitForever);
 800a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	2201      	movs	r2, #1
 800a464:	4252      	negs	r2, r2
 800a466:	0011      	movs	r1, r2
 800a468:	0018      	movs	r0, r3
 800a46a:	f004 faa9 	bl	800e9c0 <osMutexAcquire>
        rx_module->FromByteArray(aData);
 800a46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	330c      	adds	r3, #12
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	220c      	movs	r2, #12
 800a478:	18b9      	adds	r1, r7, r2
 800a47a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a47c:	0010      	movs	r0, r2
 800a47e:	4798      	blx	r3
        osMutexRelease(rx_module->mutex_id_);
 800a480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	0018      	movs	r0, r3
 800a486:	f004 faf7 	bl	800ea78 <osMutexRelease>
    while(HAL_CAN_GetRxFifoFillLevel(hcan_, rx_fifo_num_))
 800a48a:	e7a3      	b.n	800a3d4 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x1c>
      }
    }
    HAL_CAN_ActivateNotification(hcan_, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	23ae      	movs	r3, #174	; 0xae
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	58d3      	ldr	r3, [r2, r3]
 800a494:	2102      	movs	r1, #2
 800a496:	0018      	movs	r0, r3
 800a498:	f7fa fec1 	bl	800521e <HAL_CAN_ActivateNotification>
  }
 800a49c:	e790      	b.n	800a3c0 <_ZN11SolarGators7Drivers9CANDriver13HandleReceiveEv+0x8>

0800a49e <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE>:
}

void CANDriver::Send(SolarGators::DataModules::DataModule* data)
{
 800a49e:	b590      	push	{r4, r7, lr}
 800a4a0:	b08d      	sub	sp, #52	; 0x34
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
  //Spinlock until a tx mailbox is empty
  while(!HAL_CAN_GetTxMailboxesFreeLevel(hcan_));
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	23ae      	movs	r3, #174	; 0xae
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	58d3      	ldr	r3, [r2, r3]
 800a4b0:	0018      	movs	r0, r3
 800a4b2:	f7fa fd35 	bl	8004f20 <HAL_CAN_GetTxMailboxesFreeLevel>
 800a4b6:	0003      	movs	r3, r0
 800a4b8:	425a      	negs	r2, r3
 800a4ba:	4153      	adcs	r3, r2
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d000      	beq.n	800a4c4 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x26>
 800a4c2:	e7f1      	b.n	800a4a8 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0xa>

  //Initialize Header
  uint32_t pTxMailbox;
  CAN_TxHeaderTypeDef pHeader;
  pHeader.RTR = data->is_rtr_ ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	7cdb      	ldrb	r3, [r3, #19]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x32>
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	e000      	b.n	800a4d2 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x34>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2114      	movs	r1, #20
 800a4d4:	187b      	adds	r3, r7, r1
 800a4d6:	60da      	str	r2, [r3, #12]
  pHeader.DLC = data->size_;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	187b      	adds	r3, r7, r1
 800a4de:	611a      	str	r2, [r3, #16]
  if(data->is_ext_id_)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	7c9b      	ldrb	r3, [r3, #18]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d007      	beq.n	800a4f8 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x5a>
  {
    pHeader.ExtId = data->can_id_;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	187b      	adds	r3, r7, r1
 800a4ee:	605a      	str	r2, [r3, #4]
    pHeader.IDE = CAN_ID_EXT;
 800a4f0:	187b      	adds	r3, r7, r1
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	609a      	str	r2, [r3, #8]
 800a4f6:	e007      	b.n	800a508 <_ZN11SolarGators7Drivers9CANDriver4SendEPNS_11DataModules10DataModuleE+0x6a>
  }
  else
  {
    pHeader.StdId = data->can_id_;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	2114      	movs	r1, #20
 800a4fe:	187b      	adds	r3, r7, r1
 800a500:	601a      	str	r2, [r3, #0]
    pHeader.IDE = CAN_ID_STD;
 800a502:	187b      	adds	r3, r7, r1
 800a504:	2200      	movs	r2, #0
 800a506:	609a      	str	r2, [r3, #8]
  }
  //Put CAN message in tx mailbox
  uint8_t aData[MAX_DATA_SIZE];
  osMutexAcquire(data->mutex_id_, osWaitForever);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	2201      	movs	r2, #1
 800a50e:	4252      	negs	r2, r2
 800a510:	0011      	movs	r1, r2
 800a512:	0018      	movs	r0, r3
 800a514:	f004 fa54 	bl	800e9c0 <osMutexAcquire>
  data->ToByteArray(aData);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3308      	adds	r3, #8
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	240c      	movs	r4, #12
 800a522:	1939      	adds	r1, r7, r4
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	0010      	movs	r0, r2
 800a528:	4798      	blx	r3
  osMutexRelease(data->mutex_id_);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	0018      	movs	r0, r3
 800a530:	f004 faa2 	bl	800ea78 <osMutexRelease>
  HAL_CAN_AddTxMessage(hcan_, &pHeader, aData, &pTxMailbox);
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	23ae      	movs	r3, #174	; 0xae
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	58d0      	ldr	r0, [r2, r3]
 800a53c:	232c      	movs	r3, #44	; 0x2c
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	193a      	adds	r2, r7, r4
 800a542:	2114      	movs	r1, #20
 800a544:	1879      	adds	r1, r7, r1
 800a546:	f7fa fc0d 	bl	8004d64 <HAL_CAN_AddTxMessage>
}
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b00d      	add	sp, #52	; 0x34
 800a550:	bd90      	pop	{r4, r7, pc}

0800a552 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbED1Ev>:
    struct pair
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	0018      	movs	r0, r3
 800a55e:	f000 f89b 	bl	800a698 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	0018      	movs	r0, r3
 800a566:	46bd      	mov	sp, r7
 800a568:	b002      	add	sp, #8
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <_ZN11SolarGators7Drivers9CANDriver11AddRxModuleEPNS_11DataModules10DataModuleE>:

bool CANDriver::AddRxModule(DataModules::DataModule* module)
{
 800a56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a56e:	b08b      	sub	sp, #44	; 0x2c
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  modules_.insert(etl::make_pair(module->can_id_, module));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	1d1c      	adds	r4, r3, #4
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	1d19      	adds	r1, r3, #4
 800a57e:	2520      	movs	r5, #32
 800a580:	197b      	adds	r3, r7, r5
 800a582:	003a      	movs	r2, r7
 800a584:	0018      	movs	r0, r3
 800a586:	f000 f89f 	bl	800a6c8 <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>
 800a58a:	2618      	movs	r6, #24
 800a58c:	19bb      	adds	r3, r7, r6
 800a58e:	197a      	adds	r2, r7, r5
 800a590:	0011      	movs	r1, r2
 800a592:	0018      	movs	r0, r3
 800a594:	f000 f8b8 	bl	800a708 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIKtS6_EEv>
 800a598:	250c      	movs	r5, #12
 800a59a:	197b      	adds	r3, r7, r5
 800a59c:	19ba      	adds	r2, r7, r6
 800a59e:	0021      	movs	r1, r4
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	f000 f8c9 	bl	800a738 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E>
 800a5a6:	197b      	adds	r3, r7, r5
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f7ff ffd2 	bl	800a552 <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbED1Ev>
  // TODO: Check if successful insertion
  return true;
 800a5ae:	2301      	movs	r3, #1
}
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	b00b      	add	sp, #44	; 0x2c
 800a5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5b8 <_ZN11SolarGators7Drivers9CANDriver9SetRxFlagEv>:
  // TODO: Implement (Remove needs to be added to tree container)
  return false;
}

void CANDriver::SetRxFlag()
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  osEventFlagsSet(can_rx_event_, 0x1);
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	23b2      	movs	r3, #178	; 0xb2
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	58d3      	ldr	r3, [r2, r3]
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	f004 f874 	bl	800e6b8 <osEventFlagsSet>
}
 800a5d0:	46c0      	nop			; (mov r8, r8)
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	b002      	add	sp, #8
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <_ZN3etl12generic_poolILj20ELj4ELj15EED1Ev>:
  class generic_pool : public etl::ipool
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f7fd ff76 	bl	80084d4 <_ZN3etl5ipoolD1Ev>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b002      	add	sp, #8
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj15EED1Ev>:
  class pool : public etl::generic_pool<sizeof(T), etl::alignment_of<T>::value, VSize>
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	f7ff ffeb 	bl	800a5d8 <_ZN3etl12generic_poolILj20ELj4ELj15EED1Ev>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	0018      	movs	r0, r3
 800a606:	46bd      	mov	sp, r7
 800a608:	b002      	add	sp, #8
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj15ENS_4lessItEEEC1Ev>:
    map()
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
      : etl::imap<TKey, TValue, TCompare>(node_pool, MAX_SIZE)
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3314      	adds	r3, #20
 800a61a:	220f      	movs	r2, #15
 800a61c:	0019      	movs	r1, r3
 800a61e:	f000 f8e5 	bl	800a7ec <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEEC1ERNS_5ipoolEj>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3314      	adds	r3, #20
 800a626:	0018      	movs	r0, r3
 800a628:	f000 f901 	bl	800a82e <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj15EEC1Ev>
      this->initialise();
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	0018      	movs	r0, r3
 800a630:	f000 f90a 	bl	800a848 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>
    }
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	0018      	movs	r0, r3
 800a638:	46bd      	mov	sp, r7
 800a63a:	b002      	add	sp, #8
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <_ZN3etl3mapItPN11SolarGators11DataModules10DataModuleELj15ENS_4lessItEEED1Ev>:
    ~map()
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
      this->initialise();
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	0018      	movs	r0, r3
 800a64a:	f000 f8fd 	bl	800a848 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>
    }
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3314      	adds	r3, #20
 800a652:	0018      	movs	r0, r3
 800a654:	f7ff ffcd 	bl	800a5f2 <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj15EED1Ev>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	0018      	movs	r0, r3
 800a65c:	f000 f8da 	bl	800a814 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEED1Ev>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	0018      	movs	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	b002      	add	sp, #8
 800a668:	bd80      	pop	{r7, pc}

0800a66a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE4findERKt>:
    iterator find(key_parameter_t key)
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
      return iterator(*this, find_node(root_node, key));
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	6899      	ldr	r1, [r3, #8]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	0018      	movs	r0, r3
 800a680:	f000 f94d 	bl	800a91e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>
 800a684:	0002      	movs	r2, r0
 800a686:	68b9      	ldr	r1, [r7, #8]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	0018      	movs	r0, r3
 800a68c:	f000 f976 	bl	800a97c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
    }
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	46bd      	mov	sp, r7
 800a694:	b004      	add	sp, #16
 800a696:	bd80      	pop	{r7, pc}

0800a698 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>:
      ~iterator()
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
      }
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	b002      	add	sp, #8
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratordeEv>:
      reference operator *() const
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	0018      	movs	r0, r3
 800a6b8:	f000 f983 	bl	800a9c2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPNS_8map_base4NodeE>
 800a6bc:	0003      	movs	r3, r0
 800a6be:	330c      	adds	r3, #12
      }
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	b002      	add	sp, #8
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <_ZN3etl9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEEENS_4pairIT_T0_EEOS9_OSA_>:
  inline pair<T1, T2> make_pair(T1&& a, T2&& b)
 800a6c8:	b5b0      	push	{r4, r5, r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
    return pair<T1, T2>(etl::forward<T1>(a), etl::forward<T2>(b));
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	0018      	movs	r0, r3
 800a6d8:	f000 f97c 	bl	800a9d4 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800a6dc:	0004      	movs	r4, r0
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f000 f980 	bl	800a9e6 <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 800a6e6:	0002      	movs	r2, r0
 800a6e8:	2510      	movs	r5, #16
 800a6ea:	197b      	adds	r3, r7, r5
 800a6ec:	0021      	movs	r1, r4
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f000 f982 	bl	800a9f8 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>
 800a6f4:	197a      	adds	r2, r7, r5
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	0011      	movs	r1, r2
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f000 f98d 	bl	800aa1a <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>
  }
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	46bd      	mov	sp, r7
 800a704:	b006      	add	sp, #24
 800a706:	bdb0      	pop	{r4, r5, r7, pc}

0800a708 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEcvSt4pairIT_T0_EIKtS6_EEv>:
    operator std::pair<U1, U2>()
 800a708:	b590      	push	{r4, r7, lr}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
      return std::make_pair(first, second);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	6819      	ldr	r1, [r3, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	2408      	movs	r4, #8
 800a71c:	193b      	adds	r3, r7, r4
 800a71e:	0018      	movs	r0, r3
 800a720:	f000 f995 	bl	800aa4e <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt17__decay_and_stripIT_E6__typeENS8_IT0_E6__typeEEOS9_OSC_>
 800a724:	193a      	adds	r2, r7, r4
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	0011      	movs	r1, r2
 800a72a:	0018      	movs	r0, r3
 800a72c:	f000 f9b1 	bl	800aa92 <_ZNSt4pairIKtPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>
    }
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	46bd      	mov	sp, r7
 800a734:	b005      	add	sp, #20
 800a736:	bd90      	pop	{r4, r7, pc}

0800a738 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E>:
    ETL_OR_STD::pair<iterator, bool> insert(rvalue_reference value)
 800a738:	b5b0      	push	{r4, r5, r7, lr}
 800a73a:	b08a      	sub	sp, #40	; 0x28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
      Node* inserted_node = ETL_NULLPTR;
 800a744:	2300      	movs	r3, #0
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
      bool inserted = false;
 800a748:	2317      	movs	r3, #23
 800a74a:	18fb      	adds	r3, r7, r3
 800a74c:	2200      	movs	r2, #0
 800a74e:	701a      	strb	r2, [r3, #0]
      ETL_ASSERT(!full(), ETL_ERROR(map_full));
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	0018      	movs	r0, r3
 800a754:	f7fd fec7 	bl	80084e6 <_ZNK3etl8map_base4fullEv>
 800a758:	0003      	movs	r3, r0
 800a75a:	001a      	movs	r2, r3
 800a75c:	2301      	movs	r3, #1
 800a75e:	4053      	eors	r3, r2
 800a760:	b2db      	uxtb	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d105      	bne.n	800a772 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0x3a>
 800a766:	4b1d      	ldr	r3, [pc, #116]	; (800a7dc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xa4>)
 800a768:	4a1d      	ldr	r2, [pc, #116]	; (800a7e0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xa8>)
 800a76a:	491e      	ldr	r1, [pc, #120]	; (800a7e4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xac>)
 800a76c:	481e      	ldr	r0, [pc, #120]	; (800a7e8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE6insertEOSt4pairIKtS4_E+0xb0>)
 800a76e:	f007 fc27 	bl	8011fc0 <__assert_func>
      Data_Node& node = allocate_data_node(etl::move(value));
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	0018      	movs	r0, r3
 800a776:	f000 f9a8 	bl	800aaca <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 800a77a:	0002      	movs	r2, r0
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	0011      	movs	r1, r2
 800a780:	0018      	movs	r0, r3
 800a782:	f000 f9ab 	bl	800aadc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS4_E>
 800a786:	0003      	movs	r3, r0
 800a788:	623b      	str	r3, [r7, #32]
      inserted_node = insert_node(root_node, node);
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	3308      	adds	r3, #8
 800a78e:	0019      	movs	r1, r3
 800a790:	6a3a      	ldr	r2, [r7, #32]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	0018      	movs	r0, r3
 800a796:	f000 f9c0 	bl	800ab1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>
 800a79a:	0003      	movs	r3, r0
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
      inserted = inserted_node == &node;
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	425a      	negs	r2, r3
 800a7a6:	4153      	adcs	r3, r2
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	2517      	movs	r5, #23
 800a7ac:	197b      	adds	r3, r7, r5
 800a7ae:	701a      	strb	r2, [r3, #0]
      return ETL_OR_STD::make_pair(iterator(*this, inserted_node), inserted);
 800a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b2:	68b9      	ldr	r1, [r7, #8]
 800a7b4:	2418      	movs	r4, #24
 800a7b6:	193b      	adds	r3, r7, r4
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f000 f8df 	bl	800a97c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	197a      	adds	r2, r7, r5
 800a7c2:	1939      	adds	r1, r7, r4
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f000 fa57 	bl	800ac78 <_ZSt9make_pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSC_IT0_E6__typeEEOSD_OSG_>
 800a7ca:	193b      	adds	r3, r7, r4
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	f7ff ff63 	bl	800a698 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800a7d2:	46c0      	nop			; (mov r8, r8)
    }
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	b00a      	add	sp, #40	; 0x28
 800a7da:	bdb0      	pop	{r4, r5, r7, pc}
 800a7dc:	08013778 	.word	0x08013778
 800a7e0:	08013784 	.word	0x08013784
 800a7e4:	000004a7 	.word	0x000004a7
 800a7e8:	080139b4 	.word	0x080139b4

0800a7ec <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEEC1ERNS_5ipoolEj>:
    imap(etl::ipool& node_pool, size_t max_size_)
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
      , p_node_pool(&node_pool)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	0011      	movs	r1, r2
 800a7fe:	0018      	movs	r0, r3
 800a800:	f7fd fe95 	bl	800852e <_ZN3etl8map_baseC1Ej>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	60da      	str	r2, [r3, #12]
    }
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	0018      	movs	r0, r3
 800a80e:	46bd      	mov	sp, r7
 800a810:	b004      	add	sp, #16
 800a812:	bd80      	pop	{r7, pc}

0800a814 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEED1Ev>:
    ~imap()
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
    }
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	0018      	movs	r0, r3
 800a820:	f7fd fe98 	bl	8008554 <_ZN3etl8map_baseD1Ev>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	0018      	movs	r0, r3
 800a828:	46bd      	mov	sp, r7
 800a82a:	b002      	add	sp, #8
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <_ZN3etl4poolINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeELj15EEC1Ev>:
    pool()
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
    {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	0018      	movs	r0, r3
 800a83a:	f000 fa36 	bl	800acaa <_ZN3etl12generic_poolILj20ELj4ELj15EEC1Ev>
    }
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	0018      	movs	r0, r3
 800a842:	46bd      	mov	sp, r7
 800a844:	b002      	add	sp, #8
 800a846:	bd80      	pop	{r7, pc}

0800a848 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv>:
    void initialise()
 800a848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a84a:	b091      	sub	sp, #68	; 0x44
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
      const_iterator item = begin();
 800a850:	2410      	movs	r4, #16
 800a852:	193b      	adds	r3, r7, r4
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	0011      	movs	r1, r2
 800a858:	0018      	movs	r0, r3
 800a85a:	f000 fa37 	bl	800accc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5beginEv>
 800a85e:	193a      	adds	r2, r7, r4
 800a860:	2308      	movs	r3, #8
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	0011      	movs	r1, r2
 800a866:	0018      	movs	r0, r3
 800a868:	f000 fa46 	bl	800acf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 800a86c:	193b      	adds	r3, r7, r4
 800a86e:	0018      	movs	r0, r3
 800a870:	f7ff ff12 	bl	800a698 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
      while (item != end())
 800a874:	2520      	movs	r5, #32
 800a876:	197b      	adds	r3, r7, r5
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	0011      	movs	r1, r2
 800a87c:	0018      	movs	r0, r3
 800a87e:	f000 fa68 	bl	800ad52 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE3endEv>
 800a882:	197a      	adds	r2, r7, r5
 800a884:	2618      	movs	r6, #24
 800a886:	19bb      	adds	r3, r7, r6
 800a888:	0011      	movs	r1, r2
 800a88a:	0018      	movs	r0, r3
 800a88c:	f000 fa34 	bl	800acf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 800a890:	19ba      	adds	r2, r7, r6
 800a892:	2408      	movs	r4, #8
 800a894:	193b      	adds	r3, r7, r4
 800a896:	0011      	movs	r1, r2
 800a898:	0018      	movs	r0, r3
 800a89a:	f000 fa69 	bl	800ad70 <_ZN3etlneERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>
 800a89e:	0003      	movs	r3, r0
 800a8a0:	001c      	movs	r4, r3
 800a8a2:	19bb      	adds	r3, r7, r6
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f000 fa39 	bl	800ad1c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
 800a8aa:	197b      	adds	r3, r7, r5
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	f7ff fef3 	bl	800a698 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800a8b2:	2c00      	cmp	r4, #0
 800a8b4:	d02a      	beq.n	800a90c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv+0xc4>
        item = erase(item);
 800a8b6:	2408      	movs	r4, #8
 800a8b8:	193a      	adds	r2, r7, r4
 800a8ba:	2538      	movs	r5, #56	; 0x38
 800a8bc:	197b      	adds	r3, r7, r5
 800a8be:	0011      	movs	r1, r2
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f000 fa34 	bl	800ad2e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKS8_>
 800a8c6:	2630      	movs	r6, #48	; 0x30
 800a8c8:	19bb      	adds	r3, r7, r6
 800a8ca:	197a      	adds	r2, r7, r5
 800a8cc:	6879      	ldr	r1, [r7, #4]
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	f000 fa62 	bl	800ad98 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5eraseENS7_14const_iteratorE>
 800a8d4:	19ba      	adds	r2, r7, r6
 800a8d6:	2328      	movs	r3, #40	; 0x28
 800a8d8:	18fb      	adds	r3, r7, r3
 800a8da:	0011      	movs	r1, r2
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f000 fa0b 	bl	800acf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>
 800a8e2:	2328      	movs	r3, #40	; 0x28
 800a8e4:	18fa      	adds	r2, r7, r3
 800a8e6:	193b      	adds	r3, r7, r4
 800a8e8:	0011      	movs	r1, r2
 800a8ea:	0018      	movs	r0, r3
 800a8ec:	f000 fa83 	bl	800adf6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratoraSERKS8_>
 800a8f0:	2328      	movs	r3, #40	; 0x28
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f000 fa11 	bl	800ad1c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
 800a8fa:	19bb      	adds	r3, r7, r6
 800a8fc:	0018      	movs	r0, r3
 800a8fe:	f7ff fecb 	bl	800a698 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorD1Ev>
 800a902:	197b      	adds	r3, r7, r5
 800a904:	0018      	movs	r0, r3
 800a906:	f000 fa09 	bl	800ad1c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
      while (item != end())
 800a90a:	e7b3      	b.n	800a874 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE10initialiseEv+0x2c>
      const_iterator item = begin();
 800a90c:	2308      	movs	r3, #8
 800a90e:	18fb      	adds	r3, r7, r3
 800a910:	0018      	movs	r0, r3
 800a912:	f000 fa03 	bl	800ad1c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>
    }
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	46bd      	mov	sp, r7
 800a91a:	b011      	add	sp, #68	; 0x44
 800a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a91e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt>:
    Node* find_node(Node* position, key_parameter_t key)
 800a91e:	b580      	push	{r7, lr}
 800a920:	b086      	sub	sp, #24
 800a922:	af00      	add	r7, sp, #0
 800a924:	60f8      	str	r0, [r7, #12]
 800a926:	60b9      	str	r1, [r7, #8]
 800a928:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	617b      	str	r3, [r7, #20]
      while (found)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d01e      	beq.n	800a972 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x54>
        Data_Node& found_data_node = imap::data_cast(*found);
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	0018      	movs	r0, r3
 800a938:	f000 fa6f 	bl	800ae1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800a93c:	0003      	movs	r3, r0
 800a93e:	613b      	str	r3, [r7, #16]
        if (node_comp(key, found_data_node))
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	0018      	movs	r0, r3
 800a948:	f000 fa70 	bl	800ae2c <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>
 800a94c:	1e03      	subs	r3, r0, #0
 800a94e:	d003      	beq.n	800a958 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x3a>
          found = found->children[kLeft];
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	e7ea      	b.n	800a92e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
        else if (node_comp(found_data_node, key))
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6939      	ldr	r1, [r7, #16]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	0018      	movs	r0, r3
 800a960:	f000 fa79 	bl	800ae56 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>
 800a964:	1e03      	subs	r3, r0, #0
 800a966:	d003      	beq.n	800a970 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x52>
          found = found->children[kRight];
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	617b      	str	r3, [r7, #20]
      while (found)
 800a96e:	e7de      	b.n	800a92e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeEPNS_8map_base4NodeERKt+0x10>
          break;
 800a970:	46c0      	nop			; (mov r8, r8)
      return found;
 800a972:	697b      	ldr	r3, [r7, #20]
    }
 800a974:	0018      	movs	r0, r3
 800a976:	46bd      	mov	sp, r7
 800a978:	b006      	add	sp, #24
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>:
      iterator(imap& map, Node* node)
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
        , p_node(node)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	605a      	str	r2, [r3, #4]
      }
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	0018      	movs	r0, r3
 800a998:	46bd      	mov	sp, r7
 800a99a:	b004      	add	sp, #16
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERKS8_>:
      iterator(const iterator& other)
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	605a      	str	r2, [r3, #4]
      }
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	b002      	add	sp, #8
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPNS_8map_base4NodeE>:
    static Data_Node* data_cast(Node* p_node)
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node*>(p_node);
 800a9ca:	687b      	ldr	r3, [r7, #4]
    }
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	b002      	add	sp, #8
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800a9dc:	687b      	ldr	r3, [r7, #4]
  }
 800a9de:	0018      	movs	r0, r3
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	b002      	add	sp, #8
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>:
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
    return static_cast<T&&>(t);
 800a9ee:	687b      	ldr	r3, [r7, #4]
  }
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	b002      	add	sp, #8
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1ES2_S7_>:
    ETL_CONSTEXPR14 pair(const T1& a, const T2& b)
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
      , second(b)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	605a      	str	r2, [r3, #4]
    }
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	0018      	movs	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b004      	add	sp, #16
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <_ZN3etl4pairIRKmRPN11SolarGators11DataModules10DataModuleEEC1IS2_S7_EEONS0_IT_T0_EE>:
    ETL_CONSTEXPR14 pair(pair<U1, U2>&& other)
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
      : first(etl::forward<U1>(other.first))
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7ff ffd3 	bl	800a9d4 <_ZN3etl7forwardIRKmEEOT_RNS_16remove_referenceIS3_E4typeE>
 800aa2e:	0002      	movs	r2, r0
      , second(etl::forward<U2>(other.second))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	0018      	movs	r0, r3
 800aa3a:	f7ff ffd4 	bl	800a9e6 <_ZN3etl7forwardIRPN11SolarGators11DataModules10DataModuleEEEOT_RNS_16remove_referenceIS6_E4typeE>
 800aa3e:	0002      	movs	r2, r0
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	605a      	str	r2, [r3, #4]
    }
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	0018      	movs	r0, r3
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	b002      	add	sp, #8
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <_ZSt9make_pairIRKmRPN11SolarGators11DataModules10DataModuleEESt4pairINSt17__decay_and_stripIT_E6__typeENS8_IT0_E6__typeEEOS9_OSC_>:
    make_pair(_T1&& __x, _T2&& __y)
 800aa4e:	b590      	push	{r4, r7, lr}
 800aa50:	b085      	sub	sp, #20
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f000 fa0e 	bl	800ae7e <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa62:	0004      	movs	r4, r0
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	0018      	movs	r0, r3
 800aa68:	f000 fa12 	bl	800ae90 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800aa6c:	0002      	movs	r2, r0
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	0021      	movs	r1, r4
 800aa72:	0018      	movs	r0, r3
 800aa74:	f000 fa15 	bl	800aea2 <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>
    }
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	b005      	add	sp, #20
 800aa7e:	bd90      	pop	{r4, r7, pc}

0800aa80 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	0018      	movs	r0, r3
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	b002      	add	sp, #8
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <_ZNSt4pairIKtPN11SolarGators11DataModules10DataModuleEEC1ImS4_Lb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f7ff ffee 	bl	800aa80 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800aaa4:	0003      	movs	r3, r0
	  second(std::forward<_U2>(__p.second)) { }
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	801a      	strh	r2, [r3, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	3304      	adds	r3, #4
 800aab2:	0018      	movs	r0, r3
 800aab4:	f000 fa0c 	bl	800aed0 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>
 800aab8:	0003      	movs	r3, r0
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	605a      	str	r2, [r3, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	0018      	movs	r0, r3
 800aac4:	46bd      	mov	sp, r7
 800aac6:	b002      	add	sp, #8
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>:
  constexpr typename etl::remove_reference<T>::type&& move(T&& t) ETL_NOEXCEPT
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
 800aad2:	687b      	ldr	r3, [r7, #4]
  }
 800aad4:	0018      	movs	r0, r3
 800aad6:	46bd      	mov	sp, r7
 800aad8:	b002      	add	sp, #8
 800aada:	bd80      	pop	{r7, pc}

0800aadc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE18allocate_data_nodeEOSt4pairIKtS4_E>:
    Data_Node& allocate_data_node(rvalue_reference value)
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
      Data_Node& node = create_data_node();
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	0018      	movs	r0, r3
 800aaea:	f000 f9fb 	bl	800aee4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv>
 800aaee:	0003      	movs	r3, r0
 800aaf0:	60fb      	str	r3, [r7, #12]
      ::new (&node.value) value_type(etl::move(value));
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f7ff ffe8 	bl	800aaca <_ZN3etl4moveIRSt4pairIKtPN11SolarGators11DataModules10DataModuleEEEEONS_16remove_referenceIT_E4typeEOSA_>
 800aafa:	0004      	movs	r4, r0
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	330c      	adds	r3, #12
 800ab00:	0019      	movs	r1, r3
 800ab02:	2008      	movs	r0, #8
 800ab04:	f7f8 fcc1 	bl	800348a <_ZnwjPv>
 800ab08:	0003      	movs	r3, r0
 800ab0a:	0022      	movs	r2, r4
 800ab0c:	ca03      	ldmia	r2!, {r0, r1}
 800ab0e:	c303      	stmia	r3!, {r0, r1}
      return node;
 800ab10:	68fb      	ldr	r3, [r7, #12]
    }
 800ab12:	0018      	movs	r0, r3
 800ab14:	46bd      	mov	sp, r7
 800ab16:	b005      	add	sp, #20
 800ab18:	bd90      	pop	{r4, r7, pc}

0800ab1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE>:
    Node* insert_node(Node*& position, Data_Node& node)
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b088      	sub	sp, #32
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	61fb      	str	r3, [r7, #28]
      if (position)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d100      	bne.n	800ab36 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x1c>
 800ab34:	e092      	b.n	800ac5c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x142>
        Node* critical_parent_node = ETL_NULLPTR;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61bb      	str	r3, [r7, #24]
        Node* critical_node = root_node;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	617b      	str	r3, [r7, #20]
        while (found)
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d05b      	beq.n	800abfe <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xe4>
          if (kNeither != found->weight)
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	7a1b      	ldrb	r3, [r3, #8]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d001      	beq.n	800ab52 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x38>
            critical_node = found;
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	617b      	str	r3, [r7, #20]
          Data_Node& found_data_node = imap::data_cast(*found);
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	0018      	movs	r0, r3
 800ab56:	f000 f960 	bl	800ae1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800ab5a:	0003      	movs	r3, r0
 800ab5c:	613b      	str	r3, [r7, #16]
          if (node_comp(node, found_data_node))
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	0018      	movs	r0, r3
 800ab66:	f000 f9eb 	bl	800af40 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800ab6a:	1e03      	subs	r3, r0, #0
 800ab6c:	d003      	beq.n	800ab76 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x5c>
            found->dir = kLeft;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	2200      	movs	r2, #0
 800ab72:	725a      	strb	r2, [r3, #9]
 800ab74:	e017      	b.n	800aba6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x8c>
          else if (node_comp(found_data_node, node))
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	6939      	ldr	r1, [r7, #16]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	0018      	movs	r0, r3
 800ab7e:	f000 f9df 	bl	800af40 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800ab82:	1e03      	subs	r3, r0, #0
 800ab84:	d003      	beq.n	800ab8e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x74>
            found->dir = kRight;
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	725a      	strb	r2, [r3, #9]
 800ab8c:	e00b      	b.n	800aba6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x8c>
            found->dir = kNeither;
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	2202      	movs	r2, #2
 800ab92:	725a      	strb	r2, [r3, #9]
            critical_node = ETL_NULLPTR;
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]
            destroy_data_node(node);
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	0011      	movs	r1, r2
 800ab9e:	0018      	movs	r0, r3
 800aba0:	f000 f9e4 	bl	800af6c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>
            break;
 800aba4:	e02b      	b.n	800abfe <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xe4>
          if (found->children[found->dir])
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	7a5b      	ldrb	r3, [r3, #9]
 800abaa:	001a      	movs	r2, r3
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	0092      	lsls	r2, r2, #2
 800abb0:	58d3      	ldr	r3, [r2, r3]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d012      	beq.n	800abdc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xc2>
            if (kNeither != found->children[found->dir]->weight)
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	7a5b      	ldrb	r3, [r3, #9]
 800abba:	001a      	movs	r2, r3
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	0092      	lsls	r2, r2, #2
 800abc0:	58d3      	ldr	r3, [r2, r3]
 800abc2:	7a1b      	ldrb	r3, [r3, #8]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d001      	beq.n	800abcc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0xb2>
              critical_parent_node = found;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	61bb      	str	r3, [r7, #24]
            found = found->children[found->dir];
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	7a5b      	ldrb	r3, [r3, #9]
 800abd0:	001a      	movs	r2, r3
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	0092      	lsls	r2, r2, #2
 800abd6:	58d3      	ldr	r3, [r2, r3]
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	e7b1      	b.n	800ab40 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x26>
            attach_node(found->children[found->dir], node);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	7a5b      	ldrb	r3, [r3, #9]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	18d3      	adds	r3, r2, r3
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	0019      	movs	r1, r3
 800abec:	f7fd fe08 	bl	8008800 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
            found = found->children[found->dir];
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	7a5b      	ldrb	r3, [r3, #9]
 800abf4:	001a      	movs	r2, r3
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	0092      	lsls	r2, r2, #2
 800abfa:	58d3      	ldr	r3, [r2, r3]
 800abfc:	61fb      	str	r3, [r7, #28]
        if (critical_node)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d034      	beq.n	800ac6e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
          if (critical_parent_node == ETL_NULLPTR && critical_node == root_node)
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10c      	bne.n	800ac24 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x10a>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d107      	bne.n	800ac24 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x10a>
            balance_node(root_node);
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	0019      	movs	r1, r3
 800ac1c:	0010      	movs	r0, r2
 800ac1e:	f7fd fca2 	bl	8008566 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800ac22:	e024      	b.n	800ac6e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
          else if (critical_parent_node == ETL_NULLPTR && critical_node == position)
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x128>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d106      	bne.n	800ac42 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x128>
            balance_node(position);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	0011      	movs	r1, r2
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	f7fd fc93 	bl	8008566 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800ac40:	e015      	b.n	800ac6e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
            if (critical_parent_node != ETL_NULLPTR)
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d012      	beq.n	800ac6e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
              balance_node(critical_parent_node->children[critical_parent_node->dir]);
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	7a5b      	ldrb	r3, [r3, #9]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	18d3      	adds	r3, r2, r3
 800ac54:	0019      	movs	r1, r3
 800ac56:	f7fd fc86 	bl	8008566 <_ZN3etl8map_base12balance_nodeERPNS0_4NodeE>
 800ac5a:	e008      	b.n	800ac6e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11insert_nodeERPNS_8map_base4NodeERNS7_9Data_NodeE+0x154>
        attach_node(position, node);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	68b9      	ldr	r1, [r7, #8]
 800ac62:	0018      	movs	r0, r3
 800ac64:	f7fd fdcc 	bl	8008800 <_ZN3etl8map_base11attach_nodeERPNS0_4NodeERS1_>
        found = position;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	61fb      	str	r3, [r7, #28]
      return found;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
    }
 800ac70:	0018      	movs	r0, r3
 800ac72:	46bd      	mov	sp, r7
 800ac74:	b008      	add	sp, #32
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <_ZSt9make_pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorERbESt4pairINSt17__decay_and_stripIT_E6__typeENSC_IT0_E6__typeEEOSD_OSG_>:
    make_pair(_T1&& __x, _T2&& __y)
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 f980 	bl	800af8c <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 800ac8c:	0004      	movs	r4, r0
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	0018      	movs	r0, r3
 800ac92:	f7fe feaa 	bl	80099ea <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800ac96:	0002      	movs	r2, r0
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	0021      	movs	r1, r4
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f000 f97e 	bl	800af9e <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>
    }
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	46bd      	mov	sp, r7
 800aca6:	b005      	add	sp, #20
 800aca8:	bd90      	pop	{r4, r7, pc}

0800acaa <_ZN3etl12generic_poolILj20ELj4ELj15EEC1Ev>:
    generic_pool()
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
      : etl::ipool(reinterpret_cast<char*>(&buffer[0]), Element_Size, VSize)
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3318      	adds	r3, #24
 800acb8:	0019      	movs	r1, r3
 800acba:	230f      	movs	r3, #15
 800acbc:	2214      	movs	r2, #20
 800acbe:	f7fd fb2a 	bl	8008316 <_ZN3etl5ipoolC1EPcmm>
    }
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	0018      	movs	r0, r3
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b002      	add	sp, #8
 800acca:	bd80      	pop	{r7, pc}

0800accc <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5beginEv>:
    iterator begin()
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
      return iterator(*this, find_limit_node(root_node, kLeft));
 800acd6:	6838      	ldr	r0, [r7, #0]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	2200      	movs	r2, #0
 800acde:	0019      	movs	r1, r3
 800ace0:	f7fd fd6d 	bl	80087be <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800ace4:	0002      	movs	r2, r0
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	0018      	movs	r0, r3
 800acec:	f7ff fe46 	bl	800a97c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
    }
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	46bd      	mov	sp, r7
 800acf4:	b002      	add	sp, #8
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKNS7_8iteratorE>:
      const_iterator(const typename imap::iterator& other)
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	605a      	str	r2, [r3, #4]
      }
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	0018      	movs	r0, r3
 800ad16:	46bd      	mov	sp, r7
 800ad18:	b002      	add	sp, #8
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorD1Ev>:
      ~const_iterator()
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
      }
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b002      	add	sp, #8
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorC1ERKS8_>:
      const_iterator(const const_iterator& other)
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
        : p_map(other.p_map)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
        , p_node(other.p_node)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	605a      	str	r2, [r3, #4]
      }
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	b002      	add	sp, #8
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE3endEv>:
    iterator end()
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
      return iterator(*this);
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	0011      	movs	r1, r2
 800ad62:	0018      	movs	r0, r3
 800ad64:	f000 f938 	bl	800afd8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_>
    }
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	b002      	add	sp, #8
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <_ZN3etlneERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>:
      friend bool operator != (const const_iterator& lhs, const const_iterator& rhs)
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
        return !(lhs == rhs);
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	0011      	movs	r1, r2
 800ad80:	0018      	movs	r0, r3
 800ad82:	f000 f939 	bl	800aff8 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>
 800ad86:	0003      	movs	r3, r0
 800ad88:	001a      	movs	r2, r3
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	4053      	eors	r3, r2
 800ad8e:	b2db      	uxtb	r3, r3
      }
 800ad90:	0018      	movs	r0, r3
 800ad92:	46bd      	mov	sp, r7
 800ad94:	b002      	add	sp, #8
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE5eraseENS7_14const_iteratorE>:
    iterator erase(const_iterator position)
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b087      	sub	sp, #28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
      Node*& reference_node = find_node(root_node, position.p_node);
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3308      	adds	r3, #8
 800ada8:	0019      	movs	r1, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	0018      	movs	r0, r3
 800adb2:	f000 f939 	bl	800b028 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_>
 800adb6:	0003      	movs	r3, r0
 800adb8:	617b      	str	r3, [r7, #20]
      iterator next(*this, reference_node);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	0018      	movs	r0, r3
 800adc4:	f7ff fdda 	bl	800a97c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_PNS_8map_base4NodeE>
      ++next;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	0018      	movs	r0, r3
 800adcc:	f000 f973 	bl	800b0b6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorppEv>
      remove_node(root_node, (*position).first);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	3308      	adds	r3, #8
 800add4:	001c      	movs	r4, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	0018      	movs	r0, r3
 800adda:	f000 f97d 	bl	800b0d8 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratordeEv>
 800adde:	0003      	movs	r3, r0
 800ade0:	001a      	movs	r2, r3
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	0021      	movs	r1, r4
 800ade6:	0018      	movs	r0, r3
 800ade8:	f000 f985 	bl	800b0f6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>
      return next;
 800adec:	46c0      	nop			; (mov r8, r8)
    }
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	46bd      	mov	sp, r7
 800adf2:	b007      	add	sp, #28
 800adf4:	bd90      	pop	{r4, r7, pc}

0800adf6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratoraSERKS8_>:
      const_iterator& operator =(const const_iterator& other)
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
        p_map = other.p_map;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	601a      	str	r2, [r3, #0]
        p_node = other.p_node;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	605a      	str	r2, [r3, #4]
        return *this;
 800ae10:	687b      	ldr	r3, [r7, #4]
      }
 800ae12:	0018      	movs	r0, r3
 800ae14:	46bd      	mov	sp, r7
 800ae16:	b002      	add	sp, #8
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>:
    static Data_Node& data_cast(Node& node)
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
      return static_cast<Data_Node&>(node);
 800ae22:	687b      	ldr	r3, [r7, #4]
    }
 800ae24:	0018      	movs	r0, r3
 800ae26:	46bd      	mov	sp, r7
 800ae28:	b002      	add	sp, #8
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>:
    bool node_comp(key_parameter_t key, const Data_Node& node) const
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
      return kcompare(key, node.value.first);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	3310      	adds	r3, #16
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	330c      	adds	r3, #12
 800ae42:	001a      	movs	r2, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	0019      	movs	r1, r3
 800ae48:	f7ff f874 	bl	8009f34 <_ZNK3etl4lessItEclERKtS3_>
 800ae4c:	0003      	movs	r3, r0
    }
 800ae4e:	0018      	movs	r0, r3
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b004      	add	sp, #16
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>:
    bool node_comp(const Data_Node& node, key_parameter_t key) const
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b084      	sub	sp, #16
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
      return kcompare(node.value.first, key);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3310      	adds	r3, #16
 800ae66:	0018      	movs	r0, r3
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	330c      	adds	r3, #12
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	0019      	movs	r1, r3
 800ae70:	f7ff f860 	bl	8009f34 <_ZNK3etl4lessItEclERKtS3_>
 800ae74:	0003      	movs	r3, r0
    }
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b004      	add	sp, #16
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	0018      	movs	r0, r3
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	b002      	add	sp, #8
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	b002      	add	sp, #8
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <_ZNSt4pairImPN11SolarGators11DataModules10DataModuleEEC1IRS3_Lb1EEERKmOT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	0018      	movs	r0, r3
 800aeba:	f7ff ffe9 	bl	800ae90 <_ZSt7forwardIRPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 800aebe:	0003      	movs	r3, r0
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	0018      	movs	r0, r3
 800aeca:	46bd      	mov	sp, r7
 800aecc:	b004      	add	sp, #16
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <_ZSt7forwardIPN11SolarGators11DataModules10DataModuleEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	0018      	movs	r0, r3
 800aedc:	46bd      	mov	sp, r7
 800aede:	b002      	add	sp, #8
 800aee0:	bd80      	pop	{r7, pc}
	...

0800aee4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv>:
    Data_Node& create_data_node()
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
      Data_Node* (etl::ipool::*func)() = &etl::ipool::allocate<Data_Node>;
 800aeec:	2008      	movs	r0, #8
 800aeee:	183b      	adds	r3, r7, r0
 800aef0:	4a12      	ldr	r2, [pc, #72]	; (800af3c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x58>)
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	183b      	adds	r3, r7, r0
 800aef6:	2200      	movs	r2, #0
 800aef8:	605a      	str	r2, [r3, #4]
      return *(p_node_pool->*func)();
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	183b      	adds	r3, r7, r0
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	105b      	asrs	r3, r3, #1
 800af04:	18d1      	adds	r1, r2, r3
 800af06:	183b      	adds	r3, r7, r0
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	4013      	ands	r3, r2
 800af0e:	d102      	bne.n	800af16 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x32>
 800af10:	183b      	adds	r3, r7, r0
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	e00b      	b.n	800af2e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16create_data_nodeEv+0x4a>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	2008      	movs	r0, #8
 800af1c:	183b      	adds	r3, r7, r0
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	105b      	asrs	r3, r3, #1
 800af22:	18d3      	adds	r3, r2, r3
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	183b      	adds	r3, r7, r0
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	18d3      	adds	r3, r2, r3
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	0008      	movs	r0, r1
 800af30:	4798      	blx	r3
 800af32:	0003      	movs	r3, r0
    }
 800af34:	0018      	movs	r0, r3
 800af36:	46bd      	mov	sp, r7
 800af38:	b004      	add	sp, #16
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	0800b449 	.word	0x0800b449

0800af40 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>:
    bool node_comp(const Data_Node& node1, const Data_Node& node2) const
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
      return kcompare(node1.value.first, node2.value.first);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3310      	adds	r3, #16
 800af50:	0018      	movs	r0, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	330c      	adds	r3, #12
 800af56:	0019      	movs	r1, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	330c      	adds	r3, #12
 800af5c:	001a      	movs	r2, r3
 800af5e:	f7fe ffe9 	bl	8009f34 <_ZNK3etl4lessItEclERKtS3_>
 800af62:	0003      	movs	r3, r0
    }
 800af64:	0018      	movs	r0, r3
 800af66:	46bd      	mov	sp, r7
 800af68:	b004      	add	sp, #16
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>:
    void destroy_data_node(Data_Node& node)
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
      p_node_pool->release(&node);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	0011      	movs	r1, r2
 800af7e:	0018      	movs	r0, r3
 800af80:	f7fd f9b8 	bl	80082f4 <_ZN3etl5ipool7releaseEPKv>
    }
 800af84:	46c0      	nop			; (mov r8, r8)
 800af86:	46bd      	mov	sp, r7
 800af88:	b002      	add	sp, #8
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	0018      	movs	r0, r3
 800af98:	46bd      	mov	sp, r7
 800af9a:	b002      	add	sp, #8
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <_ZNSt4pairIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEbEC1IS9_RbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800af9e:	b590      	push	{r4, r7, lr}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800afaa:	68fc      	ldr	r4, [r7, #12]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	0018      	movs	r0, r3
 800afb0:	f7ff ffec 	bl	800af8c <_ZSt7forwardIN3etl4imapItPN11SolarGators11DataModules10DataModuleENS0_4lessItEEE8iteratorEEOT_RNSt16remove_referenceISA_E4typeE>
 800afb4:	0003      	movs	r3, r0
 800afb6:	0019      	movs	r1, r3
 800afb8:	0020      	movs	r0, r4
 800afba:	f7ff fcf0 	bl	800a99e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERKS8_>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	0018      	movs	r0, r3
 800afc2:	f7fe fd12 	bl	80099ea <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800afc6:	0003      	movs	r3, r0
 800afc8:	781a      	ldrb	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	721a      	strb	r2, [r3, #8]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	0018      	movs	r0, r3
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b005      	add	sp, #20
 800afd6:	bd90      	pop	{r4, r7, pc}

0800afd8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorC1ERS7_>:
      iterator(imap& map)
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
        , p_node(ETL_NULLPTR)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	601a      	str	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	605a      	str	r2, [r3, #4]
      }
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	0018      	movs	r0, r3
 800aff2:	46bd      	mov	sp, r7
 800aff4:	b002      	add	sp, #8
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_>:
      friend bool operator == (const const_iterator& lhs, const const_iterator& rhs)
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
        return lhs.p_map == rhs.p_map && lhs.p_node == rhs.p_node;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d107      	bne.n	800b01e <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x26>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	429a      	cmp	r2, r3
 800b018:	d101      	bne.n	800b01e <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x26>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e000      	b.n	800b020 <_ZN3etleqERKNS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratorESA_+0x28>
 800b01e:	2300      	movs	r3, #0
      }
 800b020:	0018      	movs	r0, r3
 800b022:	46bd      	mov	sp, r7
 800b024:	b002      	add	sp, #8
 800b026:	bd80      	pop	{r7, pc}

0800b028 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_>:
    Node*& find_node(Node*& position, const Node* node)
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
      Node* found = position;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	61fb      	str	r3, [r7, #28]
      while (found)
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d034      	beq.n	800b0aa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x82>
        if (found->children[kLeft] == node)
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	429a      	cmp	r2, r3
 800b048:	d101      	bne.n	800b04e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x26>
          return found->children[kLeft];
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	e02f      	b.n	800b0ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
        else if (found->children[kRight] == node)
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	429a      	cmp	r2, r3
 800b056:	d102      	bne.n	800b05e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x36>
          return found->children[kRight];
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	3304      	adds	r3, #4
 800b05c:	e027      	b.n	800b0ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
          Data_Node& found_data_node = imap::data_cast(*found);
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	0018      	movs	r0, r3
 800b062:	f7ff feda 	bl	800ae1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b066:	0003      	movs	r3, r0
 800b068:	61bb      	str	r3, [r7, #24]
          const Data_Node& data_node = imap::data_cast(*node);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	0018      	movs	r0, r3
 800b06e:	f000 fa09 	bl	800b484 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 800b072:	0003      	movs	r3, r0
 800b074:	617b      	str	r3, [r7, #20]
          if (node_comp(data_node, found_data_node))
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	6979      	ldr	r1, [r7, #20]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	0018      	movs	r0, r3
 800b07e:	f7ff ff5f 	bl	800af40 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b082:	1e03      	subs	r3, r0, #0
 800b084:	d003      	beq.n	800b08e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x66>
            found = found->children[kLeft];
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	e7d5      	b.n	800b03a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
          else if (node_comp(found_data_node, data_node))
 800b08e:	697a      	ldr	r2, [r7, #20]
 800b090:	69b9      	ldr	r1, [r7, #24]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	0018      	movs	r0, r3
 800b096:	f7ff ff53 	bl	800af40 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b09a:	1e03      	subs	r3, r0, #0
 800b09c:	d003      	beq.n	800b0a6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x7e>
            found = found->children[kRight];
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	61fb      	str	r3, [r7, #28]
 800b0a4:	e7c9      	b.n	800b03a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x12>
            return position;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	e001      	b.n	800b0ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9find_nodeERPNS_8map_base4NodeEPKS9_+0x86>
      return root_node;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3308      	adds	r3, #8
    }
 800b0ae:	0018      	movs	r0, r3
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	b008      	add	sp, #32
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE8iteratorppEv>:
      iterator& operator ++()
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
        p_map->next_node(p_node);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	0019      	movs	r1, r3
 800b0c8:	0010      	movs	r0, r2
 800b0ca:	f000 f9e4 	bl	800b496 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>
        return *this;
 800b0ce:	687b      	ldr	r3, [r7, #4]
      }
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	b002      	add	sp, #8
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE14const_iteratordeEv>:
      const_reference operator *() const
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
        return imap::data_cast(p_node)->value;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f000 fa11 	bl	800b50c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>
 800b0ea:	0003      	movs	r3, r0
 800b0ec:	330c      	adds	r3, #12
      }
 800b0ee:	0018      	movs	r0, r3
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	b002      	add	sp, #8
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt>:
    Node* remove_node(Node*& position, key_parameter_t key)
 800b0f6:	b590      	push	{r4, r7, lr}
 800b0f8:	b08f      	sub	sp, #60	; 0x3c
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	607a      	str	r2, [r7, #4]
      Node* found_parent = ETL_NULLPTR;
 800b102:	2300      	movs	r3, #0
 800b104:	637b      	str	r3, [r7, #52]	; 0x34
      Node* found = ETL_NULLPTR;
 800b106:	2300      	movs	r3, #0
 800b108:	633b      	str	r3, [r7, #48]	; 0x30
      Node* replace_parent = ETL_NULLPTR;
 800b10a:	2300      	movs	r3, #0
 800b10c:	62fb      	str	r3, [r7, #44]	; 0x2c
      Node* replace = position;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	62bb      	str	r3, [r7, #40]	; 0x28
      Node* balance_parent = ETL_NULLPTR;
 800b114:	2300      	movs	r3, #0
 800b116:	627b      	str	r3, [r7, #36]	; 0x24
      Node* balance = root_node;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	623b      	str	r3, [r7, #32]
      while (replace)
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	2b00      	cmp	r3, #0
 800b122:	d059      	beq.n	800b1d8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe2>
        Data_Node& replace_data_node = imap::data_cast(*replace);
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	0018      	movs	r0, r3
 800b128:	f7ff fe77 	bl	800ae1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b12c:	0003      	movs	r3, r0
 800b12e:	61fb      	str	r3, [r7, #28]
        if (node_comp(key, replace_data_node))
 800b130:	69fa      	ldr	r2, [r7, #28]
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	0018      	movs	r0, r3
 800b138:	f7ff fe78 	bl	800ae2c <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKtRKNS7_9Data_NodeE>
 800b13c:	1e03      	subs	r3, r0, #0
 800b13e:	d003      	beq.n	800b148 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x52>
          replace->dir = kLeft;
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	2200      	movs	r2, #0
 800b144:	725a      	strb	r2, [r3, #9]
 800b146:	e017      	b.n	800b178 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
        else if (node_comp(replace_data_node, key))
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	69f9      	ldr	r1, [r7, #28]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	0018      	movs	r0, r3
 800b150:	f7ff fe81 	bl	800ae56 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeERKt>
 800b154:	1e03      	subs	r3, r0, #0
 800b156:	d003      	beq.n	800b160 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x6a>
          replace->dir = kRight;
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	2201      	movs	r2, #1
 800b15c:	725a      	strb	r2, [r3, #9]
 800b15e:	e00b      	b.n	800b178 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x82>
          replace->dir = replace->children[kLeft] ? kLeft : kRight;
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	425a      	negs	r2, r3
 800b166:	4153      	adcs	r3, r2
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	001a      	movs	r2, r3
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	725a      	strb	r2, [r3, #9]
          found_parent = replace_parent;
 800b170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
          found = replace;
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	633b      	str	r3, [r7, #48]	; 0x30
        if (replace->children[replace->dir] == ETL_NULLPTR)
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	7a5b      	ldrb	r3, [r3, #9]
 800b17c:	001a      	movs	r2, r3
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	0092      	lsls	r2, r2, #2
 800b182:	58d3      	ldr	r3, [r2, r3]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d026      	beq.n	800b1d6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xe0>
        if ((replace->weight == kNeither) ||
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	7a1b      	ldrb	r3, [r3, #8]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d014      	beq.n	800b1ba <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xc4>
          (replace->weight == (1 - replace->dir) &&
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	7a1b      	ldrb	r3, [r3, #8]
 800b194:	001a      	movs	r2, r3
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	7a5b      	ldrb	r3, [r3, #9]
 800b19a:	0019      	movs	r1, r3
 800b19c:	2301      	movs	r3, #1
 800b19e:	1a5b      	subs	r3, r3, r1
        if ((replace->weight == kNeither) ||
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d10e      	bne.n	800b1c2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
            replace->children[1 - replace->dir]->weight == kNeither))
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	7a5b      	ldrb	r3, [r3, #9]
 800b1a8:	001a      	movs	r2, r3
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	1a9a      	subs	r2, r3, r2
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	0092      	lsls	r2, r2, #2
 800b1b2:	58d3      	ldr	r3, [r2, r3]
 800b1b4:	7a1b      	ldrb	r3, [r3, #8]
          (replace->weight == (1 - replace->dir) &&
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d103      	bne.n	800b1c2 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xcc>
          balance_parent = replace_parent;
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
          balance = replace;
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	623b      	str	r3, [r7, #32]
        replace_parent = replace;
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        replace = replace->children[replace->dir];
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	7a5b      	ldrb	r3, [r3, #9]
 800b1ca:	001a      	movs	r2, r3
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	0092      	lsls	r2, r2, #2
 800b1d0:	58d3      	ldr	r3, [r2, r3]
 800b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (replace)
 800b1d4:	e7a3      	b.n	800b11e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x28>
          break;
 800b1d6:	46c0      	nop			; (mov r8, r8)
      if (found)
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d100      	bne.n	800b1e0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
 800b1de:	e12e      	b.n	800b43e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x348>
        while (balance)
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d100      	bne.n	800b1e8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xf2>
 800b1e6:	e0ee      	b.n	800b3c6 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2d0>
          if (balance->children[balance->dir] == ETL_NULLPTR)
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	7a5b      	ldrb	r3, [r3, #9]
 800b1ec:	001a      	movs	r2, r3
 800b1ee:	6a3b      	ldr	r3, [r7, #32]
 800b1f0:	0092      	lsls	r2, r2, #2
 800b1f2:	58d3      	ldr	r3, [r2, r3]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d100      	bne.n	800b1fa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x104>
 800b1f8:	e0e4      	b.n	800b3c4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ce>
          if (balance->weight == kNeither)
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	7a1b      	ldrb	r3, [r3, #8]
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d107      	bne.n	800b212 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x11c>
            balance->weight = 1 - balance->dir;
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	7a5b      	ldrb	r3, [r3, #9]
 800b206:	2201      	movs	r2, #1
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	721a      	strb	r2, [r3, #8]
 800b210:	e0ce      	b.n	800b3b0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
          else if (balance->weight == balance->dir)
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	7a1a      	ldrb	r2, [r3, #8]
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	7a5b      	ldrb	r3, [r3, #9]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d103      	bne.n	800b226 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x130>
            balance->weight = kNeither;
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	2202      	movs	r2, #2
 800b222:	721a      	strb	r2, [r3, #8]
 800b224:	e0c4      	b.n	800b3b0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
            int weight = balance->children[1 - balance->dir]->weight;
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	7a5b      	ldrb	r3, [r3, #9]
 800b22a:	001a      	movs	r2, r3
 800b22c:	2301      	movs	r3, #1
 800b22e:	1a9a      	subs	r2, r3, r2
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	0092      	lsls	r2, r2, #2
 800b234:	58d3      	ldr	r3, [r2, r3]
 800b236:	7a1b      	ldrb	r3, [r3, #8]
 800b238:	61bb      	str	r3, [r7, #24]
            if (weight == balance->dir)
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	7a5b      	ldrb	r3, [r3, #9]
 800b23e:	001a      	movs	r2, r3
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	4293      	cmp	r3, r2
 800b244:	d138      	bne.n	800b2b8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1c2>
              if (balance_parent == ETL_NULLPTR)
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d119      	bne.n	800b280 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x18a>
                rotate_3node(root_node, 1 - balance->dir,
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3308      	adds	r3, #8
 800b252:	0019      	movs	r1, r3
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	7a5b      	ldrb	r3, [r3, #9]
 800b258:	2201      	movs	r2, #1
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	7a5b      	ldrb	r3, [r3, #9]
 800b262:	001a      	movs	r2, r3
 800b264:	2301      	movs	r3, #1
 800b266:	1a9a      	subs	r2, r3, r2
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	0092      	lsls	r2, r2, #2
 800b26c:	58d3      	ldr	r3, [r2, r3]
 800b26e:	6a3a      	ldr	r2, [r7, #32]
 800b270:	7a52      	ldrb	r2, [r2, #9]
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(root_node, 1 - balance->dir,
 800b276:	7a1b      	ldrb	r3, [r3, #8]
 800b278:	0022      	movs	r2, r4
 800b27a:	f7fd fa21 	bl	80086c0 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800b27e:	e070      	b.n	800b362 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b284:	7a5b      	ldrb	r3, [r3, #9]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28a:	18d1      	adds	r1, r2, r3
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	7a5b      	ldrb	r3, [r3, #9]
 800b290:	2201      	movs	r2, #1
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	b2dc      	uxtb	r4, r3
                  balance->children[1 - balance->dir]->children[balance->dir]->weight);
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	7a5b      	ldrb	r3, [r3, #9]
 800b29a:	001a      	movs	r2, r3
 800b29c:	2301      	movs	r3, #1
 800b29e:	1a9a      	subs	r2, r3, r2
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	0092      	lsls	r2, r2, #2
 800b2a4:	58d3      	ldr	r3, [r2, r3]
 800b2a6:	6a3a      	ldr	r2, [r7, #32]
 800b2a8:	7a52      	ldrb	r2, [r2, #9]
 800b2aa:	0092      	lsls	r2, r2, #2
 800b2ac:	58d3      	ldr	r3, [r2, r3]
                rotate_3node(balance_parent->children[balance_parent->dir], 1 - balance->dir,
 800b2ae:	7a1b      	ldrb	r3, [r3, #8]
 800b2b0:	0022      	movs	r2, r4
 800b2b2:	f7fd fa05 	bl	80086c0 <_ZN3etl8map_base12rotate_3nodeERPNS0_4NodeEhh>
 800b2b6:	e054      	b.n	800b362 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
            else if (weight == kNeither)
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d133      	bne.n	800b326 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x230>
              if (balance_parent == ETL_NULLPTR)
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d111      	bne.n	800b2e8 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x1f2>
                rotate_2node(root_node, 1 - balance->dir);
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	0019      	movs	r1, r3
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	7a5b      	ldrb	r3, [r3, #9]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	001a      	movs	r2, r3
 800b2d8:	f7fd f9bf 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                root_node->weight = balance->dir;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	6a3a      	ldr	r2, [r7, #32]
 800b2e2:	7a52      	ldrb	r2, [r2, #9]
 800b2e4:	721a      	strb	r2, [r3, #8]
 800b2e6:	e016      	b.n	800b316 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x220>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	7a5b      	ldrb	r3, [r3, #9]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2f2:	18d1      	adds	r1, r2, r3
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	7a5b      	ldrb	r3, [r3, #9]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	001a      	movs	r2, r3
 800b300:	f7fd f9ab 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
                balance_parent->children[balance_parent->dir]->weight = balance->dir;
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	7a5b      	ldrb	r3, [r3, #9]
 800b308:	001a      	movs	r2, r3
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	0092      	lsls	r2, r2, #2
 800b30e:	58d3      	ldr	r3, [r2, r3]
 800b310:	6a3a      	ldr	r2, [r7, #32]
 800b312:	7a52      	ldrb	r2, [r2, #9]
 800b314:	721a      	strb	r2, [r3, #8]
              balance->weight = 1 - balance->dir;
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	7a5b      	ldrb	r3, [r3, #9]
 800b31a:	2201      	movs	r2, #1
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	721a      	strb	r2, [r3, #8]
 800b324:	e01d      	b.n	800b362 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
              if (balance_parent == ETL_NULLPTR)
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10c      	bne.n	800b346 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x250>
                rotate_2node(root_node, 1 - balance->dir);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3308      	adds	r3, #8
 800b332:	0019      	movs	r1, r3
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	7a5b      	ldrb	r3, [r3, #9]
 800b338:	2201      	movs	r2, #1
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	001a      	movs	r2, r3
 800b340:	f7fd f98b 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
 800b344:	e00d      	b.n	800b362 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x26c>
                rotate_2node(balance_parent->children[balance_parent->dir], 1 - balance->dir);
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	7a5b      	ldrb	r3, [r3, #9]
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b350:	18d1      	adds	r1, r2, r3
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	7a5b      	ldrb	r3, [r3, #9]
 800b356:	2201      	movs	r2, #1
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	001a      	movs	r2, r3
 800b35e:	f7fd f97c 	bl	800865a <_ZN3etl8map_base12rotate_2nodeERPNS0_4NodeEh>
            if (balance == found)
 800b362:	6a3a      	ldr	r2, [r7, #32]
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	429a      	cmp	r2, r3
 800b368:	d122      	bne.n	800b3b0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
              if (balance_parent)
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d011      	beq.n	800b394 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x29e>
                found_parent = balance_parent->children[balance_parent->dir];
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	7a5b      	ldrb	r3, [r3, #9]
 800b374:	001a      	movs	r2, r3
 800b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b378:	0092      	lsls	r2, r2, #2
 800b37a:	58d3      	ldr	r3, [r2, r3]
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
                found_parent->dir = found_parent->children[kLeft] == found ? kLeft : kRight;
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	1e5a      	subs	r2, r3, #1
 800b388:	4193      	sbcs	r3, r2
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	001a      	movs	r2, r3
 800b38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b390:	725a      	strb	r2, [r3, #9]
 800b392:	e00d      	b.n	800b3b0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2ba>
                found_parent = root_node;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	637b      	str	r3, [r7, #52]	; 0x34
                root_node->dir = root_node->children[kLeft] == found ? kLeft : kRight;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	1e5a      	subs	r2, r3, #1
 800b3a6:	4193      	sbcs	r3, r2
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	725a      	strb	r2, [r3, #9]
          balance_parent = balance;
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	627b      	str	r3, [r7, #36]	; 0x24
          balance = balance->children[balance->dir];
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	7a5b      	ldrb	r3, [r3, #9]
 800b3b8:	001a      	movs	r2, r3
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	0092      	lsls	r2, r2, #2
 800b3be:	58d3      	ldr	r3, [r2, r3]
 800b3c0:	623b      	str	r3, [r7, #32]
        while (balance)
 800b3c2:	e70d      	b.n	800b1e0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0xea>
            break;
 800b3c4:	46c0      	nop			; (mov r8, r8)
        if (found_parent)
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00e      	beq.n	800b3ea <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x2f4>
          detach_node(found_parent->children[found_parent->dir],
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d0:	7a5b      	ldrb	r3, [r3, #9]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3d6:	18d1      	adds	r1, r2, r3
            replace_parent->children[replace_parent->dir]);
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	7a5b      	ldrb	r3, [r3, #9]
          detach_node(found_parent->children[found_parent->dir],
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e0:	18d3      	adds	r3, r2, r3
 800b3e2:	001a      	movs	r2, r3
 800b3e4:	f7fd fa22 	bl	800882c <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800b3e8:	e018      	b.n	800b41c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
          if (replace_parent)
 800b3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00c      	beq.n	800b40a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x314>
            detach_node(root_node, replace_parent->children[replace_parent->dir]);
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	0019      	movs	r1, r3
 800b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fa:	7a5b      	ldrb	r3, [r3, #9]
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b400:	18d3      	adds	r3, r2, r3
 800b402:	001a      	movs	r2, r3
 800b404:	f7fd fa12 	bl	800882c <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
 800b408:	e008      	b.n	800b41c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE11remove_nodeERPNS_8map_base4NodeERKt+0x326>
            detach_node(root_node, root_node);
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3308      	adds	r3, #8
 800b410:	0019      	movs	r1, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3308      	adds	r3, #8
 800b416:	001a      	movs	r2, r3
 800b418:	f7fd fa08 	bl	800882c <_ZN3etl8map_base11detach_nodeERPNS0_4NodeES3_>
        Data_Node& found_data_node = imap::data_cast(*found);
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	0018      	movs	r0, r3
 800b420:	f7ff fcfb 	bl	800ae1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b424:	0003      	movs	r3, r0
 800b426:	617b      	str	r3, [r7, #20]
        --current_size;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	1e5a      	subs	r2, r3, #1
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	601a      	str	r2, [r3, #0]
        destroy_data_node(found_data_node);
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	0011      	movs	r1, r2
 800b438:	0018      	movs	r0, r3
 800b43a:	f7ff fd97 	bl	800af6c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE17destroy_data_nodeERNS7_9Data_NodeE>
      return found;
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 800b440:	0018      	movs	r0, r3
 800b442:	46bd      	mov	sp, r7
 800b444:	b00f      	add	sp, #60	; 0x3c
 800b446:	bd90      	pop	{r4, r7, pc}

0800b448 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v>:
    T* allocate()
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
      if (sizeof(T) > Item_Size)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	2b13      	cmp	r3, #19
 800b456:	d805      	bhi.n	800b464 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x1c>
        ETL_ASSERT(false, ETL_ERROR(etl::pool_element_size));
 800b458:	4b07      	ldr	r3, [pc, #28]	; (800b478 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x30>)
 800b45a:	4a08      	ldr	r2, [pc, #32]	; (800b47c <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x34>)
 800b45c:	4808      	ldr	r0, [pc, #32]	; (800b480 <_ZN3etl5ipool8allocateINS_4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9Data_NodeEEEPT_v+0x38>)
 800b45e:	2175      	movs	r1, #117	; 0x75
 800b460:	f006 fdae 	bl	8011fc0 <__assert_func>
      return reinterpret_cast<T*>(allocate_item());
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	0018      	movs	r0, r3
 800b468:	f7fc ff74 	bl	8008354 <_ZN3etl5ipool13allocate_itemEv>
 800b46c:	0003      	movs	r3, r0
    }
 800b46e:	0018      	movs	r0, r3
 800b470:	46bd      	mov	sp, r7
 800b472:	b002      	add	sp, #8
 800b474:	bd80      	pop	{r7, pc}
 800b476:	46c0      	nop			; (mov r8, r8)
 800b478:	08013690 	.word	0x08013690
 800b47c:	08013a18 	.word	0x08013a18
 800b480:	080136bc 	.word	0x080136bc

0800b484 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>:
    static const Data_Node& data_cast(const Node& node)
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node&>(node);
 800b48c:	687b      	ldr	r3, [r7, #4]
    }
 800b48e:	0018      	movs	r0, r3
 800b490:	46bd      	mov	sp, r7
 800b492:	b002      	add	sp, #8
 800b494:	bd80      	pop	{r7, pc}

0800b496 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE>:
    void next_node(Node*&position)
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
      if (position)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d02d      	beq.n	800b504 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
        if (position->children[kRight])
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x34>
          position = find_limit_node(position->children[kRight], kLeft);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	0019      	movs	r1, r3
 800b4be:	f7fd f97e 	bl	80087be <_ZNK3etl8map_base15find_limit_nodeEPNS0_4NodeEa>
 800b4c2:	0002      	movs	r2, r0
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	601a      	str	r2, [r3, #0]
    }
 800b4c8:	e01c      	b.n	800b504 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x6e>
          Node* parent = position;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
            position = parent;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	601a      	str	r2, [r3, #0]
            parent = find_parent_node(root_node, position);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6899      	ldr	r1, [r3, #8]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f000 f81c 	bl	800b51e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>
 800b4e6:	0003      	movs	r3, r0
 800b4e8:	60fb      	str	r3, [r7, #12]
          } while (parent && parent->children[kRight] == position);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d006      	beq.n	800b4fe <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d100      	bne.n	800b4fe <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x68>
          do {
 800b4fc:	e7e8      	b.n	800b4d0 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9next_nodeERPNS_8map_base4NodeE+0x3a>
          position = parent;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	601a      	str	r2, [r3, #0]
    }
 800b504:	46c0      	nop			; (mov r8, r8)
 800b506:	46bd      	mov	sp, r7
 800b508:	b004      	add	sp, #16
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castEPKNS_8map_base4NodeE>:
    static const Data_Node* data_cast(const Node* p_node)
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
      return static_cast<const Data_Node*>(p_node);
 800b514:	687b      	ldr	r3, [r7, #4]
    }
 800b516:	0018      	movs	r0, r3
 800b518:	46bd      	mov	sp, r7
 800b51a:	b002      	add	sp, #8
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_>:
    Node* find_parent_node(Node* position, const Node* node)
 800b51e:	b580      	push	{r7, lr}
 800b520:	b088      	sub	sp, #32
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	607a      	str	r2, [r7, #4]
      Node* found = ETL_NULLPTR;
 800b52a:	2300      	movs	r3, #0
 800b52c:	61fb      	str	r3, [r7, #28]
      if (position && node && position != node)
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d03c      	beq.n	800b5ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d039      	beq.n	800b5ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d035      	beq.n	800b5ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
        while (position)
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d032      	beq.n	800b5ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
          if (position->children[kLeft] != node &&
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d028      	beq.n	800b5a4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x86>
            position->children[kRight] != node)
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	685b      	ldr	r3, [r3, #4]
          if (position->children[kLeft] != node &&
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d023      	beq.n	800b5a4 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x86>
            const Data_Node& node_data_node = imap::data_cast(*node);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	0018      	movs	r0, r3
 800b560:	f7ff ff90 	bl	800b484 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERKNS_8map_base4NodeE>
 800b564:	0003      	movs	r3, r0
 800b566:	61bb      	str	r3, [r7, #24]
            Data_Node& position_data_node = imap::data_cast(*position);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	0018      	movs	r0, r3
 800b56c:	f7ff fc55 	bl	800ae1a <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9data_castERNS_8map_base4NodeE>
 800b570:	0003      	movs	r3, r0
 800b572:	617b      	str	r3, [r7, #20]
            if (node_comp(node_data_node, position_data_node))
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	69b9      	ldr	r1, [r7, #24]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	0018      	movs	r0, r3
 800b57c:	f7ff fce0 	bl	800af40 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b580:	1e03      	subs	r3, r0, #0
 800b582:	d003      	beq.n	800b58c <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x6e>
              position = position->children[kLeft];
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60bb      	str	r3, [r7, #8]
            }
 800b58a:	e00e      	b.n	800b5aa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
            else if (node_comp(position_data_node, node_data_node))
 800b58c:	69ba      	ldr	r2, [r7, #24]
 800b58e:	6979      	ldr	r1, [r7, #20]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	0018      	movs	r0, r3
 800b594:	f7ff fcd4 	bl	800af40 <_ZNK3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE9node_compERKNS7_9Data_NodeESA_>
 800b598:	1e03      	subs	r3, r0, #0
 800b59a:	d006      	beq.n	800b5aa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
              position = position->children[kRight];
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	60bb      	str	r3, [r7, #8]
            }
 800b5a2:	e002      	b.n	800b5aa <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x8c>
            found = position;
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	61fb      	str	r3, [r7, #28]
            break;
 800b5a8:	e001      	b.n	800b5ae <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x90>
            }
 800b5aa:	46c0      	nop			; (mov r8, r8)
        while (position)
 800b5ac:	e7c9      	b.n	800b542 <_ZN3etl4imapItPN11SolarGators11DataModules10DataModuleENS_4lessItEEE16find_parent_nodeEPNS_8map_base4NodeEPKS9_+0x24>
      return found;
 800b5ae:	69fb      	ldr	r3, [r7, #28]
    }
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b008      	add	sp, #32
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <_ZN11SolarGators7Drivers7ILI9341C1Ess>:
  ILI9341_SLPOUT  , 0x80,                // Exit Sleep
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	0008      	movs	r0, r1
 800b5c2:	0011      	movs	r1, r2
 800b5c4:	1cbb      	adds	r3, r7, #2
 800b5c6:	1c02      	adds	r2, r0, #0
 800b5c8:	801a      	strh	r2, [r3, #0]
 800b5ca:	003b      	movs	r3, r7
 800b5cc:	1c0a      	adds	r2, r1, #0
 800b5ce:	801a      	strh	r2, [r3, #0]
 800b5d0:	4a41      	ldr	r2, [pc, #260]	; (800b6d8 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x120>)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	1cba      	adds	r2, r7, #2
 800b5da:	8812      	ldrh	r2, [r2, #0]
 800b5dc:	809a      	strh	r2, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	003a      	movs	r2, r7
 800b5e2:	8812      	ldrh	r2, [r2, #0]
 800b5e4:	80da      	strh	r2, [r3, #6]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	81da      	strh	r2, [r3, #14]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	821a      	strh	r2, [r3, #16]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2290      	movs	r2, #144	; 0x90
 800b5f6:	05d2      	lsls	r2, r2, #23
 800b5f8:	621a      	str	r2, [r3, #32]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2290      	movs	r2, #144	; 0x90
 800b5fe:	05d2      	lsls	r2, r2, #23
 800b600:	625a      	str	r2, [r3, #36]	; 0x24
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2290      	movs	r2, #144	; 0x90
 800b606:	05d2      	lsls	r2, r2, #23
 800b608:	629a      	str	r2, [r3, #40]	; 0x28
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2290      	movs	r2, #144	; 0x90
 800b60e:	05d2      	lsls	r2, r2, #23
 800b610:	62da      	str	r2, [r3, #44]	; 0x2c
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2290      	movs	r2, #144	; 0x90
 800b616:	05d2      	lsls	r2, r2, #23
 800b618:	631a      	str	r2, [r3, #48]	; 0x30
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a2f      	ldr	r2, [pc, #188]	; (800b6dc <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x124>)
 800b61e:	635a      	str	r2, [r3, #52]	; 0x34
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a2e      	ldr	r2, [pc, #184]	; (800b6dc <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x124>)
 800b624:	639a      	str	r2, [r3, #56]	; 0x38
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a2d      	ldr	r2, [pc, #180]	; (800b6e0 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x128>)
 800b62a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2240      	movs	r2, #64	; 0x40
 800b630:	2102      	movs	r1, #2
 800b632:	5299      	strh	r1, [r3, r2]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a2a      	ldr	r2, [pc, #168]	; (800b6e0 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x128>)
 800b638:	645a      	str	r2, [r3, #68]	; 0x44
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2248      	movs	r2, #72	; 0x48
 800b63e:	2104      	movs	r1, #4
 800b640:	5299      	strh	r1, [r3, r2]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a26      	ldr	r2, [pc, #152]	; (800b6e0 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x128>)
 800b646:	64da      	str	r2, [r3, #76]	; 0x4c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2250      	movs	r2, #80	; 0x50
 800b64c:	2180      	movs	r1, #128	; 0x80
 800b64e:	00c9      	lsls	r1, r1, #3
 800b650:	5299      	strh	r1, [r3, r2]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a22      	ldr	r2, [pc, #136]	; (800b6e0 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x128>)
 800b656:	655a      	str	r2, [r3, #84]	; 0x54
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2258      	movs	r2, #88	; 0x58
 800b65c:	2180      	movs	r1, #128	; 0x80
 800b65e:	0109      	lsls	r1, r1, #4
 800b660:	5299      	strh	r1, [r3, r2]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a1e      	ldr	r2, [pc, #120]	; (800b6e0 <_ZN11SolarGators7Drivers7ILI9341C1Ess+0x128>)
 800b666:	65da      	str	r2, [r3, #92]	; 0x5c
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2260      	movs	r2, #96	; 0x60
 800b66c:	2104      	movs	r1, #4
 800b66e:	5299      	strh	r1, [r3, r2]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2290      	movs	r2, #144	; 0x90
 800b674:	05d2      	lsls	r2, r2, #23
 800b676:	665a      	str	r2, [r3, #100]	; 0x64
{
  text_size_ = 1;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2204      	movs	r2, #4
 800b682:	5e9a      	ldrsh	r2, [r3, r2]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2206      	movs	r2, #6
 800b68c:	5e9a      	ldrsh	r2, [r3, r2]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	825a      	strh	r2, [r3, #18]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2212      	movs	r2, #18
 800b6a2:	5e9a      	ldrsh	r2, [r3, r2]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	76da      	strb	r2, [r3, #27]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	7eda      	ldrb	r2, [r3, #27]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	4252      	negs	r2, r2
 800b6bc:	831a      	strh	r2, [r3, #24]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	8b1a      	ldrh	r2, [r3, #24]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	82da      	strh	r2, [r3, #22]
  wrap = true;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	775a      	strb	r2, [r3, #29]
}
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	b002      	add	sp, #8
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	46c0      	nop			; (mov r8, r8)
 800b6d8:	080146f4 	.word	0x080146f4
 800b6dc:	48000800 	.word	0x48000800
 800b6e0:	48000400 	.word	0x48000400

0800b6e4 <_ZN11SolarGators7Drivers7ILI9341D1Ev>:

ILI9341::~ILI9341()
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	4a03      	ldr	r2, [pc, #12]	; (800b6fc <_ZN11SolarGators7Drivers7ILI9341D1Ev+0x18>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	0018      	movs	r0, r3
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	b002      	add	sp, #8
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	080146f4 	.word	0x080146f4

0800b700 <_ZN11SolarGators7Drivers7ILI9341D0Ev>:
ILI9341::~ILI9341()
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
}
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	0018      	movs	r0, r3
 800b70c:	f7ff ffea 	bl	800b6e4 <_ZN11SolarGators7Drivers7ILI9341D1Ev>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2168      	movs	r1, #104	; 0x68
 800b714:	0018      	movs	r0, r3
 800b716:	f006 fbb9 	bl	8011e8c <_ZdlPvj>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	0018      	movs	r0, r3
 800b71e:	46bd      	mov	sp, r7
 800b720:	b002      	add	sp, #8
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZN11SolarGators7Drivers7ILI93414InitEv>:

void ILI9341::Init()
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af02      	add	r7, sp, #8
 800b72a:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2258      	movs	r2, #88	; 0x58
 800b734:	5a9b      	ldrh	r3, [r3, r2]
 800b736:	2201      	movs	r2, #1
 800b738:	0019      	movs	r1, r3
 800b73a:	f7fa fa1c 	bl	8005b76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2250      	movs	r2, #80	; 0x50
 800b746:	5a9b      	ldrh	r3, [r3, r2]
 800b748:	2201      	movs	r2, #1
 800b74a:	0019      	movs	r1, r3
 800b74c:	f7fa fa13 	bl	8005b76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2248      	movs	r2, #72	; 0x48
 800b758:	5a9b      	ldrh	r3, [r3, r2]
 800b75a:	2201      	movs	r2, #1
 800b75c:	0019      	movs	r1, r3
 800b75e:	f7fa fa0a 	bl	8005b76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2240      	movs	r2, #64	; 0x40
 800b76a:	5a9b      	ldrh	r3, [r3, r2]
 800b76c:	2201      	movs	r2, #1
 800b76e:	0019      	movs	r1, r3
 800b770:	f7fa fa01 	bl	8005b76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2260      	movs	r2, #96	; 0x60
 800b77c:	5a9b      	ldrh	r3, [r3, r2]
 800b77e:	2201      	movs	r2, #1
 800b780:	0019      	movs	r1, r3
 800b782:	f7fa f9f8 	bl	8005b76 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2260      	movs	r2, #96	; 0x60
 800b78e:	5a9b      	ldrh	r3, [r3, r2]
 800b790:	2200      	movs	r2, #0
 800b792:	0019      	movs	r1, r3
 800b794:	f7fa f9ef 	bl	8005b76 <HAL_GPIO_WritePin>
  osDelay(10);
 800b798:	200a      	movs	r0, #10
 800b79a:	f002 fe3d 	bl	800e418 <osDelay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2260      	movs	r2, #96	; 0x60
 800b7a6:	5a9b      	ldrh	r3, [r3, r2]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	0019      	movs	r1, r3
 800b7ac:	f7fa f9e3 	bl	8005b76 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2258      	movs	r2, #88	; 0x58
 800b7b8:	5a9b      	ldrh	r3, [r3, r2]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	0019      	movs	r1, r3
 800b7be:	f7fa f9da 	bl	8005b76 <HAL_GPIO_WritePin>

  TransmitCmd(ILI9341_SWRESET);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f000 f91b 	bl	800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f000 f93a 	bl	800ba4a <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>
  osDelay(50);
 800b7d6:	2032      	movs	r0, #50	; 0x32
 800b7d8:	f002 fe1e 	bl	800e418 <osDelay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 800b7dc:	4b2d      	ldr	r3, [pc, #180]	; (800b894 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x170>)
 800b7de:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	613a      	str	r2, [r7, #16]
 800b7e6:	200f      	movs	r0, #15
 800b7e8:	183a      	adds	r2, r7, r0
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	7013      	strb	r3, [r2, #0]
 800b7ee:	183b      	adds	r3, r7, r0
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	1e5a      	subs	r2, r3, #1
 800b7f4:	4193      	sbcs	r3, r2
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d033      	beq.n	800b864 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x140>
  {
    x = *(addr++);
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	613a      	str	r2, [r7, #16]
 800b802:	210e      	movs	r1, #14
 800b804:	187a      	adds	r2, r7, r1
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	7013      	strb	r3, [r2, #0]
    numArgs = x & 0x7F;
 800b80a:	2317      	movs	r3, #23
 800b80c:	18fb      	adds	r3, r7, r3
 800b80e:	187a      	adds	r2, r7, r1
 800b810:	7812      	ldrb	r2, [r2, #0]
 800b812:	217f      	movs	r1, #127	; 0x7f
 800b814:	400a      	ands	r2, r1
 800b816:	701a      	strb	r2, [r3, #0]
    TransmitCmd(cmd);
 800b818:	183b      	adds	r3, r7, r0
 800b81a:	781a      	ldrb	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	0011      	movs	r1, r2
 800b820:	0018      	movs	r0, r3
 800b822:	f000 f8ee 	bl	800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
    while(numArgs--)
 800b826:	2217      	movs	r2, #23
 800b828:	18bb      	adds	r3, r7, r2
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	18ba      	adds	r2, r7, r2
 800b82e:	1e59      	subs	r1, r3, #1
 800b830:	7011      	strb	r1, [r2, #0]
 800b832:	1e5a      	subs	r2, r3, #1
 800b834:	4193      	sbcs	r3, r2
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d009      	beq.n	800b850 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x12c>
    {
      Transmit8bitData(*(addr++));
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	1c5a      	adds	r2, r3, #1
 800b840:	613a      	str	r2, [r7, #16]
 800b842:	781a      	ldrb	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	0011      	movs	r1, r2
 800b848:	0018      	movs	r0, r3
 800b84a:	f000 f8fe 	bl	800ba4a <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 800b84e:	e7ea      	b.n	800b826 <_ZN11SolarGators7Drivers7ILI93414InitEv+0x102>
    }
    if(x & 0x80)
 800b850:	230e      	movs	r3, #14
 800b852:	18fb      	adds	r3, r7, r3
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	b25b      	sxtb	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dac1      	bge.n	800b7e0 <_ZN11SolarGators7Drivers7ILI93414InitEv+0xbc>
    {
      osDelay(150);
 800b85c:	2096      	movs	r0, #150	; 0x96
 800b85e:	f002 fddb 	bl	800e418 <osDelay>
  while((cmd = *(addr++)) > 0)
 800b862:	e7bd      	b.n	800b7e0 <_ZN11SolarGators7Drivers7ILI93414InitEv+0xbc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2208      	movs	r2, #8
 800b868:	5e9b      	ldrsh	r3, [r3, r2]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	3b01      	subs	r3, #1
 800b86e:	b29a      	uxth	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	210a      	movs	r1, #10
 800b874:	5e5b      	ldrsh	r3, [r3, r1]
 800b876:	b29b      	uxth	r3, r3
 800b878:	3b01      	subs	r3, #1
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	0013      	movs	r3, r2
 800b882:	2200      	movs	r2, #0
 800b884:	2100      	movs	r1, #0
 800b886:	f000 f951 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
}
 800b88a:	46c0      	nop			; (mov r8, r8)
 800b88c:	46bd      	mov	sp, r7
 800b88e:	b006      	add	sp, #24
 800b890:	bd80      	pop	{r7, pc}
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	080146c8 	.word	0x080146c8

0800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>:

inline void ILI9341::Write(uint8_t data)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	000a      	movs	r2, r1
 800b8a2:	1cfb      	adds	r3, r7, #3
 800b8a4:	701a      	strb	r2, [r3, #0]
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
#else
  // Setup data
  LCD_DATA0_GPIO_Port_->ODR ^= ( -((data & 0x01U) >> 0)^LCD_DATA0_GPIO_Port_->ODR ) & (1 << LCD_DATA0_Pos_);
 800b8a6:	1cfb      	adds	r3, r7, #3
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	425a      	negs	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b4:	695b      	ldr	r3, [r3, #20]
 800b8b6:	4053      	eors	r3, r2
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	0019      	movs	r1, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c2:	695a      	ldr	r2, [r3, #20]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c8:	404a      	eors	r2, r1
 800b8ca:	615a      	str	r2, [r3, #20]
  LCD_DATA1_GPIO_Port_->ODR ^= ( -((data & 0x02U) >> 1)^LCD_DATA1_GPIO_Port_->ODR ) & (1 << LCD_DATA1_Pos_);
 800b8cc:	1cfb      	adds	r3, r7, #3
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	085b      	lsrs	r3, r3, #1
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	425a      	negs	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	4053      	eors	r3, r2
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	0019      	movs	r1, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	695a      	ldr	r2, [r3, #20]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f0:	404a      	eors	r2, r1
 800b8f2:	615a      	str	r2, [r3, #20]
  LCD_DATA2_GPIO_Port_->ODR ^= ( -((data & 0x04U) >> 2)^LCD_DATA2_GPIO_Port_->ODR ) & (1 << LCD_DATA2_Pos_);
 800b8f4:	1cfb      	adds	r3, r7, #3
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	089b      	lsrs	r3, r3, #2
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	425a      	negs	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	4053      	eors	r3, r2
 800b908:	2210      	movs	r2, #16
 800b90a:	4013      	ands	r3, r2
 800b90c:	0019      	movs	r1, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b912:	695a      	ldr	r2, [r3, #20]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b918:	404a      	eors	r2, r1
 800b91a:	615a      	str	r2, [r3, #20]
  LCD_DATA3_GPIO_Port_->ODR ^= ( -((data & 0x08U) >> 3)^LCD_DATA3_GPIO_Port_->ODR ) & (1 << LCD_DATA3_Pos_);
 800b91c:	1cfb      	adds	r3, r7, #3
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	08db      	lsrs	r3, r3, #3
 800b922:	2201      	movs	r2, #1
 800b924:	4013      	ands	r3, r2
 800b926:	425a      	negs	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	4053      	eors	r3, r2
 800b930:	2280      	movs	r2, #128	; 0x80
 800b932:	4013      	ands	r3, r2
 800b934:	0019      	movs	r1, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93a:	695a      	ldr	r2, [r3, #20]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b940:	404a      	eors	r2, r1
 800b942:	615a      	str	r2, [r3, #20]
  LCD_DATA4_GPIO_Port_->ODR ^= ( -((data & 0x10U) >> 4)^LCD_DATA4_GPIO_Port_->ODR ) & (1 << LCD_DATA4_Pos_);
 800b944:	1cfb      	adds	r3, r7, #3
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	091b      	lsrs	r3, r3, #4
 800b94a:	2201      	movs	r2, #1
 800b94c:	4013      	ands	r3, r2
 800b94e:	425a      	negs	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	4053      	eors	r3, r2
 800b958:	2240      	movs	r2, #64	; 0x40
 800b95a:	4013      	ands	r3, r2
 800b95c:	0019      	movs	r1, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	695a      	ldr	r2, [r3, #20]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b968:	404a      	eors	r2, r1
 800b96a:	615a      	str	r2, [r3, #20]
  LCD_DATA5_GPIO_Port_->ODR ^= ( -((data & 0x20U) >> 5)^LCD_DATA5_GPIO_Port_->ODR ) & (1 << LCD_DATA5_Pos_);
 800b96c:	1cfb      	adds	r3, r7, #3
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	095b      	lsrs	r3, r3, #5
 800b972:	2201      	movs	r2, #1
 800b974:	4013      	ands	r3, r2
 800b976:	425a      	negs	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	4053      	eors	r3, r2
 800b980:	2220      	movs	r2, #32
 800b982:	4013      	ands	r3, r2
 800b984:	0019      	movs	r1, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98a:	695a      	ldr	r2, [r3, #20]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b990:	404a      	eors	r2, r1
 800b992:	615a      	str	r2, [r3, #20]
  LCD_DATA6_GPIO_Port_->ODR ^= ( -((data & 0x40U) >> 6)^LCD_DATA6_GPIO_Port_->ODR ) & (1 << LCD_DATA6_Pos_);
 800b994:	1cfb      	adds	r3, r7, #3
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	099b      	lsrs	r3, r3, #6
 800b99a:	2201      	movs	r2, #1
 800b99c:	4013      	ands	r3, r2
 800b99e:	425a      	negs	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	4053      	eors	r3, r2
 800b9a8:	2210      	movs	r2, #16
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	0019      	movs	r1, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	695a      	ldr	r2, [r3, #20]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	404a      	eors	r2, r1
 800b9ba:	615a      	str	r2, [r3, #20]
  LCD_DATA7_GPIO_Port_->ODR ^= ( -((data & 0x80U) >> 7)^LCD_DATA7_GPIO_Port_->ODR ) & (1 << LCD_DATA7_Pos_);
 800b9bc:	1cfb      	adds	r3, r7, #3
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	09db      	lsrs	r3, r3, #7
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	425a      	negs	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	4053      	eors	r3, r2
 800b9ce:	2208      	movs	r2, #8
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	0019      	movs	r1, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a1b      	ldr	r3, [r3, #32]
 800b9d8:	695a      	ldr	r2, [r3, #20]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	404a      	eors	r2, r1
 800b9e0:	615a      	str	r2, [r3, #20]
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BRR = LCD_WRITE_Pin_;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2248      	movs	r2, #72	; 0x48
 800b9e6:	5a9a      	ldrh	r2, [r3, r2]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ec:	629a      	str	r2, [r3, #40]	; 0x28
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2248      	movs	r2, #72	; 0x48
 800b9f2:	5a9a      	ldrh	r2, [r3, r2]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f8:	619a      	str	r2, [r3, #24]
#endif

}
 800b9fa:	46c0      	nop			; (mov r8, r8)
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	b002      	add	sp, #8
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>:

void ILI9341::TransmitCmd(uint8_t cmd)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	000a      	movs	r2, r1
 800ba0c:	1cfb      	adds	r3, r7, #3
 800ba0e:	701a      	strb	r2, [r3, #0]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2250      	movs	r2, #80	; 0x50
 800ba18:	5a9b      	ldrh	r3, [r3, r2]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	0019      	movs	r1, r3
 800ba1e:	f7fa f8aa 	bl	8005b76 <HAL_GPIO_WritePin>

  Write(cmd);
 800ba22:	1cfb      	adds	r3, r7, #3
 800ba24:	781a      	ldrb	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	0011      	movs	r1, r2
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	f7ff ff34 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>

  // D/C -> HIGH
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2250      	movs	r2, #80	; 0x50
 800ba38:	5a9b      	ldrh	r3, [r3, r2]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	0019      	movs	r1, r3
 800ba3e:	f7fa f89a 	bl	8005b76 <HAL_GPIO_WritePin>
}
 800ba42:	46c0      	nop			; (mov r8, r8)
 800ba44:	46bd      	mov	sp, r7
 800ba46:	b002      	add	sp, #8
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>:

void ILI9341::Transmit8bitData(uint8_t data)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b082      	sub	sp, #8
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	000a      	movs	r2, r1
 800ba54:	1cfb      	adds	r3, r7, #3
 800ba56:	701a      	strb	r2, [r3, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2250      	movs	r2, #80	; 0x50
 800ba60:	5a9b      	ldrh	r3, [r3, r2]
 800ba62:	2201      	movs	r2, #1
 800ba64:	0019      	movs	r1, r3
 800ba66:	f7fa f886 	bl	8005b76 <HAL_GPIO_WritePin>

  Write(data);
 800ba6a:	1cfb      	adds	r3, r7, #3
 800ba6c:	781a      	ldrb	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	0011      	movs	r1, r2
 800ba72:	0018      	movs	r0, r3
 800ba74:	f7ff ff10 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
}
 800ba78:	46c0      	nop			; (mov r8, r8)
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	b002      	add	sp, #8
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>:

void ILI9341::Transmit16bitData(uint16_t data)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	000a      	movs	r2, r1
 800ba8a:	1cbb      	adds	r3, r7, #2
 800ba8c:	801a      	strh	r2, [r3, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2250      	movs	r2, #80	; 0x50
 800ba96:	5a9b      	ldrh	r3, [r3, r2]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	0019      	movs	r1, r3
 800ba9c:	f7fa f86b 	bl	8005b76 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 800baa0:	1cbb      	adds	r3, r7, #2
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	121b      	asrs	r3, r3, #8
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	0011      	movs	r1, r2
 800baac:	0018      	movs	r0, r3
 800baae:	f7ff fef3 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 800bab2:	1cbb      	adds	r3, r7, #2
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	0011      	movs	r1, r2
 800babc:	0018      	movs	r0, r3
 800babe:	f7ff feeb 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>

}
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	46bd      	mov	sp, r7
 800bac6:	b002      	add	sp, #8
 800bac8:	bd80      	pop	{r7, pc}

0800baca <_ZN11SolarGators7Drivers7ILI934117Transmit32bitDataEm>:

void ILI9341::Transmit32bitData(uint32_t data)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2250      	movs	r2, #80	; 0x50
 800badc:	5a9b      	ldrh	r3, [r3, r2]
 800bade:	2201      	movs	r2, #1
 800bae0:	0019      	movs	r1, r3
 800bae2:	f7fa f848 	bl	8005b76 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	0e1b      	lsrs	r3, r3, #24
 800baea:	b2da      	uxtb	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	0011      	movs	r1, r2
 800baf0:	0018      	movs	r0, r3
 800baf2:	f7ff fed1 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	0c1b      	lsrs	r3, r3, #16
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	0011      	movs	r1, r2
 800bb00:	0018      	movs	r0, r3
 800bb02:	f7ff fec9 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	0a1b      	lsrs	r3, r3, #8
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	0011      	movs	r1, r2
 800bb10:	0018      	movs	r0, r3
 800bb12:	f7ff fec1 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	0011      	movs	r1, r2
 800bb1e:	0018      	movs	r0, r3
 800bb20:	f7ff feba 	bl	800b898 <_ZN11SolarGators7Drivers7ILI93415WriteEh>

}
 800bb24:	46c0      	nop			; (mov r8, r8)
 800bb26:	46bd      	mov	sp, r7
 800bb28:	b002      	add	sp, #8
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>:

char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 800bb2c:	b5b0      	push	{r4, r5, r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	000c      	movs	r4, r1
 800bb36:	0010      	movs	r0, r2
 800bb38:	0019      	movs	r1, r3
 800bb3a:	250a      	movs	r5, #10
 800bb3c:	197b      	adds	r3, r7, r5
 800bb3e:	1c22      	adds	r2, r4, #0
 800bb40:	801a      	strh	r2, [r3, #0]
 800bb42:	2408      	movs	r4, #8
 800bb44:	193b      	adds	r3, r7, r4
 800bb46:	1c02      	adds	r2, r0, #0
 800bb48:	801a      	strh	r2, [r3, #0]
 800bb4a:	1dbb      	adds	r3, r7, #6
 800bb4c:	1c0a      	adds	r2, r1, #0
 800bb4e:	801a      	strh	r2, [r3, #0]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2258      	movs	r2, #88	; 0x58
 800bb58:	5a9b      	ldrh	r3, [r3, r2]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	0019      	movs	r1, r3
 800bb5e:	f7fa f80a 	bl	8005b76 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  if ((xs > xe) || (xe > width_) ||
 800bb62:	197a      	adds	r2, r7, r5
 800bb64:	1dbb      	adds	r3, r7, #6
 800bb66:	8812      	ldrh	r2, [r2, #0]
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d814      	bhi.n	800bb98 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x6c>
 800bb6e:	1dbb      	adds	r3, r7, #6
 800bb70:	881b      	ldrh	r3, [r3, #0]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	2108      	movs	r1, #8
 800bb76:	5e52      	ldrsh	r2, [r2, r1]
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	dc0d      	bgt.n	800bb98 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x6c>
 800bb7c:	193a      	adds	r2, r7, r4
 800bb7e:	2120      	movs	r1, #32
 800bb80:	187b      	adds	r3, r7, r1
 800bb82:	8812      	ldrh	r2, [r2, #0]
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d806      	bhi.n	800bb98 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x6c>
      (ys > ye) || (ye > height_))
 800bb8a:	187b      	adds	r3, r7, r1
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	210a      	movs	r1, #10
 800bb92:	5e52      	ldrsh	r2, [r2, r1]
 800bb94:	4293      	cmp	r3, r2
 800bb96:	dd01      	ble.n	800bb9c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0x70>
  {
    // out of range
    return ILI9341_ERROR;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e02c      	b.n	800bbf6 <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt+0xca>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	212a      	movs	r1, #42	; 0x2a
 800bba0:	0018      	movs	r0, r3
 800bba2:	f7ff ff2e 	bl	800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 800bba6:	230a      	movs	r3, #10
 800bba8:	18fb      	adds	r3, r7, r3
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	041a      	lsls	r2, r3, #16
 800bbae:	1dbb      	adds	r3, r7, #6
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	0011      	movs	r1, r2
 800bbb8:	0018      	movs	r0, r3
 800bbba:	f7ff ff86 	bl	800baca <_ZN11SolarGators7Drivers7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	212b      	movs	r1, #43	; 0x2b
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	f7ff ff1d 	bl	800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 800bbc8:	2308      	movs	r3, #8
 800bbca:	18fb      	adds	r3, r7, r3
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	041a      	lsls	r2, r3, #16
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	18fb      	adds	r3, r7, r3
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	0011      	movs	r1, r2
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f7ff ff74 	bl	800baca <_ZN11SolarGators7Drivers7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2258      	movs	r2, #88	; 0x58
 800bbea:	5a9b      	ldrh	r3, [r3, r2]
 800bbec:	2201      	movs	r2, #1
 800bbee:	0019      	movs	r1, r3
 800bbf0:	f7f9 ffc1 	bl	8005b76 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 800bbf4:	2301      	movs	r3, #1
}
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	b004      	add	sp, #16
 800bbfc:	bdb0      	pop	{r4, r5, r7, pc}

0800bbfe <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt>:

char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 800bbfe:	b5b0      	push	{r4, r5, r7, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af02      	add	r7, sp, #8
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	000c      	movs	r4, r1
 800bc08:	0010      	movs	r0, r2
 800bc0a:	0019      	movs	r1, r3
 800bc0c:	250a      	movs	r5, #10
 800bc0e:	197b      	adds	r3, r7, r5
 800bc10:	1c22      	adds	r2, r4, #0
 800bc12:	801a      	strh	r2, [r3, #0]
 800bc14:	2408      	movs	r4, #8
 800bc16:	193b      	adds	r3, r7, r4
 800bc18:	1c02      	adds	r2, r0, #0
 800bc1a:	801a      	strh	r2, [r3, #0]
 800bc1c:	1dbb      	adds	r3, r7, #6
 800bc1e:	1c0a      	adds	r2, r1, #0
 800bc20:	801a      	strh	r2, [r3, #0]
  // check dimension
  if ((x > width_) || (y > height_)) {
 800bc22:	197b      	adds	r3, r7, r5
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	2108      	movs	r1, #8
 800bc2a:	5e52      	ldrsh	r2, [r2, r1]
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	dc06      	bgt.n	800bc3e <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt+0x40>
 800bc30:	193b      	adds	r3, r7, r4
 800bc32:	881b      	ldrh	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	210a      	movs	r1, #10
 800bc38:	5e52      	ldrsh	r2, [r2, r1]
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	dd01      	ble.n	800bc42 <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt+0x44>
    // error
    return ILI9341_ERROR;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e016      	b.n	800bc70 <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt+0x72>
  }
  // set window
  SetWindow(x, y, x, y);
 800bc42:	210a      	movs	r1, #10
 800bc44:	187b      	adds	r3, r7, r1
 800bc46:	881c      	ldrh	r4, [r3, #0]
 800bc48:	2508      	movs	r5, #8
 800bc4a:	197b      	adds	r3, r7, r5
 800bc4c:	881a      	ldrh	r2, [r3, #0]
 800bc4e:	187b      	adds	r3, r7, r1
 800bc50:	8819      	ldrh	r1, [r3, #0]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	197b      	adds	r3, r7, r5
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	0023      	movs	r3, r4
 800bc5c:	f7ff ff66 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 800bc60:	1dbb      	adds	r3, r7, #6
 800bc62:	8819      	ldrh	r1, [r3, #0]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2201      	movs	r2, #1
 800bc68:	0018      	movs	r0, r3
 800bc6a:	f000 f805 	bl	800bc78 <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 800bc6e:	2301      	movs	r3, #1
}
 800bc70:	0018      	movs	r0, r3
 800bc72:	46bd      	mov	sp, r7
 800bc74:	b004      	add	sp, #16
 800bc76:	bdb0      	pop	{r4, r5, r7, pc}

0800bc78 <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	607a      	str	r2, [r7, #4]
 800bc82:	230a      	movs	r3, #10
 800bc84:	18fb      	adds	r3, r7, r3
 800bc86:	1c0a      	adds	r2, r1, #0
 800bc88:	801a      	strh	r2, [r3, #0]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2258      	movs	r2, #88	; 0x58
 800bc92:	5a9b      	ldrh	r3, [r3, r2]
 800bc94:	2200      	movs	r2, #0
 800bc96:	0019      	movs	r1, r3
 800bc98:	f7f9 ff6d 	bl	8005b76 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	212c      	movs	r1, #44	; 0x2c
 800bca0:	0018      	movs	r0, r3
 800bca2:	f7ff feae 	bl	800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	1e5a      	subs	r2, r3, #1
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	1e5a      	subs	r2, r3, #1
 800bcae:	4193      	sbcs	r3, r2
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d008      	beq.n	800bcc8 <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm+0x50>
    // write color - first colors byte
    Transmit16bitData(color);
 800bcb6:	230a      	movs	r3, #10
 800bcb8:	18fb      	adds	r3, r7, r3
 800bcba:	881a      	ldrh	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	0011      	movs	r1, r2
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	f7ff fedd 	bl	800ba80 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>
  while (count--) {
 800bcc6:	e7ee      	b.n	800bca6 <_ZN11SolarGators7Drivers7ILI934112SendColor565Etm+0x2e>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2258      	movs	r2, #88	; 0x58
 800bcd0:	5a9b      	ldrh	r3, [r3, r2]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	0019      	movs	r1, r3
 800bcd6:	f7f9 ff4e 	bl	8005b76 <HAL_GPIO_WritePin>
}
 800bcda:	46c0      	nop			; (mov r8, r8)
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	b004      	add	sp, #16
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 800bce2:	b590      	push	{r4, r7, lr}
 800bce4:	b085      	sub	sp, #20
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	60f8      	str	r0, [r7, #12]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	240a      	movs	r4, #10
 800bcee:	193b      	adds	r3, r7, r4
 800bcf0:	1c0a      	adds	r2, r1, #0
 800bcf2:	801a      	strh	r2, [r3, #0]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2258      	movs	r2, #88	; 0x58
 800bcfc:	5a9b      	ldrh	r3, [r3, r2]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	0019      	movs	r1, r3
 800bd02:	f7f9 ff38 	bl	8005b76 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	212c      	movs	r1, #44	; 0x2c
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	f7ff fe79 	bl	800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 800bd10:	193b      	adds	r3, r7, r4
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	22ff      	movs	r2, #255	; 0xff
 800bd16:	401a      	ands	r2, r3
 800bd18:	193b      	adds	r3, r7, r4
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	121b      	asrs	r3, r3, #8
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d12a      	bne.n	800bd78 <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0x96>
  {
    count--;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 800bd28:	193b      	adds	r3, r7, r4
 800bd2a:	881a      	ldrh	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	0011      	movs	r1, r2
 800bd30:	0018      	movs	r0, r3
 800bd32:	f7ff fea5 	bl	800ba80 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>
    while(count--)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	1e5a      	subs	r2, r3, #1
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	1e5a      	subs	r2, r3, #1
 800bd3e:	4193      	sbcs	r3, r2
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d029      	beq.n	800bd9a <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0xb8>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
#else
  // Pulse Write for high byte
  LCD_WRITE_GPIO_Port_->BRR = LCD_WRITE_Pin_;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2248      	movs	r2, #72	; 0x48
 800bd4a:	5a9a      	ldrh	r2, [r3, r2]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd50:	629a      	str	r2, [r3, #40]	; 0x28
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2248      	movs	r2, #72	; 0x48
 800bd56:	5a9a      	ldrh	r2, [r3, r2]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd5c:	619a      	str	r2, [r3, #24]
  // Pulse Write for low byte
  LCD_WRITE_GPIO_Port_->BRR = LCD_WRITE_Pin_;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2248      	movs	r2, #72	; 0x48
 800bd62:	5a9a      	ldrh	r2, [r3, r2]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd68:	629a      	str	r2, [r3, #40]	; 0x28
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2248      	movs	r2, #72	; 0x48
 800bd6e:	5a9a      	ldrh	r2, [r3, r2]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd74:	619a      	str	r2, [r3, #24]
    while(count--)
 800bd76:	e7de      	b.n	800bd36 <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0x54>
#endif
    }
  }
  else
  {
    while (count--)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	1e5a      	subs	r2, r3, #1
 800bd7c:	607a      	str	r2, [r7, #4]
 800bd7e:	1e5a      	subs	r2, r3, #1
 800bd80:	4193      	sbcs	r3, r2
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d008      	beq.n	800bd9a <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0xb8>
    {
      Transmit16bitData(color);
 800bd88:	230a      	movs	r3, #10
 800bd8a:	18fb      	adds	r3, r7, r3
 800bd8c:	881a      	ldrh	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	0011      	movs	r1, r2
 800bd92:	0018      	movs	r0, r3
 800bd94:	f7ff fe74 	bl	800ba80 <_ZN11SolarGators7Drivers7ILI934117Transmit16bitDataEt>
    while (count--)
 800bd98:	e7ee      	b.n	800bd78 <_ZN11SolarGators7Drivers7ILI93415FloodEtm+0x96>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2258      	movs	r2, #88	; 0x58
 800bda2:	5a9b      	ldrh	r3, [r3, r2]
 800bda4:	2201      	movs	r2, #1
 800bda6:	0019      	movs	r1, r3
 800bda8:	f7f9 fee5 	bl	8005b76 <HAL_GPIO_WritePin>
}
 800bdac:	46c0      	nop			; (mov r8, r8)
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	b005      	add	sp, #20
 800bdb2:	bd90      	pop	{r4, r7, pc}

0800bdb4 <_ZN11SolarGators7Drivers7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	000a      	movs	r2, r1
 800bdbe:	1cbb      	adds	r3, r7, #2
 800bdc0:	801a      	strh	r2, [r3, #0]
  // set whole window
  SetWindow(0, 0, width_, height_);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2208      	movs	r2, #8
 800bdc6:	5e9b      	ldrsh	r3, [r3, r2]
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	210a      	movs	r1, #10
 800bdce:	5e5b      	ldrsh	r3, [r3, r1]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	0013      	movs	r3, r2
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2100      	movs	r1, #0
 800bddc:	f7ff fea6 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 800bde0:	2396      	movs	r3, #150	; 0x96
 800bde2:	025a      	lsls	r2, r3, #9
 800bde4:	1cbb      	adds	r3, r7, #2
 800bde6:	8819      	ldrh	r1, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	0018      	movs	r0, r3
 800bdec:	f7ff ff79 	bl	800bce2 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	1cba      	adds	r2, r7, #2
 800bdf4:	8812      	ldrh	r2, [r2, #0]
 800bdf6:	831a      	strh	r2, [r3, #24]
}
 800bdf8:	46c0      	nop			; (mov r8, r8)
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	b002      	add	sp, #8
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 800be00:	b5b0      	push	{r4, r5, r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af02      	add	r7, sp, #8
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	000c      	movs	r4, r1
 800be0a:	0010      	movs	r0, r2
 800be0c:	0019      	movs	r1, r3
 800be0e:	250a      	movs	r5, #10
 800be10:	197b      	adds	r3, r7, r5
 800be12:	1c22      	adds	r2, r4, #0
 800be14:	801a      	strh	r2, [r3, #0]
 800be16:	2408      	movs	r4, #8
 800be18:	193b      	adds	r3, r7, r4
 800be1a:	1c02      	adds	r2, r0, #0
 800be1c:	801a      	strh	r2, [r3, #0]
 800be1e:	1dbb      	adds	r3, r7, #6
 800be20:	1c0a      	adds	r2, r1, #0
 800be22:	801a      	strh	r2, [r3, #0]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 800be24:	1dbb      	adds	r3, r7, #6
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01d      	beq.n	800be68 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x68>
 800be2c:	193b      	adds	r3, r7, r4
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	210a      	movs	r1, #10
 800be34:	5e52      	ldrsh	r2, [r2, r1]
 800be36:	4293      	cmp	r3, r2
 800be38:	da16      	bge.n	800be68 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x68>
 800be3a:	197b      	adds	r3, r7, r5
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	2108      	movs	r1, #8
 800be42:	5e52      	ldrsh	r2, [r2, r1]
 800be44:	4293      	cmp	r3, r2
 800be46:	da0f      	bge.n	800be68 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x68>
      ((x2 = (x + length - 1)) < 0))
 800be48:	197a      	adds	r2, r7, r5
 800be4a:	1dbb      	adds	r3, r7, #6
 800be4c:	8812      	ldrh	r2, [r2, #0]
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	18d3      	adds	r3, r2, r3
 800be52:	b29b      	uxth	r3, r3
 800be54:	3b01      	subs	r3, #1
 800be56:	b29a      	uxth	r2, r3
 800be58:	2116      	movs	r1, #22
 800be5a:	187b      	adds	r3, r7, r1
 800be5c:	801a      	strh	r2, [r3, #0]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 800be5e:	187b      	adds	r3, r7, r1
 800be60:	2200      	movs	r2, #0
 800be62:	5e9b      	ldrsh	r3, [r3, r2]
 800be64:	2b00      	cmp	r3, #0
 800be66:	da01      	bge.n	800be6c <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x6c>
 800be68:	2301      	movs	r3, #1
 800be6a:	e000      	b.n	800be6e <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0x6e>
 800be6c:	2300      	movs	r3, #0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d134      	bne.n	800bedc <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0xdc>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2208      	movs	r2, #8
 800be76:	5e9b      	ldrsh	r3, [r3, r2]
 800be78:	2116      	movs	r1, #22
 800be7a:	187a      	adds	r2, r7, r1
 800be7c:	2000      	movs	r0, #0
 800be7e:	5e12      	ldrsh	r2, [r2, r0]
 800be80:	429a      	cmp	r2, r3
 800be82:	db11      	blt.n	800bea8 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0xa8>
    x2 = width_ - 1;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2208      	movs	r2, #8
 800be88:	5e9b      	ldrsh	r3, [r3, r2]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	3b01      	subs	r3, #1
 800be8e:	b29a      	uxth	r2, r3
 800be90:	187b      	adds	r3, r7, r1
 800be92:	801a      	strh	r2, [r3, #0]
    length = x2 - x + 1;
 800be94:	187b      	adds	r3, r7, r1
 800be96:	881a      	ldrh	r2, [r3, #0]
 800be98:	230a      	movs	r3, #10
 800be9a:	18fb      	adds	r3, r7, r3
 800be9c:	881b      	ldrh	r3, [r3, #0]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	1dbb      	adds	r3, r7, #6
 800bea4:	3201      	adds	r2, #1
 800bea6:	801a      	strh	r2, [r3, #0]
  }

  SetWindow(x, y, x2, y);
 800bea8:	2316      	movs	r3, #22
 800beaa:	18fb      	adds	r3, r7, r3
 800beac:	881c      	ldrh	r4, [r3, #0]
 800beae:	2508      	movs	r5, #8
 800beb0:	197b      	adds	r3, r7, r5
 800beb2:	881a      	ldrh	r2, [r3, #0]
 800beb4:	230a      	movs	r3, #10
 800beb6:	18fb      	adds	r3, r7, r3
 800beb8:	8819      	ldrh	r1, [r3, #0]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	197b      	adds	r3, r7, r5
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	0023      	movs	r3, r4
 800bec4:	f7ff fe32 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  Flood(color, length);
 800bec8:	1dbb      	adds	r3, r7, #6
 800beca:	881a      	ldrh	r2, [r3, #0]
 800becc:	2328      	movs	r3, #40	; 0x28
 800bece:	18fb      	adds	r3, r7, r3
 800bed0:	8819      	ldrh	r1, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	0018      	movs	r0, r3
 800bed6:	f7ff ff04 	bl	800bce2 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
 800beda:	e000      	b.n	800bede <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt+0xde>
    return;
 800bedc:	46c0      	nop			; (mov r8, r8)
}
 800bede:	46bd      	mov	sp, r7
 800bee0:	b006      	add	sp, #24
 800bee2:	bdb0      	pop	{r4, r5, r7, pc}

0800bee4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 800bee4:	b5b0      	push	{r4, r5, r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af02      	add	r7, sp, #8
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	000c      	movs	r4, r1
 800beee:	0010      	movs	r0, r2
 800bef0:	0019      	movs	r1, r3
 800bef2:	250a      	movs	r5, #10
 800bef4:	197b      	adds	r3, r7, r5
 800bef6:	1c22      	adds	r2, r4, #0
 800bef8:	801a      	strh	r2, [r3, #0]
 800befa:	2408      	movs	r4, #8
 800befc:	193b      	adds	r3, r7, r4
 800befe:	1c02      	adds	r2, r0, #0
 800bf00:	801a      	strh	r2, [r3, #0]
 800bf02:	1dbb      	adds	r3, r7, #6
 800bf04:	1c0a      	adds	r2, r1, #0
 800bf06:	801a      	strh	r2, [r3, #0]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 800bf08:	1dbb      	adds	r3, r7, #6
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01d      	beq.n	800bf4c <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x68>
 800bf10:	197b      	adds	r3, r7, r5
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	2108      	movs	r1, #8
 800bf18:	5e52      	ldrsh	r2, [r2, r1]
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	da16      	bge.n	800bf4c <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x68>
 800bf1e:	193b      	adds	r3, r7, r4
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	210a      	movs	r1, #10
 800bf26:	5e52      	ldrsh	r2, [r2, r1]
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	da0f      	bge.n	800bf4c <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x68>
      ((y2 = (y + length - 1)) < 0))
 800bf2c:	193a      	adds	r2, r7, r4
 800bf2e:	1dbb      	adds	r3, r7, #6
 800bf30:	8812      	ldrh	r2, [r2, #0]
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	18d3      	adds	r3, r2, r3
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	2116      	movs	r1, #22
 800bf3e:	187b      	adds	r3, r7, r1
 800bf40:	801a      	strh	r2, [r3, #0]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 800bf42:	187b      	adds	r3, r7, r1
 800bf44:	2200      	movs	r2, #0
 800bf46:	5e9b      	ldrsh	r3, [r3, r2]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	da01      	bge.n	800bf50 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x6c>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0x6e>
 800bf50:	2300      	movs	r3, #0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d135      	bne.n	800bfc2 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0xde>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	220a      	movs	r2, #10
 800bf5a:	5e9b      	ldrsh	r3, [r3, r2]
 800bf5c:	2116      	movs	r1, #22
 800bf5e:	187a      	adds	r2, r7, r1
 800bf60:	2000      	movs	r0, #0
 800bf62:	5e12      	ldrsh	r2, [r2, r0]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	db11      	blt.n	800bf8c <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0xa8>
    y2 = height_ - 1;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	220a      	movs	r2, #10
 800bf6c:	5e9b      	ldrsh	r3, [r3, r2]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	3b01      	subs	r3, #1
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	187b      	adds	r3, r7, r1
 800bf76:	801a      	strh	r2, [r3, #0]
    length = y2 - y + 1;
 800bf78:	187b      	adds	r3, r7, r1
 800bf7a:	881a      	ldrh	r2, [r3, #0]
 800bf7c:	2308      	movs	r3, #8
 800bf7e:	18fb      	adds	r3, r7, r3
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	1dbb      	adds	r3, r7, #6
 800bf88:	3201      	adds	r2, #1
 800bf8a:	801a      	strh	r2, [r3, #0]
  }

  SetWindow(x, y, x, y2);
 800bf8c:	2316      	movs	r3, #22
 800bf8e:	18fb      	adds	r3, r7, r3
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	210a      	movs	r1, #10
 800bf94:	187a      	adds	r2, r7, r1
 800bf96:	8815      	ldrh	r5, [r2, #0]
 800bf98:	2208      	movs	r2, #8
 800bf9a:	18ba      	adds	r2, r7, r2
 800bf9c:	8814      	ldrh	r4, [r2, #0]
 800bf9e:	187a      	adds	r2, r7, r1
 800bfa0:	8811      	ldrh	r1, [r2, #0]
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	002b      	movs	r3, r5
 800bfa8:	0022      	movs	r2, r4
 800bfaa:	f7ff fdbf 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  Flood(color, length);
 800bfae:	1dbb      	adds	r3, r7, #6
 800bfb0:	881a      	ldrh	r2, [r3, #0]
 800bfb2:	2328      	movs	r3, #40	; 0x28
 800bfb4:	18fb      	adds	r3, r7, r3
 800bfb6:	8819      	ldrh	r1, [r3, #0]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	0018      	movs	r0, r3
 800bfbc:	f7ff fe91 	bl	800bce2 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
 800bfc0:	e000      	b.n	800bfc4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt+0xe0>
    return;
 800bfc2:	46c0      	nop			; (mov r8, r8)
}
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	b006      	add	sp, #24
 800bfc8:	bdb0      	pop	{r4, r5, r7, pc}

0800bfca <_ZN11SolarGators7Drivers7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af02      	add	r7, sp, #8
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	000a      	movs	r2, r1
 800bfd4:	1cfb      	adds	r3, r7, #3
 800bfd6:	701a      	strb	r2, [r3, #0]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2258      	movs	r2, #88	; 0x58
 800bfe0:	5a9b      	ldrh	r3, [r3, r2]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	0019      	movs	r1, r3
 800bfe6:	f7f9 fdc6 	bl	8005b76 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 800bfea:	1cfb      	adds	r3, r7, #3
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2203      	movs	r2, #3
 800bff0:	4013      	ands	r3, r2
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	7f1b      	ldrb	r3, [r3, #28]
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d029      	beq.n	800c054 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x8a>
 800c000:	dc33      	bgt.n	800c06a <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0xa0>
 800c002:	2b02      	cmp	r3, #2
 800c004:	d01b      	beq.n	800c03e <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x74>
 800c006:	dc30      	bgt.n	800c06a <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0xa0>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x48>
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d00b      	beq.n	800c028 <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0x5e>
 800c010:	e02b      	b.n	800c06a <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0xa0>
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 800c012:	1cfb      	adds	r3, r7, #3
 800c014:	2248      	movs	r2, #72	; 0x48
 800c016:	701a      	strb	r2, [r3, #0]
    width_ = ILI9341_TFTWIDTH;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	22f0      	movs	r2, #240	; 0xf0
 800c01c:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	22a0      	movs	r2, #160	; 0xa0
 800c022:	0052      	lsls	r2, r2, #1
 800c024:	815a      	strh	r2, [r3, #10]
    break;
 800c026:	e020      	b.n	800c06a <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0xa0>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800c028:	1cfb      	adds	r3, r7, #3
 800c02a:	2228      	movs	r2, #40	; 0x28
 800c02c:	701a      	strb	r2, [r3, #0]
    width_ = ILI9341_TFTHEIGHT;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	22a0      	movs	r2, #160	; 0xa0
 800c032:	0052      	lsls	r2, r2, #1
 800c034:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	22f0      	movs	r2, #240	; 0xf0
 800c03a:	815a      	strh	r2, [r3, #10]
    break;
 800c03c:	e015      	b.n	800c06a <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0xa0>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800c03e:	1cfb      	adds	r3, r7, #3
 800c040:	2288      	movs	r2, #136	; 0x88
 800c042:	701a      	strb	r2, [r3, #0]
    width_ = ILI9341_TFTWIDTH;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	22f0      	movs	r2, #240	; 0xf0
 800c048:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	22a0      	movs	r2, #160	; 0xa0
 800c04e:	0052      	lsls	r2, r2, #1
 800c050:	815a      	strh	r2, [r3, #10]
    break;
 800c052:	e00a      	b.n	800c06a <_ZN11SolarGators7Drivers7ILI934111SetRotationEh+0xa0>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800c054:	1cfb      	adds	r3, r7, #3
 800c056:	22e8      	movs	r2, #232	; 0xe8
 800c058:	701a      	strb	r2, [r3, #0]
    width_ = ILI9341_TFTHEIGHT;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	22a0      	movs	r2, #160	; 0xa0
 800c05e:	0052      	lsls	r2, r2, #1
 800c060:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	22f0      	movs	r2, #240	; 0xf0
 800c066:	815a      	strh	r2, [r3, #10]
    break;
 800c068:	46c0      	nop			; (mov r8, r8)
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2136      	movs	r1, #54	; 0x36
 800c06e:	0018      	movs	r0, r3
 800c070:	f7ff fcc7 	bl	800ba02 <_ZN11SolarGators7Drivers7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 800c074:	1cfb      	adds	r3, r7, #3
 800c076:	781a      	ldrb	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	0011      	movs	r1, r2
 800c07c:	0018      	movs	r0, r3
 800c07e:	f7ff fce4 	bl	800ba4a <_ZN11SolarGators7Drivers7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2208      	movs	r2, #8
 800c086:	5e9b      	ldrsh	r3, [r3, r2]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	3b01      	subs	r3, #1
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	210a      	movs	r1, #10
 800c092:	5e5b      	ldrsh	r3, [r3, r1]
 800c094:	b29b      	uxth	r3, r3
 800c096:	3b01      	subs	r3, #1
 800c098:	b29b      	uxth	r3, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	0013      	movs	r3, r2
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	f7ff fd42 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
}
 800c0a8:	46c0      	nop			; (mov r8, r8)
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b002      	add	sp, #8
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	000a      	movs	r2, r1
 800c0ba:	1cfb      	adds	r3, r7, #3
 800c0bc:	701a      	strb	r2, [r3, #0]
  text_size_ = size;
 800c0be:	1cfb      	adds	r3, r7, #3
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	b21a      	sxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	819a      	strh	r2, [r3, #12]
}
 800c0c8:	46c0      	nop			; (mov r8, r8)
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	b002      	add	sp, #8
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 800c0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0d2:	b089      	sub	sp, #36	; 0x24
 800c0d4:	af04      	add	r7, sp, #16
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	000c      	movs	r4, r1
 800c0da:	0010      	movs	r0, r2
 800c0dc:	0019      	movs	r1, r3
 800c0de:	260a      	movs	r6, #10
 800c0e0:	19bb      	adds	r3, r7, r6
 800c0e2:	1c22      	adds	r2, r4, #0
 800c0e4:	801a      	strh	r2, [r3, #0]
 800c0e6:	2408      	movs	r4, #8
 800c0e8:	193b      	adds	r3, r7, r4
 800c0ea:	1c02      	adds	r2, r0, #0
 800c0ec:	801a      	strh	r2, [r3, #0]
 800c0ee:	1dfb      	adds	r3, r7, #7
 800c0f0:	1c0a      	adds	r2, r1, #0
 800c0f2:	701a      	strb	r2, [r3, #0]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	8b1b      	ldrh	r3, [r3, #24]
 800c0f8:	1dfa      	adds	r2, r7, #7
 800c0fa:	7815      	ldrb	r5, [r2, #0]
 800c0fc:	193a      	adds	r2, r7, r4
 800c0fe:	2400      	movs	r4, #0
 800c100:	5f14      	ldrsh	r4, [r2, r4]
 800c102:	19ba      	adds	r2, r7, r6
 800c104:	2100      	movs	r1, #0
 800c106:	5e51      	ldrsh	r1, [r2, r1]
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	2624      	movs	r6, #36	; 0x24
 800c10c:	2208      	movs	r2, #8
 800c10e:	18ba      	adds	r2, r7, r2
 800c110:	1992      	adds	r2, r2, r6
 800c112:	7812      	ldrb	r2, [r2, #0]
 800c114:	9203      	str	r2, [sp, #12]
 800c116:	2208      	movs	r2, #8
 800c118:	18ba      	adds	r2, r7, r2
 800c11a:	1992      	adds	r2, r2, r6
 800c11c:	7812      	ldrb	r2, [r2, #0]
 800c11e:	9202      	str	r2, [sp, #8]
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	2320      	movs	r3, #32
 800c124:	2208      	movs	r2, #8
 800c126:	4694      	mov	ip, r2
 800c128:	44bc      	add	ip, r7
 800c12a:	4463      	add	r3, ip
 800c12c:	881b      	ldrh	r3, [r3, #0]
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	002b      	movs	r3, r5
 800c132:	0022      	movs	r2, r4
 800c134:	f000 f804 	bl	800c140 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh>
}
 800c138:	46c0      	nop			; (mov r8, r8)
 800c13a:	46bd      	mov	sp, r7
 800c13c:	b005      	add	sp, #20
 800c13e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c140 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 800c140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c142:	b089      	sub	sp, #36	; 0x24
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	000c      	movs	r4, r1
 800c14a:	0010      	movs	r0, r2
 800c14c:	0019      	movs	r1, r3
 800c14e:	230a      	movs	r3, #10
 800c150:	18fb      	adds	r3, r7, r3
 800c152:	1c22      	adds	r2, r4, #0
 800c154:	801a      	strh	r2, [r3, #0]
 800c156:	2308      	movs	r3, #8
 800c158:	18fb      	adds	r3, r7, r3
 800c15a:	1c02      	adds	r2, r0, #0
 800c15c:	801a      	strh	r2, [r3, #0]
 800c15e:	1dfb      	adds	r3, r7, #7
 800c160:	1c0a      	adds	r2, r1, #0
 800c162:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800c164:	2317      	movs	r3, #23
 800c166:	18fb      	adds	r3, r7, r3
 800c168:	2200      	movs	r2, #0
 800c16a:	701a      	strb	r2, [r3, #0]
 800c16c:	2117      	movs	r1, #23
 800c16e:	187b      	adds	r3, r7, r1
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	b25b      	sxtb	r3, r3
 800c174:	2b04      	cmp	r3, #4
 800c176:	dd00      	ble.n	800c17a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x3a>
 800c178:	e113      	b.n	800c3a2 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x262>
      uint8_t line = font[c * 5 + i];
 800c17a:	1dfb      	adds	r3, r7, #7
 800c17c:	781a      	ldrb	r2, [r3, #0]
 800c17e:	0013      	movs	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	189a      	adds	r2, r3, r2
 800c184:	187b      	adds	r3, r7, r1
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	b25b      	sxtb	r3, r3
 800c18a:	18d2      	adds	r2, r2, r3
 800c18c:	2316      	movs	r3, #22
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	49b4      	ldr	r1, [pc, #720]	; (800c464 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x324>)
 800c192:	5c8a      	ldrb	r2, [r1, r2]
 800c194:	701a      	strb	r2, [r3, #0]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800c196:	2315      	movs	r3, #21
 800c198:	18fb      	adds	r3, r7, r3
 800c19a:	2200      	movs	r2, #0
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	2015      	movs	r0, #21
 800c1a0:	183b      	adds	r3, r7, r0
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	b25b      	sxtb	r3, r3
 800c1a6:	2b07      	cmp	r3, #7
 800c1a8:	dd00      	ble.n	800c1ac <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x6c>
 800c1aa:	e0f0      	b.n	800c38e <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x24e>
        if (line & 1) {
 800c1ac:	2316      	movs	r3, #22
 800c1ae:	18fb      	adds	r3, r7, r3
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	d067      	beq.n	800c288 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x148>
          if (size_x == 1 && size_y == 1)
 800c1b8:	2330      	movs	r3, #48	; 0x30
 800c1ba:	2208      	movs	r2, #8
 800c1bc:	4694      	mov	ip, r2
 800c1be:	44bc      	add	ip, r7
 800c1c0:	4463      	add	r3, ip
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d124      	bne.n	800c212 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0xd2>
 800c1c8:	2334      	movs	r3, #52	; 0x34
 800c1ca:	2208      	movs	r2, #8
 800c1cc:	4694      	mov	ip, r2
 800c1ce:	44bc      	add	ip, r7
 800c1d0:	4463      	add	r3, ip
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d11c      	bne.n	800c212 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0xd2>
            DrawPixel(x + i, y + j, color);
 800c1d8:	2317      	movs	r3, #23
 800c1da:	18fb      	adds	r3, r7, r3
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	b25b      	sxtb	r3, r3
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	230a      	movs	r3, #10
 800c1e4:	18fb      	adds	r3, r7, r3
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	18d3      	adds	r3, r2, r3
 800c1ea:	b299      	uxth	r1, r3
 800c1ec:	183b      	adds	r3, r7, r0
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	b25b      	sxtb	r3, r3
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	2308      	movs	r3, #8
 800c1f6:	18fb      	adds	r3, r7, r3
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	18d3      	adds	r3, r2, r3
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	2328      	movs	r3, #40	; 0x28
 800c200:	2008      	movs	r0, #8
 800c202:	4684      	mov	ip, r0
 800c204:	44bc      	add	ip, r7
 800c206:	4463      	add	r3, ip
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f7ff fcf7 	bl	800bbfe <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt>
 800c210:	e0ad      	b.n	800c36e <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x22e>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 800c212:	2317      	movs	r3, #23
 800c214:	18fb      	adds	r3, r7, r3
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	b25b      	sxtb	r3, r3
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	2030      	movs	r0, #48	; 0x30
 800c21e:	2408      	movs	r4, #8
 800c220:	193a      	adds	r2, r7, r4
 800c222:	1812      	adds	r2, r2, r0
 800c224:	7812      	ldrb	r2, [r2, #0]
 800c226:	b292      	uxth	r2, r2
 800c228:	4353      	muls	r3, r2
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	230a      	movs	r3, #10
 800c22e:	18fb      	adds	r3, r7, r3
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	18d3      	adds	r3, r2, r3
 800c234:	b299      	uxth	r1, r3
 800c236:	2315      	movs	r3, #21
 800c238:	18fb      	adds	r3, r7, r3
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b25b      	sxtb	r3, r3
 800c23e:	b29b      	uxth	r3, r3
 800c240:	2634      	movs	r6, #52	; 0x34
 800c242:	193a      	adds	r2, r7, r4
 800c244:	1992      	adds	r2, r2, r6
 800c246:	7812      	ldrb	r2, [r2, #0]
 800c248:	b292      	uxth	r2, r2
 800c24a:	4353      	muls	r3, r2
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	0023      	movs	r3, r4
 800c250:	001d      	movs	r5, r3
 800c252:	18fb      	adds	r3, r7, r3
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	18d3      	adds	r3, r2, r3
 800c258:	b29c      	uxth	r4, r3
 800c25a:	002a      	movs	r2, r5
 800c25c:	18bb      	adds	r3, r7, r2
 800c25e:	181b      	adds	r3, r3, r0
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	b29d      	uxth	r5, r3
 800c264:	18bb      	adds	r3, r7, r2
 800c266:	199b      	adds	r3, r3, r6
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	2328      	movs	r3, #40	; 0x28
 800c270:	2608      	movs	r6, #8
 800c272:	46b4      	mov	ip, r6
 800c274:	44bc      	add	ip, r7
 800c276:	4463      	add	r3, ip
 800c278:	881b      	ldrh	r3, [r3, #0]
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	9200      	str	r2, [sp, #0]
 800c27e:	002b      	movs	r3, r5
 800c280:	0022      	movs	r2, r4
 800c282:	f000 f9ee 	bl	800c662 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
 800c286:	e072      	b.n	800c36e <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x22e>
                          color);
        } else if (bg != color) {
 800c288:	202c      	movs	r0, #44	; 0x2c
 800c28a:	2408      	movs	r4, #8
 800c28c:	193b      	adds	r3, r7, r4
 800c28e:	181a      	adds	r2, r3, r0
 800c290:	2328      	movs	r3, #40	; 0x28
 800c292:	2108      	movs	r1, #8
 800c294:	468c      	mov	ip, r1
 800c296:	44bc      	add	ip, r7
 800c298:	4463      	add	r3, ip
 800c29a:	8812      	ldrh	r2, [r2, #0]
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d065      	beq.n	800c36e <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x22e>
          if (size_x == 1 && size_y == 1)
 800c2a2:	2330      	movs	r3, #48	; 0x30
 800c2a4:	2208      	movs	r2, #8
 800c2a6:	4694      	mov	ip, r2
 800c2a8:	44bc      	add	ip, r7
 800c2aa:	4463      	add	r3, ip
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d123      	bne.n	800c2fa <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1ba>
 800c2b2:	2334      	movs	r3, #52	; 0x34
 800c2b4:	2208      	movs	r2, #8
 800c2b6:	4694      	mov	ip, r2
 800c2b8:	44bc      	add	ip, r7
 800c2ba:	4463      	add	r3, ip
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d11b      	bne.n	800c2fa <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x1ba>
            DrawPixel(x + i, y + j, bg);
 800c2c2:	2317      	movs	r3, #23
 800c2c4:	18fb      	adds	r3, r7, r3
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	b25b      	sxtb	r3, r3
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	230a      	movs	r3, #10
 800c2ce:	18fb      	adds	r3, r7, r3
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	18d3      	adds	r3, r2, r3
 800c2d4:	b299      	uxth	r1, r3
 800c2d6:	2315      	movs	r3, #21
 800c2d8:	18fb      	adds	r3, r7, r3
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	b25b      	sxtb	r3, r3
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	0023      	movs	r3, r4
 800c2e2:	001c      	movs	r4, r3
 800c2e4:	18fb      	adds	r3, r7, r3
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	18d3      	adds	r3, r2, r3
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	193b      	adds	r3, r7, r4
 800c2ee:	181b      	adds	r3, r3, r0
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f7ff fc83 	bl	800bbfe <_ZN11SolarGators7Drivers7ILI93419DrawPixelEttt>
 800c2f8:	e039      	b.n	800c36e <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x22e>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 800c2fa:	2317      	movs	r3, #23
 800c2fc:	18fb      	adds	r3, r7, r3
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	b25b      	sxtb	r3, r3
 800c302:	b29b      	uxth	r3, r3
 800c304:	2030      	movs	r0, #48	; 0x30
 800c306:	2408      	movs	r4, #8
 800c308:	193a      	adds	r2, r7, r4
 800c30a:	1812      	adds	r2, r2, r0
 800c30c:	7812      	ldrb	r2, [r2, #0]
 800c30e:	b292      	uxth	r2, r2
 800c310:	4353      	muls	r3, r2
 800c312:	b29a      	uxth	r2, r3
 800c314:	230a      	movs	r3, #10
 800c316:	18fb      	adds	r3, r7, r3
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	18d3      	adds	r3, r2, r3
 800c31c:	b299      	uxth	r1, r3
 800c31e:	2315      	movs	r3, #21
 800c320:	18fb      	adds	r3, r7, r3
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	b25b      	sxtb	r3, r3
 800c326:	b29b      	uxth	r3, r3
 800c328:	2634      	movs	r6, #52	; 0x34
 800c32a:	193a      	adds	r2, r7, r4
 800c32c:	1992      	adds	r2, r2, r6
 800c32e:	7812      	ldrb	r2, [r2, #0]
 800c330:	b292      	uxth	r2, r2
 800c332:	4353      	muls	r3, r2
 800c334:	b29a      	uxth	r2, r3
 800c336:	0023      	movs	r3, r4
 800c338:	001d      	movs	r5, r3
 800c33a:	18fb      	adds	r3, r7, r3
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	18d3      	adds	r3, r2, r3
 800c340:	b29c      	uxth	r4, r3
 800c342:	002a      	movs	r2, r5
 800c344:	18bb      	adds	r3, r7, r2
 800c346:	181b      	adds	r3, r3, r0
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	b29d      	uxth	r5, r3
 800c34c:	18bb      	adds	r3, r7, r2
 800c34e:	199b      	adds	r3, r3, r6
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b29b      	uxth	r3, r3
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	222c      	movs	r2, #44	; 0x2c
 800c358:	2608      	movs	r6, #8
 800c35a:	46b4      	mov	ip, r6
 800c35c:	44bc      	add	ip, r7
 800c35e:	4462      	add	r2, ip
 800c360:	8812      	ldrh	r2, [r2, #0]
 800c362:	9201      	str	r2, [sp, #4]
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	002b      	movs	r3, r5
 800c368:	0022      	movs	r2, r4
 800c36a:	f000 f97a 	bl	800c662 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 800c36e:	2115      	movs	r1, #21
 800c370:	187b      	adds	r3, r7, r1
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	b25b      	sxtb	r3, r3
 800c376:	b2db      	uxtb	r3, r3
 800c378:	3301      	adds	r3, #1
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	187b      	adds	r3, r7, r1
 800c37e:	701a      	strb	r2, [r3, #0]
 800c380:	2116      	movs	r1, #22
 800c382:	187b      	adds	r3, r7, r1
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	105a      	asrs	r2, r3, #1
 800c388:	187b      	adds	r3, r7, r1
 800c38a:	701a      	strb	r2, [r3, #0]
 800c38c:	e707      	b.n	800c19e <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x5e>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 800c38e:	2117      	movs	r1, #23
 800c390:	187b      	adds	r3, r7, r1
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	b25b      	sxtb	r3, r3
 800c396:	b2db      	uxtb	r3, r3
 800c398:	3301      	adds	r3, #1
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	187b      	adds	r3, r7, r1
 800c39e:	701a      	strb	r2, [r3, #0]
 800c3a0:	e6e4      	b.n	800c16c <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x2c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 800c3a2:	242c      	movs	r4, #44	; 0x2c
 800c3a4:	2008      	movs	r0, #8
 800c3a6:	183b      	adds	r3, r7, r0
 800c3a8:	191a      	adds	r2, r3, r4
 800c3aa:	2328      	movs	r3, #40	; 0x28
 800c3ac:	2108      	movs	r1, #8
 800c3ae:	468c      	mov	ip, r1
 800c3b0:	44bc      	add	ip, r7
 800c3b2:	4463      	add	r3, ip
 800c3b4:	8812      	ldrh	r2, [r2, #0]
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d04e      	beq.n	800c45a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x31a>
      if (size_x == 1 && size_y == 1)
 800c3bc:	2330      	movs	r3, #48	; 0x30
 800c3be:	2208      	movs	r2, #8
 800c3c0:	4694      	mov	ip, r2
 800c3c2:	44bc      	add	ip, r7
 800c3c4:	4463      	add	r3, ip
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d119      	bne.n	800c400 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x2c0>
 800c3cc:	2334      	movs	r3, #52	; 0x34
 800c3ce:	2208      	movs	r2, #8
 800c3d0:	4694      	mov	ip, r2
 800c3d2:	44bc      	add	ip, r7
 800c3d4:	4463      	add	r3, ip
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d111      	bne.n	800c400 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x2c0>
        DrawFastVLine(x + 5, y, 8, bg);
 800c3dc:	230a      	movs	r3, #10
 800c3de:	18fb      	adds	r3, r7, r3
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	3305      	adds	r3, #5
 800c3e4:	b299      	uxth	r1, r3
 800c3e6:	0003      	movs	r3, r0
 800c3e8:	001d      	movs	r5, r3
 800c3ea:	18fb      	adds	r3, r7, r3
 800c3ec:	881a      	ldrh	r2, [r3, #0]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	197b      	adds	r3, r7, r5
 800c3f2:	191b      	adds	r3, r3, r4
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	2308      	movs	r3, #8
 800c3fa:	f7ff fd73 	bl	800bee4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 800c3fe:	e02c      	b.n	800c45a <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshtthh+0x31a>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 800c400:	2030      	movs	r0, #48	; 0x30
 800c402:	2408      	movs	r4, #8
 800c404:	193b      	adds	r3, r7, r4
 800c406:	181b      	adds	r3, r3, r0
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	1c1a      	adds	r2, r3, #0
 800c40e:	0092      	lsls	r2, r2, #2
 800c410:	18d3      	adds	r3, r2, r3
 800c412:	b29a      	uxth	r2, r3
 800c414:	230a      	movs	r3, #10
 800c416:	18fb      	adds	r3, r7, r3
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	18d3      	adds	r3, r2, r3
 800c41c:	b299      	uxth	r1, r3
 800c41e:	0023      	movs	r3, r4
 800c420:	001a      	movs	r2, r3
 800c422:	18fb      	adds	r3, r7, r3
 800c424:	881c      	ldrh	r4, [r3, #0]
 800c426:	18bb      	adds	r3, r7, r2
 800c428:	181b      	adds	r3, r3, r0
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	b29d      	uxth	r5, r3
 800c42e:	2334      	movs	r3, #52	; 0x34
 800c430:	2208      	movs	r2, #8
 800c432:	4694      	mov	ip, r2
 800c434:	44bc      	add	ip, r7
 800c436:	4463      	add	r3, ip
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	b29b      	uxth	r3, r3
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	222c      	movs	r2, #44	; 0x2c
 800c444:	2608      	movs	r6, #8
 800c446:	46b4      	mov	ip, r6
 800c448:	44bc      	add	ip, r7
 800c44a:	4462      	add	r2, ip
 800c44c:	8812      	ldrh	r2, [r2, #0]
 800c44e:	9201      	str	r2, [sp, #4]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	002b      	movs	r3, r5
 800c454:	0022      	movs	r2, r4
 800c456:	f000 f904 	bl	800c662 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>
}
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	46bd      	mov	sp, r7
 800c45e:	b007      	add	sp, #28
 800c460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	080141c8 	.word	0x080141c8

0800c468 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 800c468:	b5b0      	push	{r4, r5, r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af02      	add	r7, sp, #8
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	0008      	movs	r0, r1
 800c472:	0011      	movs	r1, r2
 800c474:	607b      	str	r3, [r7, #4]
 800c476:	230a      	movs	r3, #10
 800c478:	18fb      	adds	r3, r7, r3
 800c47a:	1c02      	adds	r2, r0, #0
 800c47c:	801a      	strh	r2, [r3, #0]
 800c47e:	2308      	movs	r3, #8
 800c480:	18fb      	adds	r3, r7, r3
 800c482:	1c0a      	adds	r2, r1, #0
 800c484:	801a      	strh	r2, [r3, #0]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2208      	movs	r2, #8
 800c48a:	5e9b      	ldrsh	r3, [r3, r2]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	3b01      	subs	r3, #1
 800c490:	b29a      	uxth	r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	210a      	movs	r1, #10
 800c496:	5e5b      	ldrsh	r3, [r3, r1]
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	0013      	movs	r3, r2
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	f7ff fb40 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	607a      	str	r2, [r7, #4]
 800c4b2:	2017      	movs	r0, #23
 800c4b4:	183a      	adds	r2, r7, r0
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	7013      	strb	r3, [r2, #0]
        DrawChar( x, y, TempChar, color, text_size_);
 800c4ba:	250a      	movs	r5, #10
 800c4bc:	197b      	adds	r3, r7, r5
 800c4be:	2100      	movs	r1, #0
 800c4c0:	5e59      	ldrsh	r1, [r3, r1]
 800c4c2:	2308      	movs	r3, #8
 800c4c4:	18fb      	adds	r3, r7, r3
 800c4c6:	2400      	movs	r4, #0
 800c4c8:	5f1c      	ldrsh	r4, [r3, r4]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	220c      	movs	r2, #12
 800c4ce:	5e9b      	ldrsh	r3, [r3, r2]
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	183a      	adds	r2, r7, r0
 800c4d4:	7812      	ldrb	r2, [r2, #0]
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	2328      	movs	r3, #40	; 0x28
 800c4dc:	18fb      	adds	r3, r7, r3
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	0013      	movs	r3, r2
 800c4e4:	0022      	movs	r2, r4
 800c4e6:	f7ff fdf3 	bl	800c0d0 <_ZN11SolarGators7Drivers7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 800c4ea:	0028      	movs	r0, r5
 800c4ec:	183b      	adds	r3, r7, r0
 800c4ee:	881a      	ldrh	r2, [r3, #0]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2108      	movs	r1, #8
 800c4f4:	5e5b      	ldrsh	r3, [r3, r1]
 800c4f6:	3b09      	subs	r3, #9
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	da0f      	bge.n	800c51c <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xb4>
        {
            x += (6 * text_size_);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	220c      	movs	r2, #12
 800c500:	5e9b      	ldrsh	r3, [r3, r2]
 800c502:	b29b      	uxth	r3, r3
 800c504:	1c1a      	adds	r2, r3, #0
 800c506:	1c13      	adds	r3, r2, #0
 800c508:	18db      	adds	r3, r3, r3
 800c50a:	189b      	adds	r3, r3, r2
 800c50c:	18db      	adds	r3, r3, r3
 800c50e:	b299      	uxth	r1, r3
 800c510:	183b      	adds	r3, r7, r0
 800c512:	183a      	adds	r2, r7, r0
 800c514:	8812      	ldrh	r2, [r2, #0]
 800c516:	188a      	adds	r2, r1, r2
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	e020      	b.n	800c55e <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xf6>
        }
        else if ( y < height_ - 1 - 16)
 800c51c:	2008      	movs	r0, #8
 800c51e:	183b      	adds	r3, r7, r0
 800c520:	881a      	ldrh	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	210a      	movs	r1, #10
 800c526:	5e5b      	ldrsh	r3, [r3, r1]
 800c528:	3b11      	subs	r3, #17
 800c52a:	429a      	cmp	r2, r3
 800c52c:	da0f      	bge.n	800c54e <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xe6>
        {
            x = 0;
 800c52e:	230a      	movs	r3, #10
 800c530:	18fb      	adds	r3, r7, r3
 800c532:	2200      	movs	r2, #0
 800c534:	801a      	strh	r2, [r3, #0]
            y += (8 * text_size_);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	220c      	movs	r2, #12
 800c53a:	5e9b      	ldrsh	r3, [r3, r2]
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	b299      	uxth	r1, r3
 800c542:	183b      	adds	r3, r7, r0
 800c544:	183a      	adds	r2, r7, r0
 800c546:	8812      	ldrh	r2, [r2, #0]
 800c548:	188a      	adds	r2, r1, r2
 800c54a:	801a      	strh	r2, [r3, #0]
 800c54c:	e007      	b.n	800c55e <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0xf6>
        }
        else
        {
            x = 0;
 800c54e:	230a      	movs	r3, #10
 800c550:	18fb      	adds	r3, r7, r3
 800c552:	2200      	movs	r2, #0
 800c554:	801a      	strh	r2, [r3, #0]
            y = 0;
 800c556:	2308      	movs	r3, #8
 800c558:	18fb      	adds	r3, r7, r3
 800c55a:	2200      	movs	r2, #0
 800c55c:	801a      	strh	r2, [r3, #0]
        }
    }
    while ( *str != 0 );
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d000      	beq.n	800c568 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0x100>
    do
 800c566:	e7a1      	b.n	800c4ac <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct+0x44>
}
 800c568:	46c0      	nop			; (mov r8, r8)
 800c56a:	46bd      	mov	sp, r7
 800c56c:	b006      	add	sp, #24
 800c56e:	bdb0      	pop	{r4, r5, r7, pc}

0800c570 <_ZN11SolarGators7Drivers7ILI93418DrawRectEttttt>:

void ILI9341::DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800c570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c572:	46c6      	mov	lr, r8
 800c574:	b500      	push	{lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af02      	add	r7, sp, #8
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	000c      	movs	r4, r1
 800c57e:	0010      	movs	r0, r2
 800c580:	0019      	movs	r1, r3
 800c582:	250a      	movs	r5, #10
 800c584:	197b      	adds	r3, r7, r5
 800c586:	1c22      	adds	r2, r4, #0
 800c588:	801a      	strh	r2, [r3, #0]
 800c58a:	2608      	movs	r6, #8
 800c58c:	19bb      	adds	r3, r7, r6
 800c58e:	1c02      	adds	r2, r0, #0
 800c590:	801a      	strh	r2, [r3, #0]
 800c592:	1dbb      	adds	r3, r7, #6
 800c594:	1c0a      	adds	r2, r1, #0
 800c596:	801a      	strh	r2, [r3, #0]
  DrawFastHLine(x, y, w, color);
 800c598:	1dbb      	adds	r3, r7, #6
 800c59a:	881c      	ldrh	r4, [r3, #0]
 800c59c:	19bb      	adds	r3, r7, r6
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	4698      	mov	r8, r3
 800c5a2:	197b      	adds	r3, r7, r5
 800c5a4:	8819      	ldrh	r1, [r3, #0]
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	2324      	movs	r3, #36	; 0x24
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	4694      	mov	ip, r2
 800c5ae:	44bc      	add	ip, r7
 800c5b0:	4463      	add	r3, ip
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	0023      	movs	r3, r4
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	f7ff fc21 	bl	800be00 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt>
  DrawFastHLine(x, y + h - 1, w, color);
 800c5be:	19ba      	adds	r2, r7, r6
 800c5c0:	2120      	movs	r1, #32
 800c5c2:	2308      	movs	r3, #8
 800c5c4:	18f8      	adds	r0, r7, r3
 800c5c6:	1843      	adds	r3, r0, r1
 800c5c8:	8812      	ldrh	r2, [r2, #0]
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	18d3      	adds	r3, r2, r3
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	4698      	mov	r8, r3
 800c5d6:	1dbb      	adds	r3, r7, #6
 800c5d8:	881c      	ldrh	r4, [r3, #0]
 800c5da:	197b      	adds	r3, r7, r5
 800c5dc:	8819      	ldrh	r1, [r3, #0]
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	2324      	movs	r3, #36	; 0x24
 800c5e2:	2208      	movs	r2, #8
 800c5e4:	4694      	mov	ip, r2
 800c5e6:	44bc      	add	ip, r7
 800c5e8:	4463      	add	r3, ip
 800c5ea:	881b      	ldrh	r3, [r3, #0]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	0023      	movs	r3, r4
 800c5f0:	4642      	mov	r2, r8
 800c5f2:	f7ff fc05 	bl	800be00 <_ZN11SolarGators7Drivers7ILI934113DrawFastHLineEtttt>
  DrawFastVLine(x, y, h, color);
 800c5f6:	2120      	movs	r1, #32
 800c5f8:	2308      	movs	r3, #8
 800c5fa:	18fa      	adds	r2, r7, r3
 800c5fc:	1853      	adds	r3, r2, r1
 800c5fe:	881c      	ldrh	r4, [r3, #0]
 800c600:	19bb      	adds	r3, r7, r6
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	4698      	mov	r8, r3
 800c606:	197b      	adds	r3, r7, r5
 800c608:	8819      	ldrh	r1, [r3, #0]
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	2324      	movs	r3, #36	; 0x24
 800c60e:	2208      	movs	r2, #8
 800c610:	4694      	mov	ip, r2
 800c612:	44bc      	add	ip, r7
 800c614:	4463      	add	r3, ip
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	0023      	movs	r3, r4
 800c61c:	4642      	mov	r2, r8
 800c61e:	f7ff fc61 	bl	800bee4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>
  DrawFastVLine(x + w - 1, y, h, color);
 800c622:	197a      	adds	r2, r7, r5
 800c624:	1dbb      	adds	r3, r7, #6
 800c626:	8812      	ldrh	r2, [r2, #0]
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	18d3      	adds	r3, r2, r3
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	3b01      	subs	r3, #1
 800c630:	b299      	uxth	r1, r3
 800c632:	2220      	movs	r2, #32
 800c634:	2308      	movs	r3, #8
 800c636:	18fb      	adds	r3, r7, r3
 800c638:	189b      	adds	r3, r3, r2
 800c63a:	881c      	ldrh	r4, [r3, #0]
 800c63c:	19bb      	adds	r3, r7, r6
 800c63e:	881a      	ldrh	r2, [r3, #0]
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	2324      	movs	r3, #36	; 0x24
 800c644:	2508      	movs	r5, #8
 800c646:	46ac      	mov	ip, r5
 800c648:	44bc      	add	ip, r7
 800c64a:	4463      	add	r3, ip
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	0023      	movs	r3, r4
 800c652:	f7ff fc47 	bl	800bee4 <_ZN11SolarGators7Drivers7ILI934113DrawFastVLineEtttt>
}
 800c656:	46c0      	nop			; (mov r8, r8)
 800c658:	46bd      	mov	sp, r7
 800c65a:	b004      	add	sp, #16
 800c65c:	bc80      	pop	{r7}
 800c65e:	46b8      	mov	r8, r7
 800c660:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c662 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt>:

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 800c662:	b5b0      	push	{r4, r5, r7, lr}
 800c664:	b088      	sub	sp, #32
 800c666:	af02      	add	r7, sp, #8
 800c668:	60f8      	str	r0, [r7, #12]
 800c66a:	000c      	movs	r4, r1
 800c66c:	0010      	movs	r0, r2
 800c66e:	0019      	movs	r1, r3
 800c670:	250a      	movs	r5, #10
 800c672:	197b      	adds	r3, r7, r5
 800c674:	1c22      	adds	r2, r4, #0
 800c676:	801a      	strh	r2, [r3, #0]
 800c678:	2408      	movs	r4, #8
 800c67a:	193b      	adds	r3, r7, r4
 800c67c:	1c02      	adds	r2, r0, #0
 800c67e:	801a      	strh	r2, [r3, #0]
 800c680:	1dbb      	adds	r3, r7, #6
 800c682:	1c0a      	adds	r2, r1, #0
 800c684:	801a      	strh	r2, [r3, #0]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800c686:	1dbb      	adds	r3, r7, #6
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d033      	beq.n	800c6f6 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x94>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 800c68e:	2028      	movs	r0, #40	; 0x28
 800c690:	183b      	adds	r3, r7, r0
 800c692:	881b      	ldrh	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d02e      	beq.n	800c6f6 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x94>
 800c698:	197b      	adds	r3, r7, r5
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	2108      	movs	r1, #8
 800c6a0:	5e52      	ldrsh	r2, [r2, r1]
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	da27      	bge.n	800c6f6 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x94>
 800c6a6:	0021      	movs	r1, r4
 800c6a8:	187b      	adds	r3, r7, r1
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	240a      	movs	r4, #10
 800c6b0:	5f12      	ldrsh	r2, [r2, r4]
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	da1f      	bge.n	800c6f6 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x94>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800c6b6:	197a      	adds	r2, r7, r5
 800c6b8:	1dbb      	adds	r3, r7, #6
 800c6ba:	8812      	ldrh	r2, [r2, #0]
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	18d3      	adds	r3, r2, r3
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	2416      	movs	r4, #22
 800c6c8:	193b      	adds	r3, r7, r4
 800c6ca:	801a      	strh	r2, [r3, #0]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 800c6cc:	193b      	adds	r3, r7, r4
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	5e9b      	ldrsh	r3, [r3, r2]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	db0f      	blt.n	800c6f6 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x94>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800c6d6:	187a      	adds	r2, r7, r1
 800c6d8:	183b      	adds	r3, r7, r0
 800c6da:	8812      	ldrh	r2, [r2, #0]
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	18d3      	adds	r3, r2, r3
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	2114      	movs	r1, #20
 800c6e8:	187b      	adds	r3, r7, r1
 800c6ea:	801a      	strh	r2, [r3, #0]
 800c6ec:	187b      	adds	r3, r7, r1
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	5e9b      	ldrsh	r3, [r3, r2]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da01      	bge.n	800c6fa <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x98>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e000      	b.n	800c6fc <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x9a>
 800c6fa:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d156      	bne.n	800c7ae <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x14c>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2208      	movs	r2, #8
 800c704:	5e9b      	ldrsh	r3, [r3, r2]
 800c706:	2116      	movs	r1, #22
 800c708:	187a      	adds	r2, r7, r1
 800c70a:	2000      	movs	r0, #0
 800c70c:	5e12      	ldrsh	r2, [r2, r0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	db11      	blt.n	800c736 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0xd4>
    x2 = width_ - 1;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2208      	movs	r2, #8
 800c716:	5e9b      	ldrsh	r3, [r3, r2]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	3b01      	subs	r3, #1
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	187b      	adds	r3, r7, r1
 800c720:	801a      	strh	r2, [r3, #0]
    w = x2 - x1 + 1;
 800c722:	187b      	adds	r3, r7, r1
 800c724:	881a      	ldrh	r2, [r3, #0]
 800c726:	230a      	movs	r3, #10
 800c728:	18fb      	adds	r3, r7, r3
 800c72a:	881b      	ldrh	r3, [r3, #0]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	b29a      	uxth	r2, r3
 800c730:	1dbb      	adds	r3, r7, #6
 800c732:	3201      	adds	r2, #1
 800c734:	801a      	strh	r2, [r3, #0]
  }
  if (y2 >= height_) { // Clip bottom
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	220a      	movs	r2, #10
 800c73a:	5e9b      	ldrsh	r3, [r3, r2]
 800c73c:	2114      	movs	r1, #20
 800c73e:	187a      	adds	r2, r7, r1
 800c740:	2000      	movs	r0, #0
 800c742:	5e12      	ldrsh	r2, [r2, r0]
 800c744:	429a      	cmp	r2, r3
 800c746:	db12      	blt.n	800c76e <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x10c>
    y2 = height_ - 1;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	220a      	movs	r2, #10
 800c74c:	5e9b      	ldrsh	r3, [r3, r2]
 800c74e:	b29b      	uxth	r3, r3
 800c750:	3b01      	subs	r3, #1
 800c752:	b29a      	uxth	r2, r3
 800c754:	187b      	adds	r3, r7, r1
 800c756:	801a      	strh	r2, [r3, #0]
    h = y2 - y1 + 1;
 800c758:	187b      	adds	r3, r7, r1
 800c75a:	881a      	ldrh	r2, [r3, #0]
 800c75c:	2308      	movs	r3, #8
 800c75e:	18fb      	adds	r3, r7, r3
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	1ad3      	subs	r3, r2, r3
 800c764:	b29a      	uxth	r2, r3
 800c766:	2328      	movs	r3, #40	; 0x28
 800c768:	18fb      	adds	r3, r7, r3
 800c76a:	3201      	adds	r2, #1
 800c76c:	801a      	strh	r2, [r3, #0]
  }

  SetWindow(x1, y1, x2, y2);
 800c76e:	2316      	movs	r3, #22
 800c770:	18fb      	adds	r3, r7, r3
 800c772:	881d      	ldrh	r5, [r3, #0]
 800c774:	2314      	movs	r3, #20
 800c776:	18fb      	adds	r3, r7, r3
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	2208      	movs	r2, #8
 800c77c:	18ba      	adds	r2, r7, r2
 800c77e:	8814      	ldrh	r4, [r2, #0]
 800c780:	220a      	movs	r2, #10
 800c782:	18ba      	adds	r2, r7, r2
 800c784:	8811      	ldrh	r1, [r2, #0]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	002b      	movs	r3, r5
 800c78c:	0022      	movs	r2, r4
 800c78e:	f7ff f9cd 	bl	800bb2c <_ZN11SolarGators7Drivers7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 800c792:	1dbb      	adds	r3, r7, #6
 800c794:	881a      	ldrh	r2, [r3, #0]
 800c796:	2328      	movs	r3, #40	; 0x28
 800c798:	18fb      	adds	r3, r7, r3
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	435a      	muls	r2, r3
 800c79e:	232c      	movs	r3, #44	; 0x2c
 800c7a0:	18fb      	adds	r3, r7, r3
 800c7a2:	8819      	ldrh	r1, [r3, #0]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	f7ff fa9b 	bl	800bce2 <_ZN11SolarGators7Drivers7ILI93415FloodEtm>
 800c7ac:	e000      	b.n	800c7b0 <_ZN11SolarGators7Drivers7ILI93418FillRectEttttt+0x14e>
    return;
 800c7ae:	46c0      	nop			; (mov r8, r8)
}
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	b006      	add	sp, #24
 800c7b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c7b8 <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft>:

#include <LED.hpp>

namespace SolarGators::Drivers {

LED::LED(const char* name, GPIO_TypeDef* port, uint16_t pin):on_(false), name_(name), port_(port), pin_(pin)
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
 800c7c4:	001a      	movs	r2, r3
 800c7c6:	1cbb      	adds	r3, r7, #2
 800c7c8:	801a      	strh	r2, [r3, #0]
 800c7ca:	4a0c      	ldr	r2, [pc, #48]	; (800c7fc <_ZN11SolarGators7Drivers3LEDC1EPKcP12GPIO_TypeDeft+0x44>)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	601a      	str	r2, [r3, #0]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	711a      	strb	r2, [r3, #4]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	609a      	str	r2, [r3, #8]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	60da      	str	r2, [r3, #12]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	1cba      	adds	r2, r7, #2
 800c7e6:	8812      	ldrh	r2, [r2, #0]
 800c7e8:	821a      	strh	r2, [r3, #16]
{
  TurnOff();
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	0018      	movs	r0, r3
 800c7ee:	f000 f827 	bl	800c840 <_ZN11SolarGators7Drivers3LED7TurnOffEv>
}
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	0018      	movs	r0, r3
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	b004      	add	sp, #16
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	08014704 	.word	0x08014704

0800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>:

LED::~LED()
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	4a03      	ldr	r2, [pc, #12]	; (800c818 <_ZN11SolarGators7Drivers3LEDD1Ev+0x18>)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	601a      	str	r2, [r3, #0]
{

}
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	0018      	movs	r0, r3
 800c812:	46bd      	mov	sp, r7
 800c814:	b002      	add	sp, #8
 800c816:	bd80      	pop	{r7, pc}
 800c818:	08014704 	.word	0x08014704

0800c81c <_ZN11SolarGators7Drivers3LEDD0Ev>:
LED::~LED()
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
}
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	0018      	movs	r0, r3
 800c828:	f7ff ffea 	bl	800c800 <_ZN11SolarGators7Drivers3LEDD1Ev>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2114      	movs	r1, #20
 800c830:	0018      	movs	r0, r3
 800c832:	f005 fb2b 	bl	8011e8c <_ZdlPvj>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	0018      	movs	r0, r3
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b002      	add	sp, #8
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <_ZN11SolarGators7Drivers3LED7TurnOffEv>:
{
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_SET);
  on_ = true;
}
void LED::TurnOff()
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(port_, pin_, GPIO_PIN_RESET);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68d8      	ldr	r0, [r3, #12]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8a1b      	ldrh	r3, [r3, #16]
 800c850:	2200      	movs	r2, #0
 800c852:	0019      	movs	r1, r3
 800c854:	f7f9 f98f 	bl	8005b76 <HAL_GPIO_WritePin>
  on_ = false;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	711a      	strb	r2, [r3, #4]
}
 800c85e:	46c0      	nop			; (mov r8, r8)
 800c860:	46bd      	mov	sp, r7
 800c862:	b002      	add	sp, #8
 800c864:	bd80      	pop	{r7, pc}

0800c866 <_ZN11SolarGators7Drivers3LED6ToggleEv>:
void LED::Toggle()
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b082      	sub	sp, #8
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(port_, pin_);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	68da      	ldr	r2, [r3, #12]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	8a1b      	ldrh	r3, [r3, #16]
 800c876:	0019      	movs	r1, r3
 800c878:	0010      	movs	r0, r2
 800c87a:	f7f9 f999 	bl	8005bb0 <HAL_GPIO_TogglePin>
  on_ = !on_;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	791b      	ldrb	r3, [r3, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	4053      	eors	r3, r2
 800c886:	b2da      	uxtb	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	711a      	strb	r2, [r3, #4]
}
 800c88c:	46c0      	nop			; (mov r8, r8)
 800c88e:	46bd      	mov	sp, r7
 800c890:	b002      	add	sp, #8
 800c892:	bd80      	pop	{r7, pc}

0800c894 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	1c18      	adds	r0, r3, #0
 800c8a0:	f005 fb26 	bl	8011ef0 <floorf>
 800c8a4:	1c03      	adds	r3, r0, #0
 800c8a6:	1c18      	adds	r0, r3, #0
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	b002      	add	sp, #8
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <_ZSt5isinff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }
 800c8b0:	b5b0      	push	{r4, r5, r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	085c      	lsrs	r4, r3, #1
 800c8be:	2301      	movs	r3, #1
 800c8c0:	1c1d      	adds	r5, r3, #0
 800c8c2:	490c      	ldr	r1, [pc, #48]	; (800c8f4 <_ZSt5isinff+0x44>)
 800c8c4:	1c20      	adds	r0, r4, #0
 800c8c6:	f7f4 fb5b 	bl	8000f80 <__aeabi_fcmpun>
 800c8ca:	1e03      	subs	r3, r0, #0
 800c8cc:	d107      	bne.n	800c8de <_ZSt5isinff+0x2e>
 800c8ce:	4909      	ldr	r1, [pc, #36]	; (800c8f4 <_ZSt5isinff+0x44>)
 800c8d0:	1c20      	adds	r0, r4, #0
 800c8d2:	f7f3 fccb 	bl	800026c <__aeabi_fcmple>
 800c8d6:	1e03      	subs	r3, r0, #0
 800c8d8:	d101      	bne.n	800c8de <_ZSt5isinff+0x2e>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	1c1d      	adds	r5, r3, #0
 800c8de:	b2eb      	uxtb	r3, r5
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	4053      	eors	r3, r2
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	1e5a      	subs	r2, r3, #1
 800c8e8:	4193      	sbcs	r3, r2
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	b002      	add	sp, #8
 800c8f2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8f4:	7f7fffff 	.word	0x7f7fffff

0800c8f8 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 800c8f8:	b590      	push	{r4, r7, lr}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	2301      	movs	r3, #1
 800c902:	1c1c      	adds	r4, r3, #0
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7f4 fb3a 	bl	8000f80 <__aeabi_fcmpun>
 800c90c:	1e03      	subs	r3, r0, #0
 800c90e:	d101      	bne.n	800c914 <_ZSt5isnanf+0x1c>
 800c910:	2300      	movs	r3, #0
 800c912:	1c1c      	adds	r4, r3, #0
 800c914:	b2e3      	uxtb	r3, r4
 800c916:	1e5a      	subs	r2, r3, #1
 800c918:	4193      	sbcs	r3, r2
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	0018      	movs	r0, r3
 800c91e:	46bd      	mov	sp, r7
 800c920:	b003      	add	sp, #12
 800c922:	bd90      	pop	{r4, r7, pc}

0800c924 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	1c18      	adds	r0, r3, #0
 800c930:	f005 fb1c 	bl	8011f6c <roundf>
 800c934:	1c03      	adds	r3, r0, #0
 800c936:	1c18      	adds	r0, r3, #0
 800c938:	46bd      	mov	sp, r7
 800c93a:	b002      	add	sp, #8
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <_ZN3etl12memory_clearEPVcj>:
  ///\param p Pointer to the memory.
  ///\param n Size of the memory.
  ///\ingroup memory
  //*****************************************************************************
  inline void memory_clear(volatile char* p, size_t n)
  {
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	6039      	str	r1, [r7, #0]
    while (n--)
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	1e5a      	subs	r2, r3, #1
 800c94c:	603a      	str	r2, [r7, #0]
 800c94e:	1e5a      	subs	r2, r3, #1
 800c950:	4193      	sbcs	r3, r2
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b00      	cmp	r3, #0
 800c956:	d005      	beq.n	800c964 <_ZN3etl12memory_clearEPVcj+0x26>
    {
      *p++ = 0;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	607a      	str	r2, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	701a      	strb	r2, [r3, #0]
    while (n--)
 800c962:	e7f1      	b.n	800c948 <_ZN3etl12memory_clearEPVcj+0xa>
    }
  }
 800c964:	46c0      	nop			; (mov r8, r8)
 800c966:	46bd      	mov	sp, r7
 800c968:	b002      	add	sp, #8
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <_ZNK3etl11string_base12is_truncatedEv>:

    //*************************************************************************
    /// Returns whether the string was truncated by the last operation.
    ///\return Whether the string was truncated by the last operation.
    //*************************************************************************
    bool is_truncated() const
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
    {
      return flags.test<IS_TRUNCATED>();
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	3308      	adds	r3, #8
 800c978:	0018      	movs	r0, r3
 800c97a:	f000 fa81 	bl	800ce80 <_ZNK3etl5flagsIhLh255EE4testILh1EEEbv>
 800c97e:	0003      	movs	r3, r0
    }
 800c980:	0018      	movs	r0, r3
 800c982:	46bd      	mov	sp, r7
 800c984:	b002      	add	sp, #8
 800c986:	bd80      	pop	{r7, pc}

0800c988 <_ZN3etl5flagsIhLh255EE3setILh2EEERS1_v>:
      return *this;
    }

    //*******************************************
    template <value_type pattern>
    ETL_CONSTEXPR14 flags<T, MASK>& set() ETL_NOEXCEPT
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
    {
      data |= (pattern & MASK);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2202      	movs	r2, #2
 800c996:	4313      	orrs	r3, r2
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	701a      	strb	r2, [r3, #0]

      return *this;
 800c99e:	687b      	ldr	r3, [r7, #4]
    }
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <_ZN3etl11string_base10set_secureEv>:

#if ETL_STRING_CLEAR_AFTER_USE_ENABLED
    //*************************************************************************
    /// Sets the 'secure' flag to the requested state.
    //*************************************************************************
    void set_secure()
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
    {
      flags.set<CLEAR_AFTER_USE>();
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	0018      	movs	r0, r3
 800c9b6:	f7ff ffe7 	bl	800c988 <_ZN3etl5flagsIhLh255EE3setILh2EEERS1_v>
    }
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	b002      	add	sp, #8
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <_ZNK3etl11string_base9is_secureEv>:

    //*************************************************************************
    /// Gets the 'secure' state flag.
    //*************************************************************************
    bool is_secure() const
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
    {
      return flags.test<CLEAR_AFTER_USE>();
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f000 fa66 	bl	800cea0 <_ZNK3etl5flagsIhLh255EE4testILh2EEEbv>
 800c9d4:	0003      	movs	r3, r0
    }
 800c9d6:	0018      	movs	r0, r3
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	b002      	add	sp, #8
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <_ZN3etl11string_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    string_base(size_type max_size_)
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b082      	sub	sp, #8
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	6039      	str	r1, [r7, #0]
      : current_size(0)
      , CAPACITY(max_size_)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	683a      	ldr	r2, [r7, #0]
 800c9f2:	605a      	str	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	0018      	movs	r0, r3
 800c9fa:	f000 fa61 	bl	800cec0 <_ZN3etl5flagsIhLh255EEC1Ev>
    {
    }
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	0018      	movs	r0, r3
 800ca02:	46bd      	mov	sp, r7
 800ca04:	b002      	add	sp, #8
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b>:
    ETL_CONSTEXPR14 flags<T, MASK>& set(bool value) ETL_NOEXCEPT
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	000a      	movs	r2, r1
 800ca12:	1cfb      	adds	r3, r7, #3
 800ca14:	701a      	strb	r2, [r3, #0]
      value ? data |= (pattern & MASK) : data &= (~pattern & MASK);
 800ca16:	1cfb      	adds	r3, r7, #3
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d007      	beq.n	800ca2e <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b+0x26>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	2201      	movs	r2, #1
 800ca24:	4313      	orrs	r3, r2
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	701a      	strb	r2, [r3, #0]
 800ca2c:	e006      	b.n	800ca3c <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b+0x34>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2201      	movs	r2, #1
 800ca34:	4393      	bics	r3, r2
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	701a      	strb	r2, [r3, #0]
      return *this;
 800ca3c:	687b      	ldr	r3, [r7, #4]
    }
 800ca3e:	0018      	movs	r0, r3
 800ca40:	46bd      	mov	sp, r7
 800ca42:	b002      	add	sp, #8
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <_ZN3etl11string_base13set_truncatedEb>:

#if ETL_STRING_TRUNCATION_CHECKS_ENABLED
    //*************************************************************************
    /// Sets the 'truncated' flag.
    //*************************************************************************
    void set_truncated(bool status)
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b082      	sub	sp, #8
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	000a      	movs	r2, r1
 800ca50:	1cfb      	adds	r3, r7, #3
 800ca52:	701a      	strb	r2, [r3, #0]
    {
      flags.set<IS_TRUNCATED>(status);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3308      	adds	r3, #8
 800ca58:	001a      	movs	r2, r3
 800ca5a:	1cfb      	adds	r3, r7, #3
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	0019      	movs	r1, r3
 800ca60:	0010      	movs	r0, r2
 800ca62:	f7ff ffd1 	bl	800ca08 <_ZN3etl5flagsIhLh255EE3setILh1EEERS1_b>
    }
 800ca66:	46c0      	nop			; (mov r8, r8)
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	b002      	add	sp, #8
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <_ZN3etl11string_baseD1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~string_base()
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
    {
    }
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	0018      	movs	r0, r3
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	b002      	add	sp, #8
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZN3etl3minIjEERKT_S3_S3_>:
  }

  template <typename T>
  ETL_NODISCARD
  ETL_CONSTEXPR 
  const T& min(const T& a, const T& b)
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  {
    typedef etl::less<T> compare;

    return etl::min(a, b, compare());
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	0018      	movs	r0, r3
 800ca90:	f000 f817 	bl	800cac2 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_>
 800ca94:	0003      	movs	r3, r0
  }
 800ca96:	0018      	movs	r0, r3
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	b004      	add	sp, #16
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <_ZNK3etl4lessIjEclERKjS3_>:
    ETL_CONSTEXPR bool operator()(const T &lhs, const T &rhs) const
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	60b9      	str	r1, [r7, #8]
 800caa8:	607a      	str	r2, [r7, #4]
      return (lhs < rhs);
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	419b      	sbcs	r3, r3
 800cab6:	425b      	negs	r3, r3
 800cab8:	b2db      	uxtb	r3, r3
    }
 800caba:	0018      	movs	r0, r3
 800cabc:	46bd      	mov	sp, r7
 800cabe:	b004      	add	sp, #16
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_>:
  const T& min(const T& a, const T& b, TCompare compare)
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	60f8      	str	r0, [r7, #12]
 800caca:	60b9      	str	r1, [r7, #8]
 800cacc:	1d3b      	adds	r3, r7, #4
 800cace:	701a      	strb	r2, [r3, #0]
    return (compare(a, b)) ? a : b;
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	68f9      	ldr	r1, [r7, #12]
 800cad4:	1d3b      	adds	r3, r7, #4
 800cad6:	0018      	movs	r0, r3
 800cad8:	f7ff ffe1 	bl	800ca9e <_ZNK3etl4lessIjEclERKjS3_>
 800cadc:	1e03      	subs	r3, r0, #0
 800cade:	d001      	beq.n	800cae4 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_+0x22>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	e000      	b.n	800cae6 <_ZN3etl3minIjNS_4lessIjEEEERKT_S5_S5_T0_+0x24>
 800cae4:	68bb      	ldr	r3, [r7, #8]
  }
 800cae6:	0018      	movs	r0, r3
 800cae8:	46bd      	mov	sp, r7
 800caea:	b004      	add	sp, #16
 800caec:	bd80      	pop	{r7, pc}

0800caee <_ZN3etl6stringILj5EED1Ev>:
  /// A string implementation that uses a fixed size buffer.
  ///\tparam MAX_SIZE_ The maximum number of elements that can be stored.
  ///\ingroup string
  //***************************************************************************
  template <const size_t MAX_SIZE_>
  class string : public istring
 800caee:	b580      	push	{r7, lr}
 800caf0:	b082      	sub	sp, #8
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	0018      	movs	r0, r3
 800cafa:	f000 fa01 	bl	800cf00 <_ZN3etl13ibasic_stringIcED1Ev>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	0018      	movs	r0, r3
 800cb02:	46bd      	mov	sp, r7
 800cb04:	b002      	add	sp, #8
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <_ZN11SolarGators7Drivers10InfoSquare4DrawERNS0_7ILI9341E>:

namespace SolarGators {
namespace Drivers {

void InfoSquare::Draw(ILI9341& disp)
{
 800cb08:	b5b0      	push	{r4, r5, r7, lr}
 800cb0a:	b08a      	sub	sp, #40	; 0x28
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  disp.SetTextSize(TextSize);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2102      	movs	r1, #2
 800cb16:	0018      	movs	r0, r3
 800cb18:	f7ff faca 	bl	800c0b0 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  // Draw the Border
  disp.DrawRect(x, y, DataSqW, DataSqH, 0xF800);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	8b19      	ldrh	r1, [r3, #24]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	8b5a      	ldrh	r2, [r3, #26]
 800cb24:	6838      	ldr	r0, [r7, #0]
 800cb26:	23f8      	movs	r3, #248	; 0xf8
 800cb28:	021b      	lsls	r3, r3, #8
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	2332      	movs	r3, #50	; 0x32
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2350      	movs	r3, #80	; 0x50
 800cb32:	f7ff fd1d 	bl	800c570 <_ZN11SolarGators7Drivers7ILI93418DrawRectEttttt>
  // Draw the Title
  disp.DrawText(x+TextPaddX, y+TitlePaddY, title.c_str(), 0xF800);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	8b1b      	ldrh	r3, [r3, #24]
 800cb3a:	330a      	adds	r3, #10
 800cb3c:	b29c      	uxth	r4, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	8b5b      	ldrh	r3, [r3, #26]
 800cb42:	3307      	adds	r3, #7
 800cb44:	b29d      	uxth	r5, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	0018      	movs	r0, r3
 800cb4a:	f000 fa89 	bl	800d060 <_ZNK3etl13ibasic_stringIcE5c_strEv>
 800cb4e:	0002      	movs	r2, r0
 800cb50:	6838      	ldr	r0, [r7, #0]
 800cb52:	23f8      	movs	r3, #248	; 0xf8
 800cb54:	021b      	lsls	r3, r3, #8
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	0013      	movs	r3, r2
 800cb5a:	002a      	movs	r2, r5
 800cb5c:	0021      	movs	r1, r4
 800cb5e:	f7ff fc83 	bl	800c468 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
  UpdateValue(disp, " N/A ");
 800cb62:	4a0a      	ldr	r2, [pc, #40]	; (800cb8c <_ZN11SolarGators7Drivers10InfoSquare4DrawERNS0_7ILI9341E+0x84>)
 800cb64:	2408      	movs	r4, #8
 800cb66:	193b      	adds	r3, r7, r4
 800cb68:	0011      	movs	r1, r2
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	f000 fa82 	bl	800d074 <_ZN3etl6stringILj5EEC1EPKc>
 800cb70:	193a      	adds	r2, r7, r4
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	0018      	movs	r0, r3
 800cb78:	f000 f80a 	bl	800cb90 <_ZN11SolarGators7Drivers10InfoSquare11UpdateValueERNS0_7ILI9341EN3etl6stringILj5EEE>
 800cb7c:	193b      	adds	r3, r7, r4
 800cb7e:	0018      	movs	r0, r3
 800cb80:	f7ff ffb5 	bl	800caee <_ZN3etl6stringILj5EED1Ev>
}
 800cb84:	46c0      	nop			; (mov r8, r8)
 800cb86:	46bd      	mov	sp, r7
 800cb88:	b008      	add	sp, #32
 800cb8a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb8c:	08013e7c 	.word	0x08013e7c

0800cb90 <_ZN11SolarGators7Drivers10InfoSquare11UpdateValueERNS0_7ILI9341EN3etl6stringILj5EEE>:

void InfoSquare::UpdateValue(ILI9341& disp, etl::string<5> val)
{
 800cb90:	b5b0      	push	{r4, r5, r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af02      	add	r7, sp, #8
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  disp.DrawText(x+TextPaddX, TextHeight*TextSize+TitlePaddY+DataPaddY+y, val.c_str(), 0xF800);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	8b1b      	ldrh	r3, [r3, #24]
 800cba0:	330a      	adds	r3, #10
 800cba2:	b29c      	uxth	r4, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	8b5b      	ldrh	r3, [r3, #26]
 800cba8:	331b      	adds	r3, #27
 800cbaa:	b29d      	uxth	r5, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	0018      	movs	r0, r3
 800cbb0:	f000 fa56 	bl	800d060 <_ZNK3etl13ibasic_stringIcE5c_strEv>
 800cbb4:	0002      	movs	r2, r0
 800cbb6:	68b8      	ldr	r0, [r7, #8]
 800cbb8:	23f8      	movs	r3, #248	; 0xf8
 800cbba:	021b      	lsls	r3, r3, #8
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	0013      	movs	r3, r2
 800cbc0:	002a      	movs	r2, r5
 800cbc2:	0021      	movs	r1, r4
 800cbc4:	f7ff fc50 	bl	800c468 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
}
 800cbc8:	46c0      	nop			; (mov r8, r8)
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	b004      	add	sp, #16
 800cbce:	bdb0      	pop	{r4, r5, r7, pc}

0800cbd0 <_ZN11SolarGators7Drivers10InfoSquareC1Ev>:

namespace SolarGators {
namespace Drivers {

// Minor UI Element Struct
class InfoSquare {
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	0018      	movs	r0, r3
 800cbdc:	f000 fa68 	bl	800d0b0 <_ZN3etl6stringILj5EEC1Ev>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	0018      	movs	r0, r3
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	b002      	add	sp, #8
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev>:
  //***************************************************************************
  ///\ingroup array
  /// A replacement for std::array if you haven't got C++0x11.
  //***************************************************************************
  template <typename T, const size_t SIZE_>
  class array
 800cbea:	b5b0      	push	{r4, r5, r7, lr}
 800cbec:	b082      	sub	sp, #8
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2403      	movs	r4, #3
 800cbf6:	001d      	movs	r5, r3
 800cbf8:	2c00      	cmp	r4, #0
 800cbfa:	db05      	blt.n	800cc08 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev+0x1e>
 800cbfc:	0028      	movs	r0, r5
 800cbfe:	f7ff ffe7 	bl	800cbd0 <_ZN11SolarGators7Drivers10InfoSquareC1Ev>
 800cc02:	351c      	adds	r5, #28
 800cc04:	3c01      	subs	r4, #1
 800cc06:	e7f7      	b.n	800cbf8 <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev+0xe>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	0018      	movs	r0, r3
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	b002      	add	sp, #8
 800cc10:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cc14 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E>:

UI::UI(ILI9341& display):disp(display)
 800cc14:	b590      	push	{r4, r7, lr}
 800cc16:	b09d      	sub	sp, #116	; 0x74
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	3304      	adds	r3, #4
 800cc28:	0018      	movs	r0, r3
 800cc2a:	f7ff ffde 	bl	800cbea <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEC1Ev>
{
  // Set Screen Orientation
  disp.SetRotation(3);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2103      	movs	r1, #3
 800cc34:	0018      	movs	r0, r3
 800cc36:	f7ff f9c8 	bl	800bfca <_ZN11SolarGators7Drivers7ILI934111SetRotationEh>
  // Set Background Color
  disp.ClearScreen(0x0000);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2100      	movs	r1, #0
 800cc40:	0018      	movs	r0, r3
 800cc42:	f7ff f8b7 	bl	800bdb4 <_ZN11SolarGators7Drivers7ILI934111ClearScreenEt>
  // Setup info squares
  etl::string<5> titles[] = {"Accel"," SOC ","Voltg","Curnt"};
 800cc46:	230c      	movs	r3, #12
 800cc48:	18fc      	adds	r4, r7, r3
 800cc4a:	4b3f      	ldr	r3, [pc, #252]	; (800cd48 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x134>)
 800cc4c:	0019      	movs	r1, r3
 800cc4e:	0020      	movs	r0, r4
 800cc50:	f000 fa10 	bl	800d074 <_ZN3etl6stringILj5EEC1EPKc>
 800cc54:	3418      	adds	r4, #24
 800cc56:	4b3d      	ldr	r3, [pc, #244]	; (800cd4c <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x138>)
 800cc58:	0019      	movs	r1, r3
 800cc5a:	0020      	movs	r0, r4
 800cc5c:	f000 fa0a 	bl	800d074 <_ZN3etl6stringILj5EEC1EPKc>
 800cc60:	3418      	adds	r4, #24
 800cc62:	4b3b      	ldr	r3, [pc, #236]	; (800cd50 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x13c>)
 800cc64:	0019      	movs	r1, r3
 800cc66:	0020      	movs	r0, r4
 800cc68:	f000 fa04 	bl	800d074 <_ZN3etl6stringILj5EEC1EPKc>
 800cc6c:	0023      	movs	r3, r4
 800cc6e:	3318      	adds	r3, #24
 800cc70:	4a38      	ldr	r2, [pc, #224]	; (800cd54 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x140>)
 800cc72:	0011      	movs	r1, r2
 800cc74:	0018      	movs	r0, r3
 800cc76:	f000 f9fd 	bl	800d074 <_ZN3etl6stringILj5EEC1EPKc>
  for (size_t i = 0; i < first_row_.size(); ++i)
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3304      	adds	r3, #4
 800cc82:	0018      	movs	r0, r3
 800cc84:	f000 fa28 	bl	800d0d8 <_ZNK3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EE4sizeEv>
 800cc88:	0002      	movs	r2, r0
 800cc8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	419b      	sbcs	r3, r3
 800cc90:	425b      	negs	r3, r3
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d03d      	beq.n	800cd14 <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x100>
  {
    first_row_[i].title = titles[i];
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc9e:	0011      	movs	r1, r2
 800cca0:	0018      	movs	r0, r3
 800cca2:	f000 fa22 	bl	800d0ea <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800cca6:	0003      	movs	r3, r0
 800cca8:	0018      	movs	r0, r3
 800ccaa:	230c      	movs	r3, #12
 800ccac:	18f9      	adds	r1, r7, r3
 800ccae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccb0:	0013      	movs	r3, r2
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	189b      	adds	r3, r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	18cb      	adds	r3, r1, r3
 800ccba:	0019      	movs	r1, r3
 800ccbc:	f000 fa25 	bl	800d10a <_ZN3etl6stringILj5EEaSERKS1_>
    first_row_[i].x = i*InfoSquare::DataSqW;
 800ccc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccc2:	b29c      	uxth	r4, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccca:	0011      	movs	r1, r2
 800cccc:	0018      	movs	r0, r3
 800ccce:	f000 fa0c 	bl	800d0ea <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800ccd2:	0003      	movs	r3, r0
 800ccd4:	2250      	movs	r2, #80	; 0x50
 800ccd6:	4362      	muls	r2, r4
 800ccd8:	b292      	uxth	r2, r2
 800ccda:	831a      	strh	r2, [r3, #24]
    first_row_[i].y = 0;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3304      	adds	r3, #4
 800cce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cce2:	0011      	movs	r1, r2
 800cce4:	0018      	movs	r0, r3
 800cce6:	f000 fa00 	bl	800d0ea <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800ccea:	0003      	movs	r3, r0
 800ccec:	2200      	movs	r2, #0
 800ccee:	835a      	strh	r2, [r3, #26]
    first_row_[i].Draw(disp);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccf6:	0011      	movs	r1, r2
 800ccf8:	0018      	movs	r0, r3
 800ccfa:	f000 f9f6 	bl	800d0ea <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>
 800ccfe:	0002      	movs	r2, r0
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	0019      	movs	r1, r3
 800cd06:	0010      	movs	r0, r2
 800cd08:	f7ff fefe 	bl	800cb08 <_ZN11SolarGators7Drivers10InfoSquare4DrawERNS0_7ILI9341E>
  for (size_t i = 0; i < first_row_.size(); ++i)
 800cd0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd0e:	3301      	adds	r3, #1
 800cd10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd12:	e7b4      	b.n	800cc7e <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x6a>
  }
  DrawSpeed();
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	0018      	movs	r0, r3
 800cd18:	f000 f81e 	bl	800cd58 <_ZN11SolarGators7Drivers2UI9DrawSpeedEv>
  DrawTripCodes();
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	0018      	movs	r0, r3
 800cd20:	f000 f890 	bl	800ce44 <_ZN11SolarGators7Drivers2UI13DrawTripCodesEv>
  etl::string<5> titles[] = {"Accel"," SOC ","Voltg","Curnt"};
 800cd24:	230c      	movs	r3, #12
 800cd26:	18fc      	adds	r4, r7, r3
 800cd28:	3460      	adds	r4, #96	; 0x60
 800cd2a:	230c      	movs	r3, #12
 800cd2c:	18fb      	adds	r3, r7, r3
 800cd2e:	429c      	cmp	r4, r3
 800cd30:	d004      	beq.n	800cd3c <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x128>
 800cd32:	3c18      	subs	r4, #24
 800cd34:	0020      	movs	r0, r4
 800cd36:	f7ff feda 	bl	800caee <_ZN3etl6stringILj5EED1Ev>
 800cd3a:	e7f6      	b.n	800cd2a <_ZN11SolarGators7Drivers2UIC1ERNS0_7ILI9341E+0x116>
}
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	0018      	movs	r0, r3
 800cd40:	46bd      	mov	sp, r7
 800cd42:	b01d      	add	sp, #116	; 0x74
 800cd44:	bd90      	pop	{r4, r7, pc}
 800cd46:	46c0      	nop			; (mov r8, r8)
 800cd48:	08013e84 	.word	0x08013e84
 800cd4c:	08013e8c 	.word	0x08013e8c
 800cd50:	08013e94 	.word	0x08013e94
 800cd54:	08013e9c 	.word	0x08013e9c

0800cd58 <_ZN11SolarGators7Drivers2UI9DrawSpeedEv>:
{

}

void UI::DrawSpeed()
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af02      	add	r7, sp, #8
 800cd5e:	6078      	str	r0, [r7, #4]
  // Draw Speed
  disp.SetTextSize(3);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2103      	movs	r1, #3
 800cd66:	0018      	movs	r0, r3
 800cd68:	f7ff f9a2 	bl	800c0b0 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  const char* str2 = "Speed";
 800cd6c:	4b0e      	ldr	r3, [pc, #56]	; (800cda8 <_ZN11SolarGators7Drivers2UI9DrawSpeedEv+0x50>)
 800cd6e:	60fb      	str	r3, [r7, #12]
  disp.DrawText(115, 54, str2, 0xF800);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	23f8      	movs	r3, #248	; 0xf8
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	0013      	movs	r3, r2
 800cd7e:	2236      	movs	r2, #54	; 0x36
 800cd80:	2173      	movs	r1, #115	; 0x73
 800cd82:	f7ff fb71 	bl	800c468 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
  disp.SetTextSize(4);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2104      	movs	r1, #4
 800cd8c:	0018      	movs	r0, r3
 800cd8e:	f7ff f98f 	bl	800c0b0 <_ZN11SolarGators7Drivers7ILI934111SetTextSizeEh>
  UpdateSpeed(99.9);
 800cd92:	4a06      	ldr	r2, [pc, #24]	; (800cdac <_ZN11SolarGators7Drivers2UI9DrawSpeedEv+0x54>)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	1c11      	adds	r1, r2, #0
 800cd98:	0018      	movs	r0, r3
 800cd9a:	f000 f816 	bl	800cdca <_ZN11SolarGators7Drivers2UI11UpdateSpeedEf>
}
 800cd9e:	46c0      	nop			; (mov r8, r8)
 800cda0:	46bd      	mov	sp, r7
 800cda2:	b004      	add	sp, #16
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	08013ea4 	.word	0x08013ea4
 800cdac:	42c7cccd 	.word	0x42c7cccd

0800cdb0 <_ZN3etl6stringILj4EED1Ev>:
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	0018      	movs	r0, r3
 800cdbc:	f000 f8a0 	bl	800cf00 <_ZN3etl13ibasic_stringIcED1Ev>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	0018      	movs	r0, r3
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	b002      	add	sp, #8
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <_ZN11SolarGators7Drivers2UI11UpdateSpeedEf>:

void UI::UpdateSpeed(float speed)
{
 800cdca:	b5b0      	push	{r4, r5, r7, lr}
 800cdcc:	b08c      	sub	sp, #48	; 0x30
 800cdce:	af02      	add	r7, sp, #8
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	6039      	str	r1, [r7, #0]
  etl::string<4> s_speed;
 800cdd4:	2408      	movs	r4, #8
 800cdd6:	193b      	adds	r3, r7, r4
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f000 f9aa 	bl	800d132 <_ZN3etl6stringILj4EEC1Ev>
  etl::to_string(speed, s_speed, etl::format_spec().precision(1).width(4).fill(0), false);
 800cdde:	2520      	movs	r5, #32
 800cde0:	197b      	adds	r3, r7, r5
 800cde2:	0018      	movs	r0, r3
 800cde4:	f000 f9b9 	bl	800d15a <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEEC1Ev>
 800cde8:	197b      	adds	r3, r7, r5
 800cdea:	2101      	movs	r1, #1
 800cdec:	0018      	movs	r0, r3
 800cdee:	f000 f9d5 	bl	800d19c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE9precisionEm>
 800cdf2:	0003      	movs	r3, r0
 800cdf4:	2104      	movs	r1, #4
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	f000 f9de 	bl	800d1b8 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>
 800cdfc:	0003      	movs	r3, r0
 800cdfe:	2100      	movs	r1, #0
 800ce00:	0018      	movs	r0, r3
 800ce02:	f000 f9e7 	bl	800d1d4 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4fillEc>
 800ce06:	0002      	movs	r2, r0
 800ce08:	0025      	movs	r5, r4
 800ce0a:	1979      	adds	r1, r7, r5
 800ce0c:	6838      	ldr	r0, [r7, #0]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f000 f9f0 	bl	800d1f4 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>
  disp.DrawText(112, 82, s_speed.c_str(), 0xF800);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681c      	ldr	r4, [r3, #0]
 800ce18:	197b      	adds	r3, r7, r5
 800ce1a:	0018      	movs	r0, r3
 800ce1c:	f000 f920 	bl	800d060 <_ZNK3etl13ibasic_stringIcE5c_strEv>
 800ce20:	0002      	movs	r2, r0
 800ce22:	23f8      	movs	r3, #248	; 0xf8
 800ce24:	021b      	lsls	r3, r3, #8
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	0013      	movs	r3, r2
 800ce2a:	2252      	movs	r2, #82	; 0x52
 800ce2c:	2170      	movs	r1, #112	; 0x70
 800ce2e:	0020      	movs	r0, r4
 800ce30:	f7ff fb1a 	bl	800c468 <_ZN11SolarGators7Drivers7ILI93418DrawTextEttPKct>
  etl::string<4> s_speed;
 800ce34:	197b      	adds	r3, r7, r5
 800ce36:	0018      	movs	r0, r3
 800ce38:	f7ff ffba 	bl	800cdb0 <_ZN3etl6stringILj4EED1Ev>
}
 800ce3c:	46c0      	nop			; (mov r8, r8)
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	b00a      	add	sp, #40	; 0x28
 800ce42:	bdb0      	pop	{r4, r5, r7, pc}

0800ce44 <_ZN11SolarGators7Drivers2UI13DrawTripCodesEv>:

void UI::DrawTripCodes()
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b0ac      	sub	sp, #176	; 0xb0
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  // Mitsuba Trip Codes
  const char* mitsuba_titles[] = {
 800ce4c:	2368      	movs	r3, #104	; 0x68
 800ce4e:	18fa      	adds	r2, r7, r3
 800ce50:	4b09      	ldr	r3, [pc, #36]	; (800ce78 <_ZN11SolarGators7Drivers2UI13DrawTripCodesEv+0x34>)
 800ce52:	0010      	movs	r0, r2
 800ce54:	0019      	movs	r1, r3
 800ce56:	2348      	movs	r3, #72	; 0x48
 800ce58:	001a      	movs	r2, r3
 800ce5a:	f005 fa23 	bl	80122a4 <memcpy>
    "powerSystemError", "overCurrError",
    "overVoltError", "overCurrLimit",
    "motorSystemError", "motorLock",
    "hallSensorShort", "hallSensorOpen" };
  // BMS Trip Codes
  const char* orion_titles[] = {
 800ce5e:	2308      	movs	r3, #8
 800ce60:	18fa      	adds	r2, r7, r3
 800ce62:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <_ZN11SolarGators7Drivers2UI13DrawTripCodesEv+0x38>)
 800ce64:	0010      	movs	r0, r2
 800ce66:	0019      	movs	r1, r3
 800ce68:	2360      	movs	r3, #96	; 0x60
 800ce6a:	001a      	movs	r2, r3
 800ce6c:	f005 fa1a 	bl	80122a4 <memcpy>
    "Internal Heatsink Thermistor Fault",
    "Internal Logic Fault",
    "Highest Cell Voltage Too High Fault",
    "Lowest Cell Voltage Too Low Fault",
    "Pack Too Hot Fault"};
}
 800ce70:	46c0      	nop			; (mov r8, r8)
 800ce72:	46bd      	mov	sp, r7
 800ce74:	b02c      	add	sp, #176	; 0xb0
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	08013eac 	.word	0x08013eac
 800ce7c:	08013ef4 	.word	0x08013ef4

0800ce80 <_ZNK3etl5flagsIhLh255EE4testILh1EEEbv>:
    ETL_CONSTEXPR bool test() const ETL_NOEXCEPT
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
      return (data & pattern) != value_type(0);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	001a      	movs	r2, r3
 800ce8e:	2301      	movs	r3, #1
 800ce90:	4013      	ands	r3, r2
 800ce92:	1e5a      	subs	r2, r3, #1
 800ce94:	4193      	sbcs	r3, r2
 800ce96:	b2db      	uxtb	r3, r3
    }
 800ce98:	0018      	movs	r0, r3
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	b002      	add	sp, #8
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <_ZNK3etl5flagsIhLh255EE4testILh2EEEbv>:
    ETL_CONSTEXPR bool test() const ETL_NOEXCEPT
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
      return (data & pattern) != value_type(0);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	001a      	movs	r2, r3
 800ceae:	2302      	movs	r3, #2
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	1e5a      	subs	r2, r3, #1
 800ceb4:	4193      	sbcs	r3, r2
 800ceb6:	b2db      	uxtb	r3, r3
    }
 800ceb8:	0018      	movs	r0, r3
 800ceba:	46bd      	mov	sp, r7
 800cebc:	b002      	add	sp, #8
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <_ZN3etl5flagsIhLh255EEC1Ev>:
    ETL_CONSTEXPR flags() ETL_NOEXCEPT
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
      : data(value_type(0))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	701a      	strb	r2, [r3, #0]
    }
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	0018      	movs	r0, r3
 800ced2:	46bd      	mov	sp, r7
 800ced4:	b002      	add	sp, #8
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <_ZN3etl13ibasic_stringIcEC1EPcj>:
  protected:

    //*********************************************************************
    /// Constructor.
    //*********************************************************************
    ibasic_string(T* p_buffer_, size_type MAX_SIZE_)
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
      : string_base(MAX_SIZE_),
        p_buffer(p_buffer_)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	0011      	movs	r1, r2
 800ceea:	0018      	movs	r0, r3
 800ceec:	f7ff fd77 	bl	800c9de <_ZN3etl11string_baseC1Ej>
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	68ba      	ldr	r2, [r7, #8]
 800cef4:	60da      	str	r2, [r3, #12]
    {
    }
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	0018      	movs	r0, r3
 800cefa:	46bd      	mov	sp, r7
 800cefc:	b004      	add	sp, #16
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <_ZN3etl13ibasic_stringIcED1Ev>:
  public:
    virtual
#else
  protected:
#endif
    ~ibasic_string()
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
    {
#if ETL_STRING_CLEAR_AFTER_USE_ENABLED
      if (is_secure())
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f7ff fd59 	bl	800c9c2 <_ZNK3etl11string_base9is_secureEv>
 800cf10:	1e03      	subs	r3, r0, #0
 800cf12:	d003      	beq.n	800cf1c <_ZN3etl13ibasic_stringIcED1Ev+0x1c>
      {
        initialise();
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	0018      	movs	r0, r3
 800cf18:	f000 f809 	bl	800cf2e <_ZN3etl13ibasic_stringIcE10initialiseEv>
      }
#endif
    }
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	0018      	movs	r0, r3
 800cf20:	f7ff fda5 	bl	800ca6e <_ZN3etl11string_baseD1Ev>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	0018      	movs	r0, r3
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	b002      	add	sp, #8
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <_ZN3etl13ibasic_stringIcE10initialiseEv>:
    void initialise()
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
      current_size = 0U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]
      cleanup();
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	0018      	movs	r0, r3
 800cf40:	f000 f96d 	bl	800d21e <_ZN3etl13ibasic_stringIcE7cleanupEv>
      p_buffer[0] = 0;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	701a      	strb	r2, [r3, #0]
      set_truncated(false);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2100      	movs	r1, #0
 800cf50:	0018      	movs	r0, r3
 800cf52:	f7ff fd78 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
    }
 800cf56:	46c0      	nop			; (mov r8, r8)
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	b002      	add	sp, #8
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <_ZN3etl13ibasic_stringIcE6assignERKS1_>:
    void assign(const etl::ibasic_string<T>& other)
 800cf5e:	b590      	push	{r4, r7, lr}
 800cf60:	b083      	sub	sp, #12
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
      assign(other.begin(), other.end());
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	f000 f972 	bl	800d254 <_ZNK3etl13ibasic_stringIcE5beginEv>
 800cf70:	0004      	movs	r4, r0
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	0018      	movs	r0, r3
 800cf76:	f000 f977 	bl	800d268 <_ZNK3etl13ibasic_stringIcE3endEv>
 800cf7a:	0002      	movs	r2, r0
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	0021      	movs	r1, r4
 800cf80:	0018      	movs	r0, r3
 800cf82:	f000 f81d 	bl	800cfc0 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_>
      if (other.is_truncated())
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	0018      	movs	r0, r3
 800cf8a:	f7ff fcef 	bl	800c96c <_ZNK3etl11string_base12is_truncatedEv>
 800cf8e:	1e03      	subs	r3, r0, #0
 800cf90:	d004      	beq.n	800cf9c <_ZN3etl13ibasic_stringIcE6assignERKS1_+0x3e>
        set_truncated(true);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2101      	movs	r1, #1
 800cf96:	0018      	movs	r0, r3
 800cf98:	f7ff fd55 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
      if (other.is_secure())
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	0018      	movs	r0, r3
 800cfa0:	f7ff fd0f 	bl	800c9c2 <_ZNK3etl11string_base9is_secureEv>
 800cfa4:	1e03      	subs	r3, r0, #0
 800cfa6:	d003      	beq.n	800cfb0 <_ZN3etl13ibasic_stringIcE6assignERKS1_+0x52>
        set_secure();
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	0018      	movs	r0, r3
 800cfac:	f7ff fcfc 	bl	800c9a8 <_ZN3etl11string_base10set_secureEv>
      cleanup();
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f000 f933 	bl	800d21e <_ZN3etl13ibasic_stringIcE7cleanupEv>
    }
 800cfb8:	46c0      	nop			; (mov r8, r8)
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	b003      	add	sp, #12
 800cfbe:	bd90      	pop	{r4, r7, pc}

0800cfc0 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_>:
    void assign(TIterator first, TIterator last)
 800cfc0:	b590      	push	{r4, r7, lr}
 800cfc2:	b087      	sub	sp, #28
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
      difference_type d = etl::distance(first, last);
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	0011      	movs	r1, r2
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f000 f970 	bl	800d2b8 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800cfd8:	0003      	movs	r3, r0
 800cfda:	617b      	str	r3, [r7, #20]
      ETL_ASSERT(d >= 0, ETL_ERROR(string_iterator));
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	da05      	bge.n	800cfee <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x2e>
 800cfe2:	4b1b      	ldr	r3, [pc, #108]	; (800d050 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x90>)
 800cfe4:	4a1b      	ldr	r2, [pc, #108]	; (800d054 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x94>)
 800cfe6:	491c      	ldr	r1, [pc, #112]	; (800d058 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x98>)
 800cfe8:	481c      	ldr	r0, [pc, #112]	; (800d05c <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x9c>)
 800cfea:	f004 ffe9 	bl	8011fc0 <__assert_func>
      initialise();
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	0018      	movs	r0, r3
 800cff2:	f7ff ff9c 	bl	800cf2e <_ZN3etl13ibasic_stringIcE10initialiseEv>
      while ((first != last) && (current_size != CAPACITY))
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d013      	beq.n	800d026 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x66>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d00d      	beq.n	800d026 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x66>
        p_buffer[current_size++] = *first++;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	1c5a      	adds	r2, r3, #1
 800d00e:	60ba      	str	r2, [r7, #8]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	68d0      	ldr	r0, [r2, #12]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	6812      	ldr	r2, [r2, #0]
 800d018:	1c54      	adds	r4, r2, #1
 800d01a:	68f9      	ldr	r1, [r7, #12]
 800d01c:	600c      	str	r4, [r1, #0]
 800d01e:	1882      	adds	r2, r0, r2
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	7013      	strb	r3, [r2, #0]
      while ((first != last) && (current_size != CAPACITY))
 800d024:	e7e7      	b.n	800cff6 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_+0x36>
      p_buffer[current_size] = 0;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	68da      	ldr	r2, [r3, #12]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	18d3      	adds	r3, r2, r3
 800d030:	2200      	movs	r2, #0
 800d032:	701a      	strb	r2, [r3, #0]
      set_truncated(first != last);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	1e5a      	subs	r2, r3, #1
 800d03e:	4193      	sbcs	r3, r2
 800d040:	b2db      	uxtb	r3, r3
 800d042:	0019      	movs	r1, r3
 800d044:	f7ff fcff 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
    }
 800d048:	46c0      	nop			; (mov r8, r8)
 800d04a:	46bd      	mov	sp, r7
 800d04c:	b007      	add	sp, #28
 800d04e:	bd90      	pop	{r4, r7, pc}
 800d050:	08013f54 	.word	0x08013f54
 800d054:	08013f60 	.word	0x08013f60
 800d058:	000002e6 	.word	0x000002e6
 800d05c:	08013fc4 	.word	0x08013fc4

0800d060 <_ZNK3etl13ibasic_stringIcE5c_strEv>:
    const_pointer c_str() const
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
      return p_buffer;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	68db      	ldr	r3, [r3, #12]
    }
 800d06c:	0018      	movs	r0, r3
 800d06e:	46bd      	mov	sp, r7
 800d070:	b002      	add	sp, #8
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZN3etl6stringILj5EEC1EPKc>:

    //*************************************************************************
    /// Constructor, from null terminated text.
    ///\param text The initial text of the string.
    //*************************************************************************
    ETL_EXPLICIT_STRING_FROM_CHAR string(const value_type* text)
 800d074:	b590      	push	{r4, r7, lr}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3310      	adds	r3, #16
 800d084:	2205      	movs	r2, #5
 800d086:	0019      	movs	r1, r3
 800d088:	f7ff ff26 	bl	800ced8 <_ZN3etl13ibasic_stringIcEC1EPcj>
    {
      this->assign(text, text + etl::char_traits<value_type>::length(text));
 800d08c:	687c      	ldr	r4, [r7, #4]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	0018      	movs	r0, r3
 800d092:	f000 f8f6 	bl	800d282 <_ZN3etl11char_traitsIcE6lengthEPKc>
 800d096:	0002      	movs	r2, r0
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	189a      	adds	r2, r3, r2
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	0019      	movs	r1, r3
 800d0a0:	0020      	movs	r0, r4
 800d0a2:	f7ff ff8d 	bl	800cfc0 <_ZN3etl13ibasic_stringIcE6assignIPKcEEvT_S5_>
    }
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	0018      	movs	r0, r3
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	b003      	add	sp, #12
 800d0ae:	bd90      	pop	{r4, r7, pc}

0800d0b0 <_ZN3etl6stringILj5EEC1Ev>:
    string()
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3310      	adds	r3, #16
 800d0be:	2205      	movs	r2, #5
 800d0c0:	0019      	movs	r1, r3
 800d0c2:	f7ff ff09 	bl	800ced8 <_ZN3etl13ibasic_stringIcEC1EPcj>
      this->initialise();
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	0018      	movs	r0, r3
 800d0ca:	f7ff ff30 	bl	800cf2e <_ZN3etl13ibasic_stringIcE10initialiseEv>
    }
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	b002      	add	sp, #8
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <_ZNK3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EE4sizeEv>:
    }

    //*************************************************************************
    /// Returns the size of the array.
    //*************************************************************************
    ETL_CONSTEXPR size_t size() const ETL_NOEXCEPT
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
    {
      return SIZE;
 800d0e0:	2304      	movs	r3, #4
    }
 800d0e2:	0018      	movs	r0, r3
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	b002      	add	sp, #8
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <_ZN3etl5arrayIN11SolarGators7Drivers10InfoSquareELj4EEixEj>:
    reference operator[](size_t i)
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b082      	sub	sp, #8
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	6039      	str	r1, [r7, #0]
      return _buffer[i];
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	0013      	movs	r3, r2
 800d0f8:	00db      	lsls	r3, r3, #3
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	18d3      	adds	r3, r2, r3
    }
 800d102:	0018      	movs	r0, r3
 800d104:	46bd      	mov	sp, r7
 800d106:	b002      	add	sp, #8
 800d108:	bd80      	pop	{r7, pc}

0800d10a <_ZN3etl6stringILj5EEaSERKS1_>:
    }

    //*************************************************************************
    /// Assignment operator.
    //*************************************************************************
    string& operator = (const string& rhs)
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b082      	sub	sp, #8
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	6039      	str	r1, [r7, #0]
    {
      if (&rhs != this)
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d005      	beq.n	800d128 <_ZN3etl6stringILj5EEaSERKS1_+0x1e>
      {
        this->assign(rhs);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	0011      	movs	r1, r2
 800d122:	0018      	movs	r0, r3
 800d124:	f7ff ff1b 	bl	800cf5e <_ZN3etl13ibasic_stringIcE6assignERKS1_>
      }

      return *this;
 800d128:	687b      	ldr	r3, [r7, #4]
    }
 800d12a:	0018      	movs	r0, r3
 800d12c:	46bd      	mov	sp, r7
 800d12e:	b002      	add	sp, #8
 800d130:	bd80      	pop	{r7, pc}

0800d132 <_ZN3etl6stringILj4EEC1Ev>:
    string()
 800d132:	b580      	push	{r7, lr}
 800d134:	b082      	sub	sp, #8
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
      : istring(reinterpret_cast<value_type*>(&buffer), MAX_SIZE)
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	3310      	adds	r3, #16
 800d140:	2204      	movs	r2, #4
 800d142:	0019      	movs	r1, r3
 800d144:	f7ff fec8 	bl	800ced8 <_ZN3etl13ibasic_stringIcEC1EPcj>
      this->initialise();
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	0018      	movs	r0, r3
 800d14c:	f7ff feef 	bl	800cf2e <_ZN3etl13ibasic_stringIcE10initialiseEv>
    }
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	0018      	movs	r0, r3
 800d154:	46bd      	mov	sp, r7
 800d156:	b002      	add	sp, #8
 800d158:	bd80      	pop	{r7, pc}

0800d15a <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEEC1Ev>:
  public:

    //***************************************************************************
    /// Default constructor.
    //***************************************************************************
    ETL_CONSTEXPR basic_format_spec()
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
      , precision_(0U)
      , upper_case_(false)
      , left_justified_(false)
      , boolalpha_(false)
      , show_base_(false)
      , fill_(typename TString::value_type(' '))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	220a      	movs	r2, #10
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	705a      	strb	r2, [r3, #1]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	709a      	strb	r2, [r3, #2]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	70da      	strb	r2, [r3, #3]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	711a      	strb	r2, [r3, #4]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	715a      	strb	r2, [r3, #5]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	719a      	strb	r2, [r3, #6]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2220      	movs	r2, #32
 800d190:	71da      	strb	r2, [r3, #7]
    {
    }
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	0018      	movs	r0, r3
 800d196:	46bd      	mov	sp, r7
 800d198:	b002      	add	sp, #8
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE9precisionEm>:

    //***************************************************************************
    /// Sets the precision.
    /// \return A reference to the basic_format_spec.
    //***************************************************************************
    ETL_CONSTEXPR14 basic_format_spec& precision(uint32_t p)
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
    {
      precision_ = static_cast<uint_least8_t>(p);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	709a      	strb	r2, [r3, #2]
      return *this;
 800d1ae:	687b      	ldr	r3, [r7, #4]
    }
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>:
    ETL_CONSTEXPR14 basic_format_spec& width(uint32_t w)
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
      width_ = static_cast<uint_least8_t>(w);
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	705a      	strb	r2, [r3, #1]
      return *this;
 800d1ca:	687b      	ldr	r3, [r7, #4]
    }
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	b002      	add	sp, #8
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4fillEc>:

    //***************************************************************************
    /// Sets the fill character.
    /// \return A reference to the basic_format_spec.
    //***************************************************************************
    ETL_CONSTEXPR14 basic_format_spec& fill(typename TString::value_type c)
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	000a      	movs	r2, r1
 800d1de:	1cfb      	adds	r3, r7, #3
 800d1e0:	701a      	strb	r2, [r3, #0]
    {
      fill_ = c;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	1cfa      	adds	r2, r7, #3
 800d1e6:	7812      	ldrb	r2, [r2, #0]
 800d1e8:	71da      	strb	r2, [r3, #7]
      return *this;
 800d1ea:	687b      	ldr	r3, [r7, #4]
    }
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	b002      	add	sp, #8
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <_ZN3etl9to_stringIfEENS_9enable_ifIXaantsrNS_7is_sameIT_NS_13ibasic_stringIcEEEE5valuentsrNS2_IS3_NS_17basic_string_viewIcNS_11char_traitsIcEEEEEE5valueERKS5_E4typeES3_RS5_RKNS_17basic_format_specIS5_EEb>:
  /// Supplied format spec.
  /// !etl::istring && !etl::string_view
  //***************************************************************************
  template <typename T>
  typename etl::enable_if<!etl::is_same<T, etl::istring>::value && !etl::is_same<T, etl::string_view>::value, const etl::istring&>::type
    to_string(const T value, etl::istring& str, const etl::format_spec& format, bool append = false)
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	001a      	movs	r2, r3
 800d202:	1cfb      	adds	r3, r7, #3
 800d204:	701a      	strb	r2, [r3, #0]
  {
    return private_to_string::to_string(value, str, format, append);
 800d206:	1cfb      	adds	r3, r7, #3
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f000 f872 	bl	800d2f8 <_ZN3etl17private_to_string9to_stringIfNS_13ibasic_stringIcEEEENS_9enable_ifIXsrNS_17is_floating_pointIT_EE5valueERKT0_E4typeES6_RS8_RKNS_17basic_format_specIS8_EEb>
 800d214:	0003      	movs	r3, r0
  }
 800d216:	0018      	movs	r0, r3
 800d218:	46bd      	mov	sp, r7
 800d21a:	b004      	add	sp, #16
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <_ZN3etl13ibasic_stringIcE7cleanupEv>:
    void cleanup()
 800d21e:	b580      	push	{r7, lr}
 800d220:	b082      	sub	sp, #8
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
      if (is_secure())
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	0018      	movs	r0, r3
 800d22a:	f7ff fbca 	bl	800c9c2 <_ZNK3etl11string_base9is_secureEv>
 800d22e:	1e03      	subs	r3, r0, #0
 800d230:	d00c      	beq.n	800d24c <_ZN3etl13ibasic_stringIcE7cleanupEv+0x2e>
        etl::memory_clear_range(&p_buffer[current_size], &p_buffer[CAPACITY]);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	68da      	ldr	r2, [r3, #12]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	18d0      	adds	r0, r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	68da      	ldr	r2, [r3, #12]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	18d3      	adds	r3, r2, r3
 800d246:	0019      	movs	r1, r3
 800d248:	f000 f86b 	bl	800d322 <_ZN3etl18memory_clear_rangeIcEEvPVT_S3_>
    }
 800d24c:	46c0      	nop			; (mov r8, r8)
 800d24e:	46bd      	mov	sp, r7
 800d250:	b002      	add	sp, #8
 800d252:	bd80      	pop	{r7, pc}

0800d254 <_ZNK3etl13ibasic_stringIcE5beginEv>:
    const_iterator begin() const
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
      return &p_buffer[0];
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68db      	ldr	r3, [r3, #12]
    }
 800d260:	0018      	movs	r0, r3
 800d262:	46bd      	mov	sp, r7
 800d264:	b002      	add	sp, #8
 800d266:	bd80      	pop	{r7, pc}

0800d268 <_ZNK3etl13ibasic_stringIcE3endEv>:
    const_iterator end() const
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
      return &p_buffer[current_size];
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68da      	ldr	r2, [r3, #12]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	18d3      	adds	r3, r2, r3
    }
 800d27a:	0018      	movs	r0, r3
 800d27c:	46bd      	mov	sp, r7
 800d27e:	b002      	add	sp, #8
 800d280:	bd80      	pop	{r7, pc}

0800d282 <_ZN3etl11char_traitsIcE6lengthEPKc>:
    {
      return a < b;
    }

    //*************************************************************************
    static ETL_CONSTEXPR14 size_t length(const char_type* str)
 800d282:	b580      	push	{r7, lr}
 800d284:	b084      	sub	sp, #16
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
    {
      size_t count = 0UL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	60fb      	str	r3, [r7, #12]

      if (str != 0)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00c      	beq.n	800d2ae <_ZN3etl11char_traitsIcE6lengthEPKc+0x2c>
      {
        while (*str++ != 0)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	1c5a      	adds	r2, r3, #1
 800d298:	607a      	str	r2, [r7, #4]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	1e5a      	subs	r2, r3, #1
 800d29e:	4193      	sbcs	r3, r2
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <_ZN3etl11char_traitsIcE6lengthEPKc+0x2c>
        {
          ++count;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	60fb      	str	r3, [r7, #12]
        while (*str++ != 0)
 800d2ac:	e7f2      	b.n	800d294 <_ZN3etl11char_traitsIcE6lengthEPKc+0x12>
        }
      }

      return count;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
    }
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	b004      	add	sp, #16
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
  }

#else

  template<typename TIterator>
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  {
    return std::distance(first, last);
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	0011      	movs	r1, r2
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f000 f84b 	bl	800d364 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800d2ce:	0003      	movs	r3, r0
  }
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	b002      	add	sp, #8
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <_ZN3etl4fillIPccEEvT_S2_RKT0_>:
  void fill(TIterator first, TIterator last, const TValue& value)
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	607a      	str	r2, [r7, #4]
    std::fill(first, last, value);
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	68b9      	ldr	r1, [r7, #8]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	f000 f84f 	bl	800d38e <_ZSt4fillIPccEvT_S1_RKT0_>
  }
 800d2f0:	46c0      	nop			; (mov r8, r8)
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	b004      	add	sp, #16
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_ZN3etl17private_to_string9to_stringIfNS_13ibasic_stringIcEEEENS_9enable_ifIXsrNS_17is_floating_pointIT_EE5valueERKT0_E4typeES6_RS8_RKNS_17basic_format_specIS8_EEb>:
    //***************************************************************************
    /// For floating point.
    //***************************************************************************
    template <typename T, typename TIString>
    typename etl::enable_if<etl::is_floating_point<T>::value, const TIString&>::type
      to_string(const T value, TIString& str, const etl::basic_format_spec<TIString>& format, const bool append = false)
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
 800d304:	001a      	movs	r2, r3
 800d306:	1cfb      	adds	r3, r7, #3
 800d308:	701a      	strb	r2, [r3, #0]
    {
      etl::private_to_string::add_floating_point(value, str, format, append);
 800d30a:	1cfb      	adds	r3, r7, #3
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f000 f87e 	bl	800d414 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb>

      return str;
 800d318:	68bb      	ldr	r3, [r7, #8]
    }
 800d31a:	0018      	movs	r0, r3
 800d31c:	46bd      	mov	sp, r7
 800d31e:	b004      	add	sp, #16
 800d320:	bd80      	pop	{r7, pc}

0800d322 <_ZN3etl18memory_clear_rangeIcEEvPVT_S3_>:
  ///\param begin The first object in the range.
  ///\param end   One past the last object in the range.
  ///\ingroup memory
  //*****************************************************************************
  template <typename T>
  void memory_clear_range(volatile T* begin, volatile T* end)
 800d322:	b580      	push	{r7, lr}
 800d324:	b084      	sub	sp, #16
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	6039      	str	r1, [r7, #0]
  {
    const size_t n = static_cast<size_t>(etl::distance(begin, end));
 800d32c:	683a      	ldr	r2, [r7, #0]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	0011      	movs	r1, r2
 800d332:	0018      	movs	r0, r3
 800d334:	f000 f978 	bl	800d628 <_ZN3etl8distanceIPVcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800d338:	0003      	movs	r3, r0
 800d33a:	60fb      	str	r3, [r7, #12]

    memory_clear_range(begin, n);
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	0011      	movs	r1, r2
 800d342:	0018      	movs	r0, r3
 800d344:	f000 f980 	bl	800d648 <_ZN3etl18memory_clear_rangeIcEEvPVT_j>
  }
 800d348:	46c0      	nop			; (mov r8, r8)
 800d34a:	46bd      	mov	sp, r7
 800d34c:	b004      	add	sp, #16
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <_ZN3etl13ibasic_stringIcE5beginEv>:
    iterator begin()
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
      return &p_buffer[0];
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	68db      	ldr	r3, [r3, #12]
    }
 800d35c:	0018      	movs	r0, r3
 800d35e:	46bd      	mov	sp, r7
 800d360:	b002      	add	sp, #8
 800d362:	bd80      	pop	{r7, pc}

0800d364 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d364:	b5b0      	push	{r4, r5, r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d36e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d370:	1d3b      	adds	r3, r7, #4
 800d372:	0018      	movs	r0, r3
 800d374:	f000 f977 	bl	800d666 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	1c2a      	adds	r2, r5, #0
 800d37c:	0019      	movs	r1, r3
 800d37e:	0020      	movs	r0, r4
 800d380:	f000 f979 	bl	800d676 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d384:	0003      	movs	r3, r0
    }
 800d386:	0018      	movs	r0, r3
 800d388:	46bd      	mov	sp, r7
 800d38a:	b004      	add	sp, #16
 800d38c:	bdb0      	pop	{r4, r5, r7, pc}

0800d38e <_ZSt4fillIPccEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800d38e:	b590      	push	{r4, r7, lr}
 800d390:	b085      	sub	sp, #20
 800d392:	af00      	add	r7, sp, #0
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	0018      	movs	r0, r3
 800d39e:	f000 f978 	bl	800d692 <_ZSt12__niter_baseIPcET_S1_>
 800d3a2:	0004      	movs	r4, r0
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	f000 f973 	bl	800d692 <_ZSt12__niter_baseIPcET_S1_>
 800d3ac:	0001      	movs	r1, r0
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	001a      	movs	r2, r3
 800d3b2:	0020      	movs	r0, r4
 800d3b4:	f000 f976 	bl	800d6a4 <_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
		    __value);
    }
 800d3b8:	46c0      	nop			; (mov r8, r8)
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	b005      	add	sp, #20
 800d3be:	bd90      	pop	{r4, r7, pc}

0800d3c0 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>:
    ETL_CONSTEXPR uint32_t get_precision() const
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
      return precision_;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	789b      	ldrb	r3, [r3, #2]
    }
 800d3cc:	0018      	movs	r0, r3
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	b002      	add	sp, #8
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5rightEv>:

    //***************************************************************************
    /// Sets the right justify flag.
    /// \return A reference to the basic_format_spec.
    //***************************************************************************
    ETL_CONSTEXPR14 basic_format_spec& right()
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
    {
      left_justified_ = false;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	711a      	strb	r2, [r3, #4]
      return *this;
 800d3e2:	687b      	ldr	r3, [r7, #4]
    }
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	b002      	add	sp, #8
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_>:
  //***************************************************************************
  // For signed types.
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR typename etl::enable_if<etl::is_signed<T>::value, T>::type
    absolute(T value)
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  {
    return (value < T(0)) ? -value : value;
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7f2 ff2e 	bl	8000258 <__aeabi_fcmplt>
 800d3fc:	1e03      	subs	r3, r0, #0
 800d3fe:	d004      	beq.n	800d40a <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_+0x1e>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2280      	movs	r2, #128	; 0x80
 800d404:	0612      	lsls	r2, r2, #24
 800d406:	4053      	eors	r3, r2
 800d408:	e000      	b.n	800d40c <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_+0x20>
 800d40a:	687b      	ldr	r3, [r7, #4]
  }
 800d40c:	1c18      	adds	r0, r3, #0
 800d40e:	46bd      	mov	sp, r7
 800d410:	b002      	add	sp, #8
 800d412:	bd80      	pop	{r7, pc}

0800d414 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb>:
    void add_floating_point(const T value,
 800d414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d416:	b099      	sub	sp, #100	; 0x64
 800d418:	af04      	add	r7, sp, #16
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	001a      	movs	r2, r3
 800d422:	1cfb      	adds	r3, r7, #3
 800d424:	701a      	strb	r2, [r3, #0]
      if (!append)
 800d426:	1cfb      	adds	r3, r7, #3
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	2201      	movs	r2, #1
 800d42c:	4053      	eors	r3, r2
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x28>
        str.clear();
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	0018      	movs	r0, r3
 800d438:	f000 f951 	bl	800d6de <_ZN3etl13ibasic_stringIcE5clearEv>
      iterator start = str.end();
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	0018      	movs	r0, r3
 800d440:	f000 f959 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800d444:	0003      	movs	r3, r0
 800d446:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (isnan(value) || isinf(value))
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	1c18      	adds	r0, r3, #0
 800d44c:	f7ff fa54 	bl	800c8f8 <_ZSt5isnanf>
 800d450:	1e03      	subs	r3, r0, #0
 800d452:	d105      	bne.n	800d460 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x4c>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	1c18      	adds	r0, r3, #0
 800d458:	f7ff fa2a 	bl	800c8b0 <_ZSt5isinff>
 800d45c:	1e03      	subs	r3, r0, #0
 800d45e:	d001      	beq.n	800d464 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x50>
 800d460:	2301      	movs	r3, #1
 800d462:	e000      	b.n	800d466 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x52>
 800d464:	2300      	movs	r3, #0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d011      	beq.n	800d48e <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x7a>
        etl::private_to_string::add_nan_inf(isnan(value), isinf(value), str);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	1c18      	adds	r0, r3, #0
 800d46e:	f7ff fa43 	bl	800c8f8 <_ZSt5isnanf>
 800d472:	0003      	movs	r3, r0
 800d474:	001c      	movs	r4, r3
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	1c18      	adds	r0, r3, #0
 800d47a:	f7ff fa19 	bl	800c8b0 <_ZSt5isinff>
 800d47e:	0003      	movs	r3, r0
 800d480:	0019      	movs	r1, r3
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	001a      	movs	r2, r3
 800d486:	0020      	movs	r0, r4
 800d488:	f000 f942 	bl	800d710 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_>
 800d48c:	e0c2      	b.n	800d614 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x200>
        uint32_t max_precision = etl::numeric_limits<T>::digits10;
 800d48e:	2306      	movs	r3, #6
 800d490:	62bb      	str	r3, [r7, #40]	; 0x28
        etl::basic_format_spec<TIString> integral_format = format;
 800d492:	261c      	movs	r6, #28
 800d494:	19ba      	adds	r2, r7, r6
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	0010      	movs	r0, r2
 800d49a:	0019      	movs	r1, r3
 800d49c:	2308      	movs	r3, #8
 800d49e:	001a      	movs	r2, r3
 800d4a0:	f004 ff00 	bl	80122a4 <memcpy>
        integral_format.decimal().width(0).precision(format.get_precision() > max_precision ? max_precision : format.get_precision());
 800d4a4:	19bb      	adds	r3, r7, r6
 800d4a6:	0018      	movs	r0, r3
 800d4a8:	f000 f984 	bl	800d7b4 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE7decimalEv>
 800d4ac:	0003      	movs	r3, r0
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	f7ff fe81 	bl	800d1b8 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>
 800d4b6:	0006      	movs	r6, r0
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	0018      	movs	r0, r3
 800d4bc:	f7ff ff80 	bl	800d3c0 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 800d4c0:	0002      	movs	r2, r0
 800d4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d305      	bcc.n	800d4d4 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0xc0>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	f7ff ff78 	bl	800d3c0 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 800d4d0:	0003      	movs	r3, r0
 800d4d2:	e000      	b.n	800d4d6 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0xc2>
 800d4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d6:	0019      	movs	r1, r3
 800d4d8:	0030      	movs	r0, r6
 800d4da:	f7ff fe5f 	bl	800d19c <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE9precisionEm>
        etl::basic_format_spec<TIString> fractional_format = integral_format;
 800d4de:	2614      	movs	r6, #20
 800d4e0:	19bb      	adds	r3, r7, r6
 800d4e2:	211c      	movs	r1, #28
 800d4e4:	187a      	adds	r2, r7, r1
 800d4e6:	ca03      	ldmia	r2!, {r0, r1}
 800d4e8:	c303      	stmia	r3!, {r0, r1}
        fractional_format.width(integral_format.get_precision()).fill(type('0')).right();
 800d4ea:	211c      	movs	r1, #28
 800d4ec:	187b      	adds	r3, r7, r1
 800d4ee:	0018      	movs	r0, r3
 800d4f0:	f7ff ff66 	bl	800d3c0 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 800d4f4:	0002      	movs	r2, r0
 800d4f6:	19bb      	adds	r3, r7, r6
 800d4f8:	0011      	movs	r1, r2
 800d4fa:	0018      	movs	r0, r3
 800d4fc:	f7ff fe5c 	bl	800d1b8 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5widthEm>
 800d500:	0003      	movs	r3, r0
 800d502:	2130      	movs	r1, #48	; 0x30
 800d504:	0018      	movs	r0, r3
 800d506:	f7ff fe65 	bl	800d1d4 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4fillEc>
 800d50a:	0003      	movs	r3, r0
 800d50c:	0018      	movs	r0, r3
 800d50e:	f7ff ff61 	bl	800d3d4 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE5rightEv>
        uworkspace_t multiplier = 1U;
 800d512:	2201      	movs	r2, #1
 800d514:	2300      	movs	r3, #0
 800d516:	64ba      	str	r2, [r7, #72]	; 0x48
 800d518:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (uint32_t i = 0U; i < fractional_format.get_precision(); ++i)
 800d51a:	2300      	movs	r3, #0
 800d51c:	647b      	str	r3, [r7, #68]	; 0x44
 800d51e:	2314      	movs	r3, #20
 800d520:	18fb      	adds	r3, r7, r3
 800d522:	0018      	movs	r0, r3
 800d524:	f7ff ff4c 	bl	800d3c0 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 800d528:	0002      	movs	r2, r0
 800d52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d52c:	4293      	cmp	r3, r2
 800d52e:	419b      	sbcs	r3, r3
 800d530:	425b      	negs	r3, r3
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b00      	cmp	r3, #0
 800d536:	d013      	beq.n	800d560 <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x14c>
          multiplier *= 10U;
 800d538:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d53a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d53c:	0002      	movs	r2, r0
 800d53e:	000b      	movs	r3, r1
 800d540:	0f96      	lsrs	r6, r2, #30
 800d542:	009d      	lsls	r5, r3, #2
 800d544:	4335      	orrs	r5, r6
 800d546:	0094      	lsls	r4, r2, #2
 800d548:	0002      	movs	r2, r0
 800d54a:	000b      	movs	r3, r1
 800d54c:	1912      	adds	r2, r2, r4
 800d54e:	416b      	adcs	r3, r5
 800d550:	1892      	adds	r2, r2, r2
 800d552:	415b      	adcs	r3, r3
 800d554:	64ba      	str	r2, [r7, #72]	; 0x48
 800d556:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (uint32_t i = 0U; i < fractional_format.get_precision(); ++i)
 800d558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d55a:	3301      	adds	r3, #1
 800d55c:	647b      	str	r3, [r7, #68]	; 0x44
 800d55e:	e7de      	b.n	800d51e <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x10a>
        T f_integral = floor(etl::absolute(value));
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	1c18      	adds	r0, r3, #0
 800d564:	f7ff ff42 	bl	800d3ec <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_>
 800d568:	1c03      	adds	r3, r0, #0
 800d56a:	1c18      	adds	r0, r3, #0
 800d56c:	f7ff f992 	bl	800c894 <_ZSt5floorf>
 800d570:	1c03      	adds	r3, r0, #0
 800d572:	627b      	str	r3, [r7, #36]	; 0x24
        uworkspace_t integral = static_cast<uworkspace_t>(f_integral);
 800d574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d576:	f7f2 feb7 	bl	80002e8 <__aeabi_f2ulz>
 800d57a:	0002      	movs	r2, r0
 800d57c:	000b      	movs	r3, r1
 800d57e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d580:	63fb      	str	r3, [r7, #60]	; 0x3c
        uworkspace_t fractional = static_cast<uworkspace_t>(round((etl::absolute(value) - f_integral) * multiplier));
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	1c18      	adds	r0, r3, #0
 800d586:	f7ff ff31 	bl	800d3ec <_ZN3etl8absoluteIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueES3_E4typeES3_>
 800d58a:	1c03      	adds	r3, r0, #0
 800d58c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d58e:	1c18      	adds	r0, r3, #0
 800d590:	f7f3 fb2e 	bl	8000bf0 <__aeabi_fsub>
 800d594:	1c03      	adds	r3, r0, #0
 800d596:	1c1c      	adds	r4, r3, #0
 800d598:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d59a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d59c:	f7f2 fec4 	bl	8000328 <__aeabi_ul2f>
 800d5a0:	1c03      	adds	r3, r0, #0
 800d5a2:	1c19      	adds	r1, r3, #0
 800d5a4:	1c20      	adds	r0, r4, #0
 800d5a6:	f7f3 fa09 	bl	80009bc <__aeabi_fmul>
 800d5aa:	1c03      	adds	r3, r0, #0
 800d5ac:	1c18      	adds	r0, r3, #0
 800d5ae:	f7ff f9b9 	bl	800c924 <_ZSt5roundf>
 800d5b2:	1c03      	adds	r3, r0, #0
 800d5b4:	1c18      	adds	r0, r3, #0
 800d5b6:	f7f2 fe97 	bl	80002e8 <__aeabi_f2ulz>
 800d5ba:	0002      	movs	r2, r0
 800d5bc:	000b      	movs	r3, r1
 800d5be:	633a      	str	r2, [r7, #48]	; 0x30
 800d5c0:	637b      	str	r3, [r7, #52]	; 0x34
        if (fractional == multiplier)
 800d5c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d10f      	bne.n	800d5ea <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x1d6>
 800d5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d10b      	bne.n	800d5ea <_ZN3etl17private_to_string18add_floating_pointIfNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEb+0x1d6>
          ++integral;
 800d5d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d6:	2001      	movs	r0, #1
 800d5d8:	2100      	movs	r1, #0
 800d5da:	1812      	adds	r2, r2, r0
 800d5dc:	414b      	adcs	r3, r1
 800d5de:	63ba      	str	r2, [r7, #56]	; 0x38
 800d5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          fractional = 0U;
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	633a      	str	r2, [r7, #48]	; 0x30
 800d5e8:	637b      	str	r3, [r7, #52]	; 0x34
        etl::private_to_string::add_integral_and_fractional(integral, fractional, str, integral_format, fractional_format, etl::is_negative(value));
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	1c18      	adds	r0, r3, #0
 800d5ee:	f000 f8ef 	bl	800d7d0 <_ZN3etl11is_negativeIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEbE4typeES3_>
 800d5f2:	0003      	movs	r3, r0
 800d5f4:	001c      	movs	r4, r3
 800d5f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5fe:	9403      	str	r4, [sp, #12]
 800d600:	2414      	movs	r4, #20
 800d602:	193c      	adds	r4, r7, r4
 800d604:	9402      	str	r4, [sp, #8]
 800d606:	241c      	movs	r4, #28
 800d608:	193c      	adds	r4, r7, r4
 800d60a:	9401      	str	r4, [sp, #4]
 800d60c:	68bc      	ldr	r4, [r7, #8]
 800d60e:	9400      	str	r4, [sp, #0]
 800d610:	f000 f8f1 	bl	800d7f6 <_ZN3etl17private_to_string27add_integral_and_fractionalINS_13ibasic_stringIcEEEEvyyRT_RKNS_17basic_format_specIS4_EES9_b>
      etl::private_to_string::add_alignment(str, start, format);
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	0018      	movs	r0, r3
 800d61c:	f000 f930 	bl	800d880 <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE>
    }
 800d620:	46c0      	nop			; (mov r8, r8)
 800d622:	46bd      	mov	sp, r7
 800d624:	b015      	add	sp, #84	; 0x54
 800d626:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d628 <_ZN3etl8distanceIPVcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	6039      	str	r1, [r7, #0]
    return std::distance(first, last);
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	0011      	movs	r1, r2
 800d638:	0018      	movs	r0, r3
 800d63a:	f000 f96b 	bl	800d914 <_ZSt8distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800d63e:	0003      	movs	r3, r0
  }
 800d640:	0018      	movs	r0, r3
 800d642:	46bd      	mov	sp, r7
 800d644:	b002      	add	sp, #8
 800d646:	bd80      	pop	{r7, pc}

0800d648 <_ZN3etl18memory_clear_rangeIcEEvPVT_j>:
  void memory_clear_range(volatile T* begin, size_t n)
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
    memory_clear(reinterpret_cast<volatile char*>(begin), n * sizeof(T));
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	0011      	movs	r1, r2
 800d658:	0018      	movs	r0, r3
 800d65a:	f7ff f970 	bl	800c93e <_ZN3etl12memory_clearEPVcj>
  }
 800d65e:	46c0      	nop			; (mov r8, r8)
 800d660:	46bd      	mov	sp, r7
 800d662:	b002      	add	sp, #8
 800d664:	bd80      	pop	{r7, pc}

0800d666 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800d66e:	1c18      	adds	r0, r3, #0
 800d670:	46bd      	mov	sp, r7
 800d672:	b002      	add	sp, #8
 800d674:	bd80      	pop	{r7, pc}

0800d676 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d676:	b580      	push	{r7, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	1d3b      	adds	r3, r7, #4
 800d682:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	1ad3      	subs	r3, r2, r3
    }
 800d68a:	0018      	movs	r0, r3
 800d68c:	46bd      	mov	sp, r7
 800d68e:	b004      	add	sp, #16
 800d690:	bd80      	pop	{r7, pc}

0800d692 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	0018      	movs	r0, r3
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	b002      	add	sp, #8
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 800d6b0:	2117      	movs	r1, #23
 800d6b2:	187b      	adds	r3, r7, r1
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	7812      	ldrb	r2, [r2, #0]
 800d6b8:	701a      	strb	r2, [r3, #0]
      if (const size_t __len = __last - __first)
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	613b      	str	r3, [r7, #16]
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d006      	beq.n	800d6d6 <_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x32>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 800d6c8:	187b      	adds	r3, r7, r1
 800d6ca:	7819      	ldrb	r1, [r3, #0]
 800d6cc:	693a      	ldr	r2, [r7, #16]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	f004 fe03 	bl	80122dc <memset>
    }
 800d6d6:	46c0      	nop			; (mov r8, r8)
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	b006      	add	sp, #24
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <_ZN3etl13ibasic_stringIcE5clearEv>:
    void clear()
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b082      	sub	sp, #8
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
      initialise();
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	f7ff fc20 	bl	800cf2e <_ZN3etl13ibasic_stringIcE10initialiseEv>
    }
 800d6ee:	46c0      	nop			; (mov r8, r8)
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	b002      	add	sp, #8
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>:
    iterator end()
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b082      	sub	sp, #8
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
      return &p_buffer[current_size];
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	68da      	ldr	r2, [r3, #12]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	18d3      	adds	r3, r2, r3
    }
 800d708:	0018      	movs	r0, r3
 800d70a:	46bd      	mov	sp, r7
 800d70c:	b002      	add	sp, #8
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_>:
    void add_nan_inf(const bool not_a_number,
 800d710:	b5b0      	push	{r4, r5, r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	603a      	str	r2, [r7, #0]
 800d718:	1dfb      	adds	r3, r7, #7
 800d71a:	1c02      	adds	r2, r0, #0
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	1dbb      	adds	r3, r7, #6
 800d720:	1c0a      	adds	r2, r1, #0
 800d722:	701a      	strb	r2, [r3, #0]
      if (not_a_number)
 800d724:	1dfb      	adds	r3, r7, #7
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d014      	beq.n	800d756 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x46>
        str.insert(str.end(), ETL_OR_STD11::begin(n), ETL_OR_STD11::end(n));
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	0018      	movs	r0, r3
 800d730:	f7ff ffe1 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800d734:	0004      	movs	r4, r0
 800d736:	4b16      	ldr	r3, [pc, #88]	; (800d790 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x80>)
 800d738:	0018      	movs	r0, r3
 800d73a:	f000 f900 	bl	800d93e <_ZSt5beginIKcLj3EEPT_RAT0__S1_>
 800d73e:	0005      	movs	r5, r0
 800d740:	4b13      	ldr	r3, [pc, #76]	; (800d790 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x80>)
 800d742:	0018      	movs	r0, r3
 800d744:	f000 f904 	bl	800d950 <_ZSt3endIKcLj3EEPT_RAT0__S1_>
 800d748:	0003      	movs	r3, r0
 800d74a:	6838      	ldr	r0, [r7, #0]
 800d74c:	002a      	movs	r2, r5
 800d74e:	0021      	movs	r1, r4
 800d750:	f000 f908 	bl	800d964 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_>
    }
 800d754:	e017      	b.n	800d786 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x76>
      else if (infinity)
 800d756:	1dbb      	adds	r3, r7, #6
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d013      	beq.n	800d786 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x76>
        str.insert(str.end(), ETL_OR_STD11::begin(i), ETL_OR_STD11::end(i));
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	0018      	movs	r0, r3
 800d762:	f7ff ffc8 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800d766:	0004      	movs	r4, r0
 800d768:	4b0a      	ldr	r3, [pc, #40]	; (800d794 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x84>)
 800d76a:	0018      	movs	r0, r3
 800d76c:	f000 f8e7 	bl	800d93e <_ZSt5beginIKcLj3EEPT_RAT0__S1_>
 800d770:	0005      	movs	r5, r0
 800d772:	4b08      	ldr	r3, [pc, #32]	; (800d794 <_ZN3etl17private_to_string11add_nan_infINS_13ibasic_stringIcEEEEvbbRT_+0x84>)
 800d774:	0018      	movs	r0, r3
 800d776:	f000 f8eb 	bl	800d950 <_ZSt3endIKcLj3EEPT_RAT0__S1_>
 800d77a:	0003      	movs	r3, r0
 800d77c:	6838      	ldr	r0, [r7, #0]
 800d77e:	002a      	movs	r2, r5
 800d780:	0021      	movs	r1, r4
 800d782:	f000 f8ef 	bl	800d964 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_>
    }
 800d786:	46c0      	nop			; (mov r8, r8)
 800d788:	46bd      	mov	sp, r7
 800d78a:	b002      	add	sp, #8
 800d78c:	bdb0      	pop	{r4, r5, r7, pc}
 800d78e:	46c0      	nop			; (mov r8, r8)
 800d790:	0801470c 	.word	0x0801470c
 800d794:	08014710 	.word	0x08014710

0800d798 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4baseEm>:
    ETL_CONSTEXPR14 basic_format_spec& base(uint32_t b)
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
      base_ = static_cast<uint_least8_t>(b);
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	701a      	strb	r2, [r3, #0]
      return *this;
 800d7aa:	687b      	ldr	r3, [r7, #4]
    }
 800d7ac:	0018      	movs	r0, r3
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	b002      	add	sp, #8
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE7decimalEv>:
    ETL_CONSTEXPR14 basic_format_spec& decimal()
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
      base(10);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	210a      	movs	r1, #10
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f7ff ffe9 	bl	800d798 <_ZN3etl17basic_format_specINS_13ibasic_stringIcEEE4baseEm>
      return *this;
 800d7c6:	687b      	ldr	r3, [r7, #4]
    }
 800d7c8:	0018      	movs	r0, r3
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	b002      	add	sp, #8
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <_ZN3etl11is_negativeIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEbE4typeES3_>:
  // For signed types.
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR
  typename etl::enable_if<etl::is_signed<T>::value, bool>::type  
    is_negative(const T value)
 800d7d0:	b590      	push	{r4, r7, lr}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  {
    return (value < T(0));
 800d7d8:	2301      	movs	r3, #1
 800d7da:	1c1c      	adds	r4, r3, #0
 800d7dc:	2100      	movs	r1, #0
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7f2 fd3a 	bl	8000258 <__aeabi_fcmplt>
 800d7e4:	1e03      	subs	r3, r0, #0
 800d7e6:	d101      	bne.n	800d7ec <_ZN3etl11is_negativeIfEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEbE4typeES3_+0x1c>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	1c1c      	adds	r4, r3, #0
 800d7ec:	b2e3      	uxtb	r3, r4
  }
 800d7ee:	0018      	movs	r0, r3
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	b003      	add	sp, #12
 800d7f4:	bd90      	pop	{r4, r7, pc}

0800d7f6 <_ZN3etl17private_to_string27add_integral_and_fractionalINS_13ibasic_stringIcEEEEvyyRT_RKNS_17basic_format_specIS4_EES9_b>:
    void add_integral_and_fractional(const uint64_t integral,
 800d7f6:	b590      	push	{r4, r7, lr}
 800d7f8:	b087      	sub	sp, #28
 800d7fa:	af02      	add	r7, sp, #8
 800d7fc:	60b8      	str	r0, [r7, #8]
 800d7fe:	60f9      	str	r1, [r7, #12]
 800d800:	603a      	str	r2, [r7, #0]
 800d802:	607b      	str	r3, [r7, #4]
      etl::private_to_string::add_integral(integral, str, integral_format, true, negative);
 800d804:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d806:	6a3a      	ldr	r2, [r7, #32]
 800d808:	68b8      	ldr	r0, [r7, #8]
 800d80a:	68f9      	ldr	r1, [r7, #12]
 800d80c:	232c      	movs	r3, #44	; 0x2c
 800d80e:	18fb      	adds	r3, r7, r3
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	9301      	str	r3, [sp, #4]
 800d814:	2301      	movs	r3, #1
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	0023      	movs	r3, r4
 800d81a:	f000 f98f 	bl	800db3c <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>
      if (fractional_format.get_precision() > 0)
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	0018      	movs	r0, r3
 800d822:	f7ff fdcd 	bl	800d3c0 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13get_precisionEv>
 800d826:	0003      	movs	r3, r0
 800d828:	1e5a      	subs	r2, r3, #1
 800d82a:	4193      	sbcs	r3, r2
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00e      	beq.n	800d850 <_ZN3etl17private_to_string27add_integral_and_fractionalINS_13ibasic_stringIcEEEEvyyRT_RKNS_17basic_format_specIS4_EES9_b+0x5a>
        str.push_back(type('.'));
 800d832:	6a3b      	ldr	r3, [r7, #32]
 800d834:	212e      	movs	r1, #46	; 0x2e
 800d836:	0018      	movs	r0, r3
 800d838:	f000 fa83 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
        etl::private_to_string::add_integral(fractional, str, fractional_format, true, false);
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	6a3a      	ldr	r2, [r7, #32]
 800d840:	6838      	ldr	r0, [r7, #0]
 800d842:	6879      	ldr	r1, [r7, #4]
 800d844:	2400      	movs	r4, #0
 800d846:	9401      	str	r4, [sp, #4]
 800d848:	2401      	movs	r4, #1
 800d84a:	9400      	str	r4, [sp, #0]
 800d84c:	f000 f976 	bl	800db3c <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>
    }
 800d850:	46c0      	nop			; (mov r8, r8)
 800d852:	46bd      	mov	sp, r7
 800d854:	b005      	add	sp, #20
 800d856:	bd90      	pop	{r4, r7, pc}

0800d858 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE9get_widthEv>:
    ETL_CONSTEXPR uint32_t get_width() const
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
      return width_;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	785b      	ldrb	r3, [r3, #1]
    }
 800d864:	0018      	movs	r0, r3
 800d866:	46bd      	mov	sp, r7
 800d868:	b002      	add	sp, #8
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE7is_leftEv>:
    ETL_CONSTEXPR bool is_left() const
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
      return left_justified_;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	791b      	ldrb	r3, [r3, #4]
    }
 800d878:	0018      	movs	r0, r3
 800d87a:	46bd      	mov	sp, r7
 800d87c:	b002      	add	sp, #8
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE>:
    void add_alignment(TIString& str, typename TIString::iterator position, const etl::basic_format_spec<TIString>& format)
 800d880:	b590      	push	{r4, r7, lr}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
      uint32_t length = static_cast<uint32_t>(etl::distance(position, str.end()));
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	0018      	movs	r0, r3
 800d890:	f7ff ff31 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800d894:	0002      	movs	r2, r0
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	0011      	movs	r1, r2
 800d89a:	0018      	movs	r0, r3
 800d89c:	f000 fa7a 	bl	800dd94 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800d8a0:	0003      	movs	r3, r0
 800d8a2:	617b      	str	r3, [r7, #20]
      if (length < format.get_width())
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	0018      	movs	r0, r3
 800d8a8:	f7ff ffd6 	bl	800d858 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE9get_widthEv>
 800d8ac:	0002      	movs	r2, r0
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	419b      	sbcs	r3, r3
 800d8b4:	425b      	negs	r3, r3
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d027      	beq.n	800d90c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE+0x8c>
        uint32_t fill_length = format.get_width() - length;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	0018      	movs	r0, r3
 800d8c0:	f7ff ffca 	bl	800d858 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE9get_widthEv>
 800d8c4:	0002      	movs	r2, r0
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	613b      	str	r3, [r7, #16]
        if (format.is_left())
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	f7ff ffcc 	bl	800d86c <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE7is_leftEv>
 800d8d4:	1e03      	subs	r3, r0, #0
 800d8d6:	d00f      	beq.n	800d8f8 <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE+0x78>
          str.insert(str.end(), fill_length, format.get_fill());
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	0018      	movs	r0, r3
 800d8dc:	f7ff ff0b 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800d8e0:	0004      	movs	r4, r0
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f000 fa65 	bl	800ddb4 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_fillEv>
 800d8ea:	0003      	movs	r3, r0
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	0021      	movs	r1, r4
 800d8f2:	f000 fa69 	bl	800ddc8 <_ZN3etl13ibasic_stringIcE6insertEPKcjc>
    }
 800d8f6:	e009      	b.n	800d90c <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE+0x8c>
          str.insert(position, fill_length, format.get_fill());
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	0018      	movs	r0, r3
 800d8fc:	f000 fa5a 	bl	800ddb4 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_fillEv>
 800d900:	0003      	movs	r3, r0
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f000 fa5e 	bl	800ddc8 <_ZN3etl13ibasic_stringIcE6insertEPKcjc>
    }
 800d90c:	46c0      	nop			; (mov r8, r8)
 800d90e:	46bd      	mov	sp, r7
 800d910:	b007      	add	sp, #28
 800d912:	bd90      	pop	{r4, r7, pc}

0800d914 <_ZSt8distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800d914:	b5b0      	push	{r4, r5, r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800d91e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d920:	1d3b      	adds	r3, r7, #4
 800d922:	0018      	movs	r0, r3
 800d924:	f000 fb1f 	bl	800df66 <_ZSt19__iterator_categoryIPVcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	1c2a      	adds	r2, r5, #0
 800d92c:	0019      	movs	r1, r3
 800d92e:	0020      	movs	r0, r4
 800d930:	f000 fb21 	bl	800df76 <_ZSt10__distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d934:	0003      	movs	r3, r0
    }
 800d936:	0018      	movs	r0, r3
 800d938:	46bd      	mov	sp, r7
 800d93a:	b004      	add	sp, #16
 800d93c:	bdb0      	pop	{r4, r5, r7, pc}

0800d93e <_ZSt5beginIKcLj3EEPT_RAT0__S1_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm])
 800d93e:	b580      	push	{r7, lr}
 800d940:	b082      	sub	sp, #8
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	0018      	movs	r0, r3
 800d94a:	46bd      	mov	sp, r7
 800d94c:	b002      	add	sp, #8
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <_ZSt3endIKcLj3EEPT_RAT0__S1_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm])
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3303      	adds	r3, #3
 800d95c:	0018      	movs	r0, r3
 800d95e:	46bd      	mov	sp, r7
 800d960:	b002      	add	sp, #8
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_>:
    iterator insert(const_iterator position, TIterator first, TIterator last)
 800d964:	b590      	push	{r4, r7, lr}
 800d966:	b08d      	sub	sp, #52	; 0x34
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
      iterator position_ = to_iterator(position);
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	0011      	movs	r1, r2
 800d978:	0018      	movs	r0, r3
 800d97a:	f000 fb0a 	bl	800df92 <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 800d97e:	0003      	movs	r3, r0
 800d980:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (first == last)
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	d101      	bne.n	800d98e <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x2a>
        return position_;
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	e0a8      	b.n	800dae0 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x17c>
      const size_type start = etl::distance(begin(), position_);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	0018      	movs	r0, r3
 800d992:	f7ff fcdd 	bl	800d350 <_ZN3etl13ibasic_stringIcE5beginEv>
 800d996:	0002      	movs	r2, r0
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	0019      	movs	r1, r3
 800d99c:	0010      	movs	r0, r2
 800d99e:	f000 f9f9 	bl	800dd94 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800d9a2:	0003      	movs	r3, r0
 800d9a4:	62bb      	str	r3, [r7, #40]	; 0x28
      const size_type n = etl::distance(first, last);
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	0011      	movs	r1, r2
 800d9ac:	0018      	movs	r0, r3
 800d9ae:	f7ff fc83 	bl	800d2b8 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800d9b2:	0003      	movs	r3, r0
 800d9b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (start >= CAPACITY)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d306      	bcc.n	800d9ce <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x6a>
        set_truncated(true);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	0018      	movs	r0, r3
 800d9c6:	f7ff f83e 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
        return position_;
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	e088      	b.n	800dae0 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x17c>
      if ((start + n) >= CAPACITY)
 800d9ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	18d2      	adds	r2, r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d325      	bcc.n	800da28 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0xc4>
        if (((current_size + n) > CAPACITY))
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	18d2      	adds	r2, r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d904      	bls.n	800d9f6 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x92>
          set_truncated(true);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2101      	movs	r1, #1
 800d9f0:	0018      	movs	r0, r3
 800d9f2:	f7ff f828 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
        current_size = CAPACITY;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	601a      	str	r2, [r3, #0]
        while (position_ != end())
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	0018      	movs	r0, r3
 800da02:	f7ff fe78 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800da06:	0002      	movs	r2, r0
 800da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	1e5a      	subs	r2, r3, #1
 800da0e:	4193      	sbcs	r3, r2
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d05c      	beq.n	800dad0 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x16c>
          *position_++ = *first++;
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	1c53      	adds	r3, r2, #1
 800da1a:	607b      	str	r3, [r7, #4]
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	1c59      	adds	r1, r3, #1
 800da20:	62f9      	str	r1, [r7, #44]	; 0x2c
 800da22:	7812      	ldrb	r2, [r2, #0]
 800da24:	701a      	strb	r2, [r3, #0]
        while (position_ != end())
 800da26:	e7ea      	b.n	800d9fe <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x9a>
        const size_type shift_amount = n;
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	623b      	str	r3, [r7, #32]
        const size_type to_position = start + shift_amount;
 800da2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	18d3      	adds	r3, r2, r3
 800da32:	61fb      	str	r3, [r7, #28]
        const size_type remaining_characters = current_size - start;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	617b      	str	r3, [r7, #20]
        const size_type max_shift_characters = CAPACITY - start - shift_amount;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	1ad2      	subs	r2, r2, r3
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	613b      	str	r3, [r7, #16]
        const size_type characters_to_shift = etl::min(max_shift_characters, remaining_characters);
 800da4c:	2314      	movs	r3, #20
 800da4e:	18fa      	adds	r2, r7, r3
 800da50:	2310      	movs	r3, #16
 800da52:	18fb      	adds	r3, r7, r3
 800da54:	0011      	movs	r1, r2
 800da56:	0018      	movs	r0, r3
 800da58:	f7ff f812 	bl	800ca80 <_ZN3etl3minIjEERKT_S3_S3_>
 800da5c:	0003      	movs	r3, r0
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	61bb      	str	r3, [r7, #24]
        if ((start + shift_amount + remaining_characters) > CAPACITY)
 800da62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	18d2      	adds	r2, r2, r3
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	18d2      	adds	r2, r2, r3
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	429a      	cmp	r2, r3
 800da72:	d909      	bls.n	800da88 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x124>
          current_size = CAPACITY;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	601a      	str	r2, [r3, #0]
          set_truncated(true);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2101      	movs	r1, #1
 800da80:	0018      	movs	r0, r3
 800da82:	f7fe ffe0 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
 800da86:	e005      	b.n	800da94 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x130>
          current_size += shift_amount;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	18d2      	adds	r2, r2, r3
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	601a      	str	r2, [r3, #0]
        etl::copy_backward(position_, position_ + characters_to_shift, begin() + to_position + characters_to_shift);
 800da94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	18d4      	adds	r4, r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	0018      	movs	r0, r3
 800da9e:	f7ff fc57 	bl	800d350 <_ZN3etl13ibasic_stringIcE5beginEv>
 800daa2:	0001      	movs	r1, r0
 800daa4:	69fa      	ldr	r2, [r7, #28]
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	18d3      	adds	r3, r2, r3
 800daaa:	18ca      	adds	r2, r1, r3
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daae:	0021      	movs	r1, r4
 800dab0:	0018      	movs	r0, r3
 800dab2:	f000 fa78 	bl	800dfa6 <_ZN3etl13copy_backwardIPcS1_EET0_T_S3_S2_>
        while (first != last)
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d008      	beq.n	800dad0 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x16c>
          *position_++ = *first++;
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	1c53      	adds	r3, r2, #1
 800dac2:	607b      	str	r3, [r7, #4]
 800dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac6:	1c59      	adds	r1, r3, #1
 800dac8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800daca:	7812      	ldrb	r2, [r2, #0]
 800dacc:	701a      	strb	r2, [r3, #0]
        while (first != last)
 800dace:	e7f2      	b.n	800dab6 <_ZN3etl13ibasic_stringIcE6insertIPKcEEPcS4_T_S6_+0x152>
      p_buffer[current_size] = 0;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	68da      	ldr	r2, [r3, #12]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	18d3      	adds	r3, r2, r3
 800dada:	2200      	movs	r2, #0
 800dadc:	701a      	strb	r2, [r3, #0]
      return position_;
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800dae0:	0018      	movs	r0, r3
 800dae2:	46bd      	mov	sp, r7
 800dae4:	b00d      	add	sp, #52	; 0x34
 800dae6:	bd90      	pop	{r4, r7, pc}

0800dae8 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>:
    ETL_CONSTEXPR uint32_t get_base() const
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
      return base_;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	781b      	ldrb	r3, [r3, #0]
    }
 800daf4:	0018      	movs	r0, r3
 800daf6:	46bd      	mov	sp, r7
 800daf8:	b002      	add	sp, #8
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <_ZN3etl8absoluteIyEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueES3_E4typeES3_>:
  //***************************************************************************
  // For unsigned types.
  //***************************************************************************
  template <typename T>
  ETL_CONSTEXPR typename etl::enable_if<etl::is_unsigned<T>::value, T>::type
    absolute(T value)
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6038      	str	r0, [r7, #0]
 800db04:	6079      	str	r1, [r7, #4]
  {
    return value;
 800db06:	683a      	ldr	r2, [r7, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
  }
 800db0a:	0010      	movs	r0, r2
 800db0c:	0019      	movs	r1, r3
 800db0e:	46bd      	mov	sp, r7
 800db10:	b002      	add	sp, #8
 800db12:	bd80      	pop	{r7, pc}

0800db14 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>:
    ETL_CONSTEXPR bool is_upper_case() const
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
      return upper_case_;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	78db      	ldrb	r3, [r3, #3]
    }
 800db20:	0018      	movs	r0, r3
 800db22:	46bd      	mov	sp, r7
 800db24:	b002      	add	sp, #8
 800db26:	bd80      	pop	{r7, pc}

0800db28 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE12is_show_baseEv>:
    ETL_CONSTEXPR bool is_show_base() const
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
      return show_base_;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	799b      	ldrb	r3, [r3, #6]
    }
 800db34:	0018      	movs	r0, r3
 800db36:	46bd      	mov	sp, r7
 800db38:	b002      	add	sp, #8
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb>:
    void add_integral(T value,
 800db3c:	b5b0      	push	{r4, r5, r7, lr}
 800db3e:	b08a      	sub	sp, #40	; 0x28
 800db40:	af00      	add	r7, sp, #0
 800db42:	6138      	str	r0, [r7, #16]
 800db44:	6179      	str	r1, [r7, #20]
 800db46:	60fa      	str	r2, [r7, #12]
 800db48:	60bb      	str	r3, [r7, #8]
      if (!append)
 800db4a:	2330      	movs	r3, #48	; 0x30
 800db4c:	2208      	movs	r2, #8
 800db4e:	4694      	mov	ip, r2
 800db50:	44bc      	add	ip, r7
 800db52:	4463      	add	r3, ip
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	2201      	movs	r2, #1
 800db58:	4053      	eors	r3, r2
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d003      	beq.n	800db68 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x2c>
        str.clear();
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	0018      	movs	r0, r3
 800db64:	f7ff fdbb 	bl	800d6de <_ZN3etl13ibasic_stringIcE5clearEv>
      iterator start = str.end();
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	0018      	movs	r0, r3
 800db6c:	f7ff fdc3 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800db70:	0003      	movs	r3, r0
 800db72:	627b      	str	r3, [r7, #36]	; 0x24
      if (value == 0)
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	4313      	orrs	r3, r2
 800db7a:	d11e      	bne.n	800dbba <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x7e>
        if ((format.get_base() == 10U) && negative)
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	0018      	movs	r0, r3
 800db80:	f7ff ffb2 	bl	800dae8 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 800db84:	0003      	movs	r3, r0
 800db86:	2b0a      	cmp	r3, #10
 800db88:	d109      	bne.n	800db9e <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x62>
 800db8a:	2334      	movs	r3, #52	; 0x34
 800db8c:	2208      	movs	r2, #8
 800db8e:	4694      	mov	ip, r2
 800db90:	44bc      	add	ip, r7
 800db92:	4463      	add	r3, ip
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x62>
 800db9a:	2301      	movs	r3, #1
 800db9c:	e000      	b.n	800dba0 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x64>
 800db9e:	2300      	movs	r3, #0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d004      	beq.n	800dbae <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x72>
          str.push_back(type('-'));
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	212d      	movs	r1, #45	; 0x2d
 800dba8:	0018      	movs	r0, r3
 800dbaa:	f000 f8ca 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
        str.push_back(type('0'));
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2130      	movs	r1, #48	; 0x30
 800dbb2:	0018      	movs	r0, r3
 800dbb4:	f000 f8c5 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
 800dbb8:	e0b9      	b.n	800dd2e <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1f2>
        while (value != 0)
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	697a      	ldr	r2, [r7, #20]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	d050      	beq.n	800dc64 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x128>
          T remainder = etl::absolute(value % T(format.get_base()));
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	0018      	movs	r0, r3
 800dbc6:	f7ff ff8f 	bl	800dae8 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 800dbca:	0003      	movs	r3, r0
 800dbcc:	603b      	str	r3, [r7, #0]
 800dbce:	2300      	movs	r3, #0
 800dbd0:	607b      	str	r3, [r7, #4]
 800dbd2:	6938      	ldr	r0, [r7, #16]
 800dbd4:	6979      	ldr	r1, [r7, #20]
 800dbd6:	683a      	ldr	r2, [r7, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f7f2 fb65 	bl	80002a8 <__aeabi_uldivmod>
 800dbde:	0010      	movs	r0, r2
 800dbe0:	0019      	movs	r1, r3
 800dbe2:	f7ff ff8b 	bl	800dafc <_ZN3etl8absoluteIyEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueES3_E4typeES3_>
 800dbe6:	0002      	movs	r2, r0
 800dbe8:	000b      	movs	r3, r1
 800dbea:	61ba      	str	r2, [r7, #24]
 800dbec:	61fb      	str	r3, [r7, #28]
          str.push_back((remainder > 9) ? (format.is_upper_case() ? type('A' + (remainder - 10)) : type('a' + (remainder - 10))) : type('0' + remainder));
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d105      	bne.n	800dc00 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xc4>
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d116      	bne.n	800dc28 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xec>
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	2b09      	cmp	r3, #9
 800dbfe:	d913      	bls.n	800dc28 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xec>
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	0018      	movs	r0, r3
 800dc04:	f7ff ff86 	bl	800db14 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 800dc08:	1e03      	subs	r3, r0, #0
 800dc0a:	d006      	beq.n	800dc1a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xde>
 800dc0c:	69ba      	ldr	r2, [r7, #24]
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	1c13      	adds	r3, r2, #0
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	3337      	adds	r3, #55	; 0x37
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	e00c      	b.n	800dc34 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xf8>
 800dc1a:	69ba      	ldr	r2, [r7, #24]
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	1c13      	adds	r3, r2, #0
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	3357      	adds	r3, #87	; 0x57
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	e005      	b.n	800dc34 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0xf8>
 800dc28:	69ba      	ldr	r2, [r7, #24]
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	1c13      	adds	r3, r2, #0
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	3330      	adds	r3, #48	; 0x30
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	0019      	movs	r1, r3
 800dc38:	0010      	movs	r0, r2
 800dc3a:	f000 f882 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
          value = value / T(format.get_base());
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	0018      	movs	r0, r3
 800dc42:	f7ff ff51 	bl	800dae8 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 800dc46:	0003      	movs	r3, r0
 800dc48:	001c      	movs	r4, r3
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	001d      	movs	r5, r3
 800dc4e:	0022      	movs	r2, r4
 800dc50:	002b      	movs	r3, r5
 800dc52:	6938      	ldr	r0, [r7, #16]
 800dc54:	6979      	ldr	r1, [r7, #20]
 800dc56:	f7f2 fb27 	bl	80002a8 <__aeabi_uldivmod>
 800dc5a:	0002      	movs	r2, r0
 800dc5c:	000b      	movs	r3, r1
 800dc5e:	613a      	str	r2, [r7, #16]
 800dc60:	617b      	str	r3, [r7, #20]
        while (value != 0)
 800dc62:	e7aa      	b.n	800dbba <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x7e>
        if ((format.get_base() == 10U) && negative)
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	0018      	movs	r0, r3
 800dc68:	f7ff ff3e 	bl	800dae8 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 800dc6c:	0003      	movs	r3, r0
 800dc6e:	2b0a      	cmp	r3, #10
 800dc70:	d109      	bne.n	800dc86 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x14a>
 800dc72:	2334      	movs	r3, #52	; 0x34
 800dc74:	2208      	movs	r2, #8
 800dc76:	4694      	mov	ip, r2
 800dc78:	44bc      	add	ip, r7
 800dc7a:	4463      	add	r3, ip
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x14a>
 800dc82:	2301      	movs	r3, #1
 800dc84:	e000      	b.n	800dc88 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x14c>
 800dc86:	2300      	movs	r3, #0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d004      	beq.n	800dc96 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x15a>
          str.push_back(type('-'));
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	212d      	movs	r1, #45	; 0x2d
 800dc90:	0018      	movs	r0, r3
 800dc92:	f000 f856 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
        if (format.is_show_base())
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	0018      	movs	r0, r3
 800dc9a:	f7ff ff45 	bl	800db28 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE12is_show_baseEv>
 800dc9e:	1e03      	subs	r3, r0, #0
 800dca0:	d03b      	beq.n	800dd1a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1de>
          switch (format.get_base())
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	0018      	movs	r0, r3
 800dca6:	f7ff ff1f 	bl	800dae8 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_baseEv>
 800dcaa:	0003      	movs	r3, r0
 800dcac:	2b10      	cmp	r3, #16
 800dcae:	d01f      	beq.n	800dcf0 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1b4>
 800dcb0:	d832      	bhi.n	800dd18 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1dc>
 800dcb2:	2b02      	cmp	r3, #2
 800dcb4:	d002      	beq.n	800dcbc <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x180>
 800dcb6:	2b08      	cmp	r3, #8
 800dcb8:	d014      	beq.n	800dce4 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1a8>
              break;
 800dcba:	e02d      	b.n	800dd18 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1dc>
              str.push_back(format.is_upper_case() ? type('B') : type('b'));
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f7ff ff28 	bl	800db14 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 800dcc4:	1e03      	subs	r3, r0, #0
 800dcc6:	d001      	beq.n	800dccc <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x190>
 800dcc8:	2342      	movs	r3, #66	; 0x42
 800dcca:	e000      	b.n	800dcce <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x192>
 800dccc:	2362      	movs	r3, #98	; 0x62
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	0019      	movs	r1, r3
 800dcd2:	0010      	movs	r0, r2
 800dcd4:	f000 f835 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
              str.push_back(type('0'));
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2130      	movs	r1, #48	; 0x30
 800dcdc:	0018      	movs	r0, r3
 800dcde:	f000 f830 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 800dce2:	e01a      	b.n	800dd1a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1de>
              str.push_back(type('0'));
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2130      	movs	r1, #48	; 0x30
 800dce8:	0018      	movs	r0, r3
 800dcea:	f000 f82a 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 800dcee:	e014      	b.n	800dd1a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1de>
              str.push_back(format.is_upper_case() ? type('X') : type('x'));
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	f7ff ff0e 	bl	800db14 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE13is_upper_caseEv>
 800dcf8:	1e03      	subs	r3, r0, #0
 800dcfa:	d001      	beq.n	800dd00 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1c4>
 800dcfc:	2358      	movs	r3, #88	; 0x58
 800dcfe:	e000      	b.n	800dd02 <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1c6>
 800dd00:	2378      	movs	r3, #120	; 0x78
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	0019      	movs	r1, r3
 800dd06:	0010      	movs	r0, r2
 800dd08:	f000 f81b 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
              str.push_back(type('0'));
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2130      	movs	r1, #48	; 0x30
 800dd10:	0018      	movs	r0, r3
 800dd12:	f000 f816 	bl	800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>
              break;
 800dd16:	e000      	b.n	800dd1a <_ZN3etl17private_to_string12add_integralIyNS_13ibasic_stringIcEEEEvT_RT0_RKNS_17basic_format_specIS5_EEbb+0x1de>
              break;
 800dd18:	46c0      	nop			; (mov r8, r8)
        etl::reverse(start, str.end());
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	0018      	movs	r0, r3
 800dd1e:	f7ff fcea 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800dd22:	0002      	movs	r2, r0
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	0011      	movs	r1, r2
 800dd28:	0018      	movs	r0, r3
 800dd2a:	f000 f94d 	bl	800dfc8 <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_>
      etl::private_to_string::add_alignment(str, start, format);
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	0018      	movs	r0, r3
 800dd36:	f7ff fda3 	bl	800d880 <_ZN3etl17private_to_string13add_alignmentINS_13ibasic_stringIcEEEEvRT_NS4_8iteratorERKNS_17basic_format_specIS4_EE>
    }
 800dd3a:	46c0      	nop			; (mov r8, r8)
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	b00a      	add	sp, #40	; 0x28
 800dd40:	bdb0      	pop	{r4, r5, r7, pc}

0800dd42 <_ZN3etl13ibasic_stringIcE9push_backEc>:
    void push_back(T value)
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	000a      	movs	r2, r1
 800dd4c:	1cfb      	adds	r3, r7, #3
 800dd4e:	701a      	strb	r2, [r3, #0]
      if (current_size != CAPACITY)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d012      	beq.n	800dd82 <_ZN3etl13ibasic_stringIcE9push_backEc+0x40>
        p_buffer[current_size++] = value;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68d9      	ldr	r1, [r3, #12]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	1c58      	adds	r0, r3, #1
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	6010      	str	r0, [r2, #0]
 800dd6a:	18cb      	adds	r3, r1, r3
 800dd6c:	1cfa      	adds	r2, r7, #3
 800dd6e:	7812      	ldrb	r2, [r2, #0]
 800dd70:	701a      	strb	r2, [r3, #0]
        p_buffer[current_size]   = 0;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	18d3      	adds	r3, r2, r3
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	701a      	strb	r2, [r3, #0]
    }
 800dd80:	e004      	b.n	800dd8c <_ZN3etl13ibasic_stringIcE9push_backEc+0x4a>
        set_truncated(true);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2101      	movs	r1, #1
 800dd86:	0018      	movs	r0, r3
 800dd88:	f7fe fe5d 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
    }
 800dd8c:	46c0      	nop			; (mov r8, r8)
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	b002      	add	sp, #8
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <_ZN3etl8distanceIPcEENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  ETL_CONSTEXPR17 typename std::iterator_traits<TIterator>::difference_type distance(TIterator first, TIterator last)
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
    return std::distance(first, last);
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	0011      	movs	r1, r2
 800dda4:	0018      	movs	r0, r3
 800dda6:	f000 f8c9 	bl	800df3c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800ddaa:	0003      	movs	r3, r0
  }
 800ddac:	0018      	movs	r0, r3
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	b002      	add	sp, #8
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <_ZNK3etl17basic_format_specINS_13ibasic_stringIcEEE8get_fillEv>:
    ETL_CONSTEXPR typename TString::value_type get_fill() const
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
      return fill_;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	79db      	ldrb	r3, [r3, #7]
    }
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	b002      	add	sp, #8
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <_ZN3etl13ibasic_stringIcE6insertEPKcjc>:
    iterator insert(const_iterator position, size_type n, T value)
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b08d      	sub	sp, #52	; 0x34
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
 800ddd4:	001a      	movs	r2, r3
 800ddd6:	1cfb      	adds	r3, r7, #3
 800ddd8:	701a      	strb	r2, [r3, #0]
      iterator position_ = to_iterator(position);
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	0011      	movs	r1, r2
 800dde0:	0018      	movs	r0, r3
 800dde2:	f000 f8d6 	bl	800df92 <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 800dde6:	0003      	movs	r3, r0
 800dde8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (n == 0)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x2c>
        return position_;
 800ddf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf2:	e09f      	b.n	800df34 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x16c>
      iterator insert_position = to_iterator(position);
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	0011      	movs	r1, r2
 800ddfa:	0018      	movs	r0, r3
 800ddfc:	f000 f8c9 	bl	800df92 <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 800de00:	0003      	movs	r3, r0
 800de02:	62bb      	str	r3, [r7, #40]	; 0x28
      const size_type start = etl::distance(cbegin(), position);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	0018      	movs	r0, r3
 800de08:	f000 f900 	bl	800e00c <_ZNK3etl13ibasic_stringIcE6cbeginEv>
 800de0c:	0002      	movs	r2, r0
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	0019      	movs	r1, r3
 800de12:	0010      	movs	r0, r2
 800de14:	f7ff fa50 	bl	800d2b8 <_ZN3etl8distanceIPKcEENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 800de18:	0003      	movs	r3, r0
 800de1a:	627b      	str	r3, [r7, #36]	; 0x24
      if (start >= CAPACITY)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de22:	429a      	cmp	r2, r3
 800de24:	d30c      	bcc.n	800de40 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x78>
        set_truncated(true);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2101      	movs	r1, #1
 800de2a:	0018      	movs	r0, r3
 800de2c:	f7fe fe0b 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
        return to_iterator(position);;
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	0011      	movs	r1, r2
 800de36:	0018      	movs	r0, r3
 800de38:	f000 f8ab 	bl	800df92 <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>
 800de3c:	0003      	movs	r3, r0
 800de3e:	e079      	b.n	800df34 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x16c>
      if ((start + n) >= CAPACITY)
 800de40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	18d2      	adds	r2, r2, r3
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d31b      	bcc.n	800de86 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0xbe>
        if ((current_size + n) > CAPACITY)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	18d2      	adds	r2, r2, r3
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d904      	bls.n	800de68 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0xa0>
          set_truncated(true);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2101      	movs	r1, #1
 800de62:	0018      	movs	r0, r3
 800de64:	f7fe fdef 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
        current_size = CAPACITY;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	601a      	str	r2, [r3, #0]
        etl::fill(insert_position, end(), value);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	0018      	movs	r0, r3
 800de74:	f7ff fc3f 	bl	800d6f6 <_ZN3etl13ibasic_stringIcE3endEv>
 800de78:	0001      	movs	r1, r0
 800de7a:	1cfa      	adds	r2, r7, #3
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	0018      	movs	r0, r3
 800de80:	f7ff fa2a 	bl	800d2d8 <_ZN3etl4fillIPccEEvT_S2_RKT0_>
 800de84:	e04e      	b.n	800df24 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x15c>
        const size_type shift_amount = n;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	623b      	str	r3, [r7, #32]
        const size_type to_position = start + shift_amount;
 800de8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	18d3      	adds	r3, r2, r3
 800de90:	61fb      	str	r3, [r7, #28]
        const size_type remaining_characters = current_size - start;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	617b      	str	r3, [r7, #20]
        const size_type max_shift_characters = CAPACITY - start - shift_amount;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea2:	1ad2      	subs	r2, r2, r3
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	613b      	str	r3, [r7, #16]
        const size_type characters_to_shift = etl::min(max_shift_characters, remaining_characters);
 800deaa:	2314      	movs	r3, #20
 800deac:	18fa      	adds	r2, r7, r3
 800deae:	2310      	movs	r3, #16
 800deb0:	18fb      	adds	r3, r7, r3
 800deb2:	0011      	movs	r1, r2
 800deb4:	0018      	movs	r0, r3
 800deb6:	f7fe fde3 	bl	800ca80 <_ZN3etl3minIjEERKT_S3_S3_>
 800deba:	0003      	movs	r3, r0
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	61bb      	str	r3, [r7, #24]
        if ((start + shift_amount + remaining_characters) > CAPACITY)
 800dec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dec2:	6a3b      	ldr	r3, [r7, #32]
 800dec4:	18d2      	adds	r2, r2, r3
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	18d2      	adds	r2, r2, r3
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d909      	bls.n	800dee6 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x11e>
          current_size = CAPACITY;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	601a      	str	r2, [r3, #0]
          set_truncated(true);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2101      	movs	r1, #1
 800dede:	0018      	movs	r0, r3
 800dee0:	f7fe fdb1 	bl	800ca46 <_ZN3etl11string_base13set_truncatedEb>
 800dee4:	e005      	b.n	800def2 <_ZN3etl13ibasic_stringIcE6insertEPKcjc+0x12a>
          current_size += shift_amount;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	6a3b      	ldr	r3, [r7, #32]
 800deec:	18d2      	adds	r2, r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	601a      	str	r2, [r3, #0]
        etl::copy_backward(insert_position, insert_position + characters_to_shift, begin() + to_position + characters_to_shift);
 800def2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	18d4      	adds	r4, r2, r3
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	0018      	movs	r0, r3
 800defc:	f7ff fa28 	bl	800d350 <_ZN3etl13ibasic_stringIcE5beginEv>
 800df00:	0001      	movs	r1, r0
 800df02:	69fa      	ldr	r2, [r7, #28]
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	18d3      	adds	r3, r2, r3
 800df08:	18ca      	adds	r2, r1, r3
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	0021      	movs	r1, r4
 800df0e:	0018      	movs	r0, r3
 800df10:	f000 f849 	bl	800dfa6 <_ZN3etl13copy_backwardIPcS1_EET0_T_S3_S2_>
        etl::fill(insert_position, insert_position + shift_amount, value);
 800df14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df16:	6a3b      	ldr	r3, [r7, #32]
 800df18:	18d1      	adds	r1, r2, r3
 800df1a:	1cfa      	adds	r2, r7, #3
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	0018      	movs	r0, r3
 800df20:	f7ff f9da 	bl	800d2d8 <_ZN3etl4fillIPccEEvT_S2_RKT0_>
      p_buffer[current_size] = 0;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	68da      	ldr	r2, [r3, #12]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	18d3      	adds	r3, r2, r3
 800df2e:	2200      	movs	r2, #0
 800df30:	701a      	strb	r2, [r3, #0]
      return position_;
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800df34:	0018      	movs	r0, r3
 800df36:	46bd      	mov	sp, r7
 800df38:	b00d      	add	sp, #52	; 0x34
 800df3a:	bd90      	pop	{r4, r7, pc}

0800df3c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800df3c:	b5b0      	push	{r4, r5, r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800df46:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800df48:	1d3b      	adds	r3, r7, #4
 800df4a:	0018      	movs	r0, r3
 800df4c:	f000 f868 	bl	800e020 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	1c2a      	adds	r2, r5, #0
 800df54:	0019      	movs	r1, r3
 800df56:	0020      	movs	r0, r4
 800df58:	f000 f86a 	bl	800e030 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800df5c:	0003      	movs	r3, r0
    }
 800df5e:	0018      	movs	r0, r3
 800df60:	46bd      	mov	sp, r7
 800df62:	b004      	add	sp, #16
 800df64:	bdb0      	pop	{r4, r5, r7, pc}

0800df66 <_ZSt19__iterator_categoryIPVcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800df66:	b580      	push	{r7, lr}
 800df68:	b082      	sub	sp, #8
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800df6e:	1c18      	adds	r0, r3, #0
 800df70:	46bd      	mov	sp, r7
 800df72:	b002      	add	sp, #8
 800df74:	bd80      	pop	{r7, pc}

0800df76 <_ZSt10__distanceIPVcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	1d3b      	adds	r3, r7, #4
 800df82:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	1ad3      	subs	r3, r2, r3
    }
 800df8a:	0018      	movs	r0, r3
 800df8c:	46bd      	mov	sp, r7
 800df8e:	b004      	add	sp, #16
 800df90:	bd80      	pop	{r7, pc}

0800df92 <_ZNK3etl13ibasic_stringIcE11to_iteratorEPKc>:
  protected:

    //*************************************************************************
    /// Convert from const_iterator to iterator
    //*************************************************************************
    iterator to_iterator(const_iterator itr) const
 800df92:	b580      	push	{r7, lr}
 800df94:	b082      	sub	sp, #8
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
    {
      return const_cast<iterator>(itr);
 800df9c:	683b      	ldr	r3, [r7, #0]
    }
 800df9e:	0018      	movs	r0, r3
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	b002      	add	sp, #8
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <_ZN3etl13copy_backwardIPcS1_EET0_T_S3_S2_>:
  TIterator2 copy_backward(TIterator1 sb, TIterator1 se, TIterator2 de)
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b084      	sub	sp, #16
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	60f8      	str	r0, [r7, #12]
 800dfae:	60b9      	str	r1, [r7, #8]
 800dfb0:	607a      	str	r2, [r7, #4]
    return std::copy_backward(sb, se, de);
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	68b9      	ldr	r1, [r7, #8]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	0018      	movs	r0, r3
 800dfba:	f000 f847 	bl	800e04c <_ZSt13copy_backwardIPcS0_ET0_T_S2_S1_>
 800dfbe:	0003      	movs	r3, r0
  }
 800dfc0:	0018      	movs	r0, r3
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	b004      	add	sp, #16
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_>:
    reverse(TIterator b, TIterator e)
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
    if (b != e)
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d014      	beq.n	800e004 <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_+0x3c>
      while (b < --e)
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	603b      	str	r3, [r7, #0]
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	419b      	sbcs	r3, r3
 800dfe8:	425b      	negs	r3, r3
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d009      	beq.n	800e004 <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_+0x3c>
        etl::iter_swap(b, e);
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	0011      	movs	r1, r2
 800dff6:	0018      	movs	r0, r3
 800dff8:	f000 f842 	bl	800e080 <_ZN3etl9iter_swapIPcS1_EEvT_T0_>
        ++b;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3301      	adds	r3, #1
 800e000:	607b      	str	r3, [r7, #4]
      while (b < --e)
 800e002:	e7ea      	b.n	800dfda <_ZN3etl7reverseIPcEENS_9enable_ifIXsrNS_10is_pointerIT_EE5valueEvE4typeES4_S4_+0x12>
  }
 800e004:	46c0      	nop			; (mov r8, r8)
 800e006:	46bd      	mov	sp, r7
 800e008:	b002      	add	sp, #8
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <_ZNK3etl13ibasic_stringIcE6cbeginEv>:
    const_iterator cbegin() const
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
      return &p_buffer[0];
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	68db      	ldr	r3, [r3, #12]
    }
 800e018:	0018      	movs	r0, r3
 800e01a:	46bd      	mov	sp, r7
 800e01c:	b002      	add	sp, #8
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e028:	1c18      	adds	r0, r3, #0
 800e02a:	46bd      	mov	sp, r7
 800e02c:	b002      	add	sp, #8
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	1d3b      	adds	r3, r7, #4
 800e03c:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	1ad3      	subs	r3, r2, r3
    }
 800e044:	0018      	movs	r0, r3
 800e046:	46bd      	mov	sp, r7
 800e048:	b004      	add	sp, #16
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <_ZSt13copy_backwardIPcS0_ET0_T_S2_S1_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e04c:	b590      	push	{r4, r7, lr}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	0018      	movs	r0, r3
 800e05c:	f000 f829 	bl	800e0b2 <_ZSt12__miter_baseIPcET_S1_>
 800e060:	0004      	movs	r4, r0
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	0018      	movs	r0, r3
 800e066:	f000 f824 	bl	800e0b2 <_ZSt12__miter_baseIPcET_S1_>
 800e06a:	0001      	movs	r1, r0
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	001a      	movs	r2, r3
 800e070:	0020      	movs	r0, r4
 800e072:	f000 f827 	bl	800e0c4 <_ZSt23__copy_move_backward_a2ILb0EPcS0_ET1_T0_S2_S1_>
 800e076:	0003      	movs	r3, r0
    }
 800e078:	0018      	movs	r0, r3
 800e07a:	46bd      	mov	sp, r7
 800e07c:	b005      	add	sp, #20
 800e07e:	bd90      	pop	{r4, r7, pc}

0800e080 <_ZN3etl9iter_swapIPcS1_EEvT_T0_>:
  void iter_swap(TIterator1 a, TIterator2 b)
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
    swap(*a, *b);
 800e08a:	683a      	ldr	r2, [r7, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	0011      	movs	r1, r2
 800e090:	0018      	movs	r0, r3
 800e092:	f000 f845 	bl	800e120 <_ZSt4swapIcENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
  }
 800e096:	46c0      	nop			; (mov r8, r8)
 800e098:	46bd      	mov	sp, r7
 800e09a:	b002      	add	sp, #8
 800e09c:	bd80      	pop	{r7, pc}

0800e09e <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b082      	sub	sp, #8
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
 800e0a6:	6039      	str	r1, [r7, #0]
    { return __res; }
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	0018      	movs	r0, r3
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	b002      	add	sp, #8
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <_ZSt12__miter_baseIPcET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	0018      	movs	r0, r3
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	b002      	add	sp, #8
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <_ZSt23__copy_move_backward_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800e0c4:	b5b0      	push	{r4, r5, r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	0018      	movs	r0, r3
 800e0d4:	f7ff fadd 	bl	800d692 <_ZSt12__niter_baseIPcET_S1_>
 800e0d8:	0004      	movs	r4, r0
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	0018      	movs	r0, r3
 800e0de:	f7ff fad8 	bl	800d692 <_ZSt12__niter_baseIPcET_S1_>
 800e0e2:	0005      	movs	r5, r0
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	0018      	movs	r0, r3
 800e0e8:	f7ff fad3 	bl	800d692 <_ZSt12__niter_baseIPcET_S1_>
 800e0ec:	0003      	movs	r3, r0
 800e0ee:	001a      	movs	r2, r3
 800e0f0:	0029      	movs	r1, r5
 800e0f2:	0020      	movs	r0, r4
 800e0f4:	f000 f836 	bl	800e164 <_ZSt22__copy_move_backward_aILb0EPcS0_ET1_T0_S2_S1_>
 800e0f8:	0002      	movs	r2, r0
 800e0fa:	1d3b      	adds	r3, r7, #4
 800e0fc:	0011      	movs	r1, r2
 800e0fe:	0018      	movs	r0, r3
 800e100:	f7ff ffcd 	bl	800e09e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800e104:	0003      	movs	r3, r0
    }
 800e106:	0018      	movs	r0, r3
 800e108:	46bd      	mov	sp, r7
 800e10a:	b004      	add	sp, #16
 800e10c:	bdb0      	pop	{r4, r5, r7, pc}

0800e10e <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800e10e:	b580      	push	{r7, lr}
 800e110:	b082      	sub	sp, #8
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	0018      	movs	r0, r3
 800e11a:	46bd      	mov	sp, r7
 800e11c:	b002      	add	sp, #8
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <_ZSt4swapIcENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800e120:	b590      	push	{r4, r7, lr}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	0018      	movs	r0, r3
 800e12e:	f7ff ffee 	bl	800e10e <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800e132:	0003      	movs	r3, r0
 800e134:	781a      	ldrb	r2, [r3, #0]
 800e136:	240f      	movs	r4, #15
 800e138:	193b      	adds	r3, r7, r4
 800e13a:	701a      	strb	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	0018      	movs	r0, r3
 800e140:	f7ff ffe5 	bl	800e10e <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800e144:	0003      	movs	r3, r0
 800e146:	781a      	ldrb	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800e14c:	193b      	adds	r3, r7, r4
 800e14e:	0018      	movs	r0, r3
 800e150:	f7ff ffdd 	bl	800e10e <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800e154:	0003      	movs	r3, r0
 800e156:	781a      	ldrb	r2, [r3, #0]
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	701a      	strb	r2, [r3, #0]
    }
 800e15c:	46c0      	nop			; (mov r8, r8)
 800e15e:	46bd      	mov	sp, r7
 800e160:	b005      	add	sp, #20
 800e162:	bd90      	pop	{r4, r7, pc}

0800e164 <_ZSt22__copy_move_backward_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 800e170:	2317      	movs	r3, #23
 800e172:	18fb      	adds	r3, r7, r3
 800e174:	2201      	movs	r2, #1
 800e176:	701a      	strb	r2, [r3, #0]
				       _Category>::__copy_move_b(__first,
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	0018      	movs	r0, r3
 800e180:	f000 f805 	bl	800e18e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 800e184:	0003      	movs	r3, r0
    }
 800e186:	0018      	movs	r0, r3
 800e188:	46bd      	mov	sp, r7
 800e18a:	b006      	add	sp, #24
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800e18e:	b580      	push	{r7, lr}
 800e190:	b086      	sub	sp, #24
 800e192:	af00      	add	r7, sp, #0
 800e194:	60f8      	str	r0, [r7, #12]
 800e196:	60b9      	str	r1, [r7, #8]
 800e198:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d008      	beq.n	800e1ba <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	425b      	negs	r3, r3
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	18d3      	adds	r3, r2, r3
 800e1b0:	697a      	ldr	r2, [r7, #20]
 800e1b2:	68f9      	ldr	r1, [r7, #12]
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	f004 f87e 	bl	80122b6 <memmove>
	  return __result - _Num;
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	425b      	negs	r3, r3
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	18d3      	adds	r3, r2, r3
	}
 800e1c2:	0018      	movs	r0, r3
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	b006      	add	sp, #24
 800e1c8:	bd80      	pop	{r7, pc}
	...

0800e1cc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1d2:	f3ef 8305 	mrs	r3, IPSR
 800e1d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d109      	bne.n	800e1f2 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1de:	f3ef 8310 	mrs	r3, PRIMASK
 800e1e2:	607b      	str	r3, [r7, #4]
  return(result);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d007      	beq.n	800e1fa <osKernelInitialize+0x2e>
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <osKernelInitialize+0x54>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d103      	bne.n	800e1fa <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800e1f2:	2306      	movs	r3, #6
 800e1f4:	425b      	negs	r3, r3
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	e00c      	b.n	800e214 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e1fa:	4b09      	ldr	r3, [pc, #36]	; (800e220 <osKernelInitialize+0x54>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d105      	bne.n	800e20e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800e202:	4b07      	ldr	r3, [pc, #28]	; (800e220 <osKernelInitialize+0x54>)
 800e204:	2201      	movs	r2, #1
 800e206:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e208:	2300      	movs	r3, #0
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	e002      	b.n	800e214 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800e20e:	2301      	movs	r3, #1
 800e210:	425b      	negs	r3, r3
 800e212:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e214:	68fb      	ldr	r3, [r7, #12]
}
 800e216:	0018      	movs	r0, r3
 800e218:	46bd      	mov	sp, r7
 800e21a:	b004      	add	sp, #16
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	46c0      	nop			; (mov r8, r8)
 800e220:	200013f8 	.word	0x200013f8

0800e224 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e22a:	f3ef 8305 	mrs	r3, IPSR
 800e22e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e230:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e236:	f3ef 8310 	mrs	r3, PRIMASK
 800e23a:	607b      	str	r3, [r7, #4]
  return(result);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d007      	beq.n	800e252 <osKernelStart+0x2e>
 800e242:	4b0e      	ldr	r3, [pc, #56]	; (800e27c <osKernelStart+0x58>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b02      	cmp	r3, #2
 800e248:	d103      	bne.n	800e252 <osKernelStart+0x2e>
    stat = osErrorISR;
 800e24a:	2306      	movs	r3, #6
 800e24c:	425b      	negs	r3, r3
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	e00e      	b.n	800e270 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e252:	4b0a      	ldr	r3, [pc, #40]	; (800e27c <osKernelStart+0x58>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b01      	cmp	r3, #1
 800e258:	d107      	bne.n	800e26a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800e25a:	4b08      	ldr	r3, [pc, #32]	; (800e27c <osKernelStart+0x58>)
 800e25c:	2202      	movs	r2, #2
 800e25e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800e260:	f002 f93c 	bl	80104dc <vTaskStartScheduler>
      stat = osOK;
 800e264:	2300      	movs	r3, #0
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	e002      	b.n	800e270 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800e26a:	2301      	movs	r3, #1
 800e26c:	425b      	negs	r3, r3
 800e26e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e270:	68fb      	ldr	r3, [r7, #12]
}
 800e272:	0018      	movs	r0, r3
 800e274:	46bd      	mov	sp, r7
 800e276:	b004      	add	sp, #16
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	46c0      	nop			; (mov r8, r8)
 800e27c:	200013f8 	.word	0x200013f8

0800e280 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e286:	f3ef 8305 	mrs	r3, IPSR
 800e28a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e28c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d109      	bne.n	800e2a6 <osKernelGetTickCount+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e292:	f3ef 8310 	mrs	r3, PRIMASK
 800e296:	607b      	str	r3, [r7, #4]
  return(result);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d008      	beq.n	800e2b0 <osKernelGetTickCount+0x30>
 800e29e:	4b09      	ldr	r3, [pc, #36]	; (800e2c4 <osKernelGetTickCount+0x44>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d104      	bne.n	800e2b0 <osKernelGetTickCount+0x30>
    ticks = xTaskGetTickCountFromISR();
 800e2a6:	f002 fa1d 	bl	80106e4 <xTaskGetTickCountFromISR>
 800e2aa:	0003      	movs	r3, r0
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	e003      	b.n	800e2b8 <osKernelGetTickCount+0x38>
  } else {
    ticks = xTaskGetTickCount();
 800e2b0:	f002 fa0a 	bl	80106c8 <xTaskGetTickCount>
 800e2b4:	0003      	movs	r3, r0
 800e2b6:	60fb      	str	r3, [r7, #12]
  }

  return (ticks);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
}
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	b004      	add	sp, #16
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	46c0      	nop			; (mov r8, r8)
 800e2c4:	200013f8 	.word	0x200013f8

0800e2c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e2c8:	b5b0      	push	{r4, r5, r7, lr}
 800e2ca:	b090      	sub	sp, #64	; 0x40
 800e2cc:	af04      	add	r7, sp, #16
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2d8:	f3ef 8305 	mrs	r3, IPSR
 800e2dc:	61fb      	str	r3, [r7, #28]
  return(result);
 800e2de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d000      	beq.n	800e2e6 <osThreadNew+0x1e>
 800e2e4:	e090      	b.n	800e408 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e2ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d004      	beq.n	800e2fc <osThreadNew+0x34>
 800e2f2:	4b48      	ldr	r3, [pc, #288]	; (800e414 <osThreadNew+0x14c>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	d100      	bne.n	800e2fc <osThreadNew+0x34>
 800e2fa:	e085      	b.n	800e408 <osThreadNew+0x140>
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d100      	bne.n	800e304 <osThreadNew+0x3c>
 800e302:	e081      	b.n	800e408 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800e304:	2380      	movs	r3, #128	; 0x80
 800e306:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e308:	2318      	movs	r3, #24
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800e30c:	2117      	movs	r1, #23
 800e30e:	187b      	adds	r3, r7, r1
 800e310:	2200      	movs	r2, #0
 800e312:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800e314:	187b      	adds	r3, r7, r1
 800e316:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800e318:	2301      	movs	r3, #1
 800e31a:	425b      	negs	r3, r3
 800e31c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d044      	beq.n	800e3ae <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <osThreadNew+0x6a>
        name = attr->name;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	699b      	ldr	r3, [r3, #24]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d002      	beq.n	800e340 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	699b      	ldr	r3, [r3, #24]
 800e33e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	2b00      	cmp	r3, #0
 800e344:	d007      	beq.n	800e356 <osThreadNew+0x8e>
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	2b38      	cmp	r3, #56	; 0x38
 800e34a:	d804      	bhi.n	800e356 <osThreadNew+0x8e>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	2201      	movs	r2, #1
 800e352:	4013      	ands	r3, r2
 800e354:	d001      	beq.n	800e35a <osThreadNew+0x92>
        return (NULL);
 800e356:	2300      	movs	r3, #0
 800e358:	e057      	b.n	800e40a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	695b      	ldr	r3, [r3, #20]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	089b      	lsrs	r3, r3, #2
 800e368:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00e      	beq.n	800e390 <osThreadNew+0xc8>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	2bbb      	cmp	r3, #187	; 0xbb
 800e378:	d90a      	bls.n	800e390 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d006      	beq.n	800e390 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	695b      	ldr	r3, [r3, #20]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <osThreadNew+0xc8>
        mem = 1;
 800e38a:	2301      	movs	r3, #1
 800e38c:	623b      	str	r3, [r7, #32]
 800e38e:	e010      	b.n	800e3b2 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10c      	bne.n	800e3b2 <osThreadNew+0xea>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d108      	bne.n	800e3b2 <osThreadNew+0xea>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d104      	bne.n	800e3b2 <osThreadNew+0xea>
          mem = 0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	623b      	str	r3, [r7, #32]
 800e3ac:	e001      	b.n	800e3b2 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d112      	bne.n	800e3de <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e3c0:	68bd      	ldr	r5, [r7, #8]
 800e3c2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e3c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	9302      	str	r3, [sp, #8]
 800e3ca:	9201      	str	r2, [sp, #4]
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	002b      	movs	r3, r5
 800e3d2:	0022      	movs	r2, r4
 800e3d4:	f001 fecd 	bl	8010172 <xTaskCreateStatic>
 800e3d8:	0003      	movs	r3, r0
 800e3da:	613b      	str	r3, [r7, #16]
 800e3dc:	e014      	b.n	800e408 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d111      	bne.n	800e408 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	68bc      	ldr	r4, [r7, #8]
 800e3ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3ec:	68f8      	ldr	r0, [r7, #12]
 800e3ee:	2310      	movs	r3, #16
 800e3f0:	18fb      	adds	r3, r7, r3
 800e3f2:	9301      	str	r3, [sp, #4]
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	9300      	str	r3, [sp, #0]
 800e3f8:	0023      	movs	r3, r4
 800e3fa:	f001 fefd 	bl	80101f8 <xTaskCreate>
 800e3fe:	0003      	movs	r3, r0
 800e400:	2b01      	cmp	r3, #1
 800e402:	d001      	beq.n	800e408 <osThreadNew+0x140>
          hTask = NULL;
 800e404:	2300      	movs	r3, #0
 800e406:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e408:	693b      	ldr	r3, [r7, #16]
}
 800e40a:	0018      	movs	r0, r3
 800e40c:	46bd      	mov	sp, r7
 800e40e:	b00c      	add	sp, #48	; 0x30
 800e410:	bdb0      	pop	{r4, r5, r7, pc}
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	200013f8 	.word	0x200013f8

0800e418 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e420:	f3ef 8305 	mrs	r3, IPSR
 800e424:	613b      	str	r3, [r7, #16]
  return(result);
 800e426:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d109      	bne.n	800e440 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e42c:	f3ef 8310 	mrs	r3, PRIMASK
 800e430:	60fb      	str	r3, [r7, #12]
  return(result);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d007      	beq.n	800e448 <osDelay+0x30>
 800e438:	4b0a      	ldr	r3, [pc, #40]	; (800e464 <osDelay+0x4c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	d103      	bne.n	800e448 <osDelay+0x30>
    stat = osErrorISR;
 800e440:	2306      	movs	r3, #6
 800e442:	425b      	negs	r3, r3
 800e444:	617b      	str	r3, [r7, #20]
 800e446:	e008      	b.n	800e45a <osDelay+0x42>
  }
  else {
    stat = osOK;
 800e448:	2300      	movs	r3, #0
 800e44a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <osDelay+0x42>
      vTaskDelay(ticks);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	0018      	movs	r0, r3
 800e456:	f002 f81b 	bl	8010490 <vTaskDelay>
    }
  }

  return (stat);
 800e45a:	697b      	ldr	r3, [r7, #20]
}
 800e45c:	0018      	movs	r0, r3
 800e45e:	46bd      	mov	sp, r7
 800e460:	b006      	add	sp, #24
 800e462:	bd80      	pop	{r7, pc}
 800e464:	200013f8 	.word	0x200013f8

0800e468 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	0018      	movs	r0, r3
 800e474:	f003 f9f2 	bl	801185c <pvTimerGetTimerID>
 800e478:	0003      	movs	r3, r0
 800e47a:	60fb      	str	r3, [r7, #12]

  if (callb != NULL) {
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d005      	beq.n	800e48e <TimerCallback+0x26>
    callb->func (callb->arg);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	0018      	movs	r0, r3
 800e48c:	4790      	blx	r2
  }
}
 800e48e:	46c0      	nop			; (mov r8, r8)
 800e490:	46bd      	mov	sp, r7
 800e492:	b004      	add	sp, #16
 800e494:	bd80      	pop	{r7, pc}
	...

0800e498 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e498:	b580      	push	{r7, lr}
 800e49a:	b08e      	sub	sp, #56	; 0x38
 800e49c:	af02      	add	r7, sp, #8
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	607a      	str	r2, [r7, #4]
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	230b      	movs	r3, #11
 800e4a6:	18fb      	adds	r3, r7, r3
 800e4a8:	1c0a      	adds	r2, r1, #0
 800e4aa:	701a      	strb	r2, [r3, #0]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4b0:	f3ef 8305 	mrs	r3, IPSR
 800e4b4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e4b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d000      	beq.n	800e4be <osTimerNew+0x26>
 800e4bc:	e06b      	b.n	800e596 <osTimerNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4be:	f3ef 8310 	mrs	r3, PRIMASK
 800e4c2:	617b      	str	r3, [r7, #20]
  return(result);
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <osTimerNew+0x3a>
 800e4ca:	4b35      	ldr	r3, [pc, #212]	; (800e5a0 <osTimerNew+0x108>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d061      	beq.n	800e596 <osTimerNew+0xfe>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d05e      	beq.n	800e596 <osTimerNew+0xfe>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e4d8:	2008      	movs	r0, #8
 800e4da:	f003 fb31 	bl	8011b40 <pvPortMalloc>
 800e4de:	0003      	movs	r3, r0
 800e4e0:	61fb      	str	r3, [r7, #28]

    if (callb != NULL) {
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d056      	beq.n	800e596 <osTimerNew+0xfe>
      callb->func = func;
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e4f4:	230b      	movs	r3, #11
 800e4f6:	18fb      	adds	r3, r7, r3
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d102      	bne.n	800e504 <osTimerNew+0x6c>
        reload = pdFALSE;
 800e4fe:	2300      	movs	r3, #0
 800e500:	627b      	str	r3, [r7, #36]	; 0x24
 800e502:	e001      	b.n	800e508 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800e504:	2301      	movs	r3, #1
 800e506:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800e508:	2301      	movs	r3, #1
 800e50a:	425b      	negs	r3, r3
 800e50c:	623b      	str	r3, [r7, #32]
      name = NULL;
 800e50e:	2300      	movs	r3, #0
 800e510:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d01c      	beq.n	800e552 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <osTimerNew+0x8e>
          name = attr->name;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d006      	beq.n	800e53c <osTimerNew+0xa4>
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	2b2f      	cmp	r3, #47	; 0x2f
 800e534:	d902      	bls.n	800e53c <osTimerNew+0xa4>
          mem = 1;
 800e536:	2301      	movs	r3, #1
 800e538:	623b      	str	r3, [r7, #32]
 800e53a:	e00c      	b.n	800e556 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d108      	bne.n	800e556 <osTimerNew+0xbe>
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d104      	bne.n	800e556 <osTimerNew+0xbe>
            mem = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	623b      	str	r3, [r7, #32]
 800e550:	e001      	b.n	800e556 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d10e      	bne.n	800e57a <osTimerNew+0xe2>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	69f9      	ldr	r1, [r7, #28]
 800e562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e566:	9301      	str	r3, [sp, #4]
 800e568:	4b0e      	ldr	r3, [pc, #56]	; (800e5a4 <osTimerNew+0x10c>)
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	000b      	movs	r3, r1
 800e56e:	2101      	movs	r1, #1
 800e570:	f002 fe8d 	bl	801128e <xTimerCreateStatic>
 800e574:	0003      	movs	r3, r0
 800e576:	62bb      	str	r3, [r7, #40]	; 0x28
 800e578:	e00d      	b.n	800e596 <osTimerNew+0xfe>
      }
      else {
        if (mem == 0) {
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10a      	bne.n	800e596 <osTimerNew+0xfe>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e580:	69f9      	ldr	r1, [r7, #28]
 800e582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e586:	4b07      	ldr	r3, [pc, #28]	; (800e5a4 <osTimerNew+0x10c>)
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	000b      	movs	r3, r1
 800e58c:	2101      	movs	r1, #1
 800e58e:	f002 fe5b 	bl	8011248 <xTimerCreate>
 800e592:	0003      	movs	r3, r0
 800e594:	62bb      	str	r3, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e596:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e598:	0018      	movs	r0, r3
 800e59a:	46bd      	mov	sp, r7
 800e59c:	b00c      	add	sp, #48	; 0x30
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	200013f8 	.word	0x200013f8
 800e5a4:	0800e469 	.word	0x0800e469

0800e5a8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b088      	sub	sp, #32
 800e5ac:	af02      	add	r7, sp, #8
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5b6:	f3ef 8305 	mrs	r3, IPSR
 800e5ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d109      	bne.n	800e5d6 <osTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d007      	beq.n	800e5de <osTimerStart+0x36>
 800e5ce:	4b12      	ldr	r3, [pc, #72]	; (800e618 <osTimerStart+0x70>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d103      	bne.n	800e5de <osTimerStart+0x36>
    stat = osErrorISR;
 800e5d6:	2306      	movs	r3, #6
 800e5d8:	425b      	negs	r3, r3
 800e5da:	617b      	str	r3, [r7, #20]
 800e5dc:	e017      	b.n	800e60e <osTimerStart+0x66>
  }
  else if (hTimer == NULL) {
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d103      	bne.n	800e5ec <osTimerStart+0x44>
    stat = osErrorParameter;
 800e5e4:	2304      	movs	r3, #4
 800e5e6:	425b      	negs	r3, r3
 800e5e8:	617b      	str	r3, [r7, #20]
 800e5ea:	e010      	b.n	800e60e <osTimerStart+0x66>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	6938      	ldr	r0, [r7, #16]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9300      	str	r3, [sp, #0]
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2104      	movs	r1, #4
 800e5f8:	f002 fe9e 	bl	8011338 <xTimerGenericCommand>
 800e5fc:	0003      	movs	r3, r0
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d102      	bne.n	800e608 <osTimerStart+0x60>
      stat = osOK;
 800e602:	2300      	movs	r3, #0
 800e604:	617b      	str	r3, [r7, #20]
 800e606:	e002      	b.n	800e60e <osTimerStart+0x66>
    } else {
      stat = osErrorResource;
 800e608:	2303      	movs	r3, #3
 800e60a:	425b      	negs	r3, r3
 800e60c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e60e:	697b      	ldr	r3, [r7, #20]
}
 800e610:	0018      	movs	r0, r3
 800e612:	46bd      	mov	sp, r7
 800e614:	b006      	add	sp, #24
 800e616:	bd80      	pop	{r7, pc}
 800e618:	200013f8 	.word	0x200013f8

0800e61c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800e624:	2300      	movs	r3, #0
 800e626:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e628:	f3ef 8305 	mrs	r3, IPSR
 800e62c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e62e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800e630:	2b00      	cmp	r3, #0
 800e632:	d139      	bne.n	800e6a8 <osEventFlagsNew+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e634:	f3ef 8310 	mrs	r3, PRIMASK
 800e638:	60bb      	str	r3, [r7, #8]
  return(result);
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d003      	beq.n	800e648 <osEventFlagsNew+0x2c>
 800e640:	4b1c      	ldr	r3, [pc, #112]	; (800e6b4 <osEventFlagsNew+0x98>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b02      	cmp	r3, #2
 800e646:	d02f      	beq.n	800e6a8 <osEventFlagsNew+0x8c>
    mem = -1;
 800e648:	2301      	movs	r3, #1
 800e64a:	425b      	negs	r3, r3
 800e64c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d015      	beq.n	800e680 <osEventFlagsNew+0x64>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d006      	beq.n	800e66a <osEventFlagsNew+0x4e>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	2b1f      	cmp	r3, #31
 800e662:	d902      	bls.n	800e66a <osEventFlagsNew+0x4e>
        mem = 1;
 800e664:	2301      	movs	r3, #1
 800e666:	613b      	str	r3, [r7, #16]
 800e668:	e00c      	b.n	800e684 <osEventFlagsNew+0x68>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d108      	bne.n	800e684 <osEventFlagsNew+0x68>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d104      	bne.n	800e684 <osEventFlagsNew+0x68>
          mem = 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	613b      	str	r3, [r7, #16]
 800e67e:	e001      	b.n	800e684 <osEventFlagsNew+0x68>
        }
      }
    }
    else {
      mem = 0;
 800e680:	2300      	movs	r3, #0
 800e682:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d107      	bne.n	800e69a <osEventFlagsNew+0x7e>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	0018      	movs	r0, r3
 800e690:	f000 fc26 	bl	800eee0 <xEventGroupCreateStatic>
 800e694:	0003      	movs	r3, r0
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e006      	b.n	800e6a8 <osEventFlagsNew+0x8c>
    }
    else {
      if (mem == 0) {
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d103      	bne.n	800e6a8 <osEventFlagsNew+0x8c>
        hEventGroup = xEventGroupCreate();
 800e6a0:	f000 fc43 	bl	800ef2a <xEventGroupCreate>
 800e6a4:	0003      	movs	r3, r0
 800e6a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800e6a8:	697b      	ldr	r3, [r7, #20]
}
 800e6aa:	0018      	movs	r0, r3
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	b006      	add	sp, #24
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	46c0      	nop			; (mov r8, r8)
 800e6b4:	200013f8 	.word	0x200013f8

0800e6b8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b088      	sub	sp, #32
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d003      	beq.n	800e6d4 <osEventFlagsSet+0x1c>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	0e1b      	lsrs	r3, r3, #24
 800e6d0:	061b      	lsls	r3, r3, #24
 800e6d2:	d003      	beq.n	800e6dc <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800e6d4:	2304      	movs	r3, #4
 800e6d6:	425b      	negs	r3, r3
 800e6d8:	61fb      	str	r3, [r7, #28]
 800e6da:	e032      	b.n	800e742 <osEventFlagsSet+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6dc:	f3ef 8305 	mrs	r3, IPSR
 800e6e0:	617b      	str	r3, [r7, #20]
  return(result);
 800e6e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d109      	bne.n	800e6fc <osEventFlagsSet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6e8:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ec:	613b      	str	r3, [r7, #16]
  return(result);
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d01c      	beq.n	800e72e <osEventFlagsSet+0x76>
 800e6f4:	4b15      	ldr	r3, [pc, #84]	; (800e74c <osEventFlagsSet+0x94>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d118      	bne.n	800e72e <osEventFlagsSet+0x76>
    yield = pdFALSE;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	60fb      	str	r3, [r7, #12]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800e700:	230c      	movs	r3, #12
 800e702:	18fa      	adds	r2, r7, r3
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	0018      	movs	r0, r3
 800e70a:	f000 fda5 	bl	800f258 <xEventGroupSetBitsFromISR>
 800e70e:	1e03      	subs	r3, r0, #0
 800e710:	d003      	beq.n	800e71a <osEventFlagsSet+0x62>
      rflags = (uint32_t)osErrorResource;
 800e712:	2303      	movs	r3, #3
 800e714:	425b      	negs	r3, r3
 800e716:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800e718:	e012      	b.n	800e740 <osEventFlagsSet+0x88>
    } else {
      rflags = flags;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00d      	beq.n	800e740 <osEventFlagsSet+0x88>
 800e724:	4b0a      	ldr	r3, [pc, #40]	; (800e750 <osEventFlagsSet+0x98>)
 800e726:	2280      	movs	r2, #128	; 0x80
 800e728:	0552      	lsls	r2, r2, #21
 800e72a:	601a      	str	r2, [r3, #0]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800e72c:	e008      	b.n	800e740 <osEventFlagsSet+0x88>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	0011      	movs	r1, r2
 800e734:	0018      	movs	r0, r3
 800e736:	f000 fcb9 	bl	800f0ac <xEventGroupSetBits>
 800e73a:	0003      	movs	r3, r0
 800e73c:	61fb      	str	r3, [r7, #28]
 800e73e:	e000      	b.n	800e742 <osEventFlagsSet+0x8a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800e740:	46c0      	nop			; (mov r8, r8)
  }

  return (rflags);
 800e742:	69fb      	ldr	r3, [r7, #28]
}
 800e744:	0018      	movs	r0, r3
 800e746:	46bd      	mov	sp, r7
 800e748:	b008      	add	sp, #32
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	200013f8 	.word	0x200013f8
 800e750:	e000ed04 	.word	0xe000ed04

0800e754 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800e754:	b590      	push	{r4, r7, lr}
 800e756:	b08d      	sub	sp, #52	; 0x34
 800e758:	af02      	add	r7, sp, #8
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
 800e760:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <osEventFlagsWait+0x20>
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	0e1b      	lsrs	r3, r3, #24
 800e770:	061b      	lsls	r3, r3, #24
 800e772:	d003      	beq.n	800e77c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800e774:	2304      	movs	r3, #4
 800e776:	425b      	negs	r3, r3
 800e778:	61fb      	str	r3, [r7, #28]
 800e77a:	e051      	b.n	800e820 <osEventFlagsWait+0xcc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e77c:	f3ef 8305 	mrs	r3, IPSR
 800e780:	617b      	str	r3, [r7, #20]
  return(result);
 800e782:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e784:	2b00      	cmp	r3, #0
 800e786:	d109      	bne.n	800e79c <osEventFlagsWait+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e788:	f3ef 8310 	mrs	r3, PRIMASK
 800e78c:	613b      	str	r3, [r7, #16]
  return(result);
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d007      	beq.n	800e7a4 <osEventFlagsWait+0x50>
 800e794:	4b25      	ldr	r3, [pc, #148]	; (800e82c <osEventFlagsWait+0xd8>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b02      	cmp	r3, #2
 800e79a:	d103      	bne.n	800e7a4 <osEventFlagsWait+0x50>
    rflags = (uint32_t)osErrorISR;
 800e79c:	2306      	movs	r3, #6
 800e79e:	425b      	negs	r3, r3
 800e7a0:	61fb      	str	r3, [r7, #28]
 800e7a2:	e03d      	b.n	800e820 <osEventFlagsWait+0xcc>
  }
  else {
    if (options & osFlagsWaitAll) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	d002      	beq.n	800e7b2 <osEventFlagsWait+0x5e>
      wait_all = pdTRUE;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e7b0:	e001      	b.n	800e7b6 <osEventFlagsWait+0x62>
    } else {
      wait_all = pdFAIL;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	d002      	beq.n	800e7c4 <osEventFlagsWait+0x70>
      exit_clr = pdFAIL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	623b      	str	r3, [r7, #32]
 800e7c2:	e001      	b.n	800e7c8 <osEventFlagsWait+0x74>
    } else {
      exit_clr = pdTRUE;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800e7c8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e7ca:	6a3a      	ldr	r2, [r7, #32]
 800e7cc:	68b9      	ldr	r1, [r7, #8]
 800e7ce:	69b8      	ldr	r0, [r7, #24]
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	0023      	movs	r3, r4
 800e7d6:	f000 fbc3 	bl	800ef60 <xEventGroupWaitBits>
 800e7da:	0003      	movs	r3, r0
 800e7dc:	61fb      	str	r3, [r7, #28]

    if (options & osFlagsWaitAll) {
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	d00e      	beq.n	800e804 <osEventFlagsWait+0xb0>
      if (flags != rflags) {
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d018      	beq.n	800e820 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d003      	beq.n	800e7fc <osEventFlagsWait+0xa8>
          rflags = (uint32_t)osErrorTimeout;
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	425b      	negs	r3, r3
 800e7f8:	61fb      	str	r3, [r7, #28]
 800e7fa:	e011      	b.n	800e820 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e7fc:	2303      	movs	r3, #3
 800e7fe:	425b      	negs	r3, r3
 800e800:	61fb      	str	r3, [r7, #28]
 800e802:	e00d      	b.n	800e820 <osEventFlagsWait+0xcc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	69fa      	ldr	r2, [r7, #28]
 800e808:	4013      	ands	r3, r2
 800e80a:	d109      	bne.n	800e820 <osEventFlagsWait+0xcc>
        if (timeout > 0U) {
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d003      	beq.n	800e81a <osEventFlagsWait+0xc6>
          rflags = (uint32_t)osErrorTimeout;
 800e812:	2302      	movs	r3, #2
 800e814:	425b      	negs	r3, r3
 800e816:	61fb      	str	r3, [r7, #28]
 800e818:	e002      	b.n	800e820 <osEventFlagsWait+0xcc>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e81a:	2303      	movs	r3, #3
 800e81c:	425b      	negs	r3, r3
 800e81e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e820:	69fb      	ldr	r3, [r7, #28]
}
 800e822:	0018      	movs	r0, r3
 800e824:	46bd      	mov	sp, r7
 800e826:	b00b      	add	sp, #44	; 0x2c
 800e828:	bd90      	pop	{r4, r7, pc}
 800e82a:	46c0      	nop			; (mov r8, r8)
 800e82c:	200013f8 	.word	0x200013f8

0800e830 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 800e830:	b580      	push	{r7, lr}
 800e832:	b086      	sub	sp, #24
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e83c:	f3ef 8305 	mrs	r3, IPSR
 800e840:	60fb      	str	r3, [r7, #12]
  return(result);
 800e842:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e844:	2b00      	cmp	r3, #0
 800e846:	d109      	bne.n	800e85c <osEventFlagsDelete+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e848:	f3ef 8310 	mrs	r3, PRIMASK
 800e84c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d007      	beq.n	800e864 <osEventFlagsDelete+0x34>
 800e854:	4b0c      	ldr	r3, [pc, #48]	; (800e888 <osEventFlagsDelete+0x58>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d103      	bne.n	800e864 <osEventFlagsDelete+0x34>
    stat = osErrorISR;
 800e85c:	2306      	movs	r3, #6
 800e85e:	425b      	negs	r3, r3
 800e860:	617b      	str	r3, [r7, #20]
 800e862:	e00c      	b.n	800e87e <osEventFlagsDelete+0x4e>
  }
  else if (hEventGroup == NULL) {
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d103      	bne.n	800e872 <osEventFlagsDelete+0x42>
    stat = osErrorParameter;
 800e86a:	2304      	movs	r3, #4
 800e86c:	425b      	negs	r3, r3
 800e86e:	617b      	str	r3, [r7, #20]
 800e870:	e005      	b.n	800e87e <osEventFlagsDelete+0x4e>
  }
  else {
    stat = osOK;
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
    vEventGroupDelete (hEventGroup);
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	0018      	movs	r0, r3
 800e87a:	f000 fc90 	bl	800f19e <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e87e:	697b      	ldr	r3, [r7, #20]
}
 800e880:	0018      	movs	r0, r3
 800e882:	46bd      	mov	sp, r7
 800e884:	b006      	add	sp, #24
 800e886:	bd80      	pop	{r7, pc}
 800e888:	200013f8 	.word	0x200013f8

0800e88c <osMutexNew>:

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b08a      	sub	sp, #40	; 0x28
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e894:	2300      	movs	r3, #0
 800e896:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e898:	f3ef 8305 	mrs	r3, IPSR
 800e89c:	613b      	str	r3, [r7, #16]
  return(result);
 800e89e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d000      	beq.n	800e8a6 <osMutexNew+0x1a>
 800e8a4:	e084      	b.n	800e9b0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e8aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d004      	beq.n	800e8bc <osMutexNew+0x30>
 800e8b2:	4b42      	ldr	r3, [pc, #264]	; (800e9bc <osMutexNew+0x130>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d100      	bne.n	800e8bc <osMutexNew+0x30>
 800e8ba:	e079      	b.n	800e9b0 <osMutexNew+0x124>
    if (attr != NULL) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d003      	beq.n	800e8ca <osMutexNew+0x3e>
      type = attr->attr_bits;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	623b      	str	r3, [r7, #32]
 800e8c8:	e001      	b.n	800e8ce <osMutexNew+0x42>
    } else {
      type = 0U;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	d002      	beq.n	800e8dc <osMutexNew+0x50>
      rmtx = 1U;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	61fb      	str	r3, [r7, #28]
 800e8da:	e001      	b.n	800e8e0 <osMutexNew+0x54>
    } else {
      rmtx = 0U;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e8e0:	6a3b      	ldr	r3, [r7, #32]
 800e8e2:	2208      	movs	r2, #8
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	d000      	beq.n	800e8ea <osMutexNew+0x5e>
 800e8e8:	e062      	b.n	800e9b0 <osMutexNew+0x124>
      mem = -1;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	425b      	negs	r3, r3
 800e8ee:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d015      	beq.n	800e922 <osMutexNew+0x96>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d006      	beq.n	800e90c <osMutexNew+0x80>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	2b4f      	cmp	r3, #79	; 0x4f
 800e904:	d902      	bls.n	800e90c <osMutexNew+0x80>
          mem = 1;
 800e906:	2301      	movs	r3, #1
 800e908:	61bb      	str	r3, [r7, #24]
 800e90a:	e00c      	b.n	800e926 <osMutexNew+0x9a>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d108      	bne.n	800e926 <osMutexNew+0x9a>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <osMutexNew+0x9a>
            mem = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	61bb      	str	r3, [r7, #24]
 800e920:	e001      	b.n	800e926 <osMutexNew+0x9a>
          }
        }
      }
      else {
        mem = 0;
 800e922:	2300      	movs	r3, #0
 800e924:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d114      	bne.n	800e956 <osMutexNew+0xca>
        if (rmtx != 0U) {
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d008      	beq.n	800e944 <osMutexNew+0xb8>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	0019      	movs	r1, r3
 800e938:	2004      	movs	r0, #4
 800e93a:	f000 fe7e 	bl	800f63a <xQueueCreateMutexStatic>
 800e93e:	0003      	movs	r3, r0
 800e940:	627b      	str	r3, [r7, #36]	; 0x24
 800e942:	e019      	b.n	800e978 <osMutexNew+0xec>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	0019      	movs	r1, r3
 800e94a:	2001      	movs	r0, #1
 800e94c:	f000 fe75 	bl	800f63a <xQueueCreateMutexStatic>
 800e950:	0003      	movs	r3, r0
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
 800e954:	e010      	b.n	800e978 <osMutexNew+0xec>
        }
      }
      else {
        if (mem == 0) {
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10d      	bne.n	800e978 <osMutexNew+0xec>
          if (rmtx != 0U) {
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <osMutexNew+0xe2>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e962:	2004      	movs	r0, #4
 800e964:	f000 fe4d 	bl	800f602 <xQueueCreateMutex>
 800e968:	0003      	movs	r3, r0
 800e96a:	627b      	str	r3, [r7, #36]	; 0x24
 800e96c:	e004      	b.n	800e978 <osMutexNew+0xec>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e96e:	2001      	movs	r0, #1
 800e970:	f000 fe47 	bl	800f602 <xQueueCreateMutex>
 800e974:	0003      	movs	r3, r0
 800e976:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00e      	beq.n	800e99c <osMutexNew+0x110>
        if (attr != NULL) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d003      	beq.n	800e98c <osMutexNew+0x100>
          name = attr->name;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	617b      	str	r3, [r7, #20]
 800e98a:	e001      	b.n	800e990 <osMutexNew+0x104>
        } else {
          name = NULL;
 800e98c:	2300      	movs	r3, #0
 800e98e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e990:	697a      	ldr	r2, [r7, #20]
 800e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e994:	0011      	movs	r1, r2
 800e996:	0018      	movs	r0, r3
 800e998:	f001 fb66 	bl	8010068 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d006      	beq.n	800e9b0 <osMutexNew+0x124>
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d003      	beq.n	800e9b0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9b2:	0018      	movs	r0, r3
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	b00a      	add	sp, #40	; 0x28
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	46c0      	nop			; (mov r8, r8)
 800e9bc:	200013f8 	.word	0x200013f8

0800e9c0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	4393      	bics	r3, r2
 800e9d0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9de:	f3ef 8305 	mrs	r3, IPSR
 800e9e2:	613b      	str	r3, [r7, #16]
  return(result);
 800e9e4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <osMutexAcquire+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9ea:	f3ef 8310 	mrs	r3, PRIMASK
 800e9ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d007      	beq.n	800ea06 <osMutexAcquire+0x46>
 800e9f6:	4b1f      	ldr	r3, [pc, #124]	; (800ea74 <osMutexAcquire+0xb4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d103      	bne.n	800ea06 <osMutexAcquire+0x46>
    stat = osErrorISR;
 800e9fe:	2306      	movs	r3, #6
 800ea00:	425b      	negs	r3, r3
 800ea02:	61fb      	str	r3, [r7, #28]
 800ea04:	e030      	b.n	800ea68 <osMutexAcquire+0xa8>
  }
  else if (hMutex == NULL) {
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d103      	bne.n	800ea14 <osMutexAcquire+0x54>
    stat = osErrorParameter;
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	425b      	negs	r3, r3
 800ea10:	61fb      	str	r3, [r7, #28]
 800ea12:	e029      	b.n	800ea68 <osMutexAcquire+0xa8>
  }
  else {
    if (rmtx != 0U) {
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d013      	beq.n	800ea42 <osMutexAcquire+0x82>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ea1a:	683a      	ldr	r2, [r7, #0]
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	0011      	movs	r1, r2
 800ea20:	0018      	movs	r0, r3
 800ea22:	f000 fe55 	bl	800f6d0 <xQueueTakeMutexRecursive>
 800ea26:	0003      	movs	r3, r0
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d01d      	beq.n	800ea68 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <osMutexAcquire+0x7a>
          stat = osErrorTimeout;
 800ea32:	2302      	movs	r3, #2
 800ea34:	425b      	negs	r3, r3
 800ea36:	61fb      	str	r3, [r7, #28]
 800ea38:	e016      	b.n	800ea68 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	425b      	negs	r3, r3
 800ea3e:	61fb      	str	r3, [r7, #28]
 800ea40:	e012      	b.n	800ea68 <osMutexAcquire+0xa8>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	0011      	movs	r1, r2
 800ea48:	0018      	movs	r0, r3
 800ea4a:	f001 f85b 	bl	800fb04 <xQueueSemaphoreTake>
 800ea4e:	0003      	movs	r3, r0
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d009      	beq.n	800ea68 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d003      	beq.n	800ea62 <osMutexAcquire+0xa2>
          stat = osErrorTimeout;
 800ea5a:	2302      	movs	r3, #2
 800ea5c:	425b      	negs	r3, r3
 800ea5e:	61fb      	str	r3, [r7, #28]
 800ea60:	e002      	b.n	800ea68 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800ea62:	2303      	movs	r3, #3
 800ea64:	425b      	negs	r3, r3
 800ea66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ea68:	69fb      	ldr	r3, [r7, #28]
}
 800ea6a:	0018      	movs	r0, r3
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	b008      	add	sp, #32
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	46c0      	nop			; (mov r8, r8)
 800ea74:	200013f8 	.word	0x200013f8

0800ea78 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b088      	sub	sp, #32
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	4393      	bics	r3, r2
 800ea86:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea94:	f3ef 8305 	mrs	r3, IPSR
 800ea98:	613b      	str	r3, [r7, #16]
  return(result);
 800ea9a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d109      	bne.n	800eab4 <osMutexRelease+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaa0:	f3ef 8310 	mrs	r3, PRIMASK
 800eaa4:	60fb      	str	r3, [r7, #12]
  return(result);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d007      	beq.n	800eabc <osMutexRelease+0x44>
 800eaac:	4b16      	ldr	r3, [pc, #88]	; (800eb08 <osMutexRelease+0x90>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	d103      	bne.n	800eabc <osMutexRelease+0x44>
    stat = osErrorISR;
 800eab4:	2306      	movs	r3, #6
 800eab6:	425b      	negs	r3, r3
 800eab8:	61fb      	str	r3, [r7, #28]
 800eaba:	e020      	b.n	800eafe <osMutexRelease+0x86>
  }
  else if (hMutex == NULL) {
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d103      	bne.n	800eaca <osMutexRelease+0x52>
    stat = osErrorParameter;
 800eac2:	2304      	movs	r3, #4
 800eac4:	425b      	negs	r3, r3
 800eac6:	61fb      	str	r3, [r7, #28]
 800eac8:	e019      	b.n	800eafe <osMutexRelease+0x86>
  }
  else {
    if (rmtx != 0U) {
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00a      	beq.n	800eae6 <osMutexRelease+0x6e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	0018      	movs	r0, r3
 800ead4:	f000 fdd1 	bl	800f67a <xQueueGiveMutexRecursive>
 800ead8:	0003      	movs	r3, r0
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d00f      	beq.n	800eafe <osMutexRelease+0x86>
        stat = osErrorResource;
 800eade:	2303      	movs	r3, #3
 800eae0:	425b      	negs	r3, r3
 800eae2:	61fb      	str	r3, [r7, #28]
 800eae4:	e00b      	b.n	800eafe <osMutexRelease+0x86>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800eae6:	69b8      	ldr	r0, [r7, #24]
 800eae8:	2300      	movs	r3, #0
 800eaea:	2200      	movs	r2, #0
 800eaec:	2100      	movs	r1, #0
 800eaee:	f000 fe1f 	bl	800f730 <xQueueGenericSend>
 800eaf2:	0003      	movs	r3, r0
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d002      	beq.n	800eafe <osMutexRelease+0x86>
        stat = osErrorResource;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	425b      	negs	r3, r3
 800eafc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800eafe:	69fb      	ldr	r3, [r7, #28]
}
 800eb00:	0018      	movs	r0, r3
 800eb02:	46bd      	mov	sp, r7
 800eb04:	b008      	add	sp, #32
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	200013f8 	.word	0x200013f8

0800eb0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800eb0c:	b590      	push	{r4, r7, lr}
 800eb0e:	b08d      	sub	sp, #52	; 0x34
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb1c:	f3ef 8305 	mrs	r3, IPSR
 800eb20:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb22:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d000      	beq.n	800eb2a <osMessageQueueNew+0x1e>
 800eb28:	e06f      	b.n	800ec0a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb2a:	f3ef 8310 	mrs	r3, PRIMASK
 800eb2e:	617b      	str	r3, [r7, #20]
  return(result);
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d004      	beq.n	800eb40 <osMessageQueueNew+0x34>
 800eb36:	4b37      	ldr	r3, [pc, #220]	; (800ec14 <osMessageQueueNew+0x108>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b02      	cmp	r3, #2
 800eb3c:	d100      	bne.n	800eb40 <osMessageQueueNew+0x34>
 800eb3e:	e064      	b.n	800ec0a <osMessageQueueNew+0xfe>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d100      	bne.n	800eb48 <osMessageQueueNew+0x3c>
 800eb46:	e060      	b.n	800ec0a <osMessageQueueNew+0xfe>
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d05d      	beq.n	800ec0a <osMessageQueueNew+0xfe>
    mem = -1;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	425b      	negs	r3, r3
 800eb52:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d028      	beq.n	800ebac <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d011      	beq.n	800eb86 <osMessageQueueNew+0x7a>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	2b4f      	cmp	r3, #79	; 0x4f
 800eb68:	d90d      	bls.n	800eb86 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d009      	beq.n	800eb86 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	695a      	ldr	r2, [r3, #20]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	68b9      	ldr	r1, [r7, #8]
 800eb7a:	434b      	muls	r3, r1
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d302      	bcc.n	800eb86 <osMessageQueueNew+0x7a>
        mem = 1;
 800eb80:	2301      	movs	r3, #1
 800eb82:	623b      	str	r3, [r7, #32]
 800eb84:	e014      	b.n	800ebb0 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d110      	bne.n	800ebb0 <osMessageQueueNew+0xa4>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10c      	bne.n	800ebb0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d108      	bne.n	800ebb0 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	695b      	ldr	r3, [r3, #20]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d104      	bne.n	800ebb0 <osMessageQueueNew+0xa4>
          mem = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	623b      	str	r3, [r7, #32]
 800ebaa:	e001      	b.n	800ebb0 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d10c      	bne.n	800ebd0 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	691a      	ldr	r2, [r3, #16]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	68b9      	ldr	r1, [r7, #8]
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	2400      	movs	r4, #0
 800ebc4:	9400      	str	r4, [sp, #0]
 800ebc6:	f000 fc5a 	bl	800f47e <xQueueGenericCreateStatic>
 800ebca:	0003      	movs	r3, r0
 800ebcc:	627b      	str	r3, [r7, #36]	; 0x24
 800ebce:	e00a      	b.n	800ebe6 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d107      	bne.n	800ebe6 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ebd6:	68b9      	ldr	r1, [r7, #8]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	0018      	movs	r0, r3
 800ebde:	f000 fc99 	bl	800f514 <xQueueGenericCreate>
 800ebe2:	0003      	movs	r3, r0
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ebe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00e      	beq.n	800ec0a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d003      	beq.n	800ebfa <osMessageQueueNew+0xee>
        name = attr->name;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	61fb      	str	r3, [r7, #28]
 800ebf8:	e001      	b.n	800ebfe <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ebfe:	69fa      	ldr	r2, [r7, #28]
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	0011      	movs	r1, r2
 800ec04:	0018      	movs	r0, r3
 800ec06:	f001 fa2f 	bl	8010068 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec0c:	0018      	movs	r0, r3
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	b00b      	add	sp, #44	; 0x2c
 800ec12:	bd90      	pop	{r4, r7, pc}
 800ec14:	200013f8 	.word	0x200013f8

0800ec18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b08a      	sub	sp, #40	; 0x28
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	603b      	str	r3, [r7, #0]
 800ec24:	1dfb      	adds	r3, r7, #7
 800ec26:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec30:	f3ef 8305 	mrs	r3, IPSR
 800ec34:	61fb      	str	r3, [r7, #28]
  return(result);
 800ec36:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d109      	bne.n	800ec50 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec40:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d028      	beq.n	800ec9a <osMessageQueuePut+0x82>
 800ec48:	4b26      	ldr	r3, [pc, #152]	; (800ece4 <osMessageQueuePut+0xcc>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d124      	bne.n	800ec9a <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec50:	6a3b      	ldr	r3, [r7, #32]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d005      	beq.n	800ec62 <osMessageQueuePut+0x4a>
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d002      	beq.n	800ec62 <osMessageQueuePut+0x4a>
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d003      	beq.n	800ec6a <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 800ec62:	2304      	movs	r3, #4
 800ec64:	425b      	negs	r3, r3
 800ec66:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec68:	e035      	b.n	800ecd6 <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ec6e:	2314      	movs	r3, #20
 800ec70:	18fa      	adds	r2, r7, r3
 800ec72:	68b9      	ldr	r1, [r7, #8]
 800ec74:	6a38      	ldr	r0, [r7, #32]
 800ec76:	2300      	movs	r3, #0
 800ec78:	f000 fe1e 	bl	800f8b8 <xQueueGenericSendFromISR>
 800ec7c:	0003      	movs	r3, r0
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d003      	beq.n	800ec8a <osMessageQueuePut+0x72>
        stat = osErrorResource;
 800ec82:	2303      	movs	r3, #3
 800ec84:	425b      	negs	r3, r3
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec88:	e025      	b.n	800ecd6 <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d022      	beq.n	800ecd6 <osMessageQueuePut+0xbe>
 800ec90:	4b15      	ldr	r3, [pc, #84]	; (800ece8 <osMessageQueuePut+0xd0>)
 800ec92:	2280      	movs	r2, #128	; 0x80
 800ec94:	0552      	lsls	r2, r2, #21
 800ec96:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec98:	e01d      	b.n	800ecd6 <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d002      	beq.n	800eca6 <osMessageQueuePut+0x8e>
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d103      	bne.n	800ecae <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 800eca6:	2304      	movs	r3, #4
 800eca8:	425b      	negs	r3, r3
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24
 800ecac:	e014      	b.n	800ecd8 <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	68b9      	ldr	r1, [r7, #8]
 800ecb2:	6a38      	ldr	r0, [r7, #32]
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f000 fd3b 	bl	800f730 <xQueueGenericSend>
 800ecba:	0003      	movs	r3, r0
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d00b      	beq.n	800ecd8 <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 800ecc6:	2302      	movs	r3, #2
 800ecc8:	425b      	negs	r3, r3
 800ecca:	627b      	str	r3, [r7, #36]	; 0x24
 800eccc:	e004      	b.n	800ecd8 <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 800ecce:	2303      	movs	r3, #3
 800ecd0:	425b      	negs	r3, r3
 800ecd2:	627b      	str	r3, [r7, #36]	; 0x24
 800ecd4:	e000      	b.n	800ecd8 <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ecd6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800ecd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ecda:	0018      	movs	r0, r3
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	b00a      	add	sp, #40	; 0x28
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	46c0      	nop			; (mov r8, r8)
 800ece4:	200013f8 	.word	0x200013f8
 800ece8:	e000ed04 	.word	0xe000ed04

0800ecec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b08a      	sub	sp, #40	; 0x28
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	607a      	str	r2, [r7, #4]
 800ecf8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed02:	f3ef 8305 	mrs	r3, IPSR
 800ed06:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed08:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d109      	bne.n	800ed22 <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed0e:	f3ef 8310 	mrs	r3, PRIMASK
 800ed12:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d028      	beq.n	800ed6c <osMessageQueueGet+0x80>
 800ed1a:	4b26      	ldr	r3, [pc, #152]	; (800edb4 <osMessageQueueGet+0xc8>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d124      	bne.n	800ed6c <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed22:	6a3b      	ldr	r3, [r7, #32]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d005      	beq.n	800ed34 <osMessageQueueGet+0x48>
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <osMessageQueueGet+0x48>
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d003      	beq.n	800ed3c <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 800ed34:	2304      	movs	r3, #4
 800ed36:	425b      	negs	r3, r3
 800ed38:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed3a:	e035      	b.n	800eda8 <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ed40:	2314      	movs	r3, #20
 800ed42:	18fa      	adds	r2, r7, r3
 800ed44:	68b9      	ldr	r1, [r7, #8]
 800ed46:	6a3b      	ldr	r3, [r7, #32]
 800ed48:	0018      	movs	r0, r3
 800ed4a:	f000 ffb5 	bl	800fcb8 <xQueueReceiveFromISR>
 800ed4e:	0003      	movs	r3, r0
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d003      	beq.n	800ed5c <osMessageQueueGet+0x70>
        stat = osErrorResource;
 800ed54:	2303      	movs	r3, #3
 800ed56:	425b      	negs	r3, r3
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed5a:	e025      	b.n	800eda8 <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d022      	beq.n	800eda8 <osMessageQueueGet+0xbc>
 800ed62:	4b15      	ldr	r3, [pc, #84]	; (800edb8 <osMessageQueueGet+0xcc>)
 800ed64:	2280      	movs	r2, #128	; 0x80
 800ed66:	0552      	lsls	r2, r2, #21
 800ed68:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed6a:	e01d      	b.n	800eda8 <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <osMessageQueueGet+0x8c>
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d103      	bne.n	800ed80 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 800ed78:	2304      	movs	r3, #4
 800ed7a:	425b      	negs	r3, r3
 800ed7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ed7e:	e014      	b.n	800edaa <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	68b9      	ldr	r1, [r7, #8]
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	0018      	movs	r0, r3
 800ed88:	f000 fe07 	bl	800f99a <xQueueReceive>
 800ed8c:	0003      	movs	r3, r0
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d00b      	beq.n	800edaa <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d003      	beq.n	800eda0 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 800ed98:	2302      	movs	r3, #2
 800ed9a:	425b      	negs	r3, r3
 800ed9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ed9e:	e004      	b.n	800edaa <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 800eda0:	2303      	movs	r3, #3
 800eda2:	425b      	negs	r3, r3
 800eda4:	627b      	str	r3, [r7, #36]	; 0x24
 800eda6:	e000      	b.n	800edaa <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eda8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edac:	0018      	movs	r0, r3
 800edae:	46bd      	mov	sp, r7
 800edb0:	b00a      	add	sp, #40	; 0x28
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	200013f8 	.word	0x200013f8
 800edb8:	e000ed04 	.word	0xe000ed04

0800edbc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800edce:	2300      	movs	r3, #0
 800edd0:	617b      	str	r3, [r7, #20]
 800edd2:	e01c      	b.n	800ee0e <osMessageQueueGetCount+0x52>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edd4:	f3ef 8305 	mrs	r3, IPSR
 800edd8:	60fb      	str	r3, [r7, #12]
  return(result);
 800edda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d109      	bne.n	800edf4 <osMessageQueueGetCount+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ede0:	f3ef 8310 	mrs	r3, PRIMASK
 800ede4:	60bb      	str	r3, [r7, #8]
  return(result);
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00a      	beq.n	800ee02 <osMessageQueueGetCount+0x46>
 800edec:	4b0a      	ldr	r3, [pc, #40]	; (800ee18 <osMessageQueueGetCount+0x5c>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	d106      	bne.n	800ee02 <osMessageQueueGetCount+0x46>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	0018      	movs	r0, r3
 800edf8:	f000 ffd6 	bl	800fda8 <uxQueueMessagesWaitingFromISR>
 800edfc:	0003      	movs	r3, r0
 800edfe:	617b      	str	r3, [r7, #20]
 800ee00:	e005      	b.n	800ee0e <osMessageQueueGetCount+0x52>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	0018      	movs	r0, r3
 800ee06:	f000 ffba 	bl	800fd7e <uxQueueMessagesWaiting>
 800ee0a:	0003      	movs	r3, r0
 800ee0c:	617b      	str	r3, [r7, #20]
  }

  return ((uint32_t)count);
 800ee0e:	697b      	ldr	r3, [r7, #20]
}
 800ee10:	0018      	movs	r0, r3
 800ee12:	46bd      	mov	sp, r7
 800ee14:	b006      	add	sp, #24
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	200013f8 	.word	0x200013f8

0800ee1c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee28:	f3ef 8305 	mrs	r3, IPSR
 800ee2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d109      	bne.n	800ee48 <osMessageQueueDelete+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee34:	f3ef 8310 	mrs	r3, PRIMASK
 800ee38:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d007      	beq.n	800ee50 <osMessageQueueDelete+0x34>
 800ee40:	4b0e      	ldr	r3, [pc, #56]	; (800ee7c <osMessageQueueDelete+0x60>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	d103      	bne.n	800ee50 <osMessageQueueDelete+0x34>
    stat = osErrorISR;
 800ee48:	2306      	movs	r3, #6
 800ee4a:	425b      	negs	r3, r3
 800ee4c:	617b      	str	r3, [r7, #20]
 800ee4e:	e010      	b.n	800ee72 <osMessageQueueDelete+0x56>
  }
  else if (hQueue == NULL) {
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d103      	bne.n	800ee5e <osMessageQueueDelete+0x42>
    stat = osErrorParameter;
 800ee56:	2304      	movs	r3, #4
 800ee58:	425b      	negs	r3, r3
 800ee5a:	617b      	str	r3, [r7, #20]
 800ee5c:	e009      	b.n	800ee72 <osMessageQueueDelete+0x56>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	0018      	movs	r0, r3
 800ee62:	f001 f929 	bl	80100b8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	0018      	movs	r0, r3
 800ee6e:	f000 ffac 	bl	800fdca <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ee72:	697b      	ldr	r3, [r7, #20]
}
 800ee74:	0018      	movs	r0, r3
 800ee76:	46bd      	mov	sp, r7
 800ee78:	b006      	add	sp, #24
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	200013f8 	.word	0x200013f8

0800ee80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	4a06      	ldr	r2, [pc, #24]	; (800eea8 <vApplicationGetIdleTaskMemory+0x28>)
 800ee90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	4a05      	ldr	r2, [pc, #20]	; (800eeac <vApplicationGetIdleTaskMemory+0x2c>)
 800ee96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2280      	movs	r2, #128	; 0x80
 800ee9c:	601a      	str	r2, [r3, #0]
}
 800ee9e:	46c0      	nop			; (mov r8, r8)
 800eea0:	46bd      	mov	sp, r7
 800eea2:	b004      	add	sp, #16
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	46c0      	nop			; (mov r8, r8)
 800eea8:	200013fc 	.word	0x200013fc
 800eeac:	200014b8 	.word	0x200014b8

0800eeb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	4a06      	ldr	r2, [pc, #24]	; (800eed8 <vApplicationGetTimerTaskMemory+0x28>)
 800eec0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	4a05      	ldr	r2, [pc, #20]	; (800eedc <vApplicationGetTimerTaskMemory+0x2c>)
 800eec6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2280      	movs	r2, #128	; 0x80
 800eecc:	0052      	lsls	r2, r2, #1
 800eece:	601a      	str	r2, [r3, #0]
}
 800eed0:	46c0      	nop			; (mov r8, r8)
 800eed2:	46bd      	mov	sp, r7
 800eed4:	b004      	add	sp, #16
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	200016b8 	.word	0x200016b8
 800eedc:	20001774 	.word	0x20001774

0800eee0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <xEventGroupCreateStatic+0x12>
 800eeee:	b672      	cpsid	i
 800eef0:	e7fe      	b.n	800eef0 <xEventGroupCreateStatic+0x10>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800eef2:	2320      	movs	r3, #32
 800eef4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	2b20      	cmp	r3, #32
 800eefa:	d001      	beq.n	800ef00 <xEventGroupCreateStatic+0x20>
 800eefc:	b672      	cpsid	i
 800eefe:	e7fe      	b.n	800eefe <xEventGroupCreateStatic+0x1e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	60fb      	str	r3, [r7, #12]

		if( pxEventBits != NULL )
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00a      	beq.n	800ef20 <xEventGroupCreateStatic+0x40>
		{
			pxEventBits->uxEventBits = 0;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	3304      	adds	r3, #4
 800ef14:	0018      	movs	r0, r3
 800ef16:	f000 f9b5 	bl	800f284 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800ef20:	68fb      	ldr	r3, [r7, #12]
	}
 800ef22:	0018      	movs	r0, r3
 800ef24:	46bd      	mov	sp, r7
 800ef26:	b004      	add	sp, #16
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800ef30:	2020      	movs	r0, #32
 800ef32:	f002 fe05 	bl	8011b40 <pvPortMalloc>
 800ef36:	0003      	movs	r3, r0
 800ef38:	607b      	str	r3, [r7, #4]

		if( pxEventBits != NULL )
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00a      	beq.n	800ef56 <xEventGroupCreate+0x2c>
		{
			pxEventBits->uxEventBits = 0;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3304      	adds	r3, #4
 800ef4a:	0018      	movs	r0, r3
 800ef4c:	f000 f99a 	bl	800f284 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800ef56:	687b      	ldr	r3, [r7, #4]
	}
 800ef58:	0018      	movs	r0, r3
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	b002      	add	sp, #8
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b08c      	sub	sp, #48	; 0x30
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	607a      	str	r2, [r7, #4]
 800ef6c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800ef76:	2300      	movs	r3, #0
 800ef78:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <xEventGroupWaitBits+0x24>
 800ef80:	b672      	cpsid	i
 800ef82:	e7fe      	b.n	800ef82 <xEventGroupWaitBits+0x22>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	0e1b      	lsrs	r3, r3, #24
 800ef88:	061b      	lsls	r3, r3, #24
 800ef8a:	d001      	beq.n	800ef90 <xEventGroupWaitBits+0x30>
 800ef8c:	b672      	cpsid	i
 800ef8e:	e7fe      	b.n	800ef8e <xEventGroupWaitBits+0x2e>
	configASSERT( uxBitsToWaitFor != 0 );
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d101      	bne.n	800ef9a <xEventGroupWaitBits+0x3a>
 800ef96:	b672      	cpsid	i
 800ef98:	e7fe      	b.n	800ef98 <xEventGroupWaitBits+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef9a:	f001 ff41 	bl	8010e20 <xTaskGetSchedulerState>
 800ef9e:	1e03      	subs	r3, r0, #0
 800efa0:	d102      	bne.n	800efa8 <xEventGroupWaitBits+0x48>
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d101      	bne.n	800efac <xEventGroupWaitBits+0x4c>
 800efa8:	2301      	movs	r3, #1
 800efaa:	e000      	b.n	800efae <xEventGroupWaitBits+0x4e>
 800efac:	2300      	movs	r3, #0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d101      	bne.n	800efb6 <xEventGroupWaitBits+0x56>
 800efb2:	b672      	cpsid	i
 800efb4:	e7fe      	b.n	800efb4 <xEventGroupWaitBits+0x54>
	}
	#endif

	vTaskSuspendAll();
 800efb6:	f001 faef 	bl	8010598 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800efba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	68b9      	ldr	r1, [r7, #8]
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	0018      	movs	r0, r3
 800efc8:	f000 f926 	bl	800f218 <prvTestWaitCondition>
 800efcc:	0003      	movs	r3, r0
 800efce:	61bb      	str	r3, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00e      	beq.n	800eff4 <xEventGroupWaitBits+0x94>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800efd6:	69fb      	ldr	r3, [r7, #28]
 800efd8:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d02a      	beq.n	800f03a <xEventGroupWaitBits+0xda>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	43d2      	mvns	r2, r2
 800efec:	401a      	ands	r2, r3
 800efee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	e022      	b.n	800f03a <xEventGroupWaitBits+0xda>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800eff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d104      	bne.n	800f004 <xEventGroupWaitBits+0xa4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
 800effe:	2301      	movs	r3, #1
 800f000:	623b      	str	r3, [r7, #32]
 800f002:	e01a      	b.n	800f03a <xEventGroupWaitBits+0xda>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d004      	beq.n	800f014 <xEventGroupWaitBits+0xb4>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800f00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00c:	2280      	movs	r2, #128	; 0x80
 800f00e:	0452      	lsls	r2, r2, #17
 800f010:	4313      	orrs	r3, r2
 800f012:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d004      	beq.n	800f024 <xEventGroupWaitBits+0xc4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	2280      	movs	r2, #128	; 0x80
 800f01e:	04d2      	lsls	r2, r2, #19
 800f020:	4313      	orrs	r3, r2
 800f022:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	1d18      	adds	r0, r3, #4
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02c:	4313      	orrs	r3, r2
 800f02e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f030:	0019      	movs	r1, r3
 800f032:	f001 fca3 	bl	801097c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800f03a:	f001 fab9 	bl	80105b0 <xTaskResumeAll>
 800f03e:	0003      	movs	r3, r0
 800f040:	617b      	str	r3, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 800f042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f044:	2b00      	cmp	r3, #0
 800f046:	d02c      	beq.n	800f0a2 <xEventGroupWaitBits+0x142>
	{
		if( xAlreadyYielded == pdFALSE )
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <xEventGroupWaitBits+0xf2>
		{
			portYIELD_WITHIN_API();
 800f04e:	f002 fccf 	bl	80119f0 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800f052:	f002 f83f 	bl	80110d4 <uxTaskResetEventItemValue>
 800f056:	0003      	movs	r3, r0
 800f058:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800f05a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f05c:	2380      	movs	r3, #128	; 0x80
 800f05e:	049b      	lsls	r3, r3, #18
 800f060:	4013      	ands	r3, r2
 800f062:	d11a      	bne.n	800f09a <xEventGroupWaitBits+0x13a>
		{
			taskENTER_CRITICAL();
 800f064:	f002 fcd4 	bl	8011a10 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	68b9      	ldr	r1, [r7, #8]
 800f072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f074:	0018      	movs	r0, r3
 800f076:	f000 f8cf 	bl	800f218 <prvTestWaitCondition>
 800f07a:	1e03      	subs	r3, r0, #0
 800f07c:	d009      	beq.n	800f092 <xEventGroupWaitBits+0x132>
				{
					if( xClearOnExit != pdFALSE )
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d006      	beq.n	800f092 <xEventGroupWaitBits+0x132>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68ba      	ldr	r2, [r7, #8]
 800f08a:	43d2      	mvns	r2, r2
 800f08c:	401a      	ands	r2, r3
 800f08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f090:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800f092:	2301      	movs	r3, #1
 800f094:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
 800f096:	f002 fccd 	bl	8011a34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09c:	021b      	lsls	r3, r3, #8
 800f09e:	0a1b      	lsrs	r3, r3, #8
 800f0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800f0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f0a4:	0018      	movs	r0, r3
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	b00c      	add	sp, #48	; 0x30
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b08c      	sub	sp, #48	; 0x30
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d101      	bne.n	800f0cc <xEventGroupSetBits+0x20>
 800f0c8:	b672      	cpsid	i
 800f0ca:	e7fe      	b.n	800f0ca <xEventGroupSetBits+0x1e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	0e1b      	lsrs	r3, r3, #24
 800f0d0:	061b      	lsls	r3, r3, #24
 800f0d2:	d001      	beq.n	800f0d8 <xEventGroupSetBits+0x2c>
 800f0d4:	b672      	cpsid	i
 800f0d6:	e7fe      	b.n	800f0d6 <xEventGroupSetBits+0x2a>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800f0d8:	6a3b      	ldr	r3, [r7, #32]
 800f0da:	3304      	adds	r3, #4
 800f0dc:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
 800f0e4:	f001 fa58 	bl	8010598 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	431a      	orrs	r2, r3
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800f0fa:	e03d      	b.n	800f178 <xEventGroupSetBits+0xcc>
		{
			pxNext = listGET_NEXT( pxListItem );
 800f0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
 800f108:	2300      	movs	r3, #0
 800f10a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	0e1b      	lsrs	r3, r3, #24
 800f110:	061b      	lsls	r3, r3, #24
 800f112:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	021b      	lsls	r3, r3, #8
 800f118:	0a1b      	lsrs	r3, r3, #8
 800f11a:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	2380      	movs	r3, #128	; 0x80
 800f120:	04db      	lsls	r3, r3, #19
 800f122:	4013      	ands	r3, r2
 800f124:	d107      	bne.n	800f136 <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800f126:	6a3b      	ldr	r3, [r7, #32]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	693a      	ldr	r2, [r7, #16]
 800f12c:	4013      	ands	r3, r2
 800f12e:	d00b      	beq.n	800f148 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
 800f130:	2301      	movs	r3, #1
 800f132:	627b      	str	r3, [r7, #36]	; 0x24
 800f134:	e008      	b.n	800f148 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	4013      	ands	r3, r2
 800f13e:	693a      	ldr	r2, [r7, #16]
 800f140:	429a      	cmp	r2, r3
 800f142:	d101      	bne.n	800f148 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f144:	2301      	movs	r3, #1
 800f146:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d012      	beq.n	800f174 <xEventGroupSetBits+0xc8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	2380      	movs	r3, #128	; 0x80
 800f152:	045b      	lsls	r3, r3, #17
 800f154:	4013      	ands	r3, r2
 800f156:	d003      	beq.n	800f160 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	4313      	orrs	r3, r2
 800f15e:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f160:	6a3b      	ldr	r3, [r7, #32]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2280      	movs	r2, #128	; 0x80
 800f166:	0492      	lsls	r2, r2, #18
 800f168:	431a      	orrs	r2, r3
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	0011      	movs	r1, r2
 800f16e:	0018      	movs	r0, r3
 800f170:	f001 fcb4 	bl	8010adc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 800f178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d1bd      	bne.n	800f0fc <xEventGroupSetBits+0x50>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f186:	43d2      	mvns	r2, r2
 800f188:	401a      	ands	r2, r3
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800f18e:	f001 fa0f 	bl	80105b0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	681b      	ldr	r3, [r3, #0]
}
 800f196:	0018      	movs	r0, r3
 800f198:	46bd      	mov	sp, r7
 800f19a:	b00c      	add	sp, #48	; 0x30
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b084      	sub	sp, #16
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	60fb      	str	r3, [r7, #12]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800f1b0:	f001 f9f2 	bl	8010598 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800f1b4:	e00f      	b.n	800f1d6 <vEventGroupDelete+0x38>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	68da      	ldr	r2, [r3, #12]
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	3308      	adds	r3, #8
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d101      	bne.n	800f1c6 <vEventGroupDelete+0x28>
 800f1c2:	b672      	cpsid	i
 800f1c4:	e7fe      	b.n	800f1c4 <vEventGroupDelete+0x26>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	2280      	movs	r2, #128	; 0x80
 800f1cc:	0492      	lsls	r2, r2, #18
 800f1ce:	0011      	movs	r1, r2
 800f1d0:	0018      	movs	r0, r3
 800f1d2:	f001 fc83 	bl	8010adc <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1eb      	bne.n	800f1b6 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	7f1b      	ldrb	r3, [r3, #28]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d103      	bne.n	800f1ee <vEventGroupDelete+0x50>
			{
				vPortFree( pxEventBits );
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	0018      	movs	r0, r3
 800f1ea:	f002 fd4f 	bl	8011c8c <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 800f1ee:	f001 f9df 	bl	80105b0 <xTaskResumeAll>
}
 800f1f2:	46c0      	nop			; (mov r8, r8)
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	b004      	add	sp, #16
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b082      	sub	sp, #8
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
 800f202:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	0011      	movs	r1, r2
 800f20a:	0018      	movs	r0, r3
 800f20c:	f7ff ff4e 	bl	800f0ac <xEventGroupSetBits>
}
 800f210:	46c0      	nop			; (mov r8, r8)
 800f212:	46bd      	mov	sp, r7
 800f214:	b002      	add	sp, #8
 800f216:	bd80      	pop	{r7, pc}

0800f218 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b086      	sub	sp, #24
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800f224:	2300      	movs	r3, #0
 800f226:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <prvTestWaitCondition+0x24>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	4013      	ands	r3, r2
 800f234:	d00a      	beq.n	800f24c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800f236:	2301      	movs	r3, #1
 800f238:	617b      	str	r3, [r7, #20]
 800f23a:	e007      	b.n	800f24c <prvTestWaitCondition+0x34>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	4013      	ands	r3, r2
 800f242:	68ba      	ldr	r2, [r7, #8]
 800f244:	429a      	cmp	r2, r3
 800f246:	d101      	bne.n	800f24c <prvTestWaitCondition+0x34>
		{
			xWaitConditionMet = pdTRUE;
 800f248:	2301      	movs	r3, #1
 800f24a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800f24c:	697b      	ldr	r3, [r7, #20]
}
 800f24e:	0018      	movs	r0, r3
 800f250:	46bd      	mov	sp, r7
 800f252:	b006      	add	sp, #24
 800f254:	bd80      	pop	{r7, pc}
	...

0800f258 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b086      	sub	sp, #24
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	68f9      	ldr	r1, [r7, #12]
 800f26a:	4805      	ldr	r0, [pc, #20]	; (800f280 <xEventGroupSetBitsFromISR+0x28>)
 800f26c:	f002 fb0e 	bl	801188c <xTimerPendFunctionCallFromISR>
 800f270:	0003      	movs	r3, r0
 800f272:	617b      	str	r3, [r7, #20]

		return xReturn;
 800f274:	697b      	ldr	r3, [r7, #20]
	}
 800f276:	0018      	movs	r0, r3
 800f278:	46bd      	mov	sp, r7
 800f27a:	b006      	add	sp, #24
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	46c0      	nop			; (mov r8, r8)
 800f280:	0800f1fb 	.word	0x0800f1fb

0800f284 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3308      	adds	r3, #8
 800f290:	001a      	movs	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2201      	movs	r2, #1
 800f29a:	4252      	negs	r2, r2
 800f29c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	001a      	movs	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	3308      	adds	r3, #8
 800f2ac:	001a      	movs	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f2b8:	46c0      	nop			; (mov r8, r8)
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	b002      	add	sp, #8
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f2ce:	46c0      	nop			; (mov r8, r8)
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	b002      	add	sp, #8
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b084      	sub	sp, #16
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	689a      	ldr	r2, [r3, #8]
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	1c5a      	adds	r2, r3, #1
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	601a      	str	r2, [r3, #0]
}
 800f312:	46c0      	nop			; (mov r8, r8)
 800f314:	46bd      	mov	sp, r7
 800f316:	b004      	add	sp, #16
 800f318:	bd80      	pop	{r7, pc}

0800f31a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b084      	sub	sp, #16
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
 800f322:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	3301      	adds	r3, #1
 800f32e:	d103      	bne.n	800f338 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	60fb      	str	r3, [r7, #12]
 800f336:	e00c      	b.n	800f352 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	3308      	adds	r3, #8
 800f33c:	60fb      	str	r3, [r7, #12]
 800f33e:	e002      	b.n	800f346 <vListInsert+0x2c>
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	60fb      	str	r3, [r7, #12]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d2f6      	bcs.n	800f340 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	685a      	ldr	r2, [r3, #4]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	683a      	ldr	r2, [r7, #0]
 800f36c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	1c5a      	adds	r2, r3, #1
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	601a      	str	r2, [r3, #0]
}
 800f37e:	46c0      	nop			; (mov r8, r8)
 800f380:	46bd      	mov	sp, r7
 800f382:	b004      	add	sp, #16
 800f384:	bd80      	pop	{r7, pc}

0800f386 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b084      	sub	sp, #16
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	6892      	ldr	r2, [r2, #8]
 800f39c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	6852      	ldr	r2, [r2, #4]
 800f3a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d103      	bne.n	800f3ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	689a      	ldr	r2, [r3, #8]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	1e5a      	subs	r2, r3, #1
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
}
 800f3ce:	0018      	movs	r0, r3
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	b004      	add	sp, #16
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <xQueueGenericReset+0x18>
 800f3ea:	b672      	cpsid	i
 800f3ec:	e7fe      	b.n	800f3ec <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800f3ee:	f002 fb0f 	bl	8011a10 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3fe:	434b      	muls	r3, r1
 800f400:	18d2      	adds	r2, r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f41c:	1e59      	subs	r1, r3, #1
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f422:	434b      	muls	r3, r1
 800f424:	18d2      	adds	r2, r2, r3
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2244      	movs	r2, #68	; 0x44
 800f42e:	21ff      	movs	r1, #255	; 0xff
 800f430:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2245      	movs	r2, #69	; 0x45
 800f436:	21ff      	movs	r1, #255	; 0xff
 800f438:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d10d      	bne.n	800f45c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d013      	beq.n	800f470 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	3310      	adds	r3, #16
 800f44c:	0018      	movs	r0, r3
 800f44e:	f001 fae9 	bl	8010a24 <xTaskRemoveFromEventList>
 800f452:	1e03      	subs	r3, r0, #0
 800f454:	d00c      	beq.n	800f470 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f456:	f002 facb 	bl	80119f0 <vPortYield>
 800f45a:	e009      	b.n	800f470 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	3310      	adds	r3, #16
 800f460:	0018      	movs	r0, r3
 800f462:	f7ff ff0f 	bl	800f284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	3324      	adds	r3, #36	; 0x24
 800f46a:	0018      	movs	r0, r3
 800f46c:	f7ff ff0a 	bl	800f284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f470:	f002 fae0 	bl	8011a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f474:	2301      	movs	r3, #1
}
 800f476:	0018      	movs	r0, r3
 800f478:	46bd      	mov	sp, r7
 800f47a:	b004      	add	sp, #16
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f47e:	b590      	push	{r4, r7, lr}
 800f480:	b089      	sub	sp, #36	; 0x24
 800f482:	af02      	add	r7, sp, #8
 800f484:	60f8      	str	r0, [r7, #12]
 800f486:	60b9      	str	r1, [r7, #8]
 800f488:	607a      	str	r2, [r7, #4]
 800f48a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d101      	bne.n	800f496 <xQueueGenericCreateStatic+0x18>
 800f492:	b672      	cpsid	i
 800f494:	e7fe      	b.n	800f494 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d101      	bne.n	800f4a0 <xQueueGenericCreateStatic+0x22>
 800f49c:	b672      	cpsid	i
 800f49e:	e7fe      	b.n	800f49e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d002      	beq.n	800f4ac <xQueueGenericCreateStatic+0x2e>
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <xQueueGenericCreateStatic+0x32>
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e000      	b.n	800f4b2 <xQueueGenericCreateStatic+0x34>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <xQueueGenericCreateStatic+0x3c>
 800f4b6:	b672      	cpsid	i
 800f4b8:	e7fe      	b.n	800f4b8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d102      	bne.n	800f4c6 <xQueueGenericCreateStatic+0x48>
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d101      	bne.n	800f4ca <xQueueGenericCreateStatic+0x4c>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e000      	b.n	800f4cc <xQueueGenericCreateStatic+0x4e>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d101      	bne.n	800f4d4 <xQueueGenericCreateStatic+0x56>
 800f4d0:	b672      	cpsid	i
 800f4d2:	e7fe      	b.n	800f4d2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f4d4:	2350      	movs	r3, #80	; 0x50
 800f4d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	2b50      	cmp	r3, #80	; 0x50
 800f4dc:	d001      	beq.n	800f4e2 <xQueueGenericCreateStatic+0x64>
 800f4de:	b672      	cpsid	i
 800f4e0:	e7fe      	b.n	800f4e0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00e      	beq.n	800f50a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2246      	movs	r2, #70	; 0x46
 800f4f0:	2101      	movs	r1, #1
 800f4f2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4f4:	2328      	movs	r3, #40	; 0x28
 800f4f6:	18fb      	adds	r3, r7, r3
 800f4f8:	781c      	ldrb	r4, [r3, #0]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	68b9      	ldr	r1, [r7, #8]
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	0023      	movs	r3, r4
 800f506:	f000 f83b 	bl	800f580 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f50a:	697b      	ldr	r3, [r7, #20]
	}
 800f50c:	0018      	movs	r0, r3
 800f50e:	46bd      	mov	sp, r7
 800f510:	b007      	add	sp, #28
 800f512:	bd90      	pop	{r4, r7, pc}

0800f514 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f514:	b590      	push	{r4, r7, lr}
 800f516:	b08b      	sub	sp, #44	; 0x2c
 800f518:	af02      	add	r7, sp, #8
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	1dfb      	adds	r3, r7, #7
 800f520:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <xQueueGenericCreate+0x18>
 800f528:	b672      	cpsid	i
 800f52a:	e7fe      	b.n	800f52a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d102      	bne.n	800f538 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f532:	2300      	movs	r3, #0
 800f534:	61fb      	str	r3, [r7, #28]
 800f536:	e003      	b.n	800f540 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	4353      	muls	r3, r2
 800f53e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	3350      	adds	r3, #80	; 0x50
 800f544:	0018      	movs	r0, r3
 800f546:	f002 fafb 	bl	8011b40 <pvPortMalloc>
 800f54a:	0003      	movs	r3, r0
 800f54c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d010      	beq.n	800f576 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	3350      	adds	r3, #80	; 0x50
 800f558:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	2246      	movs	r2, #70	; 0x46
 800f55e:	2100      	movs	r1, #0
 800f560:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f562:	1dfb      	adds	r3, r7, #7
 800f564:	781c      	ldrb	r4, [r3, #0]
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	68b9      	ldr	r1, [r7, #8]
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	9300      	str	r3, [sp, #0]
 800f570:	0023      	movs	r3, r4
 800f572:	f000 f805 	bl	800f580 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f576:	69bb      	ldr	r3, [r7, #24]
	}
 800f578:	0018      	movs	r0, r3
 800f57a:	46bd      	mov	sp, r7
 800f57c:	b009      	add	sp, #36	; 0x24
 800f57e:	bd90      	pop	{r4, r7, pc}

0800f580 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
 800f58c:	001a      	movs	r2, r3
 800f58e:	1cfb      	adds	r3, r7, #3
 800f590:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d103      	bne.n	800f5a0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	69ba      	ldr	r2, [r7, #24]
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	e002      	b.n	800f5a6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	2101      	movs	r1, #1
 800f5b6:	0018      	movs	r0, r3
 800f5b8:	f7ff ff0d 	bl	800f3d6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	1cfa      	adds	r2, r7, #3
 800f5c0:	214c      	movs	r1, #76	; 0x4c
 800f5c2:	7812      	ldrb	r2, [r2, #0]
 800f5c4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f5c6:	46c0      	nop			; (mov r8, r8)
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	b004      	add	sp, #16
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b082      	sub	sp, #8
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00e      	beq.n	800f5fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	f000 f89b 	bl	800f730 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f5fa:	46c0      	nop			; (mov r8, r8)
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	b002      	add	sp, #8
 800f600:	bd80      	pop	{r7, pc}

0800f602 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f602:	b580      	push	{r7, lr}
 800f604:	b086      	sub	sp, #24
 800f606:	af00      	add	r7, sp, #0
 800f608:	0002      	movs	r2, r0
 800f60a:	1dfb      	adds	r3, r7, #7
 800f60c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f60e:	2301      	movs	r3, #1
 800f610:	617b      	str	r3, [r7, #20]
 800f612:	2300      	movs	r3, #0
 800f614:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f616:	1dfb      	adds	r3, r7, #7
 800f618:	781a      	ldrb	r2, [r3, #0]
 800f61a:	6939      	ldr	r1, [r7, #16]
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	0018      	movs	r0, r3
 800f620:	f7ff ff78 	bl	800f514 <xQueueGenericCreate>
 800f624:	0003      	movs	r3, r0
 800f626:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	0018      	movs	r0, r3
 800f62c:	f7ff ffcf 	bl	800f5ce <prvInitialiseMutex>

		return pxNewQueue;
 800f630:	68fb      	ldr	r3, [r7, #12]
	}
 800f632:	0018      	movs	r0, r3
 800f634:	46bd      	mov	sp, r7
 800f636:	b006      	add	sp, #24
 800f638:	bd80      	pop	{r7, pc}

0800f63a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b088      	sub	sp, #32
 800f63e:	af02      	add	r7, sp, #8
 800f640:	0002      	movs	r2, r0
 800f642:	6039      	str	r1, [r7, #0]
 800f644:	1dfb      	adds	r3, r7, #7
 800f646:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f648:	2301      	movs	r3, #1
 800f64a:	617b      	str	r3, [r7, #20]
 800f64c:	2300      	movs	r3, #0
 800f64e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f650:	683a      	ldr	r2, [r7, #0]
 800f652:	6939      	ldr	r1, [r7, #16]
 800f654:	6978      	ldr	r0, [r7, #20]
 800f656:	1dfb      	adds	r3, r7, #7
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	0013      	movs	r3, r2
 800f65e:	2200      	movs	r2, #0
 800f660:	f7ff ff0d 	bl	800f47e <xQueueGenericCreateStatic>
 800f664:	0003      	movs	r3, r0
 800f666:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	0018      	movs	r0, r3
 800f66c:	f7ff ffaf 	bl	800f5ce <prvInitialiseMutex>

		return pxNewQueue;
 800f670:	68fb      	ldr	r3, [r7, #12]
	}
 800f672:	0018      	movs	r0, r3
 800f674:	46bd      	mov	sp, r7
 800f676:	b006      	add	sp, #24
 800f678:	bd80      	pop	{r7, pc}

0800f67a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f67a:	b590      	push	{r4, r7, lr}
 800f67c:	b085      	sub	sp, #20
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d101      	bne.n	800f690 <xQueueGiveMutexRecursive+0x16>
 800f68c:	b672      	cpsid	i
 800f68e:	e7fe      	b.n	800f68e <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	685c      	ldr	r4, [r3, #4]
 800f694:	f001 fbb6 	bl	8010e04 <xTaskGetCurrentTaskHandle>
 800f698:	0003      	movs	r3, r0
 800f69a:	429c      	cmp	r4, r3
 800f69c:	d111      	bne.n	800f6c2 <xQueueGiveMutexRecursive+0x48>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	1e5a      	subs	r2, r3, #1
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d105      	bne.n	800f6bc <xQueueGiveMutexRecursive+0x42>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f6b0:	68b8      	ldr	r0, [r7, #8]
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	f000 f83a 	bl	800f730 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	e001      	b.n	800f6c6 <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
	}
 800f6c8:	0018      	movs	r0, r3
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	b005      	add	sp, #20
 800f6ce:	bd90      	pop	{r4, r7, pc}

0800f6d0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f6d0:	b590      	push	{r4, r7, lr}
 800f6d2:	b085      	sub	sp, #20
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d101      	bne.n	800f6e8 <xQueueTakeMutexRecursive+0x18>
 800f6e4:	b672      	cpsid	i
 800f6e6:	e7fe      	b.n	800f6e6 <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	685c      	ldr	r4, [r3, #4]
 800f6ec:	f001 fb8a 	bl	8010e04 <xTaskGetCurrentTaskHandle>
 800f6f0:	0003      	movs	r3, r0
 800f6f2:	429c      	cmp	r4, r3
 800f6f4:	d107      	bne.n	800f706 <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	1c5a      	adds	r2, r3, #1
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f700:	2301      	movs	r3, #1
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	e00f      	b.n	800f726 <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	0011      	movs	r1, r2
 800f70c:	0018      	movs	r0, r3
 800f70e:	f000 f9f9 	bl	800fb04 <xQueueSemaphoreTake>
 800f712:	0003      	movs	r3, r0
 800f714:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d004      	beq.n	800f726 <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f726:	68fb      	ldr	r3, [r7, #12]
	}
 800f728:	0018      	movs	r0, r3
 800f72a:	46bd      	mov	sp, r7
 800f72c:	b005      	add	sp, #20
 800f72e:	bd90      	pop	{r4, r7, pc}

0800f730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b08a      	sub	sp, #40	; 0x28
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	607a      	str	r2, [r7, #4]
 800f73c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f73e:	2300      	movs	r3, #0
 800f740:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f746:	6a3b      	ldr	r3, [r7, #32]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d101      	bne.n	800f750 <xQueueGenericSend+0x20>
 800f74c:	b672      	cpsid	i
 800f74e:	e7fe      	b.n	800f74e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d103      	bne.n	800f75e <xQueueGenericSend+0x2e>
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d101      	bne.n	800f762 <xQueueGenericSend+0x32>
 800f75e:	2301      	movs	r3, #1
 800f760:	e000      	b.n	800f764 <xQueueGenericSend+0x34>
 800f762:	2300      	movs	r3, #0
 800f764:	2b00      	cmp	r3, #0
 800f766:	d101      	bne.n	800f76c <xQueueGenericSend+0x3c>
 800f768:	b672      	cpsid	i
 800f76a:	e7fe      	b.n	800f76a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d103      	bne.n	800f77a <xQueueGenericSend+0x4a>
 800f772:	6a3b      	ldr	r3, [r7, #32]
 800f774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f776:	2b01      	cmp	r3, #1
 800f778:	d101      	bne.n	800f77e <xQueueGenericSend+0x4e>
 800f77a:	2301      	movs	r3, #1
 800f77c:	e000      	b.n	800f780 <xQueueGenericSend+0x50>
 800f77e:	2300      	movs	r3, #0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d101      	bne.n	800f788 <xQueueGenericSend+0x58>
 800f784:	b672      	cpsid	i
 800f786:	e7fe      	b.n	800f786 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f788:	f001 fb4a 	bl	8010e20 <xTaskGetSchedulerState>
 800f78c:	1e03      	subs	r3, r0, #0
 800f78e:	d102      	bne.n	800f796 <xQueueGenericSend+0x66>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <xQueueGenericSend+0x6a>
 800f796:	2301      	movs	r3, #1
 800f798:	e000      	b.n	800f79c <xQueueGenericSend+0x6c>
 800f79a:	2300      	movs	r3, #0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d101      	bne.n	800f7a4 <xQueueGenericSend+0x74>
 800f7a0:	b672      	cpsid	i
 800f7a2:	e7fe      	b.n	800f7a2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f7a4:	f002 f934 	bl	8011a10 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f7a8:	6a3b      	ldr	r3, [r7, #32]
 800f7aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7ac:	6a3b      	ldr	r3, [r7, #32]
 800f7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d302      	bcc.n	800f7ba <xQueueGenericSend+0x8a>
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2b02      	cmp	r3, #2
 800f7b8:	d11e      	bne.n	800f7f8 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	68b9      	ldr	r1, [r7, #8]
 800f7be:	6a3b      	ldr	r3, [r7, #32]
 800f7c0:	0018      	movs	r0, r3
 800f7c2:	f000 fb34 	bl	800fe2e <prvCopyDataToQueue>
 800f7c6:	0003      	movs	r3, r0
 800f7c8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7ca:	6a3b      	ldr	r3, [r7, #32]
 800f7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d009      	beq.n	800f7e6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7d2:	6a3b      	ldr	r3, [r7, #32]
 800f7d4:	3324      	adds	r3, #36	; 0x24
 800f7d6:	0018      	movs	r0, r3
 800f7d8:	f001 f924 	bl	8010a24 <xTaskRemoveFromEventList>
 800f7dc:	1e03      	subs	r3, r0, #0
 800f7de:	d007      	beq.n	800f7f0 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f7e0:	f002 f906 	bl	80119f0 <vPortYield>
 800f7e4:	e004      	b.n	800f7f0 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f7ec:	f002 f900 	bl	80119f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f7f0:	f002 f920 	bl	8011a34 <vPortExitCritical>
				return pdPASS;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e05b      	b.n	800f8b0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d103      	bne.n	800f806 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f7fe:	f002 f919 	bl	8011a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f802:	2300      	movs	r3, #0
 800f804:	e054      	b.n	800f8b0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d106      	bne.n	800f81a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f80c:	2314      	movs	r3, #20
 800f80e:	18fb      	adds	r3, r7, r3
 800f810:	0018      	movs	r0, r3
 800f812:	f001 f9b5 	bl	8010b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f816:	2301      	movs	r3, #1
 800f818:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f81a:	f002 f90b 	bl	8011a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f81e:	f000 febb 	bl	8010598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f822:	f002 f8f5 	bl	8011a10 <vPortEnterCritical>
 800f826:	6a3b      	ldr	r3, [r7, #32]
 800f828:	2244      	movs	r2, #68	; 0x44
 800f82a:	5c9b      	ldrb	r3, [r3, r2]
 800f82c:	b25b      	sxtb	r3, r3
 800f82e:	3301      	adds	r3, #1
 800f830:	d103      	bne.n	800f83a <xQueueGenericSend+0x10a>
 800f832:	6a3b      	ldr	r3, [r7, #32]
 800f834:	2244      	movs	r2, #68	; 0x44
 800f836:	2100      	movs	r1, #0
 800f838:	5499      	strb	r1, [r3, r2]
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	2245      	movs	r2, #69	; 0x45
 800f83e:	5c9b      	ldrb	r3, [r3, r2]
 800f840:	b25b      	sxtb	r3, r3
 800f842:	3301      	adds	r3, #1
 800f844:	d103      	bne.n	800f84e <xQueueGenericSend+0x11e>
 800f846:	6a3b      	ldr	r3, [r7, #32]
 800f848:	2245      	movs	r2, #69	; 0x45
 800f84a:	2100      	movs	r1, #0
 800f84c:	5499      	strb	r1, [r3, r2]
 800f84e:	f002 f8f1 	bl	8011a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f852:	1d3a      	adds	r2, r7, #4
 800f854:	2314      	movs	r3, #20
 800f856:	18fb      	adds	r3, r7, r3
 800f858:	0011      	movs	r1, r2
 800f85a:	0018      	movs	r0, r3
 800f85c:	f001 f9a4 	bl	8010ba8 <xTaskCheckForTimeOut>
 800f860:	1e03      	subs	r3, r0, #0
 800f862:	d11e      	bne.n	800f8a2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f864:	6a3b      	ldr	r3, [r7, #32]
 800f866:	0018      	movs	r0, r3
 800f868:	f000 fbe6 	bl	8010038 <prvIsQueueFull>
 800f86c:	1e03      	subs	r3, r0, #0
 800f86e:	d011      	beq.n	800f894 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	3310      	adds	r3, #16
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	0011      	movs	r1, r2
 800f878:	0018      	movs	r0, r3
 800f87a:	f001 f861 	bl	8010940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f87e:	6a3b      	ldr	r3, [r7, #32]
 800f880:	0018      	movs	r0, r3
 800f882:	f000 fb65 	bl	800ff50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f886:	f000 fe93 	bl	80105b0 <xTaskResumeAll>
 800f88a:	1e03      	subs	r3, r0, #0
 800f88c:	d18a      	bne.n	800f7a4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800f88e:	f002 f8af 	bl	80119f0 <vPortYield>
 800f892:	e787      	b.n	800f7a4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f894:	6a3b      	ldr	r3, [r7, #32]
 800f896:	0018      	movs	r0, r3
 800f898:	f000 fb5a 	bl	800ff50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f89c:	f000 fe88 	bl	80105b0 <xTaskResumeAll>
 800f8a0:	e780      	b.n	800f7a4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f8a2:	6a3b      	ldr	r3, [r7, #32]
 800f8a4:	0018      	movs	r0, r3
 800f8a6:	f000 fb53 	bl	800ff50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8aa:	f000 fe81 	bl	80105b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f8ae:	2300      	movs	r3, #0
		}
	}
}
 800f8b0:	0018      	movs	r0, r3
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	b00a      	add	sp, #40	; 0x28
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f8b8:	b590      	push	{r4, r7, lr}
 800f8ba:	b089      	sub	sp, #36	; 0x24
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800f8ca:	69bb      	ldr	r3, [r7, #24]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d101      	bne.n	800f8d4 <xQueueGenericSendFromISR+0x1c>
 800f8d0:	b672      	cpsid	i
 800f8d2:	e7fe      	b.n	800f8d2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d103      	bne.n	800f8e2 <xQueueGenericSendFromISR+0x2a>
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <xQueueGenericSendFromISR+0x2e>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	e000      	b.n	800f8e8 <xQueueGenericSendFromISR+0x30>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <xQueueGenericSendFromISR+0x38>
 800f8ec:	b672      	cpsid	i
 800f8ee:	e7fe      	b.n	800f8ee <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d103      	bne.n	800f8fe <xQueueGenericSendFromISR+0x46>
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d101      	bne.n	800f902 <xQueueGenericSendFromISR+0x4a>
 800f8fe:	2301      	movs	r3, #1
 800f900:	e000      	b.n	800f904 <xQueueGenericSendFromISR+0x4c>
 800f902:	2300      	movs	r3, #0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d101      	bne.n	800f90c <xQueueGenericSendFromISR+0x54>
 800f908:	b672      	cpsid	i
 800f90a:	e7fe      	b.n	800f90a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f90c:	f002 f8aa 	bl	8011a64 <ulSetInterruptMaskFromISR>
 800f910:	0003      	movs	r3, r0
 800f912:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d302      	bcc.n	800f926 <xQueueGenericSendFromISR+0x6e>
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	2b02      	cmp	r3, #2
 800f924:	d12e      	bne.n	800f984 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f926:	2413      	movs	r4, #19
 800f928:	193b      	adds	r3, r7, r4
 800f92a:	69ba      	ldr	r2, [r7, #24]
 800f92c:	2145      	movs	r1, #69	; 0x45
 800f92e:	5c52      	ldrb	r2, [r2, r1]
 800f930:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	68b9      	ldr	r1, [r7, #8]
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	0018      	movs	r0, r3
 800f93a:	f000 fa78 	bl	800fe2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f93e:	193b      	adds	r3, r7, r4
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	b25b      	sxtb	r3, r3
 800f944:	3301      	adds	r3, #1
 800f946:	d111      	bne.n	800f96c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f948:	69bb      	ldr	r3, [r7, #24]
 800f94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d016      	beq.n	800f97e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	3324      	adds	r3, #36	; 0x24
 800f954:	0018      	movs	r0, r3
 800f956:	f001 f865 	bl	8010a24 <xTaskRemoveFromEventList>
 800f95a:	1e03      	subs	r3, r0, #0
 800f95c:	d00f      	beq.n	800f97e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d00c      	beq.n	800f97e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	601a      	str	r2, [r3, #0]
 800f96a:	e008      	b.n	800f97e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f96c:	2313      	movs	r3, #19
 800f96e:	18fb      	adds	r3, r7, r3
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	3301      	adds	r3, #1
 800f974:	b2db      	uxtb	r3, r3
 800f976:	b259      	sxtb	r1, r3
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	2245      	movs	r2, #69	; 0x45
 800f97c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800f97e:	2301      	movs	r3, #1
 800f980:	61fb      	str	r3, [r7, #28]
		{
 800f982:	e001      	b.n	800f988 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f984:	2300      	movs	r3, #0
 800f986:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	0018      	movs	r0, r3
 800f98c:	f002 f870 	bl	8011a70 <vClearInterruptMaskFromISR>

	return xReturn;
 800f990:	69fb      	ldr	r3, [r7, #28]
}
 800f992:	0018      	movs	r0, r3
 800f994:	46bd      	mov	sp, r7
 800f996:	b009      	add	sp, #36	; 0x24
 800f998:	bd90      	pop	{r4, r7, pc}

0800f99a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b08a      	sub	sp, #40	; 0x28
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	60f8      	str	r0, [r7, #12]
 800f9a2:	60b9      	str	r1, [r7, #8]
 800f9a4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d101      	bne.n	800f9b8 <xQueueReceive+0x1e>
 800f9b4:	b672      	cpsid	i
 800f9b6:	e7fe      	b.n	800f9b6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d103      	bne.n	800f9c6 <xQueueReceive+0x2c>
 800f9be:	6a3b      	ldr	r3, [r7, #32]
 800f9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <xQueueReceive+0x30>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	e000      	b.n	800f9cc <xQueueReceive+0x32>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d101      	bne.n	800f9d4 <xQueueReceive+0x3a>
 800f9d0:	b672      	cpsid	i
 800f9d2:	e7fe      	b.n	800f9d2 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9d4:	f001 fa24 	bl	8010e20 <xTaskGetSchedulerState>
 800f9d8:	1e03      	subs	r3, r0, #0
 800f9da:	d102      	bne.n	800f9e2 <xQueueReceive+0x48>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <xQueueReceive+0x4c>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e000      	b.n	800f9e8 <xQueueReceive+0x4e>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d101      	bne.n	800f9f0 <xQueueReceive+0x56>
 800f9ec:	b672      	cpsid	i
 800f9ee:	e7fe      	b.n	800f9ee <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800f9f0:	f002 f80e 	bl	8011a10 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d01a      	beq.n	800fa36 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	0011      	movs	r1, r2
 800fa06:	0018      	movs	r0, r3
 800fa08:	f000 fa7c 	bl	800ff04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	1e5a      	subs	r2, r3, #1
 800fa10:	6a3b      	ldr	r3, [r7, #32]
 800fa12:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa14:	6a3b      	ldr	r3, [r7, #32]
 800fa16:	691b      	ldr	r3, [r3, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d008      	beq.n	800fa2e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa1c:	6a3b      	ldr	r3, [r7, #32]
 800fa1e:	3310      	adds	r3, #16
 800fa20:	0018      	movs	r0, r3
 800fa22:	f000 ffff 	bl	8010a24 <xTaskRemoveFromEventList>
 800fa26:	1e03      	subs	r3, r0, #0
 800fa28:	d001      	beq.n	800fa2e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa2a:	f001 ffe1 	bl	80119f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa2e:	f002 f801 	bl	8011a34 <vPortExitCritical>
				return pdPASS;
 800fa32:	2301      	movs	r3, #1
 800fa34:	e062      	b.n	800fafc <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d103      	bne.n	800fa44 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa3c:	f001 fffa 	bl	8011a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fa40:	2300      	movs	r3, #0
 800fa42:	e05b      	b.n	800fafc <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d106      	bne.n	800fa58 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa4a:	2314      	movs	r3, #20
 800fa4c:	18fb      	adds	r3, r7, r3
 800fa4e:	0018      	movs	r0, r3
 800fa50:	f001 f896 	bl	8010b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa54:	2301      	movs	r3, #1
 800fa56:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa58:	f001 ffec 	bl	8011a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa5c:	f000 fd9c 	bl	8010598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa60:	f001 ffd6 	bl	8011a10 <vPortEnterCritical>
 800fa64:	6a3b      	ldr	r3, [r7, #32]
 800fa66:	2244      	movs	r2, #68	; 0x44
 800fa68:	5c9b      	ldrb	r3, [r3, r2]
 800fa6a:	b25b      	sxtb	r3, r3
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	d103      	bne.n	800fa78 <xQueueReceive+0xde>
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	2244      	movs	r2, #68	; 0x44
 800fa74:	2100      	movs	r1, #0
 800fa76:	5499      	strb	r1, [r3, r2]
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	2245      	movs	r2, #69	; 0x45
 800fa7c:	5c9b      	ldrb	r3, [r3, r2]
 800fa7e:	b25b      	sxtb	r3, r3
 800fa80:	3301      	adds	r3, #1
 800fa82:	d103      	bne.n	800fa8c <xQueueReceive+0xf2>
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	2245      	movs	r2, #69	; 0x45
 800fa88:	2100      	movs	r1, #0
 800fa8a:	5499      	strb	r1, [r3, r2]
 800fa8c:	f001 ffd2 	bl	8011a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa90:	1d3a      	adds	r2, r7, #4
 800fa92:	2314      	movs	r3, #20
 800fa94:	18fb      	adds	r3, r7, r3
 800fa96:	0011      	movs	r1, r2
 800fa98:	0018      	movs	r0, r3
 800fa9a:	f001 f885 	bl	8010ba8 <xTaskCheckForTimeOut>
 800fa9e:	1e03      	subs	r3, r0, #0
 800faa0:	d11e      	bne.n	800fae0 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800faa2:	6a3b      	ldr	r3, [r7, #32]
 800faa4:	0018      	movs	r0, r3
 800faa6:	f000 fab1 	bl	801000c <prvIsQueueEmpty>
 800faaa:	1e03      	subs	r3, r0, #0
 800faac:	d011      	beq.n	800fad2 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800faae:	6a3b      	ldr	r3, [r7, #32]
 800fab0:	3324      	adds	r3, #36	; 0x24
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	0011      	movs	r1, r2
 800fab6:	0018      	movs	r0, r3
 800fab8:	f000 ff42 	bl	8010940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fabc:	6a3b      	ldr	r3, [r7, #32]
 800fabe:	0018      	movs	r0, r3
 800fac0:	f000 fa46 	bl	800ff50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fac4:	f000 fd74 	bl	80105b0 <xTaskResumeAll>
 800fac8:	1e03      	subs	r3, r0, #0
 800faca:	d191      	bne.n	800f9f0 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800facc:	f001 ff90 	bl	80119f0 <vPortYield>
 800fad0:	e78e      	b.n	800f9f0 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fad2:	6a3b      	ldr	r3, [r7, #32]
 800fad4:	0018      	movs	r0, r3
 800fad6:	f000 fa3b 	bl	800ff50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fada:	f000 fd69 	bl	80105b0 <xTaskResumeAll>
 800fade:	e787      	b.n	800f9f0 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	0018      	movs	r0, r3
 800fae4:	f000 fa34 	bl	800ff50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fae8:	f000 fd62 	bl	80105b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800faec:	6a3b      	ldr	r3, [r7, #32]
 800faee:	0018      	movs	r0, r3
 800faf0:	f000 fa8c 	bl	801000c <prvIsQueueEmpty>
 800faf4:	1e03      	subs	r3, r0, #0
 800faf6:	d100      	bne.n	800fafa <xQueueReceive+0x160>
 800faf8:	e77a      	b.n	800f9f0 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fafa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fafc:	0018      	movs	r0, r3
 800fafe:	46bd      	mov	sp, r7
 800fb00:	b00a      	add	sp, #40	; 0x28
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08a      	sub	sp, #40	; 0x28
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fb16:	2300      	movs	r3, #0
 800fb18:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <xQueueSemaphoreTake+0x20>
 800fb20:	b672      	cpsid	i
 800fb22:	e7fe      	b.n	800fb22 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <xQueueSemaphoreTake+0x2c>
 800fb2c:	b672      	cpsid	i
 800fb2e:	e7fe      	b.n	800fb2e <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb30:	f001 f976 	bl	8010e20 <xTaskGetSchedulerState>
 800fb34:	1e03      	subs	r3, r0, #0
 800fb36:	d102      	bne.n	800fb3e <xQueueSemaphoreTake+0x3a>
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <xQueueSemaphoreTake+0x3e>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <xQueueSemaphoreTake+0x40>
 800fb42:	2300      	movs	r3, #0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d101      	bne.n	800fb4c <xQueueSemaphoreTake+0x48>
 800fb48:	b672      	cpsid	i
 800fb4a:	e7fe      	b.n	800fb4a <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb4c:	f001 ff60 	bl	8011a10 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb54:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d01d      	beq.n	800fb98 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	1e5a      	subs	r2, r3, #1
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d104      	bne.n	800fb76 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fb6c:	f001 fac8 	bl	8011100 <pvTaskIncrementMutexHeldCount>
 800fb70:	0002      	movs	r2, r0
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d008      	beq.n	800fb90 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	3310      	adds	r3, #16
 800fb82:	0018      	movs	r0, r3
 800fb84:	f000 ff4e 	bl	8010a24 <xTaskRemoveFromEventList>
 800fb88:	1e03      	subs	r3, r0, #0
 800fb8a:	d001      	beq.n	800fb90 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb8c:	f001 ff30 	bl	80119f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb90:	f001 ff50 	bl	8011a34 <vPortExitCritical>
				return pdPASS;
 800fb94:	2301      	movs	r3, #1
 800fb96:	e08b      	b.n	800fcb0 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d108      	bne.n	800fbb0 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fb9e:	6a3b      	ldr	r3, [r7, #32]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <xQueueSemaphoreTake+0xa4>
 800fba4:	b672      	cpsid	i
 800fba6:	e7fe      	b.n	800fba6 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fba8:	f001 ff44 	bl	8011a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fbac:	2300      	movs	r3, #0
 800fbae:	e07f      	b.n	800fcb0 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d106      	bne.n	800fbc4 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fbb6:	230c      	movs	r3, #12
 800fbb8:	18fb      	adds	r3, r7, r3
 800fbba:	0018      	movs	r0, r3
 800fbbc:	f000 ffe0 	bl	8010b80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fbc4:	f001 ff36 	bl	8011a34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fbc8:	f000 fce6 	bl	8010598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbcc:	f001 ff20 	bl	8011a10 <vPortEnterCritical>
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	2244      	movs	r2, #68	; 0x44
 800fbd4:	5c9b      	ldrb	r3, [r3, r2]
 800fbd6:	b25b      	sxtb	r3, r3
 800fbd8:	3301      	adds	r3, #1
 800fbda:	d103      	bne.n	800fbe4 <xQueueSemaphoreTake+0xe0>
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	2244      	movs	r2, #68	; 0x44
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	5499      	strb	r1, [r3, r2]
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	2245      	movs	r2, #69	; 0x45
 800fbe8:	5c9b      	ldrb	r3, [r3, r2]
 800fbea:	b25b      	sxtb	r3, r3
 800fbec:	3301      	adds	r3, #1
 800fbee:	d103      	bne.n	800fbf8 <xQueueSemaphoreTake+0xf4>
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	2245      	movs	r2, #69	; 0x45
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	5499      	strb	r1, [r3, r2]
 800fbf8:	f001 ff1c 	bl	8011a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbfc:	003a      	movs	r2, r7
 800fbfe:	230c      	movs	r3, #12
 800fc00:	18fb      	adds	r3, r7, r3
 800fc02:	0011      	movs	r1, r2
 800fc04:	0018      	movs	r0, r3
 800fc06:	f000 ffcf 	bl	8010ba8 <xTaskCheckForTimeOut>
 800fc0a:	1e03      	subs	r3, r0, #0
 800fc0c:	d12e      	bne.n	800fc6c <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc0e:	69fb      	ldr	r3, [r7, #28]
 800fc10:	0018      	movs	r0, r3
 800fc12:	f000 f9fb 	bl	801000c <prvIsQueueEmpty>
 800fc16:	1e03      	subs	r3, r0, #0
 800fc18:	d021      	beq.n	800fc5e <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d10a      	bne.n	800fc38 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800fc22:	f001 fef5 	bl	8011a10 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	0018      	movs	r0, r3
 800fc2c:	f001 f914 	bl	8010e58 <xTaskPriorityInherit>
 800fc30:	0003      	movs	r3, r0
 800fc32:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800fc34:	f001 fefe 	bl	8011a34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	3324      	adds	r3, #36	; 0x24
 800fc3c:	683a      	ldr	r2, [r7, #0]
 800fc3e:	0011      	movs	r1, r2
 800fc40:	0018      	movs	r0, r3
 800fc42:	f000 fe7d 	bl	8010940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	0018      	movs	r0, r3
 800fc4a:	f000 f981 	bl	800ff50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc4e:	f000 fcaf 	bl	80105b0 <xTaskResumeAll>
 800fc52:	1e03      	subs	r3, r0, #0
 800fc54:	d000      	beq.n	800fc58 <xQueueSemaphoreTake+0x154>
 800fc56:	e779      	b.n	800fb4c <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800fc58:	f001 feca 	bl	80119f0 <vPortYield>
 800fc5c:	e776      	b.n	800fb4c <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	0018      	movs	r0, r3
 800fc62:	f000 f975 	bl	800ff50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc66:	f000 fca3 	bl	80105b0 <xTaskResumeAll>
 800fc6a:	e76f      	b.n	800fb4c <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	0018      	movs	r0, r3
 800fc70:	f000 f96e 	bl	800ff50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc74:	f000 fc9c 	bl	80105b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	0018      	movs	r0, r3
 800fc7c:	f000 f9c6 	bl	801000c <prvIsQueueEmpty>
 800fc80:	1e03      	subs	r3, r0, #0
 800fc82:	d100      	bne.n	800fc86 <xQueueSemaphoreTake+0x182>
 800fc84:	e762      	b.n	800fb4c <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fc86:	6a3b      	ldr	r3, [r7, #32]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d010      	beq.n	800fcae <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800fc8c:	f001 fec0 	bl	8011a10 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	0018      	movs	r0, r3
 800fc94:	f000 f8b5 	bl	800fe02 <prvGetDisinheritPriorityAfterTimeout>
 800fc98:	0003      	movs	r3, r0
 800fc9a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	0011      	movs	r1, r2
 800fca4:	0018      	movs	r0, r3
 800fca6:	f001 f9a1 	bl	8010fec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fcaa:	f001 fec3 	bl	8011a34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fcae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fcb0:	0018      	movs	r0, r3
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	b00a      	add	sp, #40	; 0x28
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fcb8:	b590      	push	{r4, r7, lr}
 800fcba:	b08b      	sub	sp, #44	; 0x2c
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d101      	bne.n	800fcd2 <xQueueReceiveFromISR+0x1a>
 800fcce:	b672      	cpsid	i
 800fcd0:	e7fe      	b.n	800fcd0 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d103      	bne.n	800fce0 <xQueueReceiveFromISR+0x28>
 800fcd8:	6a3b      	ldr	r3, [r7, #32]
 800fcda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d101      	bne.n	800fce4 <xQueueReceiveFromISR+0x2c>
 800fce0:	2301      	movs	r3, #1
 800fce2:	e000      	b.n	800fce6 <xQueueReceiveFromISR+0x2e>
 800fce4:	2300      	movs	r3, #0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d101      	bne.n	800fcee <xQueueReceiveFromISR+0x36>
 800fcea:	b672      	cpsid	i
 800fcec:	e7fe      	b.n	800fcec <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcee:	f001 feb9 	bl	8011a64 <ulSetInterruptMaskFromISR>
 800fcf2:	0003      	movs	r3, r0
 800fcf4:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcfa:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcfc:	69bb      	ldr	r3, [r7, #24]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d032      	beq.n	800fd68 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fd02:	2417      	movs	r4, #23
 800fd04:	193b      	adds	r3, r7, r4
 800fd06:	6a3a      	ldr	r2, [r7, #32]
 800fd08:	2144      	movs	r1, #68	; 0x44
 800fd0a:	5c52      	ldrb	r2, [r2, r1]
 800fd0c:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd0e:	68ba      	ldr	r2, [r7, #8]
 800fd10:	6a3b      	ldr	r3, [r7, #32]
 800fd12:	0011      	movs	r1, r2
 800fd14:	0018      	movs	r0, r3
 800fd16:	f000 f8f5 	bl	800ff04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	1e5a      	subs	r2, r3, #1
 800fd1e:	6a3b      	ldr	r3, [r7, #32]
 800fd20:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fd22:	193b      	adds	r3, r7, r4
 800fd24:	781b      	ldrb	r3, [r3, #0]
 800fd26:	b25b      	sxtb	r3, r3
 800fd28:	3301      	adds	r3, #1
 800fd2a:	d111      	bne.n	800fd50 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd2c:	6a3b      	ldr	r3, [r7, #32]
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d016      	beq.n	800fd62 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd34:	6a3b      	ldr	r3, [r7, #32]
 800fd36:	3310      	adds	r3, #16
 800fd38:	0018      	movs	r0, r3
 800fd3a:	f000 fe73 	bl	8010a24 <xTaskRemoveFromEventList>
 800fd3e:	1e03      	subs	r3, r0, #0
 800fd40:	d00f      	beq.n	800fd62 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00c      	beq.n	800fd62 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	601a      	str	r2, [r3, #0]
 800fd4e:	e008      	b.n	800fd62 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fd50:	2317      	movs	r3, #23
 800fd52:	18fb      	adds	r3, r7, r3
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	3301      	adds	r3, #1
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	b259      	sxtb	r1, r3
 800fd5c:	6a3b      	ldr	r3, [r7, #32]
 800fd5e:	2244      	movs	r2, #68	; 0x44
 800fd60:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800fd62:	2301      	movs	r3, #1
 800fd64:	627b      	str	r3, [r7, #36]	; 0x24
 800fd66:	e001      	b.n	800fd6c <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	0018      	movs	r0, r3
 800fd70:	f001 fe7e 	bl	8011a70 <vClearInterruptMaskFromISR>

	return xReturn;
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd76:	0018      	movs	r0, r3
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	b00b      	add	sp, #44	; 0x2c
 800fd7c:	bd90      	pop	{r4, r7, pc}

0800fd7e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b084      	sub	sp, #16
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d101      	bne.n	800fd90 <uxQueueMessagesWaiting+0x12>
 800fd8c:	b672      	cpsid	i
 800fd8e:	e7fe      	b.n	800fd8e <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 800fd90:	f001 fe3e 	bl	8011a10 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd98:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800fd9a:	f001 fe4b 	bl	8011a34 <vPortExitCritical>

	return uxReturn;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800fda0:	0018      	movs	r0, r3
 800fda2:	46bd      	mov	sp, r7
 800fda4:	b004      	add	sp, #16
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d101      	bne.n	800fdba <uxQueueMessagesWaitingFromISR+0x12>
 800fdb6:	b672      	cpsid	i
 800fdb8:	e7fe      	b.n	800fdb8 <uxQueueMessagesWaitingFromISR+0x10>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdbe:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800fdc2:	0018      	movs	r0, r3
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	b004      	add	sp, #16
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b084      	sub	sp, #16
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d101      	bne.n	800fde0 <vQueueDelete+0x16>
 800fddc:	b672      	cpsid	i
 800fdde:	e7fe      	b.n	800fdde <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	0018      	movs	r0, r3
 800fde4:	f000 f968 	bl	80100b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2246      	movs	r2, #70	; 0x46
 800fdec:	5c9b      	ldrb	r3, [r3, r2]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d103      	bne.n	800fdfa <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	0018      	movs	r0, r3
 800fdf6:	f001 ff49 	bl	8011c8c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fdfa:	46c0      	nop			; (mov r8, r8)
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	b004      	add	sp, #16
 800fe00:	bd80      	pop	{r7, pc}

0800fe02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b084      	sub	sp, #16
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d006      	beq.n	800fe20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	2238      	movs	r2, #56	; 0x38
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	60fb      	str	r3, [r7, #12]
 800fe1e:	e001      	b.n	800fe24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fe20:	2300      	movs	r3, #0
 800fe22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fe24:	68fb      	ldr	r3, [r7, #12]
	}
 800fe26:	0018      	movs	r0, r3
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	b004      	add	sp, #16
 800fe2c:	bd80      	pop	{r7, pc}

0800fe2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b086      	sub	sp, #24
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	60f8      	str	r0, [r7, #12]
 800fe36:	60b9      	str	r1, [r7, #8]
 800fe38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d10e      	bne.n	800fe6a <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d14e      	bne.n	800fef2 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	0018      	movs	r0, r3
 800fe5a:	f001 f86b 	bl	8010f34 <xTaskPriorityDisinherit>
 800fe5e:	0003      	movs	r3, r0
 800fe60:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2200      	movs	r2, #0
 800fe66:	605a      	str	r2, [r3, #4]
 800fe68:	e043      	b.n	800fef2 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d119      	bne.n	800fea4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6898      	ldr	r0, [r3, #8]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	0019      	movs	r1, r3
 800fe7c:	f002 fa12 	bl	80122a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	689a      	ldr	r2, [r3, #8]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe88:	18d2      	adds	r2, r2, r3
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	689a      	ldr	r2, [r3, #8]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d32b      	bcc.n	800fef2 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	609a      	str	r2, [r3, #8]
 800fea2:	e026      	b.n	800fef2 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	68d8      	ldr	r0, [r3, #12]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	0019      	movs	r1, r3
 800feb0:	f002 f9f8 	bl	80122a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	68da      	ldr	r2, [r3, #12]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800febc:	425b      	negs	r3, r3
 800febe:	18d2      	adds	r2, r2, r3
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	68da      	ldr	r2, [r3, #12]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d207      	bcs.n	800fee0 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed8:	425b      	negs	r3, r3
 800feda:	18d2      	adds	r2, r2, r3
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d105      	bne.n	800fef2 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d002      	beq.n	800fef2 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	3b01      	subs	r3, #1
 800fef0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	1c5a      	adds	r2, r3, #1
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fefa:	697b      	ldr	r3, [r7, #20]
}
 800fefc:	0018      	movs	r0, r3
 800fefe:	46bd      	mov	sp, r7
 800ff00:	b006      	add	sp, #24
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d018      	beq.n	800ff48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	68da      	ldr	r2, [r3, #12]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff1e:	18d2      	adds	r2, r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	68da      	ldr	r2, [r3, #12]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d303      	bcc.n	800ff38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	68d9      	ldr	r1, [r3, #12]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	0018      	movs	r0, r3
 800ff44:	f002 f9ae 	bl	80122a4 <memcpy>
	}
}
 800ff48:	46c0      	nop			; (mov r8, r8)
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	b002      	add	sp, #8
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ff58:	f001 fd5a 	bl	8011a10 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ff5c:	230f      	movs	r3, #15
 800ff5e:	18fb      	adds	r3, r7, r3
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	2145      	movs	r1, #69	; 0x45
 800ff64:	5c52      	ldrb	r2, [r2, r1]
 800ff66:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff68:	e013      	b.n	800ff92 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d016      	beq.n	800ffa0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	3324      	adds	r3, #36	; 0x24
 800ff76:	0018      	movs	r0, r3
 800ff78:	f000 fd54 	bl	8010a24 <xTaskRemoveFromEventList>
 800ff7c:	1e03      	subs	r3, r0, #0
 800ff7e:	d001      	beq.n	800ff84 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ff80:	f000 fe62 	bl	8010c48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ff84:	210f      	movs	r1, #15
 800ff86:	187b      	adds	r3, r7, r1
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	3b01      	subs	r3, #1
 800ff8c:	b2da      	uxtb	r2, r3
 800ff8e:	187b      	adds	r3, r7, r1
 800ff90:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff92:	230f      	movs	r3, #15
 800ff94:	18fb      	adds	r3, r7, r3
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	b25b      	sxtb	r3, r3
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	dce5      	bgt.n	800ff6a <prvUnlockQueue+0x1a>
 800ff9e:	e000      	b.n	800ffa2 <prvUnlockQueue+0x52>
					break;
 800ffa0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2245      	movs	r2, #69	; 0x45
 800ffa6:	21ff      	movs	r1, #255	; 0xff
 800ffa8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800ffaa:	f001 fd43 	bl	8011a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ffae:	f001 fd2f 	bl	8011a10 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ffb2:	230e      	movs	r3, #14
 800ffb4:	18fb      	adds	r3, r7, r3
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	2144      	movs	r1, #68	; 0x44
 800ffba:	5c52      	ldrb	r2, [r2, r1]
 800ffbc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffbe:	e013      	b.n	800ffe8 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	691b      	ldr	r3, [r3, #16]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d016      	beq.n	800fff6 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	3310      	adds	r3, #16
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f000 fd29 	bl	8010a24 <xTaskRemoveFromEventList>
 800ffd2:	1e03      	subs	r3, r0, #0
 800ffd4:	d001      	beq.n	800ffda <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800ffd6:	f000 fe37 	bl	8010c48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ffda:	210e      	movs	r1, #14
 800ffdc:	187b      	adds	r3, r7, r1
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	187b      	adds	r3, r7, r1
 800ffe6:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffe8:	230e      	movs	r3, #14
 800ffea:	18fb      	adds	r3, r7, r3
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	b25b      	sxtb	r3, r3
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	dce5      	bgt.n	800ffc0 <prvUnlockQueue+0x70>
 800fff4:	e000      	b.n	800fff8 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800fff6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2244      	movs	r2, #68	; 0x44
 800fffc:	21ff      	movs	r1, #255	; 0xff
 800fffe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8010000:	f001 fd18 	bl	8011a34 <vPortExitCritical>
}
 8010004:	46c0      	nop			; (mov r8, r8)
 8010006:	46bd      	mov	sp, r7
 8010008:	b004      	add	sp, #16
 801000a:	bd80      	pop	{r7, pc}

0801000c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010014:	f001 fcfc 	bl	8011a10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001c:	2b00      	cmp	r3, #0
 801001e:	d102      	bne.n	8010026 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010020:	2301      	movs	r3, #1
 8010022:	60fb      	str	r3, [r7, #12]
 8010024:	e001      	b.n	801002a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010026:	2300      	movs	r3, #0
 8010028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801002a:	f001 fd03 	bl	8011a34 <vPortExitCritical>

	return xReturn;
 801002e:	68fb      	ldr	r3, [r7, #12]
}
 8010030:	0018      	movs	r0, r3
 8010032:	46bd      	mov	sp, r7
 8010034:	b004      	add	sp, #16
 8010036:	bd80      	pop	{r7, pc}

08010038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010040:	f001 fce6 	bl	8011a10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801004c:	429a      	cmp	r2, r3
 801004e:	d102      	bne.n	8010056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010050:	2301      	movs	r3, #1
 8010052:	60fb      	str	r3, [r7, #12]
 8010054:	e001      	b.n	801005a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010056:	2300      	movs	r3, #0
 8010058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801005a:	f001 fceb 	bl	8011a34 <vPortExitCritical>

	return xReturn;
 801005e:	68fb      	ldr	r3, [r7, #12]
}
 8010060:	0018      	movs	r0, r3
 8010062:	46bd      	mov	sp, r7
 8010064:	b004      	add	sp, #16
 8010066:	bd80      	pop	{r7, pc}

08010068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010072:	2300      	movs	r3, #0
 8010074:	60fb      	str	r3, [r7, #12]
 8010076:	e015      	b.n	80100a4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010078:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <vQueueAddToRegistry+0x4c>)
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	00d2      	lsls	r2, r2, #3
 801007e:	58d3      	ldr	r3, [r2, r3]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d10c      	bne.n	801009e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010084:	4b0b      	ldr	r3, [pc, #44]	; (80100b4 <vQueueAddToRegistry+0x4c>)
 8010086:	68fa      	ldr	r2, [r7, #12]
 8010088:	00d2      	lsls	r2, r2, #3
 801008a:	6839      	ldr	r1, [r7, #0]
 801008c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801008e:	4a09      	ldr	r2, [pc, #36]	; (80100b4 <vQueueAddToRegistry+0x4c>)
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	00db      	lsls	r3, r3, #3
 8010094:	18d3      	adds	r3, r2, r3
 8010096:	3304      	adds	r3, #4
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801009c:	e006      	b.n	80100ac <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	3301      	adds	r3, #1
 80100a2:	60fb      	str	r3, [r7, #12]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2b07      	cmp	r3, #7
 80100a8:	d9e6      	bls.n	8010078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80100aa:	46c0      	nop			; (mov r8, r8)
 80100ac:	46c0      	nop			; (mov r8, r8)
 80100ae:	46bd      	mov	sp, r7
 80100b0:	b004      	add	sp, #16
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	2000347c 	.word	0x2000347c

080100b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100c0:	2300      	movs	r3, #0
 80100c2:	60fb      	str	r3, [r7, #12]
 80100c4:	e018      	b.n	80100f8 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80100c6:	4a10      	ldr	r2, [pc, #64]	; (8010108 <vQueueUnregisterQueue+0x50>)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	00db      	lsls	r3, r3, #3
 80100cc:	18d3      	adds	r3, r2, r3
 80100ce:	3304      	adds	r3, #4
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d10c      	bne.n	80100f2 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80100d8:	4b0b      	ldr	r3, [pc, #44]	; (8010108 <vQueueUnregisterQueue+0x50>)
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	00d2      	lsls	r2, r2, #3
 80100de:	2100      	movs	r1, #0
 80100e0:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80100e2:	4a09      	ldr	r2, [pc, #36]	; (8010108 <vQueueUnregisterQueue+0x50>)
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	00db      	lsls	r3, r3, #3
 80100e8:	18d3      	adds	r3, r2, r3
 80100ea:	3304      	adds	r3, #4
 80100ec:	2200      	movs	r2, #0
 80100ee:	601a      	str	r2, [r3, #0]
				break;
 80100f0:	e006      	b.n	8010100 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	3301      	adds	r3, #1
 80100f6:	60fb      	str	r3, [r7, #12]
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2b07      	cmp	r3, #7
 80100fc:	d9e3      	bls.n	80100c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80100fe:	46c0      	nop			; (mov r8, r8)
 8010100:	46c0      	nop			; (mov r8, r8)
 8010102:	46bd      	mov	sp, r7
 8010104:	b004      	add	sp, #16
 8010106:	bd80      	pop	{r7, pc}
 8010108:	2000347c 	.word	0x2000347c

0801010c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801011c:	f001 fc78 	bl	8011a10 <vPortEnterCritical>
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	2244      	movs	r2, #68	; 0x44
 8010124:	5c9b      	ldrb	r3, [r3, r2]
 8010126:	b25b      	sxtb	r3, r3
 8010128:	3301      	adds	r3, #1
 801012a:	d103      	bne.n	8010134 <vQueueWaitForMessageRestricted+0x28>
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	2244      	movs	r2, #68	; 0x44
 8010130:	2100      	movs	r1, #0
 8010132:	5499      	strb	r1, [r3, r2]
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	2245      	movs	r2, #69	; 0x45
 8010138:	5c9b      	ldrb	r3, [r3, r2]
 801013a:	b25b      	sxtb	r3, r3
 801013c:	3301      	adds	r3, #1
 801013e:	d103      	bne.n	8010148 <vQueueWaitForMessageRestricted+0x3c>
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	2245      	movs	r2, #69	; 0x45
 8010144:	2100      	movs	r1, #0
 8010146:	5499      	strb	r1, [r3, r2]
 8010148:	f001 fc74 	bl	8011a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010150:	2b00      	cmp	r3, #0
 8010152:	d106      	bne.n	8010162 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	3324      	adds	r3, #36	; 0x24
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	68b9      	ldr	r1, [r7, #8]
 801015c:	0018      	movs	r0, r3
 801015e:	f000 fc3b 	bl	80109d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	0018      	movs	r0, r3
 8010166:	f7ff fef3 	bl	800ff50 <prvUnlockQueue>
	}
 801016a:	46c0      	nop			; (mov r8, r8)
 801016c:	46bd      	mov	sp, r7
 801016e:	b006      	add	sp, #24
 8010170:	bd80      	pop	{r7, pc}

08010172 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010172:	b590      	push	{r4, r7, lr}
 8010174:	b08d      	sub	sp, #52	; 0x34
 8010176:	af04      	add	r7, sp, #16
 8010178:	60f8      	str	r0, [r7, #12]
 801017a:	60b9      	str	r1, [r7, #8]
 801017c:	607a      	str	r2, [r7, #4]
 801017e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <xTaskCreateStatic+0x18>
 8010186:	b672      	cpsid	i
 8010188:	e7fe      	b.n	8010188 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 801018a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018c:	2b00      	cmp	r3, #0
 801018e:	d101      	bne.n	8010194 <xTaskCreateStatic+0x22>
 8010190:	b672      	cpsid	i
 8010192:	e7fe      	b.n	8010192 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010194:	23bc      	movs	r3, #188	; 0xbc
 8010196:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	2bbc      	cmp	r3, #188	; 0xbc
 801019c:	d001      	beq.n	80101a2 <xTaskCreateStatic+0x30>
 801019e:	b672      	cpsid	i
 80101a0:	e7fe      	b.n	80101a0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80101a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d020      	beq.n	80101ea <xTaskCreateStatic+0x78>
 80101a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d01d      	beq.n	80101ea <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	22b9      	movs	r2, #185	; 0xb9
 80101bc:	2102      	movs	r1, #2
 80101be:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101c0:	683c      	ldr	r4, [r7, #0]
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	68b9      	ldr	r1, [r7, #8]
 80101c6:	68f8      	ldr	r0, [r7, #12]
 80101c8:	2300      	movs	r3, #0
 80101ca:	9303      	str	r3, [sp, #12]
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	9302      	str	r3, [sp, #8]
 80101d0:	2318      	movs	r3, #24
 80101d2:	18fb      	adds	r3, r7, r3
 80101d4:	9301      	str	r3, [sp, #4]
 80101d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	0023      	movs	r3, r4
 80101dc:	f000 f858 	bl	8010290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	0018      	movs	r0, r3
 80101e4:	f000 f8ec 	bl	80103c0 <prvAddNewTaskToReadyList>
 80101e8:	e001      	b.n	80101ee <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80101ea:	2300      	movs	r3, #0
 80101ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80101ee:	69bb      	ldr	r3, [r7, #24]
	}
 80101f0:	0018      	movs	r0, r3
 80101f2:	46bd      	mov	sp, r7
 80101f4:	b009      	add	sp, #36	; 0x24
 80101f6:	bd90      	pop	{r4, r7, pc}

080101f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80101f8:	b590      	push	{r4, r7, lr}
 80101fa:	b08d      	sub	sp, #52	; 0x34
 80101fc:	af04      	add	r7, sp, #16
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	603b      	str	r3, [r7, #0]
 8010204:	1dbb      	adds	r3, r7, #6
 8010206:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010208:	1dbb      	adds	r3, r7, #6
 801020a:	881b      	ldrh	r3, [r3, #0]
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	0018      	movs	r0, r3
 8010210:	f001 fc96 	bl	8011b40 <pvPortMalloc>
 8010214:	0003      	movs	r3, r0
 8010216:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d010      	beq.n	8010240 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801021e:	20bc      	movs	r0, #188	; 0xbc
 8010220:	f001 fc8e 	bl	8011b40 <pvPortMalloc>
 8010224:	0003      	movs	r3, r0
 8010226:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d003      	beq.n	8010236 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	697a      	ldr	r2, [r7, #20]
 8010232:	631a      	str	r2, [r3, #48]	; 0x30
 8010234:	e006      	b.n	8010244 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	0018      	movs	r0, r3
 801023a:	f001 fd27 	bl	8011c8c <vPortFree>
 801023e:	e001      	b.n	8010244 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010240:	2300      	movs	r3, #0
 8010242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d01a      	beq.n	8010280 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	22b9      	movs	r2, #185	; 0xb9
 801024e:	2100      	movs	r1, #0
 8010250:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010252:	1dbb      	adds	r3, r7, #6
 8010254:	881a      	ldrh	r2, [r3, #0]
 8010256:	683c      	ldr	r4, [r7, #0]
 8010258:	68b9      	ldr	r1, [r7, #8]
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	2300      	movs	r3, #0
 801025e:	9303      	str	r3, [sp, #12]
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	9302      	str	r3, [sp, #8]
 8010264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	0023      	movs	r3, r4
 801026e:	f000 f80f 	bl	8010290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	0018      	movs	r0, r3
 8010276:	f000 f8a3 	bl	80103c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801027a:	2301      	movs	r3, #1
 801027c:	61bb      	str	r3, [r7, #24]
 801027e:	e002      	b.n	8010286 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010280:	2301      	movs	r3, #1
 8010282:	425b      	negs	r3, r3
 8010284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010286:	69bb      	ldr	r3, [r7, #24]
	}
 8010288:	0018      	movs	r0, r3
 801028a:	46bd      	mov	sp, r7
 801028c:	b009      	add	sp, #36	; 0x24
 801028e:	bd90      	pop	{r4, r7, pc}

08010290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	607a      	str	r2, [r7, #4]
 801029c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801029e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	001a      	movs	r2, r3
 80102a8:	21a5      	movs	r1, #165	; 0xa5
 80102aa:	f002 f817 	bl	80122dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80102ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	493e      	ldr	r1, [pc, #248]	; (80103b0 <prvInitialiseNewTask+0x120>)
 80102b6:	468c      	mov	ip, r1
 80102b8:	4463      	add	r3, ip
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	18d3      	adds	r3, r2, r3
 80102be:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	2207      	movs	r2, #7
 80102c4:	4393      	bics	r3, r2
 80102c6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	2207      	movs	r2, #7
 80102cc:	4013      	ands	r3, r2
 80102ce:	d001      	beq.n	80102d4 <prvInitialiseNewTask+0x44>
 80102d0:	b672      	cpsid	i
 80102d2:	e7fe      	b.n	80102d2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102d4:	2300      	movs	r3, #0
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	e013      	b.n	8010302 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102da:	68ba      	ldr	r2, [r7, #8]
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	18d3      	adds	r3, r2, r3
 80102e0:	7818      	ldrb	r0, [r3, #0]
 80102e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102e4:	2134      	movs	r1, #52	; 0x34
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	18d3      	adds	r3, r2, r3
 80102ea:	185b      	adds	r3, r3, r1
 80102ec:	1c02      	adds	r2, r0, #0
 80102ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	18d3      	adds	r3, r2, r3
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d006      	beq.n	801030a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	3301      	adds	r3, #1
 8010300:	617b      	str	r3, [r7, #20]
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	2b0f      	cmp	r3, #15
 8010306:	d9e8      	bls.n	80102da <prvInitialiseNewTask+0x4a>
 8010308:	e000      	b.n	801030c <prvInitialiseNewTask+0x7c>
		{
			break;
 801030a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801030c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030e:	2243      	movs	r2, #67	; 0x43
 8010310:	2100      	movs	r1, #0
 8010312:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	2b37      	cmp	r3, #55	; 0x37
 8010318:	d901      	bls.n	801031e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801031a:	2337      	movs	r3, #55	; 0x37
 801031c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801031e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010320:	6a3a      	ldr	r2, [r7, #32]
 8010322:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010326:	6a3a      	ldr	r2, [r7, #32]
 8010328:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032c:	2200      	movs	r2, #0
 801032e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	3304      	adds	r3, #4
 8010334:	0018      	movs	r0, r3
 8010336:	f7fe ffc3 	bl	800f2c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	3318      	adds	r3, #24
 801033e:	0018      	movs	r0, r3
 8010340:	f7fe ffbe 	bl	800f2c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010348:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801034a:	6a3b      	ldr	r3, [r7, #32]
 801034c:	2238      	movs	r2, #56	; 0x38
 801034e:	1ad2      	subs	r2, r2, r3
 8010350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010352:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010358:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801035a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035c:	22b4      	movs	r2, #180	; 0xb4
 801035e:	2100      	movs	r1, #0
 8010360:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010364:	22b8      	movs	r2, #184	; 0xb8
 8010366:	2100      	movs	r1, #0
 8010368:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	3354      	adds	r3, #84	; 0x54
 801036e:	2260      	movs	r2, #96	; 0x60
 8010370:	2100      	movs	r1, #0
 8010372:	0018      	movs	r0, r3
 8010374:	f001 ffb2 	bl	80122dc <memset>
 8010378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037a:	4a0e      	ldr	r2, [pc, #56]	; (80103b4 <prvInitialiseNewTask+0x124>)
 801037c:	659a      	str	r2, [r3, #88]	; 0x58
 801037e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010380:	4a0d      	ldr	r2, [pc, #52]	; (80103b8 <prvInitialiseNewTask+0x128>)
 8010382:	65da      	str	r2, [r3, #92]	; 0x5c
 8010384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010386:	4a0d      	ldr	r2, [pc, #52]	; (80103bc <prvInitialiseNewTask+0x12c>)
 8010388:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	68f9      	ldr	r1, [r7, #12]
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	0018      	movs	r0, r3
 8010392:	f001 faa1 	bl	80118d8 <pxPortInitialiseStack>
 8010396:	0002      	movs	r2, r0
 8010398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d002      	beq.n	80103a8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103a8:	46c0      	nop			; (mov r8, r8)
 80103aa:	46bd      	mov	sp, r7
 80103ac:	b006      	add	sp, #24
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	3fffffff 	.word	0x3fffffff
 80103b4:	08014798 	.word	0x08014798
 80103b8:	080147b8 	.word	0x080147b8
 80103bc:	08014778 	.word	0x08014778

080103c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80103c8:	f001 fb22 	bl	8011a10 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80103cc:	4b2a      	ldr	r3, [pc, #168]	; (8010478 <prvAddNewTaskToReadyList+0xb8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	1c5a      	adds	r2, r3, #1
 80103d2:	4b29      	ldr	r3, [pc, #164]	; (8010478 <prvAddNewTaskToReadyList+0xb8>)
 80103d4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80103d6:	4b29      	ldr	r3, [pc, #164]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d109      	bne.n	80103f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80103de:	4b27      	ldr	r3, [pc, #156]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103e4:	4b24      	ldr	r3, [pc, #144]	; (8010478 <prvAddNewTaskToReadyList+0xb8>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d110      	bne.n	801040e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103ec:	f000 fc46 	bl	8010c7c <prvInitialiseTaskLists>
 80103f0:	e00d      	b.n	801040e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103f2:	4b23      	ldr	r3, [pc, #140]	; (8010480 <prvAddNewTaskToReadyList+0xc0>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d109      	bne.n	801040e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103fa:	4b20      	ldr	r3, [pc, #128]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010404:	429a      	cmp	r2, r3
 8010406:	d802      	bhi.n	801040e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010408:	4b1c      	ldr	r3, [pc, #112]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801040e:	4b1d      	ldr	r3, [pc, #116]	; (8010484 <prvAddNewTaskToReadyList+0xc4>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	1c5a      	adds	r2, r3, #1
 8010414:	4b1b      	ldr	r3, [pc, #108]	; (8010484 <prvAddNewTaskToReadyList+0xc4>)
 8010416:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010418:	4b1a      	ldr	r3, [pc, #104]	; (8010484 <prvAddNewTaskToReadyList+0xc4>)
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010424:	4b18      	ldr	r3, [pc, #96]	; (8010488 <prvAddNewTaskToReadyList+0xc8>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	429a      	cmp	r2, r3
 801042a:	d903      	bls.n	8010434 <prvAddNewTaskToReadyList+0x74>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010430:	4b15      	ldr	r3, [pc, #84]	; (8010488 <prvAddNewTaskToReadyList+0xc8>)
 8010432:	601a      	str	r2, [r3, #0]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010438:	0013      	movs	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	189b      	adds	r3, r3, r2
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4a12      	ldr	r2, [pc, #72]	; (801048c <prvAddNewTaskToReadyList+0xcc>)
 8010442:	189a      	adds	r2, r3, r2
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	3304      	adds	r3, #4
 8010448:	0019      	movs	r1, r3
 801044a:	0010      	movs	r0, r2
 801044c:	f7fe ff43 	bl	800f2d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010450:	f001 faf0 	bl	8011a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010454:	4b0a      	ldr	r3, [pc, #40]	; (8010480 <prvAddNewTaskToReadyList+0xc0>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d008      	beq.n	801046e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801045c:	4b07      	ldr	r3, [pc, #28]	; (801047c <prvAddNewTaskToReadyList+0xbc>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010466:	429a      	cmp	r2, r3
 8010468:	d201      	bcs.n	801046e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801046a:	f001 fac1 	bl	80119f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801046e:	46c0      	nop			; (mov r8, r8)
 8010470:	46bd      	mov	sp, r7
 8010472:	b002      	add	sp, #8
 8010474:	bd80      	pop	{r7, pc}
 8010476:	46c0      	nop			; (mov r8, r8)
 8010478:	20002048 	.word	0x20002048
 801047c:	20001b74 	.word	0x20001b74
 8010480:	20002054 	.word	0x20002054
 8010484:	20002064 	.word	0x20002064
 8010488:	20002050 	.word	0x20002050
 801048c:	20001b78 	.word	0x20001b78

08010490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010498:	2300      	movs	r3, #0
 801049a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d010      	beq.n	80104c4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80104a2:	4b0d      	ldr	r3, [pc, #52]	; (80104d8 <vTaskDelay+0x48>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <vTaskDelay+0x1e>
 80104aa:	b672      	cpsid	i
 80104ac:	e7fe      	b.n	80104ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80104ae:	f000 f873 	bl	8010598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2100      	movs	r1, #0
 80104b6:	0018      	movs	r0, r3
 80104b8:	f000 fe34 	bl	8011124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80104bc:	f000 f878 	bl	80105b0 <xTaskResumeAll>
 80104c0:	0003      	movs	r3, r0
 80104c2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80104ca:	f001 fa91 	bl	80119f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104ce:	46c0      	nop			; (mov r8, r8)
 80104d0:	46bd      	mov	sp, r7
 80104d2:	b004      	add	sp, #16
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	46c0      	nop			; (mov r8, r8)
 80104d8:	20002070 	.word	0x20002070

080104dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104dc:	b590      	push	{r4, r7, lr}
 80104de:	b089      	sub	sp, #36	; 0x24
 80104e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80104e2:	2300      	movs	r3, #0
 80104e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80104e6:	2300      	movs	r3, #0
 80104e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80104ea:	003a      	movs	r2, r7
 80104ec:	1d39      	adds	r1, r7, #4
 80104ee:	2308      	movs	r3, #8
 80104f0:	18fb      	adds	r3, r7, r3
 80104f2:	0018      	movs	r0, r3
 80104f4:	f7fe fcc4 	bl	800ee80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80104f8:	683c      	ldr	r4, [r7, #0]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68ba      	ldr	r2, [r7, #8]
 80104fe:	491e      	ldr	r1, [pc, #120]	; (8010578 <vTaskStartScheduler+0x9c>)
 8010500:	481e      	ldr	r0, [pc, #120]	; (801057c <vTaskStartScheduler+0xa0>)
 8010502:	9202      	str	r2, [sp, #8]
 8010504:	9301      	str	r3, [sp, #4]
 8010506:	2300      	movs	r3, #0
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	2300      	movs	r3, #0
 801050c:	0022      	movs	r2, r4
 801050e:	f7ff fe30 	bl	8010172 <xTaskCreateStatic>
 8010512:	0002      	movs	r2, r0
 8010514:	4b1a      	ldr	r3, [pc, #104]	; (8010580 <vTaskStartScheduler+0xa4>)
 8010516:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010518:	4b19      	ldr	r3, [pc, #100]	; (8010580 <vTaskStartScheduler+0xa4>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010520:	2301      	movs	r3, #1
 8010522:	60fb      	str	r3, [r7, #12]
 8010524:	e001      	b.n	801052a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010526:	2300      	movs	r3, #0
 8010528:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d103      	bne.n	8010538 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8010530:	f000 fe4c 	bl	80111cc <xTimerCreateTimerTask>
 8010534:	0003      	movs	r3, r0
 8010536:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2b01      	cmp	r3, #1
 801053c:	d113      	bne.n	8010566 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801053e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010540:	4b10      	ldr	r3, [pc, #64]	; (8010584 <vTaskStartScheduler+0xa8>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	3354      	adds	r3, #84	; 0x54
 8010546:	001a      	movs	r2, r3
 8010548:	4b0f      	ldr	r3, [pc, #60]	; (8010588 <vTaskStartScheduler+0xac>)
 801054a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801054c:	4b0f      	ldr	r3, [pc, #60]	; (801058c <vTaskStartScheduler+0xb0>)
 801054e:	2201      	movs	r2, #1
 8010550:	4252      	negs	r2, r2
 8010552:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010554:	4b0e      	ldr	r3, [pc, #56]	; (8010590 <vTaskStartScheduler+0xb4>)
 8010556:	2201      	movs	r2, #1
 8010558:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801055a:	4b0e      	ldr	r3, [pc, #56]	; (8010594 <vTaskStartScheduler+0xb8>)
 801055c:	2200      	movs	r2, #0
 801055e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010560:	f001 fa22 	bl	80119a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010564:	e004      	b.n	8010570 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	3301      	adds	r3, #1
 801056a:	d101      	bne.n	8010570 <vTaskStartScheduler+0x94>
 801056c:	b672      	cpsid	i
 801056e:	e7fe      	b.n	801056e <vTaskStartScheduler+0x92>
}
 8010570:	46c0      	nop			; (mov r8, r8)
 8010572:	46bd      	mov	sp, r7
 8010574:	b005      	add	sp, #20
 8010576:	bd90      	pop	{r4, r7, pc}
 8010578:	08014030 	.word	0x08014030
 801057c:	08010c5d 	.word	0x08010c5d
 8010580:	2000206c 	.word	0x2000206c
 8010584:	20001b74 	.word	0x20001b74
 8010588:	20000030 	.word	0x20000030
 801058c:	20002068 	.word	0x20002068
 8010590:	20002054 	.word	0x20002054
 8010594:	2000204c 	.word	0x2000204c

08010598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801059c:	4b03      	ldr	r3, [pc, #12]	; (80105ac <vTaskSuspendAll+0x14>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	1c5a      	adds	r2, r3, #1
 80105a2:	4b02      	ldr	r3, [pc, #8]	; (80105ac <vTaskSuspendAll+0x14>)
 80105a4:	601a      	str	r2, [r3, #0]
}
 80105a6:	46c0      	nop			; (mov r8, r8)
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	20002070 	.word	0x20002070

080105b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80105b6:	2300      	movs	r3, #0
 80105b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80105ba:	2300      	movs	r3, #0
 80105bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80105be:	4b3a      	ldr	r3, [pc, #232]	; (80106a8 <xTaskResumeAll+0xf8>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d101      	bne.n	80105ca <xTaskResumeAll+0x1a>
 80105c6:	b672      	cpsid	i
 80105c8:	e7fe      	b.n	80105c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80105ca:	f001 fa21 	bl	8011a10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80105ce:	4b36      	ldr	r3, [pc, #216]	; (80106a8 <xTaskResumeAll+0xf8>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	1e5a      	subs	r2, r3, #1
 80105d4:	4b34      	ldr	r3, [pc, #208]	; (80106a8 <xTaskResumeAll+0xf8>)
 80105d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105d8:	4b33      	ldr	r3, [pc, #204]	; (80106a8 <xTaskResumeAll+0xf8>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d15b      	bne.n	8010698 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80105e0:	4b32      	ldr	r3, [pc, #200]	; (80106ac <xTaskResumeAll+0xfc>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d057      	beq.n	8010698 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105e8:	e02f      	b.n	801064a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80105ea:	4b31      	ldr	r3, [pc, #196]	; (80106b0 <xTaskResumeAll+0x100>)
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	3318      	adds	r3, #24
 80105f6:	0018      	movs	r0, r3
 80105f8:	f7fe fec5 	bl	800f386 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	3304      	adds	r3, #4
 8010600:	0018      	movs	r0, r3
 8010602:	f7fe fec0 	bl	800f386 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801060a:	4b2a      	ldr	r3, [pc, #168]	; (80106b4 <xTaskResumeAll+0x104>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	429a      	cmp	r2, r3
 8010610:	d903      	bls.n	801061a <xTaskResumeAll+0x6a>
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010616:	4b27      	ldr	r3, [pc, #156]	; (80106b4 <xTaskResumeAll+0x104>)
 8010618:	601a      	str	r2, [r3, #0]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801061e:	0013      	movs	r3, r2
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	189b      	adds	r3, r3, r2
 8010624:	009b      	lsls	r3, r3, #2
 8010626:	4a24      	ldr	r2, [pc, #144]	; (80106b8 <xTaskResumeAll+0x108>)
 8010628:	189a      	adds	r2, r3, r2
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	3304      	adds	r3, #4
 801062e:	0019      	movs	r1, r3
 8010630:	0010      	movs	r0, r2
 8010632:	f7fe fe50 	bl	800f2d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801063a:	4b20      	ldr	r3, [pc, #128]	; (80106bc <xTaskResumeAll+0x10c>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010640:	429a      	cmp	r2, r3
 8010642:	d302      	bcc.n	801064a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8010644:	4b1e      	ldr	r3, [pc, #120]	; (80106c0 <xTaskResumeAll+0x110>)
 8010646:	2201      	movs	r2, #1
 8010648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801064a:	4b19      	ldr	r3, [pc, #100]	; (80106b0 <xTaskResumeAll+0x100>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d1cb      	bne.n	80105ea <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d001      	beq.n	801065c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010658:	f000 fbb0 	bl	8010dbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801065c:	4b19      	ldr	r3, [pc, #100]	; (80106c4 <xTaskResumeAll+0x114>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00f      	beq.n	8010688 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010668:	f000 f84c 	bl	8010704 <xTaskIncrementTick>
 801066c:	1e03      	subs	r3, r0, #0
 801066e:	d002      	beq.n	8010676 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8010670:	4b13      	ldr	r3, [pc, #76]	; (80106c0 <xTaskResumeAll+0x110>)
 8010672:	2201      	movs	r2, #1
 8010674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	3b01      	subs	r3, #1
 801067a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1f2      	bne.n	8010668 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8010682:	4b10      	ldr	r3, [pc, #64]	; (80106c4 <xTaskResumeAll+0x114>)
 8010684:	2200      	movs	r2, #0
 8010686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010688:	4b0d      	ldr	r3, [pc, #52]	; (80106c0 <xTaskResumeAll+0x110>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d003      	beq.n	8010698 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010690:	2301      	movs	r3, #1
 8010692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010694:	f001 f9ac 	bl	80119f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010698:	f001 f9cc 	bl	8011a34 <vPortExitCritical>

	return xAlreadyYielded;
 801069c:	68bb      	ldr	r3, [r7, #8]
}
 801069e:	0018      	movs	r0, r3
 80106a0:	46bd      	mov	sp, r7
 80106a2:	b004      	add	sp, #16
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	46c0      	nop			; (mov r8, r8)
 80106a8:	20002070 	.word	0x20002070
 80106ac:	20002048 	.word	0x20002048
 80106b0:	20002008 	.word	0x20002008
 80106b4:	20002050 	.word	0x20002050
 80106b8:	20001b78 	.word	0x20001b78
 80106bc:	20001b74 	.word	0x20001b74
 80106c0:	2000205c 	.word	0x2000205c
 80106c4:	20002058 	.word	0x20002058

080106c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80106ce:	4b04      	ldr	r3, [pc, #16]	; (80106e0 <xTaskGetTickCount+0x18>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80106d4:	687b      	ldr	r3, [r7, #4]
}
 80106d6:	0018      	movs	r0, r3
 80106d8:	46bd      	mov	sp, r7
 80106da:	b002      	add	sp, #8
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	46c0      	nop			; (mov r8, r8)
 80106e0:	2000204c 	.word	0x2000204c

080106e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80106ea:	2300      	movs	r3, #0
 80106ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80106ee:	4b04      	ldr	r3, [pc, #16]	; (8010700 <xTaskGetTickCountFromISR+0x1c>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106f4:	683b      	ldr	r3, [r7, #0]
}
 80106f6:	0018      	movs	r0, r3
 80106f8:	46bd      	mov	sp, r7
 80106fa:	b002      	add	sp, #8
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	46c0      	nop			; (mov r8, r8)
 8010700:	2000204c 	.word	0x2000204c

08010704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801070a:	2300      	movs	r3, #0
 801070c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801070e:	4b4c      	ldr	r3, [pc, #304]	; (8010840 <xTaskIncrementTick+0x13c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d000      	beq.n	8010718 <xTaskIncrementTick+0x14>
 8010716:	e083      	b.n	8010820 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010718:	4b4a      	ldr	r3, [pc, #296]	; (8010844 <xTaskIncrementTick+0x140>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	3301      	adds	r3, #1
 801071e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010720:	4b48      	ldr	r3, [pc, #288]	; (8010844 <xTaskIncrementTick+0x140>)
 8010722:	693a      	ldr	r2, [r7, #16]
 8010724:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d117      	bne.n	801075c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 801072c:	4b46      	ldr	r3, [pc, #280]	; (8010848 <xTaskIncrementTick+0x144>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <xTaskIncrementTick+0x36>
 8010736:	b672      	cpsid	i
 8010738:	e7fe      	b.n	8010738 <xTaskIncrementTick+0x34>
 801073a:	4b43      	ldr	r3, [pc, #268]	; (8010848 <xTaskIncrementTick+0x144>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	60fb      	str	r3, [r7, #12]
 8010740:	4b42      	ldr	r3, [pc, #264]	; (801084c <xTaskIncrementTick+0x148>)
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	4b40      	ldr	r3, [pc, #256]	; (8010848 <xTaskIncrementTick+0x144>)
 8010746:	601a      	str	r2, [r3, #0]
 8010748:	4b40      	ldr	r3, [pc, #256]	; (801084c <xTaskIncrementTick+0x148>)
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	4b40      	ldr	r3, [pc, #256]	; (8010850 <xTaskIncrementTick+0x14c>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	1c5a      	adds	r2, r3, #1
 8010754:	4b3e      	ldr	r3, [pc, #248]	; (8010850 <xTaskIncrementTick+0x14c>)
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	f000 fb30 	bl	8010dbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801075c:	4b3d      	ldr	r3, [pc, #244]	; (8010854 <xTaskIncrementTick+0x150>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	693a      	ldr	r2, [r7, #16]
 8010762:	429a      	cmp	r2, r3
 8010764:	d34e      	bcc.n	8010804 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010766:	4b38      	ldr	r3, [pc, #224]	; (8010848 <xTaskIncrementTick+0x144>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <xTaskIncrementTick+0x70>
 8010770:	2301      	movs	r3, #1
 8010772:	e000      	b.n	8010776 <xTaskIncrementTick+0x72>
 8010774:	2300      	movs	r3, #0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d004      	beq.n	8010784 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801077a:	4b36      	ldr	r3, [pc, #216]	; (8010854 <xTaskIncrementTick+0x150>)
 801077c:	2201      	movs	r2, #1
 801077e:	4252      	negs	r2, r2
 8010780:	601a      	str	r2, [r3, #0]
					break;
 8010782:	e03f      	b.n	8010804 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010784:	4b30      	ldr	r3, [pc, #192]	; (8010848 <xTaskIncrementTick+0x144>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	685b      	ldr	r3, [r3, #4]
 8010792:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010794:	693a      	ldr	r2, [r7, #16]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	429a      	cmp	r2, r3
 801079a:	d203      	bcs.n	80107a4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801079c:	4b2d      	ldr	r3, [pc, #180]	; (8010854 <xTaskIncrementTick+0x150>)
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	601a      	str	r2, [r3, #0]
						break;
 80107a2:	e02f      	b.n	8010804 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	3304      	adds	r3, #4
 80107a8:	0018      	movs	r0, r3
 80107aa:	f7fe fdec 	bl	800f386 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d004      	beq.n	80107c0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	3318      	adds	r3, #24
 80107ba:	0018      	movs	r0, r3
 80107bc:	f7fe fde3 	bl	800f386 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c4:	4b24      	ldr	r3, [pc, #144]	; (8010858 <xTaskIncrementTick+0x154>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d903      	bls.n	80107d4 <xTaskIncrementTick+0xd0>
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d0:	4b21      	ldr	r3, [pc, #132]	; (8010858 <xTaskIncrementTick+0x154>)
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d8:	0013      	movs	r3, r2
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	189b      	adds	r3, r3, r2
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	4a1e      	ldr	r2, [pc, #120]	; (801085c <xTaskIncrementTick+0x158>)
 80107e2:	189a      	adds	r2, r3, r2
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	3304      	adds	r3, #4
 80107e8:	0019      	movs	r1, r3
 80107ea:	0010      	movs	r0, r2
 80107ec:	f7fe fd73 	bl	800f2d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f4:	4b1a      	ldr	r3, [pc, #104]	; (8010860 <xTaskIncrementTick+0x15c>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d3b3      	bcc.n	8010766 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80107fe:	2301      	movs	r3, #1
 8010800:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010802:	e7b0      	b.n	8010766 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010804:	4b16      	ldr	r3, [pc, #88]	; (8010860 <xTaskIncrementTick+0x15c>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801080a:	4914      	ldr	r1, [pc, #80]	; (801085c <xTaskIncrementTick+0x158>)
 801080c:	0013      	movs	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	189b      	adds	r3, r3, r2
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	585b      	ldr	r3, [r3, r1]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d907      	bls.n	801082a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801081a:	2301      	movs	r3, #1
 801081c:	617b      	str	r3, [r7, #20]
 801081e:	e004      	b.n	801082a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010820:	4b10      	ldr	r3, [pc, #64]	; (8010864 <xTaskIncrementTick+0x160>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	1c5a      	adds	r2, r3, #1
 8010826:	4b0f      	ldr	r3, [pc, #60]	; (8010864 <xTaskIncrementTick+0x160>)
 8010828:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801082a:	4b0f      	ldr	r3, [pc, #60]	; (8010868 <xTaskIncrementTick+0x164>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8010832:	2301      	movs	r3, #1
 8010834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010836:	697b      	ldr	r3, [r7, #20]
}
 8010838:	0018      	movs	r0, r3
 801083a:	46bd      	mov	sp, r7
 801083c:	b006      	add	sp, #24
 801083e:	bd80      	pop	{r7, pc}
 8010840:	20002070 	.word	0x20002070
 8010844:	2000204c 	.word	0x2000204c
 8010848:	20002000 	.word	0x20002000
 801084c:	20002004 	.word	0x20002004
 8010850:	20002060 	.word	0x20002060
 8010854:	20002068 	.word	0x20002068
 8010858:	20002050 	.word	0x20002050
 801085c:	20001b78 	.word	0x20001b78
 8010860:	20001b74 	.word	0x20001b74
 8010864:	20002058 	.word	0x20002058
 8010868:	2000205c 	.word	0x2000205c

0801086c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010872:	4b2d      	ldr	r3, [pc, #180]	; (8010928 <vTaskSwitchContext+0xbc>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d003      	beq.n	8010882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801087a:	4b2c      	ldr	r3, [pc, #176]	; (801092c <vTaskSwitchContext+0xc0>)
 801087c:	2201      	movs	r2, #1
 801087e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010880:	e04e      	b.n	8010920 <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 8010882:	4b2a      	ldr	r3, [pc, #168]	; (801092c <vTaskSwitchContext+0xc0>)
 8010884:	2200      	movs	r2, #0
 8010886:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010888:	4b29      	ldr	r3, [pc, #164]	; (8010930 <vTaskSwitchContext+0xc4>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	4b28      	ldr	r3, [pc, #160]	; (8010930 <vTaskSwitchContext+0xc4>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010894:	429a      	cmp	r2, r3
 8010896:	d808      	bhi.n	80108aa <vTaskSwitchContext+0x3e>
 8010898:	4b25      	ldr	r3, [pc, #148]	; (8010930 <vTaskSwitchContext+0xc4>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	4b24      	ldr	r3, [pc, #144]	; (8010930 <vTaskSwitchContext+0xc4>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	3334      	adds	r3, #52	; 0x34
 80108a2:	0019      	movs	r1, r3
 80108a4:	0010      	movs	r0, r2
 80108a6:	f7f1 ffb9 	bl	800281c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80108aa:	4b22      	ldr	r3, [pc, #136]	; (8010934 <vTaskSwitchContext+0xc8>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	607b      	str	r3, [r7, #4]
 80108b0:	e007      	b.n	80108c2 <vTaskSwitchContext+0x56>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d101      	bne.n	80108bc <vTaskSwitchContext+0x50>
 80108b8:	b672      	cpsid	i
 80108ba:	e7fe      	b.n	80108ba <vTaskSwitchContext+0x4e>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	3b01      	subs	r3, #1
 80108c0:	607b      	str	r3, [r7, #4]
 80108c2:	491d      	ldr	r1, [pc, #116]	; (8010938 <vTaskSwitchContext+0xcc>)
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	0013      	movs	r3, r2
 80108c8:	009b      	lsls	r3, r3, #2
 80108ca:	189b      	adds	r3, r3, r2
 80108cc:	009b      	lsls	r3, r3, #2
 80108ce:	585b      	ldr	r3, [r3, r1]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d0ee      	beq.n	80108b2 <vTaskSwitchContext+0x46>
 80108d4:	687a      	ldr	r2, [r7, #4]
 80108d6:	0013      	movs	r3, r2
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	189b      	adds	r3, r3, r2
 80108dc:	009b      	lsls	r3, r3, #2
 80108de:	4a16      	ldr	r2, [pc, #88]	; (8010938 <vTaskSwitchContext+0xcc>)
 80108e0:	189b      	adds	r3, r3, r2
 80108e2:	603b      	str	r3, [r7, #0]
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	685a      	ldr	r2, [r3, #4]
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	605a      	str	r2, [r3, #4]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	685a      	ldr	r2, [r3, #4]
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	3308      	adds	r3, #8
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d104      	bne.n	8010904 <vTaskSwitchContext+0x98>
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	685a      	ldr	r2, [r3, #4]
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	605a      	str	r2, [r3, #4]
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	68da      	ldr	r2, [r3, #12]
 801090a:	4b09      	ldr	r3, [pc, #36]	; (8010930 <vTaskSwitchContext+0xc4>)
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	4b09      	ldr	r3, [pc, #36]	; (8010934 <vTaskSwitchContext+0xc8>)
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010914:	4b06      	ldr	r3, [pc, #24]	; (8010930 <vTaskSwitchContext+0xc4>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	3354      	adds	r3, #84	; 0x54
 801091a:	001a      	movs	r2, r3
 801091c:	4b07      	ldr	r3, [pc, #28]	; (801093c <vTaskSwitchContext+0xd0>)
 801091e:	601a      	str	r2, [r3, #0]
}
 8010920:	46c0      	nop			; (mov r8, r8)
 8010922:	46bd      	mov	sp, r7
 8010924:	b002      	add	sp, #8
 8010926:	bd80      	pop	{r7, pc}
 8010928:	20002070 	.word	0x20002070
 801092c:	2000205c 	.word	0x2000205c
 8010930:	20001b74 	.word	0x20001b74
 8010934:	20002050 	.word	0x20002050
 8010938:	20001b78 	.word	0x20001b78
 801093c:	20000030 	.word	0x20000030

08010940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <vTaskPlaceOnEventList+0x14>
 8010950:	b672      	cpsid	i
 8010952:	e7fe      	b.n	8010952 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010954:	4b08      	ldr	r3, [pc, #32]	; (8010978 <vTaskPlaceOnEventList+0x38>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3318      	adds	r3, #24
 801095a:	001a      	movs	r2, r3
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	0011      	movs	r1, r2
 8010960:	0018      	movs	r0, r3
 8010962:	f7fe fcda 	bl	800f31a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	2101      	movs	r1, #1
 801096a:	0018      	movs	r0, r3
 801096c:	f000 fbda 	bl	8011124 <prvAddCurrentTaskToDelayedList>
}
 8010970:	46c0      	nop			; (mov r8, r8)
 8010972:	46bd      	mov	sp, r7
 8010974:	b002      	add	sp, #8
 8010976:	bd80      	pop	{r7, pc}
 8010978:	20001b74 	.word	0x20001b74

0801097c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d101      	bne.n	8010992 <vTaskPlaceOnUnorderedEventList+0x16>
 801098e:	b672      	cpsid	i
 8010990:	e7fe      	b.n	8010990 <vTaskPlaceOnUnorderedEventList+0x14>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010992:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <vTaskPlaceOnUnorderedEventList+0x54>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d101      	bne.n	801099e <vTaskPlaceOnUnorderedEventList+0x22>
 801099a:	b672      	cpsid	i
 801099c:	e7fe      	b.n	801099c <vTaskPlaceOnUnorderedEventList+0x20>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801099e:	4b0d      	ldr	r3, [pc, #52]	; (80109d4 <vTaskPlaceOnUnorderedEventList+0x58>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	2180      	movs	r1, #128	; 0x80
 80109a6:	0609      	lsls	r1, r1, #24
 80109a8:	430a      	orrs	r2, r1
 80109aa:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80109ac:	4b09      	ldr	r3, [pc, #36]	; (80109d4 <vTaskPlaceOnUnorderedEventList+0x58>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	3318      	adds	r3, #24
 80109b2:	001a      	movs	r2, r3
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	0011      	movs	r1, r2
 80109b8:	0018      	movs	r0, r3
 80109ba:	f7fe fc8c 	bl	800f2d6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2101      	movs	r1, #1
 80109c2:	0018      	movs	r0, r3
 80109c4:	f000 fbae 	bl	8011124 <prvAddCurrentTaskToDelayedList>
}
 80109c8:	46c0      	nop			; (mov r8, r8)
 80109ca:	46bd      	mov	sp, r7
 80109cc:	b004      	add	sp, #16
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	20002070 	.word	0x20002070
 80109d4:	20001b74 	.word	0x20001b74

080109d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d101      	bne.n	80109ee <vTaskPlaceOnEventListRestricted+0x16>
 80109ea:	b672      	cpsid	i
 80109ec:	e7fe      	b.n	80109ec <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80109ee:	4b0c      	ldr	r3, [pc, #48]	; (8010a20 <vTaskPlaceOnEventListRestricted+0x48>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3318      	adds	r3, #24
 80109f4:	001a      	movs	r2, r3
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	0011      	movs	r1, r2
 80109fa:	0018      	movs	r0, r3
 80109fc:	f7fe fc6b 	bl	800f2d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d002      	beq.n	8010a0c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8010a06:	2301      	movs	r3, #1
 8010a08:	425b      	negs	r3, r3
 8010a0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	0011      	movs	r1, r2
 8010a12:	0018      	movs	r0, r3
 8010a14:	f000 fb86 	bl	8011124 <prvAddCurrentTaskToDelayedList>
	}
 8010a18:	46c0      	nop			; (mov r8, r8)
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	b004      	add	sp, #16
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	20001b74 	.word	0x20001b74

08010a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <xTaskRemoveFromEventList+0x1a>
 8010a3a:	b672      	cpsid	i
 8010a3c:	e7fe      	b.n	8010a3c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	3318      	adds	r3, #24
 8010a42:	0018      	movs	r0, r3
 8010a44:	f7fe fc9f 	bl	800f386 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a48:	4b1e      	ldr	r3, [pc, #120]	; (8010ac4 <xTaskRemoveFromEventList+0xa0>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d11d      	bne.n	8010a8c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	3304      	adds	r3, #4
 8010a54:	0018      	movs	r0, r3
 8010a56:	f7fe fc96 	bl	800f386 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a5e:	4b1a      	ldr	r3, [pc, #104]	; (8010ac8 <xTaskRemoveFromEventList+0xa4>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d903      	bls.n	8010a6e <xTaskRemoveFromEventList+0x4a>
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a6a:	4b17      	ldr	r3, [pc, #92]	; (8010ac8 <xTaskRemoveFromEventList+0xa4>)
 8010a6c:	601a      	str	r2, [r3, #0]
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a72:	0013      	movs	r3, r2
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	189b      	adds	r3, r3, r2
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	4a14      	ldr	r2, [pc, #80]	; (8010acc <xTaskRemoveFromEventList+0xa8>)
 8010a7c:	189a      	adds	r2, r3, r2
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	3304      	adds	r3, #4
 8010a82:	0019      	movs	r1, r3
 8010a84:	0010      	movs	r0, r2
 8010a86:	f7fe fc26 	bl	800f2d6 <vListInsertEnd>
 8010a8a:	e007      	b.n	8010a9c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	3318      	adds	r3, #24
 8010a90:	001a      	movs	r2, r3
 8010a92:	4b0f      	ldr	r3, [pc, #60]	; (8010ad0 <xTaskRemoveFromEventList+0xac>)
 8010a94:	0011      	movs	r1, r2
 8010a96:	0018      	movs	r0, r3
 8010a98:	f7fe fc1d 	bl	800f2d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aa0:	4b0c      	ldr	r3, [pc, #48]	; (8010ad4 <xTaskRemoveFromEventList+0xb0>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d905      	bls.n	8010ab6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010aae:	4b0a      	ldr	r3, [pc, #40]	; (8010ad8 <xTaskRemoveFromEventList+0xb4>)
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	601a      	str	r2, [r3, #0]
 8010ab4:	e001      	b.n	8010aba <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010aba:	68fb      	ldr	r3, [r7, #12]
}
 8010abc:	0018      	movs	r0, r3
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	b004      	add	sp, #16
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	20002070 	.word	0x20002070
 8010ac8:	20002050 	.word	0x20002050
 8010acc:	20001b78 	.word	0x20001b78
 8010ad0:	20002008 	.word	0x20002008
 8010ad4:	20001b74 	.word	0x20001b74
 8010ad8:	2000205c 	.word	0x2000205c

08010adc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8010ae6:	4b21      	ldr	r3, [pc, #132]	; (8010b6c <vTaskRemoveFromUnorderedEventList+0x90>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d101      	bne.n	8010af2 <vTaskRemoveFromUnorderedEventList+0x16>
 8010aee:	b672      	cpsid	i
 8010af0:	e7fe      	b.n	8010af0 <vTaskRemoveFromUnorderedEventList+0x14>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	2280      	movs	r2, #128	; 0x80
 8010af6:	0612      	lsls	r2, r2, #24
 8010af8:	431a      	orrs	r2, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d101      	bne.n	8010b0e <vTaskRemoveFromUnorderedEventList+0x32>
 8010b0a:	b672      	cpsid	i
 8010b0c:	e7fe      	b.n	8010b0c <vTaskRemoveFromUnorderedEventList+0x30>
	( void ) uxListRemove( pxEventListItem );
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	0018      	movs	r0, r3
 8010b12:	f7fe fc38 	bl	800f386 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	3304      	adds	r3, #4
 8010b1a:	0018      	movs	r0, r3
 8010b1c:	f7fe fc33 	bl	800f386 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b24:	4b12      	ldr	r3, [pc, #72]	; (8010b70 <vTaskRemoveFromUnorderedEventList+0x94>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d903      	bls.n	8010b34 <vTaskRemoveFromUnorderedEventList+0x58>
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b30:	4b0f      	ldr	r3, [pc, #60]	; (8010b70 <vTaskRemoveFromUnorderedEventList+0x94>)
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b38:	0013      	movs	r3, r2
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	189b      	adds	r3, r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	4a0c      	ldr	r2, [pc, #48]	; (8010b74 <vTaskRemoveFromUnorderedEventList+0x98>)
 8010b42:	189a      	adds	r2, r3, r2
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	3304      	adds	r3, #4
 8010b48:	0019      	movs	r1, r3
 8010b4a:	0010      	movs	r0, r2
 8010b4c:	f7fe fbc3 	bl	800f2d6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b54:	4b08      	ldr	r3, [pc, #32]	; (8010b78 <vTaskRemoveFromUnorderedEventList+0x9c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d902      	bls.n	8010b64 <vTaskRemoveFromUnorderedEventList+0x88>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8010b5e:	4b07      	ldr	r3, [pc, #28]	; (8010b7c <vTaskRemoveFromUnorderedEventList+0xa0>)
 8010b60:	2201      	movs	r2, #1
 8010b62:	601a      	str	r2, [r3, #0]
	}
}
 8010b64:	46c0      	nop			; (mov r8, r8)
 8010b66:	46bd      	mov	sp, r7
 8010b68:	b004      	add	sp, #16
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	20002070 	.word	0x20002070
 8010b70:	20002050 	.word	0x20002050
 8010b74:	20001b78 	.word	0x20001b78
 8010b78:	20001b74 	.word	0x20001b74
 8010b7c:	2000205c 	.word	0x2000205c

08010b80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010b88:	4b05      	ldr	r3, [pc, #20]	; (8010ba0 <vTaskInternalSetTimeOutState+0x20>)
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010b90:	4b04      	ldr	r3, [pc, #16]	; (8010ba4 <vTaskInternalSetTimeOutState+0x24>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	605a      	str	r2, [r3, #4]
}
 8010b98:	46c0      	nop			; (mov r8, r8)
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	b002      	add	sp, #8
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	20002060 	.word	0x20002060
 8010ba4:	2000204c 	.word	0x2000204c

08010ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d101      	bne.n	8010bbc <xTaskCheckForTimeOut+0x14>
 8010bb8:	b672      	cpsid	i
 8010bba:	e7fe      	b.n	8010bba <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <xTaskCheckForTimeOut+0x1e>
 8010bc2:	b672      	cpsid	i
 8010bc4:	e7fe      	b.n	8010bc4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8010bc6:	f000 ff23 	bl	8011a10 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010bca:	4b1d      	ldr	r3, [pc, #116]	; (8010c40 <xTaskCheckForTimeOut+0x98>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	3301      	adds	r3, #1
 8010be0:	d102      	bne.n	8010be8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010be2:	2300      	movs	r3, #0
 8010be4:	617b      	str	r3, [r7, #20]
 8010be6:	e024      	b.n	8010c32 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	4b15      	ldr	r3, [pc, #84]	; (8010c44 <xTaskCheckForTimeOut+0x9c>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d007      	beq.n	8010c04 <xTaskCheckForTimeOut+0x5c>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	693a      	ldr	r2, [r7, #16]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d302      	bcc.n	8010c04 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010bfe:	2301      	movs	r3, #1
 8010c00:	617b      	str	r3, [r7, #20]
 8010c02:	e016      	b.n	8010c32 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d20c      	bcs.n	8010c28 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	1ad2      	subs	r2, r2, r3
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	0018      	movs	r0, r3
 8010c1e:	f7ff ffaf 	bl	8010b80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010c22:	2300      	movs	r3, #0
 8010c24:	617b      	str	r3, [r7, #20]
 8010c26:	e004      	b.n	8010c32 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010c2e:	2301      	movs	r3, #1
 8010c30:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8010c32:	f000 feff 	bl	8011a34 <vPortExitCritical>

	return xReturn;
 8010c36:	697b      	ldr	r3, [r7, #20]
}
 8010c38:	0018      	movs	r0, r3
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	b006      	add	sp, #24
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	2000204c 	.word	0x2000204c
 8010c44:	20002060 	.word	0x20002060

08010c48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010c4c:	4b02      	ldr	r3, [pc, #8]	; (8010c58 <vTaskMissedYield+0x10>)
 8010c4e:	2201      	movs	r2, #1
 8010c50:	601a      	str	r2, [r3, #0]
}
 8010c52:	46c0      	nop			; (mov r8, r8)
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	2000205c 	.word	0x2000205c

08010c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010c64:	f000 f84e 	bl	8010d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010c68:	4b03      	ldr	r3, [pc, #12]	; (8010c78 <prvIdleTask+0x1c>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d9f9      	bls.n	8010c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010c70:	f000 febe 	bl	80119f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010c74:	e7f6      	b.n	8010c64 <prvIdleTask+0x8>
 8010c76:	46c0      	nop			; (mov r8, r8)
 8010c78:	20001b78 	.word	0x20001b78

08010c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010c82:	2300      	movs	r3, #0
 8010c84:	607b      	str	r3, [r7, #4]
 8010c86:	e00c      	b.n	8010ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	0013      	movs	r3, r2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	189b      	adds	r3, r3, r2
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	4a14      	ldr	r2, [pc, #80]	; (8010ce4 <prvInitialiseTaskLists+0x68>)
 8010c94:	189b      	adds	r3, r3, r2
 8010c96:	0018      	movs	r0, r3
 8010c98:	f7fe faf4 	bl	800f284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	607b      	str	r3, [r7, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b37      	cmp	r3, #55	; 0x37
 8010ca6:	d9ef      	bls.n	8010c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ca8:	4b0f      	ldr	r3, [pc, #60]	; (8010ce8 <prvInitialiseTaskLists+0x6c>)
 8010caa:	0018      	movs	r0, r3
 8010cac:	f7fe faea 	bl	800f284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010cb0:	4b0e      	ldr	r3, [pc, #56]	; (8010cec <prvInitialiseTaskLists+0x70>)
 8010cb2:	0018      	movs	r0, r3
 8010cb4:	f7fe fae6 	bl	800f284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010cb8:	4b0d      	ldr	r3, [pc, #52]	; (8010cf0 <prvInitialiseTaskLists+0x74>)
 8010cba:	0018      	movs	r0, r3
 8010cbc:	f7fe fae2 	bl	800f284 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010cc0:	4b0c      	ldr	r3, [pc, #48]	; (8010cf4 <prvInitialiseTaskLists+0x78>)
 8010cc2:	0018      	movs	r0, r3
 8010cc4:	f7fe fade 	bl	800f284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010cc8:	4b0b      	ldr	r3, [pc, #44]	; (8010cf8 <prvInitialiseTaskLists+0x7c>)
 8010cca:	0018      	movs	r0, r3
 8010ccc:	f7fe fada 	bl	800f284 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010cd0:	4b0a      	ldr	r3, [pc, #40]	; (8010cfc <prvInitialiseTaskLists+0x80>)
 8010cd2:	4a05      	ldr	r2, [pc, #20]	; (8010ce8 <prvInitialiseTaskLists+0x6c>)
 8010cd4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010cd6:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <prvInitialiseTaskLists+0x84>)
 8010cd8:	4a04      	ldr	r2, [pc, #16]	; (8010cec <prvInitialiseTaskLists+0x70>)
 8010cda:	601a      	str	r2, [r3, #0]
}
 8010cdc:	46c0      	nop			; (mov r8, r8)
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	b002      	add	sp, #8
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	20001b78 	.word	0x20001b78
 8010ce8:	20001fd8 	.word	0x20001fd8
 8010cec:	20001fec 	.word	0x20001fec
 8010cf0:	20002008 	.word	0x20002008
 8010cf4:	2000201c 	.word	0x2000201c
 8010cf8:	20002034 	.word	0x20002034
 8010cfc:	20002000 	.word	0x20002000
 8010d00:	20002004 	.word	0x20002004

08010d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d0a:	e01a      	b.n	8010d42 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8010d0c:	f000 fe80 	bl	8011a10 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8010d10:	4b10      	ldr	r3, [pc, #64]	; (8010d54 <prvCheckTasksWaitingTermination+0x50>)
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	3304      	adds	r3, #4
 8010d1c:	0018      	movs	r0, r3
 8010d1e:	f7fe fb32 	bl	800f386 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010d22:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <prvCheckTasksWaitingTermination+0x54>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	1e5a      	subs	r2, r3, #1
 8010d28:	4b0b      	ldr	r3, [pc, #44]	; (8010d58 <prvCheckTasksWaitingTermination+0x54>)
 8010d2a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010d2c:	4b0b      	ldr	r3, [pc, #44]	; (8010d5c <prvCheckTasksWaitingTermination+0x58>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	1e5a      	subs	r2, r3, #1
 8010d32:	4b0a      	ldr	r3, [pc, #40]	; (8010d5c <prvCheckTasksWaitingTermination+0x58>)
 8010d34:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8010d36:	f000 fe7d 	bl	8011a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	0018      	movs	r0, r3
 8010d3e:	f000 f80f 	bl	8010d60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d42:	4b06      	ldr	r3, [pc, #24]	; (8010d5c <prvCheckTasksWaitingTermination+0x58>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d1e0      	bne.n	8010d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010d4a:	46c0      	nop			; (mov r8, r8)
 8010d4c:	46c0      	nop			; (mov r8, r8)
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	b002      	add	sp, #8
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	2000201c 	.word	0x2000201c
 8010d58:	20002048 	.word	0x20002048
 8010d5c:	20002030 	.word	0x20002030

08010d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	3354      	adds	r3, #84	; 0x54
 8010d6c:	0018      	movs	r0, r3
 8010d6e:	f001 fe57 	bl	8012a20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	22b9      	movs	r2, #185	; 0xb9
 8010d76:	5c9b      	ldrb	r3, [r3, r2]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d109      	bne.n	8010d90 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d80:	0018      	movs	r0, r3
 8010d82:	f000 ff83 	bl	8011c8c <vPortFree>
				vPortFree( pxTCB );
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	0018      	movs	r0, r3
 8010d8a:	f000 ff7f 	bl	8011c8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010d8e:	e010      	b.n	8010db2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	22b9      	movs	r2, #185	; 0xb9
 8010d94:	5c9b      	ldrb	r3, [r3, r2]
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d104      	bne.n	8010da4 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	0018      	movs	r0, r3
 8010d9e:	f000 ff75 	bl	8011c8c <vPortFree>
	}
 8010da2:	e006      	b.n	8010db2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	22b9      	movs	r2, #185	; 0xb9
 8010da8:	5c9b      	ldrb	r3, [r3, r2]
 8010daa:	2b02      	cmp	r3, #2
 8010dac:	d001      	beq.n	8010db2 <prvDeleteTCB+0x52>
 8010dae:	b672      	cpsid	i
 8010db0:	e7fe      	b.n	8010db0 <prvDeleteTCB+0x50>
	}
 8010db2:	46c0      	nop			; (mov r8, r8)
 8010db4:	46bd      	mov	sp, r7
 8010db6:	b002      	add	sp, #8
 8010db8:	bd80      	pop	{r7, pc}
	...

08010dbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010dc2:	4b0e      	ldr	r3, [pc, #56]	; (8010dfc <prvResetNextTaskUnblockTime+0x40>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d101      	bne.n	8010dd0 <prvResetNextTaskUnblockTime+0x14>
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e000      	b.n	8010dd2 <prvResetNextTaskUnblockTime+0x16>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d004      	beq.n	8010de0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010dd6:	4b0a      	ldr	r3, [pc, #40]	; (8010e00 <prvResetNextTaskUnblockTime+0x44>)
 8010dd8:	2201      	movs	r2, #1
 8010dda:	4252      	negs	r2, r2
 8010ddc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010dde:	e008      	b.n	8010df2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010de0:	4b06      	ldr	r3, [pc, #24]	; (8010dfc <prvResetNextTaskUnblockTime+0x40>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	68db      	ldr	r3, [r3, #12]
 8010de8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	685a      	ldr	r2, [r3, #4]
 8010dee:	4b04      	ldr	r3, [pc, #16]	; (8010e00 <prvResetNextTaskUnblockTime+0x44>)
 8010df0:	601a      	str	r2, [r3, #0]
}
 8010df2:	46c0      	nop			; (mov r8, r8)
 8010df4:	46bd      	mov	sp, r7
 8010df6:	b002      	add	sp, #8
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	46c0      	nop			; (mov r8, r8)
 8010dfc:	20002000 	.word	0x20002000
 8010e00:	20002068 	.word	0x20002068

08010e04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010e0a:	4b04      	ldr	r3, [pc, #16]	; (8010e1c <xTaskGetCurrentTaskHandle+0x18>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010e10:	687b      	ldr	r3, [r7, #4]
	}
 8010e12:	0018      	movs	r0, r3
 8010e14:	46bd      	mov	sp, r7
 8010e16:	b002      	add	sp, #8
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	46c0      	nop			; (mov r8, r8)
 8010e1c:	20001b74 	.word	0x20001b74

08010e20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010e26:	4b0a      	ldr	r3, [pc, #40]	; (8010e50 <xTaskGetSchedulerState+0x30>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d102      	bne.n	8010e34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	607b      	str	r3, [r7, #4]
 8010e32:	e008      	b.n	8010e46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e34:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <xTaskGetSchedulerState+0x34>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d102      	bne.n	8010e42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010e3c:	2302      	movs	r3, #2
 8010e3e:	607b      	str	r3, [r7, #4]
 8010e40:	e001      	b.n	8010e46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010e42:	2300      	movs	r3, #0
 8010e44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010e46:	687b      	ldr	r3, [r7, #4]
	}
 8010e48:	0018      	movs	r0, r3
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	b002      	add	sp, #8
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	20002054 	.word	0x20002054
 8010e54:	20002070 	.word	0x20002070

08010e58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010e64:	2300      	movs	r3, #0
 8010e66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d056      	beq.n	8010f1c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e72:	4b2d      	ldr	r3, [pc, #180]	; (8010f28 <xTaskPriorityInherit+0xd0>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d246      	bcs.n	8010f0a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	699b      	ldr	r3, [r3, #24]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	db06      	blt.n	8010e92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e84:	4b28      	ldr	r3, [pc, #160]	; (8010f28 <xTaskPriorityInherit+0xd0>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e8a:	2238      	movs	r2, #56	; 0x38
 8010e8c:	1ad2      	subs	r2, r2, r3
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	6959      	ldr	r1, [r3, #20]
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e9a:	0013      	movs	r3, r2
 8010e9c:	009b      	lsls	r3, r3, #2
 8010e9e:	189b      	adds	r3, r3, r2
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	4a22      	ldr	r2, [pc, #136]	; (8010f2c <xTaskPriorityInherit+0xd4>)
 8010ea4:	189b      	adds	r3, r3, r2
 8010ea6:	4299      	cmp	r1, r3
 8010ea8:	d101      	bne.n	8010eae <xTaskPriorityInherit+0x56>
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e000      	b.n	8010eb0 <xTaskPriorityInherit+0x58>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d022      	beq.n	8010efa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	3304      	adds	r3, #4
 8010eb8:	0018      	movs	r0, r3
 8010eba:	f7fe fa64 	bl	800f386 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ebe:	4b1a      	ldr	r3, [pc, #104]	; (8010f28 <xTaskPriorityInherit+0xd0>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ecc:	4b18      	ldr	r3, [pc, #96]	; (8010f30 <xTaskPriorityInherit+0xd8>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d903      	bls.n	8010edc <xTaskPriorityInherit+0x84>
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ed8:	4b15      	ldr	r3, [pc, #84]	; (8010f30 <xTaskPriorityInherit+0xd8>)
 8010eda:	601a      	str	r2, [r3, #0]
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ee0:	0013      	movs	r3, r2
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	189b      	adds	r3, r3, r2
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	4a10      	ldr	r2, [pc, #64]	; (8010f2c <xTaskPriorityInherit+0xd4>)
 8010eea:	189a      	adds	r2, r3, r2
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	3304      	adds	r3, #4
 8010ef0:	0019      	movs	r1, r3
 8010ef2:	0010      	movs	r0, r2
 8010ef4:	f7fe f9ef 	bl	800f2d6 <vListInsertEnd>
 8010ef8:	e004      	b.n	8010f04 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010efa:	4b0b      	ldr	r3, [pc, #44]	; (8010f28 <xTaskPriorityInherit+0xd0>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010f04:	2301      	movs	r3, #1
 8010f06:	60fb      	str	r3, [r7, #12]
 8010f08:	e008      	b.n	8010f1c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f0e:	4b06      	ldr	r3, [pc, #24]	; (8010f28 <xTaskPriorityInherit+0xd0>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d201      	bcs.n	8010f1c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
	}
 8010f1e:	0018      	movs	r0, r3
 8010f20:	46bd      	mov	sp, r7
 8010f22:	b004      	add	sp, #16
 8010f24:	bd80      	pop	{r7, pc}
 8010f26:	46c0      	nop			; (mov r8, r8)
 8010f28:	20001b74 	.word	0x20001b74
 8010f2c:	20001b78 	.word	0x20001b78
 8010f30:	20002050 	.word	0x20002050

08010f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010f40:	2300      	movs	r3, #0
 8010f42:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d044      	beq.n	8010fd4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010f4a:	4b25      	ldr	r3, [pc, #148]	; (8010fe0 <xTaskPriorityDisinherit+0xac>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	68ba      	ldr	r2, [r7, #8]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d001      	beq.n	8010f58 <xTaskPriorityDisinherit+0x24>
 8010f54:	b672      	cpsid	i
 8010f56:	e7fe      	b.n	8010f56 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d101      	bne.n	8010f64 <xTaskPriorityDisinherit+0x30>
 8010f60:	b672      	cpsid	i
 8010f62:	e7fe      	b.n	8010f62 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f68:	1e5a      	subs	r2, r3, #1
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d02c      	beq.n	8010fd4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d128      	bne.n	8010fd4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	3304      	adds	r3, #4
 8010f86:	0018      	movs	r0, r3
 8010f88:	f7fe f9fd 	bl	800f386 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f98:	2238      	movs	r2, #56	; 0x38
 8010f9a:	1ad2      	subs	r2, r2, r3
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa4:	4b0f      	ldr	r3, [pc, #60]	; (8010fe4 <xTaskPriorityDisinherit+0xb0>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d903      	bls.n	8010fb4 <xTaskPriorityDisinherit+0x80>
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fb0:	4b0c      	ldr	r3, [pc, #48]	; (8010fe4 <xTaskPriorityDisinherit+0xb0>)
 8010fb2:	601a      	str	r2, [r3, #0]
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fb8:	0013      	movs	r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	189b      	adds	r3, r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4a09      	ldr	r2, [pc, #36]	; (8010fe8 <xTaskPriorityDisinherit+0xb4>)
 8010fc2:	189a      	adds	r2, r3, r2
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	3304      	adds	r3, #4
 8010fc8:	0019      	movs	r1, r3
 8010fca:	0010      	movs	r0, r2
 8010fcc:	f7fe f983 	bl	800f2d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
	}
 8010fd6:	0018      	movs	r0, r3
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	b004      	add	sp, #16
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	46c0      	nop			; (mov r8, r8)
 8010fe0:	20001b74 	.word	0x20001b74
 8010fe4:	20002050 	.word	0x20002050
 8010fe8:	20001b78 	.word	0x20001b78

08010fec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d05d      	beq.n	80110c0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011008:	2b00      	cmp	r3, #0
 801100a:	d101      	bne.n	8011010 <vTaskPriorityDisinheritAfterTimeout+0x24>
 801100c:	b672      	cpsid	i
 801100e:	e7fe      	b.n	801100e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011014:	683a      	ldr	r2, [r7, #0]
 8011016:	429a      	cmp	r2, r3
 8011018:	d902      	bls.n	8011020 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	617b      	str	r3, [r7, #20]
 801101e:	e002      	b.n	8011026 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011024:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102a:	697a      	ldr	r2, [r7, #20]
 801102c:	429a      	cmp	r2, r3
 801102e:	d047      	beq.n	80110c0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011034:	68fa      	ldr	r2, [r7, #12]
 8011036:	429a      	cmp	r2, r3
 8011038:	d142      	bne.n	80110c0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801103a:	4b23      	ldr	r3, [pc, #140]	; (80110c8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	693a      	ldr	r2, [r7, #16]
 8011040:	429a      	cmp	r2, r3
 8011042:	d101      	bne.n	8011048 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8011044:	b672      	cpsid	i
 8011046:	e7fe      	b.n	8011046 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801104c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	697a      	ldr	r2, [r7, #20]
 8011052:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	2b00      	cmp	r3, #0
 801105a:	db04      	blt.n	8011066 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	2238      	movs	r2, #56	; 0x38
 8011060:	1ad2      	subs	r2, r2, r3
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	6959      	ldr	r1, [r3, #20]
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	0013      	movs	r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	189b      	adds	r3, r3, r2
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4a15      	ldr	r2, [pc, #84]	; (80110cc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8011076:	189b      	adds	r3, r3, r2
 8011078:	4299      	cmp	r1, r3
 801107a:	d101      	bne.n	8011080 <vTaskPriorityDisinheritAfterTimeout+0x94>
 801107c:	2301      	movs	r3, #1
 801107e:	e000      	b.n	8011082 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8011080:	2300      	movs	r3, #0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d01c      	beq.n	80110c0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	3304      	adds	r3, #4
 801108a:	0018      	movs	r0, r3
 801108c:	f7fe f97b 	bl	800f386 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011094:	4b0e      	ldr	r3, [pc, #56]	; (80110d0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	429a      	cmp	r2, r3
 801109a:	d903      	bls.n	80110a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a0:	4b0b      	ldr	r3, [pc, #44]	; (80110d0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 80110a2:	601a      	str	r2, [r3, #0]
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a8:	0013      	movs	r3, r2
 80110aa:	009b      	lsls	r3, r3, #2
 80110ac:	189b      	adds	r3, r3, r2
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	4a06      	ldr	r2, [pc, #24]	; (80110cc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 80110b2:	189a      	adds	r2, r3, r2
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	3304      	adds	r3, #4
 80110b8:	0019      	movs	r1, r3
 80110ba:	0010      	movs	r0, r2
 80110bc:	f7fe f90b 	bl	800f2d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80110c0:	46c0      	nop			; (mov r8, r8)
 80110c2:	46bd      	mov	sp, r7
 80110c4:	b006      	add	sp, #24
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	20001b74 	.word	0x20001b74
 80110cc:	20001b78 	.word	0x20001b78
 80110d0:	20002050 	.word	0x20002050

080110d4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b082      	sub	sp, #8
 80110d8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80110da:	4b08      	ldr	r3, [pc, #32]	; (80110fc <uxTaskResetEventItemValue+0x28>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	699b      	ldr	r3, [r3, #24]
 80110e0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110e2:	4b06      	ldr	r3, [pc, #24]	; (80110fc <uxTaskResetEventItemValue+0x28>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e8:	4b04      	ldr	r3, [pc, #16]	; (80110fc <uxTaskResetEventItemValue+0x28>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2138      	movs	r1, #56	; 0x38
 80110ee:	1a8a      	subs	r2, r1, r2
 80110f0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80110f2:	687b      	ldr	r3, [r7, #4]
}
 80110f4:	0018      	movs	r0, r3
 80110f6:	46bd      	mov	sp, r7
 80110f8:	b002      	add	sp, #8
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	20001b74 	.word	0x20001b74

08011100 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011100:	b580      	push	{r7, lr}
 8011102:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011104:	4b06      	ldr	r3, [pc, #24]	; (8011120 <pvTaskIncrementMutexHeldCount+0x20>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d004      	beq.n	8011116 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801110c:	4b04      	ldr	r3, [pc, #16]	; (8011120 <pvTaskIncrementMutexHeldCount+0x20>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011112:	3201      	adds	r2, #1
 8011114:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011116:	4b02      	ldr	r3, [pc, #8]	; (8011120 <pvTaskIncrementMutexHeldCount+0x20>)
 8011118:	681b      	ldr	r3, [r3, #0]
	}
 801111a:	0018      	movs	r0, r3
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	20001b74 	.word	0x20001b74

08011124 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801112e:	4b21      	ldr	r3, [pc, #132]	; (80111b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011134:	4b20      	ldr	r3, [pc, #128]	; (80111b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	3304      	adds	r3, #4
 801113a:	0018      	movs	r0, r3
 801113c:	f7fe f923 	bl	800f386 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	3301      	adds	r3, #1
 8011144:	d10b      	bne.n	801115e <prvAddCurrentTaskToDelayedList+0x3a>
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d008      	beq.n	801115e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801114c:	4b1a      	ldr	r3, [pc, #104]	; (80111b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	1d1a      	adds	r2, r3, #4
 8011152:	4b1a      	ldr	r3, [pc, #104]	; (80111bc <prvAddCurrentTaskToDelayedList+0x98>)
 8011154:	0011      	movs	r1, r2
 8011156:	0018      	movs	r0, r3
 8011158:	f7fe f8bd 	bl	800f2d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801115c:	e026      	b.n	80111ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	18d3      	adds	r3, r2, r3
 8011164:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011166:	4b14      	ldr	r3, [pc, #80]	; (80111b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68ba      	ldr	r2, [r7, #8]
 801116c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801116e:	68ba      	ldr	r2, [r7, #8]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	429a      	cmp	r2, r3
 8011174:	d209      	bcs.n	801118a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011176:	4b12      	ldr	r3, [pc, #72]	; (80111c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	4b0f      	ldr	r3, [pc, #60]	; (80111b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	3304      	adds	r3, #4
 8011180:	0019      	movs	r1, r3
 8011182:	0010      	movs	r0, r2
 8011184:	f7fe f8c9 	bl	800f31a <vListInsert>
}
 8011188:	e010      	b.n	80111ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801118a:	4b0e      	ldr	r3, [pc, #56]	; (80111c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	4b0a      	ldr	r3, [pc, #40]	; (80111b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	3304      	adds	r3, #4
 8011194:	0019      	movs	r1, r3
 8011196:	0010      	movs	r0, r2
 8011198:	f7fe f8bf 	bl	800f31a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801119c:	4b0a      	ldr	r3, [pc, #40]	; (80111c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	68ba      	ldr	r2, [r7, #8]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d202      	bcs.n	80111ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80111a6:	4b08      	ldr	r3, [pc, #32]	; (80111c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	601a      	str	r2, [r3, #0]
}
 80111ac:	46c0      	nop			; (mov r8, r8)
 80111ae:	46bd      	mov	sp, r7
 80111b0:	b004      	add	sp, #16
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	2000204c 	.word	0x2000204c
 80111b8:	20001b74 	.word	0x20001b74
 80111bc:	20002034 	.word	0x20002034
 80111c0:	20002004 	.word	0x20002004
 80111c4:	20002000 	.word	0x20002000
 80111c8:	20002068 	.word	0x20002068

080111cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80111cc:	b590      	push	{r4, r7, lr}
 80111ce:	b089      	sub	sp, #36	; 0x24
 80111d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80111d2:	2300      	movs	r3, #0
 80111d4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80111d6:	f000 faff 	bl	80117d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80111da:	4b17      	ldr	r3, [pc, #92]	; (8011238 <xTimerCreateTimerTask+0x6c>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d020      	beq.n	8011224 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80111e2:	2300      	movs	r3, #0
 80111e4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80111e6:	2300      	movs	r3, #0
 80111e8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80111ea:	003a      	movs	r2, r7
 80111ec:	1d39      	adds	r1, r7, #4
 80111ee:	2308      	movs	r3, #8
 80111f0:	18fb      	adds	r3, r7, r3
 80111f2:	0018      	movs	r0, r3
 80111f4:	f7fd fe5c 	bl	800eeb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80111f8:	683c      	ldr	r4, [r7, #0]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	68ba      	ldr	r2, [r7, #8]
 80111fe:	490f      	ldr	r1, [pc, #60]	; (801123c <xTimerCreateTimerTask+0x70>)
 8011200:	480f      	ldr	r0, [pc, #60]	; (8011240 <xTimerCreateTimerTask+0x74>)
 8011202:	9202      	str	r2, [sp, #8]
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	2318      	movs	r3, #24
 8011208:	9300      	str	r3, [sp, #0]
 801120a:	2300      	movs	r3, #0
 801120c:	0022      	movs	r2, r4
 801120e:	f7fe ffb0 	bl	8010172 <xTaskCreateStatic>
 8011212:	0002      	movs	r2, r0
 8011214:	4b0b      	ldr	r3, [pc, #44]	; (8011244 <xTimerCreateTimerTask+0x78>)
 8011216:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011218:	4b0a      	ldr	r3, [pc, #40]	; (8011244 <xTimerCreateTimerTask+0x78>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8011220:	2301      	movs	r3, #1
 8011222:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d101      	bne.n	801122e <xTimerCreateTimerTask+0x62>
 801122a:	b672      	cpsid	i
 801122c:	e7fe      	b.n	801122c <xTimerCreateTimerTask+0x60>
	return xReturn;
 801122e:	68fb      	ldr	r3, [r7, #12]
}
 8011230:	0018      	movs	r0, r3
 8011232:	46bd      	mov	sp, r7
 8011234:	b005      	add	sp, #20
 8011236:	bd90      	pop	{r4, r7, pc}
 8011238:	200020a4 	.word	0x200020a4
 801123c:	08014038 	.word	0x08014038
 8011240:	0801143d 	.word	0x0801143d
 8011244:	200020a8 	.word	0x200020a8

08011248 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011248:	b590      	push	{r4, r7, lr}
 801124a:	b089      	sub	sp, #36	; 0x24
 801124c:	af02      	add	r7, sp, #8
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	607a      	str	r2, [r7, #4]
 8011254:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8011256:	2030      	movs	r0, #48	; 0x30
 8011258:	f000 fc72 	bl	8011b40 <pvPortMalloc>
 801125c:	0003      	movs	r3, r0
 801125e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d00e      	beq.n	8011284 <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011266:	683c      	ldr	r4, [r7, #0]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	68b9      	ldr	r1, [r7, #8]
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	9301      	str	r3, [sp, #4]
 8011272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011274:	9300      	str	r3, [sp, #0]
 8011276:	0023      	movs	r3, r4
 8011278:	f000 f835 	bl	80112e6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	222c      	movs	r2, #44	; 0x2c
 8011280:	2100      	movs	r1, #0
 8011282:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8011284:	697b      	ldr	r3, [r7, #20]
	}
 8011286:	0018      	movs	r0, r3
 8011288:	46bd      	mov	sp, r7
 801128a:	b007      	add	sp, #28
 801128c:	bd90      	pop	{r4, r7, pc}

0801128e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801128e:	b590      	push	{r4, r7, lr}
 8011290:	b089      	sub	sp, #36	; 0x24
 8011292:	af02      	add	r7, sp, #8
 8011294:	60f8      	str	r0, [r7, #12]
 8011296:	60b9      	str	r1, [r7, #8]
 8011298:	607a      	str	r2, [r7, #4]
 801129a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801129c:	2330      	movs	r3, #48	; 0x30
 801129e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	2b30      	cmp	r3, #48	; 0x30
 80112a4:	d001      	beq.n	80112aa <xTimerCreateStatic+0x1c>
 80112a6:	b672      	cpsid	i
 80112a8:	e7fe      	b.n	80112a8 <xTimerCreateStatic+0x1a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80112aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d101      	bne.n	80112b4 <xTimerCreateStatic+0x26>
 80112b0:	b672      	cpsid	i
 80112b2:	e7fe      	b.n	80112b2 <xTimerCreateStatic+0x24>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00e      	beq.n	80112dc <xTimerCreateStatic+0x4e>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80112be:	683c      	ldr	r4, [r7, #0]
 80112c0:	687a      	ldr	r2, [r7, #4]
 80112c2:	68b9      	ldr	r1, [r7, #8]
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	9301      	str	r3, [sp, #4]
 80112ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112cc:	9300      	str	r3, [sp, #0]
 80112ce:	0023      	movs	r3, r4
 80112d0:	f000 f809 	bl	80112e6 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	222c      	movs	r2, #44	; 0x2c
 80112d8:	2101      	movs	r1, #1
 80112da:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80112dc:	697b      	ldr	r3, [r7, #20]
	}
 80112de:	0018      	movs	r0, r3
 80112e0:	46bd      	mov	sp, r7
 80112e2:	b007      	add	sp, #28
 80112e4:	bd90      	pop	{r4, r7, pc}

080112e6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b084      	sub	sp, #16
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	60f8      	str	r0, [r7, #12]
 80112ee:	60b9      	str	r1, [r7, #8]
 80112f0:	607a      	str	r2, [r7, #4]
 80112f2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d101      	bne.n	80112fe <prvInitialiseNewTimer+0x18>
 80112fa:	b672      	cpsid	i
 80112fc:	e7fe      	b.n	80112fc <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d015      	beq.n	8011330 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011304:	f000 fa68 	bl	80117d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801130e:	69fb      	ldr	r3, [r7, #28]
 8011310:	68ba      	ldr	r2, [r7, #8]
 8011312:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	687a      	ldr	r2, [r7, #4]
 8011318:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	683a      	ldr	r2, [r7, #0]
 801131e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	69ba      	ldr	r2, [r7, #24]
 8011324:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	3304      	adds	r3, #4
 801132a:	0018      	movs	r0, r3
 801132c:	f7fd ffc8 	bl	800f2c0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011330:	46c0      	nop			; (mov r8, r8)
 8011332:	46bd      	mov	sp, r7
 8011334:	b004      	add	sp, #16
 8011336:	bd80      	pop	{r7, pc}

08011338 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011338:	b590      	push	{r4, r7, lr}
 801133a:	b08b      	sub	sp, #44	; 0x2c
 801133c:	af00      	add	r7, sp, #0
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	607a      	str	r2, [r7, #4]
 8011344:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011346:	2300      	movs	r3, #0
 8011348:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d101      	bne.n	8011354 <xTimerGenericCommand+0x1c>
 8011350:	b672      	cpsid	i
 8011352:	e7fe      	b.n	8011352 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011354:	4b1c      	ldr	r3, [pc, #112]	; (80113c8 <xTimerGenericCommand+0x90>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d030      	beq.n	80113be <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801135c:	2414      	movs	r4, #20
 801135e:	193b      	adds	r3, r7, r4
 8011360:	68ba      	ldr	r2, [r7, #8]
 8011362:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011364:	193b      	adds	r3, r7, r4
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801136a:	193b      	adds	r3, r7, r4
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	2b05      	cmp	r3, #5
 8011374:	dc19      	bgt.n	80113aa <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011376:	f7ff fd53 	bl	8010e20 <xTaskGetSchedulerState>
 801137a:	0003      	movs	r3, r0
 801137c:	2b02      	cmp	r3, #2
 801137e:	d109      	bne.n	8011394 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011380:	4b11      	ldr	r3, [pc, #68]	; (80113c8 <xTimerGenericCommand+0x90>)
 8011382:	6818      	ldr	r0, [r3, #0]
 8011384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011386:	1939      	adds	r1, r7, r4
 8011388:	2300      	movs	r3, #0
 801138a:	f7fe f9d1 	bl	800f730 <xQueueGenericSend>
 801138e:	0003      	movs	r3, r0
 8011390:	627b      	str	r3, [r7, #36]	; 0x24
 8011392:	e014      	b.n	80113be <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011394:	4b0c      	ldr	r3, [pc, #48]	; (80113c8 <xTimerGenericCommand+0x90>)
 8011396:	6818      	ldr	r0, [r3, #0]
 8011398:	2314      	movs	r3, #20
 801139a:	18f9      	adds	r1, r7, r3
 801139c:	2300      	movs	r3, #0
 801139e:	2200      	movs	r2, #0
 80113a0:	f7fe f9c6 	bl	800f730 <xQueueGenericSend>
 80113a4:	0003      	movs	r3, r0
 80113a6:	627b      	str	r3, [r7, #36]	; 0x24
 80113a8:	e009      	b.n	80113be <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80113aa:	4b07      	ldr	r3, [pc, #28]	; (80113c8 <xTimerGenericCommand+0x90>)
 80113ac:	6818      	ldr	r0, [r3, #0]
 80113ae:	683a      	ldr	r2, [r7, #0]
 80113b0:	2314      	movs	r3, #20
 80113b2:	18f9      	adds	r1, r7, r3
 80113b4:	2300      	movs	r3, #0
 80113b6:	f7fe fa7f 	bl	800f8b8 <xQueueGenericSendFromISR>
 80113ba:	0003      	movs	r3, r0
 80113bc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80113be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80113c0:	0018      	movs	r0, r3
 80113c2:	46bd      	mov	sp, r7
 80113c4:	b00b      	add	sp, #44	; 0x2c
 80113c6:	bd90      	pop	{r4, r7, pc}
 80113c8:	200020a4 	.word	0x200020a4

080113cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af02      	add	r7, sp, #8
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80113d6:	4b18      	ldr	r3, [pc, #96]	; (8011438 <prvProcessExpiredTimer+0x6c>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	3304      	adds	r3, #4
 80113e4:	0018      	movs	r0, r3
 80113e6:	f7fd ffce 	bl	800f386 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	69db      	ldr	r3, [r3, #28]
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d119      	bne.n	8011426 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	699a      	ldr	r2, [r3, #24]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	18d1      	adds	r1, r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	683a      	ldr	r2, [r7, #0]
 80113fe:	68f8      	ldr	r0, [r7, #12]
 8011400:	f000 f8b6 	bl	8011570 <prvInsertTimerInActiveList>
 8011404:	1e03      	subs	r3, r0, #0
 8011406:	d00e      	beq.n	8011426 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	2300      	movs	r3, #0
 801140e:	9300      	str	r3, [sp, #0]
 8011410:	2300      	movs	r3, #0
 8011412:	2100      	movs	r1, #0
 8011414:	f7ff ff90 	bl	8011338 <xTimerGenericCommand>
 8011418:	0003      	movs	r3, r0
 801141a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <prvProcessExpiredTimer+0x5a>
 8011422:	b672      	cpsid	i
 8011424:	e7fe      	b.n	8011424 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801142a:	68fa      	ldr	r2, [r7, #12]
 801142c:	0010      	movs	r0, r2
 801142e:	4798      	blx	r3
}
 8011430:	46c0      	nop			; (mov r8, r8)
 8011432:	46bd      	mov	sp, r7
 8011434:	b004      	add	sp, #16
 8011436:	bd80      	pop	{r7, pc}
 8011438:	2000209c 	.word	0x2000209c

0801143c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011444:	2308      	movs	r3, #8
 8011446:	18fb      	adds	r3, r7, r3
 8011448:	0018      	movs	r0, r3
 801144a:	f000 f851 	bl	80114f0 <prvGetNextExpireTime>
 801144e:	0003      	movs	r3, r0
 8011450:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011452:	68ba      	ldr	r2, [r7, #8]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	0011      	movs	r1, r2
 8011458:	0018      	movs	r0, r3
 801145a:	f000 f803 	bl	8011464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801145e:	f000 f8c9 	bl	80115f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011462:	e7ef      	b.n	8011444 <prvTimerTask+0x8>

08011464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801146e:	f7ff f893 	bl	8010598 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011472:	2308      	movs	r3, #8
 8011474:	18fb      	adds	r3, r7, r3
 8011476:	0018      	movs	r0, r3
 8011478:	f000 f85a 	bl	8011530 <prvSampleTimeNow>
 801147c:	0003      	movs	r3, r0
 801147e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d129      	bne.n	80114da <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d10c      	bne.n	80114a6 <prvProcessTimerOrBlockTask+0x42>
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	429a      	cmp	r2, r3
 8011492:	d808      	bhi.n	80114a6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8011494:	f7ff f88c 	bl	80105b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	0011      	movs	r1, r2
 801149e:	0018      	movs	r0, r3
 80114a0:	f7ff ff94 	bl	80113cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80114a4:	e01b      	b.n	80114de <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d006      	beq.n	80114ba <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80114ac:	4b0e      	ldr	r3, [pc, #56]	; (80114e8 <prvProcessTimerOrBlockTask+0x84>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	425a      	negs	r2, r3
 80114b4:	4153      	adcs	r3, r2
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80114ba:	4b0c      	ldr	r3, [pc, #48]	; (80114ec <prvProcessTimerOrBlockTask+0x88>)
 80114bc:	6818      	ldr	r0, [r3, #0]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	1ad3      	subs	r3, r2, r3
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	0019      	movs	r1, r3
 80114c8:	f7fe fe20 	bl	801010c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80114cc:	f7ff f870 	bl	80105b0 <xTaskResumeAll>
 80114d0:	1e03      	subs	r3, r0, #0
 80114d2:	d104      	bne.n	80114de <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80114d4:	f000 fa8c 	bl	80119f0 <vPortYield>
}
 80114d8:	e001      	b.n	80114de <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80114da:	f7ff f869 	bl	80105b0 <xTaskResumeAll>
}
 80114de:	46c0      	nop			; (mov r8, r8)
 80114e0:	46bd      	mov	sp, r7
 80114e2:	b004      	add	sp, #16
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	46c0      	nop			; (mov r8, r8)
 80114e8:	200020a0 	.word	0x200020a0
 80114ec:	200020a4 	.word	0x200020a4

080114f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80114f8:	4b0c      	ldr	r3, [pc, #48]	; (801152c <prvGetNextExpireTime+0x3c>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	425a      	negs	r2, r3
 8011500:	4153      	adcs	r3, r2
 8011502:	b2db      	uxtb	r3, r3
 8011504:	001a      	movs	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d105      	bne.n	801151e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011512:	4b06      	ldr	r3, [pc, #24]	; (801152c <prvGetNextExpireTime+0x3c>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	68db      	ldr	r3, [r3, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	60fb      	str	r3, [r7, #12]
 801151c:	e001      	b.n	8011522 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801151e:	2300      	movs	r3, #0
 8011520:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011522:	68fb      	ldr	r3, [r7, #12]
}
 8011524:	0018      	movs	r0, r3
 8011526:	46bd      	mov	sp, r7
 8011528:	b004      	add	sp, #16
 801152a:	bd80      	pop	{r7, pc}
 801152c:	2000209c 	.word	0x2000209c

08011530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011538:	f7ff f8c6 	bl	80106c8 <xTaskGetTickCount>
 801153c:	0003      	movs	r3, r0
 801153e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8011540:	4b0a      	ldr	r3, [pc, #40]	; (801156c <prvSampleTimeNow+0x3c>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	68fa      	ldr	r2, [r7, #12]
 8011546:	429a      	cmp	r2, r3
 8011548:	d205      	bcs.n	8011556 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801154a:	f000 f8eb 	bl	8011724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2201      	movs	r2, #1
 8011552:	601a      	str	r2, [r3, #0]
 8011554:	e002      	b.n	801155c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801155c:	4b03      	ldr	r3, [pc, #12]	; (801156c <prvSampleTimeNow+0x3c>)
 801155e:	68fa      	ldr	r2, [r7, #12]
 8011560:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8011562:	68fb      	ldr	r3, [r7, #12]
}
 8011564:	0018      	movs	r0, r3
 8011566:	46bd      	mov	sp, r7
 8011568:	b004      	add	sp, #16
 801156a:	bd80      	pop	{r7, pc}
 801156c:	200020ac 	.word	0x200020ac

08011570 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
 801157c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801157e:	2300      	movs	r3, #0
 8011580:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	68fa      	ldr	r2, [r7, #12]
 801158c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801158e:	68ba      	ldr	r2, [r7, #8]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	429a      	cmp	r2, r3
 8011594:	d812      	bhi.n	80115bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	1ad2      	subs	r2, r2, r3
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	699b      	ldr	r3, [r3, #24]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d302      	bcc.n	80115aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80115a4:	2301      	movs	r3, #1
 80115a6:	617b      	str	r3, [r7, #20]
 80115a8:	e01b      	b.n	80115e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80115aa:	4b10      	ldr	r3, [pc, #64]	; (80115ec <prvInsertTimerInActiveList+0x7c>)
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	3304      	adds	r3, #4
 80115b2:	0019      	movs	r1, r3
 80115b4:	0010      	movs	r0, r2
 80115b6:	f7fd feb0 	bl	800f31a <vListInsert>
 80115ba:	e012      	b.n	80115e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d206      	bcs.n	80115d2 <prvInsertTimerInActiveList+0x62>
 80115c4:	68ba      	ldr	r2, [r7, #8]
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d302      	bcc.n	80115d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80115cc:	2301      	movs	r3, #1
 80115ce:	617b      	str	r3, [r7, #20]
 80115d0:	e007      	b.n	80115e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80115d2:	4b07      	ldr	r3, [pc, #28]	; (80115f0 <prvInsertTimerInActiveList+0x80>)
 80115d4:	681a      	ldr	r2, [r3, #0]
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	3304      	adds	r3, #4
 80115da:	0019      	movs	r1, r3
 80115dc:	0010      	movs	r0, r2
 80115de:	f7fd fe9c 	bl	800f31a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80115e2:	697b      	ldr	r3, [r7, #20]
}
 80115e4:	0018      	movs	r0, r3
 80115e6:	46bd      	mov	sp, r7
 80115e8:	b006      	add	sp, #24
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	200020a0 	.word	0x200020a0
 80115f0:	2000209c 	.word	0x2000209c

080115f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80115f4:	b590      	push	{r4, r7, lr}
 80115f6:	b08d      	sub	sp, #52	; 0x34
 80115f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80115fa:	e07f      	b.n	80116fc <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80115fc:	2208      	movs	r2, #8
 80115fe:	18bb      	adds	r3, r7, r2
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	da0f      	bge.n	8011626 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011606:	18bb      	adds	r3, r7, r2
 8011608:	3304      	adds	r3, #4
 801160a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160e:	2b00      	cmp	r3, #0
 8011610:	d101      	bne.n	8011616 <prvProcessReceivedCommands+0x22>
 8011612:	b672      	cpsid	i
 8011614:	e7fe      	b.n	8011614 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161c:	6858      	ldr	r0, [r3, #4]
 801161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	0019      	movs	r1, r3
 8011624:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011626:	2208      	movs	r2, #8
 8011628:	18bb      	adds	r3, r7, r2
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	db64      	blt.n	80116fa <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011630:	18bb      	adds	r3, r7, r2
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	695b      	ldr	r3, [r3, #20]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d004      	beq.n	8011648 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801163e:	6a3b      	ldr	r3, [r7, #32]
 8011640:	3304      	adds	r3, #4
 8011642:	0018      	movs	r0, r3
 8011644:	f7fd fe9f 	bl	800f386 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011648:	1d3b      	adds	r3, r7, #4
 801164a:	0018      	movs	r0, r3
 801164c:	f7ff ff70 	bl	8011530 <prvSampleTimeNow>
 8011650:	0003      	movs	r3, r0
 8011652:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8011654:	2308      	movs	r3, #8
 8011656:	18fb      	adds	r3, r7, r3
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b09      	cmp	r3, #9
 801165c:	d84e      	bhi.n	80116fc <prvProcessReceivedCommands+0x108>
 801165e:	009a      	lsls	r2, r3, #2
 8011660:	4b2e      	ldr	r3, [pc, #184]	; (801171c <prvProcessReceivedCommands+0x128>)
 8011662:	18d3      	adds	r3, r2, r3
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011668:	2408      	movs	r4, #8
 801166a:	193b      	adds	r3, r7, r4
 801166c:	685a      	ldr	r2, [r3, #4]
 801166e:	6a3b      	ldr	r3, [r7, #32]
 8011670:	699b      	ldr	r3, [r3, #24]
 8011672:	18d1      	adds	r1, r2, r3
 8011674:	193b      	adds	r3, r7, r4
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	69fa      	ldr	r2, [r7, #28]
 801167a:	6a38      	ldr	r0, [r7, #32]
 801167c:	f7ff ff78 	bl	8011570 <prvInsertTimerInActiveList>
 8011680:	1e03      	subs	r3, r0, #0
 8011682:	d03b      	beq.n	80116fc <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011684:	6a3b      	ldr	r3, [r7, #32]
 8011686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011688:	6a3a      	ldr	r2, [r7, #32]
 801168a:	0010      	movs	r0, r2
 801168c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801168e:	6a3b      	ldr	r3, [r7, #32]
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	2b01      	cmp	r3, #1
 8011694:	d132      	bne.n	80116fc <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011696:	193b      	adds	r3, r7, r4
 8011698:	685a      	ldr	r2, [r3, #4]
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	699b      	ldr	r3, [r3, #24]
 801169e:	18d2      	adds	r2, r2, r3
 80116a0:	6a38      	ldr	r0, [r7, #32]
 80116a2:	2300      	movs	r3, #0
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	2300      	movs	r3, #0
 80116a8:	2100      	movs	r1, #0
 80116aa:	f7ff fe45 	bl	8011338 <xTimerGenericCommand>
 80116ae:	0003      	movs	r3, r0
 80116b0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d121      	bne.n	80116fc <prvProcessReceivedCommands+0x108>
 80116b8:	b672      	cpsid	i
 80116ba:	e7fe      	b.n	80116ba <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80116bc:	2308      	movs	r3, #8
 80116be:	18fb      	adds	r3, r7, r3
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	6a3b      	ldr	r3, [r7, #32]
 80116c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	699b      	ldr	r3, [r3, #24]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d101      	bne.n	80116d2 <prvProcessReceivedCommands+0xde>
 80116ce:	b672      	cpsid	i
 80116d0:	e7fe      	b.n	80116d0 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80116d2:	6a3b      	ldr	r3, [r7, #32]
 80116d4:	699a      	ldr	r2, [r3, #24]
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	18d1      	adds	r1, r2, r3
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	69fa      	ldr	r2, [r7, #28]
 80116de:	6a38      	ldr	r0, [r7, #32]
 80116e0:	f7ff ff46 	bl	8011570 <prvInsertTimerInActiveList>
					break;
 80116e4:	e00a      	b.n	80116fc <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80116e6:	6a3b      	ldr	r3, [r7, #32]
 80116e8:	222c      	movs	r2, #44	; 0x2c
 80116ea:	5c9b      	ldrb	r3, [r3, r2]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d105      	bne.n	80116fc <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80116f0:	6a3b      	ldr	r3, [r7, #32]
 80116f2:	0018      	movs	r0, r3
 80116f4:	f000 faca 	bl	8011c8c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80116f8:	e000      	b.n	80116fc <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80116fa:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116fc:	4b08      	ldr	r3, [pc, #32]	; (8011720 <prvProcessReceivedCommands+0x12c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2208      	movs	r2, #8
 8011702:	18b9      	adds	r1, r7, r2
 8011704:	2200      	movs	r2, #0
 8011706:	0018      	movs	r0, r3
 8011708:	f7fe f947 	bl	800f99a <xQueueReceive>
 801170c:	1e03      	subs	r3, r0, #0
 801170e:	d000      	beq.n	8011712 <prvProcessReceivedCommands+0x11e>
 8011710:	e774      	b.n	80115fc <prvProcessReceivedCommands+0x8>
	}
}
 8011712:	46c0      	nop			; (mov r8, r8)
 8011714:	46c0      	nop			; (mov r8, r8)
 8011716:	46bd      	mov	sp, r7
 8011718:	b00b      	add	sp, #44	; 0x2c
 801171a:	bd90      	pop	{r4, r7, pc}
 801171c:	08014714 	.word	0x08014714
 8011720:	200020a4 	.word	0x200020a4

08011724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b088      	sub	sp, #32
 8011728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801172a:	e03e      	b.n	80117aa <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801172c:	4b28      	ldr	r3, [pc, #160]	; (80117d0 <prvSwitchTimerLists+0xac>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011736:	4b26      	ldr	r3, [pc, #152]	; (80117d0 <prvSwitchTimerLists+0xac>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	3304      	adds	r3, #4
 8011744:	0018      	movs	r0, r3
 8011746:	f7fd fe1e 	bl	800f386 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	0010      	movs	r0, r2
 8011752:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	69db      	ldr	r3, [r3, #28]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d126      	bne.n	80117aa <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	699b      	ldr	r3, [r3, #24]
 8011760:	693a      	ldr	r2, [r7, #16]
 8011762:	18d3      	adds	r3, r2, r3
 8011764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011766:	68ba      	ldr	r2, [r7, #8]
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	429a      	cmp	r2, r3
 801176c:	d90e      	bls.n	801178c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	68fa      	ldr	r2, [r7, #12]
 8011778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801177a:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <prvSwitchTimerLists+0xac>)
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3304      	adds	r3, #4
 8011782:	0019      	movs	r1, r3
 8011784:	0010      	movs	r0, r2
 8011786:	f7fd fdc8 	bl	800f31a <vListInsert>
 801178a:	e00e      	b.n	80117aa <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801178c:	693a      	ldr	r2, [r7, #16]
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	2300      	movs	r3, #0
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	2300      	movs	r3, #0
 8011796:	2100      	movs	r1, #0
 8011798:	f7ff fdce 	bl	8011338 <xTimerGenericCommand>
 801179c:	0003      	movs	r3, r0
 801179e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d101      	bne.n	80117aa <prvSwitchTimerLists+0x86>
 80117a6:	b672      	cpsid	i
 80117a8:	e7fe      	b.n	80117a8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80117aa:	4b09      	ldr	r3, [pc, #36]	; (80117d0 <prvSwitchTimerLists+0xac>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d1bb      	bne.n	801172c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80117b4:	4b06      	ldr	r3, [pc, #24]	; (80117d0 <prvSwitchTimerLists+0xac>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80117ba:	4b06      	ldr	r3, [pc, #24]	; (80117d4 <prvSwitchTimerLists+0xb0>)
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	4b04      	ldr	r3, [pc, #16]	; (80117d0 <prvSwitchTimerLists+0xac>)
 80117c0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80117c2:	4b04      	ldr	r3, [pc, #16]	; (80117d4 <prvSwitchTimerLists+0xb0>)
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	601a      	str	r2, [r3, #0]
}
 80117c8:	46c0      	nop			; (mov r8, r8)
 80117ca:	46bd      	mov	sp, r7
 80117cc:	b006      	add	sp, #24
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	2000209c 	.word	0x2000209c
 80117d4:	200020a0 	.word	0x200020a0

080117d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80117de:	f000 f917 	bl	8011a10 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80117e2:	4b16      	ldr	r3, [pc, #88]	; (801183c <prvCheckForValidListAndQueue+0x64>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d123      	bne.n	8011832 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80117ea:	4b15      	ldr	r3, [pc, #84]	; (8011840 <prvCheckForValidListAndQueue+0x68>)
 80117ec:	0018      	movs	r0, r3
 80117ee:	f7fd fd49 	bl	800f284 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80117f2:	4b14      	ldr	r3, [pc, #80]	; (8011844 <prvCheckForValidListAndQueue+0x6c>)
 80117f4:	0018      	movs	r0, r3
 80117f6:	f7fd fd45 	bl	800f284 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80117fa:	4b13      	ldr	r3, [pc, #76]	; (8011848 <prvCheckForValidListAndQueue+0x70>)
 80117fc:	4a10      	ldr	r2, [pc, #64]	; (8011840 <prvCheckForValidListAndQueue+0x68>)
 80117fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011800:	4b12      	ldr	r3, [pc, #72]	; (801184c <prvCheckForValidListAndQueue+0x74>)
 8011802:	4a10      	ldr	r2, [pc, #64]	; (8011844 <prvCheckForValidListAndQueue+0x6c>)
 8011804:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011806:	4b12      	ldr	r3, [pc, #72]	; (8011850 <prvCheckForValidListAndQueue+0x78>)
 8011808:	4a12      	ldr	r2, [pc, #72]	; (8011854 <prvCheckForValidListAndQueue+0x7c>)
 801180a:	2100      	movs	r1, #0
 801180c:	9100      	str	r1, [sp, #0]
 801180e:	2110      	movs	r1, #16
 8011810:	200a      	movs	r0, #10
 8011812:	f7fd fe34 	bl	800f47e <xQueueGenericCreateStatic>
 8011816:	0002      	movs	r2, r0
 8011818:	4b08      	ldr	r3, [pc, #32]	; (801183c <prvCheckForValidListAndQueue+0x64>)
 801181a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801181c:	4b07      	ldr	r3, [pc, #28]	; (801183c <prvCheckForValidListAndQueue+0x64>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d006      	beq.n	8011832 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011824:	4b05      	ldr	r3, [pc, #20]	; (801183c <prvCheckForValidListAndQueue+0x64>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a0b      	ldr	r2, [pc, #44]	; (8011858 <prvCheckForValidListAndQueue+0x80>)
 801182a:	0011      	movs	r1, r2
 801182c:	0018      	movs	r0, r3
 801182e:	f7fe fc1b 	bl	8010068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011832:	f000 f8ff 	bl	8011a34 <vPortExitCritical>
}
 8011836:	46c0      	nop			; (mov r8, r8)
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	200020a4 	.word	0x200020a4
 8011840:	20002074 	.word	0x20002074
 8011844:	20002088 	.word	0x20002088
 8011848:	2000209c 	.word	0x2000209c
 801184c:	200020a0 	.word	0x200020a0
 8011850:	20002150 	.word	0x20002150
 8011854:	200020b0 	.word	0x200020b0
 8011858:	08014040 	.word	0x08014040

0801185c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <pvTimerGetTimerID+0x16>
 801186e:	b672      	cpsid	i
 8011870:	e7fe      	b.n	8011870 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8011872:	f000 f8cd 	bl	8011a10 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6a1b      	ldr	r3, [r3, #32]
 801187a:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 801187c:	f000 f8da 	bl	8011a34 <vPortExitCritical>

	return pvReturn;
 8011880:	68bb      	ldr	r3, [r7, #8]
}
 8011882:	0018      	movs	r0, r3
 8011884:	46bd      	mov	sp, r7
 8011886:	b004      	add	sp, #16
 8011888:	bd80      	pop	{r7, pc}
	...

0801188c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801188c:	b580      	push	{r7, lr}
 801188e:	b08a      	sub	sp, #40	; 0x28
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
 8011898:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801189a:	2114      	movs	r1, #20
 801189c:	187b      	adds	r3, r7, r1
 801189e:	2202      	movs	r2, #2
 80118a0:	4252      	negs	r2, r2
 80118a2:	601a      	str	r2, [r3, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80118a4:	187b      	adds	r3, r7, r1
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	605a      	str	r2, [r3, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80118aa:	187b      	adds	r3, r7, r1
 80118ac:	68ba      	ldr	r2, [r7, #8]
 80118ae:	609a      	str	r2, [r3, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80118b0:	187b      	adds	r3, r7, r1
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	60da      	str	r2, [r3, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80118b6:	4b07      	ldr	r3, [pc, #28]	; (80118d4 <xTimerPendFunctionCallFromISR+0x48>)
 80118b8:	6818      	ldr	r0, [r3, #0]
 80118ba:	683a      	ldr	r2, [r7, #0]
 80118bc:	1879      	adds	r1, r7, r1
 80118be:	2300      	movs	r3, #0
 80118c0:	f7fd fffa 	bl	800f8b8 <xQueueGenericSendFromISR>
 80118c4:	0003      	movs	r3, r0
 80118c6:	627b      	str	r3, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80118c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80118ca:	0018      	movs	r0, r3
 80118cc:	46bd      	mov	sp, r7
 80118ce:	b00a      	add	sp, #40	; 0x28
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	46c0      	nop			; (mov r8, r8)
 80118d4:	200020a4 	.word	0x200020a4

080118d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	3b04      	subs	r3, #4
 80118e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2280      	movs	r2, #128	; 0x80
 80118ee:	0452      	lsls	r2, r2, #17
 80118f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	3b04      	subs	r3, #4
 80118f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80118f8:	68ba      	ldr	r2, [r7, #8]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	3b04      	subs	r3, #4
 8011902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011904:	4a08      	ldr	r2, [pc, #32]	; (8011928 <pxPortInitialiseStack+0x50>)
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	3b14      	subs	r3, #20
 801190e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	3b20      	subs	r3, #32
 801191a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801191c:	68fb      	ldr	r3, [r7, #12]
}
 801191e:	0018      	movs	r0, r3
 8011920:	46bd      	mov	sp, r7
 8011922:	b004      	add	sp, #16
 8011924:	bd80      	pop	{r7, pc}
 8011926:	46c0      	nop			; (mov r8, r8)
 8011928:	0801192d 	.word	0x0801192d

0801192c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8011932:	2300      	movs	r3, #0
 8011934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011936:	4b08      	ldr	r3, [pc, #32]	; (8011958 <prvTaskExitError+0x2c>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	3301      	adds	r3, #1
 801193c:	d001      	beq.n	8011942 <prvTaskExitError+0x16>
 801193e:	b672      	cpsid	i
 8011940:	e7fe      	b.n	8011940 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8011942:	b672      	cpsid	i
	while( ulDummy == 0 )
 8011944:	46c0      	nop			; (mov r8, r8)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d0fc      	beq.n	8011946 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801194c:	46c0      	nop			; (mov r8, r8)
 801194e:	46c0      	nop			; (mov r8, r8)
 8011950:	46bd      	mov	sp, r7
 8011952:	b002      	add	sp, #8
 8011954:	bd80      	pop	{r7, pc}
 8011956:	46c0      	nop			; (mov r8, r8)
 8011958:	20000028 	.word	0x20000028

0801195c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8011960:	46c0      	nop			; (mov r8, r8)
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
	...

08011970 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011970:	4a0b      	ldr	r2, [pc, #44]	; (80119a0 <pxCurrentTCBConst2>)
 8011972:	6813      	ldr	r3, [r2, #0]
 8011974:	6818      	ldr	r0, [r3, #0]
 8011976:	3020      	adds	r0, #32
 8011978:	f380 8809 	msr	PSP, r0
 801197c:	2002      	movs	r0, #2
 801197e:	f380 8814 	msr	CONTROL, r0
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011988:	46ae      	mov	lr, r5
 801198a:	bc08      	pop	{r3}
 801198c:	bc04      	pop	{r2}
 801198e:	b662      	cpsie	i
 8011990:	4718      	bx	r3
 8011992:	46c0      	nop			; (mov r8, r8)
 8011994:	46c0      	nop			; (mov r8, r8)
 8011996:	46c0      	nop			; (mov r8, r8)
 8011998:	46c0      	nop			; (mov r8, r8)
 801199a:	46c0      	nop			; (mov r8, r8)
 801199c:	46c0      	nop			; (mov r8, r8)
 801199e:	46c0      	nop			; (mov r8, r8)

080119a0 <pxCurrentTCBConst2>:
 80119a0:	20001b74 	.word	0x20001b74
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80119a4:	46c0      	nop			; (mov r8, r8)
 80119a6:	46c0      	nop			; (mov r8, r8)

080119a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80119ac:	4b0e      	ldr	r3, [pc, #56]	; (80119e8 <xPortStartScheduler+0x40>)
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	4b0d      	ldr	r3, [pc, #52]	; (80119e8 <xPortStartScheduler+0x40>)
 80119b2:	21ff      	movs	r1, #255	; 0xff
 80119b4:	0409      	lsls	r1, r1, #16
 80119b6:	430a      	orrs	r2, r1
 80119b8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80119ba:	4b0b      	ldr	r3, [pc, #44]	; (80119e8 <xPortStartScheduler+0x40>)
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	4b0a      	ldr	r3, [pc, #40]	; (80119e8 <xPortStartScheduler+0x40>)
 80119c0:	21ff      	movs	r1, #255	; 0xff
 80119c2:	0609      	lsls	r1, r1, #24
 80119c4:	430a      	orrs	r2, r1
 80119c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80119c8:	f000 f898 	bl	8011afc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119cc:	4b07      	ldr	r3, [pc, #28]	; (80119ec <xPortStartScheduler+0x44>)
 80119ce:	2200      	movs	r2, #0
 80119d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80119d2:	f7ff ffcd 	bl	8011970 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119d6:	f7fe ff49 	bl	801086c <vTaskSwitchContext>
	prvTaskExitError();
 80119da:	f7ff ffa7 	bl	801192c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	0018      	movs	r0, r3
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	46c0      	nop			; (mov r8, r8)
 80119e8:	e000ed20 	.word	0xe000ed20
 80119ec:	20000028 	.word	0x20000028

080119f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80119f4:	4b05      	ldr	r3, [pc, #20]	; (8011a0c <vPortYield+0x1c>)
 80119f6:	2280      	movs	r2, #128	; 0x80
 80119f8:	0552      	lsls	r2, r2, #21
 80119fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80119fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011a00:	f3bf 8f6f 	isb	sy
}
 8011a04:	46c0      	nop			; (mov r8, r8)
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	46c0      	nop			; (mov r8, r8)
 8011a0c:	e000ed04 	.word	0xe000ed04

08011a10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8011a14:	b672      	cpsid	i
    uxCriticalNesting++;
 8011a16:	4b06      	ldr	r3, [pc, #24]	; (8011a30 <vPortEnterCritical+0x20>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	4b04      	ldr	r3, [pc, #16]	; (8011a30 <vPortEnterCritical+0x20>)
 8011a1e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8011a20:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011a24:	f3bf 8f6f 	isb	sy
}
 8011a28:	46c0      	nop			; (mov r8, r8)
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	46c0      	nop			; (mov r8, r8)
 8011a30:	20000028 	.word	0x20000028

08011a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a38:	4b09      	ldr	r3, [pc, #36]	; (8011a60 <vPortExitCritical+0x2c>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d101      	bne.n	8011a44 <vPortExitCritical+0x10>
 8011a40:	b672      	cpsid	i
 8011a42:	e7fe      	b.n	8011a42 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8011a44:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <vPortExitCritical+0x2c>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	1e5a      	subs	r2, r3, #1
 8011a4a:	4b05      	ldr	r3, [pc, #20]	; (8011a60 <vPortExitCritical+0x2c>)
 8011a4c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8011a4e:	4b04      	ldr	r3, [pc, #16]	; (8011a60 <vPortExitCritical+0x2c>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d100      	bne.n	8011a58 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8011a56:	b662      	cpsie	i
    }
}
 8011a58:	46c0      	nop			; (mov r8, r8)
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	46c0      	nop			; (mov r8, r8)
 8011a60:	20000028 	.word	0x20000028

08011a64 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8011a64:	f3ef 8010 	mrs	r0, PRIMASK
 8011a68:	b672      	cpsid	i
 8011a6a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8011a6c:	46c0      	nop			; (mov r8, r8)
 8011a6e:	0018      	movs	r0, r3

08011a70 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8011a70:	f380 8810 	msr	PRIMASK, r0
 8011a74:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8011a76:	46c0      	nop			; (mov r8, r8)
	...

08011a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011a80:	f3ef 8009 	mrs	r0, PSP
 8011a84:	4b0e      	ldr	r3, [pc, #56]	; (8011ac0 <pxCurrentTCBConst>)
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	3820      	subs	r0, #32
 8011a8a:	6010      	str	r0, [r2, #0]
 8011a8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011a8e:	4644      	mov	r4, r8
 8011a90:	464d      	mov	r5, r9
 8011a92:	4656      	mov	r6, sl
 8011a94:	465f      	mov	r7, fp
 8011a96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8011a98:	b508      	push	{r3, lr}
 8011a9a:	b672      	cpsid	i
 8011a9c:	f7fe fee6 	bl	801086c <vTaskSwitchContext>
 8011aa0:	b662      	cpsie	i
 8011aa2:	bc0c      	pop	{r2, r3}
 8011aa4:	6811      	ldr	r1, [r2, #0]
 8011aa6:	6808      	ldr	r0, [r1, #0]
 8011aa8:	3010      	adds	r0, #16
 8011aaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011aac:	46a0      	mov	r8, r4
 8011aae:	46a9      	mov	r9, r5
 8011ab0:	46b2      	mov	sl, r6
 8011ab2:	46bb      	mov	fp, r7
 8011ab4:	f380 8809 	msr	PSP, r0
 8011ab8:	3820      	subs	r0, #32
 8011aba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8011abc:	4718      	bx	r3
 8011abe:	46c0      	nop			; (mov r8, r8)

08011ac0 <pxCurrentTCBConst>:
 8011ac0:	20001b74 	.word	0x20001b74
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8011ac4:	46c0      	nop			; (mov r8, r8)
 8011ac6:	46c0      	nop			; (mov r8, r8)

08011ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ace:	f7ff ffc9 	bl	8011a64 <ulSetInterruptMaskFromISR>
 8011ad2:	0003      	movs	r3, r0
 8011ad4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011ad6:	f7fe fe15 	bl	8010704 <xTaskIncrementTick>
 8011ada:	1e03      	subs	r3, r0, #0
 8011adc:	d003      	beq.n	8011ae6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8011ade:	4b06      	ldr	r3, [pc, #24]	; (8011af8 <SysTick_Handler+0x30>)
 8011ae0:	2280      	movs	r2, #128	; 0x80
 8011ae2:	0552      	lsls	r2, r2, #21
 8011ae4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	0018      	movs	r0, r3
 8011aea:	f7ff ffc1 	bl	8011a70 <vClearInterruptMaskFromISR>
}
 8011aee:	46c0      	nop			; (mov r8, r8)
 8011af0:	46bd      	mov	sp, r7
 8011af2:	b002      	add	sp, #8
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	46c0      	nop			; (mov r8, r8)
 8011af8:	e000ed04 	.word	0xe000ed04

08011afc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8011b00:	4b0b      	ldr	r3, [pc, #44]	; (8011b30 <prvSetupTimerInterrupt+0x34>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8011b06:	4b0b      	ldr	r3, [pc, #44]	; (8011b34 <prvSetupTimerInterrupt+0x38>)
 8011b08:	2200      	movs	r2, #0
 8011b0a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b0c:	4b0a      	ldr	r3, [pc, #40]	; (8011b38 <prvSetupTimerInterrupt+0x3c>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	22fa      	movs	r2, #250	; 0xfa
 8011b12:	0091      	lsls	r1, r2, #2
 8011b14:	0018      	movs	r0, r3
 8011b16:	f7ee fb01 	bl	800011c <__udivsi3>
 8011b1a:	0003      	movs	r3, r0
 8011b1c:	001a      	movs	r2, r3
 8011b1e:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <prvSetupTimerInterrupt+0x40>)
 8011b20:	3a01      	subs	r2, #1
 8011b22:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8011b24:	4b02      	ldr	r3, [pc, #8]	; (8011b30 <prvSetupTimerInterrupt+0x34>)
 8011b26:	2207      	movs	r2, #7
 8011b28:	601a      	str	r2, [r3, #0]
}
 8011b2a:	46c0      	nop			; (mov r8, r8)
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	e000e010 	.word	0xe000e010
 8011b34:	e000e018 	.word	0xe000e018
 8011b38:	20000000 	.word	0x20000000
 8011b3c:	e000e014 	.word	0xe000e014

08011b40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b086      	sub	sp, #24
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8011b4c:	f7fe fd24 	bl	8010598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011b50:	4b49      	ldr	r3, [pc, #292]	; (8011c78 <pvPortMalloc+0x138>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d101      	bne.n	8011b5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011b58:	f000 f8e0 	bl	8011d1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b5c:	4b47      	ldr	r3, [pc, #284]	; (8011c7c <pvPortMalloc+0x13c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	4013      	ands	r3, r2
 8011b64:	d000      	beq.n	8011b68 <pvPortMalloc+0x28>
 8011b66:	e079      	b.n	8011c5c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d012      	beq.n	8011b94 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8011b6e:	2208      	movs	r2, #8
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	189b      	adds	r3, r3, r2
 8011b74:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2207      	movs	r2, #7
 8011b7a:	4013      	ands	r3, r2
 8011b7c:	d00a      	beq.n	8011b94 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2207      	movs	r2, #7
 8011b82:	4393      	bics	r3, r2
 8011b84:	3308      	adds	r3, #8
 8011b86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2207      	movs	r2, #7
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	d001      	beq.n	8011b94 <pvPortMalloc+0x54>
 8011b90:	b672      	cpsid	i
 8011b92:	e7fe      	b.n	8011b92 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d060      	beq.n	8011c5c <pvPortMalloc+0x11c>
 8011b9a:	4b39      	ldr	r3, [pc, #228]	; (8011c80 <pvPortMalloc+0x140>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d85b      	bhi.n	8011c5c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ba4:	4b37      	ldr	r3, [pc, #220]	; (8011c84 <pvPortMalloc+0x144>)
 8011ba6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8011ba8:	4b36      	ldr	r3, [pc, #216]	; (8011c84 <pvPortMalloc+0x144>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bae:	e004      	b.n	8011bba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d903      	bls.n	8011bcc <pvPortMalloc+0x8c>
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1f1      	bne.n	8011bb0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011bcc:	4b2a      	ldr	r3, [pc, #168]	; (8011c78 <pvPortMalloc+0x138>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	697a      	ldr	r2, [r7, #20]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d042      	beq.n	8011c5c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2208      	movs	r2, #8
 8011bdc:	189b      	adds	r3, r3, r2
 8011bde:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	685a      	ldr	r2, [r3, #4]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	1ad2      	subs	r2, r2, r3
 8011bf0:	2308      	movs	r3, #8
 8011bf2:	005b      	lsls	r3, r3, #1
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d916      	bls.n	8011c26 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011bf8:	697a      	ldr	r2, [r7, #20]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	18d3      	adds	r3, r2, r3
 8011bfe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	2207      	movs	r2, #7
 8011c04:	4013      	ands	r3, r2
 8011c06:	d001      	beq.n	8011c0c <pvPortMalloc+0xcc>
 8011c08:	b672      	cpsid	i
 8011c0a:	e7fe      	b.n	8011c0a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	685a      	ldr	r2, [r3, #4]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	1ad2      	subs	r2, r2, r3
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	0018      	movs	r0, r3
 8011c22:	f000 f8db 	bl	8011ddc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011c26:	4b16      	ldr	r3, [pc, #88]	; (8011c80 <pvPortMalloc+0x140>)
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	1ad2      	subs	r2, r2, r3
 8011c30:	4b13      	ldr	r3, [pc, #76]	; (8011c80 <pvPortMalloc+0x140>)
 8011c32:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011c34:	4b12      	ldr	r3, [pc, #72]	; (8011c80 <pvPortMalloc+0x140>)
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	4b13      	ldr	r3, [pc, #76]	; (8011c88 <pvPortMalloc+0x148>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d203      	bcs.n	8011c48 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011c40:	4b0f      	ldr	r3, [pc, #60]	; (8011c80 <pvPortMalloc+0x140>)
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	4b10      	ldr	r3, [pc, #64]	; (8011c88 <pvPortMalloc+0x148>)
 8011c46:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	685a      	ldr	r2, [r3, #4]
 8011c4c:	4b0b      	ldr	r3, [pc, #44]	; (8011c7c <pvPortMalloc+0x13c>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	431a      	orrs	r2, r3
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011c5c:	f7fe fca8 	bl	80105b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2207      	movs	r2, #7
 8011c64:	4013      	ands	r3, r2
 8011c66:	d001      	beq.n	8011c6c <pvPortMalloc+0x12c>
 8011c68:	b672      	cpsid	i
 8011c6a:	e7fe      	b.n	8011c6a <pvPortMalloc+0x12a>
	return pvReturn;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
}
 8011c6e:	0018      	movs	r0, r3
 8011c70:	46bd      	mov	sp, r7
 8011c72:	b006      	add	sp, #24
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	46c0      	nop			; (mov r8, r8)
 8011c78:	20002da8 	.word	0x20002da8
 8011c7c:	20002db4 	.word	0x20002db4
 8011c80:	20002dac 	.word	0x20002dac
 8011c84:	20002da0 	.word	0x20002da0
 8011c88:	20002db0 	.word	0x20002db0

08011c8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d035      	beq.n	8011d0a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011c9e:	2308      	movs	r3, #8
 8011ca0:	425b      	negs	r3, r3
 8011ca2:	68fa      	ldr	r2, [r7, #12]
 8011ca4:	18d3      	adds	r3, r2, r3
 8011ca6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	685a      	ldr	r2, [r3, #4]
 8011cb0:	4b18      	ldr	r3, [pc, #96]	; (8011d14 <vPortFree+0x88>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4013      	ands	r3, r2
 8011cb6:	d101      	bne.n	8011cbc <vPortFree+0x30>
 8011cb8:	b672      	cpsid	i
 8011cba:	e7fe      	b.n	8011cba <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <vPortFree+0x3c>
 8011cc4:	b672      	cpsid	i
 8011cc6:	e7fe      	b.n	8011cc6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	685a      	ldr	r2, [r3, #4]
 8011ccc:	4b11      	ldr	r3, [pc, #68]	; (8011d14 <vPortFree+0x88>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	4013      	ands	r3, r2
 8011cd2:	d01a      	beq.n	8011d0a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d116      	bne.n	8011d0a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	685a      	ldr	r2, [r3, #4]
 8011ce0:	4b0c      	ldr	r3, [pc, #48]	; (8011d14 <vPortFree+0x88>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	43db      	mvns	r3, r3
 8011ce6:	401a      	ands	r2, r3
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011cec:	f7fe fc54 	bl	8010598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	4b08      	ldr	r3, [pc, #32]	; (8011d18 <vPortFree+0x8c>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	18d2      	adds	r2, r2, r3
 8011cfa:	4b07      	ldr	r3, [pc, #28]	; (8011d18 <vPortFree+0x8c>)
 8011cfc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	0018      	movs	r0, r3
 8011d02:	f000 f86b 	bl	8011ddc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011d06:	f7fe fc53 	bl	80105b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011d0a:	46c0      	nop			; (mov r8, r8)
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	b004      	add	sp, #16
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	46c0      	nop			; (mov r8, r8)
 8011d14:	20002db4 	.word	0x20002db4
 8011d18:	20002dac 	.word	0x20002dac

08011d1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011d22:	23c0      	movs	r3, #192	; 0xc0
 8011d24:	011b      	lsls	r3, r3, #4
 8011d26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011d28:	4b26      	ldr	r3, [pc, #152]	; (8011dc4 <prvHeapInit+0xa8>)
 8011d2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2207      	movs	r2, #7
 8011d30:	4013      	ands	r3, r2
 8011d32:	d00c      	beq.n	8011d4e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	3307      	adds	r3, #7
 8011d38:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2207      	movs	r2, #7
 8011d3e:	4393      	bics	r3, r2
 8011d40:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011d42:	68ba      	ldr	r2, [r7, #8]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	1ad2      	subs	r2, r2, r3
 8011d48:	4b1e      	ldr	r3, [pc, #120]	; (8011dc4 <prvHeapInit+0xa8>)
 8011d4a:	18d3      	adds	r3, r2, r3
 8011d4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011d52:	4b1d      	ldr	r3, [pc, #116]	; (8011dc8 <prvHeapInit+0xac>)
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011d58:	4b1b      	ldr	r3, [pc, #108]	; (8011dc8 <prvHeapInit+0xac>)
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	68ba      	ldr	r2, [r7, #8]
 8011d62:	18d3      	adds	r3, r2, r3
 8011d64:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011d66:	2208      	movs	r2, #8
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	1a9b      	subs	r3, r3, r2
 8011d6c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2207      	movs	r2, #7
 8011d72:	4393      	bics	r3, r2
 8011d74:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011d76:	68fa      	ldr	r2, [r7, #12]
 8011d78:	4b14      	ldr	r3, [pc, #80]	; (8011dcc <prvHeapInit+0xb0>)
 8011d7a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8011d7c:	4b13      	ldr	r3, [pc, #76]	; (8011dcc <prvHeapInit+0xb0>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2200      	movs	r2, #0
 8011d82:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011d84:	4b11      	ldr	r3, [pc, #68]	; (8011dcc <prvHeapInit+0xb0>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	1ad2      	subs	r2, r2, r3
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d9a:	4b0c      	ldr	r3, [pc, #48]	; (8011dcc <prvHeapInit+0xb0>)
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	685a      	ldr	r2, [r3, #4]
 8011da6:	4b0a      	ldr	r3, [pc, #40]	; (8011dd0 <prvHeapInit+0xb4>)
 8011da8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	685a      	ldr	r2, [r3, #4]
 8011dae:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <prvHeapInit+0xb8>)
 8011db0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011db2:	4b09      	ldr	r3, [pc, #36]	; (8011dd8 <prvHeapInit+0xbc>)
 8011db4:	2280      	movs	r2, #128	; 0x80
 8011db6:	0612      	lsls	r2, r2, #24
 8011db8:	601a      	str	r2, [r3, #0]
}
 8011dba:	46c0      	nop			; (mov r8, r8)
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	b004      	add	sp, #16
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	46c0      	nop			; (mov r8, r8)
 8011dc4:	200021a0 	.word	0x200021a0
 8011dc8:	20002da0 	.word	0x20002da0
 8011dcc:	20002da8 	.word	0x20002da8
 8011dd0:	20002db0 	.word	0x20002db0
 8011dd4:	20002dac 	.word	0x20002dac
 8011dd8:	20002db4 	.word	0x20002db4

08011ddc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011de4:	4b27      	ldr	r3, [pc, #156]	; (8011e84 <prvInsertBlockIntoFreeList+0xa8>)
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e002      	b.n	8011df0 <prvInsertBlockIntoFreeList+0x14>
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	60fb      	str	r3, [r7, #12]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d8f7      	bhi.n	8011dea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	18d3      	adds	r3, r2, r3
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d108      	bne.n	8011e1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	685a      	ldr	r2, [r3, #4]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	18d2      	adds	r2, r2, r3
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	68ba      	ldr	r2, [r7, #8]
 8011e28:	18d2      	adds	r2, r2, r3
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d118      	bne.n	8011e64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	4b14      	ldr	r3, [pc, #80]	; (8011e88 <prvInsertBlockIntoFreeList+0xac>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d00d      	beq.n	8011e5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	685a      	ldr	r2, [r3, #4]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	18d2      	adds	r2, r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	601a      	str	r2, [r3, #0]
 8011e58:	e008      	b.n	8011e6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011e5a:	4b0b      	ldr	r3, [pc, #44]	; (8011e88 <prvInsertBlockIntoFreeList+0xac>)
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	601a      	str	r2, [r3, #0]
 8011e62:	e003      	b.n	8011e6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d002      	beq.n	8011e7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	687a      	ldr	r2, [r7, #4]
 8011e78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e7a:	46c0      	nop			; (mov r8, r8)
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	b004      	add	sp, #16
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	46c0      	nop			; (mov r8, r8)
 8011e84:	20002da0 	.word	0x20002da0
 8011e88:	20002da8 	.word	0x20002da8

08011e8c <_ZdlPvj>:
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	f000 f819 	bl	8011ec4 <_ZdlPv>
 8011e92:	bd10      	pop	{r4, pc}

08011e94 <_Znwj>:
 8011e94:	b510      	push	{r4, lr}
 8011e96:	1e04      	subs	r4, r0, #0
 8011e98:	d100      	bne.n	8011e9c <_Znwj+0x8>
 8011e9a:	3401      	adds	r4, #1
 8011e9c:	0020      	movs	r0, r4
 8011e9e:	f000 f9ed 	bl	801227c <malloc>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	d107      	bne.n	8011eb6 <_Znwj+0x22>
 8011ea6:	f000 f81d 	bl	8011ee4 <_ZSt15get_new_handlerv>
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	d101      	bne.n	8011eb2 <_Znwj+0x1e>
 8011eae:	f000 f87f 	bl	8011fb0 <abort>
 8011eb2:	4780      	blx	r0
 8011eb4:	e7f2      	b.n	8011e9c <_Znwj+0x8>
 8011eb6:	bd10      	pop	{r4, pc}

08011eb8 <__cxa_pure_virtual>:
 8011eb8:	b510      	push	{r4, lr}
 8011eba:	f000 f80b 	bl	8011ed4 <_ZSt9terminatev>

08011ebe <_ZSt25__throw_bad_function_callv>:
 8011ebe:	b510      	push	{r4, lr}
 8011ec0:	f000 f876 	bl	8011fb0 <abort>

08011ec4 <_ZdlPv>:
 8011ec4:	b510      	push	{r4, lr}
 8011ec6:	f000 f9e3 	bl	8012290 <free>
 8011eca:	bd10      	pop	{r4, pc}

08011ecc <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011ecc:	b510      	push	{r4, lr}
 8011ece:	4780      	blx	r0
 8011ed0:	f000 f86e 	bl	8011fb0 <abort>

08011ed4 <_ZSt9terminatev>:
 8011ed4:	4b02      	ldr	r3, [pc, #8]	; (8011ee0 <_ZSt9terminatev+0xc>)
 8011ed6:	b510      	push	{r4, lr}
 8011ed8:	6818      	ldr	r0, [r3, #0]
 8011eda:	f7ff fff7 	bl	8011ecc <_ZN10__cxxabiv111__terminateEPFvvE>
 8011ede:	46c0      	nop			; (mov r8, r8)
 8011ee0:	2000002c 	.word	0x2000002c

08011ee4 <_ZSt15get_new_handlerv>:
 8011ee4:	4b01      	ldr	r3, [pc, #4]	; (8011eec <_ZSt15get_new_handlerv+0x8>)
 8011ee6:	6818      	ldr	r0, [r3, #0]
 8011ee8:	4770      	bx	lr
 8011eea:	46c0      	nop			; (mov r8, r8)
 8011eec:	20002db8 	.word	0x20002db8

08011ef0 <floorf>:
 8011ef0:	b570      	push	{r4, r5, r6, lr}
 8011ef2:	0045      	lsls	r5, r0, #1
 8011ef4:	086e      	lsrs	r6, r5, #1
 8011ef6:	0e2d      	lsrs	r5, r5, #24
 8011ef8:	3d7f      	subs	r5, #127	; 0x7f
 8011efa:	0004      	movs	r4, r0
 8011efc:	2d16      	cmp	r5, #22
 8011efe:	dc24      	bgt.n	8011f4a <floorf+0x5a>
 8011f00:	2d00      	cmp	r5, #0
 8011f02:	da0e      	bge.n	8011f22 <floorf+0x32>
 8011f04:	4916      	ldr	r1, [pc, #88]	; (8011f60 <floorf+0x70>)
 8011f06:	f7ee faff 	bl	8000508 <__aeabi_fadd>
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	f7ee f9b8 	bl	8000280 <__aeabi_fcmpgt>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d004      	beq.n	8011f1e <floorf+0x2e>
 8011f14:	2c00      	cmp	r4, #0
 8011f16:	da20      	bge.n	8011f5a <floorf+0x6a>
 8011f18:	2e00      	cmp	r6, #0
 8011f1a:	d000      	beq.n	8011f1e <floorf+0x2e>
 8011f1c:	4c11      	ldr	r4, [pc, #68]	; (8011f64 <floorf+0x74>)
 8011f1e:	1c20      	adds	r0, r4, #0
 8011f20:	e01a      	b.n	8011f58 <floorf+0x68>
 8011f22:	4e11      	ldr	r6, [pc, #68]	; (8011f68 <floorf+0x78>)
 8011f24:	412e      	asrs	r6, r5
 8011f26:	4206      	tst	r6, r0
 8011f28:	d016      	beq.n	8011f58 <floorf+0x68>
 8011f2a:	490d      	ldr	r1, [pc, #52]	; (8011f60 <floorf+0x70>)
 8011f2c:	f7ee faec 	bl	8000508 <__aeabi_fadd>
 8011f30:	2100      	movs	r1, #0
 8011f32:	f7ee f9a5 	bl	8000280 <__aeabi_fcmpgt>
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d0f1      	beq.n	8011f1e <floorf+0x2e>
 8011f3a:	2c00      	cmp	r4, #0
 8011f3c:	da03      	bge.n	8011f46 <floorf+0x56>
 8011f3e:	2380      	movs	r3, #128	; 0x80
 8011f40:	041b      	lsls	r3, r3, #16
 8011f42:	412b      	asrs	r3, r5
 8011f44:	18e4      	adds	r4, r4, r3
 8011f46:	43b4      	bics	r4, r6
 8011f48:	e7e9      	b.n	8011f1e <floorf+0x2e>
 8011f4a:	23ff      	movs	r3, #255	; 0xff
 8011f4c:	05db      	lsls	r3, r3, #23
 8011f4e:	429e      	cmp	r6, r3
 8011f50:	d302      	bcc.n	8011f58 <floorf+0x68>
 8011f52:	1c01      	adds	r1, r0, #0
 8011f54:	f7ee fad8 	bl	8000508 <__aeabi_fadd>
 8011f58:	bd70      	pop	{r4, r5, r6, pc}
 8011f5a:	2400      	movs	r4, #0
 8011f5c:	e7df      	b.n	8011f1e <floorf+0x2e>
 8011f5e:	46c0      	nop			; (mov r8, r8)
 8011f60:	7149f2ca 	.word	0x7149f2ca
 8011f64:	bf800000 	.word	0xbf800000
 8011f68:	007fffff 	.word	0x007fffff

08011f6c <roundf>:
 8011f6c:	0dc3      	lsrs	r3, r0, #23
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	3b7f      	subs	r3, #127	; 0x7f
 8011f72:	0001      	movs	r1, r0
 8011f74:	b510      	push	{r4, lr}
 8011f76:	2b16      	cmp	r3, #22
 8011f78:	dc13      	bgt.n	8011fa2 <roundf+0x36>
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	da07      	bge.n	8011f8e <roundf+0x22>
 8011f7e:	0fc0      	lsrs	r0, r0, #31
 8011f80:	07c0      	lsls	r0, r0, #31
 8011f82:	3301      	adds	r3, #1
 8011f84:	d102      	bne.n	8011f8c <roundf+0x20>
 8011f86:	23fe      	movs	r3, #254	; 0xfe
 8011f88:	059b      	lsls	r3, r3, #22
 8011f8a:	4318      	orrs	r0, r3
 8011f8c:	bd10      	pop	{r4, pc}
 8011f8e:	4a07      	ldr	r2, [pc, #28]	; (8011fac <roundf+0x40>)
 8011f90:	411a      	asrs	r2, r3
 8011f92:	4202      	tst	r2, r0
 8011f94:	d0fa      	beq.n	8011f8c <roundf+0x20>
 8011f96:	2080      	movs	r0, #128	; 0x80
 8011f98:	03c0      	lsls	r0, r0, #15
 8011f9a:	4118      	asrs	r0, r3
 8011f9c:	1840      	adds	r0, r0, r1
 8011f9e:	4390      	bics	r0, r2
 8011fa0:	e7f4      	b.n	8011f8c <roundf+0x20>
 8011fa2:	2b80      	cmp	r3, #128	; 0x80
 8011fa4:	d1f2      	bne.n	8011f8c <roundf+0x20>
 8011fa6:	f7ee faaf 	bl	8000508 <__aeabi_fadd>
 8011faa:	e7ef      	b.n	8011f8c <roundf+0x20>
 8011fac:	007fffff 	.word	0x007fffff

08011fb0 <abort>:
 8011fb0:	2006      	movs	r0, #6
 8011fb2:	b510      	push	{r4, lr}
 8011fb4:	f000 fdd6 	bl	8012b64 <raise>
 8011fb8:	2001      	movs	r0, #1
 8011fba:	f7f1 f9b9 	bl	8003330 <_exit>
	...

08011fc0 <__assert_func>:
 8011fc0:	b530      	push	{r4, r5, lr}
 8011fc2:	0014      	movs	r4, r2
 8011fc4:	001a      	movs	r2, r3
 8011fc6:	4b09      	ldr	r3, [pc, #36]	; (8011fec <__assert_func+0x2c>)
 8011fc8:	0005      	movs	r5, r0
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	b085      	sub	sp, #20
 8011fce:	68d8      	ldr	r0, [r3, #12]
 8011fd0:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <__assert_func+0x30>)
 8011fd2:	2c00      	cmp	r4, #0
 8011fd4:	d101      	bne.n	8011fda <__assert_func+0x1a>
 8011fd6:	4b07      	ldr	r3, [pc, #28]	; (8011ff4 <__assert_func+0x34>)
 8011fd8:	001c      	movs	r4, r3
 8011fda:	9301      	str	r3, [sp, #4]
 8011fdc:	9100      	str	r1, [sp, #0]
 8011fde:	002b      	movs	r3, r5
 8011fe0:	4905      	ldr	r1, [pc, #20]	; (8011ff8 <__assert_func+0x38>)
 8011fe2:	9402      	str	r4, [sp, #8]
 8011fe4:	f000 f8f2 	bl	80121cc <fiprintf>
 8011fe8:	f7ff ffe2 	bl	8011fb0 <abort>
 8011fec:	20000030 	.word	0x20000030
 8011ff0:	0801473c 	.word	0x0801473c
 8011ff4:	08014777 	.word	0x08014777
 8011ff8:	08014749 	.word	0x08014749

08011ffc <__errno>:
 8011ffc:	4b01      	ldr	r3, [pc, #4]	; (8012004 <__errno+0x8>)
 8011ffe:	6818      	ldr	r0, [r3, #0]
 8012000:	4770      	bx	lr
 8012002:	46c0      	nop			; (mov r8, r8)
 8012004:	20000030 	.word	0x20000030

08012008 <std>:
 8012008:	2300      	movs	r3, #0
 801200a:	b510      	push	{r4, lr}
 801200c:	0004      	movs	r4, r0
 801200e:	6003      	str	r3, [r0, #0]
 8012010:	6043      	str	r3, [r0, #4]
 8012012:	6083      	str	r3, [r0, #8]
 8012014:	8181      	strh	r1, [r0, #12]
 8012016:	6643      	str	r3, [r0, #100]	; 0x64
 8012018:	0019      	movs	r1, r3
 801201a:	81c2      	strh	r2, [r0, #14]
 801201c:	6103      	str	r3, [r0, #16]
 801201e:	6143      	str	r3, [r0, #20]
 8012020:	6183      	str	r3, [r0, #24]
 8012022:	2208      	movs	r2, #8
 8012024:	305c      	adds	r0, #92	; 0x5c
 8012026:	f000 f959 	bl	80122dc <memset>
 801202a:	4b05      	ldr	r3, [pc, #20]	; (8012040 <std+0x38>)
 801202c:	6263      	str	r3, [r4, #36]	; 0x24
 801202e:	4b05      	ldr	r3, [pc, #20]	; (8012044 <std+0x3c>)
 8012030:	6224      	str	r4, [r4, #32]
 8012032:	62a3      	str	r3, [r4, #40]	; 0x28
 8012034:	4b04      	ldr	r3, [pc, #16]	; (8012048 <std+0x40>)
 8012036:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012038:	4b04      	ldr	r3, [pc, #16]	; (801204c <std+0x44>)
 801203a:	6323      	str	r3, [r4, #48]	; 0x30
 801203c:	bd10      	pop	{r4, pc}
 801203e:	46c0      	nop			; (mov r8, r8)
 8012040:	08012ba5 	.word	0x08012ba5
 8012044:	08012bcd 	.word	0x08012bcd
 8012048:	08012c05 	.word	0x08012c05
 801204c:	08012c31 	.word	0x08012c31

08012050 <_cleanup_r>:
 8012050:	b510      	push	{r4, lr}
 8012052:	4902      	ldr	r1, [pc, #8]	; (801205c <_cleanup_r+0xc>)
 8012054:	f000 f8ca 	bl	80121ec <_fwalk_reent>
 8012058:	bd10      	pop	{r4, pc}
 801205a:	46c0      	nop			; (mov r8, r8)
 801205c:	08012f3d 	.word	0x08012f3d

08012060 <__sfmoreglue>:
 8012060:	b570      	push	{r4, r5, r6, lr}
 8012062:	2568      	movs	r5, #104	; 0x68
 8012064:	1e4a      	subs	r2, r1, #1
 8012066:	4355      	muls	r5, r2
 8012068:	000e      	movs	r6, r1
 801206a:	0029      	movs	r1, r5
 801206c:	3174      	adds	r1, #116	; 0x74
 801206e:	f000 f987 	bl	8012380 <_malloc_r>
 8012072:	1e04      	subs	r4, r0, #0
 8012074:	d008      	beq.n	8012088 <__sfmoreglue+0x28>
 8012076:	2100      	movs	r1, #0
 8012078:	002a      	movs	r2, r5
 801207a:	6001      	str	r1, [r0, #0]
 801207c:	6046      	str	r6, [r0, #4]
 801207e:	300c      	adds	r0, #12
 8012080:	60a0      	str	r0, [r4, #8]
 8012082:	3268      	adds	r2, #104	; 0x68
 8012084:	f000 f92a 	bl	80122dc <memset>
 8012088:	0020      	movs	r0, r4
 801208a:	bd70      	pop	{r4, r5, r6, pc}

0801208c <__sfp_lock_acquire>:
 801208c:	b510      	push	{r4, lr}
 801208e:	4802      	ldr	r0, [pc, #8]	; (8012098 <__sfp_lock_acquire+0xc>)
 8012090:	f000 f8f1 	bl	8012276 <__retarget_lock_acquire_recursive>
 8012094:	bd10      	pop	{r4, pc}
 8012096:	46c0      	nop			; (mov r8, r8)
 8012098:	200034c4 	.word	0x200034c4

0801209c <__sfp_lock_release>:
 801209c:	b510      	push	{r4, lr}
 801209e:	4802      	ldr	r0, [pc, #8]	; (80120a8 <__sfp_lock_release+0xc>)
 80120a0:	f000 f8ea 	bl	8012278 <__retarget_lock_release_recursive>
 80120a4:	bd10      	pop	{r4, pc}
 80120a6:	46c0      	nop			; (mov r8, r8)
 80120a8:	200034c4 	.word	0x200034c4

080120ac <__sinit_lock_acquire>:
 80120ac:	b510      	push	{r4, lr}
 80120ae:	4802      	ldr	r0, [pc, #8]	; (80120b8 <__sinit_lock_acquire+0xc>)
 80120b0:	f000 f8e1 	bl	8012276 <__retarget_lock_acquire_recursive>
 80120b4:	bd10      	pop	{r4, pc}
 80120b6:	46c0      	nop			; (mov r8, r8)
 80120b8:	200034bf 	.word	0x200034bf

080120bc <__sinit_lock_release>:
 80120bc:	b510      	push	{r4, lr}
 80120be:	4802      	ldr	r0, [pc, #8]	; (80120c8 <__sinit_lock_release+0xc>)
 80120c0:	f000 f8da 	bl	8012278 <__retarget_lock_release_recursive>
 80120c4:	bd10      	pop	{r4, pc}
 80120c6:	46c0      	nop			; (mov r8, r8)
 80120c8:	200034bf 	.word	0x200034bf

080120cc <__sinit>:
 80120cc:	b513      	push	{r0, r1, r4, lr}
 80120ce:	0004      	movs	r4, r0
 80120d0:	f7ff ffec 	bl	80120ac <__sinit_lock_acquire>
 80120d4:	69a3      	ldr	r3, [r4, #24]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d002      	beq.n	80120e0 <__sinit+0x14>
 80120da:	f7ff ffef 	bl	80120bc <__sinit_lock_release>
 80120de:	bd13      	pop	{r0, r1, r4, pc}
 80120e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80120e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80120e4:	6523      	str	r3, [r4, #80]	; 0x50
 80120e6:	4b13      	ldr	r3, [pc, #76]	; (8012134 <__sinit+0x68>)
 80120e8:	4a13      	ldr	r2, [pc, #76]	; (8012138 <__sinit+0x6c>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80120ee:	9301      	str	r3, [sp, #4]
 80120f0:	42a3      	cmp	r3, r4
 80120f2:	d101      	bne.n	80120f8 <__sinit+0x2c>
 80120f4:	2301      	movs	r3, #1
 80120f6:	61a3      	str	r3, [r4, #24]
 80120f8:	0020      	movs	r0, r4
 80120fa:	f000 f81f 	bl	801213c <__sfp>
 80120fe:	6060      	str	r0, [r4, #4]
 8012100:	0020      	movs	r0, r4
 8012102:	f000 f81b 	bl	801213c <__sfp>
 8012106:	60a0      	str	r0, [r4, #8]
 8012108:	0020      	movs	r0, r4
 801210a:	f000 f817 	bl	801213c <__sfp>
 801210e:	2200      	movs	r2, #0
 8012110:	2104      	movs	r1, #4
 8012112:	60e0      	str	r0, [r4, #12]
 8012114:	6860      	ldr	r0, [r4, #4]
 8012116:	f7ff ff77 	bl	8012008 <std>
 801211a:	2201      	movs	r2, #1
 801211c:	2109      	movs	r1, #9
 801211e:	68a0      	ldr	r0, [r4, #8]
 8012120:	f7ff ff72 	bl	8012008 <std>
 8012124:	2202      	movs	r2, #2
 8012126:	2112      	movs	r1, #18
 8012128:	68e0      	ldr	r0, [r4, #12]
 801212a:	f7ff ff6d 	bl	8012008 <std>
 801212e:	2301      	movs	r3, #1
 8012130:	61a3      	str	r3, [r4, #24]
 8012132:	e7d2      	b.n	80120da <__sinit+0xe>
 8012134:	080147d8 	.word	0x080147d8
 8012138:	08012051 	.word	0x08012051

0801213c <__sfp>:
 801213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801213e:	0007      	movs	r7, r0
 8012140:	f7ff ffa4 	bl	801208c <__sfp_lock_acquire>
 8012144:	4b1f      	ldr	r3, [pc, #124]	; (80121c4 <__sfp+0x88>)
 8012146:	681e      	ldr	r6, [r3, #0]
 8012148:	69b3      	ldr	r3, [r6, #24]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d102      	bne.n	8012154 <__sfp+0x18>
 801214e:	0030      	movs	r0, r6
 8012150:	f7ff ffbc 	bl	80120cc <__sinit>
 8012154:	3648      	adds	r6, #72	; 0x48
 8012156:	68b4      	ldr	r4, [r6, #8]
 8012158:	6873      	ldr	r3, [r6, #4]
 801215a:	3b01      	subs	r3, #1
 801215c:	d504      	bpl.n	8012168 <__sfp+0x2c>
 801215e:	6833      	ldr	r3, [r6, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d022      	beq.n	80121aa <__sfp+0x6e>
 8012164:	6836      	ldr	r6, [r6, #0]
 8012166:	e7f6      	b.n	8012156 <__sfp+0x1a>
 8012168:	220c      	movs	r2, #12
 801216a:	5ea5      	ldrsh	r5, [r4, r2]
 801216c:	2d00      	cmp	r5, #0
 801216e:	d11a      	bne.n	80121a6 <__sfp+0x6a>
 8012170:	0020      	movs	r0, r4
 8012172:	4b15      	ldr	r3, [pc, #84]	; (80121c8 <__sfp+0x8c>)
 8012174:	3058      	adds	r0, #88	; 0x58
 8012176:	60e3      	str	r3, [r4, #12]
 8012178:	6665      	str	r5, [r4, #100]	; 0x64
 801217a:	f000 f87b 	bl	8012274 <__retarget_lock_init_recursive>
 801217e:	f7ff ff8d 	bl	801209c <__sfp_lock_release>
 8012182:	0020      	movs	r0, r4
 8012184:	2208      	movs	r2, #8
 8012186:	0029      	movs	r1, r5
 8012188:	6025      	str	r5, [r4, #0]
 801218a:	60a5      	str	r5, [r4, #8]
 801218c:	6065      	str	r5, [r4, #4]
 801218e:	6125      	str	r5, [r4, #16]
 8012190:	6165      	str	r5, [r4, #20]
 8012192:	61a5      	str	r5, [r4, #24]
 8012194:	305c      	adds	r0, #92	; 0x5c
 8012196:	f000 f8a1 	bl	80122dc <memset>
 801219a:	6365      	str	r5, [r4, #52]	; 0x34
 801219c:	63a5      	str	r5, [r4, #56]	; 0x38
 801219e:	64a5      	str	r5, [r4, #72]	; 0x48
 80121a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80121a2:	0020      	movs	r0, r4
 80121a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121a6:	3468      	adds	r4, #104	; 0x68
 80121a8:	e7d7      	b.n	801215a <__sfp+0x1e>
 80121aa:	2104      	movs	r1, #4
 80121ac:	0038      	movs	r0, r7
 80121ae:	f7ff ff57 	bl	8012060 <__sfmoreglue>
 80121b2:	1e04      	subs	r4, r0, #0
 80121b4:	6030      	str	r0, [r6, #0]
 80121b6:	d1d5      	bne.n	8012164 <__sfp+0x28>
 80121b8:	f7ff ff70 	bl	801209c <__sfp_lock_release>
 80121bc:	230c      	movs	r3, #12
 80121be:	603b      	str	r3, [r7, #0]
 80121c0:	e7ef      	b.n	80121a2 <__sfp+0x66>
 80121c2:	46c0      	nop			; (mov r8, r8)
 80121c4:	080147d8 	.word	0x080147d8
 80121c8:	ffff0001 	.word	0xffff0001

080121cc <fiprintf>:
 80121cc:	b40e      	push	{r1, r2, r3}
 80121ce:	b503      	push	{r0, r1, lr}
 80121d0:	0001      	movs	r1, r0
 80121d2:	ab03      	add	r3, sp, #12
 80121d4:	4804      	ldr	r0, [pc, #16]	; (80121e8 <fiprintf+0x1c>)
 80121d6:	cb04      	ldmia	r3!, {r2}
 80121d8:	6800      	ldr	r0, [r0, #0]
 80121da:	9301      	str	r3, [sp, #4]
 80121dc:	f000 f956 	bl	801248c <_vfiprintf_r>
 80121e0:	b002      	add	sp, #8
 80121e2:	bc08      	pop	{r3}
 80121e4:	b003      	add	sp, #12
 80121e6:	4718      	bx	r3
 80121e8:	20000030 	.word	0x20000030

080121ec <_fwalk_reent>:
 80121ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121ee:	0004      	movs	r4, r0
 80121f0:	0006      	movs	r6, r0
 80121f2:	2700      	movs	r7, #0
 80121f4:	9101      	str	r1, [sp, #4]
 80121f6:	3448      	adds	r4, #72	; 0x48
 80121f8:	6863      	ldr	r3, [r4, #4]
 80121fa:	68a5      	ldr	r5, [r4, #8]
 80121fc:	9300      	str	r3, [sp, #0]
 80121fe:	9b00      	ldr	r3, [sp, #0]
 8012200:	3b01      	subs	r3, #1
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	d504      	bpl.n	8012210 <_fwalk_reent+0x24>
 8012206:	6824      	ldr	r4, [r4, #0]
 8012208:	2c00      	cmp	r4, #0
 801220a:	d1f5      	bne.n	80121f8 <_fwalk_reent+0xc>
 801220c:	0038      	movs	r0, r7
 801220e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012210:	89ab      	ldrh	r3, [r5, #12]
 8012212:	2b01      	cmp	r3, #1
 8012214:	d908      	bls.n	8012228 <_fwalk_reent+0x3c>
 8012216:	220e      	movs	r2, #14
 8012218:	5eab      	ldrsh	r3, [r5, r2]
 801221a:	3301      	adds	r3, #1
 801221c:	d004      	beq.n	8012228 <_fwalk_reent+0x3c>
 801221e:	0029      	movs	r1, r5
 8012220:	0030      	movs	r0, r6
 8012222:	9b01      	ldr	r3, [sp, #4]
 8012224:	4798      	blx	r3
 8012226:	4307      	orrs	r7, r0
 8012228:	3568      	adds	r5, #104	; 0x68
 801222a:	e7e8      	b.n	80121fe <_fwalk_reent+0x12>

0801222c <__libc_init_array>:
 801222c:	b570      	push	{r4, r5, r6, lr}
 801222e:	2600      	movs	r6, #0
 8012230:	4d0c      	ldr	r5, [pc, #48]	; (8012264 <__libc_init_array+0x38>)
 8012232:	4c0d      	ldr	r4, [pc, #52]	; (8012268 <__libc_init_array+0x3c>)
 8012234:	1b64      	subs	r4, r4, r5
 8012236:	10a4      	asrs	r4, r4, #2
 8012238:	42a6      	cmp	r6, r4
 801223a:	d109      	bne.n	8012250 <__libc_init_array+0x24>
 801223c:	2600      	movs	r6, #0
 801223e:	f000 ff91 	bl	8013164 <_init>
 8012242:	4d0a      	ldr	r5, [pc, #40]	; (801226c <__libc_init_array+0x40>)
 8012244:	4c0a      	ldr	r4, [pc, #40]	; (8012270 <__libc_init_array+0x44>)
 8012246:	1b64      	subs	r4, r4, r5
 8012248:	10a4      	asrs	r4, r4, #2
 801224a:	42a6      	cmp	r6, r4
 801224c:	d105      	bne.n	801225a <__libc_init_array+0x2e>
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	00b3      	lsls	r3, r6, #2
 8012252:	58eb      	ldr	r3, [r5, r3]
 8012254:	4798      	blx	r3
 8012256:	3601      	adds	r6, #1
 8012258:	e7ee      	b.n	8012238 <__libc_init_array+0xc>
 801225a:	00b3      	lsls	r3, r6, #2
 801225c:	58eb      	ldr	r3, [r5, r3]
 801225e:	4798      	blx	r3
 8012260:	3601      	adds	r6, #1
 8012262:	e7f2      	b.n	801224a <__libc_init_array+0x1e>
 8012264:	08014818 	.word	0x08014818
 8012268:	08014818 	.word	0x08014818
 801226c:	08014818 	.word	0x08014818
 8012270:	08014820 	.word	0x08014820

08012274 <__retarget_lock_init_recursive>:
 8012274:	4770      	bx	lr

08012276 <__retarget_lock_acquire_recursive>:
 8012276:	4770      	bx	lr

08012278 <__retarget_lock_release_recursive>:
 8012278:	4770      	bx	lr
	...

0801227c <malloc>:
 801227c:	b510      	push	{r4, lr}
 801227e:	4b03      	ldr	r3, [pc, #12]	; (801228c <malloc+0x10>)
 8012280:	0001      	movs	r1, r0
 8012282:	6818      	ldr	r0, [r3, #0]
 8012284:	f000 f87c 	bl	8012380 <_malloc_r>
 8012288:	bd10      	pop	{r4, pc}
 801228a:	46c0      	nop			; (mov r8, r8)
 801228c:	20000030 	.word	0x20000030

08012290 <free>:
 8012290:	b510      	push	{r4, lr}
 8012292:	4b03      	ldr	r3, [pc, #12]	; (80122a0 <free+0x10>)
 8012294:	0001      	movs	r1, r0
 8012296:	6818      	ldr	r0, [r3, #0]
 8012298:	f000 f828 	bl	80122ec <_free_r>
 801229c:	bd10      	pop	{r4, pc}
 801229e:	46c0      	nop			; (mov r8, r8)
 80122a0:	20000030 	.word	0x20000030

080122a4 <memcpy>:
 80122a4:	2300      	movs	r3, #0
 80122a6:	b510      	push	{r4, lr}
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d100      	bne.n	80122ae <memcpy+0xa>
 80122ac:	bd10      	pop	{r4, pc}
 80122ae:	5ccc      	ldrb	r4, [r1, r3]
 80122b0:	54c4      	strb	r4, [r0, r3]
 80122b2:	3301      	adds	r3, #1
 80122b4:	e7f8      	b.n	80122a8 <memcpy+0x4>

080122b6 <memmove>:
 80122b6:	b510      	push	{r4, lr}
 80122b8:	4288      	cmp	r0, r1
 80122ba:	d902      	bls.n	80122c2 <memmove+0xc>
 80122bc:	188b      	adds	r3, r1, r2
 80122be:	4298      	cmp	r0, r3
 80122c0:	d303      	bcc.n	80122ca <memmove+0x14>
 80122c2:	2300      	movs	r3, #0
 80122c4:	e007      	b.n	80122d6 <memmove+0x20>
 80122c6:	5c8b      	ldrb	r3, [r1, r2]
 80122c8:	5483      	strb	r3, [r0, r2]
 80122ca:	3a01      	subs	r2, #1
 80122cc:	d2fb      	bcs.n	80122c6 <memmove+0x10>
 80122ce:	bd10      	pop	{r4, pc}
 80122d0:	5ccc      	ldrb	r4, [r1, r3]
 80122d2:	54c4      	strb	r4, [r0, r3]
 80122d4:	3301      	adds	r3, #1
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d1fa      	bne.n	80122d0 <memmove+0x1a>
 80122da:	e7f8      	b.n	80122ce <memmove+0x18>

080122dc <memset>:
 80122dc:	0003      	movs	r3, r0
 80122de:	1882      	adds	r2, r0, r2
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d100      	bne.n	80122e6 <memset+0xa>
 80122e4:	4770      	bx	lr
 80122e6:	7019      	strb	r1, [r3, #0]
 80122e8:	3301      	adds	r3, #1
 80122ea:	e7f9      	b.n	80122e0 <memset+0x4>

080122ec <_free_r>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	0005      	movs	r5, r0
 80122f0:	2900      	cmp	r1, #0
 80122f2:	d010      	beq.n	8012316 <_free_r+0x2a>
 80122f4:	1f0c      	subs	r4, r1, #4
 80122f6:	6823      	ldr	r3, [r4, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	da00      	bge.n	80122fe <_free_r+0x12>
 80122fc:	18e4      	adds	r4, r4, r3
 80122fe:	0028      	movs	r0, r5
 8012300:	f000 fee8 	bl	80130d4 <__malloc_lock>
 8012304:	4a1d      	ldr	r2, [pc, #116]	; (801237c <_free_r+0x90>)
 8012306:	6813      	ldr	r3, [r2, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d105      	bne.n	8012318 <_free_r+0x2c>
 801230c:	6063      	str	r3, [r4, #4]
 801230e:	6014      	str	r4, [r2, #0]
 8012310:	0028      	movs	r0, r5
 8012312:	f000 fee7 	bl	80130e4 <__malloc_unlock>
 8012316:	bd70      	pop	{r4, r5, r6, pc}
 8012318:	42a3      	cmp	r3, r4
 801231a:	d908      	bls.n	801232e <_free_r+0x42>
 801231c:	6821      	ldr	r1, [r4, #0]
 801231e:	1860      	adds	r0, r4, r1
 8012320:	4283      	cmp	r3, r0
 8012322:	d1f3      	bne.n	801230c <_free_r+0x20>
 8012324:	6818      	ldr	r0, [r3, #0]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	1841      	adds	r1, r0, r1
 801232a:	6021      	str	r1, [r4, #0]
 801232c:	e7ee      	b.n	801230c <_free_r+0x20>
 801232e:	001a      	movs	r2, r3
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d001      	beq.n	801233a <_free_r+0x4e>
 8012336:	42a3      	cmp	r3, r4
 8012338:	d9f9      	bls.n	801232e <_free_r+0x42>
 801233a:	6811      	ldr	r1, [r2, #0]
 801233c:	1850      	adds	r0, r2, r1
 801233e:	42a0      	cmp	r0, r4
 8012340:	d10b      	bne.n	801235a <_free_r+0x6e>
 8012342:	6820      	ldr	r0, [r4, #0]
 8012344:	1809      	adds	r1, r1, r0
 8012346:	1850      	adds	r0, r2, r1
 8012348:	6011      	str	r1, [r2, #0]
 801234a:	4283      	cmp	r3, r0
 801234c:	d1e0      	bne.n	8012310 <_free_r+0x24>
 801234e:	6818      	ldr	r0, [r3, #0]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	1841      	adds	r1, r0, r1
 8012354:	6011      	str	r1, [r2, #0]
 8012356:	6053      	str	r3, [r2, #4]
 8012358:	e7da      	b.n	8012310 <_free_r+0x24>
 801235a:	42a0      	cmp	r0, r4
 801235c:	d902      	bls.n	8012364 <_free_r+0x78>
 801235e:	230c      	movs	r3, #12
 8012360:	602b      	str	r3, [r5, #0]
 8012362:	e7d5      	b.n	8012310 <_free_r+0x24>
 8012364:	6821      	ldr	r1, [r4, #0]
 8012366:	1860      	adds	r0, r4, r1
 8012368:	4283      	cmp	r3, r0
 801236a:	d103      	bne.n	8012374 <_free_r+0x88>
 801236c:	6818      	ldr	r0, [r3, #0]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	1841      	adds	r1, r0, r1
 8012372:	6021      	str	r1, [r4, #0]
 8012374:	6063      	str	r3, [r4, #4]
 8012376:	6054      	str	r4, [r2, #4]
 8012378:	e7ca      	b.n	8012310 <_free_r+0x24>
 801237a:	46c0      	nop			; (mov r8, r8)
 801237c:	20002dbc 	.word	0x20002dbc

08012380 <_malloc_r>:
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	2303      	movs	r3, #3
 8012384:	1ccd      	adds	r5, r1, #3
 8012386:	439d      	bics	r5, r3
 8012388:	3508      	adds	r5, #8
 801238a:	0006      	movs	r6, r0
 801238c:	2d0c      	cmp	r5, #12
 801238e:	d21f      	bcs.n	80123d0 <_malloc_r+0x50>
 8012390:	250c      	movs	r5, #12
 8012392:	42a9      	cmp	r1, r5
 8012394:	d81e      	bhi.n	80123d4 <_malloc_r+0x54>
 8012396:	0030      	movs	r0, r6
 8012398:	f000 fe9c 	bl	80130d4 <__malloc_lock>
 801239c:	4925      	ldr	r1, [pc, #148]	; (8012434 <_malloc_r+0xb4>)
 801239e:	680a      	ldr	r2, [r1, #0]
 80123a0:	0014      	movs	r4, r2
 80123a2:	2c00      	cmp	r4, #0
 80123a4:	d11a      	bne.n	80123dc <_malloc_r+0x5c>
 80123a6:	4f24      	ldr	r7, [pc, #144]	; (8012438 <_malloc_r+0xb8>)
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d104      	bne.n	80123b8 <_malloc_r+0x38>
 80123ae:	0021      	movs	r1, r4
 80123b0:	0030      	movs	r0, r6
 80123b2:	f000 fb9b 	bl	8012aec <_sbrk_r>
 80123b6:	6038      	str	r0, [r7, #0]
 80123b8:	0029      	movs	r1, r5
 80123ba:	0030      	movs	r0, r6
 80123bc:	f000 fb96 	bl	8012aec <_sbrk_r>
 80123c0:	1c43      	adds	r3, r0, #1
 80123c2:	d12b      	bne.n	801241c <_malloc_r+0x9c>
 80123c4:	230c      	movs	r3, #12
 80123c6:	0030      	movs	r0, r6
 80123c8:	6033      	str	r3, [r6, #0]
 80123ca:	f000 fe8b 	bl	80130e4 <__malloc_unlock>
 80123ce:	e003      	b.n	80123d8 <_malloc_r+0x58>
 80123d0:	2d00      	cmp	r5, #0
 80123d2:	dade      	bge.n	8012392 <_malloc_r+0x12>
 80123d4:	230c      	movs	r3, #12
 80123d6:	6033      	str	r3, [r6, #0]
 80123d8:	2000      	movs	r0, #0
 80123da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123dc:	6823      	ldr	r3, [r4, #0]
 80123de:	1b5b      	subs	r3, r3, r5
 80123e0:	d419      	bmi.n	8012416 <_malloc_r+0x96>
 80123e2:	2b0b      	cmp	r3, #11
 80123e4:	d903      	bls.n	80123ee <_malloc_r+0x6e>
 80123e6:	6023      	str	r3, [r4, #0]
 80123e8:	18e4      	adds	r4, r4, r3
 80123ea:	6025      	str	r5, [r4, #0]
 80123ec:	e003      	b.n	80123f6 <_malloc_r+0x76>
 80123ee:	6863      	ldr	r3, [r4, #4]
 80123f0:	42a2      	cmp	r2, r4
 80123f2:	d10e      	bne.n	8012412 <_malloc_r+0x92>
 80123f4:	600b      	str	r3, [r1, #0]
 80123f6:	0030      	movs	r0, r6
 80123f8:	f000 fe74 	bl	80130e4 <__malloc_unlock>
 80123fc:	0020      	movs	r0, r4
 80123fe:	2207      	movs	r2, #7
 8012400:	300b      	adds	r0, #11
 8012402:	1d23      	adds	r3, r4, #4
 8012404:	4390      	bics	r0, r2
 8012406:	1ac2      	subs	r2, r0, r3
 8012408:	4298      	cmp	r0, r3
 801240a:	d0e6      	beq.n	80123da <_malloc_r+0x5a>
 801240c:	1a1b      	subs	r3, r3, r0
 801240e:	50a3      	str	r3, [r4, r2]
 8012410:	e7e3      	b.n	80123da <_malloc_r+0x5a>
 8012412:	6053      	str	r3, [r2, #4]
 8012414:	e7ef      	b.n	80123f6 <_malloc_r+0x76>
 8012416:	0022      	movs	r2, r4
 8012418:	6864      	ldr	r4, [r4, #4]
 801241a:	e7c2      	b.n	80123a2 <_malloc_r+0x22>
 801241c:	2303      	movs	r3, #3
 801241e:	1cc4      	adds	r4, r0, #3
 8012420:	439c      	bics	r4, r3
 8012422:	42a0      	cmp	r0, r4
 8012424:	d0e1      	beq.n	80123ea <_malloc_r+0x6a>
 8012426:	1a21      	subs	r1, r4, r0
 8012428:	0030      	movs	r0, r6
 801242a:	f000 fb5f 	bl	8012aec <_sbrk_r>
 801242e:	1c43      	adds	r3, r0, #1
 8012430:	d1db      	bne.n	80123ea <_malloc_r+0x6a>
 8012432:	e7c7      	b.n	80123c4 <_malloc_r+0x44>
 8012434:	20002dbc 	.word	0x20002dbc
 8012438:	20002dc0 	.word	0x20002dc0

0801243c <__sfputc_r>:
 801243c:	6893      	ldr	r3, [r2, #8]
 801243e:	b510      	push	{r4, lr}
 8012440:	3b01      	subs	r3, #1
 8012442:	6093      	str	r3, [r2, #8]
 8012444:	2b00      	cmp	r3, #0
 8012446:	da04      	bge.n	8012452 <__sfputc_r+0x16>
 8012448:	6994      	ldr	r4, [r2, #24]
 801244a:	42a3      	cmp	r3, r4
 801244c:	db07      	blt.n	801245e <__sfputc_r+0x22>
 801244e:	290a      	cmp	r1, #10
 8012450:	d005      	beq.n	801245e <__sfputc_r+0x22>
 8012452:	6813      	ldr	r3, [r2, #0]
 8012454:	1c58      	adds	r0, r3, #1
 8012456:	6010      	str	r0, [r2, #0]
 8012458:	7019      	strb	r1, [r3, #0]
 801245a:	0008      	movs	r0, r1
 801245c:	bd10      	pop	{r4, pc}
 801245e:	f000 fbed 	bl	8012c3c <__swbuf_r>
 8012462:	0001      	movs	r1, r0
 8012464:	e7f9      	b.n	801245a <__sfputc_r+0x1e>

08012466 <__sfputs_r>:
 8012466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012468:	0006      	movs	r6, r0
 801246a:	000f      	movs	r7, r1
 801246c:	0014      	movs	r4, r2
 801246e:	18d5      	adds	r5, r2, r3
 8012470:	42ac      	cmp	r4, r5
 8012472:	d101      	bne.n	8012478 <__sfputs_r+0x12>
 8012474:	2000      	movs	r0, #0
 8012476:	e007      	b.n	8012488 <__sfputs_r+0x22>
 8012478:	7821      	ldrb	r1, [r4, #0]
 801247a:	003a      	movs	r2, r7
 801247c:	0030      	movs	r0, r6
 801247e:	f7ff ffdd 	bl	801243c <__sfputc_r>
 8012482:	3401      	adds	r4, #1
 8012484:	1c43      	adds	r3, r0, #1
 8012486:	d1f3      	bne.n	8012470 <__sfputs_r+0xa>
 8012488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801248c <_vfiprintf_r>:
 801248c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801248e:	b0a1      	sub	sp, #132	; 0x84
 8012490:	0006      	movs	r6, r0
 8012492:	000c      	movs	r4, r1
 8012494:	001f      	movs	r7, r3
 8012496:	9203      	str	r2, [sp, #12]
 8012498:	2800      	cmp	r0, #0
 801249a:	d004      	beq.n	80124a6 <_vfiprintf_r+0x1a>
 801249c:	6983      	ldr	r3, [r0, #24]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d101      	bne.n	80124a6 <_vfiprintf_r+0x1a>
 80124a2:	f7ff fe13 	bl	80120cc <__sinit>
 80124a6:	4b8e      	ldr	r3, [pc, #568]	; (80126e0 <_vfiprintf_r+0x254>)
 80124a8:	429c      	cmp	r4, r3
 80124aa:	d11c      	bne.n	80124e6 <_vfiprintf_r+0x5a>
 80124ac:	6874      	ldr	r4, [r6, #4]
 80124ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124b0:	07db      	lsls	r3, r3, #31
 80124b2:	d405      	bmi.n	80124c0 <_vfiprintf_r+0x34>
 80124b4:	89a3      	ldrh	r3, [r4, #12]
 80124b6:	059b      	lsls	r3, r3, #22
 80124b8:	d402      	bmi.n	80124c0 <_vfiprintf_r+0x34>
 80124ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124bc:	f7ff fedb 	bl	8012276 <__retarget_lock_acquire_recursive>
 80124c0:	89a3      	ldrh	r3, [r4, #12]
 80124c2:	071b      	lsls	r3, r3, #28
 80124c4:	d502      	bpl.n	80124cc <_vfiprintf_r+0x40>
 80124c6:	6923      	ldr	r3, [r4, #16]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d11d      	bne.n	8012508 <_vfiprintf_r+0x7c>
 80124cc:	0021      	movs	r1, r4
 80124ce:	0030      	movs	r0, r6
 80124d0:	f000 fc1e 	bl	8012d10 <__swsetup_r>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d017      	beq.n	8012508 <_vfiprintf_r+0x7c>
 80124d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124da:	07db      	lsls	r3, r3, #31
 80124dc:	d50d      	bpl.n	80124fa <_vfiprintf_r+0x6e>
 80124de:	2001      	movs	r0, #1
 80124e0:	4240      	negs	r0, r0
 80124e2:	b021      	add	sp, #132	; 0x84
 80124e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124e6:	4b7f      	ldr	r3, [pc, #508]	; (80126e4 <_vfiprintf_r+0x258>)
 80124e8:	429c      	cmp	r4, r3
 80124ea:	d101      	bne.n	80124f0 <_vfiprintf_r+0x64>
 80124ec:	68b4      	ldr	r4, [r6, #8]
 80124ee:	e7de      	b.n	80124ae <_vfiprintf_r+0x22>
 80124f0:	4b7d      	ldr	r3, [pc, #500]	; (80126e8 <_vfiprintf_r+0x25c>)
 80124f2:	429c      	cmp	r4, r3
 80124f4:	d1db      	bne.n	80124ae <_vfiprintf_r+0x22>
 80124f6:	68f4      	ldr	r4, [r6, #12]
 80124f8:	e7d9      	b.n	80124ae <_vfiprintf_r+0x22>
 80124fa:	89a3      	ldrh	r3, [r4, #12]
 80124fc:	059b      	lsls	r3, r3, #22
 80124fe:	d4ee      	bmi.n	80124de <_vfiprintf_r+0x52>
 8012500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012502:	f7ff feb9 	bl	8012278 <__retarget_lock_release_recursive>
 8012506:	e7ea      	b.n	80124de <_vfiprintf_r+0x52>
 8012508:	2300      	movs	r3, #0
 801250a:	ad08      	add	r5, sp, #32
 801250c:	616b      	str	r3, [r5, #20]
 801250e:	3320      	adds	r3, #32
 8012510:	766b      	strb	r3, [r5, #25]
 8012512:	3310      	adds	r3, #16
 8012514:	76ab      	strb	r3, [r5, #26]
 8012516:	9707      	str	r7, [sp, #28]
 8012518:	9f03      	ldr	r7, [sp, #12]
 801251a:	783b      	ldrb	r3, [r7, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <_vfiprintf_r+0x98>
 8012520:	2b25      	cmp	r3, #37	; 0x25
 8012522:	d14e      	bne.n	80125c2 <_vfiprintf_r+0x136>
 8012524:	9b03      	ldr	r3, [sp, #12]
 8012526:	1afb      	subs	r3, r7, r3
 8012528:	9305      	str	r3, [sp, #20]
 801252a:	9b03      	ldr	r3, [sp, #12]
 801252c:	429f      	cmp	r7, r3
 801252e:	d00d      	beq.n	801254c <_vfiprintf_r+0xc0>
 8012530:	9b05      	ldr	r3, [sp, #20]
 8012532:	0021      	movs	r1, r4
 8012534:	0030      	movs	r0, r6
 8012536:	9a03      	ldr	r2, [sp, #12]
 8012538:	f7ff ff95 	bl	8012466 <__sfputs_r>
 801253c:	1c43      	adds	r3, r0, #1
 801253e:	d100      	bne.n	8012542 <_vfiprintf_r+0xb6>
 8012540:	e0b5      	b.n	80126ae <_vfiprintf_r+0x222>
 8012542:	696a      	ldr	r2, [r5, #20]
 8012544:	9b05      	ldr	r3, [sp, #20]
 8012546:	4694      	mov	ip, r2
 8012548:	4463      	add	r3, ip
 801254a:	616b      	str	r3, [r5, #20]
 801254c:	783b      	ldrb	r3, [r7, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d100      	bne.n	8012554 <_vfiprintf_r+0xc8>
 8012552:	e0ac      	b.n	80126ae <_vfiprintf_r+0x222>
 8012554:	2201      	movs	r2, #1
 8012556:	1c7b      	adds	r3, r7, #1
 8012558:	9303      	str	r3, [sp, #12]
 801255a:	2300      	movs	r3, #0
 801255c:	4252      	negs	r2, r2
 801255e:	606a      	str	r2, [r5, #4]
 8012560:	a904      	add	r1, sp, #16
 8012562:	3254      	adds	r2, #84	; 0x54
 8012564:	1852      	adds	r2, r2, r1
 8012566:	602b      	str	r3, [r5, #0]
 8012568:	60eb      	str	r3, [r5, #12]
 801256a:	60ab      	str	r3, [r5, #8]
 801256c:	7013      	strb	r3, [r2, #0]
 801256e:	65ab      	str	r3, [r5, #88]	; 0x58
 8012570:	9b03      	ldr	r3, [sp, #12]
 8012572:	2205      	movs	r2, #5
 8012574:	7819      	ldrb	r1, [r3, #0]
 8012576:	485d      	ldr	r0, [pc, #372]	; (80126ec <_vfiprintf_r+0x260>)
 8012578:	f000 fda0 	bl	80130bc <memchr>
 801257c:	9b03      	ldr	r3, [sp, #12]
 801257e:	1c5f      	adds	r7, r3, #1
 8012580:	2800      	cmp	r0, #0
 8012582:	d120      	bne.n	80125c6 <_vfiprintf_r+0x13a>
 8012584:	682a      	ldr	r2, [r5, #0]
 8012586:	06d3      	lsls	r3, r2, #27
 8012588:	d504      	bpl.n	8012594 <_vfiprintf_r+0x108>
 801258a:	2353      	movs	r3, #83	; 0x53
 801258c:	a904      	add	r1, sp, #16
 801258e:	185b      	adds	r3, r3, r1
 8012590:	2120      	movs	r1, #32
 8012592:	7019      	strb	r1, [r3, #0]
 8012594:	0713      	lsls	r3, r2, #28
 8012596:	d504      	bpl.n	80125a2 <_vfiprintf_r+0x116>
 8012598:	2353      	movs	r3, #83	; 0x53
 801259a:	a904      	add	r1, sp, #16
 801259c:	185b      	adds	r3, r3, r1
 801259e:	212b      	movs	r1, #43	; 0x2b
 80125a0:	7019      	strb	r1, [r3, #0]
 80125a2:	9b03      	ldr	r3, [sp, #12]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	2b2a      	cmp	r3, #42	; 0x2a
 80125a8:	d016      	beq.n	80125d8 <_vfiprintf_r+0x14c>
 80125aa:	2100      	movs	r1, #0
 80125ac:	68eb      	ldr	r3, [r5, #12]
 80125ae:	9f03      	ldr	r7, [sp, #12]
 80125b0:	783a      	ldrb	r2, [r7, #0]
 80125b2:	1c78      	adds	r0, r7, #1
 80125b4:	3a30      	subs	r2, #48	; 0x30
 80125b6:	4684      	mov	ip, r0
 80125b8:	2a09      	cmp	r2, #9
 80125ba:	d94f      	bls.n	801265c <_vfiprintf_r+0x1d0>
 80125bc:	2900      	cmp	r1, #0
 80125be:	d111      	bne.n	80125e4 <_vfiprintf_r+0x158>
 80125c0:	e017      	b.n	80125f2 <_vfiprintf_r+0x166>
 80125c2:	3701      	adds	r7, #1
 80125c4:	e7a9      	b.n	801251a <_vfiprintf_r+0x8e>
 80125c6:	4b49      	ldr	r3, [pc, #292]	; (80126ec <_vfiprintf_r+0x260>)
 80125c8:	682a      	ldr	r2, [r5, #0]
 80125ca:	1ac0      	subs	r0, r0, r3
 80125cc:	2301      	movs	r3, #1
 80125ce:	4083      	lsls	r3, r0
 80125d0:	4313      	orrs	r3, r2
 80125d2:	602b      	str	r3, [r5, #0]
 80125d4:	9703      	str	r7, [sp, #12]
 80125d6:	e7cb      	b.n	8012570 <_vfiprintf_r+0xe4>
 80125d8:	9b07      	ldr	r3, [sp, #28]
 80125da:	1d19      	adds	r1, r3, #4
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	9107      	str	r1, [sp, #28]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	db01      	blt.n	80125e8 <_vfiprintf_r+0x15c>
 80125e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80125e6:	e004      	b.n	80125f2 <_vfiprintf_r+0x166>
 80125e8:	425b      	negs	r3, r3
 80125ea:	60eb      	str	r3, [r5, #12]
 80125ec:	2302      	movs	r3, #2
 80125ee:	4313      	orrs	r3, r2
 80125f0:	602b      	str	r3, [r5, #0]
 80125f2:	783b      	ldrb	r3, [r7, #0]
 80125f4:	2b2e      	cmp	r3, #46	; 0x2e
 80125f6:	d10a      	bne.n	801260e <_vfiprintf_r+0x182>
 80125f8:	787b      	ldrb	r3, [r7, #1]
 80125fa:	2b2a      	cmp	r3, #42	; 0x2a
 80125fc:	d137      	bne.n	801266e <_vfiprintf_r+0x1e2>
 80125fe:	9b07      	ldr	r3, [sp, #28]
 8012600:	3702      	adds	r7, #2
 8012602:	1d1a      	adds	r2, r3, #4
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	9207      	str	r2, [sp, #28]
 8012608:	2b00      	cmp	r3, #0
 801260a:	db2d      	blt.n	8012668 <_vfiprintf_r+0x1dc>
 801260c:	9309      	str	r3, [sp, #36]	; 0x24
 801260e:	2203      	movs	r2, #3
 8012610:	7839      	ldrb	r1, [r7, #0]
 8012612:	4837      	ldr	r0, [pc, #220]	; (80126f0 <_vfiprintf_r+0x264>)
 8012614:	f000 fd52 	bl	80130bc <memchr>
 8012618:	2800      	cmp	r0, #0
 801261a:	d007      	beq.n	801262c <_vfiprintf_r+0x1a0>
 801261c:	4b34      	ldr	r3, [pc, #208]	; (80126f0 <_vfiprintf_r+0x264>)
 801261e:	682a      	ldr	r2, [r5, #0]
 8012620:	1ac0      	subs	r0, r0, r3
 8012622:	2340      	movs	r3, #64	; 0x40
 8012624:	4083      	lsls	r3, r0
 8012626:	4313      	orrs	r3, r2
 8012628:	3701      	adds	r7, #1
 801262a:	602b      	str	r3, [r5, #0]
 801262c:	7839      	ldrb	r1, [r7, #0]
 801262e:	1c7b      	adds	r3, r7, #1
 8012630:	2206      	movs	r2, #6
 8012632:	4830      	ldr	r0, [pc, #192]	; (80126f4 <_vfiprintf_r+0x268>)
 8012634:	9303      	str	r3, [sp, #12]
 8012636:	7629      	strb	r1, [r5, #24]
 8012638:	f000 fd40 	bl	80130bc <memchr>
 801263c:	2800      	cmp	r0, #0
 801263e:	d045      	beq.n	80126cc <_vfiprintf_r+0x240>
 8012640:	4b2d      	ldr	r3, [pc, #180]	; (80126f8 <_vfiprintf_r+0x26c>)
 8012642:	2b00      	cmp	r3, #0
 8012644:	d127      	bne.n	8012696 <_vfiprintf_r+0x20a>
 8012646:	2207      	movs	r2, #7
 8012648:	9b07      	ldr	r3, [sp, #28]
 801264a:	3307      	adds	r3, #7
 801264c:	4393      	bics	r3, r2
 801264e:	3308      	adds	r3, #8
 8012650:	9307      	str	r3, [sp, #28]
 8012652:	696b      	ldr	r3, [r5, #20]
 8012654:	9a04      	ldr	r2, [sp, #16]
 8012656:	189b      	adds	r3, r3, r2
 8012658:	616b      	str	r3, [r5, #20]
 801265a:	e75d      	b.n	8012518 <_vfiprintf_r+0x8c>
 801265c:	210a      	movs	r1, #10
 801265e:	434b      	muls	r3, r1
 8012660:	4667      	mov	r7, ip
 8012662:	189b      	adds	r3, r3, r2
 8012664:	3909      	subs	r1, #9
 8012666:	e7a3      	b.n	80125b0 <_vfiprintf_r+0x124>
 8012668:	2301      	movs	r3, #1
 801266a:	425b      	negs	r3, r3
 801266c:	e7ce      	b.n	801260c <_vfiprintf_r+0x180>
 801266e:	2300      	movs	r3, #0
 8012670:	001a      	movs	r2, r3
 8012672:	3701      	adds	r7, #1
 8012674:	606b      	str	r3, [r5, #4]
 8012676:	7839      	ldrb	r1, [r7, #0]
 8012678:	1c78      	adds	r0, r7, #1
 801267a:	3930      	subs	r1, #48	; 0x30
 801267c:	4684      	mov	ip, r0
 801267e:	2909      	cmp	r1, #9
 8012680:	d903      	bls.n	801268a <_vfiprintf_r+0x1fe>
 8012682:	2b00      	cmp	r3, #0
 8012684:	d0c3      	beq.n	801260e <_vfiprintf_r+0x182>
 8012686:	9209      	str	r2, [sp, #36]	; 0x24
 8012688:	e7c1      	b.n	801260e <_vfiprintf_r+0x182>
 801268a:	230a      	movs	r3, #10
 801268c:	435a      	muls	r2, r3
 801268e:	4667      	mov	r7, ip
 8012690:	1852      	adds	r2, r2, r1
 8012692:	3b09      	subs	r3, #9
 8012694:	e7ef      	b.n	8012676 <_vfiprintf_r+0x1ea>
 8012696:	ab07      	add	r3, sp, #28
 8012698:	9300      	str	r3, [sp, #0]
 801269a:	0022      	movs	r2, r4
 801269c:	0029      	movs	r1, r5
 801269e:	0030      	movs	r0, r6
 80126a0:	4b16      	ldr	r3, [pc, #88]	; (80126fc <_vfiprintf_r+0x270>)
 80126a2:	e000      	b.n	80126a6 <_vfiprintf_r+0x21a>
 80126a4:	bf00      	nop
 80126a6:	9004      	str	r0, [sp, #16]
 80126a8:	9b04      	ldr	r3, [sp, #16]
 80126aa:	3301      	adds	r3, #1
 80126ac:	d1d1      	bne.n	8012652 <_vfiprintf_r+0x1c6>
 80126ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126b0:	07db      	lsls	r3, r3, #31
 80126b2:	d405      	bmi.n	80126c0 <_vfiprintf_r+0x234>
 80126b4:	89a3      	ldrh	r3, [r4, #12]
 80126b6:	059b      	lsls	r3, r3, #22
 80126b8:	d402      	bmi.n	80126c0 <_vfiprintf_r+0x234>
 80126ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126bc:	f7ff fddc 	bl	8012278 <__retarget_lock_release_recursive>
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	065b      	lsls	r3, r3, #25
 80126c4:	d500      	bpl.n	80126c8 <_vfiprintf_r+0x23c>
 80126c6:	e70a      	b.n	80124de <_vfiprintf_r+0x52>
 80126c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80126ca:	e70a      	b.n	80124e2 <_vfiprintf_r+0x56>
 80126cc:	ab07      	add	r3, sp, #28
 80126ce:	9300      	str	r3, [sp, #0]
 80126d0:	0022      	movs	r2, r4
 80126d2:	0029      	movs	r1, r5
 80126d4:	0030      	movs	r0, r6
 80126d6:	4b09      	ldr	r3, [pc, #36]	; (80126fc <_vfiprintf_r+0x270>)
 80126d8:	f000 f882 	bl	80127e0 <_printf_i>
 80126dc:	e7e3      	b.n	80126a6 <_vfiprintf_r+0x21a>
 80126de:	46c0      	nop			; (mov r8, r8)
 80126e0:	08014798 	.word	0x08014798
 80126e4:	080147b8 	.word	0x080147b8
 80126e8:	08014778 	.word	0x08014778
 80126ec:	080147dc 	.word	0x080147dc
 80126f0:	080147e2 	.word	0x080147e2
 80126f4:	080147e6 	.word	0x080147e6
 80126f8:	00000000 	.word	0x00000000
 80126fc:	08012467 	.word	0x08012467

08012700 <_printf_common>:
 8012700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012702:	0015      	movs	r5, r2
 8012704:	9301      	str	r3, [sp, #4]
 8012706:	688a      	ldr	r2, [r1, #8]
 8012708:	690b      	ldr	r3, [r1, #16]
 801270a:	000c      	movs	r4, r1
 801270c:	9000      	str	r0, [sp, #0]
 801270e:	4293      	cmp	r3, r2
 8012710:	da00      	bge.n	8012714 <_printf_common+0x14>
 8012712:	0013      	movs	r3, r2
 8012714:	0022      	movs	r2, r4
 8012716:	602b      	str	r3, [r5, #0]
 8012718:	3243      	adds	r2, #67	; 0x43
 801271a:	7812      	ldrb	r2, [r2, #0]
 801271c:	2a00      	cmp	r2, #0
 801271e:	d001      	beq.n	8012724 <_printf_common+0x24>
 8012720:	3301      	adds	r3, #1
 8012722:	602b      	str	r3, [r5, #0]
 8012724:	6823      	ldr	r3, [r4, #0]
 8012726:	069b      	lsls	r3, r3, #26
 8012728:	d502      	bpl.n	8012730 <_printf_common+0x30>
 801272a:	682b      	ldr	r3, [r5, #0]
 801272c:	3302      	adds	r3, #2
 801272e:	602b      	str	r3, [r5, #0]
 8012730:	6822      	ldr	r2, [r4, #0]
 8012732:	2306      	movs	r3, #6
 8012734:	0017      	movs	r7, r2
 8012736:	401f      	ands	r7, r3
 8012738:	421a      	tst	r2, r3
 801273a:	d027      	beq.n	801278c <_printf_common+0x8c>
 801273c:	0023      	movs	r3, r4
 801273e:	3343      	adds	r3, #67	; 0x43
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	1e5a      	subs	r2, r3, #1
 8012744:	4193      	sbcs	r3, r2
 8012746:	6822      	ldr	r2, [r4, #0]
 8012748:	0692      	lsls	r2, r2, #26
 801274a:	d430      	bmi.n	80127ae <_printf_common+0xae>
 801274c:	0022      	movs	r2, r4
 801274e:	9901      	ldr	r1, [sp, #4]
 8012750:	9800      	ldr	r0, [sp, #0]
 8012752:	9e08      	ldr	r6, [sp, #32]
 8012754:	3243      	adds	r2, #67	; 0x43
 8012756:	47b0      	blx	r6
 8012758:	1c43      	adds	r3, r0, #1
 801275a:	d025      	beq.n	80127a8 <_printf_common+0xa8>
 801275c:	2306      	movs	r3, #6
 801275e:	6820      	ldr	r0, [r4, #0]
 8012760:	682a      	ldr	r2, [r5, #0]
 8012762:	68e1      	ldr	r1, [r4, #12]
 8012764:	2500      	movs	r5, #0
 8012766:	4003      	ands	r3, r0
 8012768:	2b04      	cmp	r3, #4
 801276a:	d103      	bne.n	8012774 <_printf_common+0x74>
 801276c:	1a8d      	subs	r5, r1, r2
 801276e:	43eb      	mvns	r3, r5
 8012770:	17db      	asrs	r3, r3, #31
 8012772:	401d      	ands	r5, r3
 8012774:	68a3      	ldr	r3, [r4, #8]
 8012776:	6922      	ldr	r2, [r4, #16]
 8012778:	4293      	cmp	r3, r2
 801277a:	dd01      	ble.n	8012780 <_printf_common+0x80>
 801277c:	1a9b      	subs	r3, r3, r2
 801277e:	18ed      	adds	r5, r5, r3
 8012780:	2700      	movs	r7, #0
 8012782:	42bd      	cmp	r5, r7
 8012784:	d120      	bne.n	80127c8 <_printf_common+0xc8>
 8012786:	2000      	movs	r0, #0
 8012788:	e010      	b.n	80127ac <_printf_common+0xac>
 801278a:	3701      	adds	r7, #1
 801278c:	68e3      	ldr	r3, [r4, #12]
 801278e:	682a      	ldr	r2, [r5, #0]
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	42bb      	cmp	r3, r7
 8012794:	ddd2      	ble.n	801273c <_printf_common+0x3c>
 8012796:	0022      	movs	r2, r4
 8012798:	2301      	movs	r3, #1
 801279a:	9901      	ldr	r1, [sp, #4]
 801279c:	9800      	ldr	r0, [sp, #0]
 801279e:	9e08      	ldr	r6, [sp, #32]
 80127a0:	3219      	adds	r2, #25
 80127a2:	47b0      	blx	r6
 80127a4:	1c43      	adds	r3, r0, #1
 80127a6:	d1f0      	bne.n	801278a <_printf_common+0x8a>
 80127a8:	2001      	movs	r0, #1
 80127aa:	4240      	negs	r0, r0
 80127ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80127ae:	2030      	movs	r0, #48	; 0x30
 80127b0:	18e1      	adds	r1, r4, r3
 80127b2:	3143      	adds	r1, #67	; 0x43
 80127b4:	7008      	strb	r0, [r1, #0]
 80127b6:	0021      	movs	r1, r4
 80127b8:	1c5a      	adds	r2, r3, #1
 80127ba:	3145      	adds	r1, #69	; 0x45
 80127bc:	7809      	ldrb	r1, [r1, #0]
 80127be:	18a2      	adds	r2, r4, r2
 80127c0:	3243      	adds	r2, #67	; 0x43
 80127c2:	3302      	adds	r3, #2
 80127c4:	7011      	strb	r1, [r2, #0]
 80127c6:	e7c1      	b.n	801274c <_printf_common+0x4c>
 80127c8:	0022      	movs	r2, r4
 80127ca:	2301      	movs	r3, #1
 80127cc:	9901      	ldr	r1, [sp, #4]
 80127ce:	9800      	ldr	r0, [sp, #0]
 80127d0:	9e08      	ldr	r6, [sp, #32]
 80127d2:	321a      	adds	r2, #26
 80127d4:	47b0      	blx	r6
 80127d6:	1c43      	adds	r3, r0, #1
 80127d8:	d0e6      	beq.n	80127a8 <_printf_common+0xa8>
 80127da:	3701      	adds	r7, #1
 80127dc:	e7d1      	b.n	8012782 <_printf_common+0x82>
	...

080127e0 <_printf_i>:
 80127e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127e2:	b08b      	sub	sp, #44	; 0x2c
 80127e4:	9206      	str	r2, [sp, #24]
 80127e6:	000a      	movs	r2, r1
 80127e8:	3243      	adds	r2, #67	; 0x43
 80127ea:	9307      	str	r3, [sp, #28]
 80127ec:	9005      	str	r0, [sp, #20]
 80127ee:	9204      	str	r2, [sp, #16]
 80127f0:	7e0a      	ldrb	r2, [r1, #24]
 80127f2:	000c      	movs	r4, r1
 80127f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127f6:	2a78      	cmp	r2, #120	; 0x78
 80127f8:	d806      	bhi.n	8012808 <_printf_i+0x28>
 80127fa:	2a62      	cmp	r2, #98	; 0x62
 80127fc:	d808      	bhi.n	8012810 <_printf_i+0x30>
 80127fe:	2a00      	cmp	r2, #0
 8012800:	d100      	bne.n	8012804 <_printf_i+0x24>
 8012802:	e0c0      	b.n	8012986 <_printf_i+0x1a6>
 8012804:	2a58      	cmp	r2, #88	; 0x58
 8012806:	d052      	beq.n	80128ae <_printf_i+0xce>
 8012808:	0026      	movs	r6, r4
 801280a:	3642      	adds	r6, #66	; 0x42
 801280c:	7032      	strb	r2, [r6, #0]
 801280e:	e022      	b.n	8012856 <_printf_i+0x76>
 8012810:	0010      	movs	r0, r2
 8012812:	3863      	subs	r0, #99	; 0x63
 8012814:	2815      	cmp	r0, #21
 8012816:	d8f7      	bhi.n	8012808 <_printf_i+0x28>
 8012818:	f7ed fc76 	bl	8000108 <__gnu_thumb1_case_shi>
 801281c:	001f0016 	.word	0x001f0016
 8012820:	fff6fff6 	.word	0xfff6fff6
 8012824:	fff6fff6 	.word	0xfff6fff6
 8012828:	fff6001f 	.word	0xfff6001f
 801282c:	fff6fff6 	.word	0xfff6fff6
 8012830:	00a8fff6 	.word	0x00a8fff6
 8012834:	009a0036 	.word	0x009a0036
 8012838:	fff6fff6 	.word	0xfff6fff6
 801283c:	fff600b9 	.word	0xfff600b9
 8012840:	fff60036 	.word	0xfff60036
 8012844:	009efff6 	.word	0x009efff6
 8012848:	0026      	movs	r6, r4
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	3642      	adds	r6, #66	; 0x42
 801284e:	1d11      	adds	r1, r2, #4
 8012850:	6019      	str	r1, [r3, #0]
 8012852:	6813      	ldr	r3, [r2, #0]
 8012854:	7033      	strb	r3, [r6, #0]
 8012856:	2301      	movs	r3, #1
 8012858:	e0a7      	b.n	80129aa <_printf_i+0x1ca>
 801285a:	6808      	ldr	r0, [r1, #0]
 801285c:	6819      	ldr	r1, [r3, #0]
 801285e:	1d0a      	adds	r2, r1, #4
 8012860:	0605      	lsls	r5, r0, #24
 8012862:	d50b      	bpl.n	801287c <_printf_i+0x9c>
 8012864:	680d      	ldr	r5, [r1, #0]
 8012866:	601a      	str	r2, [r3, #0]
 8012868:	2d00      	cmp	r5, #0
 801286a:	da03      	bge.n	8012874 <_printf_i+0x94>
 801286c:	232d      	movs	r3, #45	; 0x2d
 801286e:	9a04      	ldr	r2, [sp, #16]
 8012870:	426d      	negs	r5, r5
 8012872:	7013      	strb	r3, [r2, #0]
 8012874:	4b61      	ldr	r3, [pc, #388]	; (80129fc <_printf_i+0x21c>)
 8012876:	270a      	movs	r7, #10
 8012878:	9303      	str	r3, [sp, #12]
 801287a:	e032      	b.n	80128e2 <_printf_i+0x102>
 801287c:	680d      	ldr	r5, [r1, #0]
 801287e:	601a      	str	r2, [r3, #0]
 8012880:	0641      	lsls	r1, r0, #25
 8012882:	d5f1      	bpl.n	8012868 <_printf_i+0x88>
 8012884:	b22d      	sxth	r5, r5
 8012886:	e7ef      	b.n	8012868 <_printf_i+0x88>
 8012888:	680d      	ldr	r5, [r1, #0]
 801288a:	6819      	ldr	r1, [r3, #0]
 801288c:	1d08      	adds	r0, r1, #4
 801288e:	6018      	str	r0, [r3, #0]
 8012890:	062e      	lsls	r6, r5, #24
 8012892:	d501      	bpl.n	8012898 <_printf_i+0xb8>
 8012894:	680d      	ldr	r5, [r1, #0]
 8012896:	e003      	b.n	80128a0 <_printf_i+0xc0>
 8012898:	066d      	lsls	r5, r5, #25
 801289a:	d5fb      	bpl.n	8012894 <_printf_i+0xb4>
 801289c:	680d      	ldr	r5, [r1, #0]
 801289e:	b2ad      	uxth	r5, r5
 80128a0:	4b56      	ldr	r3, [pc, #344]	; (80129fc <_printf_i+0x21c>)
 80128a2:	270a      	movs	r7, #10
 80128a4:	9303      	str	r3, [sp, #12]
 80128a6:	2a6f      	cmp	r2, #111	; 0x6f
 80128a8:	d117      	bne.n	80128da <_printf_i+0xfa>
 80128aa:	2708      	movs	r7, #8
 80128ac:	e015      	b.n	80128da <_printf_i+0xfa>
 80128ae:	3145      	adds	r1, #69	; 0x45
 80128b0:	700a      	strb	r2, [r1, #0]
 80128b2:	4a52      	ldr	r2, [pc, #328]	; (80129fc <_printf_i+0x21c>)
 80128b4:	9203      	str	r2, [sp, #12]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	6821      	ldr	r1, [r4, #0]
 80128ba:	ca20      	ldmia	r2!, {r5}
 80128bc:	601a      	str	r2, [r3, #0]
 80128be:	0608      	lsls	r0, r1, #24
 80128c0:	d550      	bpl.n	8012964 <_printf_i+0x184>
 80128c2:	07cb      	lsls	r3, r1, #31
 80128c4:	d502      	bpl.n	80128cc <_printf_i+0xec>
 80128c6:	2320      	movs	r3, #32
 80128c8:	4319      	orrs	r1, r3
 80128ca:	6021      	str	r1, [r4, #0]
 80128cc:	2710      	movs	r7, #16
 80128ce:	2d00      	cmp	r5, #0
 80128d0:	d103      	bne.n	80128da <_printf_i+0xfa>
 80128d2:	2320      	movs	r3, #32
 80128d4:	6822      	ldr	r2, [r4, #0]
 80128d6:	439a      	bics	r2, r3
 80128d8:	6022      	str	r2, [r4, #0]
 80128da:	0023      	movs	r3, r4
 80128dc:	2200      	movs	r2, #0
 80128de:	3343      	adds	r3, #67	; 0x43
 80128e0:	701a      	strb	r2, [r3, #0]
 80128e2:	6863      	ldr	r3, [r4, #4]
 80128e4:	60a3      	str	r3, [r4, #8]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	db03      	blt.n	80128f2 <_printf_i+0x112>
 80128ea:	2204      	movs	r2, #4
 80128ec:	6821      	ldr	r1, [r4, #0]
 80128ee:	4391      	bics	r1, r2
 80128f0:	6021      	str	r1, [r4, #0]
 80128f2:	2d00      	cmp	r5, #0
 80128f4:	d102      	bne.n	80128fc <_printf_i+0x11c>
 80128f6:	9e04      	ldr	r6, [sp, #16]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00c      	beq.n	8012916 <_printf_i+0x136>
 80128fc:	9e04      	ldr	r6, [sp, #16]
 80128fe:	0028      	movs	r0, r5
 8012900:	0039      	movs	r1, r7
 8012902:	f7ed fc91 	bl	8000228 <__aeabi_uidivmod>
 8012906:	9b03      	ldr	r3, [sp, #12]
 8012908:	3e01      	subs	r6, #1
 801290a:	5c5b      	ldrb	r3, [r3, r1]
 801290c:	7033      	strb	r3, [r6, #0]
 801290e:	002b      	movs	r3, r5
 8012910:	0005      	movs	r5, r0
 8012912:	429f      	cmp	r7, r3
 8012914:	d9f3      	bls.n	80128fe <_printf_i+0x11e>
 8012916:	2f08      	cmp	r7, #8
 8012918:	d109      	bne.n	801292e <_printf_i+0x14e>
 801291a:	6823      	ldr	r3, [r4, #0]
 801291c:	07db      	lsls	r3, r3, #31
 801291e:	d506      	bpl.n	801292e <_printf_i+0x14e>
 8012920:	6863      	ldr	r3, [r4, #4]
 8012922:	6922      	ldr	r2, [r4, #16]
 8012924:	4293      	cmp	r3, r2
 8012926:	dc02      	bgt.n	801292e <_printf_i+0x14e>
 8012928:	2330      	movs	r3, #48	; 0x30
 801292a:	3e01      	subs	r6, #1
 801292c:	7033      	strb	r3, [r6, #0]
 801292e:	9b04      	ldr	r3, [sp, #16]
 8012930:	1b9b      	subs	r3, r3, r6
 8012932:	6123      	str	r3, [r4, #16]
 8012934:	9b07      	ldr	r3, [sp, #28]
 8012936:	0021      	movs	r1, r4
 8012938:	9300      	str	r3, [sp, #0]
 801293a:	9805      	ldr	r0, [sp, #20]
 801293c:	9b06      	ldr	r3, [sp, #24]
 801293e:	aa09      	add	r2, sp, #36	; 0x24
 8012940:	f7ff fede 	bl	8012700 <_printf_common>
 8012944:	1c43      	adds	r3, r0, #1
 8012946:	d135      	bne.n	80129b4 <_printf_i+0x1d4>
 8012948:	2001      	movs	r0, #1
 801294a:	4240      	negs	r0, r0
 801294c:	b00b      	add	sp, #44	; 0x2c
 801294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012950:	2220      	movs	r2, #32
 8012952:	6809      	ldr	r1, [r1, #0]
 8012954:	430a      	orrs	r2, r1
 8012956:	6022      	str	r2, [r4, #0]
 8012958:	0022      	movs	r2, r4
 801295a:	2178      	movs	r1, #120	; 0x78
 801295c:	3245      	adds	r2, #69	; 0x45
 801295e:	7011      	strb	r1, [r2, #0]
 8012960:	4a27      	ldr	r2, [pc, #156]	; (8012a00 <_printf_i+0x220>)
 8012962:	e7a7      	b.n	80128b4 <_printf_i+0xd4>
 8012964:	0648      	lsls	r0, r1, #25
 8012966:	d5ac      	bpl.n	80128c2 <_printf_i+0xe2>
 8012968:	b2ad      	uxth	r5, r5
 801296a:	e7aa      	b.n	80128c2 <_printf_i+0xe2>
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	680d      	ldr	r5, [r1, #0]
 8012970:	1d10      	adds	r0, r2, #4
 8012972:	6949      	ldr	r1, [r1, #20]
 8012974:	6018      	str	r0, [r3, #0]
 8012976:	6813      	ldr	r3, [r2, #0]
 8012978:	062e      	lsls	r6, r5, #24
 801297a:	d501      	bpl.n	8012980 <_printf_i+0x1a0>
 801297c:	6019      	str	r1, [r3, #0]
 801297e:	e002      	b.n	8012986 <_printf_i+0x1a6>
 8012980:	066d      	lsls	r5, r5, #25
 8012982:	d5fb      	bpl.n	801297c <_printf_i+0x19c>
 8012984:	8019      	strh	r1, [r3, #0]
 8012986:	2300      	movs	r3, #0
 8012988:	9e04      	ldr	r6, [sp, #16]
 801298a:	6123      	str	r3, [r4, #16]
 801298c:	e7d2      	b.n	8012934 <_printf_i+0x154>
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	1d11      	adds	r1, r2, #4
 8012992:	6019      	str	r1, [r3, #0]
 8012994:	6816      	ldr	r6, [r2, #0]
 8012996:	2100      	movs	r1, #0
 8012998:	0030      	movs	r0, r6
 801299a:	6862      	ldr	r2, [r4, #4]
 801299c:	f000 fb8e 	bl	80130bc <memchr>
 80129a0:	2800      	cmp	r0, #0
 80129a2:	d001      	beq.n	80129a8 <_printf_i+0x1c8>
 80129a4:	1b80      	subs	r0, r0, r6
 80129a6:	6060      	str	r0, [r4, #4]
 80129a8:	6863      	ldr	r3, [r4, #4]
 80129aa:	6123      	str	r3, [r4, #16]
 80129ac:	2300      	movs	r3, #0
 80129ae:	9a04      	ldr	r2, [sp, #16]
 80129b0:	7013      	strb	r3, [r2, #0]
 80129b2:	e7bf      	b.n	8012934 <_printf_i+0x154>
 80129b4:	6923      	ldr	r3, [r4, #16]
 80129b6:	0032      	movs	r2, r6
 80129b8:	9906      	ldr	r1, [sp, #24]
 80129ba:	9805      	ldr	r0, [sp, #20]
 80129bc:	9d07      	ldr	r5, [sp, #28]
 80129be:	47a8      	blx	r5
 80129c0:	1c43      	adds	r3, r0, #1
 80129c2:	d0c1      	beq.n	8012948 <_printf_i+0x168>
 80129c4:	6823      	ldr	r3, [r4, #0]
 80129c6:	079b      	lsls	r3, r3, #30
 80129c8:	d415      	bmi.n	80129f6 <_printf_i+0x216>
 80129ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129cc:	68e0      	ldr	r0, [r4, #12]
 80129ce:	4298      	cmp	r0, r3
 80129d0:	dabc      	bge.n	801294c <_printf_i+0x16c>
 80129d2:	0018      	movs	r0, r3
 80129d4:	e7ba      	b.n	801294c <_printf_i+0x16c>
 80129d6:	0022      	movs	r2, r4
 80129d8:	2301      	movs	r3, #1
 80129da:	9906      	ldr	r1, [sp, #24]
 80129dc:	9805      	ldr	r0, [sp, #20]
 80129de:	9e07      	ldr	r6, [sp, #28]
 80129e0:	3219      	adds	r2, #25
 80129e2:	47b0      	blx	r6
 80129e4:	1c43      	adds	r3, r0, #1
 80129e6:	d0af      	beq.n	8012948 <_printf_i+0x168>
 80129e8:	3501      	adds	r5, #1
 80129ea:	68e3      	ldr	r3, [r4, #12]
 80129ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129ee:	1a9b      	subs	r3, r3, r2
 80129f0:	42ab      	cmp	r3, r5
 80129f2:	dcf0      	bgt.n	80129d6 <_printf_i+0x1f6>
 80129f4:	e7e9      	b.n	80129ca <_printf_i+0x1ea>
 80129f6:	2500      	movs	r5, #0
 80129f8:	e7f7      	b.n	80129ea <_printf_i+0x20a>
 80129fa:	46c0      	nop			; (mov r8, r8)
 80129fc:	080147ed 	.word	0x080147ed
 8012a00:	080147fe 	.word	0x080147fe

08012a04 <cleanup_glue>:
 8012a04:	b570      	push	{r4, r5, r6, lr}
 8012a06:	000d      	movs	r5, r1
 8012a08:	6809      	ldr	r1, [r1, #0]
 8012a0a:	0004      	movs	r4, r0
 8012a0c:	2900      	cmp	r1, #0
 8012a0e:	d001      	beq.n	8012a14 <cleanup_glue+0x10>
 8012a10:	f7ff fff8 	bl	8012a04 <cleanup_glue>
 8012a14:	0029      	movs	r1, r5
 8012a16:	0020      	movs	r0, r4
 8012a18:	f7ff fc68 	bl	80122ec <_free_r>
 8012a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a20 <_reclaim_reent>:
 8012a20:	4b31      	ldr	r3, [pc, #196]	; (8012ae8 <_reclaim_reent+0xc8>)
 8012a22:	b570      	push	{r4, r5, r6, lr}
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	0004      	movs	r4, r0
 8012a28:	4283      	cmp	r3, r0
 8012a2a:	d049      	beq.n	8012ac0 <_reclaim_reent+0xa0>
 8012a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d00a      	beq.n	8012a48 <_reclaim_reent+0x28>
 8012a32:	2500      	movs	r5, #0
 8012a34:	68db      	ldr	r3, [r3, #12]
 8012a36:	42ab      	cmp	r3, r5
 8012a38:	d147      	bne.n	8012aca <_reclaim_reent+0xaa>
 8012a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a3c:	6819      	ldr	r1, [r3, #0]
 8012a3e:	2900      	cmp	r1, #0
 8012a40:	d002      	beq.n	8012a48 <_reclaim_reent+0x28>
 8012a42:	0020      	movs	r0, r4
 8012a44:	f7ff fc52 	bl	80122ec <_free_r>
 8012a48:	6961      	ldr	r1, [r4, #20]
 8012a4a:	2900      	cmp	r1, #0
 8012a4c:	d002      	beq.n	8012a54 <_reclaim_reent+0x34>
 8012a4e:	0020      	movs	r0, r4
 8012a50:	f7ff fc4c 	bl	80122ec <_free_r>
 8012a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012a56:	2900      	cmp	r1, #0
 8012a58:	d002      	beq.n	8012a60 <_reclaim_reent+0x40>
 8012a5a:	0020      	movs	r0, r4
 8012a5c:	f7ff fc46 	bl	80122ec <_free_r>
 8012a60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012a62:	2900      	cmp	r1, #0
 8012a64:	d002      	beq.n	8012a6c <_reclaim_reent+0x4c>
 8012a66:	0020      	movs	r0, r4
 8012a68:	f7ff fc40 	bl	80122ec <_free_r>
 8012a6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012a6e:	2900      	cmp	r1, #0
 8012a70:	d002      	beq.n	8012a78 <_reclaim_reent+0x58>
 8012a72:	0020      	movs	r0, r4
 8012a74:	f7ff fc3a 	bl	80122ec <_free_r>
 8012a78:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012a7a:	2900      	cmp	r1, #0
 8012a7c:	d002      	beq.n	8012a84 <_reclaim_reent+0x64>
 8012a7e:	0020      	movs	r0, r4
 8012a80:	f7ff fc34 	bl	80122ec <_free_r>
 8012a84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012a86:	2900      	cmp	r1, #0
 8012a88:	d002      	beq.n	8012a90 <_reclaim_reent+0x70>
 8012a8a:	0020      	movs	r0, r4
 8012a8c:	f7ff fc2e 	bl	80122ec <_free_r>
 8012a90:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012a92:	2900      	cmp	r1, #0
 8012a94:	d002      	beq.n	8012a9c <_reclaim_reent+0x7c>
 8012a96:	0020      	movs	r0, r4
 8012a98:	f7ff fc28 	bl	80122ec <_free_r>
 8012a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a9e:	2900      	cmp	r1, #0
 8012aa0:	d002      	beq.n	8012aa8 <_reclaim_reent+0x88>
 8012aa2:	0020      	movs	r0, r4
 8012aa4:	f7ff fc22 	bl	80122ec <_free_r>
 8012aa8:	69a3      	ldr	r3, [r4, #24]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d008      	beq.n	8012ac0 <_reclaim_reent+0xa0>
 8012aae:	0020      	movs	r0, r4
 8012ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012ab2:	4798      	blx	r3
 8012ab4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012ab6:	2900      	cmp	r1, #0
 8012ab8:	d002      	beq.n	8012ac0 <_reclaim_reent+0xa0>
 8012aba:	0020      	movs	r0, r4
 8012abc:	f7ff ffa2 	bl	8012a04 <cleanup_glue>
 8012ac0:	bd70      	pop	{r4, r5, r6, pc}
 8012ac2:	5949      	ldr	r1, [r1, r5]
 8012ac4:	2900      	cmp	r1, #0
 8012ac6:	d108      	bne.n	8012ada <_reclaim_reent+0xba>
 8012ac8:	3504      	adds	r5, #4
 8012aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012acc:	68d9      	ldr	r1, [r3, #12]
 8012ace:	2d80      	cmp	r5, #128	; 0x80
 8012ad0:	d1f7      	bne.n	8012ac2 <_reclaim_reent+0xa2>
 8012ad2:	0020      	movs	r0, r4
 8012ad4:	f7ff fc0a 	bl	80122ec <_free_r>
 8012ad8:	e7af      	b.n	8012a3a <_reclaim_reent+0x1a>
 8012ada:	680e      	ldr	r6, [r1, #0]
 8012adc:	0020      	movs	r0, r4
 8012ade:	f7ff fc05 	bl	80122ec <_free_r>
 8012ae2:	0031      	movs	r1, r6
 8012ae4:	e7ee      	b.n	8012ac4 <_reclaim_reent+0xa4>
 8012ae6:	46c0      	nop			; (mov r8, r8)
 8012ae8:	20000030 	.word	0x20000030

08012aec <_sbrk_r>:
 8012aec:	2300      	movs	r3, #0
 8012aee:	b570      	push	{r4, r5, r6, lr}
 8012af0:	4d06      	ldr	r5, [pc, #24]	; (8012b0c <_sbrk_r+0x20>)
 8012af2:	0004      	movs	r4, r0
 8012af4:	0008      	movs	r0, r1
 8012af6:	602b      	str	r3, [r5, #0]
 8012af8:	f7f0 fc8c 	bl	8003414 <_sbrk>
 8012afc:	1c43      	adds	r3, r0, #1
 8012afe:	d103      	bne.n	8012b08 <_sbrk_r+0x1c>
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d000      	beq.n	8012b08 <_sbrk_r+0x1c>
 8012b06:	6023      	str	r3, [r4, #0]
 8012b08:	bd70      	pop	{r4, r5, r6, pc}
 8012b0a:	46c0      	nop			; (mov r8, r8)
 8012b0c:	200034c8 	.word	0x200034c8

08012b10 <_raise_r>:
 8012b10:	b570      	push	{r4, r5, r6, lr}
 8012b12:	0004      	movs	r4, r0
 8012b14:	000d      	movs	r5, r1
 8012b16:	291f      	cmp	r1, #31
 8012b18:	d904      	bls.n	8012b24 <_raise_r+0x14>
 8012b1a:	2316      	movs	r3, #22
 8012b1c:	6003      	str	r3, [r0, #0]
 8012b1e:	2001      	movs	r0, #1
 8012b20:	4240      	negs	r0, r0
 8012b22:	bd70      	pop	{r4, r5, r6, pc}
 8012b24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d004      	beq.n	8012b34 <_raise_r+0x24>
 8012b2a:	008a      	lsls	r2, r1, #2
 8012b2c:	189b      	adds	r3, r3, r2
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	2a00      	cmp	r2, #0
 8012b32:	d108      	bne.n	8012b46 <_raise_r+0x36>
 8012b34:	0020      	movs	r0, r4
 8012b36:	f000 f831 	bl	8012b9c <_getpid_r>
 8012b3a:	002a      	movs	r2, r5
 8012b3c:	0001      	movs	r1, r0
 8012b3e:	0020      	movs	r0, r4
 8012b40:	f000 f81a 	bl	8012b78 <_kill_r>
 8012b44:	e7ed      	b.n	8012b22 <_raise_r+0x12>
 8012b46:	2000      	movs	r0, #0
 8012b48:	2a01      	cmp	r2, #1
 8012b4a:	d0ea      	beq.n	8012b22 <_raise_r+0x12>
 8012b4c:	1c51      	adds	r1, r2, #1
 8012b4e:	d103      	bne.n	8012b58 <_raise_r+0x48>
 8012b50:	2316      	movs	r3, #22
 8012b52:	3001      	adds	r0, #1
 8012b54:	6023      	str	r3, [r4, #0]
 8012b56:	e7e4      	b.n	8012b22 <_raise_r+0x12>
 8012b58:	2400      	movs	r4, #0
 8012b5a:	0028      	movs	r0, r5
 8012b5c:	601c      	str	r4, [r3, #0]
 8012b5e:	4790      	blx	r2
 8012b60:	0020      	movs	r0, r4
 8012b62:	e7de      	b.n	8012b22 <_raise_r+0x12>

08012b64 <raise>:
 8012b64:	b510      	push	{r4, lr}
 8012b66:	4b03      	ldr	r3, [pc, #12]	; (8012b74 <raise+0x10>)
 8012b68:	0001      	movs	r1, r0
 8012b6a:	6818      	ldr	r0, [r3, #0]
 8012b6c:	f7ff ffd0 	bl	8012b10 <_raise_r>
 8012b70:	bd10      	pop	{r4, pc}
 8012b72:	46c0      	nop			; (mov r8, r8)
 8012b74:	20000030 	.word	0x20000030

08012b78 <_kill_r>:
 8012b78:	2300      	movs	r3, #0
 8012b7a:	b570      	push	{r4, r5, r6, lr}
 8012b7c:	4d06      	ldr	r5, [pc, #24]	; (8012b98 <_kill_r+0x20>)
 8012b7e:	0004      	movs	r4, r0
 8012b80:	0008      	movs	r0, r1
 8012b82:	0011      	movs	r1, r2
 8012b84:	602b      	str	r3, [r5, #0]
 8012b86:	f7f0 fbc3 	bl	8003310 <_kill>
 8012b8a:	1c43      	adds	r3, r0, #1
 8012b8c:	d103      	bne.n	8012b96 <_kill_r+0x1e>
 8012b8e:	682b      	ldr	r3, [r5, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d000      	beq.n	8012b96 <_kill_r+0x1e>
 8012b94:	6023      	str	r3, [r4, #0]
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	200034c8 	.word	0x200034c8

08012b9c <_getpid_r>:
 8012b9c:	b510      	push	{r4, lr}
 8012b9e:	f7f0 fbb1 	bl	8003304 <_getpid>
 8012ba2:	bd10      	pop	{r4, pc}

08012ba4 <__sread>:
 8012ba4:	b570      	push	{r4, r5, r6, lr}
 8012ba6:	000c      	movs	r4, r1
 8012ba8:	250e      	movs	r5, #14
 8012baa:	5f49      	ldrsh	r1, [r1, r5]
 8012bac:	f000 faa2 	bl	80130f4 <_read_r>
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	db03      	blt.n	8012bbc <__sread+0x18>
 8012bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012bb6:	181b      	adds	r3, r3, r0
 8012bb8:	6563      	str	r3, [r4, #84]	; 0x54
 8012bba:	bd70      	pop	{r4, r5, r6, pc}
 8012bbc:	89a3      	ldrh	r3, [r4, #12]
 8012bbe:	4a02      	ldr	r2, [pc, #8]	; (8012bc8 <__sread+0x24>)
 8012bc0:	4013      	ands	r3, r2
 8012bc2:	81a3      	strh	r3, [r4, #12]
 8012bc4:	e7f9      	b.n	8012bba <__sread+0x16>
 8012bc6:	46c0      	nop			; (mov r8, r8)
 8012bc8:	ffffefff 	.word	0xffffefff

08012bcc <__swrite>:
 8012bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bce:	001f      	movs	r7, r3
 8012bd0:	898b      	ldrh	r3, [r1, #12]
 8012bd2:	0005      	movs	r5, r0
 8012bd4:	000c      	movs	r4, r1
 8012bd6:	0016      	movs	r6, r2
 8012bd8:	05db      	lsls	r3, r3, #23
 8012bda:	d505      	bpl.n	8012be8 <__swrite+0x1c>
 8012bdc:	230e      	movs	r3, #14
 8012bde:	5ec9      	ldrsh	r1, [r1, r3]
 8012be0:	2200      	movs	r2, #0
 8012be2:	2302      	movs	r3, #2
 8012be4:	f000 f9ea 	bl	8012fbc <_lseek_r>
 8012be8:	89a3      	ldrh	r3, [r4, #12]
 8012bea:	4a05      	ldr	r2, [pc, #20]	; (8012c00 <__swrite+0x34>)
 8012bec:	0028      	movs	r0, r5
 8012bee:	4013      	ands	r3, r2
 8012bf0:	81a3      	strh	r3, [r4, #12]
 8012bf2:	0032      	movs	r2, r6
 8012bf4:	230e      	movs	r3, #14
 8012bf6:	5ee1      	ldrsh	r1, [r4, r3]
 8012bf8:	003b      	movs	r3, r7
 8012bfa:	f000 f875 	bl	8012ce8 <_write_r>
 8012bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c00:	ffffefff 	.word	0xffffefff

08012c04 <__sseek>:
 8012c04:	b570      	push	{r4, r5, r6, lr}
 8012c06:	000c      	movs	r4, r1
 8012c08:	250e      	movs	r5, #14
 8012c0a:	5f49      	ldrsh	r1, [r1, r5]
 8012c0c:	f000 f9d6 	bl	8012fbc <_lseek_r>
 8012c10:	89a3      	ldrh	r3, [r4, #12]
 8012c12:	1c42      	adds	r2, r0, #1
 8012c14:	d103      	bne.n	8012c1e <__sseek+0x1a>
 8012c16:	4a05      	ldr	r2, [pc, #20]	; (8012c2c <__sseek+0x28>)
 8012c18:	4013      	ands	r3, r2
 8012c1a:	81a3      	strh	r3, [r4, #12]
 8012c1c:	bd70      	pop	{r4, r5, r6, pc}
 8012c1e:	2280      	movs	r2, #128	; 0x80
 8012c20:	0152      	lsls	r2, r2, #5
 8012c22:	4313      	orrs	r3, r2
 8012c24:	81a3      	strh	r3, [r4, #12]
 8012c26:	6560      	str	r0, [r4, #84]	; 0x54
 8012c28:	e7f8      	b.n	8012c1c <__sseek+0x18>
 8012c2a:	46c0      	nop			; (mov r8, r8)
 8012c2c:	ffffefff 	.word	0xffffefff

08012c30 <__sclose>:
 8012c30:	b510      	push	{r4, lr}
 8012c32:	230e      	movs	r3, #14
 8012c34:	5ec9      	ldrsh	r1, [r1, r3]
 8012c36:	f000 f8e3 	bl	8012e00 <_close_r>
 8012c3a:	bd10      	pop	{r4, pc}

08012c3c <__swbuf_r>:
 8012c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3e:	0005      	movs	r5, r0
 8012c40:	000e      	movs	r6, r1
 8012c42:	0014      	movs	r4, r2
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d004      	beq.n	8012c52 <__swbuf_r+0x16>
 8012c48:	6983      	ldr	r3, [r0, #24]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d101      	bne.n	8012c52 <__swbuf_r+0x16>
 8012c4e:	f7ff fa3d 	bl	80120cc <__sinit>
 8012c52:	4b22      	ldr	r3, [pc, #136]	; (8012cdc <__swbuf_r+0xa0>)
 8012c54:	429c      	cmp	r4, r3
 8012c56:	d12e      	bne.n	8012cb6 <__swbuf_r+0x7a>
 8012c58:	686c      	ldr	r4, [r5, #4]
 8012c5a:	69a3      	ldr	r3, [r4, #24]
 8012c5c:	60a3      	str	r3, [r4, #8]
 8012c5e:	89a3      	ldrh	r3, [r4, #12]
 8012c60:	071b      	lsls	r3, r3, #28
 8012c62:	d532      	bpl.n	8012cca <__swbuf_r+0x8e>
 8012c64:	6923      	ldr	r3, [r4, #16]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d02f      	beq.n	8012cca <__swbuf_r+0x8e>
 8012c6a:	6823      	ldr	r3, [r4, #0]
 8012c6c:	6922      	ldr	r2, [r4, #16]
 8012c6e:	b2f7      	uxtb	r7, r6
 8012c70:	1a98      	subs	r0, r3, r2
 8012c72:	6963      	ldr	r3, [r4, #20]
 8012c74:	b2f6      	uxtb	r6, r6
 8012c76:	4283      	cmp	r3, r0
 8012c78:	dc05      	bgt.n	8012c86 <__swbuf_r+0x4a>
 8012c7a:	0021      	movs	r1, r4
 8012c7c:	0028      	movs	r0, r5
 8012c7e:	f000 f95d 	bl	8012f3c <_fflush_r>
 8012c82:	2800      	cmp	r0, #0
 8012c84:	d127      	bne.n	8012cd6 <__swbuf_r+0x9a>
 8012c86:	68a3      	ldr	r3, [r4, #8]
 8012c88:	3001      	adds	r0, #1
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	60a3      	str	r3, [r4, #8]
 8012c8e:	6823      	ldr	r3, [r4, #0]
 8012c90:	1c5a      	adds	r2, r3, #1
 8012c92:	6022      	str	r2, [r4, #0]
 8012c94:	701f      	strb	r7, [r3, #0]
 8012c96:	6963      	ldr	r3, [r4, #20]
 8012c98:	4283      	cmp	r3, r0
 8012c9a:	d004      	beq.n	8012ca6 <__swbuf_r+0x6a>
 8012c9c:	89a3      	ldrh	r3, [r4, #12]
 8012c9e:	07db      	lsls	r3, r3, #31
 8012ca0:	d507      	bpl.n	8012cb2 <__swbuf_r+0x76>
 8012ca2:	2e0a      	cmp	r6, #10
 8012ca4:	d105      	bne.n	8012cb2 <__swbuf_r+0x76>
 8012ca6:	0021      	movs	r1, r4
 8012ca8:	0028      	movs	r0, r5
 8012caa:	f000 f947 	bl	8012f3c <_fflush_r>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d111      	bne.n	8012cd6 <__swbuf_r+0x9a>
 8012cb2:	0030      	movs	r0, r6
 8012cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cb6:	4b0a      	ldr	r3, [pc, #40]	; (8012ce0 <__swbuf_r+0xa4>)
 8012cb8:	429c      	cmp	r4, r3
 8012cba:	d101      	bne.n	8012cc0 <__swbuf_r+0x84>
 8012cbc:	68ac      	ldr	r4, [r5, #8]
 8012cbe:	e7cc      	b.n	8012c5a <__swbuf_r+0x1e>
 8012cc0:	4b08      	ldr	r3, [pc, #32]	; (8012ce4 <__swbuf_r+0xa8>)
 8012cc2:	429c      	cmp	r4, r3
 8012cc4:	d1c9      	bne.n	8012c5a <__swbuf_r+0x1e>
 8012cc6:	68ec      	ldr	r4, [r5, #12]
 8012cc8:	e7c7      	b.n	8012c5a <__swbuf_r+0x1e>
 8012cca:	0021      	movs	r1, r4
 8012ccc:	0028      	movs	r0, r5
 8012cce:	f000 f81f 	bl	8012d10 <__swsetup_r>
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	d0c9      	beq.n	8012c6a <__swbuf_r+0x2e>
 8012cd6:	2601      	movs	r6, #1
 8012cd8:	4276      	negs	r6, r6
 8012cda:	e7ea      	b.n	8012cb2 <__swbuf_r+0x76>
 8012cdc:	08014798 	.word	0x08014798
 8012ce0:	080147b8 	.word	0x080147b8
 8012ce4:	08014778 	.word	0x08014778

08012ce8 <_write_r>:
 8012ce8:	b570      	push	{r4, r5, r6, lr}
 8012cea:	0004      	movs	r4, r0
 8012cec:	0008      	movs	r0, r1
 8012cee:	0011      	movs	r1, r2
 8012cf0:	001a      	movs	r2, r3
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	4d05      	ldr	r5, [pc, #20]	; (8012d0c <_write_r+0x24>)
 8012cf6:	602b      	str	r3, [r5, #0]
 8012cf8:	f7f0 fb43 	bl	8003382 <_write>
 8012cfc:	1c43      	adds	r3, r0, #1
 8012cfe:	d103      	bne.n	8012d08 <_write_r+0x20>
 8012d00:	682b      	ldr	r3, [r5, #0]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d000      	beq.n	8012d08 <_write_r+0x20>
 8012d06:	6023      	str	r3, [r4, #0]
 8012d08:	bd70      	pop	{r4, r5, r6, pc}
 8012d0a:	46c0      	nop			; (mov r8, r8)
 8012d0c:	200034c8 	.word	0x200034c8

08012d10 <__swsetup_r>:
 8012d10:	4b37      	ldr	r3, [pc, #220]	; (8012df0 <__swsetup_r+0xe0>)
 8012d12:	b570      	push	{r4, r5, r6, lr}
 8012d14:	681d      	ldr	r5, [r3, #0]
 8012d16:	0006      	movs	r6, r0
 8012d18:	000c      	movs	r4, r1
 8012d1a:	2d00      	cmp	r5, #0
 8012d1c:	d005      	beq.n	8012d2a <__swsetup_r+0x1a>
 8012d1e:	69ab      	ldr	r3, [r5, #24]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d102      	bne.n	8012d2a <__swsetup_r+0x1a>
 8012d24:	0028      	movs	r0, r5
 8012d26:	f7ff f9d1 	bl	80120cc <__sinit>
 8012d2a:	4b32      	ldr	r3, [pc, #200]	; (8012df4 <__swsetup_r+0xe4>)
 8012d2c:	429c      	cmp	r4, r3
 8012d2e:	d10f      	bne.n	8012d50 <__swsetup_r+0x40>
 8012d30:	686c      	ldr	r4, [r5, #4]
 8012d32:	230c      	movs	r3, #12
 8012d34:	5ee2      	ldrsh	r2, [r4, r3]
 8012d36:	b293      	uxth	r3, r2
 8012d38:	0711      	lsls	r1, r2, #28
 8012d3a:	d42d      	bmi.n	8012d98 <__swsetup_r+0x88>
 8012d3c:	06d9      	lsls	r1, r3, #27
 8012d3e:	d411      	bmi.n	8012d64 <__swsetup_r+0x54>
 8012d40:	2309      	movs	r3, #9
 8012d42:	2001      	movs	r0, #1
 8012d44:	6033      	str	r3, [r6, #0]
 8012d46:	3337      	adds	r3, #55	; 0x37
 8012d48:	4313      	orrs	r3, r2
 8012d4a:	81a3      	strh	r3, [r4, #12]
 8012d4c:	4240      	negs	r0, r0
 8012d4e:	bd70      	pop	{r4, r5, r6, pc}
 8012d50:	4b29      	ldr	r3, [pc, #164]	; (8012df8 <__swsetup_r+0xe8>)
 8012d52:	429c      	cmp	r4, r3
 8012d54:	d101      	bne.n	8012d5a <__swsetup_r+0x4a>
 8012d56:	68ac      	ldr	r4, [r5, #8]
 8012d58:	e7eb      	b.n	8012d32 <__swsetup_r+0x22>
 8012d5a:	4b28      	ldr	r3, [pc, #160]	; (8012dfc <__swsetup_r+0xec>)
 8012d5c:	429c      	cmp	r4, r3
 8012d5e:	d1e8      	bne.n	8012d32 <__swsetup_r+0x22>
 8012d60:	68ec      	ldr	r4, [r5, #12]
 8012d62:	e7e6      	b.n	8012d32 <__swsetup_r+0x22>
 8012d64:	075b      	lsls	r3, r3, #29
 8012d66:	d513      	bpl.n	8012d90 <__swsetup_r+0x80>
 8012d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d6a:	2900      	cmp	r1, #0
 8012d6c:	d008      	beq.n	8012d80 <__swsetup_r+0x70>
 8012d6e:	0023      	movs	r3, r4
 8012d70:	3344      	adds	r3, #68	; 0x44
 8012d72:	4299      	cmp	r1, r3
 8012d74:	d002      	beq.n	8012d7c <__swsetup_r+0x6c>
 8012d76:	0030      	movs	r0, r6
 8012d78:	f7ff fab8 	bl	80122ec <_free_r>
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	6363      	str	r3, [r4, #52]	; 0x34
 8012d80:	2224      	movs	r2, #36	; 0x24
 8012d82:	89a3      	ldrh	r3, [r4, #12]
 8012d84:	4393      	bics	r3, r2
 8012d86:	81a3      	strh	r3, [r4, #12]
 8012d88:	2300      	movs	r3, #0
 8012d8a:	6063      	str	r3, [r4, #4]
 8012d8c:	6923      	ldr	r3, [r4, #16]
 8012d8e:	6023      	str	r3, [r4, #0]
 8012d90:	2308      	movs	r3, #8
 8012d92:	89a2      	ldrh	r2, [r4, #12]
 8012d94:	4313      	orrs	r3, r2
 8012d96:	81a3      	strh	r3, [r4, #12]
 8012d98:	6923      	ldr	r3, [r4, #16]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d10b      	bne.n	8012db6 <__swsetup_r+0xa6>
 8012d9e:	21a0      	movs	r1, #160	; 0xa0
 8012da0:	2280      	movs	r2, #128	; 0x80
 8012da2:	89a3      	ldrh	r3, [r4, #12]
 8012da4:	0089      	lsls	r1, r1, #2
 8012da6:	0092      	lsls	r2, r2, #2
 8012da8:	400b      	ands	r3, r1
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d003      	beq.n	8012db6 <__swsetup_r+0xa6>
 8012dae:	0021      	movs	r1, r4
 8012db0:	0030      	movs	r0, r6
 8012db2:	f000 f93f 	bl	8013034 <__smakebuf_r>
 8012db6:	220c      	movs	r2, #12
 8012db8:	5ea3      	ldrsh	r3, [r4, r2]
 8012dba:	2001      	movs	r0, #1
 8012dbc:	001a      	movs	r2, r3
 8012dbe:	b299      	uxth	r1, r3
 8012dc0:	4002      	ands	r2, r0
 8012dc2:	4203      	tst	r3, r0
 8012dc4:	d00f      	beq.n	8012de6 <__swsetup_r+0xd6>
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	60a2      	str	r2, [r4, #8]
 8012dca:	6962      	ldr	r2, [r4, #20]
 8012dcc:	4252      	negs	r2, r2
 8012dce:	61a2      	str	r2, [r4, #24]
 8012dd0:	2000      	movs	r0, #0
 8012dd2:	6922      	ldr	r2, [r4, #16]
 8012dd4:	4282      	cmp	r2, r0
 8012dd6:	d1ba      	bne.n	8012d4e <__swsetup_r+0x3e>
 8012dd8:	060a      	lsls	r2, r1, #24
 8012dda:	d5b8      	bpl.n	8012d4e <__swsetup_r+0x3e>
 8012ddc:	2240      	movs	r2, #64	; 0x40
 8012dde:	4313      	orrs	r3, r2
 8012de0:	81a3      	strh	r3, [r4, #12]
 8012de2:	3801      	subs	r0, #1
 8012de4:	e7b3      	b.n	8012d4e <__swsetup_r+0x3e>
 8012de6:	0788      	lsls	r0, r1, #30
 8012de8:	d400      	bmi.n	8012dec <__swsetup_r+0xdc>
 8012dea:	6962      	ldr	r2, [r4, #20]
 8012dec:	60a2      	str	r2, [r4, #8]
 8012dee:	e7ef      	b.n	8012dd0 <__swsetup_r+0xc0>
 8012df0:	20000030 	.word	0x20000030
 8012df4:	08014798 	.word	0x08014798
 8012df8:	080147b8 	.word	0x080147b8
 8012dfc:	08014778 	.word	0x08014778

08012e00 <_close_r>:
 8012e00:	2300      	movs	r3, #0
 8012e02:	b570      	push	{r4, r5, r6, lr}
 8012e04:	4d06      	ldr	r5, [pc, #24]	; (8012e20 <_close_r+0x20>)
 8012e06:	0004      	movs	r4, r0
 8012e08:	0008      	movs	r0, r1
 8012e0a:	602b      	str	r3, [r5, #0]
 8012e0c:	f7f0 fad5 	bl	80033ba <_close>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	d103      	bne.n	8012e1c <_close_r+0x1c>
 8012e14:	682b      	ldr	r3, [r5, #0]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d000      	beq.n	8012e1c <_close_r+0x1c>
 8012e1a:	6023      	str	r3, [r4, #0]
 8012e1c:	bd70      	pop	{r4, r5, r6, pc}
 8012e1e:	46c0      	nop			; (mov r8, r8)
 8012e20:	200034c8 	.word	0x200034c8

08012e24 <__sflush_r>:
 8012e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e26:	898b      	ldrh	r3, [r1, #12]
 8012e28:	0005      	movs	r5, r0
 8012e2a:	000c      	movs	r4, r1
 8012e2c:	071a      	lsls	r2, r3, #28
 8012e2e:	d45f      	bmi.n	8012ef0 <__sflush_r+0xcc>
 8012e30:	684a      	ldr	r2, [r1, #4]
 8012e32:	2a00      	cmp	r2, #0
 8012e34:	dc04      	bgt.n	8012e40 <__sflush_r+0x1c>
 8012e36:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012e38:	2a00      	cmp	r2, #0
 8012e3a:	dc01      	bgt.n	8012e40 <__sflush_r+0x1c>
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012e40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012e42:	2f00      	cmp	r7, #0
 8012e44:	d0fa      	beq.n	8012e3c <__sflush_r+0x18>
 8012e46:	2200      	movs	r2, #0
 8012e48:	2180      	movs	r1, #128	; 0x80
 8012e4a:	682e      	ldr	r6, [r5, #0]
 8012e4c:	602a      	str	r2, [r5, #0]
 8012e4e:	001a      	movs	r2, r3
 8012e50:	0149      	lsls	r1, r1, #5
 8012e52:	400a      	ands	r2, r1
 8012e54:	420b      	tst	r3, r1
 8012e56:	d034      	beq.n	8012ec2 <__sflush_r+0x9e>
 8012e58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e5a:	89a3      	ldrh	r3, [r4, #12]
 8012e5c:	075b      	lsls	r3, r3, #29
 8012e5e:	d506      	bpl.n	8012e6e <__sflush_r+0x4a>
 8012e60:	6863      	ldr	r3, [r4, #4]
 8012e62:	1ac0      	subs	r0, r0, r3
 8012e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d001      	beq.n	8012e6e <__sflush_r+0x4a>
 8012e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e6c:	1ac0      	subs	r0, r0, r3
 8012e6e:	0002      	movs	r2, r0
 8012e70:	6a21      	ldr	r1, [r4, #32]
 8012e72:	2300      	movs	r3, #0
 8012e74:	0028      	movs	r0, r5
 8012e76:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012e78:	47b8      	blx	r7
 8012e7a:	89a1      	ldrh	r1, [r4, #12]
 8012e7c:	1c43      	adds	r3, r0, #1
 8012e7e:	d106      	bne.n	8012e8e <__sflush_r+0x6a>
 8012e80:	682b      	ldr	r3, [r5, #0]
 8012e82:	2b1d      	cmp	r3, #29
 8012e84:	d831      	bhi.n	8012eea <__sflush_r+0xc6>
 8012e86:	4a2c      	ldr	r2, [pc, #176]	; (8012f38 <__sflush_r+0x114>)
 8012e88:	40da      	lsrs	r2, r3
 8012e8a:	07d3      	lsls	r3, r2, #31
 8012e8c:	d52d      	bpl.n	8012eea <__sflush_r+0xc6>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	6063      	str	r3, [r4, #4]
 8012e92:	6923      	ldr	r3, [r4, #16]
 8012e94:	6023      	str	r3, [r4, #0]
 8012e96:	04cb      	lsls	r3, r1, #19
 8012e98:	d505      	bpl.n	8012ea6 <__sflush_r+0x82>
 8012e9a:	1c43      	adds	r3, r0, #1
 8012e9c:	d102      	bne.n	8012ea4 <__sflush_r+0x80>
 8012e9e:	682b      	ldr	r3, [r5, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d100      	bne.n	8012ea6 <__sflush_r+0x82>
 8012ea4:	6560      	str	r0, [r4, #84]	; 0x54
 8012ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ea8:	602e      	str	r6, [r5, #0]
 8012eaa:	2900      	cmp	r1, #0
 8012eac:	d0c6      	beq.n	8012e3c <__sflush_r+0x18>
 8012eae:	0023      	movs	r3, r4
 8012eb0:	3344      	adds	r3, #68	; 0x44
 8012eb2:	4299      	cmp	r1, r3
 8012eb4:	d002      	beq.n	8012ebc <__sflush_r+0x98>
 8012eb6:	0028      	movs	r0, r5
 8012eb8:	f7ff fa18 	bl	80122ec <_free_r>
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	6360      	str	r0, [r4, #52]	; 0x34
 8012ec0:	e7bd      	b.n	8012e3e <__sflush_r+0x1a>
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	0028      	movs	r0, r5
 8012ec6:	6a21      	ldr	r1, [r4, #32]
 8012ec8:	47b8      	blx	r7
 8012eca:	1c43      	adds	r3, r0, #1
 8012ecc:	d1c5      	bne.n	8012e5a <__sflush_r+0x36>
 8012ece:	682b      	ldr	r3, [r5, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d0c2      	beq.n	8012e5a <__sflush_r+0x36>
 8012ed4:	2b1d      	cmp	r3, #29
 8012ed6:	d001      	beq.n	8012edc <__sflush_r+0xb8>
 8012ed8:	2b16      	cmp	r3, #22
 8012eda:	d101      	bne.n	8012ee0 <__sflush_r+0xbc>
 8012edc:	602e      	str	r6, [r5, #0]
 8012ede:	e7ad      	b.n	8012e3c <__sflush_r+0x18>
 8012ee0:	2340      	movs	r3, #64	; 0x40
 8012ee2:	89a2      	ldrh	r2, [r4, #12]
 8012ee4:	4313      	orrs	r3, r2
 8012ee6:	81a3      	strh	r3, [r4, #12]
 8012ee8:	e7a9      	b.n	8012e3e <__sflush_r+0x1a>
 8012eea:	2340      	movs	r3, #64	; 0x40
 8012eec:	430b      	orrs	r3, r1
 8012eee:	e7fa      	b.n	8012ee6 <__sflush_r+0xc2>
 8012ef0:	690f      	ldr	r7, [r1, #16]
 8012ef2:	2f00      	cmp	r7, #0
 8012ef4:	d0a2      	beq.n	8012e3c <__sflush_r+0x18>
 8012ef6:	680a      	ldr	r2, [r1, #0]
 8012ef8:	600f      	str	r7, [r1, #0]
 8012efa:	1bd2      	subs	r2, r2, r7
 8012efc:	9201      	str	r2, [sp, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	079b      	lsls	r3, r3, #30
 8012f02:	d100      	bne.n	8012f06 <__sflush_r+0xe2>
 8012f04:	694a      	ldr	r2, [r1, #20]
 8012f06:	60a2      	str	r2, [r4, #8]
 8012f08:	9b01      	ldr	r3, [sp, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	dc00      	bgt.n	8012f10 <__sflush_r+0xec>
 8012f0e:	e795      	b.n	8012e3c <__sflush_r+0x18>
 8012f10:	003a      	movs	r2, r7
 8012f12:	0028      	movs	r0, r5
 8012f14:	9b01      	ldr	r3, [sp, #4]
 8012f16:	6a21      	ldr	r1, [r4, #32]
 8012f18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f1a:	47b0      	blx	r6
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	dc06      	bgt.n	8012f2e <__sflush_r+0x10a>
 8012f20:	2340      	movs	r3, #64	; 0x40
 8012f22:	2001      	movs	r0, #1
 8012f24:	89a2      	ldrh	r2, [r4, #12]
 8012f26:	4240      	negs	r0, r0
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	81a3      	strh	r3, [r4, #12]
 8012f2c:	e787      	b.n	8012e3e <__sflush_r+0x1a>
 8012f2e:	9b01      	ldr	r3, [sp, #4]
 8012f30:	183f      	adds	r7, r7, r0
 8012f32:	1a1b      	subs	r3, r3, r0
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	e7e7      	b.n	8012f08 <__sflush_r+0xe4>
 8012f38:	20400001 	.word	0x20400001

08012f3c <_fflush_r>:
 8012f3c:	690b      	ldr	r3, [r1, #16]
 8012f3e:	b570      	push	{r4, r5, r6, lr}
 8012f40:	0005      	movs	r5, r0
 8012f42:	000c      	movs	r4, r1
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d102      	bne.n	8012f4e <_fflush_r+0x12>
 8012f48:	2500      	movs	r5, #0
 8012f4a:	0028      	movs	r0, r5
 8012f4c:	bd70      	pop	{r4, r5, r6, pc}
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d004      	beq.n	8012f5c <_fflush_r+0x20>
 8012f52:	6983      	ldr	r3, [r0, #24]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d101      	bne.n	8012f5c <_fflush_r+0x20>
 8012f58:	f7ff f8b8 	bl	80120cc <__sinit>
 8012f5c:	4b14      	ldr	r3, [pc, #80]	; (8012fb0 <_fflush_r+0x74>)
 8012f5e:	429c      	cmp	r4, r3
 8012f60:	d11b      	bne.n	8012f9a <_fflush_r+0x5e>
 8012f62:	686c      	ldr	r4, [r5, #4]
 8012f64:	220c      	movs	r2, #12
 8012f66:	5ea3      	ldrsh	r3, [r4, r2]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d0ed      	beq.n	8012f48 <_fflush_r+0xc>
 8012f6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f6e:	07d2      	lsls	r2, r2, #31
 8012f70:	d404      	bmi.n	8012f7c <_fflush_r+0x40>
 8012f72:	059b      	lsls	r3, r3, #22
 8012f74:	d402      	bmi.n	8012f7c <_fflush_r+0x40>
 8012f76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f78:	f7ff f97d 	bl	8012276 <__retarget_lock_acquire_recursive>
 8012f7c:	0028      	movs	r0, r5
 8012f7e:	0021      	movs	r1, r4
 8012f80:	f7ff ff50 	bl	8012e24 <__sflush_r>
 8012f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f86:	0005      	movs	r5, r0
 8012f88:	07db      	lsls	r3, r3, #31
 8012f8a:	d4de      	bmi.n	8012f4a <_fflush_r+0xe>
 8012f8c:	89a3      	ldrh	r3, [r4, #12]
 8012f8e:	059b      	lsls	r3, r3, #22
 8012f90:	d4db      	bmi.n	8012f4a <_fflush_r+0xe>
 8012f92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f94:	f7ff f970 	bl	8012278 <__retarget_lock_release_recursive>
 8012f98:	e7d7      	b.n	8012f4a <_fflush_r+0xe>
 8012f9a:	4b06      	ldr	r3, [pc, #24]	; (8012fb4 <_fflush_r+0x78>)
 8012f9c:	429c      	cmp	r4, r3
 8012f9e:	d101      	bne.n	8012fa4 <_fflush_r+0x68>
 8012fa0:	68ac      	ldr	r4, [r5, #8]
 8012fa2:	e7df      	b.n	8012f64 <_fflush_r+0x28>
 8012fa4:	4b04      	ldr	r3, [pc, #16]	; (8012fb8 <_fflush_r+0x7c>)
 8012fa6:	429c      	cmp	r4, r3
 8012fa8:	d1dc      	bne.n	8012f64 <_fflush_r+0x28>
 8012faa:	68ec      	ldr	r4, [r5, #12]
 8012fac:	e7da      	b.n	8012f64 <_fflush_r+0x28>
 8012fae:	46c0      	nop			; (mov r8, r8)
 8012fb0:	08014798 	.word	0x08014798
 8012fb4:	080147b8 	.word	0x080147b8
 8012fb8:	08014778 	.word	0x08014778

08012fbc <_lseek_r>:
 8012fbc:	b570      	push	{r4, r5, r6, lr}
 8012fbe:	0004      	movs	r4, r0
 8012fc0:	0008      	movs	r0, r1
 8012fc2:	0011      	movs	r1, r2
 8012fc4:	001a      	movs	r2, r3
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	4d05      	ldr	r5, [pc, #20]	; (8012fe0 <_lseek_r+0x24>)
 8012fca:	602b      	str	r3, [r5, #0]
 8012fcc:	f7f0 fa16 	bl	80033fc <_lseek>
 8012fd0:	1c43      	adds	r3, r0, #1
 8012fd2:	d103      	bne.n	8012fdc <_lseek_r+0x20>
 8012fd4:	682b      	ldr	r3, [r5, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d000      	beq.n	8012fdc <_lseek_r+0x20>
 8012fda:	6023      	str	r3, [r4, #0]
 8012fdc:	bd70      	pop	{r4, r5, r6, pc}
 8012fde:	46c0      	nop			; (mov r8, r8)
 8012fe0:	200034c8 	.word	0x200034c8

08012fe4 <__swhatbuf_r>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	000e      	movs	r6, r1
 8012fe8:	001d      	movs	r5, r3
 8012fea:	230e      	movs	r3, #14
 8012fec:	5ec9      	ldrsh	r1, [r1, r3]
 8012fee:	0014      	movs	r4, r2
 8012ff0:	b096      	sub	sp, #88	; 0x58
 8012ff2:	2900      	cmp	r1, #0
 8012ff4:	da07      	bge.n	8013006 <__swhatbuf_r+0x22>
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	602b      	str	r3, [r5, #0]
 8012ffa:	89b3      	ldrh	r3, [r6, #12]
 8012ffc:	061b      	lsls	r3, r3, #24
 8012ffe:	d411      	bmi.n	8013024 <__swhatbuf_r+0x40>
 8013000:	2380      	movs	r3, #128	; 0x80
 8013002:	00db      	lsls	r3, r3, #3
 8013004:	e00f      	b.n	8013026 <__swhatbuf_r+0x42>
 8013006:	466a      	mov	r2, sp
 8013008:	f000 f888 	bl	801311c <_fstat_r>
 801300c:	2800      	cmp	r0, #0
 801300e:	dbf2      	blt.n	8012ff6 <__swhatbuf_r+0x12>
 8013010:	23f0      	movs	r3, #240	; 0xf0
 8013012:	9901      	ldr	r1, [sp, #4]
 8013014:	021b      	lsls	r3, r3, #8
 8013016:	4019      	ands	r1, r3
 8013018:	4b05      	ldr	r3, [pc, #20]	; (8013030 <__swhatbuf_r+0x4c>)
 801301a:	18c9      	adds	r1, r1, r3
 801301c:	424b      	negs	r3, r1
 801301e:	4159      	adcs	r1, r3
 8013020:	6029      	str	r1, [r5, #0]
 8013022:	e7ed      	b.n	8013000 <__swhatbuf_r+0x1c>
 8013024:	2340      	movs	r3, #64	; 0x40
 8013026:	2000      	movs	r0, #0
 8013028:	6023      	str	r3, [r4, #0]
 801302a:	b016      	add	sp, #88	; 0x58
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	46c0      	nop			; (mov r8, r8)
 8013030:	ffffe000 	.word	0xffffe000

08013034 <__smakebuf_r>:
 8013034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013036:	2602      	movs	r6, #2
 8013038:	898b      	ldrh	r3, [r1, #12]
 801303a:	0005      	movs	r5, r0
 801303c:	000c      	movs	r4, r1
 801303e:	4233      	tst	r3, r6
 8013040:	d006      	beq.n	8013050 <__smakebuf_r+0x1c>
 8013042:	0023      	movs	r3, r4
 8013044:	3347      	adds	r3, #71	; 0x47
 8013046:	6023      	str	r3, [r4, #0]
 8013048:	6123      	str	r3, [r4, #16]
 801304a:	2301      	movs	r3, #1
 801304c:	6163      	str	r3, [r4, #20]
 801304e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013050:	466a      	mov	r2, sp
 8013052:	ab01      	add	r3, sp, #4
 8013054:	f7ff ffc6 	bl	8012fe4 <__swhatbuf_r>
 8013058:	9900      	ldr	r1, [sp, #0]
 801305a:	0007      	movs	r7, r0
 801305c:	0028      	movs	r0, r5
 801305e:	f7ff f98f 	bl	8012380 <_malloc_r>
 8013062:	2800      	cmp	r0, #0
 8013064:	d108      	bne.n	8013078 <__smakebuf_r+0x44>
 8013066:	220c      	movs	r2, #12
 8013068:	5ea3      	ldrsh	r3, [r4, r2]
 801306a:	059a      	lsls	r2, r3, #22
 801306c:	d4ef      	bmi.n	801304e <__smakebuf_r+0x1a>
 801306e:	2203      	movs	r2, #3
 8013070:	4393      	bics	r3, r2
 8013072:	431e      	orrs	r6, r3
 8013074:	81a6      	strh	r6, [r4, #12]
 8013076:	e7e4      	b.n	8013042 <__smakebuf_r+0xe>
 8013078:	4b0f      	ldr	r3, [pc, #60]	; (80130b8 <__smakebuf_r+0x84>)
 801307a:	62ab      	str	r3, [r5, #40]	; 0x28
 801307c:	2380      	movs	r3, #128	; 0x80
 801307e:	89a2      	ldrh	r2, [r4, #12]
 8013080:	6020      	str	r0, [r4, #0]
 8013082:	4313      	orrs	r3, r2
 8013084:	81a3      	strh	r3, [r4, #12]
 8013086:	9b00      	ldr	r3, [sp, #0]
 8013088:	6120      	str	r0, [r4, #16]
 801308a:	6163      	str	r3, [r4, #20]
 801308c:	9b01      	ldr	r3, [sp, #4]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d00d      	beq.n	80130ae <__smakebuf_r+0x7a>
 8013092:	0028      	movs	r0, r5
 8013094:	230e      	movs	r3, #14
 8013096:	5ee1      	ldrsh	r1, [r4, r3]
 8013098:	f000 f852 	bl	8013140 <_isatty_r>
 801309c:	2800      	cmp	r0, #0
 801309e:	d006      	beq.n	80130ae <__smakebuf_r+0x7a>
 80130a0:	2203      	movs	r2, #3
 80130a2:	89a3      	ldrh	r3, [r4, #12]
 80130a4:	4393      	bics	r3, r2
 80130a6:	001a      	movs	r2, r3
 80130a8:	2301      	movs	r3, #1
 80130aa:	4313      	orrs	r3, r2
 80130ac:	81a3      	strh	r3, [r4, #12]
 80130ae:	89a0      	ldrh	r0, [r4, #12]
 80130b0:	4307      	orrs	r7, r0
 80130b2:	81a7      	strh	r7, [r4, #12]
 80130b4:	e7cb      	b.n	801304e <__smakebuf_r+0x1a>
 80130b6:	46c0      	nop			; (mov r8, r8)
 80130b8:	08012051 	.word	0x08012051

080130bc <memchr>:
 80130bc:	b2c9      	uxtb	r1, r1
 80130be:	1882      	adds	r2, r0, r2
 80130c0:	4290      	cmp	r0, r2
 80130c2:	d101      	bne.n	80130c8 <memchr+0xc>
 80130c4:	2000      	movs	r0, #0
 80130c6:	4770      	bx	lr
 80130c8:	7803      	ldrb	r3, [r0, #0]
 80130ca:	428b      	cmp	r3, r1
 80130cc:	d0fb      	beq.n	80130c6 <memchr+0xa>
 80130ce:	3001      	adds	r0, #1
 80130d0:	e7f6      	b.n	80130c0 <memchr+0x4>
	...

080130d4 <__malloc_lock>:
 80130d4:	b510      	push	{r4, lr}
 80130d6:	4802      	ldr	r0, [pc, #8]	; (80130e0 <__malloc_lock+0xc>)
 80130d8:	f7ff f8cd 	bl	8012276 <__retarget_lock_acquire_recursive>
 80130dc:	bd10      	pop	{r4, pc}
 80130de:	46c0      	nop			; (mov r8, r8)
 80130e0:	200034c0 	.word	0x200034c0

080130e4 <__malloc_unlock>:
 80130e4:	b510      	push	{r4, lr}
 80130e6:	4802      	ldr	r0, [pc, #8]	; (80130f0 <__malloc_unlock+0xc>)
 80130e8:	f7ff f8c6 	bl	8012278 <__retarget_lock_release_recursive>
 80130ec:	bd10      	pop	{r4, pc}
 80130ee:	46c0      	nop			; (mov r8, r8)
 80130f0:	200034c0 	.word	0x200034c0

080130f4 <_read_r>:
 80130f4:	b570      	push	{r4, r5, r6, lr}
 80130f6:	0004      	movs	r4, r0
 80130f8:	0008      	movs	r0, r1
 80130fa:	0011      	movs	r1, r2
 80130fc:	001a      	movs	r2, r3
 80130fe:	2300      	movs	r3, #0
 8013100:	4d05      	ldr	r5, [pc, #20]	; (8013118 <_read_r+0x24>)
 8013102:	602b      	str	r3, [r5, #0]
 8013104:	f7f0 f920 	bl	8003348 <_read>
 8013108:	1c43      	adds	r3, r0, #1
 801310a:	d103      	bne.n	8013114 <_read_r+0x20>
 801310c:	682b      	ldr	r3, [r5, #0]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d000      	beq.n	8013114 <_read_r+0x20>
 8013112:	6023      	str	r3, [r4, #0]
 8013114:	bd70      	pop	{r4, r5, r6, pc}
 8013116:	46c0      	nop			; (mov r8, r8)
 8013118:	200034c8 	.word	0x200034c8

0801311c <_fstat_r>:
 801311c:	2300      	movs	r3, #0
 801311e:	b570      	push	{r4, r5, r6, lr}
 8013120:	4d06      	ldr	r5, [pc, #24]	; (801313c <_fstat_r+0x20>)
 8013122:	0004      	movs	r4, r0
 8013124:	0008      	movs	r0, r1
 8013126:	0011      	movs	r1, r2
 8013128:	602b      	str	r3, [r5, #0]
 801312a:	f7f0 f950 	bl	80033ce <_fstat>
 801312e:	1c43      	adds	r3, r0, #1
 8013130:	d103      	bne.n	801313a <_fstat_r+0x1e>
 8013132:	682b      	ldr	r3, [r5, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d000      	beq.n	801313a <_fstat_r+0x1e>
 8013138:	6023      	str	r3, [r4, #0]
 801313a:	bd70      	pop	{r4, r5, r6, pc}
 801313c:	200034c8 	.word	0x200034c8

08013140 <_isatty_r>:
 8013140:	2300      	movs	r3, #0
 8013142:	b570      	push	{r4, r5, r6, lr}
 8013144:	4d06      	ldr	r5, [pc, #24]	; (8013160 <_isatty_r+0x20>)
 8013146:	0004      	movs	r4, r0
 8013148:	0008      	movs	r0, r1
 801314a:	602b      	str	r3, [r5, #0]
 801314c:	f7f0 f94d 	bl	80033ea <_isatty>
 8013150:	1c43      	adds	r3, r0, #1
 8013152:	d103      	bne.n	801315c <_isatty_r+0x1c>
 8013154:	682b      	ldr	r3, [r5, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d000      	beq.n	801315c <_isatty_r+0x1c>
 801315a:	6023      	str	r3, [r4, #0]
 801315c:	bd70      	pop	{r4, r5, r6, pc}
 801315e:	46c0      	nop			; (mov r8, r8)
 8013160:	200034c8 	.word	0x200034c8

08013164 <_init>:
 8013164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013166:	46c0      	nop			; (mov r8, r8)
 8013168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801316a:	bc08      	pop	{r3}
 801316c:	469e      	mov	lr, r3
 801316e:	4770      	bx	lr

08013170 <_fini>:
 8013170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013172:	46c0      	nop			; (mov r8, r8)
 8013174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013176:	bc08      	pop	{r3}
 8013178:	469e      	mov	lr, r3
 801317a:	4770      	bx	lr
